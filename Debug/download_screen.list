
download_screen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002084c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000020a0  08020aec  08020aec  00030aec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08022b8c  08022b8c  00032b8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08022b94  08022b94  00032b94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08022b98  08022b98  00032b98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000cc  24000000  08022b9c  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000057a8  240000e0  08022c68  000400e0  2**5
                  ALLOC
  8 ._user_heap_stack 00000600  24005888  08022c68  00045888  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000400cc  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  000400fa  2**0
                  CONTENTS, READONLY
 11 .debug_info   0006f550  00000000  00000000  0004013d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 0000f13e  00000000  00000000  000af68d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00003140  00000000  00000000  000be7d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00002420  00000000  00000000  000c1910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0004cf04  00000000  00000000  000c3d30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0005a160  00000000  00000000  00110c34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001a22ca  00000000  00000000  0016ad94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000b9d4  00000000  00000000  0030d060  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000106  00000000  00000000  00318a34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240000e0 	.word	0x240000e0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08020ad4 	.word	0x08020ad4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240000e4 	.word	0x240000e4
 80002dc:	08020ad4 	.word	0x08020ad4

080002e0 <_tx_initialize_low_level>:
    .thumb_func
_tx_initialize_low_level:
@
@    /* Disable interrupts during ThreadX initialization.  */
@
    CPSID   i
 80002e0:	b672      	cpsid	i
    STR     r1, [r0]                                @ Setup first unused memory pointer
#endif
@
@    /* Setup Vector Table Offset Register.  */
@
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 80002e2:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 80002e6:	4919      	ldr	r1, [pc, #100]	; (800034c <__tx_DBGHandler+0x4>)
    STR     r1, [r0, #0xD08]                        @ Set vector table address
 80002e8:	f8c0 1d08 	str.w	r1, [r0, #3336]	; 0xd08
@
@    /* Set system stack pointer from vector value.  */
@
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 80002ec:	4818      	ldr	r0, [pc, #96]	; (8000350 <__tx_DBGHandler+0x8>)
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 80002ee:	4917      	ldr	r1, [pc, #92]	; (800034c <__tx_DBGHandler+0x4>)
    LDR     r1, [r1]                                @ Pickup reset stack pointer
 80002f0:	6809      	ldr	r1, [r1, #0]
    STR     r1, [r0]                                @ Save system stack pointer
 80002f2:	6001      	str	r1, [r0, #0]
@
@    /* Enable the cycle count register.  */
@
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 80002f4:	4817      	ldr	r0, [pc, #92]	; (8000354 <__tx_DBGHandler+0xc>)
    LDR     r1, [r0]                                @ Pickup the current value
 80002f6:	6801      	ldr	r1, [r0, #0]
    ORR     r1, r1, #1                              @ Set the CYCCNTENA bit
 80002f8:	f041 0101 	orr.w	r1, r1, #1
    STR     r1, [r0]                                @ Enable the cycle count register
 80002fc:	6001      	str	r1, [r0, #0]
@
@    /* Configure SysTick for 100Hz clock, or 16384 cycles if no reference.  */
@
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 80002fe:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =SYSTICK_CYCLES
 8000302:	4915      	ldr	r1, [pc, #84]	; (8000358 <__tx_DBGHandler+0x10>)
    STR     r1, [r0, #0x14]                         @ Setup SysTick Reload Value
 8000304:	6141      	str	r1, [r0, #20]
    MOV     r1, #0x7                                @ Build SysTick Control Enable Value
 8000306:	f04f 0107 	mov.w	r1, #7
    STR     r1, [r0, #0x10]                         @ Setup SysTick Control
 800030a:	6101      	str	r1, [r0, #16]
@
@    /* Configure handler priorities.  */
@
    LDR     r1, =0x00000000                         @ Rsrv, UsgF, BusF, MemM
 800030c:	f04f 0100 	mov.w	r1, #0
    STR     r1, [r0, #0xD18]                        @ Setup System Handlers 4-7 Priority Registers
 8000310:	f8c0 1d18 	str.w	r1, [r0, #3352]	; 0xd18

    LDR     r1, =0xFF000000                         @ SVCl, Rsrv, Rsrv, Rsrv
 8000314:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    STR     r1, [r0, #0xD1C]                        @ Setup System Handlers 8-11 Priority Registers
 8000318:	f8c0 1d1c 	str.w	r1, [r0, #3356]	; 0xd1c
                                                    @ Note: SVC must be lowest priority, which is 0xFF

    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 800031c:	490f      	ldr	r1, [pc, #60]	; (800035c <__tx_DBGHandler+0x14>)
    STR     r1, [r0, #0xD20]                        @ Setup System Handlers 12-15 Priority Registers
 800031e:	f8c0 1d20 	str.w	r1, [r0, #3360]	; 0xd20
                                                    @ Note: PnSV must be lowest priority, which is 0xFF
@
@    /* Return to caller.  */
@
    BX      lr
 8000322:	4770      	bx	lr

08000324 <__tx_BadHandler>:
@/* Define shells for each of the unused vectors.  */
@
    .global  __tx_BadHandler
    .thumb_func
__tx_BadHandler:
    B       __tx_BadHandler
 8000324:	f7ff bffe 	b.w	8000324 <__tx_BadHandler>

08000328 <__tx_HardfaultHandler>:
@ /* added to catch the hardfault */

    .global  __tx_HardfaultHandler
    .thumb_func
__tx_HardfaultHandler:
    B       __tx_HardfaultHandler
 8000328:	f7ff bffe 	b.w	8000328 <__tx_HardfaultHandler>

0800032c <__tx_SVCallHandler>:
@ /* added to catch the SVC */

    .global  __tx_SVCallHandler
    .thumb_func
__tx_SVCallHandler:
    B       __tx_SVCallHandler
 800032c:	f7ff bffe 	b.w	800032c <__tx_SVCallHandler>

08000330 <__tx_IntHandler>:
    .global  __tx_IntHandler
    .thumb_func
__tx_IntHandler:
@ VOID InterruptHandler (VOID)
@ {
    PUSH    {r0, lr}
 8000330:	b501      	push	{r0, lr}
@    /* BL <your C Function>.... */

#ifdef TX_EXECUTION_PROFILE_ENABLE
    BL      _tx_execution_isr_exit              @ Call the ISR exit function
#endif
    POP     {r0, lr}
 8000332:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 8000336:	4770      	bx	lr

08000338 <SysTick_Handler>:
    .thumb_func
SysTick_Handler:
@ VOID TimerInterruptHandler (VOID)
@ {
@
    PUSH    {r0, lr}
 8000338:	b501      	push	{r0, lr}
#ifdef TX_EXECUTION_PROFILE_ENABLE
    BL      _tx_execution_isr_enter             @ Call the ISR enter function
#endif
    BL      _tx_timer_interrupt
 800033a:	f000 f891 	bl	8000460 <_tx_timer_interrupt>
#ifdef TX_EXECUTION_PROFILE_ENABLE
    BL      _tx_execution_isr_exit              @ Call the ISR exit function
#endif
    POP     {r0, lr}
 800033e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 8000342:	4770      	bx	lr

08000344 <__tx_NMIHandler>:

@ /* NMI, DBG handlers */
    .global  __tx_NMIHandler
    .thumb_func
__tx_NMIHandler:
    B       __tx_NMIHandler
 8000344:	f7ff bffe 	b.w	8000344 <__tx_NMIHandler>

08000348 <__tx_DBGHandler>:

    .global  __tx_DBGHandler
    .thumb_func
__tx_DBGHandler:
    B       __tx_DBGHandler
 8000348:	f7ff bffe 	b.w	8000348 <__tx_DBGHandler>
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 800034c:	08000000 	.word	0x08000000
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 8000350:	240050c8 	.word	0x240050c8
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 8000354:	e0001000 	.word	0xe0001000
    LDR     r1, =SYSTICK_CYCLES
 8000358:	003d08ff 	.word	0x003d08ff
    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 800035c:	40ff0000 	.word	0x40ff0000

08000360 <_tx_thread_schedule>:
       from the first schedule request. Subsequent scheduling occurs
       from the PendSV handling routine below. */

    /* Clear the preempt-disable flag to enable rescheduling after initialization on Cortex-M targets.  */

    MOV     r0, #0                                  // Build value for TX_FALSE
 8000360:	f04f 0000 	mov.w	r0, #0
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000364:	4a2a      	ldr	r2, [pc, #168]	; (8000410 <tx_thread_fpu_disable+0x2>)
    STR     r0, [r2, #0]                            // Clear preempt disable flag
 8000366:	6010      	str	r0, [r2, #0]

    /* Clear CONTROL.FPCA bit so VFP registers aren't unnecessarily stacked.  */

#ifdef __ARM_FP
    MRS     r0, CONTROL                             // Pickup current CONTROL register
 8000368:	f3ef 8014 	mrs	r0, CONTROL
    BIC     r0, r0, #4                              // Clear the FPCA bit
 800036c:	f020 0004 	bic.w	r0, r0, #4
    MSR     CONTROL, r0                             // Setup new CONTROL register
 8000370:	f380 8814 	msr	CONTROL, r0
#endif

    /* Enable interrupts */
    CPSIE   i
 8000374:	b662      	cpsie	i

    /* Enter the scheduler for the first time.  */

    MOV     r0, #0x10000000                         // Load PENDSVSET bit
 8000376:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    MOV     r1, #0xE000E000                         // Load NVIC base
 800037a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    STR     r0, [r1, #0xD04]                        // Set PENDSVBIT in ICSR
 800037e:	f8c1 0d04 	str.w	r0, [r1, #3332]	; 0xd04
    DSB                                             // Complete all memory accesses
 8000382:	f3bf 8f4f 	dsb	sy
    ISB                                             // Flush pipeline
 8000386:	f3bf 8f6f 	isb	sy

0800038a <__tx_wait_here>:

    /* Wait here for the PendSV to take place.  */

__tx_wait_here:
    B       __tx_wait_here                          // Wait for the PendSV to happen
 800038a:	e7fe      	b.n	800038a <__tx_wait_here>

0800038c <PendSV_Handler>:
#else
    CPSIE   i                                       // Enable interrupts
#endif  /* TX_PORT_USE_BASEPRI */
#endif  /* EXECUTION PROFILE */

    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800038c:	4821      	ldr	r0, [pc, #132]	; (8000414 <tx_thread_fpu_disable+0x6>)
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 800038e:	4a22      	ldr	r2, [pc, #136]	; (8000418 <tx_thread_fpu_disable+0xa>)
    MOV     r3, #0                                  // Build NULL value
 8000390:	f04f 0300 	mov.w	r3, #0
    LDR     r1, [r0]                                // Pickup current thread pointer
 8000394:	6801      	ldr	r1, [r0, #0]

    /* Determine if there is a current thread to finish preserving.  */

    CBZ     r1, __tx_ts_new                         // If NULL, skip preservation
 8000396:	b191      	cbz	r1, 80003be <__tx_ts_new>

    /* Recover PSP and preserve current thread context.  */

    STR     r3, [r0]                                // Set _tx_thread_current_ptr to NULL
 8000398:	6003      	str	r3, [r0, #0]
    MRS     r12, PSP                                // Pickup PSP pointer (thread's stack pointer)
 800039a:	f3ef 8c09 	mrs	ip, PSP
    STMDB   r12!, {r4-r11}                          // Save its remaining registers
 800039e:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 80003a2:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_save
 80003a6:	d101      	bne.n	80003ac <_skip_vfp_save>
    VSTMDB  r12!,{s16-s31}                          // Yes, save additional VFP registers
 80003a8:	ed2c 8a10 	vstmdb	ip!, {s16-s31}

080003ac <_skip_vfp_save>:
_skip_vfp_save:
#endif
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80003ac:	4c1b      	ldr	r4, [pc, #108]	; (800041c <tx_thread_fpu_disable+0xe>)
    STMDB   r12!, {LR}                              // Save LR on the stack
 80003ae:	f84c ed04 	str.w	lr, [ip, #-4]!

    /* Determine if time-slice is active. If it isn't, skip time handling processing.  */

    LDR     r5, [r4]                                // Pickup current time-slice
 80003b2:	6825      	ldr	r5, [r4, #0]
    STR     r12, [r1, #8]                           // Save the thread stack pointer
 80003b4:	f8c1 c008 	str.w	ip, [r1, #8]
    CBZ     r5, __tx_ts_new                         // If not active, skip processing
 80003b8:	b10d      	cbz	r5, 80003be <__tx_ts_new>

    /* Time-slice is active, save the current thread's time-slice and clear the global time-slice variable.  */

    STR     r5, [r1, #24]                           // Save current time-slice
 80003ba:	618d      	str	r5, [r1, #24]

    /* Clear the global time-slice.  */

    STR     r3, [r4]                                // Clear time-slice
 80003bc:	6023      	str	r3, [r4, #0]

080003be <__tx_ts_new>:

#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 80003be:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Is there another thread ready to execute?
 80003c0:	6811      	ldr	r1, [r2, #0]
    CBZ     r1, __tx_ts_wait                        // No, skip to the wait processing
 80003c2:	b1b1      	cbz	r1, 80003f2 <__tx_ts_wait>

    /* Yes, another thread is ready for else, make the current thread the new thread.  */

    STR     r1, [r0]                                // Setup the current thread pointer to the new thread
 80003c4:	6001      	str	r1, [r0, #0]
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 80003c6:	b662      	cpsie	i

080003c8 <__tx_ts_restore>:
#endif

    /* Increment the thread run count.  */

__tx_ts_restore:
    LDR     r7, [r1, #4]                            // Pickup the current thread run count
 80003c8:	684f      	ldr	r7, [r1, #4]
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80003ca:	4c14      	ldr	r4, [pc, #80]	; (800041c <tx_thread_fpu_disable+0xe>)
    LDR     r5, [r1, #24]                           // Pickup thread's current time-slice
 80003cc:	698d      	ldr	r5, [r1, #24]
    ADD     r7, r7, #1                              // Increment the thread run count
 80003ce:	f107 0701 	add.w	r7, r7, #1
    STR     r7, [r1, #4]                            // Store the new run count
 80003d2:	604f      	str	r7, [r1, #4]

    /* Setup global time-slice with thread's current time-slice.  */

    STR     r5, [r4]                                // Setup global time-slice
 80003d4:	6025      	str	r5, [r4, #0]
    POP     {r0, r1}                                // Recover r0 and r1
#endif

    /* Restore the thread context and PSP.  */

    LDR     r12, [r1, #8]                           // Pickup thread's stack pointer
 80003d6:	f8d1 c008 	ldr.w	ip, [r1, #8]
    LDMIA   r12!, {LR}                              // Pickup LR
 80003da:	f85c eb04 	ldr.w	lr, [ip], #4
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 80003de:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_restore                       // If not, skip VFP restore
 80003e2:	d101      	bne.n	80003e8 <_skip_vfp_restore>
    VLDMIA  r12!, {s16-s31}                         // Yes, restore additional VFP registers
 80003e4:	ecbc 8a10 	vldmia	ip!, {s16-s31}

080003e8 <_skip_vfp_restore>:
_skip_vfp_restore:
#endif
    LDMIA   r12!, {r4-r11}                          // Recover thread's registers
 80003e8:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR     PSP, r12                                // Setup the thread's stack pointer
 80003ec:	f38c 8809 	msr	PSP, ip

    /* Return to thread.  */

    BX      lr                                      // Return to thread!
 80003f0:	4770      	bx	lr

080003f2 <__tx_ts_wait>:
__tx_ts_wait:
#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 80003f2:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Pickup the next thread to execute pointer
 80003f4:	6811      	ldr	r1, [r2, #0]
    STR     r1, [r0]                                // Store it in the current pointer
 80003f6:	6001      	str	r1, [r0, #0]
    CBNZ    r1, __tx_ts_ready                       // If non-NULL, a new thread is ready!
 80003f8:	b909      	cbnz	r1, 80003fe <__tx_ts_ready>

#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 80003fa:	b662      	cpsie	i
#endif
    B       __tx_ts_wait                            // Loop to continue waiting
 80003fc:	e7f9      	b.n	80003f2 <__tx_ts_wait>

080003fe <__tx_ts_ready>:

    /* At this point, we have a new thread ready to go. Clear any newly pended PendSV - since we are
       already in the handler!  */

__tx_ts_ready:
    MOV     r7, #0x08000000                         // Build clear PendSV value
 80003fe:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    MOV     r8, #0xE000E000                         // Build base NVIC address
 8000402:	f04f 28e0 	mov.w	r8, #3758153728	; 0xe000e000
    STR     r7, [r8, #0xD04]                        // Clear any PendSV
 8000406:	f8c8 7d04 	str.w	r7, [r8, #3332]	; 0xd04
    /* Re-enable interrupts and restore new thread.  */
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 800040a:	b662      	cpsie	i
#endif
    B       __tx_ts_restore                         // Restore the thread
 800040c:	e7dc      	b.n	80003c8 <__tx_ts_restore>

0800040e <tx_thread_fpu_disable>:
tx_thread_fpu_disable:

    /* Automatic VPF logic is supported, this function is present only for
       backward compatibility purposes and therefore simply returns.  */

    BX      LR                                      // Return to caller
 800040e:	4770      	bx	lr
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000410:	24005164 	.word	0x24005164
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000414:	240050cc 	.word	0x240050cc
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000418:	240050d0 	.word	0x240050d0
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 800041c:	240056d0 	.word	0x240056d0

08000420 <_tx_thread_stack_build>:
                       pc          Initial value for pc
                       xPSR        Initial value for xPSR

    Stack Bottom: (higher memory address)  */

    LDR     r2, [r0, #16]                           // Pickup end of stack area
 8000420:	6902      	ldr	r2, [r0, #16]
    BIC     r2, r2, #0x7                            // Align frame for 8-byte alignment
 8000422:	f022 0207 	bic.w	r2, r2, #7
    SUB     r2, r2, #68                             // Subtract frame size
 8000426:	f1a2 0244 	sub.w	r2, r2, #68	; 0x44
    LDR     r3, =0xFFFFFFFD                         // Build initial LR value
 800042a:	f06f 0302 	mvn.w	r3, #2
    STR     r3, [r2, #0]                            // Save on the stack
 800042e:	6013      	str	r3, [r2, #0]

    /* Actually build the stack frame.  */

    MOV     r3, #0                                  // Build initial register value
 8000430:	f04f 0300 	mov.w	r3, #0
    STR     r3, [r2, #4]                            // Store initial r4
 8000434:	6053      	str	r3, [r2, #4]
    STR     r3, [r2, #8]                            // Store initial r5
 8000436:	6093      	str	r3, [r2, #8]
    STR     r3, [r2, #12]                           // Store initial r6
 8000438:	60d3      	str	r3, [r2, #12]
    STR     r3, [r2, #16]                           // Store initial r7
 800043a:	6113      	str	r3, [r2, #16]
    STR     r3, [r2, #20]                           // Store initial r8
 800043c:	6153      	str	r3, [r2, #20]
    STR     r3, [r2, #24]                           // Store initial r9
 800043e:	6193      	str	r3, [r2, #24]
    STR     r3, [r2, #28]                           // Store initial r10
 8000440:	61d3      	str	r3, [r2, #28]
    STR     r3, [r2, #32]                           // Store initial r11
 8000442:	6213      	str	r3, [r2, #32]

    /* Hardware stack follows.  */

    STR     r3, [r2, #36]                           // Store initial r0
 8000444:	6253      	str	r3, [r2, #36]	; 0x24
    STR     r3, [r2, #40]                           // Store initial r1
 8000446:	6293      	str	r3, [r2, #40]	; 0x28
    STR     r3, [r2, #44]                           // Store initial r2
 8000448:	62d3      	str	r3, [r2, #44]	; 0x2c
    STR     r3, [r2, #48]                           // Store initial r3
 800044a:	6313      	str	r3, [r2, #48]	; 0x30
    STR     r3, [r2, #52]                           // Store initial r12
 800044c:	6353      	str	r3, [r2, #52]	; 0x34
    MOV     r3, #0xFFFFFFFF                         // Poison EXC_RETURN value
 800044e:	f04f 33ff 	mov.w	r3, #4294967295
    STR     r3, [r2, #56]                           // Store initial lr
 8000452:	6393      	str	r3, [r2, #56]	; 0x38
    STR     r1, [r2, #60]                           // Store initial pc
 8000454:	63d1      	str	r1, [r2, #60]	; 0x3c
    MOV     r3, #0x01000000                         // Only T-bit need be set
 8000456:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    STR     r3, [r2, #64]                           // Store initial xPSR
 800045a:	6413      	str	r3, [r2, #64]	; 0x40

    /* Setup stack pointer.  */
    // thread_ptr -> tx_thread_stack_ptr =  r2;

    STR     r2, [r0, #8]                            // Save stack pointer in thread's
 800045c:	6082      	str	r2, [r0, #8]
                                                    //   control block
    BX      lr                                      // Return to caller
 800045e:	4770      	bx	lr

08000460 <_tx_timer_interrupt>:
       for use.  */

    /* Increment the system clock.  */
    // _tx_timer_system_clock++;

    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 8000460:	4922      	ldr	r1, [pc, #136]	; (80004ec <__tx_timer_nothing_expired+0x6>)
    LDR     r0, [r1, #0]                            // Pickup system clock
 8000462:	6808      	ldr	r0, [r1, #0]
    ADD     r0, r0, #1                              // Increment system clock
 8000464:	f100 0001 	add.w	r0, r0, #1
    STR     r0, [r1, #0]                            // Store new system clock
 8000468:	6008      	str	r0, [r1, #0]

    /* Test for time-slice expiration.  */
    // if (_tx_timer_time_slice)
    // {

    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 800046a:	4b21      	ldr	r3, [pc, #132]	; (80004f0 <__tx_timer_nothing_expired+0xa>)
    LDR     r2, [r3, #0]                            // Pickup time-slice
 800046c:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_no_time_slice            // Is it non-active?
 800046e:	b13a      	cbz	r2, 8000480 <__tx_timer_no_time_slice>
                                                    // Yes, skip time-slice processing

       /* Decrement the time_slice.  */
       // _tx_timer_time_slice--;

    SUB     r2, r2, #1                              // Decrement the time-slice
 8000470:	f1a2 0201 	sub.w	r2, r2, #1
    STR     r2, [r3, #0]                            // Store new time-slice value
 8000474:	601a      	str	r2, [r3, #0]

       /* Check for expiration.  */
       // if (__tx_timer_time_slice == 0)

    CBNZ    r2, __tx_timer_no_time_slice            // Has it expired?
 8000476:	b91a      	cbnz	r2, 8000480 <__tx_timer_no_time_slice>
                                                    // No, skip expiration processing

       /* Set the time-slice expired flag.  */
       // _tx_timer_expired_time_slice =  TX_TRUE;

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 8000478:	4b1e      	ldr	r3, [pc, #120]	; (80004f4 <__tx_timer_nothing_expired+0xe>)
    MOV     r0, #1                                  // Build expired value
 800047a:	f04f 0001 	mov.w	r0, #1
    STR     r0, [r3, #0]                            // Set time-slice expiration flag
 800047e:	6018      	str	r0, [r3, #0]

08000480 <__tx_timer_no_time_slice>:

    /* Test for timer expiration.  */
    // if (*_tx_timer_current_ptr)
    // {

    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 8000480:	491d      	ldr	r1, [pc, #116]	; (80004f8 <__tx_timer_nothing_expired+0x12>)
    LDR     r0, [r1, #0]                            // Pickup current timer
 8000482:	6808      	ldr	r0, [r1, #0]
    LDR     r2, [r0, #0]                            // Pickup timer list entry
 8000484:	6802      	ldr	r2, [r0, #0]
    CBZ     r2, __tx_timer_no_timer                 // Is there anything in the list?
 8000486:	b122      	cbz	r2, 8000492 <__tx_timer_no_timer>
                                                    // No, just increment the timer

        /* Set expiration flag.  */
        // _tx_timer_expired =  TX_TRUE;

    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 8000488:	4b1c      	ldr	r3, [pc, #112]	; (80004fc <__tx_timer_nothing_expired+0x16>)
    MOV     r2, #1                                  // Build expired value
 800048a:	f04f 0201 	mov.w	r2, #1
    STR     r2, [r3, #0]                            // Set expired flag
 800048e:	601a      	str	r2, [r3, #0]
    B       __tx_timer_done                         // Finished timer processing
 8000490:	e008      	b.n	80004a4 <__tx_timer_done>

08000492 <__tx_timer_no_timer>:
__tx_timer_no_timer:

        /* No timer expired, increment the timer pointer.  */
        // _tx_timer_current_ptr++;

    ADD     r0, r0, #4                              // Move to next timer
 8000492:	f100 0004 	add.w	r0, r0, #4

        /* Check for wrap-around.  */
        // if (_tx_timer_current_ptr == _tx_timer_list_end)

    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 8000496:	4b1a      	ldr	r3, [pc, #104]	; (8000500 <__tx_timer_nothing_expired+0x1a>)
    LDR     r2, [r3, #0]                            // Pickup list end
 8000498:	681a      	ldr	r2, [r3, #0]
    CMP     r0, r2                                  // Are we at list end?
 800049a:	4290      	cmp	r0, r2
    BNE     __tx_timer_skip_wrap                    // No, skip wrap-around logic
 800049c:	d101      	bne.n	80004a2 <__tx_timer_skip_wrap>

            /* Wrap to beginning of list.  */
            // _tx_timer_current_ptr =  _tx_timer_list_start;

    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 800049e:	4b19      	ldr	r3, [pc, #100]	; (8000504 <__tx_timer_nothing_expired+0x1e>)
    LDR     r0, [r3, #0]                            // Set current pointer to list start
 80004a0:	6818      	ldr	r0, [r3, #0]

080004a2 <__tx_timer_skip_wrap>:

__tx_timer_skip_wrap:

    STR     r0, [r1, #0]                            // Store new current timer pointer
 80004a2:	6008      	str	r0, [r1, #0]

080004a4 <__tx_timer_done>:

    /* See if anything has expired.  */
    // if ((_tx_timer_expired_time_slice) || (_tx_timer_expired))
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of expired flag
 80004a4:	4b13      	ldr	r3, [pc, #76]	; (80004f4 <__tx_timer_nothing_expired+0xe>)
    LDR     r2, [r3, #0]                            // Pickup time-slice expired flag
 80004a6:	681a      	ldr	r2, [r3, #0]
    CBNZ    r2, __tx_something_expired              // Did a time-slice expire?
 80004a8:	b912      	cbnz	r2, 80004b0 <__tx_something_expired>
                                                    // If non-zero, time-slice expired
    LDR     r1, =_tx_timer_expired                  // Pickup addr of other expired flag
 80004aa:	4914      	ldr	r1, [pc, #80]	; (80004fc <__tx_timer_nothing_expired+0x16>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 80004ac:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_nothing_expired          // Did a timer expire?
 80004ae:	b1d0      	cbz	r0, 80004e6 <__tx_timer_nothing_expired>

080004b0 <__tx_something_expired>:
                                                    // No, nothing expired

__tx_something_expired:

    STMDB   sp!, {r0, lr}                           // Save the lr register on the stack
 80004b0:	e92d 4001 	stmdb	sp!, {r0, lr}

    /* Did a timer expire?  */
    // if (_tx_timer_expired)
    // {

    LDR     r1, =_tx_timer_expired                  // Pickup addr of expired flag
 80004b4:	4911      	ldr	r1, [pc, #68]	; (80004fc <__tx_timer_nothing_expired+0x16>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 80004b6:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_dont_activate            // Check for timer expiration
 80004b8:	b108      	cbz	r0, 80004be <__tx_timer_dont_activate>
                                                    // If not set, skip timer activation

        /* Process timer expiration.  */
        // _tx_timer_expiration_process();

    BL      _tx_timer_expiration_process            // Call the timer expiration handling routine
 80004ba:	f01d fe23 	bl	801e104 <_tx_timer_expiration_process>

080004be <__tx_timer_dont_activate>:

    /* Did time slice expire?  */
    // if (_tx_timer_expired_time_slice)
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of time-slice expired
 80004be:	4b0d      	ldr	r3, [pc, #52]	; (80004f4 <__tx_timer_nothing_expired+0xe>)
    LDR     r2, [r3, #0]                            // Pickup the actual flag
 80004c0:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_not_ts_expiration        // See if the flag is set
 80004c2:	b172      	cbz	r2, 80004e2 <__tx_timer_not_ts_expiration>
                                                    // No, skip time-slice processing

        /* Time slice interrupted thread.  */
        // _tx_thread_time_slice();

    BL      _tx_thread_time_slice                   // Call time-slice processing
 80004c4:	f01d fd0e 	bl	801dee4 <_tx_thread_time_slice>
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80004c8:	480f      	ldr	r0, [pc, #60]	; (8000508 <__tx_timer_nothing_expired+0x22>)
    LDR     r1, [r0]                                // Is the preempt disable flag set?
 80004ca:	6801      	ldr	r1, [r0, #0]
    CBNZ    r1, __tx_timer_skip_time_slice          // Yes, skip the PendSV logic
 80004cc:	b949      	cbnz	r1, 80004e2 <__tx_timer_not_ts_expiration>
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80004ce:	480f      	ldr	r0, [pc, #60]	; (800050c <__tx_timer_nothing_expired+0x26>)
    LDR     r1, [r0]                                // Pickup the current thread pointer
 80004d0:	6801      	ldr	r1, [r0, #0]
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80004d2:	4a0f      	ldr	r2, [pc, #60]	; (8000510 <__tx_timer_nothing_expired+0x2a>)
    LDR     r3, [r2]                                // Pickup the execute thread pointer
 80004d4:	6813      	ldr	r3, [r2, #0]
    LDR     r0, =0xE000ED04                         // Build address of control register
 80004d6:	480f      	ldr	r0, [pc, #60]	; (8000514 <__tx_timer_nothing_expired+0x2e>)
    LDR     r2, =0x10000000                         // Build value for PendSV bit
 80004d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    CMP     r1, r3                                  // Are they the same?
 80004dc:	4299      	cmp	r1, r3
    BEQ     __tx_timer_skip_time_slice              // If the same, there was no time-slice performed
 80004de:	d000      	beq.n	80004e2 <__tx_timer_not_ts_expiration>
    STR     r2, [r0]                                // Not the same, issue the PendSV for preemption
 80004e0:	6002      	str	r2, [r0, #0]

080004e2 <__tx_timer_not_ts_expiration>:

    // }

__tx_timer_not_ts_expiration:

    LDMIA   sp!, {r0, lr}                           // Recover lr register (r0 is just there for
 80004e2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

080004e6 <__tx_timer_nothing_expired>:

    // }

__tx_timer_nothing_expired:

    DSB                                             // Complete all memory access
 80004e6:	f3bf 8f4f 	dsb	sy
    BX      lr                                      // Return to caller
 80004ea:	4770      	bx	lr
    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 80004ec:	24005170 	.word	0x24005170
    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 80004f0:	240056d0 	.word	0x240056d0
    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 80004f4:	24005174 	.word	0x24005174
    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 80004f8:	24005200 	.word	0x24005200
    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 80004fc:	24005204 	.word	0x24005204
    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 8000500:	240051fc 	.word	0x240051fc
    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 8000504:	240051f8 	.word	0x240051f8
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000508:	24005164 	.word	0x24005164
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800050c:	240050cc 	.word	0x240050cc
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000510:	240050d0 	.word	0x240050d0
    LDR     r0, =0xE000ED04                         // Build address of control register
 8000514:	e000ed04 	.word	0xe000ed04

08000518 <strcmp>:
 8000518:	f810 2b01 	ldrb.w	r2, [r0], #1
 800051c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000520:	2a01      	cmp	r2, #1
 8000522:	bf28      	it	cs
 8000524:	429a      	cmpcs	r2, r3
 8000526:	d0f7      	beq.n	8000518 <strcmp>
 8000528:	1ad0      	subs	r0, r2, r3
 800052a:	4770      	bx	lr

0800052c <strlen>:
 800052c:	4603      	mov	r3, r0
 800052e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000532:	2a00      	cmp	r2, #0
 8000534:	d1fb      	bne.n	800052e <strlen+0x2>
 8000536:	1a18      	subs	r0, r3, r0
 8000538:	3801      	subs	r0, #1
 800053a:	4770      	bx	lr
 800053c:	0000      	movs	r0, r0
	...

08000540 <memchr>:
 8000540:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000544:	2a10      	cmp	r2, #16
 8000546:	db2b      	blt.n	80005a0 <memchr+0x60>
 8000548:	f010 0f07 	tst.w	r0, #7
 800054c:	d008      	beq.n	8000560 <memchr+0x20>
 800054e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000552:	3a01      	subs	r2, #1
 8000554:	428b      	cmp	r3, r1
 8000556:	d02d      	beq.n	80005b4 <memchr+0x74>
 8000558:	f010 0f07 	tst.w	r0, #7
 800055c:	b342      	cbz	r2, 80005b0 <memchr+0x70>
 800055e:	d1f6      	bne.n	800054e <memchr+0xe>
 8000560:	b4f0      	push	{r4, r5, r6, r7}
 8000562:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000566:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800056a:	f022 0407 	bic.w	r4, r2, #7
 800056e:	f07f 0700 	mvns.w	r7, #0
 8000572:	2300      	movs	r3, #0
 8000574:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000578:	3c08      	subs	r4, #8
 800057a:	ea85 0501 	eor.w	r5, r5, r1
 800057e:	ea86 0601 	eor.w	r6, r6, r1
 8000582:	fa85 f547 	uadd8	r5, r5, r7
 8000586:	faa3 f587 	sel	r5, r3, r7
 800058a:	fa86 f647 	uadd8	r6, r6, r7
 800058e:	faa5 f687 	sel	r6, r5, r7
 8000592:	b98e      	cbnz	r6, 80005b8 <memchr+0x78>
 8000594:	d1ee      	bne.n	8000574 <memchr+0x34>
 8000596:	bcf0      	pop	{r4, r5, r6, r7}
 8000598:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800059c:	f002 0207 	and.w	r2, r2, #7
 80005a0:	b132      	cbz	r2, 80005b0 <memchr+0x70>
 80005a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80005a6:	3a01      	subs	r2, #1
 80005a8:	ea83 0301 	eor.w	r3, r3, r1
 80005ac:	b113      	cbz	r3, 80005b4 <memchr+0x74>
 80005ae:	d1f8      	bne.n	80005a2 <memchr+0x62>
 80005b0:	2000      	movs	r0, #0
 80005b2:	4770      	bx	lr
 80005b4:	3801      	subs	r0, #1
 80005b6:	4770      	bx	lr
 80005b8:	2d00      	cmp	r5, #0
 80005ba:	bf06      	itte	eq
 80005bc:	4635      	moveq	r5, r6
 80005be:	3803      	subeq	r0, #3
 80005c0:	3807      	subne	r0, #7
 80005c2:	f015 0f01 	tst.w	r5, #1
 80005c6:	d107      	bne.n	80005d8 <memchr+0x98>
 80005c8:	3001      	adds	r0, #1
 80005ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80005ce:	bf02      	ittt	eq
 80005d0:	3001      	addeq	r0, #1
 80005d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80005d6:	3001      	addeq	r0, #1
 80005d8:	bcf0      	pop	{r4, r5, r6, r7}
 80005da:	3801      	subs	r0, #1
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <__aeabi_uldivmod>:
 80005e0:	b953      	cbnz	r3, 80005f8 <__aeabi_uldivmod+0x18>
 80005e2:	b94a      	cbnz	r2, 80005f8 <__aeabi_uldivmod+0x18>
 80005e4:	2900      	cmp	r1, #0
 80005e6:	bf08      	it	eq
 80005e8:	2800      	cmpeq	r0, #0
 80005ea:	bf1c      	itt	ne
 80005ec:	f04f 31ff 	movne.w	r1, #4294967295
 80005f0:	f04f 30ff 	movne.w	r0, #4294967295
 80005f4:	f000 b970 	b.w	80008d8 <__aeabi_idiv0>
 80005f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80005fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000600:	f000 f806 	bl	8000610 <__udivmoddi4>
 8000604:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000608:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800060c:	b004      	add	sp, #16
 800060e:	4770      	bx	lr

08000610 <__udivmoddi4>:
 8000610:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000614:	9e08      	ldr	r6, [sp, #32]
 8000616:	460d      	mov	r5, r1
 8000618:	4604      	mov	r4, r0
 800061a:	460f      	mov	r7, r1
 800061c:	2b00      	cmp	r3, #0
 800061e:	d14a      	bne.n	80006b6 <__udivmoddi4+0xa6>
 8000620:	428a      	cmp	r2, r1
 8000622:	4694      	mov	ip, r2
 8000624:	d965      	bls.n	80006f2 <__udivmoddi4+0xe2>
 8000626:	fab2 f382 	clz	r3, r2
 800062a:	b143      	cbz	r3, 800063e <__udivmoddi4+0x2e>
 800062c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000630:	f1c3 0220 	rsb	r2, r3, #32
 8000634:	409f      	lsls	r7, r3
 8000636:	fa20 f202 	lsr.w	r2, r0, r2
 800063a:	4317      	orrs	r7, r2
 800063c:	409c      	lsls	r4, r3
 800063e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000642:	fa1f f58c 	uxth.w	r5, ip
 8000646:	fbb7 f1fe 	udiv	r1, r7, lr
 800064a:	0c22      	lsrs	r2, r4, #16
 800064c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000650:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000654:	fb01 f005 	mul.w	r0, r1, r5
 8000658:	4290      	cmp	r0, r2
 800065a:	d90a      	bls.n	8000672 <__udivmoddi4+0x62>
 800065c:	eb1c 0202 	adds.w	r2, ip, r2
 8000660:	f101 37ff 	add.w	r7, r1, #4294967295
 8000664:	f080 811c 	bcs.w	80008a0 <__udivmoddi4+0x290>
 8000668:	4290      	cmp	r0, r2
 800066a:	f240 8119 	bls.w	80008a0 <__udivmoddi4+0x290>
 800066e:	3902      	subs	r1, #2
 8000670:	4462      	add	r2, ip
 8000672:	1a12      	subs	r2, r2, r0
 8000674:	b2a4      	uxth	r4, r4
 8000676:	fbb2 f0fe 	udiv	r0, r2, lr
 800067a:	fb0e 2210 	mls	r2, lr, r0, r2
 800067e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000682:	fb00 f505 	mul.w	r5, r0, r5
 8000686:	42a5      	cmp	r5, r4
 8000688:	d90a      	bls.n	80006a0 <__udivmoddi4+0x90>
 800068a:	eb1c 0404 	adds.w	r4, ip, r4
 800068e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000692:	f080 8107 	bcs.w	80008a4 <__udivmoddi4+0x294>
 8000696:	42a5      	cmp	r5, r4
 8000698:	f240 8104 	bls.w	80008a4 <__udivmoddi4+0x294>
 800069c:	4464      	add	r4, ip
 800069e:	3802      	subs	r0, #2
 80006a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80006a4:	1b64      	subs	r4, r4, r5
 80006a6:	2100      	movs	r1, #0
 80006a8:	b11e      	cbz	r6, 80006b2 <__udivmoddi4+0xa2>
 80006aa:	40dc      	lsrs	r4, r3
 80006ac:	2300      	movs	r3, #0
 80006ae:	e9c6 4300 	strd	r4, r3, [r6]
 80006b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006b6:	428b      	cmp	r3, r1
 80006b8:	d908      	bls.n	80006cc <__udivmoddi4+0xbc>
 80006ba:	2e00      	cmp	r6, #0
 80006bc:	f000 80ed 	beq.w	800089a <__udivmoddi4+0x28a>
 80006c0:	2100      	movs	r1, #0
 80006c2:	e9c6 0500 	strd	r0, r5, [r6]
 80006c6:	4608      	mov	r0, r1
 80006c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006cc:	fab3 f183 	clz	r1, r3
 80006d0:	2900      	cmp	r1, #0
 80006d2:	d149      	bne.n	8000768 <__udivmoddi4+0x158>
 80006d4:	42ab      	cmp	r3, r5
 80006d6:	d302      	bcc.n	80006de <__udivmoddi4+0xce>
 80006d8:	4282      	cmp	r2, r0
 80006da:	f200 80f8 	bhi.w	80008ce <__udivmoddi4+0x2be>
 80006de:	1a84      	subs	r4, r0, r2
 80006e0:	eb65 0203 	sbc.w	r2, r5, r3
 80006e4:	2001      	movs	r0, #1
 80006e6:	4617      	mov	r7, r2
 80006e8:	2e00      	cmp	r6, #0
 80006ea:	d0e2      	beq.n	80006b2 <__udivmoddi4+0xa2>
 80006ec:	e9c6 4700 	strd	r4, r7, [r6]
 80006f0:	e7df      	b.n	80006b2 <__udivmoddi4+0xa2>
 80006f2:	b902      	cbnz	r2, 80006f6 <__udivmoddi4+0xe6>
 80006f4:	deff      	udf	#255	; 0xff
 80006f6:	fab2 f382 	clz	r3, r2
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	f040 8090 	bne.w	8000820 <__udivmoddi4+0x210>
 8000700:	1a8a      	subs	r2, r1, r2
 8000702:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000706:	fa1f fe8c 	uxth.w	lr, ip
 800070a:	2101      	movs	r1, #1
 800070c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000710:	fb07 2015 	mls	r0, r7, r5, r2
 8000714:	0c22      	lsrs	r2, r4, #16
 8000716:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800071a:	fb0e f005 	mul.w	r0, lr, r5
 800071e:	4290      	cmp	r0, r2
 8000720:	d908      	bls.n	8000734 <__udivmoddi4+0x124>
 8000722:	eb1c 0202 	adds.w	r2, ip, r2
 8000726:	f105 38ff 	add.w	r8, r5, #4294967295
 800072a:	d202      	bcs.n	8000732 <__udivmoddi4+0x122>
 800072c:	4290      	cmp	r0, r2
 800072e:	f200 80cb 	bhi.w	80008c8 <__udivmoddi4+0x2b8>
 8000732:	4645      	mov	r5, r8
 8000734:	1a12      	subs	r2, r2, r0
 8000736:	b2a4      	uxth	r4, r4
 8000738:	fbb2 f0f7 	udiv	r0, r2, r7
 800073c:	fb07 2210 	mls	r2, r7, r0, r2
 8000740:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000744:	fb0e fe00 	mul.w	lr, lr, r0
 8000748:	45a6      	cmp	lr, r4
 800074a:	d908      	bls.n	800075e <__udivmoddi4+0x14e>
 800074c:	eb1c 0404 	adds.w	r4, ip, r4
 8000750:	f100 32ff 	add.w	r2, r0, #4294967295
 8000754:	d202      	bcs.n	800075c <__udivmoddi4+0x14c>
 8000756:	45a6      	cmp	lr, r4
 8000758:	f200 80bb 	bhi.w	80008d2 <__udivmoddi4+0x2c2>
 800075c:	4610      	mov	r0, r2
 800075e:	eba4 040e 	sub.w	r4, r4, lr
 8000762:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000766:	e79f      	b.n	80006a8 <__udivmoddi4+0x98>
 8000768:	f1c1 0720 	rsb	r7, r1, #32
 800076c:	408b      	lsls	r3, r1
 800076e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000772:	ea4c 0c03 	orr.w	ip, ip, r3
 8000776:	fa05 f401 	lsl.w	r4, r5, r1
 800077a:	fa20 f307 	lsr.w	r3, r0, r7
 800077e:	40fd      	lsrs	r5, r7
 8000780:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000784:	4323      	orrs	r3, r4
 8000786:	fbb5 f8f9 	udiv	r8, r5, r9
 800078a:	fa1f fe8c 	uxth.w	lr, ip
 800078e:	fb09 5518 	mls	r5, r9, r8, r5
 8000792:	0c1c      	lsrs	r4, r3, #16
 8000794:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000798:	fb08 f50e 	mul.w	r5, r8, lr
 800079c:	42a5      	cmp	r5, r4
 800079e:	fa02 f201 	lsl.w	r2, r2, r1
 80007a2:	fa00 f001 	lsl.w	r0, r0, r1
 80007a6:	d90b      	bls.n	80007c0 <__udivmoddi4+0x1b0>
 80007a8:	eb1c 0404 	adds.w	r4, ip, r4
 80007ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80007b0:	f080 8088 	bcs.w	80008c4 <__udivmoddi4+0x2b4>
 80007b4:	42a5      	cmp	r5, r4
 80007b6:	f240 8085 	bls.w	80008c4 <__udivmoddi4+0x2b4>
 80007ba:	f1a8 0802 	sub.w	r8, r8, #2
 80007be:	4464      	add	r4, ip
 80007c0:	1b64      	subs	r4, r4, r5
 80007c2:	b29d      	uxth	r5, r3
 80007c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80007c8:	fb09 4413 	mls	r4, r9, r3, r4
 80007cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80007d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80007d4:	45a6      	cmp	lr, r4
 80007d6:	d908      	bls.n	80007ea <__udivmoddi4+0x1da>
 80007d8:	eb1c 0404 	adds.w	r4, ip, r4
 80007dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80007e0:	d26c      	bcs.n	80008bc <__udivmoddi4+0x2ac>
 80007e2:	45a6      	cmp	lr, r4
 80007e4:	d96a      	bls.n	80008bc <__udivmoddi4+0x2ac>
 80007e6:	3b02      	subs	r3, #2
 80007e8:	4464      	add	r4, ip
 80007ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80007ee:	fba3 9502 	umull	r9, r5, r3, r2
 80007f2:	eba4 040e 	sub.w	r4, r4, lr
 80007f6:	42ac      	cmp	r4, r5
 80007f8:	46c8      	mov	r8, r9
 80007fa:	46ae      	mov	lr, r5
 80007fc:	d356      	bcc.n	80008ac <__udivmoddi4+0x29c>
 80007fe:	d053      	beq.n	80008a8 <__udivmoddi4+0x298>
 8000800:	b156      	cbz	r6, 8000818 <__udivmoddi4+0x208>
 8000802:	ebb0 0208 	subs.w	r2, r0, r8
 8000806:	eb64 040e 	sbc.w	r4, r4, lr
 800080a:	fa04 f707 	lsl.w	r7, r4, r7
 800080e:	40ca      	lsrs	r2, r1
 8000810:	40cc      	lsrs	r4, r1
 8000812:	4317      	orrs	r7, r2
 8000814:	e9c6 7400 	strd	r7, r4, [r6]
 8000818:	4618      	mov	r0, r3
 800081a:	2100      	movs	r1, #0
 800081c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000820:	f1c3 0120 	rsb	r1, r3, #32
 8000824:	fa02 fc03 	lsl.w	ip, r2, r3
 8000828:	fa20 f201 	lsr.w	r2, r0, r1
 800082c:	fa25 f101 	lsr.w	r1, r5, r1
 8000830:	409d      	lsls	r5, r3
 8000832:	432a      	orrs	r2, r5
 8000834:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000838:	fa1f fe8c 	uxth.w	lr, ip
 800083c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000840:	fb07 1510 	mls	r5, r7, r0, r1
 8000844:	0c11      	lsrs	r1, r2, #16
 8000846:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800084a:	fb00 f50e 	mul.w	r5, r0, lr
 800084e:	428d      	cmp	r5, r1
 8000850:	fa04 f403 	lsl.w	r4, r4, r3
 8000854:	d908      	bls.n	8000868 <__udivmoddi4+0x258>
 8000856:	eb1c 0101 	adds.w	r1, ip, r1
 800085a:	f100 38ff 	add.w	r8, r0, #4294967295
 800085e:	d22f      	bcs.n	80008c0 <__udivmoddi4+0x2b0>
 8000860:	428d      	cmp	r5, r1
 8000862:	d92d      	bls.n	80008c0 <__udivmoddi4+0x2b0>
 8000864:	3802      	subs	r0, #2
 8000866:	4461      	add	r1, ip
 8000868:	1b49      	subs	r1, r1, r5
 800086a:	b292      	uxth	r2, r2
 800086c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000870:	fb07 1115 	mls	r1, r7, r5, r1
 8000874:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000878:	fb05 f10e 	mul.w	r1, r5, lr
 800087c:	4291      	cmp	r1, r2
 800087e:	d908      	bls.n	8000892 <__udivmoddi4+0x282>
 8000880:	eb1c 0202 	adds.w	r2, ip, r2
 8000884:	f105 38ff 	add.w	r8, r5, #4294967295
 8000888:	d216      	bcs.n	80008b8 <__udivmoddi4+0x2a8>
 800088a:	4291      	cmp	r1, r2
 800088c:	d914      	bls.n	80008b8 <__udivmoddi4+0x2a8>
 800088e:	3d02      	subs	r5, #2
 8000890:	4462      	add	r2, ip
 8000892:	1a52      	subs	r2, r2, r1
 8000894:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000898:	e738      	b.n	800070c <__udivmoddi4+0xfc>
 800089a:	4631      	mov	r1, r6
 800089c:	4630      	mov	r0, r6
 800089e:	e708      	b.n	80006b2 <__udivmoddi4+0xa2>
 80008a0:	4639      	mov	r1, r7
 80008a2:	e6e6      	b.n	8000672 <__udivmoddi4+0x62>
 80008a4:	4610      	mov	r0, r2
 80008a6:	e6fb      	b.n	80006a0 <__udivmoddi4+0x90>
 80008a8:	4548      	cmp	r0, r9
 80008aa:	d2a9      	bcs.n	8000800 <__udivmoddi4+0x1f0>
 80008ac:	ebb9 0802 	subs.w	r8, r9, r2
 80008b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80008b4:	3b01      	subs	r3, #1
 80008b6:	e7a3      	b.n	8000800 <__udivmoddi4+0x1f0>
 80008b8:	4645      	mov	r5, r8
 80008ba:	e7ea      	b.n	8000892 <__udivmoddi4+0x282>
 80008bc:	462b      	mov	r3, r5
 80008be:	e794      	b.n	80007ea <__udivmoddi4+0x1da>
 80008c0:	4640      	mov	r0, r8
 80008c2:	e7d1      	b.n	8000868 <__udivmoddi4+0x258>
 80008c4:	46d0      	mov	r8, sl
 80008c6:	e77b      	b.n	80007c0 <__udivmoddi4+0x1b0>
 80008c8:	3d02      	subs	r5, #2
 80008ca:	4462      	add	r2, ip
 80008cc:	e732      	b.n	8000734 <__udivmoddi4+0x124>
 80008ce:	4608      	mov	r0, r1
 80008d0:	e70a      	b.n	80006e8 <__udivmoddi4+0xd8>
 80008d2:	4464      	add	r4, ip
 80008d4:	3802      	subs	r0, #2
 80008d6:	e742      	b.n	800075e <__udivmoddi4+0x14e>

080008d8 <__aeabi_idiv0>:
 80008d8:	4770      	bx	lr
 80008da:	bf00      	nop

080008dc <tx_application_define>:
  * @brief  Define the initial system.
  * @param  first_unused_memory : Pointer to the first unused memory
  * @retval None
  */
VOID tx_application_define(VOID *first_unused_memory)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b086      	sub	sp, #24
 80008e0:	af02      	add	r7, sp, #8
 80008e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN  tx_application_define_1*/

  /* USER CODE END  tx_application_define_1 */
#if (USE_STATIC_ALLOCATION == 1)
  UINT status = TX_SUCCESS;
 80008e4:	2300      	movs	r3, #0
 80008e6:	60fb      	str	r3, [r7, #12]
  VOID *memory_ptr;

  if (tx_byte_pool_create(&tx_app_byte_pool, "Tx App memory pool", tx_byte_pool_buffer, TX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 80008e8:	2334      	movs	r3, #52	; 0x34
 80008ea:	9300      	str	r3, [sp, #0]
 80008ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008f0:	4a15      	ldr	r2, [pc, #84]	; (8000948 <tx_application_define+0x6c>)
 80008f2:	4916      	ldr	r1, [pc, #88]	; (800094c <tx_application_define+0x70>)
 80008f4:	4816      	ldr	r0, [pc, #88]	; (8000950 <tx_application_define+0x74>)
 80008f6:	f01d feaf 	bl	801e658 <_txe_byte_pool_create>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d109      	bne.n	8000914 <tx_application_define+0x38>
  {
    /* USER CODE BEGIN TX_Byte_Pool_Success */

    /* USER CODE END TX_Byte_Pool_Success */

    memory_ptr = (VOID *)&tx_app_byte_pool;
 8000900:	4b13      	ldr	r3, [pc, #76]	; (8000950 <tx_application_define+0x74>)
 8000902:	60bb      	str	r3, [r7, #8]
    status = App_ThreadX_Init(memory_ptr);
 8000904:	68b8      	ldr	r0, [r7, #8]
 8000906:	f001 f834 	bl	8001972 <App_ThreadX_Init>
 800090a:	60f8      	str	r0, [r7, #12]
    if (status != TX_SUCCESS)
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	2b00      	cmp	r3, #0
 8000910:	d000      	beq.n	8000914 <tx_application_define+0x38>
    {
      /* USER CODE BEGIN  App_ThreadX_Init_Error */
      while(1)
 8000912:	e7fe      	b.n	8000912 <tx_application_define+0x36>

    /* USER CODE END  App_ThreadX_Init_Success */

  }

  if (tx_byte_pool_create(&fx_app_byte_pool, "Fx App memory pool", fx_byte_pool_buffer, FX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 8000914:	2334      	movs	r3, #52	; 0x34
 8000916:	9300      	str	r3, [sp, #0]
 8000918:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800091c:	4a0d      	ldr	r2, [pc, #52]	; (8000954 <tx_application_define+0x78>)
 800091e:	490e      	ldr	r1, [pc, #56]	; (8000958 <tx_application_define+0x7c>)
 8000920:	480e      	ldr	r0, [pc, #56]	; (800095c <tx_application_define+0x80>)
 8000922:	f01d fe99 	bl	801e658 <_txe_byte_pool_create>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d109      	bne.n	8000940 <tx_application_define+0x64>
  {
    /* USER CODE BEGIN FX_Byte_Pool_Success */

    /* USER CODE END FX_Byte_Pool_Success */

    memory_ptr = (VOID *)&fx_app_byte_pool;
 800092c:	4b0b      	ldr	r3, [pc, #44]	; (800095c <tx_application_define+0x80>)
 800092e:	60bb      	str	r3, [r7, #8]
    status = MX_FileX_Init(memory_ptr);
 8000930:	68b8      	ldr	r0, [r7, #8]
 8000932:	f010 fe49 	bl	80115c8 <MX_FileX_Init>
 8000936:	60f8      	str	r0, [r7, #12]
    if (status != FX_SUCCESS)
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	2b00      	cmp	r3, #0
 800093c:	d000      	beq.n	8000940 <tx_application_define+0x64>
    {
      /* USER CODE BEGIN  MX_FileX_Init_Error */
      while(1)
 800093e:	e7fe      	b.n	800093e <tx_application_define+0x62>
  /* USER CODE BEGIN DYNAMIC_MEM_ALLOC */
  (void)first_unused_memory;
  /* USER CODE END DYNAMIC_MEM_ALLOC */
#endif

}
 8000940:	bf00      	nop
 8000942:	3710      	adds	r7, #16
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	240000fc 	.word	0x240000fc
 800094c:	08020aec 	.word	0x08020aec
 8000950:	240004fc 	.word	0x240004fc
 8000954:	24000530 	.word	0x24000530
 8000958:	08020b00 	.word	0x08020b00
 800095c:	24000930 	.word	0x24000930

08000960 <MQTTSerialize_connectLength>:
  * Determines the length of the MQTT connect packet that would be produced using the supplied connect options.
  * @param options the options to be used to build the connect packet
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_connectLength(MQTTPacket_connectData* options)
{
 8000960:	b590      	push	{r4, r7, lr}
 8000962:	b085      	sub	sp, #20
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
	int len = 0;
 8000968:	2300      	movs	r3, #0
 800096a:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;

	if (options->MQTTVersion == 3)
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	7a1b      	ldrb	r3, [r3, #8]
 8000970:	2b03      	cmp	r3, #3
 8000972:	d102      	bne.n	800097a <MQTTSerialize_connectLength+0x1a>
		len = 12; /* variable depending on MQTT or MQIsdp */
 8000974:	230c      	movs	r3, #12
 8000976:	60fb      	str	r3, [r7, #12]
 8000978:	e005      	b.n	8000986 <MQTTSerialize_connectLength+0x26>
	else if (options->MQTTVersion == 4)
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	7a1b      	ldrb	r3, [r3, #8]
 800097e:	2b04      	cmp	r3, #4
 8000980:	d101      	bne.n	8000986 <MQTTSerialize_connectLength+0x26>
		len = 10;
 8000982:	230a      	movs	r3, #10
 8000984:	60fb      	str	r3, [r7, #12]

	len += MQTTstrlen(options->clientID)+2;
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	330c      	adds	r3, #12
 800098a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800098e:	f000 fb5e 	bl	800104e <MQTTstrlen>
 8000992:	4603      	mov	r3, r0
 8000994:	3302      	adds	r3, #2
 8000996:	68fa      	ldr	r2, [r7, #12]
 8000998:	4413      	add	r3, r2
 800099a:	60fb      	str	r3, [r7, #12]
	if (options->willFlag)
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	7edb      	ldrb	r3, [r3, #27]
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d013      	beq.n	80009cc <MQTTSerialize_connectLength+0x6c>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	3324      	adds	r3, #36	; 0x24
 80009a8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80009ac:	f000 fb4f 	bl	800104e <MQTTstrlen>
 80009b0:	4603      	mov	r3, r0
 80009b2:	1c9c      	adds	r4, r3, #2
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	3330      	adds	r3, #48	; 0x30
 80009b8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80009bc:	f000 fb47 	bl	800104e <MQTTstrlen>
 80009c0:	4603      	mov	r3, r0
 80009c2:	4423      	add	r3, r4
 80009c4:	3302      	adds	r3, #2
 80009c6:	68fa      	ldr	r2, [r7, #12]
 80009c8:	4413      	add	r3, r2
 80009ca:	60fb      	str	r3, [r7, #12]
	if (options->username.cstring || options->username.lenstring.data)
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d103      	bne.n	80009dc <MQTTSerialize_connectLength+0x7c>
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d00a      	beq.n	80009f2 <MQTTSerialize_connectLength+0x92>
		len += MQTTstrlen(options->username)+2;
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	3340      	adds	r3, #64	; 0x40
 80009e0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80009e4:	f000 fb33 	bl	800104e <MQTTstrlen>
 80009e8:	4603      	mov	r3, r0
 80009ea:	3302      	adds	r3, #2
 80009ec:	68fa      	ldr	r2, [r7, #12]
 80009ee:	4413      	add	r3, r2
 80009f0:	60fb      	str	r3, [r7, #12]
	if (options->password.cstring || options->password.lenstring.data)
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d103      	bne.n	8000a02 <MQTTSerialize_connectLength+0xa2>
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d00a      	beq.n	8000a18 <MQTTSerialize_connectLength+0xb8>
		len += MQTTstrlen(options->password)+2;
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	334c      	adds	r3, #76	; 0x4c
 8000a06:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000a0a:	f000 fb20 	bl	800104e <MQTTstrlen>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	3302      	adds	r3, #2
 8000a12:	68fa      	ldr	r2, [r7, #12]
 8000a14:	4413      	add	r3, r2
 8000a16:	60fb      	str	r3, [r7, #12]

	FUNC_EXIT_RC(len);
	return len;
 8000a18:	68fb      	ldr	r3, [r7, #12]
}
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	3714      	adds	r7, #20
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd90      	pop	{r4, r7, pc}
	...

08000a24 <MQTTSerialize_connect>:
  * @param len the length in bytes of the supplied buffer
  * @param options the options to be used to build the connect packet
  * @return serialized length, or error if 0
  */
int MQTTSerialize_connect(unsigned char* buf, int buflen, MQTTPacket_connectData* options)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b08a      	sub	sp, #40	; 0x28
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	60f8      	str	r0, [r7, #12]
 8000a2c:	60b9      	str	r1, [r7, #8]
 8000a2e:	607a      	str	r2, [r7, #4]
	unsigned char *ptr = buf;
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	61fb      	str	r3, [r7, #28]
	MQTTHeader header = {0};
 8000a34:	2300      	movs	r3, #0
 8000a36:	61bb      	str	r3, [r7, #24]
	MQTTConnectFlags flags = {0};
 8000a38:	2300      	movs	r3, #0
 8000a3a:	617b      	str	r3, [r7, #20]
	int len = 0;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	623b      	str	r3, [r7, #32]
	int rc = -1;
 8000a40:	f04f 33ff 	mov.w	r3, #4294967295
 8000a44:	627b      	str	r3, [r7, #36]	; 0x24

	FUNC_ENTRY;
	if (MQTTPacket_len(len = MQTTSerialize_connectLength(options)) > buflen)
 8000a46:	6878      	ldr	r0, [r7, #4]
 8000a48:	f7ff ff8a 	bl	8000960 <MQTTSerialize_connectLength>
 8000a4c:	6238      	str	r0, [r7, #32]
 8000a4e:	6a38      	ldr	r0, [r7, #32]
 8000a50:	f000 f9b2 	bl	8000db8 <MQTTPacket_len>
 8000a54:	4602      	mov	r2, r0
 8000a56:	68bb      	ldr	r3, [r7, #8]
 8000a58:	4293      	cmp	r3, r2
 8000a5a:	da03      	bge.n	8000a64 <MQTTSerialize_connect+0x40>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 8000a5c:	f06f 0301 	mvn.w	r3, #1
 8000a60:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
 8000a62:	e0c2      	b.n	8000bea <MQTTSerialize_connect+0x1c6>
	}

	header.byte = 0;
 8000a64:	2300      	movs	r3, #0
 8000a66:	763b      	strb	r3, [r7, #24]
	header.bits.type = CONNECT;
 8000a68:	7e3b      	ldrb	r3, [r7, #24]
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	f362 1307 	bfi	r3, r2, #4, #4
 8000a70:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 8000a72:	7e3a      	ldrb	r2, [r7, #24]
 8000a74:	f107 031c 	add.w	r3, r7, #28
 8000a78:	4611      	mov	r1, r2
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f000 fa2b 	bl	8000ed6 <writeChar>

	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
 8000a80:	69fb      	ldr	r3, [r7, #28]
 8000a82:	6a39      	ldr	r1, [r7, #32]
 8000a84:	4618      	mov	r0, r3
 8000a86:	f000 f92b 	bl	8000ce0 <MQTTPacket_encode>
 8000a8a:	4602      	mov	r2, r0
 8000a8c:	69fb      	ldr	r3, [r7, #28]
 8000a8e:	4413      	add	r3, r2
 8000a90:	61fb      	str	r3, [r7, #28]

	if (options->MQTTVersion == 4)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	7a1b      	ldrb	r3, [r3, #8]
 8000a96:	2b04      	cmp	r3, #4
 8000a98:	d10c      	bne.n	8000ab4 <MQTTSerialize_connect+0x90>
	{
		writeCString(&ptr, "MQTT");
 8000a9a:	f107 031c 	add.w	r3, r7, #28
 8000a9e:	4955      	ldr	r1, [pc, #340]	; (8000bf4 <MQTTSerialize_connect+0x1d0>)
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f000 fa56 	bl	8000f52 <writeCString>
		writeChar(&ptr, (char) 4);
 8000aa6:	f107 031c 	add.w	r3, r7, #28
 8000aaa:	2104      	movs	r1, #4
 8000aac:	4618      	mov	r0, r3
 8000aae:	f000 fa12 	bl	8000ed6 <writeChar>
 8000ab2:	e00b      	b.n	8000acc <MQTTSerialize_connect+0xa8>
	}
	else
	{
		writeCString(&ptr, "MQIsdp");
 8000ab4:	f107 031c 	add.w	r3, r7, #28
 8000ab8:	494f      	ldr	r1, [pc, #316]	; (8000bf8 <MQTTSerialize_connect+0x1d4>)
 8000aba:	4618      	mov	r0, r3
 8000abc:	f000 fa49 	bl	8000f52 <writeCString>
		writeChar(&ptr, (char) 3);
 8000ac0:	f107 031c 	add.w	r3, r7, #28
 8000ac4:	2103      	movs	r1, #3
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f000 fa05 	bl	8000ed6 <writeChar>
	}

	flags.all = 0;
 8000acc:	2300      	movs	r3, #0
 8000ace:	753b      	strb	r3, [r7, #20]
	flags.bits.cleansession = options->cleansession;
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	7e9b      	ldrb	r3, [r3, #26]
 8000ad4:	f003 0301 	and.w	r3, r3, #1
 8000ad8:	b2da      	uxtb	r2, r3
 8000ada:	7d3b      	ldrb	r3, [r7, #20]
 8000adc:	f362 0341 	bfi	r3, r2, #1, #1
 8000ae0:	753b      	strb	r3, [r7, #20]
	flags.bits.will = (options->willFlag) ? 1 : 0;
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	7edb      	ldrb	r3, [r3, #27]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	bf14      	ite	ne
 8000aea:	2301      	movne	r3, #1
 8000aec:	2300      	moveq	r3, #0
 8000aee:	b2da      	uxtb	r2, r3
 8000af0:	7d3b      	ldrb	r3, [r7, #20]
 8000af2:	f362 0382 	bfi	r3, r2, #2, #1
 8000af6:	753b      	strb	r3, [r7, #20]
	if (flags.bits.will)
 8000af8:	7d3b      	ldrb	r3, [r7, #20]
 8000afa:	f003 0304 	and.w	r3, r3, #4
 8000afe:	b2db      	uxtb	r3, r3
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d013      	beq.n	8000b2c <MQTTSerialize_connect+0x108>
	{
		flags.bits.willQoS = options->will.qos;
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000b0a:	f003 0303 	and.w	r3, r3, #3
 8000b0e:	b2da      	uxtb	r2, r3
 8000b10:	7d3b      	ldrb	r3, [r7, #20]
 8000b12:	f362 03c4 	bfi	r3, r2, #3, #2
 8000b16:	753b      	strb	r3, [r7, #20]
		flags.bits.willRetain = options->will.retained;
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000b1e:	f003 0301 	and.w	r3, r3, #1
 8000b22:	b2da      	uxtb	r2, r3
 8000b24:	7d3b      	ldrb	r3, [r7, #20]
 8000b26:	f362 1345 	bfi	r3, r2, #5, #1
 8000b2a:	753b      	strb	r3, [r7, #20]
	}

	if (options->username.cstring || options->username.lenstring.data)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d103      	bne.n	8000b3c <MQTTSerialize_connect+0x118>
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d003      	beq.n	8000b44 <MQTTSerialize_connect+0x120>
		flags.bits.username = 1;
 8000b3c:	7d3b      	ldrb	r3, [r7, #20]
 8000b3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b42:	753b      	strb	r3, [r7, #20]
	if (options->password.cstring || options->password.lenstring.data)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d103      	bne.n	8000b54 <MQTTSerialize_connect+0x130>
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d003      	beq.n	8000b5c <MQTTSerialize_connect+0x138>
		flags.bits.password = 1;
 8000b54:	7d3b      	ldrb	r3, [r7, #20]
 8000b56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b5a:	753b      	strb	r3, [r7, #20]

	writeChar(&ptr, flags.all);
 8000b5c:	7d3a      	ldrb	r2, [r7, #20]
 8000b5e:	f107 031c 	add.w	r3, r7, #28
 8000b62:	4611      	mov	r1, r2
 8000b64:	4618      	mov	r0, r3
 8000b66:	f000 f9b6 	bl	8000ed6 <writeChar>
	writeInt(&ptr, options->keepAliveInterval);
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	8b1b      	ldrh	r3, [r3, #24]
 8000b6e:	461a      	mov	r2, r3
 8000b70:	f107 031c 	add.w	r3, r7, #28
 8000b74:	4611      	mov	r1, r2
 8000b76:	4618      	mov	r0, r3
 8000b78:	f000 f9c2 	bl	8000f00 <writeInt>
	writeMQTTString(&ptr, options->clientID);
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	f107 001c 	add.w	r0, r7, #28
 8000b82:	330c      	adds	r3, #12
 8000b84:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000b86:	f000 fa03 	bl	8000f90 <writeMQTTString>
	if (options->willFlag)
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	7edb      	ldrb	r3, [r3, #27]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d00d      	beq.n	8000bae <MQTTSerialize_connect+0x18a>
	{
		writeMQTTString(&ptr, options->will.topicName);
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	f107 001c 	add.w	r0, r7, #28
 8000b98:	3324      	adds	r3, #36	; 0x24
 8000b9a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000b9c:	f000 f9f8 	bl	8000f90 <writeMQTTString>
		writeMQTTString(&ptr, options->will.message);
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	f107 001c 	add.w	r0, r7, #28
 8000ba6:	3330      	adds	r3, #48	; 0x30
 8000ba8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000baa:	f000 f9f1 	bl	8000f90 <writeMQTTString>
	}
	if (flags.bits.username)
 8000bae:	7d3b      	ldrb	r3, [r7, #20]
 8000bb0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000bb4:	b2db      	uxtb	r3, r3
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d006      	beq.n	8000bc8 <MQTTSerialize_connect+0x1a4>
		writeMQTTString(&ptr, options->username);
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	f107 001c 	add.w	r0, r7, #28
 8000bc0:	3340      	adds	r3, #64	; 0x40
 8000bc2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000bc4:	f000 f9e4 	bl	8000f90 <writeMQTTString>
	if (flags.bits.password)
 8000bc8:	7d3b      	ldrb	r3, [r7, #20]
 8000bca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bce:	b2db      	uxtb	r3, r3
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d006      	beq.n	8000be2 <MQTTSerialize_connect+0x1be>
		writeMQTTString(&ptr, options->password);
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	f107 001c 	add.w	r0, r7, #28
 8000bda:	334c      	adds	r3, #76	; 0x4c
 8000bdc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000bde:	f000 f9d7 	bl	8000f90 <writeMQTTString>

	rc = ptr - buf;
 8000be2:	69fa      	ldr	r2, [r7, #28]
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	1ad3      	subs	r3, r2, r3
 8000be8:	627b      	str	r3, [r7, #36]	; 0x24

	exit: FUNC_EXIT_RC(rc);
	return rc;
 8000bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8000bec:	4618      	mov	r0, r3
 8000bee:	3728      	adds	r7, #40	; 0x28
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	08020b14 	.word	0x08020b14
 8000bf8:	08020b1c 	.word	0x08020b1c

08000bfc <MQTTDeserialize_publish>:
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success
  */
int MQTTDeserialize_publish(unsigned char* dup, int* qos, unsigned char* retained, unsigned short* packetid, MQTTString* topicName,
		unsigned char** payload, int* payloadlen, unsigned char* buf, int buflen)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b08a      	sub	sp, #40	; 0x28
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	60f8      	str	r0, [r7, #12]
 8000c04:	60b9      	str	r1, [r7, #8]
 8000c06:	607a      	str	r2, [r7, #4]
 8000c08:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 8000c0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000c10:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 8000c12:	2300      	movs	r3, #0
 8000c14:	623b      	str	r3, [r7, #32]
	int rc = 0;
 8000c16:	2300      	movs	r3, #0
 8000c18:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen = 0;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 8000c1e:	f107 0318 	add.w	r3, r7, #24
 8000c22:	4618      	mov	r0, r3
 8000c24:	f000 f943 	bl	8000eae <readChar>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != PUBLISH)
 8000c2c:	7f3b      	ldrb	r3, [r7, #28]
 8000c2e:	f023 030f 	bic.w	r3, r3, #15
 8000c32:	b2db      	uxtb	r3, r3
 8000c34:	2b30      	cmp	r3, #48	; 0x30
 8000c36:	d14b      	bne.n	8000cd0 <MQTTDeserialize_publish+0xd4>
		goto exit;
	*dup = header.bits.dup;
 8000c38:	7f3b      	ldrb	r3, [r7, #28]
 8000c3a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8000c3e:	b2db      	uxtb	r3, r3
 8000c40:	461a      	mov	r2, r3
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	701a      	strb	r2, [r3, #0]
	*qos = header.bits.qos;
 8000c46:	7f3b      	ldrb	r3, [r7, #28]
 8000c48:	f3c3 0341 	ubfx	r3, r3, #1, #2
 8000c4c:	b2db      	uxtb	r3, r3
 8000c4e:	461a      	mov	r2, r3
 8000c50:	68bb      	ldr	r3, [r7, #8]
 8000c52:	601a      	str	r2, [r3, #0]
	*retained = header.bits.retain;
 8000c54:	7f3b      	ldrb	r3, [r7, #28]
 8000c56:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000c5a:	b2db      	uxtb	r3, r3
 8000c5c:	461a      	mov	r2, r3
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen));
 8000c62:	69bb      	ldr	r3, [r7, #24]
 8000c64:	f107 0214 	add.w	r2, r7, #20
 8000c68:	4611      	mov	r1, r2
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f000 f8ee 	bl	8000e4c <MQTTPacket_decodeBuf>
 8000c70:	6278      	str	r0, [r7, #36]	; 0x24
 8000c72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c74:	69bb      	ldr	r3, [r7, #24]
 8000c76:	4413      	add	r3, r2
 8000c78:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 8000c7a:	69bb      	ldr	r3, [r7, #24]
 8000c7c:	697a      	ldr	r2, [r7, #20]
 8000c7e:	4413      	add	r3, r2
 8000c80:	623b      	str	r3, [r7, #32]

	if (!readMQTTLenString(topicName, &curdata, enddata) ||
 8000c82:	f107 0318 	add.w	r3, r7, #24
 8000c86:	6a3a      	ldr	r2, [r7, #32]
 8000c88:	4619      	mov	r1, r3
 8000c8a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000c8c:	f000 f9ae 	bl	8000fec <readMQTTLenString>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d01e      	beq.n	8000cd4 <MQTTDeserialize_publish+0xd8>
		enddata - curdata < 0)
 8000c96:	69bb      	ldr	r3, [r7, #24]
 8000c98:	6a3a      	ldr	r2, [r7, #32]
 8000c9a:	1ad3      	subs	r3, r2, r3
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	db19      	blt.n	8000cd4 <MQTTDeserialize_publish+0xd8>
		goto exit;

	if (*qos > 0)
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	dd08      	ble.n	8000cba <MQTTDeserialize_publish+0xbe>
		*packetid = readInt(&curdata);
 8000ca8:	f107 0318 	add.w	r3, r7, #24
 8000cac:	4618      	mov	r0, r3
 8000cae:	f000 f8e3 	bl	8000e78 <readInt>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	b29a      	uxth	r2, r3
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	801a      	strh	r2, [r3, #0]

	*payloadlen = enddata - curdata;
 8000cba:	69bb      	ldr	r3, [r7, #24]
 8000cbc:	6a3a      	ldr	r2, [r7, #32]
 8000cbe:	1ad2      	subs	r2, r2, r3
 8000cc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000cc2:	601a      	str	r2, [r3, #0]
	*payload = curdata;
 8000cc4:	69ba      	ldr	r2, [r7, #24]
 8000cc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000cc8:	601a      	str	r2, [r3, #0]
	rc = 1;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	627b      	str	r3, [r7, #36]	; 0x24
 8000cce:	e002      	b.n	8000cd6 <MQTTDeserialize_publish+0xda>
		goto exit;
 8000cd0:	bf00      	nop
 8000cd2:	e000      	b.n	8000cd6 <MQTTDeserialize_publish+0xda>
		goto exit;
 8000cd4:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8000cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8000cd8:	4618      	mov	r0, r3
 8000cda:	3728      	adds	r7, #40	; 0x28
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}

08000ce0 <MQTTPacket_encode>:
 * @param buf the buffer into which the encoded data is written
 * @param length the length to be encoded
 * @return the number of bytes written to buffer
 */
int MQTTPacket_encode(unsigned char* buf, int length)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b085      	sub	sp, #20
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
 8000ce8:	6039      	str	r1, [r7, #0]
	int rc = 0;
 8000cea:	2300      	movs	r3, #0
 8000cec:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;
	do
	{
		char d = length % 128;
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	425a      	negs	r2, r3
 8000cf2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000cf6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000cfa:	bf58      	it	pl
 8000cfc:	4253      	negpl	r3, r2
 8000cfe:	72fb      	strb	r3, [r7, #11]
		length /= 128;
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	da00      	bge.n	8000d08 <MQTTPacket_encode+0x28>
 8000d06:	337f      	adds	r3, #127	; 0x7f
 8000d08:	11db      	asrs	r3, r3, #7
 8000d0a:	603b      	str	r3, [r7, #0]
		/* if there are more digits to encode, set the top bit of this digit */
		if (length > 0)
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	dd03      	ble.n	8000d1a <MQTTPacket_encode+0x3a>
			d |= 0x80;
 8000d12:	7afb      	ldrb	r3, [r7, #11]
 8000d14:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d18:	72fb      	strb	r3, [r7, #11]
		buf[rc++] = d;
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	1c5a      	adds	r2, r3, #1
 8000d1e:	60fa      	str	r2, [r7, #12]
 8000d20:	461a      	mov	r2, r3
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	4413      	add	r3, r2
 8000d26:	7afa      	ldrb	r2, [r7, #11]
 8000d28:	701a      	strb	r2, [r3, #0]
	} while (length > 0);
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	dcde      	bgt.n	8000cee <MQTTPacket_encode+0xe>
	FUNC_EXIT_RC(rc);
	return rc;
 8000d30:	68fb      	ldr	r3, [r7, #12]
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	3714      	adds	r7, #20
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr

08000d3e <MQTTPacket_decode>:
 * @param getcharfn pointer to function to read the next character from the data source
 * @param value the decoded length returned
 * @return the number of bytes read from the socket
 */
int MQTTPacket_decode(int (*getcharfn)(unsigned char*, int), int* value)
{
 8000d3e:	b580      	push	{r7, lr}
 8000d40:	b086      	sub	sp, #24
 8000d42:	af00      	add	r7, sp, #0
 8000d44:	6078      	str	r0, [r7, #4]
 8000d46:	6039      	str	r1, [r7, #0]
	unsigned char c;
	int multiplier = 1;
 8000d48:	2301      	movs	r3, #1
 8000d4a:	617b      	str	r3, [r7, #20]
	int len = 0;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	613b      	str	r3, [r7, #16]
#define MAX_NO_OF_REMAINING_LENGTH_BYTES 4

	FUNC_ENTRY;
	*value = 0;
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	2200      	movs	r2, #0
 8000d54:	601a      	str	r2, [r3, #0]
	do
	{
		int rc = MQTTPACKET_READ_ERROR;
 8000d56:	f04f 33ff 	mov.w	r3, #4294967295
 8000d5a:	60fb      	str	r3, [r7, #12]

		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
 8000d5c:	693b      	ldr	r3, [r7, #16]
 8000d5e:	3301      	adds	r3, #1
 8000d60:	613b      	str	r3, [r7, #16]
 8000d62:	693b      	ldr	r3, [r7, #16]
 8000d64:	2b04      	cmp	r3, #4
 8000d66:	dd03      	ble.n	8000d70 <MQTTPacket_decode+0x32>
		{
			rc = MQTTPACKET_READ_ERROR;	/* bad data */
 8000d68:	f04f 33ff 	mov.w	r3, #4294967295
 8000d6c:	60fb      	str	r3, [r7, #12]
			goto exit;
 8000d6e:	e01d      	b.n	8000dac <MQTTPacket_decode+0x6e>
		}
		rc = (*getcharfn)(&c, 1);
 8000d70:	f107 020b 	add.w	r2, r7, #11
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	2101      	movs	r1, #1
 8000d78:	4610      	mov	r0, r2
 8000d7a:	4798      	blx	r3
 8000d7c:	60f8      	str	r0, [r7, #12]
		if (rc != 1)
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	2b01      	cmp	r3, #1
 8000d82:	d112      	bne.n	8000daa <MQTTPacket_decode+0x6c>
			goto exit;
		*value += (c & 127) * multiplier;
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	681a      	ldr	r2, [r3, #0]
 8000d88:	7afb      	ldrb	r3, [r7, #11]
 8000d8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000d8e:	6979      	ldr	r1, [r7, #20]
 8000d90:	fb01 f303 	mul.w	r3, r1, r3
 8000d94:	441a      	add	r2, r3
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	601a      	str	r2, [r3, #0]
		multiplier *= 128;
 8000d9a:	697b      	ldr	r3, [r7, #20]
 8000d9c:	01db      	lsls	r3, r3, #7
 8000d9e:	617b      	str	r3, [r7, #20]
	} while ((c & 128) != 0);
 8000da0:	7afb      	ldrb	r3, [r7, #11]
 8000da2:	b25b      	sxtb	r3, r3
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	dbd6      	blt.n	8000d56 <MQTTPacket_decode+0x18>
exit:
 8000da8:	e000      	b.n	8000dac <MQTTPacket_decode+0x6e>
			goto exit;
 8000daa:	bf00      	nop
	FUNC_EXIT_RC(len);
	return len;
 8000dac:	693b      	ldr	r3, [r7, #16]
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	3718      	adds	r7, #24
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
	...

08000db8 <MQTTPacket_len>:


int MQTTPacket_len(int rem_len)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b083      	sub	sp, #12
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
	rem_len += 1; /* header byte */
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	3301      	adds	r3, #1
 8000dc4:	607b      	str	r3, [r7, #4]

	/* now remaining_length field */
	if (rem_len < 128)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	2b7f      	cmp	r3, #127	; 0x7f
 8000dca:	dc03      	bgt.n	8000dd4 <MQTTPacket_len+0x1c>
		rem_len += 1;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	3301      	adds	r3, #1
 8000dd0:	607b      	str	r3, [r7, #4]
 8000dd2:	e012      	b.n	8000dfa <MQTTPacket_len+0x42>
	else if (rem_len < 16384)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000dda:	da03      	bge.n	8000de4 <MQTTPacket_len+0x2c>
		rem_len += 2;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	3302      	adds	r3, #2
 8000de0:	607b      	str	r3, [r7, #4]
 8000de2:	e00a      	b.n	8000dfa <MQTTPacket_len+0x42>
	else if (rem_len < 2097151)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	4a08      	ldr	r2, [pc, #32]	; (8000e08 <MQTTPacket_len+0x50>)
 8000de8:	4293      	cmp	r3, r2
 8000dea:	dc03      	bgt.n	8000df4 <MQTTPacket_len+0x3c>
		rem_len += 3;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	3303      	adds	r3, #3
 8000df0:	607b      	str	r3, [r7, #4]
 8000df2:	e002      	b.n	8000dfa <MQTTPacket_len+0x42>
	else
		rem_len += 4;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	3304      	adds	r3, #4
 8000df8:	607b      	str	r3, [r7, #4]
	return rem_len;
 8000dfa:	687b      	ldr	r3, [r7, #4]
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	370c      	adds	r7, #12
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr
 8000e08:	001ffffe 	.word	0x001ffffe

08000e0c <bufchar>:


static unsigned char* bufptr;

int bufchar(unsigned char* c, int count)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b085      	sub	sp, #20
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
 8000e14:	6039      	str	r1, [r7, #0]
	int i;

	for (i = 0; i < count; ++i)
 8000e16:	2300      	movs	r3, #0
 8000e18:	60fb      	str	r3, [r7, #12]
 8000e1a:	e00a      	b.n	8000e32 <bufchar+0x26>
		*c = *bufptr++;
 8000e1c:	4b0a      	ldr	r3, [pc, #40]	; (8000e48 <bufchar+0x3c>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	1c5a      	adds	r2, r3, #1
 8000e22:	4909      	ldr	r1, [pc, #36]	; (8000e48 <bufchar+0x3c>)
 8000e24:	600a      	str	r2, [r1, #0]
 8000e26:	781a      	ldrb	r2, [r3, #0]
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < count; ++i)
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	3301      	adds	r3, #1
 8000e30:	60fb      	str	r3, [r7, #12]
 8000e32:	68fa      	ldr	r2, [r7, #12]
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	429a      	cmp	r2, r3
 8000e38:	dbf0      	blt.n	8000e1c <bufchar+0x10>
	return count;
 8000e3a:	683b      	ldr	r3, [r7, #0]
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	3714      	adds	r7, #20
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr
 8000e48:	24000964 	.word	0x24000964

08000e4c <MQTTPacket_decodeBuf>:


int MQTTPacket_decodeBuf(unsigned char* buf, int* value)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
 8000e54:	6039      	str	r1, [r7, #0]
	bufptr = buf;
 8000e56:	4a06      	ldr	r2, [pc, #24]	; (8000e70 <MQTTPacket_decodeBuf+0x24>)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	6013      	str	r3, [r2, #0]
	return MQTTPacket_decode(bufchar, value);
 8000e5c:	6839      	ldr	r1, [r7, #0]
 8000e5e:	4805      	ldr	r0, [pc, #20]	; (8000e74 <MQTTPacket_decodeBuf+0x28>)
 8000e60:	f7ff ff6d 	bl	8000d3e <MQTTPacket_decode>
 8000e64:	4603      	mov	r3, r0
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	3708      	adds	r7, #8
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	24000964 	.word	0x24000964
 8000e74:	08000e0d 	.word	0x08000e0d

08000e78 <readInt>:
 * Calculates an integer from two bytes read from the input buffer
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the integer value calculated
 */
int readInt(unsigned char** pptr)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b085      	sub	sp, #20
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
	unsigned char* ptr = *pptr;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	60fb      	str	r3, [r7, #12]
	int len = 256*(*ptr) + (*(ptr+1));
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	781b      	ldrb	r3, [r3, #0]
 8000e8a:	021b      	lsls	r3, r3, #8
 8000e8c:	68fa      	ldr	r2, [r7, #12]
 8000e8e:	3201      	adds	r2, #1
 8000e90:	7812      	ldrb	r2, [r2, #0]
 8000e92:	4413      	add	r3, r2
 8000e94:	60bb      	str	r3, [r7, #8]
	*pptr += 2;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	1c9a      	adds	r2, r3, #2
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	601a      	str	r2, [r3, #0]
	return len;
 8000ea0:	68bb      	ldr	r3, [r7, #8]
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	3714      	adds	r7, #20
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr

08000eae <readChar>:
 * Reads one character from the input buffer.
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the character read
 */
char readChar(unsigned char** pptr)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	b085      	sub	sp, #20
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	6078      	str	r0, [r7, #4]
	char c = **pptr;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	73fb      	strb	r3, [r7, #15]
	(*pptr)++;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	1c5a      	adds	r2, r3, #1
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	601a      	str	r2, [r3, #0]
	return c;
 8000ec8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	3714      	adds	r7, #20
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr

08000ed6 <writeChar>:
 * Writes one character to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param c the character to write
 */
void writeChar(unsigned char** pptr, char c)
{
 8000ed6:	b480      	push	{r7}
 8000ed8:	b083      	sub	sp, #12
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	6078      	str	r0, [r7, #4]
 8000ede:	460b      	mov	r3, r1
 8000ee0:	70fb      	strb	r3, [r7, #3]
	**pptr = c;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	78fa      	ldrb	r2, [r7, #3]
 8000ee8:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	1c5a      	adds	r2, r3, #1
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	601a      	str	r2, [r3, #0]
}
 8000ef4:	bf00      	nop
 8000ef6:	370c      	adds	r7, #12
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr

08000f00 <writeInt>:
 * Writes an integer as 2 bytes to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param anInt the integer to write
 */
void writeInt(unsigned char** pptr, int anInt)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b083      	sub	sp, #12
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
 8000f08:	6039      	str	r1, [r7, #0]
	**pptr = (unsigned char)(anInt / 256);
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	da00      	bge.n	8000f12 <writeInt+0x12>
 8000f10:	33ff      	adds	r3, #255	; 0xff
 8000f12:	121b      	asrs	r3, r3, #8
 8000f14:	461a      	mov	r2, r3
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	b2d2      	uxtb	r2, r2
 8000f1c:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	1c5a      	adds	r2, r3, #1
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	601a      	str	r2, [r3, #0]
	**pptr = (unsigned char)(anInt % 256);
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	425a      	negs	r2, r3
 8000f2c:	b2db      	uxtb	r3, r3
 8000f2e:	b2d2      	uxtb	r2, r2
 8000f30:	bf58      	it	pl
 8000f32:	4253      	negpl	r3, r2
 8000f34:	687a      	ldr	r2, [r7, #4]
 8000f36:	6812      	ldr	r2, [r2, #0]
 8000f38:	b2db      	uxtb	r3, r3
 8000f3a:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	1c5a      	adds	r2, r3, #1
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	601a      	str	r2, [r3, #0]
}
 8000f46:	bf00      	nop
 8000f48:	370c      	adds	r7, #12
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr

08000f52 <writeCString>:
 * Writes a "UTF" string to an output buffer.  Converts C string to length-delimited.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param string the C string to write
 */
void writeCString(unsigned char** pptr, const char* string)
{
 8000f52:	b580      	push	{r7, lr}
 8000f54:	b084      	sub	sp, #16
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	6078      	str	r0, [r7, #4]
 8000f5a:	6039      	str	r1, [r7, #0]
	int len = strlen(string);
 8000f5c:	6838      	ldr	r0, [r7, #0]
 8000f5e:	f7ff fae5 	bl	800052c <strlen>
 8000f62:	4603      	mov	r3, r0
 8000f64:	60fb      	str	r3, [r7, #12]
	writeInt(pptr, len);
 8000f66:	68f9      	ldr	r1, [r7, #12]
 8000f68:	6878      	ldr	r0, [r7, #4]
 8000f6a:	f7ff ffc9 	bl	8000f00 <writeInt>
	memcpy(*pptr, string, len);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	68fa      	ldr	r2, [r7, #12]
 8000f74:	6839      	ldr	r1, [r7, #0]
 8000f76:	4618      	mov	r0, r3
 8000f78:	f01e fcd0 	bl	801f91c <memcpy>
	*pptr += len;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681a      	ldr	r2, [r3, #0]
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	441a      	add	r2, r3
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	601a      	str	r2, [r3, #0]
}
 8000f88:	bf00      	nop
 8000f8a:	3710      	adds	r7, #16
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}

08000f90 <writeMQTTString>:
	return len;
}


void writeMQTTString(unsigned char** pptr, MQTTString mqttstring)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b084      	sub	sp, #16
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	60f8      	str	r0, [r7, #12]
 8000f98:	4638      	mov	r0, r7
 8000f9a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if (mqttstring.lenstring.len > 0)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	dd12      	ble.n	8000fca <writeMQTTString+0x3a>
	{
		writeInt(pptr, mqttstring.lenstring.len);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	68f8      	ldr	r0, [r7, #12]
 8000faa:	f7ff ffa9 	bl	8000f00 <writeInt>
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	68b9      	ldr	r1, [r7, #8]
 8000fb4:	687a      	ldr	r2, [r7, #4]
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f01e fcb0 	bl	801f91c <memcpy>
		*pptr += mqttstring.lenstring.len;
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	687a      	ldr	r2, [r7, #4]
 8000fc2:	441a      	add	r2, r3
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	601a      	str	r2, [r3, #0]
	}
	else if (mqttstring.cstring)
		writeCString(pptr, mqttstring.cstring);
	else
		writeInt(pptr, 0);
}
 8000fc8:	e00c      	b.n	8000fe4 <writeMQTTString+0x54>
	else if (mqttstring.cstring)
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d005      	beq.n	8000fdc <writeMQTTString+0x4c>
		writeCString(pptr, mqttstring.cstring);
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	68f8      	ldr	r0, [r7, #12]
 8000fd6:	f7ff ffbc 	bl	8000f52 <writeCString>
}
 8000fda:	e003      	b.n	8000fe4 <writeMQTTString+0x54>
		writeInt(pptr, 0);
 8000fdc:	2100      	movs	r1, #0
 8000fde:	68f8      	ldr	r0, [r7, #12]
 8000fe0:	f7ff ff8e 	bl	8000f00 <writeInt>
}
 8000fe4:	bf00      	nop
 8000fe6:	3710      	adds	r7, #16
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}

08000fec <readMQTTLenString>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param enddata pointer to the end of the data: do not read beyond
 * @return 1 if successful, 0 if not
 */
int readMQTTLenString(MQTTString* mqttstring, unsigned char** pptr, unsigned char* enddata)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b086      	sub	sp, #24
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	60f8      	str	r0, [r7, #12]
 8000ff4:	60b9      	str	r1, [r7, #8]
 8000ff6:	607a      	str	r2, [r7, #4]
	int rc = 0;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	/* the first two bytes are the length of the string */
	if (enddata - (*pptr) > 1) /* enough length to read the integer? */
 8000ffc:	68bb      	ldr	r3, [r7, #8]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	687a      	ldr	r2, [r7, #4]
 8001002:	1ad3      	subs	r3, r2, r3
 8001004:	2b01      	cmp	r3, #1
 8001006:	dd1a      	ble.n	800103e <readMQTTLenString+0x52>
	{
		mqttstring->lenstring.len = readInt(pptr); /* increments pptr to point past length */
 8001008:	68b8      	ldr	r0, [r7, #8]
 800100a:	f7ff ff35 	bl	8000e78 <readInt>
 800100e:	4602      	mov	r2, r0
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	605a      	str	r2, [r3, #4]
		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
 8001014:	68bb      	ldr	r3, [r7, #8]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	68fa      	ldr	r2, [r7, #12]
 800101a:	6852      	ldr	r2, [r2, #4]
 800101c:	4413      	add	r3, r2
 800101e:	687a      	ldr	r2, [r7, #4]
 8001020:	429a      	cmp	r2, r3
 8001022:	d30c      	bcc.n	800103e <readMQTTLenString+0x52>
		{
			mqttstring->lenstring.data = (char*)*pptr;
 8001024:	68bb      	ldr	r3, [r7, #8]
 8001026:	681a      	ldr	r2, [r3, #0]
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	609a      	str	r2, [r3, #8]
			*pptr += mqttstring->lenstring.len;
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	68fa      	ldr	r2, [r7, #12]
 8001032:	6852      	ldr	r2, [r2, #4]
 8001034:	441a      	add	r2, r3
 8001036:	68bb      	ldr	r3, [r7, #8]
 8001038:	601a      	str	r2, [r3, #0]
			rc = 1;
 800103a:	2301      	movs	r3, #1
 800103c:	617b      	str	r3, [r7, #20]
		}
	}
	mqttstring->cstring = NULL;
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	2200      	movs	r2, #0
 8001042:	601a      	str	r2, [r3, #0]
	FUNC_EXIT_RC(rc);
	return rc;
 8001044:	697b      	ldr	r3, [r7, #20]
}
 8001046:	4618      	mov	r0, r3
 8001048:	3718      	adds	r7, #24
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}

0800104e <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int MQTTstrlen(MQTTString mqttstring)
{
 800104e:	b580      	push	{r7, lr}
 8001050:	b086      	sub	sp, #24
 8001052:	af00      	add	r7, sp, #0
 8001054:	1d3b      	adds	r3, r7, #4
 8001056:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	int rc = 0;
 800105a:	2300      	movs	r3, #0
 800105c:	617b      	str	r3, [r7, #20]

	if (mqttstring.cstring)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d006      	beq.n	8001072 <MQTTstrlen+0x24>
		rc = strlen(mqttstring.cstring);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	4618      	mov	r0, r3
 8001068:	f7ff fa60 	bl	800052c <strlen>
 800106c:	4603      	mov	r3, r0
 800106e:	617b      	str	r3, [r7, #20]
 8001070:	e001      	b.n	8001076 <MQTTstrlen+0x28>
	else
		rc = mqttstring.lenstring.len;
 8001072:	68bb      	ldr	r3, [r7, #8]
 8001074:	617b      	str	r3, [r7, #20]
	return rc;
 8001076:	697b      	ldr	r3, [r7, #20]
}
 8001078:	4618      	mov	r0, r3
 800107a:	3718      	adds	r7, #24
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}

08001080 <MQTTSerialize_publishLength>:
  * @param topicName the topic name to be used in the publish  
  * @param payloadlen the length of the payload to be sent
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_publishLength(int qos, MQTTString topicName, int payloadlen)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b086      	sub	sp, #24
 8001084:	af00      	add	r7, sp, #0
 8001086:	60f8      	str	r0, [r7, #12]
 8001088:	4638      	mov	r0, r7
 800108a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	int len = 0;
 800108e:	2300      	movs	r3, #0
 8001090:	617b      	str	r3, [r7, #20]

	len += 2 + MQTTstrlen(topicName) + payloadlen;
 8001092:	463b      	mov	r3, r7
 8001094:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001098:	f7ff ffd9 	bl	800104e <MQTTstrlen>
 800109c:	4603      	mov	r3, r0
 800109e:	1c9a      	adds	r2, r3, #2
 80010a0:	6a3b      	ldr	r3, [r7, #32]
 80010a2:	4413      	add	r3, r2
 80010a4:	697a      	ldr	r2, [r7, #20]
 80010a6:	4413      	add	r3, r2
 80010a8:	617b      	str	r3, [r7, #20]
	if (qos > 0)
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	dd02      	ble.n	80010b6 <MQTTSerialize_publishLength+0x36>
		len += 2; /* packetid */
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	3302      	adds	r3, #2
 80010b4:	617b      	str	r3, [r7, #20]
	return len;
 80010b6:	697b      	ldr	r3, [r7, #20]
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	3718      	adds	r7, #24
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}

080010c0 <MQTTSerialize_publish>:
  * @param payloadlen integer - the length of the MQTT payload
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_publish(unsigned char* buf, int buflen, unsigned char dup, int qos, unsigned char retained, unsigned short packetid,
		MQTTString topicName, unsigned char* payload, int payloadlen)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b08a      	sub	sp, #40	; 0x28
 80010c4:	af02      	add	r7, sp, #8
 80010c6:	60f8      	str	r0, [r7, #12]
 80010c8:	60b9      	str	r1, [r7, #8]
 80010ca:	603b      	str	r3, [r7, #0]
 80010cc:	4613      	mov	r3, r2
 80010ce:	71fb      	strb	r3, [r7, #7]
	unsigned char *ptr = buf;
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	617b      	str	r3, [r7, #20]
	MQTTHeader header = {0};
 80010d4:	2300      	movs	r3, #0
 80010d6:	613b      	str	r3, [r7, #16]
	int rem_len = 0;
 80010d8:	2300      	movs	r3, #0
 80010da:	61bb      	str	r3, [r7, #24]
	int rc = 0;
 80010dc:	2300      	movs	r3, #0
 80010de:	61fb      	str	r3, [r7, #28]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
 80010e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80010e2:	9300      	str	r3, [sp, #0]
 80010e4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80010e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80010ea:	6838      	ldr	r0, [r7, #0]
 80010ec:	f7ff ffc8 	bl	8001080 <MQTTSerialize_publishLength>
 80010f0:	61b8      	str	r0, [r7, #24]
 80010f2:	69b8      	ldr	r0, [r7, #24]
 80010f4:	f7ff fe60 	bl	8000db8 <MQTTPacket_len>
 80010f8:	4602      	mov	r2, r0
 80010fa:	68bb      	ldr	r3, [r7, #8]
 80010fc:	4293      	cmp	r3, r2
 80010fe:	da03      	bge.n	8001108 <MQTTSerialize_publish+0x48>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 8001100:	f06f 0301 	mvn.w	r3, #1
 8001104:	61fb      	str	r3, [r7, #28]
		goto exit;
 8001106:	e04c      	b.n	80011a2 <MQTTSerialize_publish+0xe2>
	}

	header.bits.type = PUBLISH;
 8001108:	7c3b      	ldrb	r3, [r7, #16]
 800110a:	2203      	movs	r2, #3
 800110c:	f362 1307 	bfi	r3, r2, #4, #4
 8001110:	743b      	strb	r3, [r7, #16]
	header.bits.dup = dup;
 8001112:	79fb      	ldrb	r3, [r7, #7]
 8001114:	f003 0301 	and.w	r3, r3, #1
 8001118:	b2da      	uxtb	r2, r3
 800111a:	7c3b      	ldrb	r3, [r7, #16]
 800111c:	f362 03c3 	bfi	r3, r2, #3, #1
 8001120:	743b      	strb	r3, [r7, #16]
	header.bits.qos = qos;
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	f003 0303 	and.w	r3, r3, #3
 8001128:	b2da      	uxtb	r2, r3
 800112a:	7c3b      	ldrb	r3, [r7, #16]
 800112c:	f362 0342 	bfi	r3, r2, #1, #2
 8001130:	743b      	strb	r3, [r7, #16]
	header.bits.retain = retained;
 8001132:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001136:	f003 0301 	and.w	r3, r3, #1
 800113a:	b2da      	uxtb	r2, r3
 800113c:	7c3b      	ldrb	r3, [r7, #16]
 800113e:	f362 0300 	bfi	r3, r2, #0, #1
 8001142:	743b      	strb	r3, [r7, #16]
	writeChar(&ptr, header.byte); /* write header */
 8001144:	7c3a      	ldrb	r2, [r7, #16]
 8001146:	f107 0314 	add.w	r3, r7, #20
 800114a:	4611      	mov	r1, r2
 800114c:	4618      	mov	r0, r3
 800114e:	f7ff fec2 	bl	8000ed6 <writeChar>

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	69b9      	ldr	r1, [r7, #24]
 8001156:	4618      	mov	r0, r3
 8001158:	f7ff fdc2 	bl	8000ce0 <MQTTPacket_encode>
 800115c:	4602      	mov	r2, r0
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	4413      	add	r3, r2
 8001162:	617b      	str	r3, [r7, #20]

	writeMQTTString(&ptr, topicName);
 8001164:	f107 0014 	add.w	r0, r7, #20
 8001168:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800116c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800116e:	f7ff ff0f 	bl	8000f90 <writeMQTTString>

	if (qos > 0)
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	2b00      	cmp	r3, #0
 8001176:	dd06      	ble.n	8001186 <MQTTSerialize_publish+0xc6>
		writeInt(&ptr, packetid);
 8001178:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800117a:	f107 0314 	add.w	r3, r7, #20
 800117e:	4611      	mov	r1, r2
 8001180:	4618      	mov	r0, r3
 8001182:	f7ff febd 	bl	8000f00 <writeInt>

	memcpy(ptr, payload, payloadlen);
 8001186:	697b      	ldr	r3, [r7, #20]
 8001188:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800118a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800118c:	4618      	mov	r0, r3
 800118e:	f01e fbc5 	bl	801f91c <memcpy>
	ptr += payloadlen;
 8001192:	697a      	ldr	r2, [r7, #20]
 8001194:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001196:	4413      	add	r3, r2
 8001198:	617b      	str	r3, [r7, #20]

	rc = ptr - buf;
 800119a:	697a      	ldr	r2, [r7, #20]
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	1ad3      	subs	r3, r2, r3
 80011a0:	61fb      	str	r3, [r7, #28]

exit:
	FUNC_EXIT_RC(rc);
	return rc;
 80011a2:	69fb      	ldr	r3, [r7, #28]
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	3720      	adds	r7, #32
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}

080011ac <Sim800_RxCallBack>:
 * Call back function for release read SIM800 UART buffer.
 * @param NONE
 * @return NONE
 */
void Sim800_RxCallBack(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
    rx_buffer[rx_index++] = rx_data;
 80011b0:	4b50      	ldr	r3, [pc, #320]	; (80012f4 <Sim800_RxCallBack+0x148>)
 80011b2:	881b      	ldrh	r3, [r3, #0]
 80011b4:	1c5a      	adds	r2, r3, #1
 80011b6:	b291      	uxth	r1, r2
 80011b8:	4a4e      	ldr	r2, [pc, #312]	; (80012f4 <Sim800_RxCallBack+0x148>)
 80011ba:	8011      	strh	r1, [r2, #0]
 80011bc:	461a      	mov	r2, r3
 80011be:	4b4e      	ldr	r3, [pc, #312]	; (80012f8 <Sim800_RxCallBack+0x14c>)
 80011c0:	7819      	ldrb	r1, [r3, #0]
 80011c2:	4b4e      	ldr	r3, [pc, #312]	; (80012fc <Sim800_RxCallBack+0x150>)
 80011c4:	5499      	strb	r1, [r3, r2]

    if (SIM800.mqttServer.connect == 0)
 80011c6:	4b4e      	ldr	r3, [pc, #312]	; (8001300 <Sim800_RxCallBack+0x154>)
 80011c8:	7c9b      	ldrb	r3, [r3, #18]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d135      	bne.n	800123a <Sim800_RxCallBack+0x8e>
    {
        if (strstr((char *)rx_buffer, "\r\n") != NULL && rx_index == 2)
 80011ce:	494d      	ldr	r1, [pc, #308]	; (8001304 <Sim800_RxCallBack+0x158>)
 80011d0:	484a      	ldr	r0, [pc, #296]	; (80012fc <Sim800_RxCallBack+0x150>)
 80011d2:	f01e fb60 	bl	801f896 <strstr>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d007      	beq.n	80011ec <Sim800_RxCallBack+0x40>
 80011dc:	4b45      	ldr	r3, [pc, #276]	; (80012f4 <Sim800_RxCallBack+0x148>)
 80011de:	881b      	ldrh	r3, [r3, #0]
 80011e0:	2b02      	cmp	r3, #2
 80011e2:	d103      	bne.n	80011ec <Sim800_RxCallBack+0x40>
        {
            rx_index = 0;
 80011e4:	4b43      	ldr	r3, [pc, #268]	; (80012f4 <Sim800_RxCallBack+0x148>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	801a      	strh	r2, [r3, #0]
 80011ea:	e026      	b.n	800123a <Sim800_RxCallBack+0x8e>
        }
        else if (strstr((char *)rx_buffer, "\r\n") != NULL)
 80011ec:	4945      	ldr	r1, [pc, #276]	; (8001304 <Sim800_RxCallBack+0x158>)
 80011ee:	4843      	ldr	r0, [pc, #268]	; (80012fc <Sim800_RxCallBack+0x150>)
 80011f0:	f01e fb51 	bl	801f896 <strstr>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d01f      	beq.n	800123a <Sim800_RxCallBack+0x8e>
        {
            memcpy(mqtt_buffer, rx_buffer, sizeof(rx_buffer));
 80011fa:	4a43      	ldr	r2, [pc, #268]	; (8001308 <Sim800_RxCallBack+0x15c>)
 80011fc:	4b3f      	ldr	r3, [pc, #252]	; (80012fc <Sim800_RxCallBack+0x150>)
 80011fe:	4610      	mov	r0, r2
 8001200:	4619      	mov	r1, r3
 8001202:	f240 53b4 	movw	r3, #1460	; 0x5b4
 8001206:	461a      	mov	r2, r3
 8001208:	f01e fb88 	bl	801f91c <memcpy>
            clearRxBuffer();
 800120c:	f000 f88e 	bl	800132c <clearRxBuffer>
            if (strstr(mqtt_buffer, "DY CONNECT\r\n"))
 8001210:	493e      	ldr	r1, [pc, #248]	; (800130c <Sim800_RxCallBack+0x160>)
 8001212:	483d      	ldr	r0, [pc, #244]	; (8001308 <Sim800_RxCallBack+0x15c>)
 8001214:	f01e fb3f 	bl	801f896 <strstr>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d003      	beq.n	8001226 <Sim800_RxCallBack+0x7a>
            {
                SIM800.mqttServer.connect = 0;
 800121e:	4b38      	ldr	r3, [pc, #224]	; (8001300 <Sim800_RxCallBack+0x154>)
 8001220:	2200      	movs	r2, #0
 8001222:	749a      	strb	r2, [r3, #18]
 8001224:	e009      	b.n	800123a <Sim800_RxCallBack+0x8e>
            }
            else if (strstr(mqtt_buffer, "CONNECT\r\n"))
 8001226:	493a      	ldr	r1, [pc, #232]	; (8001310 <Sim800_RxCallBack+0x164>)
 8001228:	4837      	ldr	r0, [pc, #220]	; (8001308 <Sim800_RxCallBack+0x15c>)
 800122a:	f01e fb34 	bl	801f896 <strstr>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d002      	beq.n	800123a <Sim800_RxCallBack+0x8e>
            {
                SIM800.mqttServer.connect = 1;
 8001234:	4b32      	ldr	r3, [pc, #200]	; (8001300 <Sim800_RxCallBack+0x154>)
 8001236:	2201      	movs	r2, #1
 8001238:	749a      	strb	r2, [r3, #18]
            }
        }
    }
    if (strstr((char *)rx_buffer, "CLOSED\r\n") || strstr((char *)rx_buffer, "ERROR\r\n") || strstr((char *)rx_buffer, "DEACT\r\n"))
 800123a:	4936      	ldr	r1, [pc, #216]	; (8001314 <Sim800_RxCallBack+0x168>)
 800123c:	482f      	ldr	r0, [pc, #188]	; (80012fc <Sim800_RxCallBack+0x150>)
 800123e:	f01e fb2a 	bl	801f896 <strstr>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d10d      	bne.n	8001264 <Sim800_RxCallBack+0xb8>
 8001248:	4933      	ldr	r1, [pc, #204]	; (8001318 <Sim800_RxCallBack+0x16c>)
 800124a:	482c      	ldr	r0, [pc, #176]	; (80012fc <Sim800_RxCallBack+0x150>)
 800124c:	f01e fb23 	bl	801f896 <strstr>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d106      	bne.n	8001264 <Sim800_RxCallBack+0xb8>
 8001256:	4931      	ldr	r1, [pc, #196]	; (800131c <Sim800_RxCallBack+0x170>)
 8001258:	4828      	ldr	r0, [pc, #160]	; (80012fc <Sim800_RxCallBack+0x150>)
 800125a:	f01e fb1c 	bl	801f896 <strstr>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d002      	beq.n	800126a <Sim800_RxCallBack+0xbe>
    {
        SIM800.mqttServer.connect = 0;
 8001264:	4b26      	ldr	r3, [pc, #152]	; (8001300 <Sim800_RxCallBack+0x154>)
 8001266:	2200      	movs	r2, #0
 8001268:	749a      	strb	r2, [r3, #18]
    }
    if (SIM800.mqttServer.connect == 1 && rx_data == 48)
 800126a:	4b25      	ldr	r3, [pc, #148]	; (8001300 <Sim800_RxCallBack+0x154>)
 800126c:	7c9b      	ldrb	r3, [r3, #18]
 800126e:	2b01      	cmp	r3, #1
 8001270:	d106      	bne.n	8001280 <Sim800_RxCallBack+0xd4>
 8001272:	4b21      	ldr	r3, [pc, #132]	; (80012f8 <Sim800_RxCallBack+0x14c>)
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	2b30      	cmp	r3, #48	; 0x30
 8001278:	d102      	bne.n	8001280 <Sim800_RxCallBack+0xd4>
    {
        mqtt_receive = 1;
 800127a:	4b29      	ldr	r3, [pc, #164]	; (8001320 <Sim800_RxCallBack+0x174>)
 800127c:	2201      	movs	r2, #1
 800127e:	701a      	strb	r2, [r3, #0]
    }
    if (mqtt_receive == 1)
 8001280:	4b27      	ldr	r3, [pc, #156]	; (8001320 <Sim800_RxCallBack+0x174>)
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	2b01      	cmp	r3, #1
 8001286:	d124      	bne.n	80012d2 <Sim800_RxCallBack+0x126>
    {
        mqtt_buffer[mqtt_index++] = rx_data;
 8001288:	4b26      	ldr	r3, [pc, #152]	; (8001324 <Sim800_RxCallBack+0x178>)
 800128a:	881b      	ldrh	r3, [r3, #0]
 800128c:	1c5a      	adds	r2, r3, #1
 800128e:	b291      	uxth	r1, r2
 8001290:	4a24      	ldr	r2, [pc, #144]	; (8001324 <Sim800_RxCallBack+0x178>)
 8001292:	8011      	strh	r1, [r2, #0]
 8001294:	461a      	mov	r2, r3
 8001296:	4b18      	ldr	r3, [pc, #96]	; (80012f8 <Sim800_RxCallBack+0x14c>)
 8001298:	7819      	ldrb	r1, [r3, #0]
 800129a:	4b1b      	ldr	r3, [pc, #108]	; (8001308 <Sim800_RxCallBack+0x15c>)
 800129c:	5499      	strb	r1, [r3, r2]
        if (mqtt_index > 1 && mqtt_index - 1 > mqtt_buffer[1])
 800129e:	4b21      	ldr	r3, [pc, #132]	; (8001324 <Sim800_RxCallBack+0x178>)
 80012a0:	881b      	ldrh	r3, [r3, #0]
 80012a2:	2b01      	cmp	r3, #1
 80012a4:	d90d      	bls.n	80012c2 <Sim800_RxCallBack+0x116>
 80012a6:	4b1f      	ldr	r3, [pc, #124]	; (8001324 <Sim800_RxCallBack+0x178>)
 80012a8:	881b      	ldrh	r3, [r3, #0]
 80012aa:	3b01      	subs	r3, #1
 80012ac:	4a16      	ldr	r2, [pc, #88]	; (8001308 <Sim800_RxCallBack+0x15c>)
 80012ae:	7852      	ldrb	r2, [r2, #1]
 80012b0:	4293      	cmp	r3, r2
 80012b2:	dd06      	ble.n	80012c2 <Sim800_RxCallBack+0x116>
        {
            MQTT_Receive((unsigned char *)mqtt_buffer);
 80012b4:	4814      	ldr	r0, [pc, #80]	; (8001308 <Sim800_RxCallBack+0x15c>)
 80012b6:	f000 fa6f 	bl	8001798 <MQTT_Receive>
            clearRxBuffer();
 80012ba:	f000 f837 	bl	800132c <clearRxBuffer>
            clearMqttBuffer();
 80012be:	f000 f847 	bl	8001350 <clearMqttBuffer>
        }
        if (mqtt_index >= sizeof(mqtt_buffer))
 80012c2:	4b18      	ldr	r3, [pc, #96]	; (8001324 <Sim800_RxCallBack+0x178>)
 80012c4:	881b      	ldrh	r3, [r3, #0]
 80012c6:	f240 52b3 	movw	r2, #1459	; 0x5b3
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d901      	bls.n	80012d2 <Sim800_RxCallBack+0x126>
        {
            clearMqttBuffer();
 80012ce:	f000 f83f 	bl	8001350 <clearMqttBuffer>
        }
    }
    if (rx_index >= sizeof(mqtt_buffer))
 80012d2:	4b08      	ldr	r3, [pc, #32]	; (80012f4 <Sim800_RxCallBack+0x148>)
 80012d4:	881b      	ldrh	r3, [r3, #0]
 80012d6:	f240 52b3 	movw	r2, #1459	; 0x5b3
 80012da:	4293      	cmp	r3, r2
 80012dc:	d903      	bls.n	80012e6 <Sim800_RxCallBack+0x13a>
    {
        clearRxBuffer();
 80012de:	f000 f825 	bl	800132c <clearRxBuffer>
        clearMqttBuffer();
 80012e2:	f000 f835 	bl	8001350 <clearMqttBuffer>
    }
    HAL_UART_Receive_IT(UART_SIM800, &rx_data, 1);
 80012e6:	2201      	movs	r2, #1
 80012e8:	4903      	ldr	r1, [pc, #12]	; (80012f8 <Sim800_RxCallBack+0x14c>)
 80012ea:	480f      	ldr	r0, [pc, #60]	; (8001328 <Sim800_RxCallBack+0x17c>)
 80012ec:	f00c fda4 	bl	800de38 <HAL_UART_Receive_IT>
}
 80012f0:	bf00      	nop
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	24000f20 	.word	0x24000f20
 80012f8:	24000968 	.word	0x24000968
 80012fc:	2400096c 	.word	0x2400096c
 8001300:	240014dc 	.word	0x240014dc
 8001304:	08020b24 	.word	0x08020b24
 8001308:	24000f24 	.word	0x24000f24
 800130c:	08020b28 	.word	0x08020b28
 8001310:	08020b38 	.word	0x08020b38
 8001314:	08020b44 	.word	0x08020b44
 8001318:	08020b50 	.word	0x08020b50
 800131c:	08020b58 	.word	0x08020b58
 8001320:	24000f22 	.word	0x24000f22
 8001324:	240014d8 	.word	0x240014d8
 8001328:	240016e4 	.word	0x240016e4

0800132c <clearRxBuffer>:
 * Clear SIM800 UART RX buffer.
 * @param NONE
 * @return NONE
 */
void clearRxBuffer(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
    rx_index = 0;
 8001330:	4b05      	ldr	r3, [pc, #20]	; (8001348 <clearRxBuffer+0x1c>)
 8001332:	2200      	movs	r2, #0
 8001334:	801a      	strh	r2, [r3, #0]
    memset(rx_buffer, 0, sizeof(rx_buffer));
 8001336:	f240 52b4 	movw	r2, #1460	; 0x5b4
 800133a:	2100      	movs	r1, #0
 800133c:	4803      	ldr	r0, [pc, #12]	; (800134c <clearRxBuffer+0x20>)
 800133e:	f01e fa8f 	bl	801f860 <memset>
}
 8001342:	bf00      	nop
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	24000f20 	.word	0x24000f20
 800134c:	2400096c 	.word	0x2400096c

08001350 <clearMqttBuffer>:
 * Clear MQTT buffer.
 * @param NONE
 * @return NONE
 */
void clearMqttBuffer(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
    mqtt_receive = 0;
 8001354:	4b06      	ldr	r3, [pc, #24]	; (8001370 <clearMqttBuffer+0x20>)
 8001356:	2200      	movs	r2, #0
 8001358:	701a      	strb	r2, [r3, #0]
    mqtt_index = 0;
 800135a:	4b06      	ldr	r3, [pc, #24]	; (8001374 <clearMqttBuffer+0x24>)
 800135c:	2200      	movs	r2, #0
 800135e:	801a      	strh	r2, [r3, #0]
    memset(mqtt_buffer, 0, sizeof(mqtt_buffer));
 8001360:	f240 52b4 	movw	r2, #1460	; 0x5b4
 8001364:	2100      	movs	r1, #0
 8001366:	4804      	ldr	r0, [pc, #16]	; (8001378 <clearMqttBuffer+0x28>)
 8001368:	f01e fa7a 	bl	801f860 <memset>
}
 800136c:	bf00      	nop
 800136e:	bd80      	pop	{r7, pc}
 8001370:	24000f22 	.word	0x24000f22
 8001374:	240014d8 	.word	0x240014d8
 8001378:	24000f24 	.word	0x24000f24

0800137c <SIM800_SendCommand>:
 * @param reply to be used to set the correct answer to the command
 * @param delay to be used to the set pause to the reply
 * @return error, 0 is OK
 */
int SIM800_SendCommand(char *command, char *reply, uint16_t delay)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b084      	sub	sp, #16
 8001380:	af00      	add	r7, sp, #0
 8001382:	60f8      	str	r0, [r7, #12]
 8001384:	60b9      	str	r1, [r7, #8]
 8001386:	4613      	mov	r3, r2
 8001388:	80fb      	strh	r3, [r7, #6]
    HAL_UART_Transmit_IT(UART_SIM800, (unsigned char *)command,
                         (uint16_t)strlen(command));
 800138a:	68f8      	ldr	r0, [r7, #12]
 800138c:	f7ff f8ce 	bl	800052c <strlen>
 8001390:	4603      	mov	r3, r0
    HAL_UART_Transmit_IT(UART_SIM800, (unsigned char *)command,
 8001392:	b29b      	uxth	r3, r3
 8001394:	461a      	mov	r2, r3
 8001396:	68f9      	ldr	r1, [r7, #12]
 8001398:	480c      	ldr	r0, [pc, #48]	; (80013cc <SIM800_SendCommand+0x50>)
 800139a:	f00c fcb9 	bl	800dd10 <HAL_UART_Transmit_IT>

#if FREERTOS == 1
    osDelay(delay);
#else
    HAL_Delay(delay);
 800139e:	88fb      	ldrh	r3, [r7, #6]
 80013a0:	4618      	mov	r0, r3
 80013a2:	f003 f9f5 	bl	8004790 <HAL_Delay>
#endif

    if (strstr(mqtt_buffer, reply) != NULL)
 80013a6:	68b9      	ldr	r1, [r7, #8]
 80013a8:	4809      	ldr	r0, [pc, #36]	; (80013d0 <SIM800_SendCommand+0x54>)
 80013aa:	f01e fa74 	bl	801f896 <strstr>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d003      	beq.n	80013bc <SIM800_SendCommand+0x40>
    {
        clearRxBuffer();
 80013b4:	f7ff ffba 	bl	800132c <clearRxBuffer>
        return 0;
 80013b8:	2300      	movs	r3, #0
 80013ba:	e002      	b.n	80013c2 <SIM800_SendCommand+0x46>
    }
    clearRxBuffer();
 80013bc:	f7ff ffb6 	bl	800132c <clearRxBuffer>
    return 1;
 80013c0:	2301      	movs	r3, #1
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	3710      	adds	r7, #16
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	240016e4 	.word	0x240016e4
 80013d0:	24000f24 	.word	0x24000f24

080013d4 <MQTT_Init>:
 * initialization SIM800.
 * @param NONE
 * @return error status, 0 - OK
 */
int MQTT_Init(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b08c      	sub	sp, #48	; 0x30
 80013d8:	af02      	add	r7, sp, #8
    SIM800.mqttServer.connect = 0;
 80013da:	4b3a      	ldr	r3, [pc, #232]	; (80014c4 <MQTT_Init+0xf0>)
 80013dc:	2200      	movs	r2, #0
 80013de:	749a      	strb	r2, [r3, #18]
    int error = 0;
 80013e0:	2300      	movs	r3, #0
 80013e2:	627b      	str	r3, [r7, #36]	; 0x24
    char str[32] = {0};
 80013e4:	2300      	movs	r3, #0
 80013e6:	607b      	str	r3, [r7, #4]
 80013e8:	f107 0308 	add.w	r3, r7, #8
 80013ec:	2200      	movs	r2, #0
 80013ee:	601a      	str	r2, [r3, #0]
 80013f0:	605a      	str	r2, [r3, #4]
 80013f2:	609a      	str	r2, [r3, #8]
 80013f4:	60da      	str	r2, [r3, #12]
 80013f6:	611a      	str	r2, [r3, #16]
 80013f8:	615a      	str	r2, [r3, #20]
 80013fa:	619a      	str	r2, [r3, #24]
    HAL_UART_Receive_IT(UART_SIM800, &rx_data, 1);
 80013fc:	2201      	movs	r2, #1
 80013fe:	4932      	ldr	r1, [pc, #200]	; (80014c8 <MQTT_Init+0xf4>)
 8001400:	4832      	ldr	r0, [pc, #200]	; (80014cc <MQTT_Init+0xf8>)
 8001402:	f00c fd19 	bl	800de38 <HAL_UART_Receive_IT>

    SIM800_SendCommand("AT\r\n", "OK\r\n", CMD_DELAY);
 8001406:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800140a:	4931      	ldr	r1, [pc, #196]	; (80014d0 <MQTT_Init+0xfc>)
 800140c:	4831      	ldr	r0, [pc, #196]	; (80014d4 <MQTT_Init+0x100>)
 800140e:	f7ff ffb5 	bl	800137c <SIM800_SendCommand>
    SIM800_SendCommand("ATE0\r\n", "OK\r\n", CMD_DELAY);
 8001412:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001416:	492e      	ldr	r1, [pc, #184]	; (80014d0 <MQTT_Init+0xfc>)
 8001418:	482f      	ldr	r0, [pc, #188]	; (80014d8 <MQTT_Init+0x104>)
 800141a:	f7ff ffaf 	bl	800137c <SIM800_SendCommand>
    error += SIM800_SendCommand("AT+CIPSHUT\r\n", "SHUT OK\r\n", CMD_DELAY);
 800141e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001422:	492e      	ldr	r1, [pc, #184]	; (80014dc <MQTT_Init+0x108>)
 8001424:	482e      	ldr	r0, [pc, #184]	; (80014e0 <MQTT_Init+0x10c>)
 8001426:	f7ff ffa9 	bl	800137c <SIM800_SendCommand>
 800142a:	4602      	mov	r2, r0
 800142c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800142e:	4413      	add	r3, r2
 8001430:	627b      	str	r3, [r7, #36]	; 0x24
    error += SIM800_SendCommand("AT+CGATT=1\r\n", "OK\r\n", CMD_DELAY);
 8001432:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001436:	4926      	ldr	r1, [pc, #152]	; (80014d0 <MQTT_Init+0xfc>)
 8001438:	482a      	ldr	r0, [pc, #168]	; (80014e4 <MQTT_Init+0x110>)
 800143a:	f7ff ff9f 	bl	800137c <SIM800_SendCommand>
 800143e:	4602      	mov	r2, r0
 8001440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001442:	4413      	add	r3, r2
 8001444:	627b      	str	r3, [r7, #36]	; 0x24
    error += SIM800_SendCommand("AT+CIPMODE=1\r\n", "OK\r\n", CMD_DELAY);
 8001446:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800144a:	4921      	ldr	r1, [pc, #132]	; (80014d0 <MQTT_Init+0xfc>)
 800144c:	4826      	ldr	r0, [pc, #152]	; (80014e8 <MQTT_Init+0x114>)
 800144e:	f7ff ff95 	bl	800137c <SIM800_SendCommand>
 8001452:	4602      	mov	r2, r0
 8001454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001456:	4413      	add	r3, r2
 8001458:	627b      	str	r3, [r7, #36]	; 0x24

    snprintf(str, sizeof(str), "AT+CSTT=\"%s\",\"%s\",\"%s\"\r\n", SIM800.sim.apn, SIM800.sim.apn_user,
 800145a:	4b1a      	ldr	r3, [pc, #104]	; (80014c4 <MQTT_Init+0xf0>)
 800145c:	6819      	ldr	r1, [r3, #0]
 800145e:	4b19      	ldr	r3, [pc, #100]	; (80014c4 <MQTT_Init+0xf0>)
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	4a18      	ldr	r2, [pc, #96]	; (80014c4 <MQTT_Init+0xf0>)
 8001464:	6892      	ldr	r2, [r2, #8]
 8001466:	1d38      	adds	r0, r7, #4
 8001468:	9201      	str	r2, [sp, #4]
 800146a:	9300      	str	r3, [sp, #0]
 800146c:	460b      	mov	r3, r1
 800146e:	4a1f      	ldr	r2, [pc, #124]	; (80014ec <MQTT_Init+0x118>)
 8001470:	2120      	movs	r1, #32
 8001472:	f01e f973 	bl	801f75c <sniprintf>
             SIM800.sim.apn_pass);
    error += SIM800_SendCommand(str, "OK\r\n", CMD_DELAY);
 8001476:	1d3b      	adds	r3, r7, #4
 8001478:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800147c:	4914      	ldr	r1, [pc, #80]	; (80014d0 <MQTT_Init+0xfc>)
 800147e:	4618      	mov	r0, r3
 8001480:	f7ff ff7c 	bl	800137c <SIM800_SendCommand>
 8001484:	4602      	mov	r2, r0
 8001486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001488:	4413      	add	r3, r2
 800148a:	627b      	str	r3, [r7, #36]	; 0x24

    error += SIM800_SendCommand("AT+CIICR\r\n", "OK\r\n", CMD_DELAY);
 800148c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001490:	490f      	ldr	r1, [pc, #60]	; (80014d0 <MQTT_Init+0xfc>)
 8001492:	4817      	ldr	r0, [pc, #92]	; (80014f0 <MQTT_Init+0x11c>)
 8001494:	f7ff ff72 	bl	800137c <SIM800_SendCommand>
 8001498:	4602      	mov	r2, r0
 800149a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800149c:	4413      	add	r3, r2
 800149e:	627b      	str	r3, [r7, #36]	; 0x24
    SIM800_SendCommand("AT+CIFSR\r\n", "", CMD_DELAY);
 80014a0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80014a4:	4913      	ldr	r1, [pc, #76]	; (80014f4 <MQTT_Init+0x120>)
 80014a6:	4814      	ldr	r0, [pc, #80]	; (80014f8 <MQTT_Init+0x124>)
 80014a8:	f7ff ff68 	bl	800137c <SIM800_SendCommand>
    if (error == 0)
 80014ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d103      	bne.n	80014ba <MQTT_Init+0xe6>
    {
        MQTT_Connect();
 80014b2:	f000 f823 	bl	80014fc <MQTT_Connect>
        return error;
 80014b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b8:	e000      	b.n	80014bc <MQTT_Init+0xe8>
    }
    else
    {
        return error;
 80014ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
}
 80014bc:	4618      	mov	r0, r3
 80014be:	3728      	adds	r7, #40	; 0x28
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	240014dc 	.word	0x240014dc
 80014c8:	24000968 	.word	0x24000968
 80014cc:	240016e4 	.word	0x240016e4
 80014d0:	08020b60 	.word	0x08020b60
 80014d4:	08020b68 	.word	0x08020b68
 80014d8:	08020b70 	.word	0x08020b70
 80014dc:	08020b78 	.word	0x08020b78
 80014e0:	08020b84 	.word	0x08020b84
 80014e4:	08020b94 	.word	0x08020b94
 80014e8:	08020ba4 	.word	0x08020ba4
 80014ec:	08020bb4 	.word	0x08020bb4
 80014f0:	08020bd0 	.word	0x08020bd0
 80014f4:	08020bdc 	.word	0x08020bdc
 80014f8:	08020be0 	.word	0x08020be0

080014fc <MQTT_Connect>:
 * Connect to MQTT server in Internet over TCP.
 * @param NONE
 * @return NONE
 */
void MQTT_Connect(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b0d8      	sub	sp, #352	; 0x160
 8001500:	af00      	add	r7, sp, #0
    SIM800.mqttReceive.newEvent = 0;
 8001502:	4b3f      	ldr	r3, [pc, #252]	; (8001600 <MQTT_Connect+0x104>)
 8001504:	2200      	movs	r2, #0
 8001506:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    SIM800.mqttServer.connect = 0;
 800150a:	4b3d      	ldr	r3, [pc, #244]	; (8001600 <MQTT_Connect+0x104>)
 800150c:	2200      	movs	r2, #0
 800150e:	749a      	strb	r2, [r3, #18]
    char str[128] = {0};
 8001510:	2300      	movs	r3, #0
 8001512:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8001516:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800151a:	227c      	movs	r2, #124	; 0x7c
 800151c:	2100      	movs	r1, #0
 800151e:	4618      	mov	r0, r3
 8001520:	f01e f99e 	bl	801f860 <memset>
    unsigned char buf[128] = {0};
 8001524:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001528:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800152c:	2200      	movs	r2, #0
 800152e:	601a      	str	r2, [r3, #0]
 8001530:	3304      	adds	r3, #4
 8001532:	227c      	movs	r2, #124	; 0x7c
 8001534:	2100      	movs	r1, #0
 8001536:	4618      	mov	r0, r3
 8001538:	f01e f992 	bl	801f860 <memset>
    sprintf(str, "AT+CIPSTART=\"TCP\",\"%s\",%d\r\n", SIM800.mqttServer.host, SIM800.mqttServer.port);
 800153c:	4b30      	ldr	r3, [pc, #192]	; (8001600 <MQTT_Connect+0x104>)
 800153e:	68da      	ldr	r2, [r3, #12]
 8001540:	4b2f      	ldr	r3, [pc, #188]	; (8001600 <MQTT_Connect+0x104>)
 8001542:	8a1b      	ldrh	r3, [r3, #16]
 8001544:	f107 00dc 	add.w	r0, r7, #220	; 0xdc
 8001548:	492e      	ldr	r1, [pc, #184]	; (8001604 <MQTT_Connect+0x108>)
 800154a:	f01e f93b 	bl	801f7c4 <siprintf>
    SIM800_SendCommand(str, "OK\r\n", CMD_DELAY);
 800154e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001552:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001556:	492c      	ldr	r1, [pc, #176]	; (8001608 <MQTT_Connect+0x10c>)
 8001558:	4618      	mov	r0, r3
 800155a:	f7ff ff0f 	bl	800137c <SIM800_SendCommand>
#if FREERTOS == 1
    osDelay(5000);
#else
    HAL_Delay(5000);
 800155e:	f241 3088 	movw	r0, #5000	; 0x1388
 8001562:	f003 f915 	bl	8004790 <HAL_Delay>
#endif
    if (SIM800.mqttServer.connect == 1)
 8001566:	4b26      	ldr	r3, [pc, #152]	; (8001600 <MQTT_Connect+0x104>)
 8001568:	7c9b      	ldrb	r3, [r3, #18]
 800156a:	2b01      	cmp	r3, #1
 800156c:	d142      	bne.n	80015f4 <MQTT_Connect+0xf8>
    {
        MQTTPacket_connectData datas = MQTTPacket_connectData_initializer;
 800156e:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001572:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8001576:	4a25      	ldr	r2, [pc, #148]	; (800160c <MQTT_Connect+0x110>)
 8001578:	4618      	mov	r0, r3
 800157a:	4611      	mov	r1, r2
 800157c:	2358      	movs	r3, #88	; 0x58
 800157e:	461a      	mov	r2, r3
 8001580:	f01e f9cc 	bl	801f91c <memcpy>
        datas.username.cstring = SIM800.mqttClient.username;
 8001584:	4b1e      	ldr	r3, [pc, #120]	; (8001600 <MQTT_Connect+0x104>)
 8001586:	695a      	ldr	r2, [r3, #20]
 8001588:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800158c:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8001590:	641a      	str	r2, [r3, #64]	; 0x40
        datas.password.cstring = SIM800.mqttClient.pass;
 8001592:	4b1b      	ldr	r3, [pc, #108]	; (8001600 <MQTT_Connect+0x104>)
 8001594:	699a      	ldr	r2, [r3, #24]
 8001596:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800159a:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800159e:	64da      	str	r2, [r3, #76]	; 0x4c
        datas.clientID.cstring = SIM800.mqttClient.clientID;
 80015a0:	4b17      	ldr	r3, [pc, #92]	; (8001600 <MQTT_Connect+0x104>)
 80015a2:	69da      	ldr	r2, [r3, #28]
 80015a4:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80015a8:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80015ac:	60da      	str	r2, [r3, #12]
        datas.keepAliveInterval = SIM800.mqttClient.keepAliveInterval;
 80015ae:	4b14      	ldr	r3, [pc, #80]	; (8001600 <MQTT_Connect+0x104>)
 80015b0:	8c1a      	ldrh	r2, [r3, #32]
 80015b2:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80015b6:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80015ba:	831a      	strh	r2, [r3, #24]
        datas.cleansession = 1;
 80015bc:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80015c0:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80015c4:	2201      	movs	r2, #1
 80015c6:	769a      	strb	r2, [r3, #26]
        int mqtt_len = MQTTSerialize_connect(buf, sizeof(buf), &datas);
 80015c8:	1d3a      	adds	r2, r7, #4
 80015ca:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80015ce:	2180      	movs	r1, #128	; 0x80
 80015d0:	4618      	mov	r0, r3
 80015d2:	f7ff fa27 	bl	8000a24 <MQTTSerialize_connect>
 80015d6:	f8c7 015c 	str.w	r0, [r7, #348]	; 0x15c
        HAL_UART_Transmit_IT(UART_SIM800, buf, mqtt_len);
 80015da:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80015de:	b29a      	uxth	r2, r3
 80015e0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80015e4:	4619      	mov	r1, r3
 80015e6:	480a      	ldr	r0, [pc, #40]	; (8001610 <MQTT_Connect+0x114>)
 80015e8:	f00c fb92 	bl	800dd10 <HAL_UART_Transmit_IT>
#if FREERTOS == 1
        osDelay(5000);
#else
        HAL_Delay(5000);
 80015ec:	f241 3088 	movw	r0, #5000	; 0x1388
 80015f0:	f003 f8ce 	bl	8004790 <HAL_Delay>
#endif
    }
}
 80015f4:	bf00      	nop
 80015f6:	f507 77b0 	add.w	r7, r7, #352	; 0x160
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	240014dc 	.word	0x240014dc
 8001604:	08020bec 	.word	0x08020bec
 8001608:	08020b60 	.word	0x08020b60
 800160c:	08020c08 	.word	0x08020c08
 8001610:	240016e4 	.word	0x240016e4

08001614 <MQTT_Pub>:
 * @param topic to be used to the set topic
 * @param payload to be used to the set message for topic
 * @return NONE
 */
void MQTT_Pub(char *topic, char *payload)
{
 8001614:	b590      	push	{r4, r7, lr}
 8001616:	b0cf      	sub	sp, #316	; 0x13c
 8001618:	af08      	add	r7, sp, #32
 800161a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800161e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001622:	6018      	str	r0, [r3, #0]
 8001624:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001628:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800162c:	6019      	str	r1, [r3, #0]
    unsigned char buf[256] = {0};
 800162e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001632:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001636:	2200      	movs	r2, #0
 8001638:	601a      	str	r2, [r3, #0]
 800163a:	3304      	adds	r3, #4
 800163c:	22fc      	movs	r2, #252	; 0xfc
 800163e:	2100      	movs	r1, #0
 8001640:	4618      	mov	r0, r3
 8001642:	f01e f90d 	bl	801f860 <memset>

    MQTTString topicString = MQTTString_initializer;
 8001646:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800164a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800164e:	2200      	movs	r2, #0
 8001650:	601a      	str	r2, [r3, #0]
 8001652:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001656:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800165a:	2200      	movs	r2, #0
 800165c:	605a      	str	r2, [r3, #4]
 800165e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001662:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001666:	2200      	movs	r2, #0
 8001668:	609a      	str	r2, [r3, #8]
    topicString.cstring = topic;
 800166a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800166e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001672:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8001676:	f5a2 728a 	sub.w	r2, r2, #276	; 0x114
 800167a:	6812      	ldr	r2, [r2, #0]
 800167c:	601a      	str	r2, [r3, #0]

    int mqtt_len = MQTTSerialize_publish(buf, sizeof(buf), 0, 0, 0, 0,
                                         topicString, (unsigned char *)payload, (int)strlen(payload));
 800167e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001682:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001686:	6818      	ldr	r0, [r3, #0]
 8001688:	f7fe ff50 	bl	800052c <strlen>
 800168c:	4603      	mov	r3, r0
    int mqtt_len = MQTTSerialize_publish(buf, sizeof(buf), 0, 0, 0, 0,
 800168e:	f107 0414 	add.w	r4, r7, #20
 8001692:	9306      	str	r3, [sp, #24]
 8001694:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001698:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	9305      	str	r3, [sp, #20]
 80016a0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80016a4:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 80016a8:	ab02      	add	r3, sp, #8
 80016aa:	ca07      	ldmia	r2, {r0, r1, r2}
 80016ac:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80016b0:	2300      	movs	r3, #0
 80016b2:	9301      	str	r3, [sp, #4]
 80016b4:	2300      	movs	r3, #0
 80016b6:	9300      	str	r3, [sp, #0]
 80016b8:	2300      	movs	r3, #0
 80016ba:	2200      	movs	r2, #0
 80016bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016c0:	4620      	mov	r0, r4
 80016c2:	f7ff fcfd 	bl	80010c0 <MQTTSerialize_publish>
 80016c6:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
    HAL_UART_Transmit_IT(UART_SIM800, buf, mqtt_len);
 80016ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80016ce:	b29a      	uxth	r2, r3
 80016d0:	f107 0314 	add.w	r3, r7, #20
 80016d4:	4619      	mov	r1, r3
 80016d6:	4805      	ldr	r0, [pc, #20]	; (80016ec <MQTT_Pub+0xd8>)
 80016d8:	f00c fb1a 	bl	800dd10 <HAL_UART_Transmit_IT>
#if FREERTOS == 1
    osDelay(100);
#else
    HAL_Delay(100);
 80016dc:	2064      	movs	r0, #100	; 0x64
 80016de:	f003 f857 	bl	8004790 <HAL_Delay>
#endif
}
 80016e2:	bf00      	nop
 80016e4:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd90      	pop	{r4, r7, pc}
 80016ec:	240016e4 	.word	0x240016e4

080016f0 <MQTT_Sub>:
 * Subscribe on the MQTT broker of the message in a topic
 * @param topic to be used to the set topic
 * @return NONE
 */
void MQTT_Sub(char *topic)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b0ca      	sub	sp, #296	; 0x128
 80016f4:	af04      	add	r7, sp, #16
 80016f6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80016fa:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80016fe:	6018      	str	r0, [r3, #0]
    unsigned char buf[256] = {0};
 8001700:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001704:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001708:	2200      	movs	r2, #0
 800170a:	601a      	str	r2, [r3, #0]
 800170c:	3304      	adds	r3, #4
 800170e:	22fc      	movs	r2, #252	; 0xfc
 8001710:	2100      	movs	r1, #0
 8001712:	4618      	mov	r0, r3
 8001714:	f01e f8a4 	bl	801f860 <memset>

    MQTTString topicString = MQTTString_initializer;
 8001718:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800171c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001720:	2200      	movs	r2, #0
 8001722:	601a      	str	r2, [r3, #0]
 8001724:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001728:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800172c:	2200      	movs	r2, #0
 800172e:	605a      	str	r2, [r3, #4]
 8001730:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001734:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001738:	2200      	movs	r2, #0
 800173a:	609a      	str	r2, [r3, #8]
    topicString.cstring = topic;
 800173c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001740:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001744:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8001748:	f5a2 728a 	sub.w	r2, r2, #276	; 0x114
 800174c:	6812      	ldr	r2, [r2, #0]
 800174e:	601a      	str	r2, [r3, #0]

    int mqtt_len = MQTTSerialize_subscribe(buf, sizeof(buf), 0, 1, 1,
 8001750:	f107 0014 	add.w	r0, r7, #20
 8001754:	2300      	movs	r3, #0
 8001756:	9302      	str	r3, [sp, #8]
 8001758:	f107 0308 	add.w	r3, r7, #8
 800175c:	9301      	str	r3, [sp, #4]
 800175e:	2301      	movs	r3, #1
 8001760:	9300      	str	r3, [sp, #0]
 8001762:	2301      	movs	r3, #1
 8001764:	2200      	movs	r2, #0
 8001766:	f44f 7180 	mov.w	r1, #256	; 0x100
 800176a:	f000 f886 	bl	800187a <MQTTSerialize_subscribe>
 800176e:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
                                           &topicString, 0);
    HAL_UART_Transmit_IT(UART_SIM800, buf, mqtt_len);
 8001772:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001776:	b29a      	uxth	r2, r3
 8001778:	f107 0314 	add.w	r3, r7, #20
 800177c:	4619      	mov	r1, r3
 800177e:	4805      	ldr	r0, [pc, #20]	; (8001794 <MQTT_Sub+0xa4>)
 8001780:	f00c fac6 	bl	800dd10 <HAL_UART_Transmit_IT>
#if FREERTOS == 1
    osDelay(100);
#else
    HAL_Delay(100);
 8001784:	2064      	movs	r0, #100	; 0x64
 8001786:	f003 f803 	bl	8004790 <HAL_Delay>
#endif
}
 800178a:	bf00      	nop
 800178c:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	240016e4 	.word	0x240016e4

08001798 <MQTT_Receive>:
 * Receive message from MQTT broker
 * @param receive mqtt bufer
 * @return NONE
 */
void MQTT_Receive(unsigned char *buf)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b08c      	sub	sp, #48	; 0x30
 800179c:	af06      	add	r7, sp, #24
 800179e:	6078      	str	r0, [r7, #4]
    memset(SIM800.mqttReceive.topic, 0, sizeof(SIM800.mqttReceive.topic));
 80017a0:	2240      	movs	r2, #64	; 0x40
 80017a2:	2100      	movs	r1, #0
 80017a4:	4819      	ldr	r0, [pc, #100]	; (800180c <MQTT_Receive+0x74>)
 80017a6:	f01e f85b 	bl	801f860 <memset>
    memset(SIM800.mqttReceive.payload, 0, sizeof(SIM800.mqttReceive.payload));
 80017aa:	2240      	movs	r2, #64	; 0x40
 80017ac:	2100      	movs	r1, #0
 80017ae:	4818      	ldr	r0, [pc, #96]	; (8001810 <MQTT_Receive+0x78>)
 80017b0:	f01e f856 	bl	801f860 <memset>
    MQTTString receivedTopic;
    unsigned char *payload;
    MQTTDeserialize_publish(&SIM800.mqttReceive.dup, &SIM800.mqttReceive.qos, &SIM800.mqttReceive.retained,
 80017b4:	2304      	movs	r3, #4
 80017b6:	9304      	str	r3, [sp, #16]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	9303      	str	r3, [sp, #12]
 80017bc:	4b15      	ldr	r3, [pc, #84]	; (8001814 <MQTT_Receive+0x7c>)
 80017be:	9302      	str	r3, [sp, #8]
 80017c0:	f107 0308 	add.w	r3, r7, #8
 80017c4:	9301      	str	r3, [sp, #4]
 80017c6:	f107 030c 	add.w	r3, r7, #12
 80017ca:	9300      	str	r3, [sp, #0]
 80017cc:	4b12      	ldr	r3, [pc, #72]	; (8001818 <MQTT_Receive+0x80>)
 80017ce:	4a13      	ldr	r2, [pc, #76]	; (800181c <MQTT_Receive+0x84>)
 80017d0:	4913      	ldr	r1, [pc, #76]	; (8001820 <MQTT_Receive+0x88>)
 80017d2:	4814      	ldr	r0, [pc, #80]	; (8001824 <MQTT_Receive+0x8c>)
 80017d4:	f7ff fa12 	bl	8000bfc <MQTTDeserialize_publish>
                            &SIM800.mqttReceive.msgId,
                            &receivedTopic, &payload, &SIM800.mqttReceive.payloadLen, buf,
                            sizeof(buf));
    memcpy(SIM800.mqttReceive.topic, receivedTopic.lenstring.data, receivedTopic.lenstring.len);
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	693a      	ldr	r2, [r7, #16]
 80017dc:	4619      	mov	r1, r3
 80017de:	480b      	ldr	r0, [pc, #44]	; (800180c <MQTT_Receive+0x74>)
 80017e0:	f01e f89c 	bl	801f91c <memcpy>
    SIM800.mqttReceive.topicLen = receivedTopic.lenstring.len;
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	4a10      	ldr	r2, [pc, #64]	; (8001828 <MQTT_Receive+0x90>)
 80017e8:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
    memcpy(SIM800.mqttReceive.payload, payload, SIM800.mqttReceive.payloadLen);
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	4a0e      	ldr	r2, [pc, #56]	; (8001828 <MQTT_Receive+0x90>)
 80017f0:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80017f2:	4619      	mov	r1, r3
 80017f4:	4806      	ldr	r0, [pc, #24]	; (8001810 <MQTT_Receive+0x78>)
 80017f6:	f01e f891 	bl	801f91c <memcpy>
    SIM800.mqttReceive.newEvent = 1;
 80017fa:	4b0b      	ldr	r3, [pc, #44]	; (8001828 <MQTT_Receive+0x90>)
 80017fc:	2201      	movs	r2, #1
 80017fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 8001802:	bf00      	nop
 8001804:	3718      	adds	r7, #24
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	24001550 	.word	0x24001550
 8001810:	2400150c 	.word	0x2400150c
 8001814:	2400154c 	.word	0x2400154c
 8001818:	2400150a 	.word	0x2400150a
 800181c:	24001508 	.word	0x24001508
 8001820:	24001504 	.word	0x24001504
 8001824:	24001501 	.word	0x24001501
 8001828:	240014dc 	.word	0x240014dc

0800182c <MQTTSerialize_subscribeLength>:
  * @param count the number of topic filter strings in topicFilters
  * @param topicFilters the array of topic filter strings to be used in the publish
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_subscribeLength(int count, MQTTString topicFilters[])
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b084      	sub	sp, #16
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
 8001834:	6039      	str	r1, [r7, #0]
	int i;
	int len = 2; /* packetid */
 8001836:	2302      	movs	r3, #2
 8001838:	60bb      	str	r3, [r7, #8]

	for (i = 0; i < count; ++i)
 800183a:	2300      	movs	r3, #0
 800183c:	60fb      	str	r3, [r7, #12]
 800183e:	e013      	b.n	8001868 <MQTTSerialize_subscribeLength+0x3c>
		len += 2 + MQTTstrlen(topicFilters[i]) + 1; /* length + topic + req_qos */
 8001840:	68fa      	ldr	r2, [r7, #12]
 8001842:	4613      	mov	r3, r2
 8001844:	005b      	lsls	r3, r3, #1
 8001846:	4413      	add	r3, r2
 8001848:	009b      	lsls	r3, r3, #2
 800184a:	461a      	mov	r2, r3
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	4413      	add	r3, r2
 8001850:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001854:	f7ff fbfb 	bl	800104e <MQTTstrlen>
 8001858:	4603      	mov	r3, r0
 800185a:	3303      	adds	r3, #3
 800185c:	68ba      	ldr	r2, [r7, #8]
 800185e:	4413      	add	r3, r2
 8001860:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < count; ++i)
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	3301      	adds	r3, #1
 8001866:	60fb      	str	r3, [r7, #12]
 8001868:	68fa      	ldr	r2, [r7, #12]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	429a      	cmp	r2, r3
 800186e:	dbe7      	blt.n	8001840 <MQTTSerialize_subscribeLength+0x14>
	return len;
 8001870:	68bb      	ldr	r3, [r7, #8]
}
 8001872:	4618      	mov	r0, r3
 8001874:	3710      	adds	r7, #16
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}

0800187a <MQTTSerialize_subscribe>:
  * @param requestedQoSs - array of requested QoS
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_subscribe(unsigned char* buf, int buflen, unsigned char dup, unsigned short packetid, int count,
		MQTTString topicFilters[], int requestedQoSs[])
{
 800187a:	b580      	push	{r7, lr}
 800187c:	b08a      	sub	sp, #40	; 0x28
 800187e:	af00      	add	r7, sp, #0
 8001880:	60f8      	str	r0, [r7, #12]
 8001882:	60b9      	str	r1, [r7, #8]
 8001884:	4611      	mov	r1, r2
 8001886:	461a      	mov	r2, r3
 8001888:	460b      	mov	r3, r1
 800188a:	71fb      	strb	r3, [r7, #7]
 800188c:	4613      	mov	r3, r2
 800188e:	80bb      	strh	r3, [r7, #4]
	unsigned char *ptr = buf;
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	61bb      	str	r3, [r7, #24]
	MQTTHeader header = {0};
 8001894:	2300      	movs	r3, #0
 8001896:	617b      	str	r3, [r7, #20]
	int rem_len = 0;
 8001898:	2300      	movs	r3, #0
 800189a:	61fb      	str	r3, [r7, #28]
	int rc = 0;
 800189c:	2300      	movs	r3, #0
 800189e:	627b      	str	r3, [r7, #36]	; 0x24
	int i = 0;
 80018a0:	2300      	movs	r3, #0
 80018a2:	623b      	str	r3, [r7, #32]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_subscribeLength(count, topicFilters)) > buflen)
 80018a4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80018a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80018a8:	f7ff ffc0 	bl	800182c <MQTTSerialize_subscribeLength>
 80018ac:	61f8      	str	r0, [r7, #28]
 80018ae:	69f8      	ldr	r0, [r7, #28]
 80018b0:	f7ff fa82 	bl	8000db8 <MQTTPacket_len>
 80018b4:	4602      	mov	r2, r0
 80018b6:	68bb      	ldr	r3, [r7, #8]
 80018b8:	4293      	cmp	r3, r2
 80018ba:	da03      	bge.n	80018c4 <MQTTSerialize_subscribe+0x4a>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 80018bc:	f06f 0301 	mvn.w	r3, #1
 80018c0:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
 80018c2:	e051      	b.n	8001968 <MQTTSerialize_subscribe+0xee>
	}

	header.byte = 0;
 80018c4:	2300      	movs	r3, #0
 80018c6:	753b      	strb	r3, [r7, #20]
	header.bits.type = SUBSCRIBE;
 80018c8:	7d3b      	ldrb	r3, [r7, #20]
 80018ca:	2208      	movs	r2, #8
 80018cc:	f362 1307 	bfi	r3, r2, #4, #4
 80018d0:	753b      	strb	r3, [r7, #20]
	header.bits.dup = dup;
 80018d2:	79fb      	ldrb	r3, [r7, #7]
 80018d4:	f003 0301 	and.w	r3, r3, #1
 80018d8:	b2da      	uxtb	r2, r3
 80018da:	7d3b      	ldrb	r3, [r7, #20]
 80018dc:	f362 03c3 	bfi	r3, r2, #3, #1
 80018e0:	753b      	strb	r3, [r7, #20]
	header.bits.qos = 1;
 80018e2:	7d3b      	ldrb	r3, [r7, #20]
 80018e4:	2201      	movs	r2, #1
 80018e6:	f362 0342 	bfi	r3, r2, #1, #2
 80018ea:	753b      	strb	r3, [r7, #20]
	writeChar(&ptr, header.byte); /* write header */
 80018ec:	7d3a      	ldrb	r2, [r7, #20]
 80018ee:	f107 0318 	add.w	r3, r7, #24
 80018f2:	4611      	mov	r1, r2
 80018f4:	4618      	mov	r0, r3
 80018f6:	f7ff faee 	bl	8000ed6 <writeChar>

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
 80018fa:	69bb      	ldr	r3, [r7, #24]
 80018fc:	69f9      	ldr	r1, [r7, #28]
 80018fe:	4618      	mov	r0, r3
 8001900:	f7ff f9ee 	bl	8000ce0 <MQTTPacket_encode>
 8001904:	4602      	mov	r2, r0
 8001906:	69bb      	ldr	r3, [r7, #24]
 8001908:	4413      	add	r3, r2
 800190a:	61bb      	str	r3, [r7, #24]

	writeInt(&ptr, packetid);
 800190c:	88ba      	ldrh	r2, [r7, #4]
 800190e:	f107 0318 	add.w	r3, r7, #24
 8001912:	4611      	mov	r1, r2
 8001914:	4618      	mov	r0, r3
 8001916:	f7ff faf3 	bl	8000f00 <writeInt>

	for (i = 0; i < count; ++i)
 800191a:	2300      	movs	r3, #0
 800191c:	623b      	str	r3, [r7, #32]
 800191e:	e01b      	b.n	8001958 <MQTTSerialize_subscribe+0xde>
	{
		writeMQTTString(&ptr, topicFilters[i]);
 8001920:	6a3a      	ldr	r2, [r7, #32]
 8001922:	4613      	mov	r3, r2
 8001924:	005b      	lsls	r3, r3, #1
 8001926:	4413      	add	r3, r2
 8001928:	009b      	lsls	r3, r3, #2
 800192a:	461a      	mov	r2, r3
 800192c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800192e:	4413      	add	r3, r2
 8001930:	f107 0018 	add.w	r0, r7, #24
 8001934:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001936:	f7ff fb2b 	bl	8000f90 <writeMQTTString>
		writeChar(&ptr, requestedQoSs[i]);
 800193a:	6a3b      	ldr	r3, [r7, #32]
 800193c:	009b      	lsls	r3, r3, #2
 800193e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001940:	4413      	add	r3, r2
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	b2da      	uxtb	r2, r3
 8001946:	f107 0318 	add.w	r3, r7, #24
 800194a:	4611      	mov	r1, r2
 800194c:	4618      	mov	r0, r3
 800194e:	f7ff fac2 	bl	8000ed6 <writeChar>
	for (i = 0; i < count; ++i)
 8001952:	6a3b      	ldr	r3, [r7, #32]
 8001954:	3301      	adds	r3, #1
 8001956:	623b      	str	r3, [r7, #32]
 8001958:	6a3a      	ldr	r2, [r7, #32]
 800195a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800195c:	429a      	cmp	r2, r3
 800195e:	dbdf      	blt.n	8001920 <MQTTSerialize_subscribe+0xa6>
	}

	rc = ptr - buf;
 8001960:	69ba      	ldr	r2, [r7, #24]
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	627b      	str	r3, [r7, #36]	; 0x24
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8001968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800196a:	4618      	mov	r0, r3
 800196c:	3728      	adds	r7, #40	; 0x28
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}

08001972 <App_ThreadX_Init>:
  * @brief  Application ThreadX Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT App_ThreadX_Init(VOID *memory_ptr)
{
 8001972:	b480      	push	{r7}
 8001974:	b085      	sub	sp, #20
 8001976:	af00      	add	r7, sp, #0
 8001978:	6078      	str	r0, [r7, #4]
  UINT ret = TX_SUCCESS;
 800197a:	2300      	movs	r3, #0
 800197c:	60fb      	str	r3, [r7, #12]

  /* USER CODE BEGIN App_ThreadX_Init */

  /* USER CODE END App_ThreadX_Init */

  return ret;
 800197e:	68fb      	ldr	r3, [r7, #12]
}
 8001980:	4618      	mov	r0, r3
 8001982:	3714      	adds	r7, #20
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr

0800198c <MX_ThreadX_Init>:
  * @brief  Function that implements the kernel's initialization.
  * @param  None
  * @retval None
  */
void MX_ThreadX_Init(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  Before_Kernel_Start */

  /* USER CODE END  Before_Kernel_Start */

  tx_kernel_enter();
 8001990:	f01a fcf2 	bl	801c378 <_tx_initialize_kernel_enter>

  /* USER CODE BEGIN  Kernel_Start_Error */

  /* USER CODE END  Kernel_Start_Error */
}
 8001994:	bf00      	nop
 8001996:	bd80      	pop	{r7, pc}

08001998 <MX_GPIO_Init>:
/** Configure pins
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
*/
void MX_GPIO_Init(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b08a      	sub	sp, #40	; 0x28
 800199c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800199e:	f107 0314 	add.w	r3, r7, #20
 80019a2:	2200      	movs	r2, #0
 80019a4:	601a      	str	r2, [r3, #0]
 80019a6:	605a      	str	r2, [r3, #4]
 80019a8:	609a      	str	r2, [r3, #8]
 80019aa:	60da      	str	r2, [r3, #12]
 80019ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80019ae:	4b4d      	ldr	r3, [pc, #308]	; (8001ae4 <MX_GPIO_Init+0x14c>)
 80019b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019b4:	4a4b      	ldr	r2, [pc, #300]	; (8001ae4 <MX_GPIO_Init+0x14c>)
 80019b6:	f043 0308 	orr.w	r3, r3, #8
 80019ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019be:	4b49      	ldr	r3, [pc, #292]	; (8001ae4 <MX_GPIO_Init+0x14c>)
 80019c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019c4:	f003 0308 	and.w	r3, r3, #8
 80019c8:	613b      	str	r3, [r7, #16]
 80019ca:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019cc:	4b45      	ldr	r3, [pc, #276]	; (8001ae4 <MX_GPIO_Init+0x14c>)
 80019ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019d2:	4a44      	ldr	r2, [pc, #272]	; (8001ae4 <MX_GPIO_Init+0x14c>)
 80019d4:	f043 0304 	orr.w	r3, r3, #4
 80019d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019dc:	4b41      	ldr	r3, [pc, #260]	; (8001ae4 <MX_GPIO_Init+0x14c>)
 80019de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019e2:	f003 0304 	and.w	r3, r3, #4
 80019e6:	60fb      	str	r3, [r7, #12]
 80019e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80019ea:	4b3e      	ldr	r3, [pc, #248]	; (8001ae4 <MX_GPIO_Init+0x14c>)
 80019ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019f0:	4a3c      	ldr	r2, [pc, #240]	; (8001ae4 <MX_GPIO_Init+0x14c>)
 80019f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019fa:	4b3a      	ldr	r3, [pc, #232]	; (8001ae4 <MX_GPIO_Init+0x14c>)
 80019fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a04:	60bb      	str	r3, [r7, #8]
 8001a06:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a08:	4b36      	ldr	r3, [pc, #216]	; (8001ae4 <MX_GPIO_Init+0x14c>)
 8001a0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a0e:	4a35      	ldr	r2, [pc, #212]	; (8001ae4 <MX_GPIO_Init+0x14c>)
 8001a10:	f043 0320 	orr.w	r3, r3, #32
 8001a14:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a18:	4b32      	ldr	r3, [pc, #200]	; (8001ae4 <MX_GPIO_Init+0x14c>)
 8001a1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a1e:	f003 0320 	and.w	r3, r3, #32
 8001a22:	607b      	str	r3, [r7, #4]
 8001a24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a26:	4b2f      	ldr	r3, [pc, #188]	; (8001ae4 <MX_GPIO_Init+0x14c>)
 8001a28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a2c:	4a2d      	ldr	r2, [pc, #180]	; (8001ae4 <MX_GPIO_Init+0x14c>)
 8001a2e:	f043 0301 	orr.w	r3, r3, #1
 8001a32:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a36:	4b2b      	ldr	r3, [pc, #172]	; (8001ae4 <MX_GPIO_Init+0x14c>)
 8001a38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a3c:	f003 0301 	and.w	r3, r3, #1
 8001a40:	603b      	str	r3, [r7, #0]
 8001a42:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8001a44:	2201      	movs	r2, #1
 8001a46:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a4a:	4827      	ldr	r0, [pc, #156]	; (8001ae8 <MX_GPIO_Init+0x150>)
 8001a4c:	f005 faaa 	bl	8006fa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8001a50:	2201      	movs	r2, #1
 8001a52:	2110      	movs	r1, #16
 8001a54:	4825      	ldr	r0, [pc, #148]	; (8001aec <MX_GPIO_Init+0x154>)
 8001a56:	f005 faa5 	bl	8006fa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001a5a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a60:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001a64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a66:	2300      	movs	r3, #0
 8001a68:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001a6a:	f107 0314 	add.w	r3, r7, #20
 8001a6e:	4619      	mov	r1, r3
 8001a70:	481f      	ldr	r0, [pc, #124]	; (8001af0 <MX_GPIO_Init+0x158>)
 8001a72:	f004 ffdd 	bl	8006a30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_DETECT_Pin;
 8001a76:	2320      	movs	r3, #32
 8001a78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001a7a:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001a7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a80:	2301      	movs	r3, #1
 8001a82:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SD_DETECT_GPIO_Port, &GPIO_InitStruct);
 8001a84:	f107 0314 	add.w	r3, r7, #20
 8001a88:	4619      	mov	r1, r3
 8001a8a:	4817      	ldr	r0, [pc, #92]	; (8001ae8 <MX_GPIO_Init+0x150>)
 8001a8c:	f004 ffd0 	bl	8006a30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8001a90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a96:	2301      	movs	r3, #1
 8001a98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a9e:	2302      	movs	r3, #2
 8001aa0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8001aa2:	f107 0314 	add.w	r3, r7, #20
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	480f      	ldr	r0, [pc, #60]	; (8001ae8 <MX_GPIO_Init+0x150>)
 8001aaa:	f004 ffc1 	bl	8006a30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED2_Pin;
 8001aae:	2310      	movs	r3, #16
 8001ab0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001aba:	2302      	movs	r3, #2
 8001abc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 8001abe:	f107 0314 	add.w	r3, r7, #20
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	4809      	ldr	r0, [pc, #36]	; (8001aec <MX_GPIO_Init+0x154>)
 8001ac6:	f004 ffb3 	bl	8006a30 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 6, 0);
 8001aca:	2200      	movs	r2, #0
 8001acc:	2106      	movs	r1, #6
 8001ace:	2017      	movs	r0, #23
 8001ad0:	f002 ff91 	bl	80049f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001ad4:	2017      	movs	r0, #23
 8001ad6:	f002 ffa8 	bl	8004a2a <HAL_NVIC_EnableIRQ>

}
 8001ada:	bf00      	nop
 8001adc:	3728      	adds	r7, #40	; 0x28
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	58024400 	.word	0x58024400
 8001ae8:	58021400 	.word	0x58021400
 8001aec:	58020000 	.word	0x58020000
 8001af0:	58020800 	.word	0x58020800

08001af4 <HAL_UART_RxCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
 void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
     if (huart == UART_SIM800) {
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	4a04      	ldr	r2, [pc, #16]	; (8001b10 <HAL_UART_RxCpltCallback+0x1c>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d101      	bne.n	8001b08 <HAL_UART_RxCpltCallback+0x14>
         Sim800_RxCallBack();
 8001b04:	f7ff fb52 	bl	80011ac <Sim800_RxCallBack>
     }
 }
 8001b08:	bf00      	nop
 8001b0a:	3708      	adds	r7, #8
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	240016e4 	.word	0x240016e4

08001b14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b086      	sub	sp, #24
 8001b18:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001b1a:	4b7c      	ldr	r3, [pc, #496]	; (8001d0c <main+0x1f8>)
 8001b1c:	695b      	ldr	r3, [r3, #20]
 8001b1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d11b      	bne.n	8001b5e <main+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001b26:	f3bf 8f4f 	dsb	sy
}
 8001b2a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001b2c:	f3bf 8f6f 	isb	sy
}
 8001b30:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001b32:	4b76      	ldr	r3, [pc, #472]	; (8001d0c <main+0x1f8>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001b3a:	f3bf 8f4f 	dsb	sy
}
 8001b3e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001b40:	f3bf 8f6f 	isb	sy
}
 8001b44:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001b46:	4b71      	ldr	r3, [pc, #452]	; (8001d0c <main+0x1f8>)
 8001b48:	695b      	ldr	r3, [r3, #20]
 8001b4a:	4a70      	ldr	r2, [pc, #448]	; (8001d0c <main+0x1f8>)
 8001b4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b50:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001b52:	f3bf 8f4f 	dsb	sy
}
 8001b56:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001b58:	f3bf 8f6f 	isb	sy
}
 8001b5c:	e000      	b.n	8001b60 <main+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001b5e:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8001b60:	4b6a      	ldr	r3, [pc, #424]	; (8001d0c <main+0x1f8>)
 8001b62:	695b      	ldr	r3, [r3, #20]
 8001b64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d138      	bne.n	8001bde <main+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8001b6c:	4b67      	ldr	r3, [pc, #412]	; (8001d0c <main+0x1f8>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001b74:	f3bf 8f4f 	dsb	sy
}
 8001b78:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001b7a:	4b64      	ldr	r3, [pc, #400]	; (8001d0c <main+0x1f8>)
 8001b7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001b80:	617b      	str	r3, [r7, #20]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	0b5b      	lsrs	r3, r3, #13
 8001b86:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001b8a:	613b      	str	r3, [r7, #16]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	08db      	lsrs	r3, r3, #3
 8001b90:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b94:	60fb      	str	r3, [r7, #12]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	015a      	lsls	r2, r3, #5
 8001b9a:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8001b9e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8001ba0:	68fa      	ldr	r2, [r7, #12]
 8001ba2:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001ba4:	4959      	ldr	r1, [pc, #356]	; (8001d0c <main+0x1f8>)
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	1e5a      	subs	r2, r3, #1
 8001bb0:	60fa      	str	r2, [r7, #12]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d1ef      	bne.n	8001b96 <main+0x82>
    } while(sets-- != 0U);
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	1e5a      	subs	r2, r3, #1
 8001bba:	613a      	str	r2, [r7, #16]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d1e5      	bne.n	8001b8c <main+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 8001bc0:	f3bf 8f4f 	dsb	sy
}
 8001bc4:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001bc6:	4b51      	ldr	r3, [pc, #324]	; (8001d0c <main+0x1f8>)
 8001bc8:	695b      	ldr	r3, [r3, #20]
 8001bca:	4a50      	ldr	r2, [pc, #320]	; (8001d0c <main+0x1f8>)
 8001bcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bd0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001bd2:	f3bf 8f4f 	dsb	sy
}
 8001bd6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001bd8:	f3bf 8f6f 	isb	sy
}
 8001bdc:	e000      	b.n	8001be0 <main+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8001bde:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001be0:	f002 fd7a 	bl	80046d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001be4:	f000 f8b4 	bl	8001d50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001be8:	f7ff fed6 	bl	8001998 <MX_GPIO_Init>
  MX_SDMMC1_SD_Init();
 8001bec:	f000 faa2 	bl	8002134 <MX_SDMMC1_SD_Init>
  MX_USART2_UART_Init();
 8001bf0:	f000 fd46 	bl	8002680 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  BSP_LCD_Init(0, LCD_ORIENTATION_LANDSCAPE);
 8001bf4:	2101      	movs	r1, #1
 8001bf6:	2000      	movs	r0, #0
 8001bf8:	f001 fc6a 	bl	80034d0 <BSP_LCD_Init>
   UTIL_LCD_SetFuncDriver(&LCD_Driver);
 8001bfc:	4844      	ldr	r0, [pc, #272]	; (8001d10 <main+0x1fc>)
 8001bfe:	f01c fff1 	bl	801ebe4 <UTIL_LCD_SetFuncDriver>
   	uint32_t x_size;
   	uint32_t y_size;

   	UTIL_LCD_SetFont(&UTIL_LCD_DEFAULT_FONT);
 8001c02:	4844      	ldr	r0, [pc, #272]	; (8001d14 <main+0x200>)
 8001c04:	f01d f86c 	bl	801ece0 <UTIL_LCD_SetFont>

   	/* Clear the LCD */
   	UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_DARKGRAY);
 8001c08:	4843      	ldr	r0, [pc, #268]	; (8001d18 <main+0x204>)
 8001c0a:	f01d f855 	bl	801ecb8 <UTIL_LCD_SetBackColor>
   	UTIL_LCD_Clear(UTIL_LCD_COLOR_DARKGRAY);
 8001c0e:	4842      	ldr	r0, [pc, #264]	; (8001d18 <main+0x204>)
 8001c10:	f01d f936 	bl	801ee80 <UTIL_LCD_Clear>

   	/* Set the LCD Text Color */
   	UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_BLACK);
 8001c14:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001c18:	f01d f83a 	bl	801ec90 <UTIL_LCD_SetTextColor>

   	/* Display LCD messages */
   	UTIL_LCD_DisplayStringAt(0, 10, (uint8_t *)"PFE 2024 SUJET 20    ", LEFT_MODE);
 8001c1c:	2303      	movs	r3, #3
 8001c1e:	4a3f      	ldr	r2, [pc, #252]	; (8001d1c <main+0x208>)
 8001c20:	210a      	movs	r1, #10
 8001c22:	2000      	movs	r0, #0
 8001c24:	f01d f978 	bl	801ef18 <UTIL_LCD_DisplayStringAt>
   	UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_MAGENTA);
 8001c28:	f46f 407f 	mvn.w	r0, #65280	; 0xff00
 8001c2c:	f01d f830 	bl	801ec90 <UTIL_LCD_SetTextColor>
   	UTIL_LCD_DisplayStringAt(0, 10, (uint8_t *)"ELHEDI ZAIDI", RIGHT_MODE);
 8001c30:	2302      	movs	r3, #2
 8001c32:	4a3b      	ldr	r2, [pc, #236]	; (8001d20 <main+0x20c>)
 8001c34:	210a      	movs	r1, #10
 8001c36:	2000      	movs	r0, #0
 8001c38:	f01d f96e 	bl	801ef18 <UTIL_LCD_DisplayStringAt>



   	UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_CYAN);
 8001c3c:	f46f 007f 	mvn.w	r0, #16711680	; 0xff0000
 8001c40:	f01d f826 	bl	801ec90 <UTIL_LCD_SetTextColor>
   	UTIL_LCD_DisplayStringAt(0, 70, (uint8_t *)"Upgrade FW", CENTER_MODE);
 8001c44:	2301      	movs	r3, #1
 8001c46:	4a37      	ldr	r2, [pc, #220]	; (8001d24 <main+0x210>)
 8001c48:	2146      	movs	r1, #70	; 0x46
 8001c4a:	2000      	movs	r0, #0
 8001c4c:	f01d f964 	bl	801ef18 <UTIL_LCD_DisplayStringAt>
   	UTIL_LCD_DrawHLine(0, 120,640, UTIL_LCD_COLOR_CYAN);
 8001c50:	f46f 037f 	mvn.w	r3, #16711680	; 0xff0000
 8001c54:	f44f 7220 	mov.w	r2, #640	; 0x280
 8001c58:	2178      	movs	r1, #120	; 0x78
 8001c5a:	2000      	movs	r0, #0
 8001c5c:	f01d f870 	bl	801ed40 <UTIL_LCD_DrawHLine>
   	UTIL_LCD_DrawHLine(0, 121,640, UTIL_LCD_COLOR_CYAN);
 8001c60:	f46f 037f 	mvn.w	r3, #16711680	; 0xff0000
 8001c64:	f44f 7220 	mov.w	r2, #640	; 0x280
 8001c68:	2179      	movs	r1, #121	; 0x79
 8001c6a:	2000      	movs	r0, #0
 8001c6c:	f01d f868 	bl	801ed40 <UTIL_LCD_DrawHLine>
   	UTIL_LCD_DisplayStringAt(520, 220, (uint8_t *)"/", LEFT_MODE);
 8001c70:	2303      	movs	r3, #3
 8001c72:	4a2d      	ldr	r2, [pc, #180]	; (8001d28 <main+0x214>)
 8001c74:	21dc      	movs	r1, #220	; 0xdc
 8001c76:	f44f 7002 	mov.w	r0, #520	; 0x208
 8001c7a:	f01d f94d 	bl	801ef18 <UTIL_LCD_DisplayStringAt>


   	//UTIL_LCD_FillCircle(100, 200, 14,UTIL_LCD_COLOR_GREEN);
//   	UTIL_LCD_DrawRect(120, 300,400, 40, UTIL_LCD_COLOR_BLACK);
//   	UTIL_LCD_DrawRect(119, 299,402, 42, UTIL_LCD_COLOR_BLACK);
   	UTIL_LCD_DrawCircle(200, 160, 14,UTIL_LCD_COLOR_BLACK);
 8001c7e:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8001c82:	220e      	movs	r2, #14
 8001c84:	21a0      	movs	r1, #160	; 0xa0
 8001c86:	20c8      	movs	r0, #200	; 0xc8
 8001c88:	f01d fa1e 	bl	801f0c8 <UTIL_LCD_DrawCircle>
   	UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_ORANGE);
 8001c8c:	4827      	ldr	r0, [pc, #156]	; (8001d2c <main+0x218>)
 8001c8e:	f01c ffff 	bl	801ec90 <UTIL_LCD_SetTextColor>
   	UTIL_LCD_DisplayStringAt(0, 350, (uint8_t *)"load to FLASH", CENTER_MODE);
 8001c92:	2301      	movs	r3, #1
 8001c94:	4a26      	ldr	r2, [pc, #152]	; (8001d30 <main+0x21c>)
 8001c96:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8001c9a:	2000      	movs	r0, #0
 8001c9c:	f01d f93c 	bl	801ef18 <UTIL_LCD_DisplayStringAt>
 	UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_LIGHTBLUE);
 8001ca0:	4824      	ldr	r0, [pc, #144]	; (8001d34 <main+0x220>)
 8001ca2:	f01c fff5 	bl	801ec90 <UTIL_LCD_SetTextColor>
   	UTIL_LCD_DisplayStringAt(0, 270, (uint8_t *)"download", CENTER_MODE);
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	4a23      	ldr	r2, [pc, #140]	; (8001d38 <main+0x224>)
 8001caa:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8001cae:	2000      	movs	r0, #0
 8001cb0:	f01d f932 	bl	801ef18 <UTIL_LCD_DisplayStringAt>
//   	UTIL_LCD_DrawVLine(121+i, 251, 38, UTIL_LCD_COLOR_CYAN);
//   	UTIL_LCD_DrawVLine(121+i, 401, 38, UTIL_LCD_COLOR_ORANGE);
//   	HAL_Delay(100);
//   	}

   	BSP_LCD_GetXSize(0, &x_size);
 8001cb4:	f107 0308 	add.w	r3, r7, #8
 8001cb8:	4619      	mov	r1, r3
 8001cba:	2000      	movs	r0, #0
 8001cbc:	f001 feba 	bl	8003a34 <BSP_LCD_GetXSize>
   	BSP_LCD_GetYSize(0, &y_size);
 8001cc0:	1d3b      	adds	r3, r7, #4
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	2000      	movs	r0, #0
 8001cc6:	f001 fed7 	bl	8003a78 <BSP_LCD_GetYSize>
//   	hTS.Orientation = TS_SWAP_NONE;
//   	hTS.Accuracy = 1;
//   	ts_status = BSP_TS_Init(0, &hTS);

  // MQQT settings
      SIM800.sim.apn = "weborange";
 8001cca:	4b1c      	ldr	r3, [pc, #112]	; (8001d3c <main+0x228>)
 8001ccc:	4a1c      	ldr	r2, [pc, #112]	; (8001d40 <main+0x22c>)
 8001cce:	601a      	str	r2, [r3, #0]
      SIM800.sim.apn_user = "";
 8001cd0:	4b1a      	ldr	r3, [pc, #104]	; (8001d3c <main+0x228>)
 8001cd2:	4a1c      	ldr	r2, [pc, #112]	; (8001d44 <main+0x230>)
 8001cd4:	605a      	str	r2, [r3, #4]
      SIM800.sim.apn_pass = "";
 8001cd6:	4b19      	ldr	r3, [pc, #100]	; (8001d3c <main+0x228>)
 8001cd8:	4a1a      	ldr	r2, [pc, #104]	; (8001d44 <main+0x230>)
 8001cda:	609a      	str	r2, [r3, #8]
      SIM800.mqttServer.host = "test.mosquitto.org";
 8001cdc:	4b17      	ldr	r3, [pc, #92]	; (8001d3c <main+0x228>)
 8001cde:	4a1a      	ldr	r2, [pc, #104]	; (8001d48 <main+0x234>)
 8001ce0:	60da      	str	r2, [r3, #12]
      SIM800.mqttServer.port = 1883;
 8001ce2:	4b16      	ldr	r3, [pc, #88]	; (8001d3c <main+0x228>)
 8001ce4:	f240 725b 	movw	r2, #1883	; 0x75b
 8001ce8:	821a      	strh	r2, [r3, #16]
      SIM800.mqttClient.username = "";
 8001cea:	4b14      	ldr	r3, [pc, #80]	; (8001d3c <main+0x228>)
 8001cec:	4a15      	ldr	r2, [pc, #84]	; (8001d44 <main+0x230>)
 8001cee:	615a      	str	r2, [r3, #20]
      SIM800.mqttClient.pass = "";
 8001cf0:	4b12      	ldr	r3, [pc, #72]	; (8001d3c <main+0x228>)
 8001cf2:	4a14      	ldr	r2, [pc, #80]	; (8001d44 <main+0x230>)
 8001cf4:	619a      	str	r2, [r3, #24]
      SIM800.mqttClient.clientID = "TestSub";
 8001cf6:	4b11      	ldr	r3, [pc, #68]	; (8001d3c <main+0x228>)
 8001cf8:	4a14      	ldr	r2, [pc, #80]	; (8001d4c <main+0x238>)
 8001cfa:	61da      	str	r2, [r3, #28]
      SIM800.mqttClient.keepAliveInterval = 120;
 8001cfc:	4b0f      	ldr	r3, [pc, #60]	; (8001d3c <main+0x228>)
 8001cfe:	2278      	movs	r2, #120	; 0x78
 8001d00:	841a      	strh	r2, [r3, #32]
      MQTT_Init();
 8001d02:	f7ff fb67 	bl	80013d4 <MQTT_Init>

  /* USER CODE END 2 */

  MX_ThreadX_Init();
 8001d06:	f7ff fe41 	bl	800198c <MX_ThreadX_Init>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001d0a:	e7fe      	b.n	8001d0a <main+0x1f6>
 8001d0c:	e000ed00 	.word	0xe000ed00
 8001d10:	08020f30 	.word	0x08020f30
 8001d14:	24000074 	.word	0x24000074
 8001d18:	ff404040 	.word	0xff404040
 8001d1c:	08020c68 	.word	0x08020c68
 8001d20:	08020c80 	.word	0x08020c80
 8001d24:	08020c90 	.word	0x08020c90
 8001d28:	08020c9c 	.word	0x08020c9c
 8001d2c:	ffffa500 	.word	0xffffa500
 8001d30:	08020ca0 	.word	0x08020ca0
 8001d34:	ff8080ff 	.word	0xff8080ff
 8001d38:	08020cb0 	.word	0x08020cb0
 8001d3c:	240014dc 	.word	0x240014dc
 8001d40:	08020cbc 	.word	0x08020cbc
 8001d44:	08020cc8 	.word	0x08020cc8
 8001d48:	08020ccc 	.word	0x08020ccc
 8001d4c:	08020ce0 	.word	0x08020ce0

08001d50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b0ce      	sub	sp, #312	; 0x138
 8001d54:	af00      	add	r7, sp, #0
	RCC_ClkInitTypeDef RCC_ClkInitStruct;
		  RCC_OscInitTypeDef RCC_OscInitStruct;
		  RCC_PeriphCLKInitTypeDef RCC_PeriphCLKInitStruct;
		  HAL_StatusTypeDef ret = HAL_OK;
 8001d56:	2300      	movs	r3, #0
 8001d58:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137

		  /*!< Supply configuration update enable */
		  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001d5c:	2002      	movs	r0, #2
 8001d5e:	f006 fa17 	bl	8008190 <HAL_PWREx_ConfigSupply>

		  /* The voltage scaling allows optimizing the power consumption when the device is
		     clocked below the maximum system frequency, to update the voltage scaling value
		     regarding system frequency refer to product datasheet.  */
		  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d62:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001d66:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	601a      	str	r2, [r3, #0]
 8001d6e:	4b7f      	ldr	r3, [pc, #508]	; (8001f6c <SystemClock_Config+0x21c>)
 8001d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d72:	4a7e      	ldr	r2, [pc, #504]	; (8001f6c <SystemClock_Config+0x21c>)
 8001d74:	f023 0301 	bic.w	r3, r3, #1
 8001d78:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001d7a:	4b7c      	ldr	r3, [pc, #496]	; (8001f6c <SystemClock_Config+0x21c>)
 8001d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d7e:	f003 0201 	and.w	r2, r3, #1
 8001d82:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001d86:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001d8a:	601a      	str	r2, [r3, #0]
 8001d8c:	4b78      	ldr	r3, [pc, #480]	; (8001f70 <SystemClock_Config+0x220>)
 8001d8e:	699b      	ldr	r3, [r3, #24]
 8001d90:	4a77      	ldr	r2, [pc, #476]	; (8001f70 <SystemClock_Config+0x220>)
 8001d92:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001d96:	6193      	str	r3, [r2, #24]
 8001d98:	4b75      	ldr	r3, [pc, #468]	; (8001f70 <SystemClock_Config+0x220>)
 8001d9a:	699b      	ldr	r3, [r3, #24]
 8001d9c:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8001da0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001da4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001da8:	601a      	str	r2, [r3, #0]
 8001daa:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001dae:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001db2:	681b      	ldr	r3, [r3, #0]

		  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001db4:	bf00      	nop
 8001db6:	4b6e      	ldr	r3, [pc, #440]	; (8001f70 <SystemClock_Config+0x220>)
 8001db8:	699b      	ldr	r3, [r3, #24]
 8001dba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001dbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001dc2:	d1f8      	bne.n	8001db6 <SystemClock_Config+0x66>

		  /* Enable HSE Oscillator and activate PLL with HSE as source */
		  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
		  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001dca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001dce:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
		  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
		  RCC_OscInitStruct.CSIState = RCC_CSI_OFF;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
		  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001dde:	2302      	movs	r3, #2
 8001de0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
		  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001de4:	2302      	movs	r3, #2
 8001de6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0

		  RCC_OscInitStruct.PLL.PLLM = 5;
 8001dea:	2305      	movs	r3, #5
 8001dec:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
		  RCC_OscInitStruct.PLL.PLLN = 160;
 8001df0:	23a0      	movs	r3, #160	; 0xa0
 8001df2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
		  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001df6:	2300      	movs	r3, #0
 8001df8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		  RCC_OscInitStruct.PLL.PLLP = 2;
 8001dfc:	2302      	movs	r3, #2
 8001dfe:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
		  RCC_OscInitStruct.PLL.PLLR = 2;
 8001e02:	2302      	movs	r3, #2
 8001e04:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
		  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001e08:	2304      	movs	r3, #4
 8001e0a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100

		  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
		  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8001e14:	2308      	movs	r3, #8
 8001e16:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8001e1a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f006 f9f0 	bl	8008204 <HAL_RCC_OscConfig>
 8001e24:	4603      	mov	r3, r0
 8001e26:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
		  if(ret != HAL_OK)
 8001e2a:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d001      	beq.n	8001e36 <SystemClock_Config+0xe6>
		  {
		    Error_Handler();
 8001e32:	f000 f979 	bl	8002128 <Error_Handler>
		  }

		/* Select PLL as system clock source and configure  bus clocks dividers */
		  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 | \
 8001e36:	233f      	movs	r3, #63	; 0x3f
 8001e38:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
		                                  RCC_CLOCKTYPE_PCLK2  | RCC_CLOCKTYPE_D3PCLK1);

		  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e3c:	2303      	movs	r3, #3
 8001e3e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
		  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001e42:	2300      	movs	r3, #0
 8001e44:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
		  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001e48:	2308      	movs	r3, #8
 8001e4a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
		  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001e4e:	2340      	movs	r3, #64	; 0x40
 8001e50:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
		  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001e54:	2340      	movs	r3, #64	; 0x40
 8001e56:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
		  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001e5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e5e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
		  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001e62:	2340      	movs	r3, #64	; 0x40
 8001e64:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
		  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 8001e68:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8001e6c:	2104      	movs	r1, #4
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f006 fe22 	bl	8008ab8 <HAL_RCC_ClockConfig>
 8001e74:	4603      	mov	r3, r0
 8001e76:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
		  if(ret != HAL_OK)
 8001e7a:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d001      	beq.n	8001e86 <SystemClock_Config+0x136>
		  {
		    Error_Handler();
 8001e82:	f000 f951 	bl	8002128 <Error_Handler>
		  }

		  /* PLL2_VCO Input = HSE_VALUE/PLL2_M = 5 Mhz */
		  /* PLL2_VCO Output = PLL2_VCO Input * PLL_N = 700 Mhz */
		  /* SDMMC Kernel Clock = PLL2_VCO Output/PLL_R = 700/6 = 116 Mhz */
		  RCC_PeriphCLKInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8001e86:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001e8a:	f5a3 7198 	sub.w	r1, r3, #304	; 0x130
 8001e8e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001e92:	f04f 0300 	mov.w	r3, #0
 8001e96:	e9c1 2300 	strd	r2, r3, [r1]
		  RCC_PeriphCLKInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 8001e9a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001e9e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001ea2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001ea6:	651a      	str	r2, [r3, #80]	; 0x50
		  RCC_PeriphCLKInitStruct.PLL2.PLL2RGE = RCC_PLL1VCIRANGE_2;
 8001ea8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001eac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001eb0:	2208      	movs	r2, #8
 8001eb2:	61da      	str	r2, [r3, #28]
		  RCC_PeriphCLKInitStruct.PLL2.PLL2M = 5;
 8001eb4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001eb8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001ebc:	2205      	movs	r2, #5
 8001ebe:	609a      	str	r2, [r3, #8]
		  RCC_PeriphCLKInitStruct.PLL2.PLL2N = 140;
 8001ec0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001ec4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001ec8:	228c      	movs	r2, #140	; 0x8c
 8001eca:	60da      	str	r2, [r3, #12]
		  RCC_PeriphCLKInitStruct.PLL2.PLL2FRACN = 0;
 8001ecc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001ed0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	625a      	str	r2, [r3, #36]	; 0x24
		  RCC_PeriphCLKInitStruct.PLL2.PLL2P = 2;
 8001ed8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001edc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001ee0:	2202      	movs	r2, #2
 8001ee2:	611a      	str	r2, [r3, #16]
		  RCC_PeriphCLKInitStruct.PLL2.PLL2R = 6;
 8001ee4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001ee8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001eec:	2206      	movs	r2, #6
 8001eee:	619a      	str	r2, [r3, #24]
		  RCC_PeriphCLKInitStruct.PLL2.PLL2Q = 4;
 8001ef0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001ef4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001ef8:	2204      	movs	r2, #4
 8001efa:	615a      	str	r2, [r3, #20]
		  RCC_PeriphCLKInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001efc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001f00:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001f04:	2200      	movs	r2, #0
 8001f06:	621a      	str	r2, [r3, #32]
		  ret = HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphCLKInitStruct);
 8001f08:	f107 0308 	add.w	r3, r7, #8
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f007 f9a1 	bl	8009254 <HAL_RCCEx_PeriphCLKConfig>
 8001f12:	4603      	mov	r3, r0
 8001f14:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
		  if(ret != HAL_OK)
 8001f18:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d001      	beq.n	8001f24 <SystemClock_Config+0x1d4>
		  {
		    Error_Handler();
 8001f20:	f000 f902 	bl	8002128 <Error_Handler>
		  }

		  /*activate CSI clock mondatory for I/O Compensation Cell*/
		  __HAL_RCC_CSI_ENABLE() ;
 8001f24:	4b13      	ldr	r3, [pc, #76]	; (8001f74 <SystemClock_Config+0x224>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a12      	ldr	r2, [pc, #72]	; (8001f74 <SystemClock_Config+0x224>)
 8001f2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f2e:	6013      	str	r3, [r2, #0]

		  /* Enable SYSCFG clock mondatory for I/O Compensation Cell */
		  __HAL_RCC_SYSCFG_CLK_ENABLE() ;
 8001f30:	4b10      	ldr	r3, [pc, #64]	; (8001f74 <SystemClock_Config+0x224>)
 8001f32:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001f36:	4a0f      	ldr	r2, [pc, #60]	; (8001f74 <SystemClock_Config+0x224>)
 8001f38:	f043 0302 	orr.w	r3, r3, #2
 8001f3c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001f40:	4b0c      	ldr	r3, [pc, #48]	; (8001f74 <SystemClock_Config+0x224>)
 8001f42:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001f46:	f003 0202 	and.w	r2, r3, #2
 8001f4a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001f4e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001f52:	601a      	str	r2, [r3, #0]
 8001f54:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001f58:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001f5c:	681b      	ldr	r3, [r3, #0]

		  /* Enables the I/O Compensation Cell */
		  HAL_EnableCompensationCell();
 8001f5e:	f002 fc47 	bl	80047f0 <HAL_EnableCompensationCell>
}
 8001f62:	bf00      	nop
 8001f64:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	58000400 	.word	0x58000400
 8001f70:	58024800 	.word	0x58024800
 8001f74:	58024400 	.word	0x58024400

08001f78 <GetSector>:
/* USER CODE BEGIN 4 */



uint32_t GetSector(uint32_t Address)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b085      	sub	sp, #20
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  uint32_t sector = 0;
 8001f80:	2300      	movs	r3, #0
 8001f82:	60fb      	str	r3, [r7, #12]

  if(((Address < ADDR_FLASH_SECTOR_1_BANK1) && (Address >= ADDR_FLASH_SECTOR_0_BANK1)) || \
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	4a50      	ldr	r2, [pc, #320]	; (80020c8 <GetSector+0x150>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d803      	bhi.n	8001f94 <GetSector+0x1c>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001f92:	d207      	bcs.n	8001fa4 <GetSector+0x2c>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	4a4d      	ldr	r2, [pc, #308]	; (80020cc <GetSector+0x154>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d806      	bhi.n	8001faa <GetSector+0x32>
     ((Address < ADDR_FLASH_SECTOR_1_BANK2) && (Address >= ADDR_FLASH_SECTOR_0_BANK2)))
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 8001fa2:	d302      	bcc.n	8001faa <GetSector+0x32>
  {
    sector = FLASH_SECTOR_0;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	60fb      	str	r3, [r7, #12]
 8001fa8:	e086      	b.n	80020b8 <GetSector+0x140>
  }
  else if(((Address < ADDR_FLASH_SECTOR_2_BANK1) && (Address >= ADDR_FLASH_SECTOR_1_BANK1)) || \
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4a48      	ldr	r2, [pc, #288]	; (80020d0 <GetSector+0x158>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d803      	bhi.n	8001fba <GetSector+0x42>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	4a44      	ldr	r2, [pc, #272]	; (80020c8 <GetSector+0x150>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d807      	bhi.n	8001fca <GetSector+0x52>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	4a45      	ldr	r2, [pc, #276]	; (80020d4 <GetSector+0x15c>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d806      	bhi.n	8001fd0 <GetSector+0x58>
          ((Address < ADDR_FLASH_SECTOR_2_BANK2) && (Address >= ADDR_FLASH_SECTOR_1_BANK2)))
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	4a41      	ldr	r2, [pc, #260]	; (80020cc <GetSector+0x154>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d902      	bls.n	8001fd0 <GetSector+0x58>
  {
    sector = FLASH_SECTOR_1;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	60fb      	str	r3, [r7, #12]
 8001fce:	e073      	b.n	80020b8 <GetSector+0x140>
  }
  else if(((Address < ADDR_FLASH_SECTOR_3_BANK1) && (Address >= ADDR_FLASH_SECTOR_2_BANK1)) || \
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	4a41      	ldr	r2, [pc, #260]	; (80020d8 <GetSector+0x160>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d803      	bhi.n	8001fe0 <GetSector+0x68>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	4a3d      	ldr	r2, [pc, #244]	; (80020d0 <GetSector+0x158>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d807      	bhi.n	8001ff0 <GetSector+0x78>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	4a3e      	ldr	r2, [pc, #248]	; (80020dc <GetSector+0x164>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d806      	bhi.n	8001ff6 <GetSector+0x7e>
          ((Address < ADDR_FLASH_SECTOR_3_BANK2) && (Address >= ADDR_FLASH_SECTOR_2_BANK2)))
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	4a3a      	ldr	r2, [pc, #232]	; (80020d4 <GetSector+0x15c>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d902      	bls.n	8001ff6 <GetSector+0x7e>
  {
    sector = FLASH_SECTOR_2;
 8001ff0:	2302      	movs	r3, #2
 8001ff2:	60fb      	str	r3, [r7, #12]
 8001ff4:	e060      	b.n	80020b8 <GetSector+0x140>
  }
  else if(((Address < ADDR_FLASH_SECTOR_4_BANK1) && (Address >= ADDR_FLASH_SECTOR_3_BANK1)) || \
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	4a39      	ldr	r2, [pc, #228]	; (80020e0 <GetSector+0x168>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d803      	bhi.n	8002006 <GetSector+0x8e>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	4a35      	ldr	r2, [pc, #212]	; (80020d8 <GetSector+0x160>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d807      	bhi.n	8002016 <GetSector+0x9e>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4a36      	ldr	r2, [pc, #216]	; (80020e4 <GetSector+0x16c>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d806      	bhi.n	800201c <GetSector+0xa4>
          ((Address < ADDR_FLASH_SECTOR_4_BANK2) && (Address >= ADDR_FLASH_SECTOR_3_BANK2)))
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4a32      	ldr	r2, [pc, #200]	; (80020dc <GetSector+0x164>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d902      	bls.n	800201c <GetSector+0xa4>
  {
    sector = FLASH_SECTOR_3;
 8002016:	2303      	movs	r3, #3
 8002018:	60fb      	str	r3, [r7, #12]
 800201a:	e04d      	b.n	80020b8 <GetSector+0x140>
  }
  else if(((Address < ADDR_FLASH_SECTOR_5_BANK1) && (Address >= ADDR_FLASH_SECTOR_4_BANK1)) || \
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	4a32      	ldr	r2, [pc, #200]	; (80020e8 <GetSector+0x170>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d803      	bhi.n	800202c <GetSector+0xb4>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	4a2e      	ldr	r2, [pc, #184]	; (80020e0 <GetSector+0x168>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d807      	bhi.n	800203c <GetSector+0xc4>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	4a2f      	ldr	r2, [pc, #188]	; (80020ec <GetSector+0x174>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d806      	bhi.n	8002042 <GetSector+0xca>
          ((Address < ADDR_FLASH_SECTOR_5_BANK2) && (Address >= ADDR_FLASH_SECTOR_4_BANK2)))
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	4a2b      	ldr	r2, [pc, #172]	; (80020e4 <GetSector+0x16c>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d902      	bls.n	8002042 <GetSector+0xca>
  {
    sector = FLASH_SECTOR_4;
 800203c:	2304      	movs	r3, #4
 800203e:	60fb      	str	r3, [r7, #12]
 8002040:	e03a      	b.n	80020b8 <GetSector+0x140>
  }
  else if(((Address < ADDR_FLASH_SECTOR_6_BANK1) && (Address >= ADDR_FLASH_SECTOR_5_BANK1)) || \
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4a2a      	ldr	r2, [pc, #168]	; (80020f0 <GetSector+0x178>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d803      	bhi.n	8002052 <GetSector+0xda>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4a26      	ldr	r2, [pc, #152]	; (80020e8 <GetSector+0x170>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d807      	bhi.n	8002062 <GetSector+0xea>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4a27      	ldr	r2, [pc, #156]	; (80020f4 <GetSector+0x17c>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d806      	bhi.n	8002068 <GetSector+0xf0>
          ((Address < ADDR_FLASH_SECTOR_6_BANK2) && (Address >= ADDR_FLASH_SECTOR_5_BANK2)))
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4a23      	ldr	r2, [pc, #140]	; (80020ec <GetSector+0x174>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d902      	bls.n	8002068 <GetSector+0xf0>
  {
    sector = FLASH_SECTOR_5;
 8002062:	2305      	movs	r3, #5
 8002064:	60fb      	str	r3, [r7, #12]
 8002066:	e027      	b.n	80020b8 <GetSector+0x140>
  }
  else if(((Address < ADDR_FLASH_SECTOR_7_BANK1) && (Address >= ADDR_FLASH_SECTOR_6_BANK1)) || \
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	4a23      	ldr	r2, [pc, #140]	; (80020f8 <GetSector+0x180>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d803      	bhi.n	8002078 <GetSector+0x100>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	4a1f      	ldr	r2, [pc, #124]	; (80020f0 <GetSector+0x178>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d807      	bhi.n	8002088 <GetSector+0x110>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	4a20      	ldr	r2, [pc, #128]	; (80020fc <GetSector+0x184>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d806      	bhi.n	800208e <GetSector+0x116>
          ((Address < ADDR_FLASH_SECTOR_7_BANK2) && (Address >= ADDR_FLASH_SECTOR_6_BANK2)))
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	4a1c      	ldr	r2, [pc, #112]	; (80020f4 <GetSector+0x17c>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d902      	bls.n	800208e <GetSector+0x116>
  {
    sector = FLASH_SECTOR_6;
 8002088:	2306      	movs	r3, #6
 800208a:	60fb      	str	r3, [r7, #12]
 800208c:	e014      	b.n	80020b8 <GetSector+0x140>
  }
  else if(((Address < ADDR_FLASH_SECTOR_0_BANK2) && (Address >= ADDR_FLASH_SECTOR_7_BANK1)) || \
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 8002094:	d203      	bcs.n	800209e <GetSector+0x126>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a17      	ldr	r2, [pc, #92]	; (80020f8 <GetSector+0x180>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d807      	bhi.n	80020ae <GetSector+0x136>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4a17      	ldr	r2, [pc, #92]	; (8002100 <GetSector+0x188>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d806      	bhi.n	80020b4 <GetSector+0x13c>
          ((Address < FLASH_END_ADDR) && (Address >= ADDR_FLASH_SECTOR_7_BANK2)))
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4a14      	ldr	r2, [pc, #80]	; (80020fc <GetSector+0x184>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d902      	bls.n	80020b4 <GetSector+0x13c>
  {
     sector = FLASH_SECTOR_7;
 80020ae:	2307      	movs	r3, #7
 80020b0:	60fb      	str	r3, [r7, #12]
 80020b2:	e001      	b.n	80020b8 <GetSector+0x140>
  }
  else
  {
    sector = FLASH_SECTOR_7;
 80020b4:	2307      	movs	r3, #7
 80020b6:	60fb      	str	r3, [r7, #12]
  }

  return sector;
 80020b8:	68fb      	ldr	r3, [r7, #12]
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3714      	adds	r7, #20
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr
 80020c6:	bf00      	nop
 80020c8:	0801ffff 	.word	0x0801ffff
 80020cc:	0811ffff 	.word	0x0811ffff
 80020d0:	0803ffff 	.word	0x0803ffff
 80020d4:	0813ffff 	.word	0x0813ffff
 80020d8:	0805ffff 	.word	0x0805ffff
 80020dc:	0815ffff 	.word	0x0815ffff
 80020e0:	0807ffff 	.word	0x0807ffff
 80020e4:	0817ffff 	.word	0x0817ffff
 80020e8:	0809ffff 	.word	0x0809ffff
 80020ec:	0819ffff 	.word	0x0819ffff
 80020f0:	080bffff 	.word	0x080bffff
 80020f4:	081bffff 	.word	0x081bffff
 80020f8:	080dffff 	.word	0x080dffff
 80020fc:	081dffff 	.word	0x081dffff
 8002100:	081ffffe 	.word	0x081ffffe

08002104 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a04      	ldr	r2, [pc, #16]	; (8002124 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d101      	bne.n	800211a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002116:	f002 fb1b 	bl	8004750 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800211a:	bf00      	nop
 800211c:	3708      	adds	r7, #8
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	40001000 	.word	0x40001000

08002128 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002128:	b480      	push	{r7}
 800212a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800212c:	b672      	cpsid	i
}
 800212e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002130:	e7fe      	b.n	8002130 <Error_Handler+0x8>
	...

08002134 <MX_SDMMC1_SD_Init>:
SD_HandleTypeDef hsd1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8002138:	4b0d      	ldr	r3, [pc, #52]	; (8002170 <MX_SDMMC1_SD_Init+0x3c>)
 800213a:	4a0e      	ldr	r2, [pc, #56]	; (8002174 <MX_SDMMC1_SD_Init+0x40>)
 800213c:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800213e:	4b0c      	ldr	r3, [pc, #48]	; (8002170 <MX_SDMMC1_SD_Init+0x3c>)
 8002140:	2200      	movs	r2, #0
 8002142:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8002144:	4b0a      	ldr	r3, [pc, #40]	; (8002170 <MX_SDMMC1_SD_Init+0x3c>)
 8002146:	2200      	movs	r2, #0
 8002148:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 800214a:	4b09      	ldr	r3, [pc, #36]	; (8002170 <MX_SDMMC1_SD_Init+0x3c>)
 800214c:	2200      	movs	r2, #0
 800214e:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8002150:	4b07      	ldr	r3, [pc, #28]	; (8002170 <MX_SDMMC1_SD_Init+0x3c>)
 8002152:	2200      	movs	r2, #0
 8002154:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8002156:	4b06      	ldr	r3, [pc, #24]	; (8002170 <MX_SDMMC1_SD_Init+0x3c>)
 8002158:	2200      	movs	r2, #0
 800215a:	615a      	str	r2, [r3, #20]
  //hsd1.Init.TranceiverPresent = SDMMC_TRANSCEIVER_PRESENT;
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 800215c:	4804      	ldr	r0, [pc, #16]	; (8002170 <MX_SDMMC1_SD_Init+0x3c>)
 800215e:	f009 fd77 	bl	800bc50 <HAL_SD_Init>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	d001      	beq.n	800216c <MX_SDMMC1_SD_Init+0x38>
  {
    Error_Handler();
 8002168:	f7ff ffde 	bl	8002128 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 800216c:	bf00      	nop
 800216e:	bd80      	pop	{r7, pc}
 8002170:	24001614 	.word	0x24001614
 8002174:	52007000 	.word	0x52007000

08002178 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b0bc      	sub	sp, #240	; 0xf0
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]

	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002180:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002184:	2200      	movs	r2, #0
 8002186:	601a      	str	r2, [r3, #0]
 8002188:	605a      	str	r2, [r3, #4]
 800218a:	609a      	str	r2, [r3, #8]
 800218c:	60da      	str	r2, [r3, #12]
 800218e:	611a      	str	r2, [r3, #16]
	  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002190:	f107 0318 	add.w	r3, r7, #24
 8002194:	22c0      	movs	r2, #192	; 0xc0
 8002196:	2100      	movs	r1, #0
 8002198:	4618      	mov	r0, r3
 800219a:	f01d fb61 	bl	801f860 <memset>
	  if(sdHandle->Instance==SDMMC1)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a5a      	ldr	r2, [pc, #360]	; (800230c <HAL_SD_MspInit+0x194>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	f040 80ac 	bne.w	8002302 <HAL_SD_MspInit+0x18a>

	  /* USER CODE END SDMMC1_MspInit 0 */

	  /** Initializes the peripherals clock
	  */
	    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 80021aa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80021ae:	f04f 0300 	mov.w	r3, #0
 80021b2:	e9c7 2306 	strd	r2, r3, [r7, #24]
	    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 80021b6:	2300      	movs	r3, #0
 80021b8:	66bb      	str	r3, [r7, #104]	; 0x68
	    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021ba:	f107 0318 	add.w	r3, r7, #24
 80021be:	4618      	mov	r0, r3
 80021c0:	f007 f848 	bl	8009254 <HAL_RCCEx_PeriphCLKConfig>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d001      	beq.n	80021ce <HAL_SD_MspInit+0x56>
	    {
	      Error_Handler();
 80021ca:	f7ff ffad 	bl	8002128 <Error_Handler>
	    }

	    /* Peripheral clock enable */
	    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80021ce:	4b50      	ldr	r3, [pc, #320]	; (8002310 <HAL_SD_MspInit+0x198>)
 80021d0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80021d4:	4a4e      	ldr	r2, [pc, #312]	; (8002310 <HAL_SD_MspInit+0x198>)
 80021d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021da:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80021de:	4b4c      	ldr	r3, [pc, #304]	; (8002310 <HAL_SD_MspInit+0x198>)
 80021e0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80021e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021e8:	617b      	str	r3, [r7, #20]
 80021ea:	697b      	ldr	r3, [r7, #20]

	    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021ec:	4b48      	ldr	r3, [pc, #288]	; (8002310 <HAL_SD_MspInit+0x198>)
 80021ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021f2:	4a47      	ldr	r2, [pc, #284]	; (8002310 <HAL_SD_MspInit+0x198>)
 80021f4:	f043 0304 	orr.w	r3, r3, #4
 80021f8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80021fc:	4b44      	ldr	r3, [pc, #272]	; (8002310 <HAL_SD_MspInit+0x198>)
 80021fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002202:	f003 0304 	and.w	r3, r3, #4
 8002206:	613b      	str	r3, [r7, #16]
 8002208:	693b      	ldr	r3, [r7, #16]
	    __HAL_RCC_GPIOB_CLK_ENABLE();
 800220a:	4b41      	ldr	r3, [pc, #260]	; (8002310 <HAL_SD_MspInit+0x198>)
 800220c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002210:	4a3f      	ldr	r2, [pc, #252]	; (8002310 <HAL_SD_MspInit+0x198>)
 8002212:	f043 0302 	orr.w	r3, r3, #2
 8002216:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800221a:	4b3d      	ldr	r3, [pc, #244]	; (8002310 <HAL_SD_MspInit+0x198>)
 800221c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002220:	f003 0302 	and.w	r3, r3, #2
 8002224:	60fb      	str	r3, [r7, #12]
 8002226:	68fb      	ldr	r3, [r7, #12]
	    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002228:	4b39      	ldr	r3, [pc, #228]	; (8002310 <HAL_SD_MspInit+0x198>)
 800222a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800222e:	4a38      	ldr	r2, [pc, #224]	; (8002310 <HAL_SD_MspInit+0x198>)
 8002230:	f043 0308 	orr.w	r3, r3, #8
 8002234:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002238:	4b35      	ldr	r3, [pc, #212]	; (8002310 <HAL_SD_MspInit+0x198>)
 800223a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800223e:	f003 0308 	and.w	r3, r3, #8
 8002242:	60bb      	str	r3, [r7, #8]
 8002244:	68bb      	ldr	r3, [r7, #8]
	    PC8     ------> SDMMC1_D0
	    PC9     ------> SDMMC1_D1
	    PC7     ------> SDMMC1_D123DIR
	    PC6     ------> SDMMC1_D0DIR
	    */
	    GPIO_InitStruct.Pin = SDIO1_D2_Pin|SDIO1_D3_Pin|SDIO1_CLK_Pin|SDIO1_D0_Pin
 8002246:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800224a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	                          |SDIO1_D1_Pin;
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800224e:	2302      	movs	r3, #2
 8002250:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002254:	2300      	movs	r3, #0
 8002256:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800225a:	2303      	movs	r3, #3
 800225c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
	    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8002260:	230c      	movs	r3, #12
 8002262:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
	    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002266:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800226a:	4619      	mov	r1, r3
 800226c:	4829      	ldr	r0, [pc, #164]	; (8002314 <HAL_SD_MspInit+0x19c>)
 800226e:	f004 fbdf 	bl	8006a30 <HAL_GPIO_Init>

	    GPIO_InitStruct.Pin = SDIO1_CDIR_Pin|SDIO1_CKIN_Pin;
 8002272:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002276:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800227a:	2302      	movs	r3, #2
 800227c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002280:	2300      	movs	r3, #0
 8002282:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002286:	2303      	movs	r3, #3
 8002288:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
	    GPIO_InitStruct.Alternate = GPIO_AF7_SDIO1;
 800228c:	2307      	movs	r3, #7
 800228e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
	    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002292:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002296:	4619      	mov	r1, r3
 8002298:	481f      	ldr	r0, [pc, #124]	; (8002318 <HAL_SD_MspInit+0x1a0>)
 800229a:	f004 fbc9 	bl	8006a30 <HAL_GPIO_Init>

	    GPIO_InitStruct.Pin = SDIO1_CMD_Pin;
 800229e:	2304      	movs	r3, #4
 80022a0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022a4:	2302      	movs	r3, #2
 80022a6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022aa:	2300      	movs	r3, #0
 80022ac:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022b0:	2303      	movs	r3, #3
 80022b2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
	    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80022b6:	230c      	movs	r3, #12
 80022b8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
	    HAL_GPIO_Init(SDIO1_CMD_GPIO_Port, &GPIO_InitStruct);
 80022bc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80022c0:	4619      	mov	r1, r3
 80022c2:	4816      	ldr	r0, [pc, #88]	; (800231c <HAL_SD_MspInit+0x1a4>)
 80022c4:	f004 fbb4 	bl	8006a30 <HAL_GPIO_Init>

	    GPIO_InitStruct.Pin = SDIO1_D123DIR_Pin|SDIO1_D0DIR_Pin;
 80022c8:	23c0      	movs	r3, #192	; 0xc0
 80022ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ce:	2302      	movs	r3, #2
 80022d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d4:	2300      	movs	r3, #0
 80022d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022da:	2303      	movs	r3, #3
 80022dc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
	    GPIO_InitStruct.Alternate = GPIO_AF8_SDIO1;
 80022e0:	2308      	movs	r3, #8
 80022e2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
	    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022e6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80022ea:	4619      	mov	r1, r3
 80022ec:	4809      	ldr	r0, [pc, #36]	; (8002314 <HAL_SD_MspInit+0x19c>)
 80022ee:	f004 fb9f 	bl	8006a30 <HAL_GPIO_Init>

	    /* SDMMC1 interrupt Init */
	    HAL_NVIC_SetPriority(SDMMC1_IRQn, 7, 0);
 80022f2:	2200      	movs	r2, #0
 80022f4:	2107      	movs	r1, #7
 80022f6:	2031      	movs	r0, #49	; 0x31
 80022f8:	f002 fb7d 	bl	80049f6 <HAL_NVIC_SetPriority>
	    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 80022fc:	2031      	movs	r0, #49	; 0x31
 80022fe:	f002 fb94 	bl	8004a2a <HAL_NVIC_EnableIRQ>
	  /* USER CODE BEGIN SDMMC1_MspInit 1 */

	  /* USER CODE END SDMMC1_MspInit 1 */
	  }
}
 8002302:	bf00      	nop
 8002304:	37f0      	adds	r7, #240	; 0xf0
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	52007000 	.word	0x52007000
 8002310:	58024400 	.word	0x58024400
 8002314:	58020800 	.word	0x58020800
 8002318:	58020400 	.word	0x58020400
 800231c:	58020c00 	.word	0x58020c00

08002320 <HAL_SD_MspDeInit>:

void HAL_SD_MspDeInit(SD_HandleTypeDef* sdHandle)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b082      	sub	sp, #8
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]

	  if(sdHandle->Instance==SDMMC1)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a0f      	ldr	r2, [pc, #60]	; (800236c <HAL_SD_MspDeInit+0x4c>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d118      	bne.n	8002364 <HAL_SD_MspDeInit+0x44>
	  {
	  /* USER CODE BEGIN SDMMC1_MspDeInit 0 */

	  /* USER CODE END SDMMC1_MspDeInit 0 */
	    /* Peripheral clock disable */
	    __HAL_RCC_SDMMC1_CLK_DISABLE();
 8002332:	4b0f      	ldr	r3, [pc, #60]	; (8002370 <HAL_SD_MspDeInit+0x50>)
 8002334:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8002338:	4a0d      	ldr	r2, [pc, #52]	; (8002370 <HAL_SD_MspDeInit+0x50>)
 800233a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800233e:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
	    PC8     ------> SDMMC1_D0
	    PC9     ------> SDMMC1_D1
	    PC7     ------> SDMMC1_D123DIR
	    PC6     ------> SDMMC1_D0DIR
	    */
	    HAL_GPIO_DeInit(GPIOC, SDIO1_D2_Pin|SDIO1_D3_Pin|SDIO1_CLK_Pin|SDIO1_D0_Pin
 8002342:	f44f 51fe 	mov.w	r1, #8128	; 0x1fc0
 8002346:	480b      	ldr	r0, [pc, #44]	; (8002374 <HAL_SD_MspDeInit+0x54>)
 8002348:	f004 fd22 	bl	8006d90 <HAL_GPIO_DeInit>
	                          |SDIO1_D1_Pin|SDIO1_D123DIR_Pin|SDIO1_D0DIR_Pin);

	    HAL_GPIO_DeInit(GPIOB, SDIO1_CDIR_Pin|SDIO1_CKIN_Pin);
 800234c:	f44f 7140 	mov.w	r1, #768	; 0x300
 8002350:	4809      	ldr	r0, [pc, #36]	; (8002378 <HAL_SD_MspDeInit+0x58>)
 8002352:	f004 fd1d 	bl	8006d90 <HAL_GPIO_DeInit>

	    HAL_GPIO_DeInit(SDIO1_CMD_GPIO_Port, SDIO1_CMD_Pin);
 8002356:	2104      	movs	r1, #4
 8002358:	4808      	ldr	r0, [pc, #32]	; (800237c <HAL_SD_MspDeInit+0x5c>)
 800235a:	f004 fd19 	bl	8006d90 <HAL_GPIO_DeInit>

	    /* SDMMC1 interrupt DeInit */
	    HAL_NVIC_DisableIRQ(SDMMC1_IRQn);
 800235e:	2031      	movs	r0, #49	; 0x31
 8002360:	f002 fb71 	bl	8004a46 <HAL_NVIC_DisableIRQ>
	  /* USER CODE BEGIN SDMMC1_MspDeInit 1 */

	  /* USER CODE END SDMMC1_MspDeInit 1 */
	  }
}
 8002364:	bf00      	nop
 8002366:	3708      	adds	r7, #8
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}
 800236c:	52007000 	.word	0x52007000
 8002370:	58024400 	.word	0x58024400
 8002374:	58020800 	.word	0x58020800
 8002378:	58020400 	.word	0x58020400
 800237c:	58020c00 	.word	0x58020c00

08002380 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002380:	b480      	push	{r7}
 8002382:	b083      	sub	sp, #12
 8002384:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002386:	4b0a      	ldr	r3, [pc, #40]	; (80023b0 <HAL_MspInit+0x30>)
 8002388:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800238c:	4a08      	ldr	r2, [pc, #32]	; (80023b0 <HAL_MspInit+0x30>)
 800238e:	f043 0302 	orr.w	r3, r3, #2
 8002392:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002396:	4b06      	ldr	r3, [pc, #24]	; (80023b0 <HAL_MspInit+0x30>)
 8002398:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800239c:	f003 0302 	and.w	r3, r3, #2
 80023a0:	607b      	str	r3, [r7, #4]
 80023a2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023a4:	bf00      	nop
 80023a6:	370c      	adds	r7, #12
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr
 80023b0:	58024400 	.word	0x58024400

080023b4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b090      	sub	sp, #64	; 0x40
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2b0f      	cmp	r3, #15
 80023c0:	d827      	bhi.n	8002412 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 80023c2:	2200      	movs	r2, #0
 80023c4:	6879      	ldr	r1, [r7, #4]
 80023c6:	2036      	movs	r0, #54	; 0x36
 80023c8:	f002 fb15 	bl	80049f6 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80023cc:	2036      	movs	r0, #54	; 0x36
 80023ce:	f002 fb2c 	bl	8004a2a <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 80023d2:	4a29      	ldr	r2, [pc, #164]	; (8002478 <HAL_InitTick+0xc4>)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80023d8:	4b28      	ldr	r3, [pc, #160]	; (800247c <HAL_InitTick+0xc8>)
 80023da:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80023de:	4a27      	ldr	r2, [pc, #156]	; (800247c <HAL_InitTick+0xc8>)
 80023e0:	f043 0310 	orr.w	r3, r3, #16
 80023e4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80023e8:	4b24      	ldr	r3, [pc, #144]	; (800247c <HAL_InitTick+0xc8>)
 80023ea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80023ee:	f003 0310 	and.w	r3, r3, #16
 80023f2:	60fb      	str	r3, [r7, #12]
 80023f4:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80023f6:	f107 0210 	add.w	r2, r7, #16
 80023fa:	f107 0314 	add.w	r3, r7, #20
 80023fe:	4611      	mov	r1, r2
 8002400:	4618      	mov	r0, r3
 8002402:	f006 fee5 	bl	80091d0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002408:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800240a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800240c:	2b00      	cmp	r3, #0
 800240e:	d106      	bne.n	800241e <HAL_InitTick+0x6a>
 8002410:	e001      	b.n	8002416 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e02b      	b.n	800246e <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002416:	f006 feaf 	bl	8009178 <HAL_RCC_GetPCLK1Freq>
 800241a:	63f8      	str	r0, [r7, #60]	; 0x3c
 800241c:	e004      	b.n	8002428 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800241e:	f006 feab 	bl	8009178 <HAL_RCC_GetPCLK1Freq>
 8002422:	4603      	mov	r3, r0
 8002424:	005b      	lsls	r3, r3, #1
 8002426:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002428:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800242a:	4a15      	ldr	r2, [pc, #84]	; (8002480 <HAL_InitTick+0xcc>)
 800242c:	fba2 2303 	umull	r2, r3, r2, r3
 8002430:	0c9b      	lsrs	r3, r3, #18
 8002432:	3b01      	subs	r3, #1
 8002434:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002436:	4b13      	ldr	r3, [pc, #76]	; (8002484 <HAL_InitTick+0xd0>)
 8002438:	4a13      	ldr	r2, [pc, #76]	; (8002488 <HAL_InitTick+0xd4>)
 800243a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800243c:	4b11      	ldr	r3, [pc, #68]	; (8002484 <HAL_InitTick+0xd0>)
 800243e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002442:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002444:	4a0f      	ldr	r2, [pc, #60]	; (8002484 <HAL_InitTick+0xd0>)
 8002446:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002448:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800244a:	4b0e      	ldr	r3, [pc, #56]	; (8002484 <HAL_InitTick+0xd0>)
 800244c:	2200      	movs	r2, #0
 800244e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002450:	4b0c      	ldr	r3, [pc, #48]	; (8002484 <HAL_InitTick+0xd0>)
 8002452:	2200      	movs	r2, #0
 8002454:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002456:	480b      	ldr	r0, [pc, #44]	; (8002484 <HAL_InitTick+0xd0>)
 8002458:	f00b f931 	bl	800d6be <HAL_TIM_Base_Init>
 800245c:	4603      	mov	r3, r0
 800245e:	2b00      	cmp	r3, #0
 8002460:	d104      	bne.n	800246c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002462:	4808      	ldr	r0, [pc, #32]	; (8002484 <HAL_InitTick+0xd0>)
 8002464:	f00b f98c 	bl	800d780 <HAL_TIM_Base_Start_IT>
 8002468:	4603      	mov	r3, r0
 800246a:	e000      	b.n	800246e <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 800246c:	2301      	movs	r3, #1
}
 800246e:	4618      	mov	r0, r3
 8002470:	3740      	adds	r7, #64	; 0x40
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	24000008 	.word	0x24000008
 800247c:	58024400 	.word	0x58024400
 8002480:	431bde83 	.word	0x431bde83
 8002484:	24001694 	.word	0x24001694
 8002488:	40001000 	.word	0x40001000

0800248c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800248c:	b480      	push	{r7}
 800248e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002490:	e7fe      	b.n	8002490 <NMI_Handler+0x4>

08002492 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002492:	b480      	push	{r7}
 8002494:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002496:	e7fe      	b.n	8002496 <HardFault_Handler+0x4>

08002498 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002498:	b480      	push	{r7}
 800249a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800249c:	e7fe      	b.n	800249c <MemManage_Handler+0x4>

0800249e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800249e:	b480      	push	{r7}
 80024a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024a2:	e7fe      	b.n	80024a2 <BusFault_Handler+0x4>

080024a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024a4:	b480      	push	{r7}
 80024a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024a8:	e7fe      	b.n	80024a8 <UsageFault_Handler+0x4>

080024aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024aa:	b480      	push	{r7}
 80024ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024ae:	bf00      	nop
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr

080024b8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SD_DETECT_Pin);
 80024bc:	2020      	movs	r0, #32
 80024be:	f004 fd8a 	bl	8006fd6 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80024c2:	bf00      	nop
 80024c4:	bd80      	pop	{r7, pc}
	...

080024c8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80024cc:	4802      	ldr	r0, [pc, #8]	; (80024d8 <USART2_IRQHandler+0x10>)
 80024ce:	f00b fcff 	bl	800ded0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80024d2:	bf00      	nop
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	240016e4 	.word	0x240016e4

080024dc <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 80024e0:	4802      	ldr	r0, [pc, #8]	; (80024ec <SDMMC1_IRQHandler+0x10>)
 80024e2:	f009 fe5f 	bl	800c1a4 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 80024e6:	bf00      	nop
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	24001614 	.word	0x24001614

080024f0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80024f4:	4802      	ldr	r0, [pc, #8]	; (8002500 <TIM6_DAC_IRQHandler+0x10>)
 80024f6:	f00b f9bb 	bl	800d870 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80024fa:	bf00      	nop
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	24001694 	.word	0x24001694

08002504 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b086      	sub	sp, #24
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800250c:	4a14      	ldr	r2, [pc, #80]	; (8002560 <_sbrk+0x5c>)
 800250e:	4b15      	ldr	r3, [pc, #84]	; (8002564 <_sbrk+0x60>)
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002518:	4b13      	ldr	r3, [pc, #76]	; (8002568 <_sbrk+0x64>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d102      	bne.n	8002526 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002520:	4b11      	ldr	r3, [pc, #68]	; (8002568 <_sbrk+0x64>)
 8002522:	4a12      	ldr	r2, [pc, #72]	; (800256c <_sbrk+0x68>)
 8002524:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002526:	4b10      	ldr	r3, [pc, #64]	; (8002568 <_sbrk+0x64>)
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	4413      	add	r3, r2
 800252e:	693a      	ldr	r2, [r7, #16]
 8002530:	429a      	cmp	r2, r3
 8002532:	d207      	bcs.n	8002544 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002534:	f01d f9c6 	bl	801f8c4 <__errno>
 8002538:	4603      	mov	r3, r0
 800253a:	220c      	movs	r2, #12
 800253c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800253e:	f04f 33ff 	mov.w	r3, #4294967295
 8002542:	e009      	b.n	8002558 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002544:	4b08      	ldr	r3, [pc, #32]	; (8002568 <_sbrk+0x64>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800254a:	4b07      	ldr	r3, [pc, #28]	; (8002568 <_sbrk+0x64>)
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	4413      	add	r3, r2
 8002552:	4a05      	ldr	r2, [pc, #20]	; (8002568 <_sbrk+0x64>)
 8002554:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002556:	68fb      	ldr	r3, [r7, #12]
}
 8002558:	4618      	mov	r0, r3
 800255a:	3718      	adds	r7, #24
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}
 8002560:	24080000 	.word	0x24080000
 8002564:	00000400 	.word	0x00000400
 8002568:	240016e0 	.word	0x240016e0
 800256c:	24005888 	.word	0x24005888

08002570 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002570:	b480      	push	{r7}
 8002572:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002574:	4b37      	ldr	r3, [pc, #220]	; (8002654 <SystemInit+0xe4>)
 8002576:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800257a:	4a36      	ldr	r2, [pc, #216]	; (8002654 <SystemInit+0xe4>)
 800257c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002580:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002584:	4b34      	ldr	r3, [pc, #208]	; (8002658 <SystemInit+0xe8>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 030f 	and.w	r3, r3, #15
 800258c:	2b06      	cmp	r3, #6
 800258e:	d807      	bhi.n	80025a0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002590:	4b31      	ldr	r3, [pc, #196]	; (8002658 <SystemInit+0xe8>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f023 030f 	bic.w	r3, r3, #15
 8002598:	4a2f      	ldr	r2, [pc, #188]	; (8002658 <SystemInit+0xe8>)
 800259a:	f043 0307 	orr.w	r3, r3, #7
 800259e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80025a0:	4b2e      	ldr	r3, [pc, #184]	; (800265c <SystemInit+0xec>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a2d      	ldr	r2, [pc, #180]	; (800265c <SystemInit+0xec>)
 80025a6:	f043 0301 	orr.w	r3, r3, #1
 80025aa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80025ac:	4b2b      	ldr	r3, [pc, #172]	; (800265c <SystemInit+0xec>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80025b2:	4b2a      	ldr	r3, [pc, #168]	; (800265c <SystemInit+0xec>)
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	4929      	ldr	r1, [pc, #164]	; (800265c <SystemInit+0xec>)
 80025b8:	4b29      	ldr	r3, [pc, #164]	; (8002660 <SystemInit+0xf0>)
 80025ba:	4013      	ands	r3, r2
 80025bc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80025be:	4b26      	ldr	r3, [pc, #152]	; (8002658 <SystemInit+0xe8>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 0308 	and.w	r3, r3, #8
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d007      	beq.n	80025da <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80025ca:	4b23      	ldr	r3, [pc, #140]	; (8002658 <SystemInit+0xe8>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f023 030f 	bic.w	r3, r3, #15
 80025d2:	4a21      	ldr	r2, [pc, #132]	; (8002658 <SystemInit+0xe8>)
 80025d4:	f043 0307 	orr.w	r3, r3, #7
 80025d8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80025da:	4b20      	ldr	r3, [pc, #128]	; (800265c <SystemInit+0xec>)
 80025dc:	2200      	movs	r2, #0
 80025de:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80025e0:	4b1e      	ldr	r3, [pc, #120]	; (800265c <SystemInit+0xec>)
 80025e2:	2200      	movs	r2, #0
 80025e4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80025e6:	4b1d      	ldr	r3, [pc, #116]	; (800265c <SystemInit+0xec>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80025ec:	4b1b      	ldr	r3, [pc, #108]	; (800265c <SystemInit+0xec>)
 80025ee:	4a1d      	ldr	r2, [pc, #116]	; (8002664 <SystemInit+0xf4>)
 80025f0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80025f2:	4b1a      	ldr	r3, [pc, #104]	; (800265c <SystemInit+0xec>)
 80025f4:	4a1c      	ldr	r2, [pc, #112]	; (8002668 <SystemInit+0xf8>)
 80025f6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80025f8:	4b18      	ldr	r3, [pc, #96]	; (800265c <SystemInit+0xec>)
 80025fa:	4a1c      	ldr	r2, [pc, #112]	; (800266c <SystemInit+0xfc>)
 80025fc:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80025fe:	4b17      	ldr	r3, [pc, #92]	; (800265c <SystemInit+0xec>)
 8002600:	2200      	movs	r2, #0
 8002602:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002604:	4b15      	ldr	r3, [pc, #84]	; (800265c <SystemInit+0xec>)
 8002606:	4a19      	ldr	r2, [pc, #100]	; (800266c <SystemInit+0xfc>)
 8002608:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800260a:	4b14      	ldr	r3, [pc, #80]	; (800265c <SystemInit+0xec>)
 800260c:	2200      	movs	r2, #0
 800260e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002610:	4b12      	ldr	r3, [pc, #72]	; (800265c <SystemInit+0xec>)
 8002612:	4a16      	ldr	r2, [pc, #88]	; (800266c <SystemInit+0xfc>)
 8002614:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002616:	4b11      	ldr	r3, [pc, #68]	; (800265c <SystemInit+0xec>)
 8002618:	2200      	movs	r2, #0
 800261a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800261c:	4b0f      	ldr	r3, [pc, #60]	; (800265c <SystemInit+0xec>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a0e      	ldr	r2, [pc, #56]	; (800265c <SystemInit+0xec>)
 8002622:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002626:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002628:	4b0c      	ldr	r3, [pc, #48]	; (800265c <SystemInit+0xec>)
 800262a:	2200      	movs	r2, #0
 800262c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800262e:	4b10      	ldr	r3, [pc, #64]	; (8002670 <SystemInit+0x100>)
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	4b10      	ldr	r3, [pc, #64]	; (8002674 <SystemInit+0x104>)
 8002634:	4013      	ands	r3, r2
 8002636:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800263a:	d202      	bcs.n	8002642 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800263c:	4b0e      	ldr	r3, [pc, #56]	; (8002678 <SystemInit+0x108>)
 800263e:	2201      	movs	r2, #1
 8002640:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002642:	4b0e      	ldr	r3, [pc, #56]	; (800267c <SystemInit+0x10c>)
 8002644:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002648:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800264a:	bf00      	nop
 800264c:	46bd      	mov	sp, r7
 800264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002652:	4770      	bx	lr
 8002654:	e000ed00 	.word	0xe000ed00
 8002658:	52002000 	.word	0x52002000
 800265c:	58024400 	.word	0x58024400
 8002660:	eaf6ed7f 	.word	0xeaf6ed7f
 8002664:	02020200 	.word	0x02020200
 8002668:	01ff0000 	.word	0x01ff0000
 800266c:	01010280 	.word	0x01010280
 8002670:	5c001000 	.word	0x5c001000
 8002674:	ffff0000 	.word	0xffff0000
 8002678:	51008108 	.word	0x51008108
 800267c:	52004000 	.word	0x52004000

08002680 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002684:	4b22      	ldr	r3, [pc, #136]	; (8002710 <MX_USART2_UART_Init+0x90>)
 8002686:	4a23      	ldr	r2, [pc, #140]	; (8002714 <MX_USART2_UART_Init+0x94>)
 8002688:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800268a:	4b21      	ldr	r3, [pc, #132]	; (8002710 <MX_USART2_UART_Init+0x90>)
 800268c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002690:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002692:	4b1f      	ldr	r3, [pc, #124]	; (8002710 <MX_USART2_UART_Init+0x90>)
 8002694:	2200      	movs	r2, #0
 8002696:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002698:	4b1d      	ldr	r3, [pc, #116]	; (8002710 <MX_USART2_UART_Init+0x90>)
 800269a:	2200      	movs	r2, #0
 800269c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800269e:	4b1c      	ldr	r3, [pc, #112]	; (8002710 <MX_USART2_UART_Init+0x90>)
 80026a0:	2200      	movs	r2, #0
 80026a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80026a4:	4b1a      	ldr	r3, [pc, #104]	; (8002710 <MX_USART2_UART_Init+0x90>)
 80026a6:	220c      	movs	r2, #12
 80026a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026aa:	4b19      	ldr	r3, [pc, #100]	; (8002710 <MX_USART2_UART_Init+0x90>)
 80026ac:	2200      	movs	r2, #0
 80026ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80026b0:	4b17      	ldr	r3, [pc, #92]	; (8002710 <MX_USART2_UART_Init+0x90>)
 80026b2:	2200      	movs	r2, #0
 80026b4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80026b6:	4b16      	ldr	r3, [pc, #88]	; (8002710 <MX_USART2_UART_Init+0x90>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80026bc:	4b14      	ldr	r3, [pc, #80]	; (8002710 <MX_USART2_UART_Init+0x90>)
 80026be:	2200      	movs	r2, #0
 80026c0:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80026c2:	4b13      	ldr	r3, [pc, #76]	; (8002710 <MX_USART2_UART_Init+0x90>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80026c8:	4811      	ldr	r0, [pc, #68]	; (8002710 <MX_USART2_UART_Init+0x90>)
 80026ca:	f00b fad1 	bl	800dc70 <HAL_UART_Init>
 80026ce:	4603      	mov	r3, r0
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d001      	beq.n	80026d8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80026d4:	f7ff fd28 	bl	8002128 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80026d8:	2100      	movs	r1, #0
 80026da:	480d      	ldr	r0, [pc, #52]	; (8002710 <MX_USART2_UART_Init+0x90>)
 80026dc:	f00d ffcd 	bl	801067a <HAL_UARTEx_SetTxFifoThreshold>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d001      	beq.n	80026ea <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80026e6:	f7ff fd1f 	bl	8002128 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80026ea:	2100      	movs	r1, #0
 80026ec:	4808      	ldr	r0, [pc, #32]	; (8002710 <MX_USART2_UART_Init+0x90>)
 80026ee:	f00e f802 	bl	80106f6 <HAL_UARTEx_SetRxFifoThreshold>
 80026f2:	4603      	mov	r3, r0
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d001      	beq.n	80026fc <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80026f8:	f7ff fd16 	bl	8002128 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80026fc:	4804      	ldr	r0, [pc, #16]	; (8002710 <MX_USART2_UART_Init+0x90>)
 80026fe:	f00d ff83 	bl	8010608 <HAL_UARTEx_DisableFifoMode>
 8002702:	4603      	mov	r3, r0
 8002704:	2b00      	cmp	r3, #0
 8002706:	d001      	beq.n	800270c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002708:	f7ff fd0e 	bl	8002128 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800270c:	bf00      	nop
 800270e:	bd80      	pop	{r7, pc}
 8002710:	240016e4 	.word	0x240016e4
 8002714:	40004400 	.word	0x40004400

08002718 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b0ba      	sub	sp, #232	; 0xe8
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002720:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002724:	2200      	movs	r2, #0
 8002726:	601a      	str	r2, [r3, #0]
 8002728:	605a      	str	r2, [r3, #4]
 800272a:	609a      	str	r2, [r3, #8]
 800272c:	60da      	str	r2, [r3, #12]
 800272e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002730:	f107 0310 	add.w	r3, r7, #16
 8002734:	22c0      	movs	r2, #192	; 0xc0
 8002736:	2100      	movs	r1, #0
 8002738:	4618      	mov	r0, r3
 800273a:	f01d f891 	bl	801f860 <memset>
  if(uartHandle->Instance==USART2)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a2a      	ldr	r2, [pc, #168]	; (80027ec <HAL_UART_MspInit+0xd4>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d14d      	bne.n	80027e4 <HAL_UART_MspInit+0xcc>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002748:	f04f 0202 	mov.w	r2, #2
 800274c:	f04f 0300 	mov.w	r3, #0
 8002750:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002754:	2300      	movs	r3, #0
 8002756:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800275a:	f107 0310 	add.w	r3, r7, #16
 800275e:	4618      	mov	r0, r3
 8002760:	f006 fd78 	bl	8009254 <HAL_RCCEx_PeriphCLKConfig>
 8002764:	4603      	mov	r3, r0
 8002766:	2b00      	cmp	r3, #0
 8002768:	d001      	beq.n	800276e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800276a:	f7ff fcdd 	bl	8002128 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800276e:	4b20      	ldr	r3, [pc, #128]	; (80027f0 <HAL_UART_MspInit+0xd8>)
 8002770:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002774:	4a1e      	ldr	r2, [pc, #120]	; (80027f0 <HAL_UART_MspInit+0xd8>)
 8002776:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800277a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800277e:	4b1c      	ldr	r3, [pc, #112]	; (80027f0 <HAL_UART_MspInit+0xd8>)
 8002780:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002784:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002788:	60fb      	str	r3, [r7, #12]
 800278a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800278c:	4b18      	ldr	r3, [pc, #96]	; (80027f0 <HAL_UART_MspInit+0xd8>)
 800278e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002792:	4a17      	ldr	r2, [pc, #92]	; (80027f0 <HAL_UART_MspInit+0xd8>)
 8002794:	f043 0308 	orr.w	r3, r3, #8
 8002798:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800279c:	4b14      	ldr	r3, [pc, #80]	; (80027f0 <HAL_UART_MspInit+0xd8>)
 800279e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027a2:	f003 0308 	and.w	r3, r3, #8
 80027a6:	60bb      	str	r3, [r7, #8]
 80027a8:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80027aa:	2360      	movs	r3, #96	; 0x60
 80027ac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027b0:	2302      	movs	r3, #2
 80027b2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b6:	2300      	movs	r3, #0
 80027b8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027bc:	2300      	movs	r3, #0
 80027be:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80027c2:	2307      	movs	r3, #7
 80027c4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80027c8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80027cc:	4619      	mov	r1, r3
 80027ce:	4809      	ldr	r0, [pc, #36]	; (80027f4 <HAL_UART_MspInit+0xdc>)
 80027d0:	f004 f92e 	bl	8006a30 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80027d4:	2200      	movs	r2, #0
 80027d6:	2100      	movs	r1, #0
 80027d8:	2026      	movs	r0, #38	; 0x26
 80027da:	f002 f90c 	bl	80049f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80027de:	2026      	movs	r0, #38	; 0x26
 80027e0:	f002 f923 	bl	8004a2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80027e4:	bf00      	nop
 80027e6:	37e8      	adds	r7, #232	; 0xe8
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}
 80027ec:	40004400 	.word	0x40004400
 80027f0:	58024400 	.word	0x58024400
 80027f4:	58020c00 	.word	0x58020c00

080027f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80027f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002830 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80027fc:	f7ff feb8 	bl	8002570 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002800:	480c      	ldr	r0, [pc, #48]	; (8002834 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002802:	490d      	ldr	r1, [pc, #52]	; (8002838 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002804:	4a0d      	ldr	r2, [pc, #52]	; (800283c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002806:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002808:	e002      	b.n	8002810 <LoopCopyDataInit>

0800280a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800280a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800280c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800280e:	3304      	adds	r3, #4

08002810 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002810:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002812:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002814:	d3f9      	bcc.n	800280a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002816:	4a0a      	ldr	r2, [pc, #40]	; (8002840 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002818:	4c0a      	ldr	r4, [pc, #40]	; (8002844 <LoopFillZerobss+0x22>)
  movs r3, #0
 800281a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800281c:	e001      	b.n	8002822 <LoopFillZerobss>

0800281e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800281e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002820:	3204      	adds	r2, #4

08002822 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002822:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002824:	d3fb      	bcc.n	800281e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002826:	f01d f853 	bl	801f8d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800282a:	f7ff f973 	bl	8001b14 <main>
  bx  lr
 800282e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002830:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002834:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002838:	240000cc 	.word	0x240000cc
  ldr r2, =_sidata
 800283c:	08022b9c 	.word	0x08022b9c
  ldr r2, =_sbss
 8002840:	240000e0 	.word	0x240000e0
  ldr r4, =_ebss
 8002844:	24005888 	.word	0x24005888

08002848 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002848:	e7fe      	b.n	8002848 <ADC3_IRQHandler>
	...

0800284c <EXC7200_RegisterBusIO>:
  * @brief  Register IO bus to component object
  * @param  Component object pointer
  * @retval error status
  */
int32_t EXC7200_RegisterBusIO (EXC7200_Object_t *pObj, EXC7200_IO_t *pIO)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b084      	sub	sp, #16
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
 8002854:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  if (pObj == NULL)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d103      	bne.n	8002864 <EXC7200_RegisterBusIO+0x18>
  {
    ret = EXC7200_ERROR;
 800285c:	f04f 33ff 	mov.w	r3, #4294967295
 8002860:	60fb      	str	r3, [r7, #12]
 8002862:	e02c      	b.n	80028be <EXC7200_RegisterBusIO+0x72>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	685a      	ldr	r2, [r3, #4]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	891a      	ldrh	r2, [r3, #8]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	68da      	ldr	r2, [r3, #12]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	691a      	ldr	r2, [r3, #16]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	695a      	ldr	r2, [r3, #20]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	615a      	str	r2, [r3, #20]
    
    pObj->Ctx.ReadReg  = ReadRegWrap;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	4a0c      	ldr	r2, [pc, #48]	; (80028c8 <EXC7200_RegisterBusIO+0x7c>)
 8002898:	61da      	str	r2, [r3, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	4a0b      	ldr	r2, [pc, #44]	; (80028cc <EXC7200_RegisterBusIO+0x80>)
 800289e:	619a      	str	r2, [r3, #24]
    pObj->Ctx.handle   = pObj;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	687a      	ldr	r2, [r7, #4]
 80028a4:	621a      	str	r2, [r3, #32]
    
    if(pObj->IO.Init != NULL)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d004      	beq.n	80028b8 <EXC7200_RegisterBusIO+0x6c>
    {
      ret = pObj->IO.Init();
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4798      	blx	r3
 80028b4:	60f8      	str	r0, [r7, #12]
 80028b6:	e002      	b.n	80028be <EXC7200_RegisterBusIO+0x72>
    }
    else
    {
      ret = EXC7200_ERROR;
 80028b8:	f04f 33ff 	mov.w	r3, #4294967295
 80028bc:	60fb      	str	r3, [r7, #12]
    }
  }    
  
  return ret;
 80028be:	68fb      	ldr	r3, [r7, #12]
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	3710      	adds	r7, #16
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	0800290f 	.word	0x0800290f
 80028cc:	08002943 	.word	0x08002943

080028d0 <EXC7200_ReadID>:
  * @param  pObj Component object pointer
  * @param  Id Pointer to component ID value
  * @retval Component status
  */
int32_t EXC7200_ReadID(EXC7200_Object_t *pObj, uint32_t *Id)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b084      	sub	sp, #16
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
 80028d8:	6039      	str	r1, [r7, #0]
  int32_t ret = EXC7200_ERROR;
 80028da:	f04f 33ff 	mov.w	r3, #4294967295
 80028de:	60fb      	str	r3, [r7, #12]
  uint8_t data;
  
  if(exc7200_read_reg(&pObj->Ctx, EXC7200_READ_REG, &data, 1) == EXC7200_OK)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	f103 0018 	add.w	r0, r3, #24
 80028e6:	f107 020b 	add.w	r2, r7, #11
 80028ea:	2301      	movs	r3, #1
 80028ec:	2109      	movs	r1, #9
 80028ee:	f000 f842 	bl	8002976 <exc7200_read_reg>
 80028f2:	4603      	mov	r3, r0
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d105      	bne.n	8002904 <EXC7200_ReadID+0x34>
  {
    *Id = EXC7200_ID; 
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	f44f 42e4 	mov.w	r2, #29184	; 0x7200
 80028fe:	601a      	str	r2, [r3, #0]
    ret = EXC7200_OK;
 8002900:	2300      	movs	r3, #0
 8002902:	60fb      	str	r3, [r7, #12]
  }  
  
  return ret;
 8002904:	68fb      	ldr	r3, [r7, #12]
}
 8002906:	4618      	mov	r0, r3
 8002908:	3710      	adds	r7, #16
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}

0800290e <ReadRegWrap>:
  * @param  pData The target register value to be read
  * @param  Length buffer size to be read
  * @retval Component status.
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 800290e:	b590      	push	{r4, r7, lr}
 8002910:	b087      	sub	sp, #28
 8002912:	af00      	add	r7, sp, #0
 8002914:	60f8      	str	r0, [r7, #12]
 8002916:	607a      	str	r2, [r7, #4]
 8002918:	461a      	mov	r2, r3
 800291a:	460b      	mov	r3, r1
 800291c:	72fb      	strb	r3, [r7, #11]
 800291e:	4613      	mov	r3, r2
 8002920:	813b      	strh	r3, [r7, #8]
  EXC7200_Object_t *pObj = (EXC7200_Object_t *)handle;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	691c      	ldr	r4, [r3, #16]
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	8918      	ldrh	r0, [r3, #8]
 800292e:	7afb      	ldrb	r3, [r7, #11]
 8002930:	b299      	uxth	r1, r3
 8002932:	893b      	ldrh	r3, [r7, #8]
 8002934:	687a      	ldr	r2, [r7, #4]
 8002936:	47a0      	blx	r4
 8002938:	4603      	mov	r3, r0
}
 800293a:	4618      	mov	r0, r3
 800293c:	371c      	adds	r7, #28
 800293e:	46bd      	mov	sp, r7
 8002940:	bd90      	pop	{r4, r7, pc}

08002942 <WriteRegWrap>:
  * @param  pData The target register value to be written
  * @param  Length buffer size to be written
  * @retval Component status.
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 8002942:	b590      	push	{r4, r7, lr}
 8002944:	b087      	sub	sp, #28
 8002946:	af00      	add	r7, sp, #0
 8002948:	60f8      	str	r0, [r7, #12]
 800294a:	607a      	str	r2, [r7, #4]
 800294c:	461a      	mov	r2, r3
 800294e:	460b      	mov	r3, r1
 8002950:	72fb      	strb	r3, [r7, #11]
 8002952:	4613      	mov	r3, r2
 8002954:	813b      	strh	r3, [r7, #8]
  EXC7200_Object_t *pObj = (EXC7200_Object_t *)handle;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	68dc      	ldr	r4, [r3, #12]
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	8918      	ldrh	r0, [r3, #8]
 8002962:	7afb      	ldrb	r3, [r7, #11]
 8002964:	b299      	uxth	r1, r3
 8002966:	893b      	ldrh	r3, [r7, #8]
 8002968:	687a      	ldr	r2, [r7, #4]
 800296a:	47a0      	blx	r4
 800296c:	4603      	mov	r3, r0
}
 800296e:	4618      	mov	r0, r3
 8002970:	371c      	adds	r7, #28
 8002972:	46bd      	mov	sp, r7
 8002974:	bd90      	pop	{r4, r7, pc}

08002976 <exc7200_read_reg>:
  * @param  pdata Pointer to data buffer
  * @param  length Number of data to read  
  * @retval Component status
  */
int32_t exc7200_read_reg(exc7200_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
 8002976:	b590      	push	{r4, r7, lr}
 8002978:	b085      	sub	sp, #20
 800297a:	af00      	add	r7, sp, #0
 800297c:	60f8      	str	r0, [r7, #12]
 800297e:	607a      	str	r2, [r7, #4]
 8002980:	461a      	mov	r2, r3
 8002982:	460b      	mov	r3, r1
 8002984:	72fb      	strb	r3, [r7, #11]
 8002986:	4613      	mov	r3, r2
 8002988:	813b      	strh	r3, [r7, #8]
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	685c      	ldr	r4, [r3, #4]
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	6898      	ldr	r0, [r3, #8]
 8002992:	893b      	ldrh	r3, [r7, #8]
 8002994:	7af9      	ldrb	r1, [r7, #11]
 8002996:	687a      	ldr	r2, [r7, #4]
 8002998:	47a0      	blx	r4
 800299a:	4603      	mov	r3, r0
}
 800299c:	4618      	mov	r0, r3
 800299e:	3714      	adds	r7, #20
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd90      	pop	{r4, r7, pc}

080029a4 <IS42S32800G_Init>:
  * @param  Ctx Component object pointer
  * @param  pRegMode : Pointer to Register Mode structure
  * @retval error status
  */
int32_t IS42S32800G_Init(SDRAM_HandleTypeDef *Ctx, IS42S32800G_Context_t *pRegMode)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b084      	sub	sp, #16
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
 80029ac:	6039      	str	r1, [r7, #0]
  int32_t ret = IS42S32800G_ERROR;
 80029ae:	f04f 33ff 	mov.w	r3, #4294967295
 80029b2:	60fb      	str	r3, [r7, #12]

  /* Step 1: Configure a clock configuration enable command */
  if(IS42S32800G_ClockEnable(Ctx, pRegMode->TargetBank) == IS42S32800G_OK)
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4619      	mov	r1, r3
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f000 f832 	bl	8002a24 <IS42S32800G_ClockEnable>
 80029c0:	4603      	mov	r3, r0
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d128      	bne.n	8002a18 <IS42S32800G_Init+0x74>
  {
    /* Step 2: Insert 100 us minimum delay */
    /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
    (void)IS42S32800G_Delay(1);
 80029c6:	2001      	movs	r0, #1
 80029c8:	f000 f8e2 	bl	8002b90 <IS42S32800G_Delay>

    /* Step 3: Configure a PALL (precharge all) command */
    if(IS42S32800G_Precharge(Ctx, pRegMode->TargetBank) == IS42S32800G_OK)
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4619      	mov	r1, r3
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	f000 f84a 	bl	8002a6c <IS42S32800G_Precharge>
 80029d8:	4603      	mov	r3, r0
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d11c      	bne.n	8002a18 <IS42S32800G_Init+0x74>
    {
      /* Step 4: Configure a Refresh command */
      if(IS42S32800G_RefreshMode(Ctx, pRegMode->TargetBank, pRegMode->RefreshMode) == IS42S32800G_OK)
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	6819      	ldr	r1, [r3, #0]
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	461a      	mov	r2, r3
 80029e8:	6878      	ldr	r0, [r7, #4]
 80029ea:	f000 f897 	bl	8002b1c <IS42S32800G_RefreshMode>
 80029ee:	4603      	mov	r3, r0
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d111      	bne.n	8002a18 <IS42S32800G_Init+0x74>
      {
        /* Step 5: Program the external memory mode register */
        if(IS42S32800G_ModeRegConfig(Ctx, pRegMode) == IS42S32800G_OK)
 80029f4:	6839      	ldr	r1, [r7, #0]
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f000 f85c 	bl	8002ab4 <IS42S32800G_ModeRegConfig>
 80029fc:	4603      	mov	r3, r0
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d10a      	bne.n	8002a18 <IS42S32800G_Init+0x74>
        {
          /* Step 6: Set the refresh rate counter */
          if(IS42S32800G_RefreshRate(Ctx, pRegMode->RefreshRate) == IS42S32800G_OK)
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	4619      	mov	r1, r3
 8002a08:	6878      	ldr	r0, [r7, #4]
 8002a0a:	f000 f8ad 	bl	8002b68 <IS42S32800G_RefreshRate>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d101      	bne.n	8002a18 <IS42S32800G_Init+0x74>
          {
            ret = IS42S32800G_OK;
 8002a14:	2300      	movs	r3, #0
 8002a16:	60fb      	str	r3, [r7, #12]
          }
        }
      }
    }
  }
  return ret;
 8002a18:	68fb      	ldr	r3, [r7, #12]
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3710      	adds	r7, #16
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}
	...

08002a24 <IS42S32800G_ClockEnable>:
  * @param  Ctx Component object pointer
  * @param  Interface Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t IS42S32800G_ClockEnable(SDRAM_HandleTypeDef *Ctx, uint32_t Interface)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b082      	sub	sp, #8
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
 8002a2c:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = IS42S32800G_CLK_ENABLE_CMD;
 8002a2e:	4b0e      	ldr	r3, [pc, #56]	; (8002a68 <IS42S32800G_ClockEnable+0x44>)
 8002a30:	2201      	movs	r2, #1
 8002a32:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
 8002a34:	4a0c      	ldr	r2, [pc, #48]	; (8002a68 <IS42S32800G_ClockEnable+0x44>)
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 8002a3a:	4b0b      	ldr	r3, [pc, #44]	; (8002a68 <IS42S32800G_ClockEnable+0x44>)
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8002a40:	4b09      	ldr	r3, [pc, #36]	; (8002a68 <IS42S32800G_ClockEnable+0x44>)
 8002a42:	2200      	movs	r2, #0
 8002a44:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800G_TIMEOUT) != HAL_OK)
 8002a46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a4a:	4907      	ldr	r1, [pc, #28]	; (8002a68 <IS42S32800G_ClockEnable+0x44>)
 8002a4c:	6878      	ldr	r0, [r7, #4]
 8002a4e:	f00a fdd9 	bl	800d604 <HAL_SDRAM_SendCommand>
 8002a52:	4603      	mov	r3, r0
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d002      	beq.n	8002a5e <IS42S32800G_ClockEnable+0x3a>
  {
    return IS42S32800G_ERROR;
 8002a58:	f04f 33ff 	mov.w	r3, #4294967295
 8002a5c:	e000      	b.n	8002a60 <IS42S32800G_ClockEnable+0x3c>
  }
  else
  {
    return IS42S32800G_OK;
 8002a5e:	2300      	movs	r3, #0
  }
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	3708      	adds	r7, #8
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}
 8002a68:	24001778 	.word	0x24001778

08002a6c <IS42S32800G_Precharge>:
  * @param  Ctx Component object pointer
  * @param  Interface Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t IS42S32800G_Precharge(SDRAM_HandleTypeDef *Ctx, uint32_t Interface)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b082      	sub	sp, #8
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
 8002a74:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = IS42S32800G_PALL_CMD   ;
 8002a76:	4b0e      	ldr	r3, [pc, #56]	; (8002ab0 <IS42S32800G_Precharge+0x44>)
 8002a78:	2202      	movs	r2, #2
 8002a7a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
 8002a7c:	4a0c      	ldr	r2, [pc, #48]	; (8002ab0 <IS42S32800G_Precharge+0x44>)
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 8002a82:	4b0b      	ldr	r3, [pc, #44]	; (8002ab0 <IS42S32800G_Precharge+0x44>)
 8002a84:	2201      	movs	r2, #1
 8002a86:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8002a88:	4b09      	ldr	r3, [pc, #36]	; (8002ab0 <IS42S32800G_Precharge+0x44>)
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800G_TIMEOUT) != HAL_OK)
 8002a8e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a92:	4907      	ldr	r1, [pc, #28]	; (8002ab0 <IS42S32800G_Precharge+0x44>)
 8002a94:	6878      	ldr	r0, [r7, #4]
 8002a96:	f00a fdb5 	bl	800d604 <HAL_SDRAM_SendCommand>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d002      	beq.n	8002aa6 <IS42S32800G_Precharge+0x3a>
  {
    return IS42S32800G_ERROR;
 8002aa0:	f04f 33ff 	mov.w	r3, #4294967295
 8002aa4:	e000      	b.n	8002aa8 <IS42S32800G_Precharge+0x3c>
  }
  else
  {
    return IS42S32800G_OK;
 8002aa6:	2300      	movs	r3, #0
  }
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3708      	adds	r7, #8
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}
 8002ab0:	24001778 	.word	0x24001778

08002ab4 <IS42S32800G_ModeRegConfig>:
  * @param  Ctx Component object pointer
  * @param  pRegMode : Pointer to Register Mode structure
  * @retval error status
  */
int32_t IS42S32800G_ModeRegConfig(SDRAM_HandleTypeDef *Ctx, IS42S32800G_Context_t *pRegMode)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b084      	sub	sp, #16
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
 8002abc:	6039      	str	r1, [r7, #0]
  uint32_t tmpmrd;

  /* Program the external memory mode register */
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	68da      	ldr	r2, [r3, #12]
                     pRegMode->BurstType     |\
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	691b      	ldr	r3, [r3, #16]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8002ac6:	431a      	orrs	r2, r3
                     pRegMode->CASLatency    |\
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	695b      	ldr	r3, [r3, #20]
                     pRegMode->BurstType     |\
 8002acc:	431a      	orrs	r2, r3
                     pRegMode->OperationMode |\
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	699b      	ldr	r3, [r3, #24]
                     pRegMode->CASLatency    |\
 8002ad2:	431a      	orrs	r2, r3
                     pRegMode->WriteBurstMode;
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	69db      	ldr	r3, [r3, #28]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	60fb      	str	r3, [r7, #12]

  Command.CommandMode            = IS42S32800G_LOAD_MODE_CMD;
 8002adc:	4b0e      	ldr	r3, [pc, #56]	; (8002b18 <IS42S32800G_ModeRegConfig+0x64>)
 8002ade:	2204      	movs	r2, #4
 8002ae0:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = pRegMode->TargetBank;
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a0c      	ldr	r2, [pc, #48]	; (8002b18 <IS42S32800G_ModeRegConfig+0x64>)
 8002ae8:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 8002aea:	4b0b      	ldr	r3, [pc, #44]	; (8002b18 <IS42S32800G_ModeRegConfig+0x64>)
 8002aec:	2201      	movs	r2, #1
 8002aee:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8002af0:	4a09      	ldr	r2, [pc, #36]	; (8002b18 <IS42S32800G_ModeRegConfig+0x64>)
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800G_TIMEOUT) != HAL_OK)
 8002af6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002afa:	4907      	ldr	r1, [pc, #28]	; (8002b18 <IS42S32800G_ModeRegConfig+0x64>)
 8002afc:	6878      	ldr	r0, [r7, #4]
 8002afe:	f00a fd81 	bl	800d604 <HAL_SDRAM_SendCommand>
 8002b02:	4603      	mov	r3, r0
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d002      	beq.n	8002b0e <IS42S32800G_ModeRegConfig+0x5a>
  {
    return IS42S32800G_ERROR;
 8002b08:	f04f 33ff 	mov.w	r3, #4294967295
 8002b0c:	e000      	b.n	8002b10 <IS42S32800G_ModeRegConfig+0x5c>
  }
  else
  {
    return IS42S32800G_OK;
 8002b0e:	2300      	movs	r3, #0
  }
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	3710      	adds	r7, #16
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}
 8002b18:	24001778 	.word	0x24001778

08002b1c <IS42S32800G_RefreshMode>:
  * @param  RefreshMode Could be IS42S32800G_CMD_AUTOREFRESH_MODE or
  *                      IS42S32800G_CMD_SELFREFRESH_MODE
  * @retval error status
  */
int32_t IS42S32800G_RefreshMode(SDRAM_HandleTypeDef *Ctx, uint32_t Interface, uint32_t RefreshMode)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b084      	sub	sp, #16
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	60f8      	str	r0, [r7, #12]
 8002b24:	60b9      	str	r1, [r7, #8]
 8002b26:	607a      	str	r2, [r7, #4]
  Command.CommandMode            = RefreshMode;
 8002b28:	4a0e      	ldr	r2, [pc, #56]	; (8002b64 <IS42S32800G_RefreshMode+0x48>)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6013      	str	r3, [r2, #0]
  Command.CommandTarget          = Interface;
 8002b2e:	4a0d      	ldr	r2, [pc, #52]	; (8002b64 <IS42S32800G_RefreshMode+0x48>)
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 8;
 8002b34:	4b0b      	ldr	r3, [pc, #44]	; (8002b64 <IS42S32800G_RefreshMode+0x48>)
 8002b36:	2208      	movs	r2, #8
 8002b38:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8002b3a:	4b0a      	ldr	r3, [pc, #40]	; (8002b64 <IS42S32800G_RefreshMode+0x48>)
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800G_TIMEOUT) != HAL_OK)
 8002b40:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b44:	4907      	ldr	r1, [pc, #28]	; (8002b64 <IS42S32800G_RefreshMode+0x48>)
 8002b46:	68f8      	ldr	r0, [r7, #12]
 8002b48:	f00a fd5c 	bl	800d604 <HAL_SDRAM_SendCommand>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d002      	beq.n	8002b58 <IS42S32800G_RefreshMode+0x3c>
  {
    return IS42S32800G_ERROR;
 8002b52:	f04f 33ff 	mov.w	r3, #4294967295
 8002b56:	e000      	b.n	8002b5a <IS42S32800G_RefreshMode+0x3e>
  }
  else
  {
    return IS42S32800G_OK;
 8002b58:	2300      	movs	r3, #0
  }
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	3710      	adds	r7, #16
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	bf00      	nop
 8002b64:	24001778 	.word	0x24001778

08002b68 <IS42S32800G_RefreshRate>:
  * @param  Ctx Component object pointer
  * @param  RefreshCount The refresh rate to be programmed
  * @retval error status
  */
int32_t IS42S32800G_RefreshRate(SDRAM_HandleTypeDef *Ctx, uint32_t RefreshCount)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b082      	sub	sp, #8
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
 8002b70:	6039      	str	r1, [r7, #0]
  /* Set the device refresh rate */
  if(HAL_SDRAM_ProgramRefreshRate(Ctx, RefreshCount) != HAL_OK)
 8002b72:	6839      	ldr	r1, [r7, #0]
 8002b74:	6878      	ldr	r0, [r7, #4]
 8002b76:	f00a fd7a 	bl	800d66e <HAL_SDRAM_ProgramRefreshRate>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d002      	beq.n	8002b86 <IS42S32800G_RefreshRate+0x1e>
  {
    return IS42S32800G_ERROR;
 8002b80:	f04f 33ff 	mov.w	r3, #4294967295
 8002b84:	e000      	b.n	8002b88 <IS42S32800G_RefreshRate+0x20>
  }
  else
  {
    return IS42S32800G_OK;
 8002b86:	2300      	movs	r3, #0
  }
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3708      	adds	r7, #8
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}

08002b90 <IS42S32800G_Delay>:
  * @brief This function provides accurate delay (in milliseconds)
  * @param Delay : specifies the delay time length, in milliseconds
  * @retval IS42S32800G_OK
  */
static int32_t IS42S32800G_Delay(uint32_t Delay)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b084      	sub	sp, #16
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  tickstart = HAL_GetTick();
 8002b98:	f001 fdee 	bl	8004778 <HAL_GetTick>
 8002b9c:	60f8      	str	r0, [r7, #12]
  while((HAL_GetTick() - tickstart) < Delay)
 8002b9e:	bf00      	nop
 8002ba0:	f001 fdea 	bl	8004778 <HAL_GetTick>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	1ad3      	subs	r3, r2, r3
 8002baa:	687a      	ldr	r2, [r7, #4]
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d8f7      	bhi.n	8002ba0 <IS42S32800G_Delay+0x10>
  {
  }
  return IS42S32800G_OK;
 8002bb0:	2300      	movs	r3, #0
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3710      	adds	r7, #16
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}
	...

08002bbc <TS3510_RegisterBusIO>:
  * @brief  Register IO bus to component object
  * @param  Component object pointer
  * @retval error status
  */
int32_t TS3510_RegisterBusIO (TS3510_Object_t *pObj, TS3510_IO_t *pIO)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b084      	sub	sp, #16
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
 8002bc4:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  if (pObj == NULL)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d103      	bne.n	8002bd4 <TS3510_RegisterBusIO+0x18>
  {
    ret = TS3510_ERROR;
 8002bcc:	f04f 33ff 	mov.w	r3, #4294967295
 8002bd0:	60fb      	str	r3, [r7, #12]
 8002bd2:	e02c      	b.n	8002c2e <TS3510_RegisterBusIO+0x72>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	685a      	ldr	r2, [r3, #4]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	891a      	ldrh	r2, [r3, #8]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	68da      	ldr	r2, [r3, #12]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	691a      	ldr	r2, [r3, #16]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	695a      	ldr	r2, [r3, #20]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	615a      	str	r2, [r3, #20]
    
    pObj->Ctx.ReadReg  = ReadRegWrap;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	4a0c      	ldr	r2, [pc, #48]	; (8002c38 <TS3510_RegisterBusIO+0x7c>)
 8002c08:	61da      	str	r2, [r3, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	4a0b      	ldr	r2, [pc, #44]	; (8002c3c <TS3510_RegisterBusIO+0x80>)
 8002c0e:	619a      	str	r2, [r3, #24]
    pObj->Ctx.handle   = pObj;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	687a      	ldr	r2, [r7, #4]
 8002c14:	621a      	str	r2, [r3, #32]
    
    if(pObj->IO.Init != NULL)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d004      	beq.n	8002c28 <TS3510_RegisterBusIO+0x6c>
    {
      ret = pObj->IO.Init();
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4798      	blx	r3
 8002c24:	60f8      	str	r0, [r7, #12]
 8002c26:	e002      	b.n	8002c2e <TS3510_RegisterBusIO+0x72>
    }
    else
    {
      ret = TS3510_ERROR;
 8002c28:	f04f 33ff 	mov.w	r3, #4294967295
 8002c2c:	60fb      	str	r3, [r7, #12]
    }
  }    
  
  return ret;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	3710      	adds	r7, #16
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}
 8002c38:	08002ca7 	.word	0x08002ca7
 8002c3c:	08002cdb 	.word	0x08002cdb

08002c40 <TS3510_ReadID>:
  * @param  pObj Component object pointer
  * @param  Id Pointer to component ID value
  * @retval Component status
  */
int32_t TS3510_ReadID(TS3510_Object_t *pObj, uint32_t *Id)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b086      	sub	sp, #24
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
 8002c48:	6039      	str	r1, [r7, #0]
  int32_t ret = TS3510_OK;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	617b      	str	r3, [r7, #20]
  uint8_t aTmpBuffer[2] = {TS3510_READ_CMD, TS3510_WRITE_CMD};
 8002c4e:	f640 0381 	movw	r3, #2177	; 0x881
 8002c52:	823b      	strh	r3, [r7, #16]
  uint8_t  data;
  
  /* Prepare for LCD read data */
  if(ts3510_write_reg(&pObj->Ctx, TS3510_READ_BLOCK_REG, aTmpBuffer, 2) != TS3510_OK)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	f103 0018 	add.w	r0, r3, #24
 8002c5a:	f107 0210 	add.w	r2, r7, #16
 8002c5e:	2302      	movs	r3, #2
 8002c60:	218a      	movs	r1, #138	; 0x8a
 8002c62:	f000 f86b 	bl	8002d3c <ts3510_write_reg>
 8002c66:	4603      	mov	r3, r0
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d003      	beq.n	8002c74 <TS3510_ReadID+0x34>
  {
    ret = TS3510_ERROR;
 8002c6c:	f04f 33ff 	mov.w	r3, #4294967295
 8002c70:	617b      	str	r3, [r7, #20]
 8002c72:	e013      	b.n	8002c9c <TS3510_ReadID+0x5c>
  }/* Read TS data from LCD */
  else if(ts3510_read_reg(&pObj->Ctx, TS3510_READ_BLOCK_REG, &data, 1) != TS3510_OK)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	f103 0018 	add.w	r0, r3, #24
 8002c7a:	f107 020f 	add.w	r2, r7, #15
 8002c7e:	2301      	movs	r3, #1
 8002c80:	218a      	movs	r1, #138	; 0x8a
 8002c82:	f000 f844 	bl	8002d0e <ts3510_read_reg>
 8002c86:	4603      	mov	r3, r0
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d003      	beq.n	8002c94 <TS3510_ReadID+0x54>
  {
    ret = TS3510_ERROR;
 8002c8c:	f04f 33ff 	mov.w	r3, #4294967295
 8002c90:	617b      	str	r3, [r7, #20]
 8002c92:	e003      	b.n	8002c9c <TS3510_ReadID+0x5c>
  }
  else
  {
    *Id = TS3510_ID;
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	f243 5210 	movw	r2, #13584	; 0x3510
 8002c9a:	601a      	str	r2, [r3, #0]
  }
  
  return ret;     
 8002c9c:	697b      	ldr	r3, [r7, #20]
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3718      	adds	r7, #24
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}

08002ca6 <ReadRegWrap>:
  * @param  pData The target register value to be read
  * @param  Length buffer size to be read
  * @retval Component status.
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 8002ca6:	b590      	push	{r4, r7, lr}
 8002ca8:	b087      	sub	sp, #28
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	60f8      	str	r0, [r7, #12]
 8002cae:	607a      	str	r2, [r7, #4]
 8002cb0:	461a      	mov	r2, r3
 8002cb2:	460b      	mov	r3, r1
 8002cb4:	72fb      	strb	r3, [r7, #11]
 8002cb6:	4613      	mov	r3, r2
 8002cb8:	813b      	strh	r3, [r7, #8]
  TS3510_Object_t *pObj = (TS3510_Object_t *)handle;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	691c      	ldr	r4, [r3, #16]
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	8918      	ldrh	r0, [r3, #8]
 8002cc6:	7afb      	ldrb	r3, [r7, #11]
 8002cc8:	b299      	uxth	r1, r3
 8002cca:	893b      	ldrh	r3, [r7, #8]
 8002ccc:	687a      	ldr	r2, [r7, #4]
 8002cce:	47a0      	blx	r4
 8002cd0:	4603      	mov	r3, r0
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	371c      	adds	r7, #28
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd90      	pop	{r4, r7, pc}

08002cda <WriteRegWrap>:
  * @param  pData The target register value to be written
  * @param  Length buffer size to be written
  * @retval Component status.
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 8002cda:	b590      	push	{r4, r7, lr}
 8002cdc:	b087      	sub	sp, #28
 8002cde:	af00      	add	r7, sp, #0
 8002ce0:	60f8      	str	r0, [r7, #12]
 8002ce2:	607a      	str	r2, [r7, #4]
 8002ce4:	461a      	mov	r2, r3
 8002ce6:	460b      	mov	r3, r1
 8002ce8:	72fb      	strb	r3, [r7, #11]
 8002cea:	4613      	mov	r3, r2
 8002cec:	813b      	strh	r3, [r7, #8]
  TS3510_Object_t *pObj = (TS3510_Object_t *)handle;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	68dc      	ldr	r4, [r3, #12]
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	8918      	ldrh	r0, [r3, #8]
 8002cfa:	7afb      	ldrb	r3, [r7, #11]
 8002cfc:	b299      	uxth	r1, r3
 8002cfe:	893b      	ldrh	r3, [r7, #8]
 8002d00:	687a      	ldr	r2, [r7, #4]
 8002d02:	47a0      	blx	r4
 8002d04:	4603      	mov	r3, r0
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	371c      	adds	r7, #28
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd90      	pop	{r4, r7, pc}

08002d0e <ts3510_read_reg>:
  * @param  pdata Pointer to data buffer
  * @param  length Number of data to read  
  * @retval Component status
  */
int32_t ts3510_read_reg(ts3510_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
 8002d0e:	b590      	push	{r4, r7, lr}
 8002d10:	b085      	sub	sp, #20
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	60f8      	str	r0, [r7, #12]
 8002d16:	607a      	str	r2, [r7, #4]
 8002d18:	461a      	mov	r2, r3
 8002d1a:	460b      	mov	r3, r1
 8002d1c:	72fb      	strb	r3, [r7, #11]
 8002d1e:	4613      	mov	r3, r2
 8002d20:	813b      	strh	r3, [r7, #8]
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	685c      	ldr	r4, [r3, #4]
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	6898      	ldr	r0, [r3, #8]
 8002d2a:	893b      	ldrh	r3, [r7, #8]
 8002d2c:	7af9      	ldrb	r1, [r7, #11]
 8002d2e:	687a      	ldr	r2, [r7, #4]
 8002d30:	47a0      	blx	r4
 8002d32:	4603      	mov	r3, r0
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	3714      	adds	r7, #20
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd90      	pop	{r4, r7, pc}

08002d3c <ts3510_write_reg>:
  * @param  pdata Pointer to data buffer
  * @param  length Number of data to write  
  * @retval Component status
  */
int32_t ts3510_write_reg(ts3510_ctx_t *ctx, uint8_t reg, uint8_t *pdata, uint16_t length)
{
 8002d3c:	b590      	push	{r4, r7, lr}
 8002d3e:	b085      	sub	sp, #20
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	60f8      	str	r0, [r7, #12]
 8002d44:	607a      	str	r2, [r7, #4]
 8002d46:	461a      	mov	r2, r3
 8002d48:	460b      	mov	r3, r1
 8002d4a:	72fb      	strb	r3, [r7, #11]
 8002d4c:	4613      	mov	r3, r2
 8002d4e:	813b      	strh	r3, [r7, #8]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681c      	ldr	r4, [r3, #0]
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	6898      	ldr	r0, [r3, #8]
 8002d58:	893b      	ldrh	r3, [r7, #8]
 8002d5a:	7af9      	ldrb	r1, [r7, #11]
 8002d5c:	687a      	ldr	r2, [r7, #4]
 8002d5e:	47a0      	blx	r4
 8002d60:	4603      	mov	r3, r0
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	3714      	adds	r7, #20
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd90      	pop	{r4, r7, pc}
	...

08002d6c <BSP_I2C1_Init>:
/**
  * @brief  Initializes I2C HAL.
  * @retval None
  */
int32_t BSP_I2C1_Init(void)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b082      	sub	sp, #8
 8002d70:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8002d72:	2300      	movs	r3, #0
 8002d74:	607b      	str	r3, [r7, #4]

  hbus_i2c1.Instance = BUS_I2C1;
 8002d76:	4b17      	ldr	r3, [pc, #92]	; (8002dd4 <BSP_I2C1_Init+0x68>)
 8002d78:	4a17      	ldr	r2, [pc, #92]	; (8002dd8 <BSP_I2C1_Init+0x6c>)
 8002d7a:	601a      	str	r2, [r3, #0]

  if (I2c1InitCounter == 0U)
 8002d7c:	4b17      	ldr	r3, [pc, #92]	; (8002ddc <BSP_I2C1_Init+0x70>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d122      	bne.n	8002dca <BSP_I2C1_Init+0x5e>
  {
    I2c1InitCounter++;
 8002d84:	4b15      	ldr	r3, [pc, #84]	; (8002ddc <BSP_I2C1_Init+0x70>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	3301      	adds	r3, #1
 8002d8a:	4a14      	ldr	r2, [pc, #80]	; (8002ddc <BSP_I2C1_Init+0x70>)
 8002d8c:	6013      	str	r3, [r2, #0]

    if (HAL_I2C_GetState(&hbus_i2c1) == HAL_I2C_STATE_RESET)
 8002d8e:	4811      	ldr	r0, [pc, #68]	; (8002dd4 <BSP_I2C1_Init+0x68>)
 8002d90:	f004 fafa 	bl	8007388 <HAL_I2C_GetState>
 8002d94:	4603      	mov	r3, r0
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d117      	bne.n	8002dca <BSP_I2C1_Init+0x5e>
        BspI2cSemaphore = osSemaphoreCreate(osSemaphore(BSP_I2C_SEM), 1);
      }
#endif
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      /* Init the I2C1 Msp */
      I2C1_MspInit(&hbus_i2c1);
 8002d9a:	480e      	ldr	r0, [pc, #56]	; (8002dd4 <BSP_I2C1_Init+0x68>)
 8002d9c:	f000 fb08 	bl	80033b0 <I2C1_MspInit>
        {
          ret = BSP_ERROR_MSP_FAILURE;
        }
      }
#endif
      if (ret == BSP_ERROR_NONE)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d111      	bne.n	8002dca <BSP_I2C1_Init+0x5e>
      {
        if (MX_I2C1_Init(&hbus_i2c1, I2C_GetTiming(HAL_RCC_GetPCLK1Freq(), BUS_I2C1_FREQUENCY)) != HAL_OK)
 8002da6:	f006 f9e7 	bl	8009178 <HAL_RCC_GetPCLK1Freq>
 8002daa:	4603      	mov	r3, r0
 8002dac:	490c      	ldr	r1, [pc, #48]	; (8002de0 <BSP_I2C1_Init+0x74>)
 8002dae:	4618      	mov	r0, r3
 8002db0:	f000 f888 	bl	8002ec4 <I2C_GetTiming>
 8002db4:	4603      	mov	r3, r0
 8002db6:	4619      	mov	r1, r3
 8002db8:	4806      	ldr	r0, [pc, #24]	; (8002dd4 <BSP_I2C1_Init+0x68>)
 8002dba:	f000 f813 	bl	8002de4 <MX_I2C1_Init>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d002      	beq.n	8002dca <BSP_I2C1_Init+0x5e>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8002dc4:	f06f 0307 	mvn.w	r3, #7
 8002dc8:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }

  return ret;
 8002dca:	687b      	ldr	r3, [r7, #4]
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	3708      	adds	r7, #8
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}
 8002dd4:	24002190 	.word	0x24002190
 8002dd8:	40005400 	.word	0x40005400
 8002ddc:	24001788 	.word	0x24001788
 8002de0:	000186a0 	.word	0x000186a0

08002de4 <MX_I2C1_Init>:
  * @param  hI2c I2C handle
  * @param  timing I2C timing
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef *hI2c, uint32_t timing)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b084      	sub	sp, #16
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
 8002dec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002dee:	2300      	movs	r3, #0
 8002df0:	73fb      	strb	r3, [r7, #15]

  hI2c->Init.Timing           = timing;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	683a      	ldr	r2, [r7, #0]
 8002df6:	605a      	str	r2, [r3, #4]
  hI2c->Init.OwnAddress1      = 0;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	609a      	str	r2, [r3, #8]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2201      	movs	r2, #1
 8002e02:	60da      	str	r2, [r3, #12]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2200      	movs	r2, #0
 8002e08:	611a      	str	r2, [r3, #16]
  hI2c->Init.OwnAddress2      = 0;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	615a      	str	r2, [r3, #20]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2200      	movs	r2, #0
 8002e14:	619a      	str	r2, [r3, #24]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	61da      	str	r2, [r3, #28]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	621a      	str	r2, [r3, #32]

  if (HAL_I2C_Init(hI2c) != HAL_OK)
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	f004 f8fc 	bl	8007020 <HAL_I2C_Init>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d002      	beq.n	8002e34 <MX_I2C1_Init+0x50>
  {
    status = HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	73fb      	strb	r3, [r7, #15]
 8002e32:	e014      	b.n	8002e5e <MX_I2C1_Init+0x7a>
  }
  else
  {
    uint32_t analog_filter;

    analog_filter = (I2C_USE_ANALOG_FILTER == 1U) ? I2C_ANALOGFILTER_ENABLE : I2C_ANALOGFILTER_DISABLE;
 8002e34:	2300      	movs	r3, #0
 8002e36:	60bb      	str	r3, [r7, #8]
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 8002e38:	68b9      	ldr	r1, [r7, #8]
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	f004 fd22 	bl	8007884 <HAL_I2CEx_ConfigAnalogFilter>
 8002e40:	4603      	mov	r3, r0
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d002      	beq.n	8002e4c <MX_I2C1_Init+0x68>
    {
      status = HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	73fb      	strb	r3, [r7, #15]
 8002e4a:	e008      	b.n	8002e5e <MX_I2C1_Init+0x7a>
    }
    else
    {
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 8002e4c:	2100      	movs	r1, #0
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	f004 fd63 	bl	800791a <HAL_I2CEx_ConfigDigitalFilter>
 8002e54:	4603      	mov	r3, r0
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d001      	beq.n	8002e5e <MX_I2C1_Init+0x7a>
      {
        status = HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  return status;
 8002e5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	3710      	adds	r7, #16
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}

08002e68 <BSP_I2C1_ReadReg>:
  * @param  pData   Pointer to data buffer
  * @param  Length  Length of the data
  * @retval BSP status
  */
int32_t BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b088      	sub	sp, #32
 8002e6c:	af02      	add	r7, sp, #8
 8002e6e:	60ba      	str	r2, [r7, #8]
 8002e70:	461a      	mov	r2, r3
 8002e72:	4603      	mov	r3, r0
 8002e74:	81fb      	strh	r3, [r7, #14]
 8002e76:	460b      	mov	r3, r1
 8002e78:	81bb      	strh	r3, [r7, #12]
 8002e7a:	4613      	mov	r3, r2
 8002e7c:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C1_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 8002e7e:	89b9      	ldrh	r1, [r7, #12]
 8002e80:	89f8      	ldrh	r0, [r7, #14]
 8002e82:	88fb      	ldrh	r3, [r7, #6]
 8002e84:	9300      	str	r3, [sp, #0]
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	2201      	movs	r2, #1
 8002e8a:	f000 fafb 	bl	8003484 <I2C1_ReadReg>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d102      	bne.n	8002e9a <BSP_I2C1_ReadReg+0x32>
  {
    ret = BSP_ERROR_NONE;
 8002e94:	2300      	movs	r3, #0
 8002e96:	617b      	str	r3, [r7, #20]
 8002e98:	e00c      	b.n	8002eb4 <BSP_I2C1_ReadReg+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c1) == HAL_I2C_ERROR_AF)
 8002e9a:	4809      	ldr	r0, [pc, #36]	; (8002ec0 <BSP_I2C1_ReadReg+0x58>)
 8002e9c:	f004 fa82 	bl	80073a4 <HAL_I2C_GetError>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	2b04      	cmp	r3, #4
 8002ea4:	d103      	bne.n	8002eae <BSP_I2C1_ReadReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8002ea6:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8002eaa:	617b      	str	r3, [r7, #20]
 8002eac:	e002      	b.n	8002eb4 <BSP_I2C1_ReadReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8002eae:	f06f 0303 	mvn.w	r3, #3
 8002eb2:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
 8002eb4:	697b      	ldr	r3, [r7, #20]
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3718      	adds	r7, #24
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	24002190 	.word	0x24002190

08002ec4 <I2C_GetTiming>:
  * @param  clock_src_freq I2C clock source in Hz.
  * @param  i2c_freq Required I2C clock in Hz.
  * @retval I2C timing or 0 in case of error.
  */
static uint32_t I2C_GetTiming(uint32_t clock_src_freq, uint32_t i2c_freq)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b086      	sub	sp, #24
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
 8002ecc:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	617b      	str	r3, [r7, #20]
  uint32_t speed;
  uint32_t idx;

  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d06b      	beq.n	8002fb0 <I2C_GetTiming+0xec>
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d068      	beq.n	8002fb0 <I2C_GetTiming+0xec>
  {
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 8002ede:	2300      	movs	r3, #0
 8002ee0:	613b      	str	r3, [r7, #16]
 8002ee2:	e060      	b.n	8002fa6 <I2C_GetTiming+0xe2>
    {
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 8002ee4:	4a35      	ldr	r2, [pc, #212]	; (8002fbc <I2C_GetTiming+0xf8>)
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	212c      	movs	r1, #44	; 0x2c
 8002eea:	fb01 f303 	mul.w	r3, r1, r3
 8002eee:	4413      	add	r3, r2
 8002ef0:	3304      	adds	r3, #4
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	683a      	ldr	r2, [r7, #0]
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d352      	bcc.n	8002fa0 <I2C_GetTiming+0xdc>
          (i2c_freq <= I2C_Charac[speed].freq_max))
 8002efa:	4a30      	ldr	r2, [pc, #192]	; (8002fbc <I2C_GetTiming+0xf8>)
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	212c      	movs	r1, #44	; 0x2c
 8002f00:	fb01 f303 	mul.w	r3, r1, r3
 8002f04:	4413      	add	r3, r2
 8002f06:	3308      	adds	r3, #8
 8002f08:	681b      	ldr	r3, [r3, #0]
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 8002f0a:	683a      	ldr	r2, [r7, #0]
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d847      	bhi.n	8002fa0 <I2C_GetTiming+0xdc>
      {
        I2C_Compute_PRESC_SCLDEL_SDADEL(clock_src_freq, speed);
 8002f10:	6939      	ldr	r1, [r7, #16]
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	f000 f856 	bl	8002fc4 <I2C_Compute_PRESC_SCLDEL_SDADEL>
        idx = I2C_Compute_SCLL_SCLH(clock_src_freq, speed);
 8002f18:	6939      	ldr	r1, [r7, #16]
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	f000 f940 	bl	80031a0 <I2C_Compute_SCLL_SCLH>
 8002f20:	60f8      	str	r0, [r7, #12]

        if (idx < I2C_VALID_TIMING_NBR)
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2b7f      	cmp	r3, #127	; 0x7f
 8002f26:	d842      	bhi.n	8002fae <I2C_GetTiming+0xea>
        {
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8002f28:	4925      	ldr	r1, [pc, #148]	; (8002fc0 <I2C_GetTiming+0xfc>)
 8002f2a:	68fa      	ldr	r2, [r7, #12]
 8002f2c:	4613      	mov	r3, r2
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	4413      	add	r3, r2
 8002f32:	009b      	lsls	r3, r3, #2
 8002f34:	440b      	add	r3, r1
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	0719      	lsls	r1, r3, #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 8002f3a:	4821      	ldr	r0, [pc, #132]	; (8002fc0 <I2C_GetTiming+0xfc>)
 8002f3c:	68fa      	ldr	r2, [r7, #12]
 8002f3e:	4613      	mov	r3, r2
 8002f40:	009b      	lsls	r3, r3, #2
 8002f42:	4413      	add	r3, r2
 8002f44:	009b      	lsls	r3, r3, #2
 8002f46:	4403      	add	r3, r0
 8002f48:	3304      	adds	r3, #4
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	051b      	lsls	r3, r3, #20
 8002f4e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8002f52:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 8002f54:	481a      	ldr	r0, [pc, #104]	; (8002fc0 <I2C_GetTiming+0xfc>)
 8002f56:	68fa      	ldr	r2, [r7, #12]
 8002f58:	4613      	mov	r3, r2
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	4413      	add	r3, r2
 8002f5e:	009b      	lsls	r3, r3, #2
 8002f60:	4403      	add	r3, r0
 8002f62:	3308      	adds	r3, #8
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	041b      	lsls	r3, r3, #16
 8002f68:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 8002f6c:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 8002f6e:	4814      	ldr	r0, [pc, #80]	; (8002fc0 <I2C_GetTiming+0xfc>)
 8002f70:	68fa      	ldr	r2, [r7, #12]
 8002f72:	4613      	mov	r3, r2
 8002f74:	009b      	lsls	r3, r3, #2
 8002f76:	4413      	add	r3, r2
 8002f78:	009b      	lsls	r3, r3, #2
 8002f7a:	4403      	add	r3, r0
 8002f7c:	330c      	adds	r3, #12
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	021b      	lsls	r3, r3, #8
 8002f82:	b29b      	uxth	r3, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 8002f84:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 8002f86:	480e      	ldr	r0, [pc, #56]	; (8002fc0 <I2C_GetTiming+0xfc>)
 8002f88:	68fa      	ldr	r2, [r7, #12]
 8002f8a:	4613      	mov	r3, r2
 8002f8c:	009b      	lsls	r3, r3, #2
 8002f8e:	4413      	add	r3, r2
 8002f90:	009b      	lsls	r3, r3, #2
 8002f92:	4403      	add	r3, r0
 8002f94:	3310      	adds	r3, #16
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	b2db      	uxtb	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8002f9a:	430b      	orrs	r3, r1
 8002f9c:	617b      	str	r3, [r7, #20]
        }
        break;
 8002f9e:	e006      	b.n	8002fae <I2C_GetTiming+0xea>
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	3301      	adds	r3, #1
 8002fa4:	613b      	str	r3, [r7, #16]
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	2b02      	cmp	r3, #2
 8002faa:	d99b      	bls.n	8002ee4 <I2C_GetTiming+0x20>
 8002fac:	e000      	b.n	8002fb0 <I2C_GetTiming+0xec>
        break;
 8002fae:	bf00      	nop
      }
    }
  }

  return ret;
 8002fb0:	697b      	ldr	r3, [r7, #20]
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3718      	adds	r7, #24
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	08020eac 	.word	0x08020eac
 8002fc0:	2400178c 	.word	0x2400178c

08002fc4 <I2C_Compute_PRESC_SCLDEL_SDADEL>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval None.
  */
static void I2C_Compute_PRESC_SCLDEL_SDADEL(uint32_t clock_src_freq, uint32_t I2C_speed)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b08f      	sub	sp, #60	; 0x3c
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
 8002fcc:	6039      	str	r1, [r7, #0]
  uint32_t prev_presc = I2C_PRESC_MAX;
 8002fce:	2310      	movs	r3, #16
 8002fd0:	637b      	str	r3, [r7, #52]	; 0x34
  int32_t  tsdadel_min, tsdadel_max;
  int32_t  tscldel_min;
  uint32_t presc, scldel, sdadel;
  uint32_t tafdel_min, tafdel_max;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	085a      	lsrs	r2, r3, #1
 8002fd6:	4b6e      	ldr	r3, [pc, #440]	; (8003190 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1cc>)
 8002fd8:	4413      	add	r3, r2
 8002fda:	687a      	ldr	r2, [r7, #4]
 8002fdc:	fbb3 f3f2 	udiv	r3, r3, r2
 8002fe0:	61fb      	str	r3, [r7, #28]

  tafdel_min = (I2C_USE_ANALOG_FILTER == 1U) ? I2C_ANALOG_FILTER_DELAY_MIN : 0U;
 8002fe2:	2332      	movs	r3, #50	; 0x32
 8002fe4:	61bb      	str	r3, [r7, #24]
  tafdel_max = (I2C_USE_ANALOG_FILTER == 1U) ? I2C_ANALOG_FILTER_DELAY_MAX : 0U;
 8002fe6:	f44f 7382 	mov.w	r3, #260	; 0x104
 8002fea:	617b      	str	r3, [r7, #20]
  /* tDNF = DNF x tI2CCLK
     tPRESC = (PRESC+1) x tI2CCLK
     SDADEL >= {tf +tHD;DAT(min) - tAF(min) - tDNF - [3 x tI2CCLK]} / {tPRESC}
     SDADEL <= {tVD;DAT(max) - tr - tAF(max) - tDNF- [4 x tI2CCLK]} / {tPRESC} */

  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8002fec:	4a69      	ldr	r2, [pc, #420]	; (8003194 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	212c      	movs	r1, #44	; 0x2c
 8002ff2:	fb01 f303 	mul.w	r3, r1, r3
 8002ff6:	4413      	add	r3, r2
 8002ff8:	3324      	adds	r3, #36	; 0x24
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	4a65      	ldr	r2, [pc, #404]	; (8003194 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	212c      	movs	r1, #44	; 0x2c
 8003004:	fb01 f303 	mul.w	r3, r1, r3
 8003008:	4413      	add	r3, r2
 800300a:	330c      	adds	r3, #12
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	18c2      	adds	r2, r0, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 8003010:	69bb      	ldr	r3, [r7, #24]
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8003012:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 8003014:	495f      	ldr	r1, [pc, #380]	; (8003194 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	202c      	movs	r0, #44	; 0x2c
 800301a:	fb00 f303 	mul.w	r3, r0, r3
 800301e:	440b      	add	r3, r1
 8003020:	3328      	adds	r3, #40	; 0x28
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	3303      	adds	r3, #3
 8003026:	69f9      	ldr	r1, [r7, #28]
 8003028:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	633b      	str	r3, [r7, #48]	; 0x30

  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8003030:	4a58      	ldr	r2, [pc, #352]	; (8003194 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	212c      	movs	r1, #44	; 0x2c
 8003036:	fb01 f303 	mul.w	r3, r1, r3
 800303a:	4413      	add	r3, r2
 800303c:	3310      	adds	r3, #16
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4618      	mov	r0, r3
 8003042:	4a54      	ldr	r2, [pc, #336]	; (8003194 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	212c      	movs	r1, #44	; 0x2c
 8003048:	fb01 f303 	mul.w	r3, r1, r3
 800304c:	4413      	add	r3, r2
 800304e:	3320      	adds	r3, #32
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	1ac2      	subs	r2, r0, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 8003054:	697b      	ldr	r3, [r7, #20]
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8003056:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 8003058:	494e      	ldr	r1, [pc, #312]	; (8003194 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	202c      	movs	r0, #44	; 0x2c
 800305e:	fb00 f303 	mul.w	r3, r0, r3
 8003062:	440b      	add	r3, r1
 8003064:	3328      	adds	r3, #40	; 0x28
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	3304      	adds	r3, #4
 800306a:	69f9      	ldr	r1, [r7, #28]
 800306c:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8003070:	1ad3      	subs	r3, r2, r3
 8003072:	62fb      	str	r3, [r7, #44]	; 0x2c


  /* {[tr+ tSU;DAT(min)] / [tPRESC]} - 1 <= SCLDEL */
  tscldel_min = (int32_t)I2C_Charac[I2C_speed].trise + (int32_t)I2C_Charac[I2C_speed].sudat_min;
 8003074:	4a47      	ldr	r2, [pc, #284]	; (8003194 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	212c      	movs	r1, #44	; 0x2c
 800307a:	fb01 f303 	mul.w	r3, r1, r3
 800307e:	4413      	add	r3, r2
 8003080:	3320      	adds	r3, #32
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4618      	mov	r0, r3
 8003086:	4a43      	ldr	r2, [pc, #268]	; (8003194 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	212c      	movs	r1, #44	; 0x2c
 800308c:	fb01 f303 	mul.w	r3, r1, r3
 8003090:	4413      	add	r3, r2
 8003092:	3314      	adds	r3, #20
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4403      	add	r3, r0
 8003098:	613b      	str	r3, [r7, #16]

  if (tsdadel_min <= 0)
 800309a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800309c:	2b00      	cmp	r3, #0
 800309e:	dc01      	bgt.n	80030a4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xe0>
  {
    tsdadel_min = 0;
 80030a0:	2300      	movs	r3, #0
 80030a2:	633b      	str	r3, [r7, #48]	; 0x30
  }

  if (tsdadel_max <= 0)
 80030a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	dc01      	bgt.n	80030ae <I2C_Compute_PRESC_SCLDEL_SDADEL+0xea>
  {
    tsdadel_max = 0;
 80030aa:	2300      	movs	r3, #0
 80030ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 80030ae:	2300      	movs	r3, #0
 80030b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80030b2:	e062      	b.n	800317a <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1b6>
  {
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 80030b4:	2300      	movs	r3, #0
 80030b6:	627b      	str	r3, [r7, #36]	; 0x24
 80030b8:	e059      	b.n	800316e <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1aa>
    {
      /* TSCLDEL = (SCLDEL+1) * (PRESC+1) * TI2CCLK */
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 80030ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030bc:	3301      	adds	r3, #1
 80030be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80030c0:	3201      	adds	r2, #1
 80030c2:	fb03 f202 	mul.w	r2, r3, r2
 80030c6:	69fb      	ldr	r3, [r7, #28]
 80030c8:	fb02 f303 	mul.w	r3, r2, r3
 80030cc:	60fb      	str	r3, [r7, #12]

      if (tscldel >= (uint32_t)tscldel_min)
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	68fa      	ldr	r2, [r7, #12]
 80030d2:	429a      	cmp	r2, r3
 80030d4:	d348      	bcc.n	8003168 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1a4>
      {
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 80030d6:	2300      	movs	r3, #0
 80030d8:	623b      	str	r3, [r7, #32]
 80030da:	e042      	b.n	8003162 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x19e>
        {
          /* TSDADEL = SDADEL * (PRESC+1) * TI2CCLK */
          uint32_t tsdadel = (sdadel * (presc + 1U)) * ti2cclk;
 80030dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030de:	3301      	adds	r3, #1
 80030e0:	6a3a      	ldr	r2, [r7, #32]
 80030e2:	fb03 f202 	mul.w	r2, r3, r2
 80030e6:	69fb      	ldr	r3, [r7, #28]
 80030e8:	fb02 f303 	mul.w	r3, r2, r3
 80030ec:	60bb      	str	r3, [r7, #8]

          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 80030ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030f0:	68ba      	ldr	r2, [r7, #8]
 80030f2:	429a      	cmp	r2, r3
 80030f4:	d332      	bcc.n	800315c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
 80030f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030f8:	68ba      	ldr	r2, [r7, #8]
 80030fa:	429a      	cmp	r2, r3
 80030fc:	d82e      	bhi.n	800315c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
          {
            if(presc != prev_presc)
 80030fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003100:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003102:	429a      	cmp	r2, r3
 8003104:	d02a      	beq.n	800315c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
            {
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8003106:	4b24      	ldr	r3, [pc, #144]	; (8003198 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	4924      	ldr	r1, [pc, #144]	; (800319c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 800310c:	4613      	mov	r3, r2
 800310e:	009b      	lsls	r3, r3, #2
 8003110:	4413      	add	r3, r2
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	440b      	add	r3, r1
 8003116:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003118:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 800311a:	4b1f      	ldr	r3, [pc, #124]	; (8003198 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	491f      	ldr	r1, [pc, #124]	; (800319c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8003120:	4613      	mov	r3, r2
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	4413      	add	r3, r2
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	440b      	add	r3, r1
 800312a:	3304      	adds	r3, #4
 800312c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800312e:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8003130:	4b19      	ldr	r3, [pc, #100]	; (8003198 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	4919      	ldr	r1, [pc, #100]	; (800319c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8003136:	4613      	mov	r3, r2
 8003138:	009b      	lsls	r3, r3, #2
 800313a:	4413      	add	r3, r2
 800313c:	009b      	lsls	r3, r3, #2
 800313e:	440b      	add	r3, r1
 8003140:	3308      	adds	r3, #8
 8003142:	6a3a      	ldr	r2, [r7, #32]
 8003144:	601a      	str	r2, [r3, #0]
              prev_presc = presc;
 8003146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003148:	637b      	str	r3, [r7, #52]	; 0x34
              I2c_valid_timing_nbr ++;
 800314a:	4b13      	ldr	r3, [pc, #76]	; (8003198 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	3301      	adds	r3, #1
 8003150:	4a11      	ldr	r2, [pc, #68]	; (8003198 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8003152:	6013      	str	r3, [r2, #0]

              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8003154:	4b10      	ldr	r3, [pc, #64]	; (8003198 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	2b7f      	cmp	r3, #127	; 0x7f
 800315a:	d812      	bhi.n	8003182 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1be>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 800315c:	6a3b      	ldr	r3, [r7, #32]
 800315e:	3301      	adds	r3, #1
 8003160:	623b      	str	r3, [r7, #32]
 8003162:	6a3b      	ldr	r3, [r7, #32]
 8003164:	2b0f      	cmp	r3, #15
 8003166:	d9b9      	bls.n	80030dc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x118>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8003168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800316a:	3301      	adds	r3, #1
 800316c:	627b      	str	r3, [r7, #36]	; 0x24
 800316e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003170:	2b0f      	cmp	r3, #15
 8003172:	d9a2      	bls.n	80030ba <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf6>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8003174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003176:	3301      	adds	r3, #1
 8003178:	62bb      	str	r3, [r7, #40]	; 0x28
 800317a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800317c:	2b0f      	cmp	r3, #15
 800317e:	d999      	bls.n	80030b4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf0>
 8003180:	e000      	b.n	8003184 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1c0>
              {
                return;
 8003182:	bf00      	nop
          }
        }
      }
    }
  }
}
 8003184:	373c      	adds	r7, #60	; 0x3c
 8003186:	46bd      	mov	sp, r7
 8003188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318c:	4770      	bx	lr
 800318e:	bf00      	nop
 8003190:	3b9aca00 	.word	0x3b9aca00
 8003194:	08020eac 	.word	0x08020eac
 8003198:	2400218c 	.word	0x2400218c
 800319c:	2400178c 	.word	0x2400178c

080031a0 <I2C_Compute_SCLL_SCLH>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval config index (0 to I2C_VALID_TIMING_NBR], 0xFFFFFFFF for no valid config.
  */
static uint32_t I2C_Compute_SCLL_SCLH (uint32_t clock_src_freq, uint32_t I2C_speed)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b093      	sub	sp, #76	; 0x4c
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
 80031a8:	6039      	str	r1, [r7, #0]
 uint32_t ret = 0xFFFFFFFFU;
 80031aa:	f04f 33ff 	mov.w	r3, #4294967295
 80031ae:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t dnf_delay;
  uint32_t clk_min, clk_max;
  uint32_t scll, sclh;
  uint32_t tafdel_min;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	085a      	lsrs	r2, r3, #1
 80031b4:	4b7a      	ldr	r3, [pc, #488]	; (80033a0 <I2C_Compute_SCLL_SCLH+0x200>)
 80031b6:	4413      	add	r3, r2
 80031b8:	687a      	ldr	r2, [r7, #4]
 80031ba:	fbb3 f3f2 	udiv	r3, r3, r2
 80031be:	62fb      	str	r3, [r7, #44]	; 0x2c
  ti2cspeed   = (SEC2NSEC + (I2C_Charac[I2C_speed].freq / 2U))/ I2C_Charac[I2C_speed].freq;
 80031c0:	4a78      	ldr	r2, [pc, #480]	; (80033a4 <I2C_Compute_SCLL_SCLH+0x204>)
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	212c      	movs	r1, #44	; 0x2c
 80031c6:	fb01 f303 	mul.w	r3, r1, r3
 80031ca:	4413      	add	r3, r2
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	085a      	lsrs	r2, r3, #1
 80031d0:	4b73      	ldr	r3, [pc, #460]	; (80033a0 <I2C_Compute_SCLL_SCLH+0x200>)
 80031d2:	4413      	add	r3, r2
 80031d4:	4973      	ldr	r1, [pc, #460]	; (80033a4 <I2C_Compute_SCLL_SCLH+0x204>)
 80031d6:	683a      	ldr	r2, [r7, #0]
 80031d8:	202c      	movs	r0, #44	; 0x2c
 80031da:	fb00 f202 	mul.w	r2, r0, r2
 80031de:	440a      	add	r2, r1
 80031e0:	6812      	ldr	r2, [r2, #0]
 80031e2:	fbb3 f3f2 	udiv	r3, r3, r2
 80031e6:	62bb      	str	r3, [r7, #40]	; 0x28

  tafdel_min = (I2C_USE_ANALOG_FILTER == 1U) ? I2C_ANALOG_FILTER_DELAY_MIN : 0U;
 80031e8:	2332      	movs	r3, #50	; 0x32
 80031ea:	627b      	str	r3, [r7, #36]	; 0x24

  /* tDNF = DNF x tI2CCLK */
  dnf_delay = I2C_Charac[I2C_speed].dnf * ti2cclk;
 80031ec:	4a6d      	ldr	r2, [pc, #436]	; (80033a4 <I2C_Compute_SCLL_SCLH+0x204>)
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	212c      	movs	r1, #44	; 0x2c
 80031f2:	fb01 f303 	mul.w	r3, r1, r3
 80031f6:	4413      	add	r3, r2
 80031f8:	3328      	adds	r3, #40	; 0x28
 80031fa:	681a      	ldr	r2, [r3, #0]
 80031fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031fe:	fb02 f303 	mul.w	r3, r2, r3
 8003202:	623b      	str	r3, [r7, #32]

  clk_max = SEC2NSEC / I2C_Charac[I2C_speed].freq_min;
 8003204:	4a67      	ldr	r2, [pc, #412]	; (80033a4 <I2C_Compute_SCLL_SCLH+0x204>)
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	212c      	movs	r1, #44	; 0x2c
 800320a:	fb01 f303 	mul.w	r3, r1, r3
 800320e:	4413      	add	r3, r2
 8003210:	3304      	adds	r3, #4
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a62      	ldr	r2, [pc, #392]	; (80033a0 <I2C_Compute_SCLL_SCLH+0x200>)
 8003216:	fbb2 f3f3 	udiv	r3, r2, r3
 800321a:	61fb      	str	r3, [r7, #28]
  clk_min = SEC2NSEC / I2C_Charac[I2C_speed].freq_max;
 800321c:	4a61      	ldr	r2, [pc, #388]	; (80033a4 <I2C_Compute_SCLL_SCLH+0x204>)
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	212c      	movs	r1, #44	; 0x2c
 8003222:	fb01 f303 	mul.w	r3, r1, r3
 8003226:	4413      	add	r3, r2
 8003228:	3308      	adds	r3, #8
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a5c      	ldr	r2, [pc, #368]	; (80033a0 <I2C_Compute_SCLL_SCLH+0x200>)
 800322e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003232:	61bb      	str	r3, [r7, #24]

  prev_error = ti2cspeed;
 8003234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003236:	643b      	str	r3, [r7, #64]	; 0x40

  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8003238:	2300      	movs	r3, #0
 800323a:	637b      	str	r3, [r7, #52]	; 0x34
 800323c:	e0a3      	b.n	8003386 <I2C_Compute_SCLL_SCLH+0x1e6>
  {
    /* tPRESC = (PRESC+1) x tI2CCLK*/
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 800323e:	495a      	ldr	r1, [pc, #360]	; (80033a8 <I2C_Compute_SCLL_SCLH+0x208>)
 8003240:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003242:	4613      	mov	r3, r2
 8003244:	009b      	lsls	r3, r3, #2
 8003246:	4413      	add	r3, r2
 8003248:	009b      	lsls	r3, r3, #2
 800324a:	440b      	add	r3, r1
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	1c5a      	adds	r2, r3, #1
 8003250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003252:	fb02 f303 	mul.w	r3, r2, r3
 8003256:	617b      	str	r3, [r7, #20]

    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8003258:	2300      	movs	r3, #0
 800325a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800325c:	e08c      	b.n	8003378 <I2C_Compute_SCLL_SCLH+0x1d8>
    {
      /* tLOW(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLL+1) x tPRESC ] */
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 800325e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003260:	6a3b      	ldr	r3, [r7, #32]
 8003262:	441a      	add	r2, r3
 8003264:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003266:	3301      	adds	r3, #1
 8003268:	6979      	ldr	r1, [r7, #20]
 800326a:	fb03 f101 	mul.w	r1, r3, r1
 800326e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003270:	005b      	lsls	r3, r3, #1
 8003272:	440b      	add	r3, r1
 8003274:	4413      	add	r3, r2
 8003276:	613b      	str	r3, [r7, #16]


      /* The I2CCLK period tI2CCLK must respect the following conditions:
      tI2CCLK < (tLOW - tfilters) / 4 and tI2CCLK < tHIGH */
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8003278:	4a4a      	ldr	r2, [pc, #296]	; (80033a4 <I2C_Compute_SCLL_SCLH+0x204>)
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	212c      	movs	r1, #44	; 0x2c
 800327e:	fb01 f303 	mul.w	r3, r1, r3
 8003282:	4413      	add	r3, r2
 8003284:	3318      	adds	r3, #24
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	693a      	ldr	r2, [r7, #16]
 800328a:	429a      	cmp	r2, r3
 800328c:	d971      	bls.n	8003372 <I2C_Compute_SCLL_SCLH+0x1d2>
 800328e:	693a      	ldr	r2, [r7, #16]
 8003290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003292:	1ad2      	subs	r2, r2, r3
 8003294:	6a3b      	ldr	r3, [r7, #32]
 8003296:	1ad3      	subs	r3, r2, r3
 8003298:	089b      	lsrs	r3, r3, #2
 800329a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800329c:	429a      	cmp	r2, r3
 800329e:	d268      	bcs.n	8003372 <I2C_Compute_SCLL_SCLH+0x1d2>
      {
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 80032a0:	2300      	movs	r3, #0
 80032a2:	63bb      	str	r3, [r7, #56]	; 0x38
 80032a4:	e062      	b.n	800336c <I2C_Compute_SCLL_SCLH+0x1cc>
        {
          /* tHIGH(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLH+1) x tPRESC] */
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 80032a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032a8:	6a3b      	ldr	r3, [r7, #32]
 80032aa:	441a      	add	r2, r3
 80032ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032ae:	3301      	adds	r3, #1
 80032b0:	6979      	ldr	r1, [r7, #20]
 80032b2:	fb03 f101 	mul.w	r1, r3, r1
 80032b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032b8:	005b      	lsls	r3, r3, #1
 80032ba:	440b      	add	r3, r1
 80032bc:	4413      	add	r3, r2
 80032be:	60fb      	str	r3, [r7, #12]

          /* tSCL = tf + tLOW + tr + tHIGH */
          uint32_t tscl = tscl_l + tscl_h + I2C_Charac[I2C_speed].trise + I2C_Charac[I2C_speed].tfall;
 80032c0:	693a      	ldr	r2, [r7, #16]
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	441a      	add	r2, r3
 80032c6:	4937      	ldr	r1, [pc, #220]	; (80033a4 <I2C_Compute_SCLL_SCLH+0x204>)
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	202c      	movs	r0, #44	; 0x2c
 80032cc:	fb00 f303 	mul.w	r3, r0, r3
 80032d0:	440b      	add	r3, r1
 80032d2:	3320      	adds	r3, #32
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	441a      	add	r2, r3
 80032d8:	4932      	ldr	r1, [pc, #200]	; (80033a4 <I2C_Compute_SCLL_SCLH+0x204>)
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	202c      	movs	r0, #44	; 0x2c
 80032de:	fb00 f303 	mul.w	r3, r0, r3
 80032e2:	440b      	add	r3, r1
 80032e4:	3324      	adds	r3, #36	; 0x24
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4413      	add	r3, r2
 80032ea:	60bb      	str	r3, [r7, #8]

          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 80032ec:	68ba      	ldr	r2, [r7, #8]
 80032ee:	69bb      	ldr	r3, [r7, #24]
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d338      	bcc.n	8003366 <I2C_Compute_SCLL_SCLH+0x1c6>
 80032f4:	68ba      	ldr	r2, [r7, #8]
 80032f6:	69fb      	ldr	r3, [r7, #28]
 80032f8:	429a      	cmp	r2, r3
 80032fa:	d834      	bhi.n	8003366 <I2C_Compute_SCLL_SCLH+0x1c6>
 80032fc:	4a29      	ldr	r2, [pc, #164]	; (80033a4 <I2C_Compute_SCLL_SCLH+0x204>)
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	212c      	movs	r1, #44	; 0x2c
 8003302:	fb01 f303 	mul.w	r3, r1, r3
 8003306:	4413      	add	r3, r2
 8003308:	331c      	adds	r3, #28
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	68fa      	ldr	r2, [r7, #12]
 800330e:	429a      	cmp	r2, r3
 8003310:	d329      	bcc.n	8003366 <I2C_Compute_SCLL_SCLH+0x1c6>
 8003312:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	429a      	cmp	r2, r3
 8003318:	d225      	bcs.n	8003366 <I2C_Compute_SCLL_SCLH+0x1c6>
          {
            int32_t error = (int32_t)tscl - (int32_t)ti2cspeed;
 800331a:	68ba      	ldr	r2, [r7, #8]
 800331c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800331e:	1ad3      	subs	r3, r2, r3
 8003320:	633b      	str	r3, [r7, #48]	; 0x30

            if (error < 0)
 8003322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003324:	2b00      	cmp	r3, #0
 8003326:	da02      	bge.n	800332e <I2C_Compute_SCLL_SCLH+0x18e>
            {
              error = -error;
 8003328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800332a:	425b      	negs	r3, r3
 800332c:	633b      	str	r3, [r7, #48]	; 0x30
            }

            /* look for the timings with the lowest clock error */
            if ((uint32_t)error < prev_error)
 800332e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003330:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003332:	429a      	cmp	r2, r3
 8003334:	d917      	bls.n	8003366 <I2C_Compute_SCLL_SCLH+0x1c6>
            {
              prev_error = (uint32_t)error;
 8003336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003338:	643b      	str	r3, [r7, #64]	; 0x40
              I2c_valid_timing[count].scll = scll;
 800333a:	491b      	ldr	r1, [pc, #108]	; (80033a8 <I2C_Compute_SCLL_SCLH+0x208>)
 800333c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800333e:	4613      	mov	r3, r2
 8003340:	009b      	lsls	r3, r3, #2
 8003342:	4413      	add	r3, r2
 8003344:	009b      	lsls	r3, r3, #2
 8003346:	440b      	add	r3, r1
 8003348:	3310      	adds	r3, #16
 800334a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800334c:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[count].sclh = sclh;
 800334e:	4916      	ldr	r1, [pc, #88]	; (80033a8 <I2C_Compute_SCLL_SCLH+0x208>)
 8003350:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003352:	4613      	mov	r3, r2
 8003354:	009b      	lsls	r3, r3, #2
 8003356:	4413      	add	r3, r2
 8003358:	009b      	lsls	r3, r3, #2
 800335a:	440b      	add	r3, r1
 800335c:	330c      	adds	r3, #12
 800335e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003360:	601a      	str	r2, [r3, #0]
              ret = count;
 8003362:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003364:	647b      	str	r3, [r7, #68]	; 0x44
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8003366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003368:	3301      	adds	r3, #1
 800336a:	63bb      	str	r3, [r7, #56]	; 0x38
 800336c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800336e:	2bff      	cmp	r3, #255	; 0xff
 8003370:	d999      	bls.n	80032a6 <I2C_Compute_SCLL_SCLH+0x106>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8003372:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003374:	3301      	adds	r3, #1
 8003376:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003378:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800337a:	2bff      	cmp	r3, #255	; 0xff
 800337c:	f67f af6f 	bls.w	800325e <I2C_Compute_SCLL_SCLH+0xbe>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8003380:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003382:	3301      	adds	r3, #1
 8003384:	637b      	str	r3, [r7, #52]	; 0x34
 8003386:	4b09      	ldr	r3, [pc, #36]	; (80033ac <I2C_Compute_SCLL_SCLH+0x20c>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800338c:	429a      	cmp	r2, r3
 800338e:	f4ff af56 	bcc.w	800323e <I2C_Compute_SCLL_SCLH+0x9e>
        }
      }
    }
  }

  return ret;
 8003392:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8003394:	4618      	mov	r0, r3
 8003396:	374c      	adds	r7, #76	; 0x4c
 8003398:	46bd      	mov	sp, r7
 800339a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339e:	4770      	bx	lr
 80033a0:	3b9aca00 	.word	0x3b9aca00
 80033a4:	08020eac 	.word	0x08020eac
 80033a8:	2400178c 	.word	0x2400178c
 80033ac:	2400218c 	.word	0x2400218c

080033b0 <I2C1_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  hI2c  I2C handler
  * @retval None
  */
static void I2C1_MspInit(I2C_HandleTypeDef *hI2c)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b08a      	sub	sp, #40	; 0x28
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hI2c);

  /*** Configure the GPIOs ***/
  /* Enable SCL GPIO clock */
  BUS_I2C1_SCL_GPIO_CLK_ENABLE();
 80033b8:	4b30      	ldr	r3, [pc, #192]	; (800347c <I2C1_MspInit+0xcc>)
 80033ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033be:	4a2f      	ldr	r2, [pc, #188]	; (800347c <I2C1_MspInit+0xcc>)
 80033c0:	f043 0302 	orr.w	r3, r3, #2
 80033c4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80033c8:	4b2c      	ldr	r3, [pc, #176]	; (800347c <I2C1_MspInit+0xcc>)
 80033ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033ce:	f003 0302 	and.w	r3, r3, #2
 80033d2:	613b      	str	r3, [r7, #16]
 80033d4:	693b      	ldr	r3, [r7, #16]
  /* Enable SDA GPIO clock */
  BUS_I2C1_SDA_GPIO_CLK_ENABLE();
 80033d6:	4b29      	ldr	r3, [pc, #164]	; (800347c <I2C1_MspInit+0xcc>)
 80033d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033dc:	4a27      	ldr	r2, [pc, #156]	; (800347c <I2C1_MspInit+0xcc>)
 80033de:	f043 0302 	orr.w	r3, r3, #2
 80033e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80033e6:	4b25      	ldr	r3, [pc, #148]	; (800347c <I2C1_MspInit+0xcc>)
 80033e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033ec:	f003 0302 	and.w	r3, r3, #2
 80033f0:	60fb      	str	r3, [r7, #12]
 80033f2:	68fb      	ldr	r3, [r7, #12]

  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C1_SCL_PIN;
 80033f4:	2340      	movs	r3, #64	; 0x40
 80033f6:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 80033f8:	2312      	movs	r3, #18
 80033fa:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 80033fc:	2300      	movs	r3, #0
 80033fe:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8003400:	2302      	movs	r3, #2
 8003402:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C1_SCL_AF;
 8003404:	2304      	movs	r3, #4
 8003406:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &gpio_init_structure);
 8003408:	f107 0314 	add.w	r3, r7, #20
 800340c:	4619      	mov	r1, r3
 800340e:	481c      	ldr	r0, [pc, #112]	; (8003480 <I2C1_MspInit+0xd0>)
 8003410:	f003 fb0e 	bl	8006a30 <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin 		= BUS_I2C1_SDA_PIN;
 8003414:	2380      	movs	r3, #128	; 0x80
 8003416:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode 		= GPIO_MODE_AF_OD;
 8003418:	2312      	movs	r3, #18
 800341a:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull 		= GPIO_NOPULL;
 800341c:	2300      	movs	r3, #0
 800341e:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8003420:	2302      	movs	r3, #2
 8003422:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C1_SDA_AF;
 8003424:	2304      	movs	r3, #4
 8003426:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &gpio_init_structure);
 8003428:	f107 0314 	add.w	r3, r7, #20
 800342c:	4619      	mov	r1, r3
 800342e:	4814      	ldr	r0, [pc, #80]	; (8003480 <I2C1_MspInit+0xd0>)
 8003430:	f003 fafe 	bl	8006a30 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  BUS_I2C1_CLK_ENABLE();
 8003434:	4b11      	ldr	r3, [pc, #68]	; (800347c <I2C1_MspInit+0xcc>)
 8003436:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800343a:	4a10      	ldr	r2, [pc, #64]	; (800347c <I2C1_MspInit+0xcc>)
 800343c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003440:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003444:	4b0d      	ldr	r3, [pc, #52]	; (800347c <I2C1_MspInit+0xcc>)
 8003446:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800344a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800344e:	60bb      	str	r3, [r7, #8]
 8003450:	68bb      	ldr	r3, [r7, #8]

  /* Force the I2C peripheral clock reset */
  BUS_I2C1_FORCE_RESET();
 8003452:	4b0a      	ldr	r3, [pc, #40]	; (800347c <I2C1_MspInit+0xcc>)
 8003454:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003458:	4a08      	ldr	r2, [pc, #32]	; (800347c <I2C1_MspInit+0xcc>)
 800345a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800345e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /* Release the I2C peripheral clock reset */
  BUS_I2C1_RELEASE_RESET();
 8003462:	4b06      	ldr	r3, [pc, #24]	; (800347c <I2C1_MspInit+0xcc>)
 8003464:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003468:	4a04      	ldr	r2, [pc, #16]	; (800347c <I2C1_MspInit+0xcc>)
 800346a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800346e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003472:	bf00      	nop
 8003474:	3728      	adds	r7, #40	; 0x28
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}
 800347a:	bf00      	nop
 800347c:	58024400 	.word	0x58024400
 8003480:	58020400 	.word	0x58020400

08003484 <I2C1_ReadReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b088      	sub	sp, #32
 8003488:	af04      	add	r7, sp, #16
 800348a:	607b      	str	r3, [r7, #4]
 800348c:	4603      	mov	r3, r0
 800348e:	81fb      	strh	r3, [r7, #14]
 8003490:	460b      	mov	r3, r1
 8003492:	81bb      	strh	r3, [r7, #12]
 8003494:	4613      	mov	r3, r2
 8003496:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Read(&hbus_i2c1, DevAddr, Reg, MemAddSize, pData, Length, 10000) == HAL_OK)
 8003498:	8978      	ldrh	r0, [r7, #10]
 800349a:	89ba      	ldrh	r2, [r7, #12]
 800349c:	89f9      	ldrh	r1, [r7, #14]
 800349e:	f242 7310 	movw	r3, #10000	; 0x2710
 80034a2:	9302      	str	r3, [sp, #8]
 80034a4:	8b3b      	ldrh	r3, [r7, #24]
 80034a6:	9301      	str	r3, [sp, #4]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	9300      	str	r3, [sp, #0]
 80034ac:	4603      	mov	r3, r0
 80034ae:	4807      	ldr	r0, [pc, #28]	; (80034cc <I2C1_ReadReg+0x48>)
 80034b0:	f003 fe50 	bl	8007154 <HAL_I2C_Mem_Read>
 80034b4:	4603      	mov	r3, r0
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d101      	bne.n	80034be <I2C1_ReadReg+0x3a>
  {
    return BSP_ERROR_NONE;
 80034ba:	2300      	movs	r3, #0
 80034bc:	e001      	b.n	80034c2 <I2C1_ReadReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 80034be:	f06f 0307 	mvn.w	r3, #7
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3710      	adds	r7, #16
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}
 80034ca:	bf00      	nop
 80034cc:	24002190 	.word	0x24002190

080034d0 <BSP_LCD_Init>:
  * @param  Instance    LCD Instance
  * @param  Orientation LCD_ORIENTATION_LANDSCAPE
  * @retval BSP status
  */
int32_t BSP_LCD_Init(uint32_t Instance, uint32_t Orientation)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b084      	sub	sp, #16
 80034d4:	af02      	add	r7, sp, #8
 80034d6:	6078      	str	r0, [r7, #4]
 80034d8:	6039      	str	r1, [r7, #0]
  return BSP_LCD_InitEx(Instance, Orientation, LTDC_PIXEL_FORMAT_ARGB8888, LCD_DEFAULT_WIDTH, LCD_DEFAULT_HEIGHT);
 80034da:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80034de:	9300      	str	r3, [sp, #0]
 80034e0:	f44f 7320 	mov.w	r3, #640	; 0x280
 80034e4:	2200      	movs	r2, #0
 80034e6:	6839      	ldr	r1, [r7, #0]
 80034e8:	6878      	ldr	r0, [r7, #4]
 80034ea:	f000 f805 	bl	80034f8 <BSP_LCD_InitEx>
 80034ee:	4603      	mov	r3, r0
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	3708      	adds	r7, #8
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}

080034f8 <BSP_LCD_InitEx>:
  * @param  Width       Display width
  * @param  Height      Display height
  * @retval BSP status
  */
int32_t BSP_LCD_InitEx(uint32_t Instance, uint32_t Orientation, uint32_t PixelFormat, uint32_t Width, uint32_t Height)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b0ae      	sub	sp, #184	; 0xb8
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	60f8      	str	r0, [r7, #12]
 8003500:	60b9      	str	r1, [r7, #8]
 8003502:	607a      	str	r2, [r7, #4]
 8003504:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8003506:	2300      	movs	r3, #0
 8003508:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  EXC7200_Object_t ts_comp_obj_2;
  EXC7200_IO_t     io_comp_ctx_2 ;
#endif
  MX_LTDC_LayerConfig_t config;

  if((Orientation > LCD_ORIENTATION_LANDSCAPE) || (Instance >= LCD_INSTANCES_NBR))
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	2b01      	cmp	r3, #1
 8003510:	d802      	bhi.n	8003518 <BSP_LCD_InitEx+0x20>
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d004      	beq.n	8003522 <BSP_LCD_InitEx+0x2a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8003518:	f06f 0301 	mvn.w	r3, #1
 800351c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003520:	e0f9      	b.n	8003716 <BSP_LCD_InitEx+0x21e>
  }
  else
  {
    switch(PixelFormat)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2b02      	cmp	r3, #2
 8003526:	d106      	bne.n	8003536 <BSP_LCD_InitEx+0x3e>
    {
    case LCD_PIXEL_FORMAT_RGB565:
      ltdc_pixel_format = LTDC_PIXEL_FORMAT_RGB565;
 8003528:	2302      	movs	r3, #2
 800352a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      PixelFormatFactor = 2U;
 800352e:	4b7d      	ldr	r3, [pc, #500]	; (8003724 <BSP_LCD_InitEx+0x22c>)
 8003530:	2202      	movs	r2, #2
 8003532:	601a      	str	r2, [r3, #0]
      break;
 8003534:	e006      	b.n	8003544 <BSP_LCD_InitEx+0x4c>
    case LCD_PIXEL_FORMAT_RGB888:
    default:
      ltdc_pixel_format = LTDC_PIXEL_FORMAT_ARGB8888;
 8003536:	2300      	movs	r3, #0
 8003538:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      PixelFormatFactor = 4U;
 800353c:	4b79      	ldr	r3, [pc, #484]	; (8003724 <BSP_LCD_InitEx+0x22c>)
 800353e:	2204      	movs	r2, #4
 8003540:	601a      	str	r2, [r3, #0]
      break;
 8003542:	bf00      	nop
    }

    /* Store pixel format, xsize and ysize information */
    Lcd_Ctx[Instance].PixelFormat = PixelFormat;
 8003544:	4978      	ldr	r1, [pc, #480]	; (8003728 <BSP_LCD_InitEx+0x230>)
 8003546:	68fa      	ldr	r2, [r7, #12]
 8003548:	4613      	mov	r3, r2
 800354a:	005b      	lsls	r3, r3, #1
 800354c:	4413      	add	r3, r2
 800354e:	00db      	lsls	r3, r3, #3
 8003550:	440b      	add	r3, r1
 8003552:	330c      	adds	r3, #12
 8003554:	687a      	ldr	r2, [r7, #4]
 8003556:	601a      	str	r2, [r3, #0]
    Lcd_Ctx[Instance].XSize  = Width;
 8003558:	4973      	ldr	r1, [pc, #460]	; (8003728 <BSP_LCD_InitEx+0x230>)
 800355a:	68fa      	ldr	r2, [r7, #12]
 800355c:	4613      	mov	r3, r2
 800355e:	005b      	lsls	r3, r3, #1
 8003560:	4413      	add	r3, r2
 8003562:	00db      	lsls	r3, r3, #3
 8003564:	440b      	add	r3, r1
 8003566:	683a      	ldr	r2, [r7, #0]
 8003568:	601a      	str	r2, [r3, #0]
    Lcd_Ctx[Instance].YSize  = Height;
 800356a:	496f      	ldr	r1, [pc, #444]	; (8003728 <BSP_LCD_InitEx+0x230>)
 800356c:	68fa      	ldr	r2, [r7, #12]
 800356e:	4613      	mov	r3, r2
 8003570:	005b      	lsls	r3, r3, #1
 8003572:	4413      	add	r3, r2
 8003574:	00db      	lsls	r3, r3, #3
 8003576:	440b      	add	r3, r1
 8003578:	3304      	adds	r3, #4
 800357a:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800357e:	601a      	str	r2, [r3, #0]

    /* Toggle Hardware Reset of the LCD using its XRES signal (active low) */
    BSP_LCD_Reset(Instance);
 8003580:	68f8      	ldr	r0, [r7, #12]
 8003582:	f000 f8df 	bl	8003744 <BSP_LCD_Reset>

    /* Initialize LCD special pins GPIOs */
    LCD_InitSequence();
 8003586:	f000 f917 	bl	80037b8 <LCD_InitSequence>

    /* Initializes peripherals instance value */
    hlcd_ltdc.Instance = LTDC;
 800358a:	4b68      	ldr	r3, [pc, #416]	; (800372c <BSP_LCD_InitEx+0x234>)
 800358c:	4a68      	ldr	r2, [pc, #416]	; (8003730 <BSP_LCD_InitEx+0x238>)
 800358e:	601a      	str	r2, [r3, #0]
    hlcd_dma2d.Instance = DMA2D;
 8003590:	4b68      	ldr	r3, [pc, #416]	; (8003734 <BSP_LCD_InitEx+0x23c>)
 8003592:	4a69      	ldr	r2, [pc, #420]	; (8003738 <BSP_LCD_InitEx+0x240>)
 8003594:	601a      	str	r2, [r3, #0]
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
      }
    }
#else
    LTDC_MspInit(&hlcd_ltdc);
 8003596:	4865      	ldr	r0, [pc, #404]	; (800372c <BSP_LCD_InitEx+0x234>)
 8003598:	f000 fe2c 	bl	80041f4 <LTDC_MspInit>
#endif

    if(ret == BSP_ERROR_NONE)
 800359c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	f040 80b8 	bne.w	8003716 <BSP_LCD_InitEx+0x21e>
    {
      DMA2D_MspInit(&hlcd_dma2d);
 80035a6:	4863      	ldr	r0, [pc, #396]	; (8003734 <BSP_LCD_InitEx+0x23c>)
 80035a8:	f000 feae 	bl	8004308 <DMA2D_MspInit>
#if (USE_EXC7200_TS_CTRL == 1)
      io_comp_ctx_2.Init    = BSP_I2C1_Init;
 80035ac:	4b63      	ldr	r3, [pc, #396]	; (800373c <BSP_LCD_InitEx+0x244>)
 80035ae:	62bb      	str	r3, [r7, #40]	; 0x28
      io_comp_ctx_2.ReadReg = BSP_I2C1_ReadReg;
 80035b0:	4b63      	ldr	r3, [pc, #396]	; (8003740 <BSP_LCD_InitEx+0x248>)
 80035b2:	63bb      	str	r3, [r7, #56]	; 0x38
      io_comp_ctx_2.Address = TS_EXC7200_I2C_ADDRESS;
 80035b4:	2308      	movs	r3, #8
 80035b6:	863b      	strh	r3, [r7, #48]	; 0x30
      if(EXC7200_RegisterBusIO(&ts_comp_obj_2, &io_comp_ctx_2) < 0)
 80035b8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80035bc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80035c0:	4611      	mov	r1, r2
 80035c2:	4618      	mov	r0, r3
 80035c4:	f7ff f942 	bl	800284c <EXC7200_RegisterBusIO>
 80035c8:	4603      	mov	r3, r0
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	da04      	bge.n	80035d8 <BSP_LCD_InitEx+0xe0>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80035ce:	f06f 0304 	mvn.w	r3, #4
 80035d2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80035d6:	e017      	b.n	8003608 <BSP_LCD_InitEx+0x110>
      }
      else if(EXC7200_ReadID(&ts_comp_obj_2, &exc7200_id) < 0)
 80035d8:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80035dc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80035e0:	4611      	mov	r1, r2
 80035e2:	4618      	mov	r0, r3
 80035e4:	f7ff f974 	bl	80028d0 <EXC7200_ReadID>
 80035e8:	4603      	mov	r3, r0
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	da04      	bge.n	80035f8 <BSP_LCD_InitEx+0x100>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80035ee:	f06f 0304 	mvn.w	r3, #4
 80035f2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80035f6:	e007      	b.n	8003608 <BSP_LCD_InitEx+0x110>
      }
      else
      {
        if(exc7200_id != EXC7200_ID)
 80035f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80035fa:	f5b3 4fe4 	cmp.w	r3, #29184	; 0x7200
 80035fe:	d003      	beq.n	8003608 <BSP_LCD_InitEx+0x110>
        {
          ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8003600:	f06f 0306 	mvn.w	r3, #6
 8003604:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
        }
      }
#endif
#if (USE_TS3510_TS_CTRL == 1)
      if(ret != BSP_ERROR_NONE)
 8003608:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800360c:	2b00      	cmp	r3, #0
 800360e:	d030      	beq.n	8003672 <BSP_LCD_InitEx+0x17a>
      {
        io_comp_ctx.Init    = BSP_I2C1_Init;
 8003610:	4b4a      	ldr	r3, [pc, #296]	; (800373c <BSP_LCD_InitEx+0x244>)
 8003612:	66fb      	str	r3, [r7, #108]	; 0x6c
        io_comp_ctx.ReadReg = BSP_I2C1_ReadReg;
 8003614:	4b4a      	ldr	r3, [pc, #296]	; (8003740 <BSP_LCD_InitEx+0x248>)
 8003616:	67fb      	str	r3, [r7, #124]	; 0x7c
        io_comp_ctx.Address = TS_TS3510_I2C_ADDRESS;
 8003618:	2380      	movs	r3, #128	; 0x80
 800361a:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
        if(TS3510_RegisterBusIO(&ts_comp_obj, &io_comp_ctx) < 0)
 800361e:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8003622:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8003626:	4611      	mov	r1, r2
 8003628:	4618      	mov	r0, r3
 800362a:	f7ff fac7 	bl	8002bbc <TS3510_RegisterBusIO>
 800362e:	4603      	mov	r3, r0
 8003630:	2b00      	cmp	r3, #0
 8003632:	da04      	bge.n	800363e <BSP_LCD_InitEx+0x146>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 8003634:	f06f 0304 	mvn.w	r3, #4
 8003638:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800363c:	e019      	b.n	8003672 <BSP_LCD_InitEx+0x17a>
        }
        else if(TS3510_ReadID(&ts_comp_obj, &ts3510_id) < 0)
 800363e:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8003642:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8003646:	4611      	mov	r1, r2
 8003648:	4618      	mov	r0, r3
 800364a:	f7ff faf9 	bl	8002c40 <TS3510_ReadID>
 800364e:	4603      	mov	r3, r0
 8003650:	2b00      	cmp	r3, #0
 8003652:	da04      	bge.n	800365e <BSP_LCD_InitEx+0x166>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 8003654:	f06f 0304 	mvn.w	r3, #4
 8003658:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800365c:	e009      	b.n	8003672 <BSP_LCD_InitEx+0x17a>
        }
        else
        {
          if(ts3510_id != TS3510_ID)
 800365e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003662:	f243 5210 	movw	r2, #13584	; 0x3510
 8003666:	4293      	cmp	r3, r2
 8003668:	d003      	beq.n	8003672 <BSP_LCD_InitEx+0x17a>
          {
            ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800366a:	f06f 0306 	mvn.w	r3, #6
 800366e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
          }
        }
      }
#endif
      if(ret == BSP_ERROR_NONE)
 8003672:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003676:	2b00      	cmp	r3, #0
 8003678:	d14d      	bne.n	8003716 <BSP_LCD_InitEx+0x21e>
      {
        if(MX_LTDC_ClockConfig(&hlcd_ltdc) != HAL_OK)
 800367a:	482c      	ldr	r0, [pc, #176]	; (800372c <BSP_LCD_InitEx+0x234>)
 800367c:	f000 f974 	bl	8003968 <MX_LTDC_ClockConfig>
 8003680:	4603      	mov	r3, r0
 8003682:	2b00      	cmp	r3, #0
 8003684:	d004      	beq.n	8003690 <BSP_LCD_InitEx+0x198>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 8003686:	f06f 0303 	mvn.w	r3, #3
 800368a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800368e:	e042      	b.n	8003716 <BSP_LCD_InitEx+0x21e>
        }
        else if(MX_LTDC_Init(&hlcd_ltdc, Width, Height) != HAL_OK)
 8003690:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003694:	6839      	ldr	r1, [r7, #0]
 8003696:	4825      	ldr	r0, [pc, #148]	; (800372c <BSP_LCD_InitEx+0x234>)
 8003698:	f000 f8dc 	bl	8003854 <MX_LTDC_Init>
 800369c:	4603      	mov	r3, r0
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d004      	beq.n	80036ac <BSP_LCD_InitEx+0x1b4>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 80036a2:	f06f 0303 	mvn.w	r3, #3
 80036a6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80036aa:	e034      	b.n	8003716 <BSP_LCD_InitEx+0x21e>
        {
          /* Before configuring LTDC layer, ensure SDRAM is initialized */
#if !defined(DATA_IN_ExtSDRAM)

          /* Initialize the SDRAM */
          if(BSP_SDRAM_Init(0) != BSP_ERROR_NONE)
 80036ac:	2000      	movs	r0, #0
 80036ae:	f000 fe59 	bl	8004364 <BSP_SDRAM_Init>
 80036b2:	4603      	mov	r3, r0
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d003      	beq.n	80036c0 <BSP_LCD_InitEx+0x1c8>
          {
            ret = BSP_ERROR_PERIPH_FAILURE;
 80036b8:	f06f 0303 	mvn.w	r3, #3
 80036bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
          }
#endif /* DATA_IN_ExtSDRAM */
          if(ret == BSP_ERROR_NONE)
 80036c0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d126      	bne.n	8003716 <BSP_LCD_InitEx+0x21e>
          {
            /* Configure default LTDC Layer 0. This configuration can be override by calling
            BSP_LCD_ConfigLayer() at application level */
            config.X0          = 0;
 80036c8:	2300      	movs	r3, #0
 80036ca:	613b      	str	r3, [r7, #16]
            config.X1          = Width;
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	617b      	str	r3, [r7, #20]
            config.Y0          = 0;
 80036d0:	2300      	movs	r3, #0
 80036d2:	61bb      	str	r3, [r7, #24]
            config.Y1          = Height;
 80036d4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80036d8:	61fb      	str	r3, [r7, #28]
            config.PixelFormat = ltdc_pixel_format;
 80036da:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80036de:	623b      	str	r3, [r7, #32]
            config.Address     = LCD_FB_START_ADDRESS;
 80036e0:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 80036e4:	627b      	str	r3, [r7, #36]	; 0x24
            if(MX_LTDC_ConfigLayer(&hlcd_ltdc, 0, &config) != HAL_OK)
 80036e6:	f107 0310 	add.w	r3, r7, #16
 80036ea:	461a      	mov	r2, r3
 80036ec:	2100      	movs	r1, #0
 80036ee:	480f      	ldr	r0, [pc, #60]	; (800372c <BSP_LCD_InitEx+0x234>)
 80036f0:	f000 f8f8 	bl	80038e4 <MX_LTDC_ConfigLayer>
 80036f4:	4603      	mov	r3, r0
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d003      	beq.n	8003702 <BSP_LCD_InitEx+0x20a>
            {
              ret = BSP_ERROR_PERIPH_FAILURE;
 80036fa:	f06f 0303 	mvn.w	r3, #3
 80036fe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
            }
            /* By default the reload is activated and executed immediately */
            Lcd_Ctx[Instance].ReloadEnable = 1U;
 8003702:	4909      	ldr	r1, [pc, #36]	; (8003728 <BSP_LCD_InitEx+0x230>)
 8003704:	68fa      	ldr	r2, [r7, #12]
 8003706:	4613      	mov	r3, r2
 8003708:	005b      	lsls	r3, r3, #1
 800370a:	4413      	add	r3, r2
 800370c:	00db      	lsls	r3, r3, #3
 800370e:	440b      	add	r3, r1
 8003710:	3314      	adds	r3, #20
 8003712:	2201      	movs	r2, #1
 8003714:	601a      	str	r2, [r3, #0]
        }
      }
    }
  }

  return ret;
 8003716:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
}
 800371a:	4618      	mov	r0, r3
 800371c:	37b8      	adds	r7, #184	; 0xb8
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}
 8003722:	bf00      	nop
 8003724:	240021e4 	.word	0x240021e4
 8003728:	240022f8 	.word	0x240022f8
 800372c:	24002250 	.word	0x24002250
 8003730:	50001000 	.word	0x50001000
 8003734:	240021e8 	.word	0x240021e8
 8003738:	52001000 	.word	0x52001000
 800373c:	08002d6d 	.word	0x08002d6d
 8003740:	08002e69 	.word	0x08002e69

08003744 <BSP_LCD_Reset>:
  *         Hw reset the LCD DSI activating its XRES signal (active low for some time)
  *         and deactivating it later.
  * @param  Instance LCD Instance
  */
void BSP_LCD_Reset(uint32_t Instance)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b088      	sub	sp, #32
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  LCD_RESET_GPIO_CLK_ENABLE();
 800374c:	4b18      	ldr	r3, [pc, #96]	; (80037b0 <BSP_LCD_Reset+0x6c>)
 800374e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003752:	4a17      	ldr	r2, [pc, #92]	; (80037b0 <BSP_LCD_Reset+0x6c>)
 8003754:	f043 0301 	orr.w	r3, r3, #1
 8003758:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800375c:	4b14      	ldr	r3, [pc, #80]	; (80037b0 <BSP_LCD_Reset+0x6c>)
 800375e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003762:	f003 0301 	and.w	r3, r3, #1
 8003766:	60bb      	str	r3, [r7, #8]
 8003768:	68bb      	ldr	r3, [r7, #8]

  /* Configure the GPIO Reset pin */
  gpio_init_structure.Pin   = LCD_RESET_PIN;
 800376a:	2304      	movs	r3, #4
 800376c:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 800376e:	2301      	movs	r3, #1
 8003770:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull  = LCD_RESET_PULL;
 8003772:	2300      	movs	r3, #0
 8003774:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003776:	2303      	movs	r3, #3
 8003778:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LCD_RESET_GPIO_PORT , &gpio_init_structure);
 800377a:	f107 030c 	add.w	r3, r7, #12
 800377e:	4619      	mov	r1, r3
 8003780:	480c      	ldr	r0, [pc, #48]	; (80037b4 <BSP_LCD_Reset+0x70>)
 8003782:	f003 f955 	bl	8006a30 <HAL_GPIO_Init>

  /* Activate XRES active low */
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT , LCD_RESET_PIN, GPIO_PIN_RESET);
 8003786:	2200      	movs	r2, #0
 8003788:	2104      	movs	r1, #4
 800378a:	480a      	ldr	r0, [pc, #40]	; (80037b4 <BSP_LCD_Reset+0x70>)
 800378c:	f003 fc0a 	bl	8006fa4 <HAL_GPIO_WritePin>
  HAL_Delay(20);/* wait 20 ms */
 8003790:	2014      	movs	r0, #20
 8003792:	f000 fffd 	bl	8004790 <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT , LCD_RESET_PIN, GPIO_PIN_SET);/* Deactivate XRES */
 8003796:	2201      	movs	r2, #1
 8003798:	2104      	movs	r1, #4
 800379a:	4806      	ldr	r0, [pc, #24]	; (80037b4 <BSP_LCD_Reset+0x70>)
 800379c:	f003 fc02 	bl	8006fa4 <HAL_GPIO_WritePin>
  HAL_Delay(10);/* Wait for 10ms after releasing XRES before sending commands */
 80037a0:	200a      	movs	r0, #10
 80037a2:	f000 fff5 	bl	8004790 <HAL_Delay>
}
 80037a6:	bf00      	nop
 80037a8:	3720      	adds	r7, #32
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}
 80037ae:	bf00      	nop
 80037b0:	58024400 	.word	0x58024400
 80037b4:	58020000 	.word	0x58020000

080037b8 <LCD_InitSequence>:
/**
  * @brief  Configure LCD control pins (Back-light, Display Enable and TE)
  * @retval None
  */
static void LCD_InitSequence(void)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b088      	sub	sp, #32
 80037bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure;
  /* LCD_DISP GPIO configuration */
  LCD_DISP_EN_GPIO_CLK_ENABLE();
 80037be:	4b22      	ldr	r3, [pc, #136]	; (8003848 <LCD_InitSequence+0x90>)
 80037c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80037c4:	4a20      	ldr	r2, [pc, #128]	; (8003848 <LCD_InitSequence+0x90>)
 80037c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80037ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80037ce:	4b1e      	ldr	r3, [pc, #120]	; (8003848 <LCD_InitSequence+0x90>)
 80037d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80037d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037d8:	60bb      	str	r3, [r7, #8]
 80037da:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin       = LCD_DISP_EN_PIN;
 80037dc:	2380      	movs	r3, #128	; 0x80
 80037de:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80037e0:	2301      	movs	r3, #1
 80037e2:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 80037e4:	2302      	movs	r3, #2
 80037e6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LCD_DISP_EN_GPIO_PORT, &gpio_init_structure);
 80037e8:	f107 030c 	add.w	r3, r7, #12
 80037ec:	4619      	mov	r1, r3
 80037ee:	4817      	ldr	r0, [pc, #92]	; (800384c <LCD_InitSequence+0x94>)
 80037f0:	f003 f91e 	bl	8006a30 <HAL_GPIO_Init>
  /* Assert LCD_DISP  pin */
  HAL_GPIO_WritePin(LCD_DISP_EN_GPIO_PORT, LCD_DISP_EN_PIN, GPIO_PIN_SET);
 80037f4:	2201      	movs	r2, #1
 80037f6:	2180      	movs	r1, #128	; 0x80
 80037f8:	4814      	ldr	r0, [pc, #80]	; (800384c <LCD_InitSequence+0x94>)
 80037fa:	f003 fbd3 	bl	8006fa4 <HAL_GPIO_WritePin>

  /* LCD_BL_CTRL GPIO configuration */
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 80037fe:	4b12      	ldr	r3, [pc, #72]	; (8003848 <LCD_InitSequence+0x90>)
 8003800:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003804:	4a10      	ldr	r2, [pc, #64]	; (8003848 <LCD_InitSequence+0x90>)
 8003806:	f043 0301 	orr.w	r3, r3, #1
 800380a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800380e:	4b0e      	ldr	r3, [pc, #56]	; (8003848 <LCD_InitSequence+0x90>)
 8003810:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003814:	f003 0301 	and.w	r3, r3, #1
 8003818:	607b      	str	r3, [r7, #4]
 800381a:	687b      	ldr	r3, [r7, #4]

  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;
 800381c:	2340      	movs	r3, #64	; 0x40
 800381e:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8003820:	2301      	movs	r3, #1
 8003822:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8003824:	2302      	movs	r3, #2
 8003826:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8003828:	f107 030c 	add.w	r3, r7, #12
 800382c:	4619      	mov	r1, r3
 800382e:	4808      	ldr	r0, [pc, #32]	; (8003850 <LCD_InitSequence+0x98>)
 8003830:	f003 f8fe 	bl	8006a30 <HAL_GPIO_Init>
  /* Assert back-light LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8003834:	2201      	movs	r2, #1
 8003836:	2140      	movs	r1, #64	; 0x40
 8003838:	4805      	ldr	r0, [pc, #20]	; (8003850 <LCD_InitSequence+0x98>)
 800383a:	f003 fbb3 	bl	8006fa4 <HAL_GPIO_WritePin>
}
 800383e:	bf00      	nop
 8003840:	3720      	adds	r7, #32
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}
 8003846:	bf00      	nop
 8003848:	58024400 	.word	0x58024400
 800384c:	58022800 	.word	0x58022800
 8003850:	58020000 	.word	0x58020000

08003854 <MX_LTDC_Init>:
  * @param  Width  LTDC width
  * @param  Height LTDC height
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_LTDC_Init(LTDC_HandleTypeDef *hltdc, uint32_t Width, uint32_t Height)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b084      	sub	sp, #16
 8003858:	af00      	add	r7, sp, #0
 800385a:	60f8      	str	r0, [r7, #12]
 800385c:	60b9      	str	r1, [r7, #8]
 800385e:	607a      	str	r2, [r7, #4]
  hltdc->Instance                = LTDC;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	4a1f      	ldr	r2, [pc, #124]	; (80038e0 <MX_LTDC_Init+0x8c>)
 8003864:	601a      	str	r2, [r3, #0]
  hltdc->Init.HSPolarity         = LTDC_HSPOLARITY_AL;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2200      	movs	r2, #0
 800386a:	605a      	str	r2, [r3, #4]
  hltdc->Init.VSPolarity         = LTDC_VSPOLARITY_AL;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2200      	movs	r2, #0
 8003870:	609a      	str	r2, [r3, #8]
  hltdc->Init.DEPolarity         = LTDC_DEPOLARITY_AL;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2200      	movs	r2, #0
 8003876:	60da      	str	r2, [r3, #12]
  hltdc->Init.PCPolarity         = LTDC_PCPOLARITY_IPC;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2200      	movs	r2, #0
 800387c:	611a      	str	r2, [r3, #16]
  hltdc->Init.HorizontalSync     = (AMPIRE640480_HSYNC - 1);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	221d      	movs	r2, #29
 8003882:	615a      	str	r2, [r3, #20]
  hltdc->Init.VerticalSync       = (AMPIRE640480_VSYNC - 1);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2202      	movs	r2, #2
 8003888:	619a      	str	r2, [r3, #24]
  hltdc->Init.AccumulatedHBP     = (AMPIRE640480_HSYNC + AMPIRE640480_HBP - 1);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	228f      	movs	r2, #143	; 0x8f
 800388e:	61da      	str	r2, [r3, #28]
  hltdc->Init.AccumulatedVBP     = (AMPIRE640480_VSYNC + AMPIRE640480_VBP - 1);
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2222      	movs	r2, #34	; 0x22
 8003894:	621a      	str	r2, [r3, #32]
  hltdc->Init.AccumulatedActiveH = (AMPIRE640480_HEIGHT + AMPIRE640480_VSYNC + AMPIRE640480_VBP - 1);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	f240 2202 	movw	r2, #514	; 0x202
 800389c:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc->Init.AccumulatedActiveW = (AMPIRE640480_WIDTH + AMPIRE640480_HSYNC + AMPIRE640480_HBP - 1);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	f240 320f 	movw	r2, #783	; 0x30f
 80038a4:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc->Init.TotalHeigh         = (AMPIRE640480_HEIGHT + AMPIRE640480_VSYNC + AMPIRE640480_VBP + AMPIRE640480_VFP - 1);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	f44f 7203 	mov.w	r2, #524	; 0x20c
 80038ac:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc->Init.TotalWidth         = (AMPIRE640480_WIDTH + AMPIRE640480_HSYNC + AMPIRE640480_HBP + AMPIRE640480_HFP - 1);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	f240 321f 	movw	r2, #799	; 0x31f
 80038b4:	62da      	str	r2, [r3, #44]	; 0x2c

  hltdc->Init.Backcolor.Blue  = 0xFF;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	22ff      	movs	r2, #255	; 0xff
 80038ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc->Init.Backcolor.Green = 0xFF;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	22ff      	movs	r2, #255	; 0xff
 80038c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc->Init.Backcolor.Red   = 0xFF;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	22ff      	movs	r2, #255	; 0xff
 80038ca:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  return HAL_LTDC_Init(hltdc);
 80038ce:	68f8      	ldr	r0, [r7, #12]
 80038d0:	f004 f870 	bl	80079b4 <HAL_LTDC_Init>
 80038d4:	4603      	mov	r3, r0
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	3710      	adds	r7, #16
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}
 80038de:	bf00      	nop
 80038e0:	50001000 	.word	0x50001000

080038e4 <MX_LTDC_ConfigLayer>:
  * @param  LayerIndex Layer 0 or 1
  * @param  Config     Layer configuration
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, uint32_t LayerIndex, MX_LTDC_LayerConfig_t *Config)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b092      	sub	sp, #72	; 0x48
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	60f8      	str	r0, [r7, #12]
 80038ec:	60b9      	str	r1, [r7, #8]
 80038ee:	607a      	str	r2, [r7, #4]
  LTDC_LayerCfgTypeDef pLayerCfg;

  pLayerCfg.WindowX0 = Config->X0;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	617b      	str	r3, [r7, #20]
  pLayerCfg.WindowX1 = Config->X1;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	61bb      	str	r3, [r7, #24]
  pLayerCfg.WindowY0 = Config->Y0;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	61fb      	str	r3, [r7, #28]
  pLayerCfg.WindowY1 = Config->Y1;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	68db      	ldr	r3, [r3, #12]
 8003906:	623b      	str	r3, [r7, #32]
  pLayerCfg.PixelFormat = Config->PixelFormat;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	691b      	ldr	r3, [r3, #16]
 800390c:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.Alpha = 255;
 800390e:	23ff      	movs	r3, #255	; 0xff
 8003910:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.Alpha0 = 0;
 8003912:	2300      	movs	r3, #0
 8003914:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8003916:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800391a:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800391c:	2307      	movs	r3, #7
 800391e:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.FBStartAdress = Config->Address;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	695b      	ldr	r3, [r3, #20]
 8003924:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.ImageWidth = (Config->X1 - Config->X0);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	685a      	ldr	r2, [r3, #4]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	1ad3      	subs	r3, r2, r3
 8003930:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.ImageHeight = (Config->Y1 - Config->Y0);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	68da      	ldr	r2, [r3, #12]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	1ad3      	subs	r3, r2, r3
 800393c:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.Backcolor.Blue = 0;
 800393e:	2300      	movs	r3, #0
 8003940:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  pLayerCfg.Backcolor.Green = 0;
 8003944:	2300      	movs	r3, #0
 8003946:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  pLayerCfg.Backcolor.Red = 0;
 800394a:	2300      	movs	r3, #0
 800394c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  return HAL_LTDC_ConfigLayer(hltdc, &pLayerCfg, LayerIndex);
 8003950:	f107 0314 	add.w	r3, r7, #20
 8003954:	68ba      	ldr	r2, [r7, #8]
 8003956:	4619      	mov	r1, r3
 8003958:	68f8      	ldr	r0, [r7, #12]
 800395a:	f004 f905 	bl	8007b68 <HAL_LTDC_ConfigLayer>
 800395e:	4603      	mov	r3, r0
}
 8003960:	4618      	mov	r0, r3
 8003962:	3748      	adds	r7, #72	; 0x48
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}

08003968 <MX_LTDC_ClockConfig>:
  * @param  hltdc  LTDC Handle
  *         Being __weak it can be overwritten by the application
  * @retval HAL_status
  */
__weak HAL_StatusTypeDef MX_LTDC_ClockConfig(LTDC_HandleTypeDef *hltdc)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b0b2      	sub	sp, #200	; 0xc8
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef  PeriphClkInitStruct;

  PeriphClkInitStruct.PeriphClockSelection   = RCC_PERIPHCLK_LTDC;
 8003970:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003974:	f04f 0300 	mov.w	r3, #0
 8003978:	e9c7 2302 	strd	r2, r3, [r7, #8]
  PeriphClkInitStruct.PLL3.PLL3M = 5;
 800397c:	2305      	movs	r3, #5
 800397e:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3N = 160;
 8003980:	23a0      	movs	r3, #160	; 0xa0
 8003982:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 8003984:	2302      	movs	r3, #2
 8003986:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8003988:	2302      	movs	r3, #2
 800398a:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.PLL3.PLL3R = 32;
 800398c:	2320      	movs	r3, #32
 800398e:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = 0;
 8003990:	2300      	movs	r3, #0
 8003992:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8003994:	2300      	movs	r3, #0
 8003996:	64fb      	str	r3, [r7, #76]	; 0x4c

  return HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8003998:	f107 0308 	add.w	r3, r7, #8
 800399c:	4618      	mov	r0, r3
 800399e:	f005 fc59 	bl	8009254 <HAL_RCCEx_PeriphCLKConfig>
 80039a2:	4603      	mov	r3, r0
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	37c8      	adds	r7, #200	; 0xc8
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}

080039ac <BSP_LCD_GetPixelFormat>:
  * @param  Instance    LCD Instance
  * @param  PixelFormat Active LCD Pixel Format
  * @retval BSP status
  */
int32_t BSP_LCD_GetPixelFormat(uint32_t Instance, uint32_t *PixelFormat)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b085      	sub	sp, #20
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
 80039b4:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 80039b6:	2300      	movs	r3, #0
 80039b8:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d003      	beq.n	80039c8 <BSP_LCD_GetPixelFormat+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80039c0:	f06f 0301 	mvn.w	r3, #1
 80039c4:	60fb      	str	r3, [r7, #12]
 80039c6:	e00a      	b.n	80039de <BSP_LCD_GetPixelFormat+0x32>
  }
  else
  {
    /* Only RGB565 format is supported */
    *PixelFormat = Lcd_Ctx[Instance].PixelFormat;
 80039c8:	4908      	ldr	r1, [pc, #32]	; (80039ec <BSP_LCD_GetPixelFormat+0x40>)
 80039ca:	687a      	ldr	r2, [r7, #4]
 80039cc:	4613      	mov	r3, r2
 80039ce:	005b      	lsls	r3, r3, #1
 80039d0:	4413      	add	r3, r2
 80039d2:	00db      	lsls	r3, r3, #3
 80039d4:	440b      	add	r3, r1
 80039d6:	330c      	adds	r3, #12
 80039d8:	681a      	ldr	r2, [r3, #0]
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	601a      	str	r2, [r3, #0]
  }

  return ret;
 80039de:	68fb      	ldr	r3, [r7, #12]
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	3714      	adds	r7, #20
 80039e4:	46bd      	mov	sp, r7
 80039e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ea:	4770      	bx	lr
 80039ec:	240022f8 	.word	0x240022f8

080039f0 <BSP_LCD_SetActiveLayer>:
  * @param  Instance    LCD Instance
  * @param  LayerIndex  LCD layer index
  * @retval BSP status
  */
int32_t BSP_LCD_SetActiveLayer(uint32_t Instance, uint32_t LayerIndex)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b085      	sub	sp, #20
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
 80039f8:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 80039fa:	2300      	movs	r3, #0
 80039fc:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d003      	beq.n	8003a0c <BSP_LCD_SetActiveLayer+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8003a04:	f06f 0301 	mvn.w	r3, #1
 8003a08:	60fb      	str	r3, [r7, #12]
 8003a0a:	e009      	b.n	8003a20 <BSP_LCD_SetActiveLayer+0x30>
  }
  else
  {
    Lcd_Ctx[Instance].ActiveLayer = LayerIndex;
 8003a0c:	4908      	ldr	r1, [pc, #32]	; (8003a30 <BSP_LCD_SetActiveLayer+0x40>)
 8003a0e:	687a      	ldr	r2, [r7, #4]
 8003a10:	4613      	mov	r3, r2
 8003a12:	005b      	lsls	r3, r3, #1
 8003a14:	4413      	add	r3, r2
 8003a16:	00db      	lsls	r3, r3, #3
 8003a18:	440b      	add	r3, r1
 8003a1a:	3308      	adds	r3, #8
 8003a1c:	683a      	ldr	r2, [r7, #0]
 8003a1e:	601a      	str	r2, [r3, #0]
  }

  return ret;
 8003a20:	68fb      	ldr	r3, [r7, #12]
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3714      	adds	r7, #20
 8003a26:	46bd      	mov	sp, r7
 8003a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2c:	4770      	bx	lr
 8003a2e:	bf00      	nop
 8003a30:	240022f8 	.word	0x240022f8

08003a34 <BSP_LCD_GetXSize>:
  * @param  Instance  LCD Instance
  * @param  XSize     LCD width
  * @retval BSP status
  */
int32_t BSP_LCD_GetXSize(uint32_t Instance, uint32_t *XSize)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b085      	sub	sp, #20
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
 8003a3c:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d003      	beq.n	8003a50 <BSP_LCD_GetXSize+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8003a48:	f06f 0301 	mvn.w	r3, #1
 8003a4c:	60fb      	str	r3, [r7, #12]
 8003a4e:	e009      	b.n	8003a64 <BSP_LCD_GetXSize+0x30>
  }
  else
  {
    *XSize = Lcd_Ctx[Instance].XSize;
 8003a50:	4908      	ldr	r1, [pc, #32]	; (8003a74 <BSP_LCD_GetXSize+0x40>)
 8003a52:	687a      	ldr	r2, [r7, #4]
 8003a54:	4613      	mov	r3, r2
 8003a56:	005b      	lsls	r3, r3, #1
 8003a58:	4413      	add	r3, r2
 8003a5a:	00db      	lsls	r3, r3, #3
 8003a5c:	440b      	add	r3, r1
 8003a5e:	681a      	ldr	r2, [r3, #0]
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	601a      	str	r2, [r3, #0]
  }

  return ret;
 8003a64:	68fb      	ldr	r3, [r7, #12]
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	3714      	adds	r7, #20
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a70:	4770      	bx	lr
 8003a72:	bf00      	nop
 8003a74:	240022f8 	.word	0x240022f8

08003a78 <BSP_LCD_GetYSize>:
  * @param  Instance  LCD Instance
  * @param  YSize     LCD Height
  * @retval BSP status
  */
int32_t BSP_LCD_GetYSize(uint32_t Instance, uint32_t *YSize)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b085      	sub	sp, #20
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
 8003a80:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8003a82:	2300      	movs	r3, #0
 8003a84:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d003      	beq.n	8003a94 <BSP_LCD_GetYSize+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8003a8c:	f06f 0301 	mvn.w	r3, #1
 8003a90:	60fb      	str	r3, [r7, #12]
 8003a92:	e00a      	b.n	8003aaa <BSP_LCD_GetYSize+0x32>
  }
  else
  {
    *YSize = Lcd_Ctx[Instance].YSize;
 8003a94:	4908      	ldr	r1, [pc, #32]	; (8003ab8 <BSP_LCD_GetYSize+0x40>)
 8003a96:	687a      	ldr	r2, [r7, #4]
 8003a98:	4613      	mov	r3, r2
 8003a9a:	005b      	lsls	r3, r3, #1
 8003a9c:	4413      	add	r3, r2
 8003a9e:	00db      	lsls	r3, r3, #3
 8003aa0:	440b      	add	r3, r1
 8003aa2:	3304      	adds	r3, #4
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	601a      	str	r2, [r3, #0]
  }

  return ret;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	3714      	adds	r7, #20
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab6:	4770      	bx	lr
 8003ab8:	240022f8 	.word	0x240022f8

08003abc <BSP_LCD_DrawBitmap>:
  * @param  Ypos Bmp Y position in the LCD
  * @param  pBmp Pointer to Bmp picture address in the internal Flash.
  * @retval BSP status
  */
int32_t BSP_LCD_DrawBitmap(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint8_t *pBmp)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b08e      	sub	sp, #56	; 0x38
 8003ac0:	af02      	add	r7, sp, #8
 8003ac2:	60f8      	str	r0, [r7, #12]
 8003ac4:	60b9      	str	r1, [r7, #8]
 8003ac6:	607a      	str	r2, [r7, #4]
 8003ac8:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8003aca:	2300      	movs	r3, #0
 8003acc:	61fb      	str	r3, [r7, #28]
  uint32_t Address;
  uint32_t input_color_mode;
  uint8_t *pbmp;

  /* Get bitmap data address offset */
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	330a      	adds	r3, #10
 8003ad2:	781b      	ldrb	r3, [r3, #0]
 8003ad4:	461a      	mov	r2, r3
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	330b      	adds	r3, #11
 8003ada:	781b      	ldrb	r3, [r3, #0]
 8003adc:	021b      	lsls	r3, r3, #8
 8003ade:	441a      	add	r2, r3
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	330c      	adds	r3, #12
 8003ae4:	781b      	ldrb	r3, [r3, #0]
 8003ae6:	041b      	lsls	r3, r3, #16
 8003ae8:	441a      	add	r2, r3
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	330d      	adds	r3, #13
 8003aee:	781b      	ldrb	r3, [r3, #0]
 8003af0:	061b      	lsls	r3, r3, #24
 8003af2:	4413      	add	r3, r2
 8003af4:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Read bitmap width */
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	3312      	adds	r3, #18
 8003afa:	781b      	ldrb	r3, [r3, #0]
 8003afc:	461a      	mov	r2, r3
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	3313      	adds	r3, #19
 8003b02:	781b      	ldrb	r3, [r3, #0]
 8003b04:	021b      	lsls	r3, r3, #8
 8003b06:	441a      	add	r2, r3
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	3314      	adds	r3, #20
 8003b0c:	781b      	ldrb	r3, [r3, #0]
 8003b0e:	041b      	lsls	r3, r3, #16
 8003b10:	441a      	add	r2, r3
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	3315      	adds	r3, #21
 8003b16:	781b      	ldrb	r3, [r3, #0]
 8003b18:	061b      	lsls	r3, r3, #24
 8003b1a:	4413      	add	r3, r2
 8003b1c:	61bb      	str	r3, [r7, #24]

  /* Read bitmap height */
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	3316      	adds	r3, #22
 8003b22:	781b      	ldrb	r3, [r3, #0]
 8003b24:	461a      	mov	r2, r3
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	3317      	adds	r3, #23
 8003b2a:	781b      	ldrb	r3, [r3, #0]
 8003b2c:	021b      	lsls	r3, r3, #8
 8003b2e:	441a      	add	r2, r3
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	3318      	adds	r3, #24
 8003b34:	781b      	ldrb	r3, [r3, #0]
 8003b36:	041b      	lsls	r3, r3, #16
 8003b38:	441a      	add	r2, r3
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	3319      	adds	r3, #25
 8003b3e:	781b      	ldrb	r3, [r3, #0]
 8003b40:	061b      	lsls	r3, r3, #24
 8003b42:	4413      	add	r3, r2
 8003b44:	617b      	str	r3, [r7, #20]

  /* Read bit/pixel */
  bit_pixel = (uint32_t)pBmp[28] + ((uint32_t)pBmp[29] << 8);
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	331c      	adds	r3, #28
 8003b4a:	781b      	ldrb	r3, [r3, #0]
 8003b4c:	461a      	mov	r2, r3
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	331d      	adds	r3, #29
 8003b52:	781b      	ldrb	r3, [r3, #0]
 8003b54:	021b      	lsls	r3, r3, #8
 8003b56:	4413      	add	r3, r2
 8003b58:	613b      	str	r3, [r7, #16]

  /* Set the address */
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*PixelFormatFactor);
 8003b5a:	4938      	ldr	r1, [pc, #224]	; (8003c3c <BSP_LCD_DrawBitmap+0x180>)
 8003b5c:	68fa      	ldr	r2, [r7, #12]
 8003b5e:	4613      	mov	r3, r2
 8003b60:	005b      	lsls	r3, r3, #1
 8003b62:	4413      	add	r3, r2
 8003b64:	00db      	lsls	r3, r3, #3
 8003b66:	440b      	add	r3, r1
 8003b68:	3308      	adds	r3, #8
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a34      	ldr	r2, [pc, #208]	; (8003c40 <BSP_LCD_DrawBitmap+0x184>)
 8003b6e:	2134      	movs	r1, #52	; 0x34
 8003b70:	fb01 f303 	mul.w	r3, r1, r3
 8003b74:	4413      	add	r3, r2
 8003b76:	335c      	adds	r3, #92	; 0x5c
 8003b78:	6819      	ldr	r1, [r3, #0]
 8003b7a:	4830      	ldr	r0, [pc, #192]	; (8003c3c <BSP_LCD_DrawBitmap+0x180>)
 8003b7c:	68fa      	ldr	r2, [r7, #12]
 8003b7e:	4613      	mov	r3, r2
 8003b80:	005b      	lsls	r3, r3, #1
 8003b82:	4413      	add	r3, r2
 8003b84:	00db      	lsls	r3, r3, #3
 8003b86:	4403      	add	r3, r0
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	687a      	ldr	r2, [r7, #4]
 8003b8c:	fb03 f202 	mul.w	r2, r3, r2
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	4413      	add	r3, r2
 8003b94:	4a2b      	ldr	r2, [pc, #172]	; (8003c44 <BSP_LCD_DrawBitmap+0x188>)
 8003b96:	6812      	ldr	r2, [r2, #0]
 8003b98:	fb02 f303 	mul.w	r3, r2, r3
 8003b9c:	440b      	add	r3, r1
 8003b9e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Get the layer pixel format */
  if ((bit_pixel/8U) == 4U)
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	3b20      	subs	r3, #32
 8003ba4:	2b07      	cmp	r3, #7
 8003ba6:	d802      	bhi.n	8003bae <BSP_LCD_DrawBitmap+0xf2>
  {
    input_color_mode = DMA2D_INPUT_ARGB8888;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	627b      	str	r3, [r7, #36]	; 0x24
 8003bac:	e008      	b.n	8003bc0 <BSP_LCD_DrawBitmap+0x104>
  }
  else if ((bit_pixel/8U) == 2U)
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	3b10      	subs	r3, #16
 8003bb2:	2b07      	cmp	r3, #7
 8003bb4:	d802      	bhi.n	8003bbc <BSP_LCD_DrawBitmap+0x100>
  {
    input_color_mode = DMA2D_INPUT_RGB565;
 8003bb6:	2302      	movs	r3, #2
 8003bb8:	627b      	str	r3, [r7, #36]	; 0x24
 8003bba:	e001      	b.n	8003bc0 <BSP_LCD_DrawBitmap+0x104>
  }
  else
  {
    input_color_mode = DMA2D_INPUT_RGB888;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Bypass the bitmap header */
  pbmp = pBmp + (index + (width * (height - 1U) * (bit_pixel/8U)));
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	3b01      	subs	r3, #1
 8003bc4:	69ba      	ldr	r2, [r7, #24]
 8003bc6:	fb02 f303 	mul.w	r3, r2, r3
 8003bca:	693a      	ldr	r2, [r7, #16]
 8003bcc:	08d2      	lsrs	r2, r2, #3
 8003bce:	fb03 f202 	mul.w	r2, r3, r2
 8003bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bd4:	4413      	add	r3, r2
 8003bd6:	683a      	ldr	r2, [r7, #0]
 8003bd8:	4413      	add	r3, r2
 8003bda:	623b      	str	r3, [r7, #32]

  /* Convert picture to ARGB8888 pixel format */
  for(index=0; index < height; index++)
 8003bdc:	2300      	movs	r3, #0
 8003bde:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003be0:	e022      	b.n	8003c28 <BSP_LCD_DrawBitmap+0x16c>
  {
    /* Pixel format conversion */
    LL_ConvertLineToRGB(Instance, (uint32_t *)pbmp, (uint32_t *)Address, width, input_color_mode);
 8003be2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be6:	9300      	str	r3, [sp, #0]
 8003be8:	69bb      	ldr	r3, [r7, #24]
 8003bea:	6a39      	ldr	r1, [r7, #32]
 8003bec:	68f8      	ldr	r0, [r7, #12]
 8003bee:	f000 faa9 	bl	8004144 <LL_ConvertLineToRGB>

    /* Increment the source and destination buffers */
    Address+=  (Lcd_Ctx[Instance].XSize * PixelFormatFactor);
 8003bf2:	4912      	ldr	r1, [pc, #72]	; (8003c3c <BSP_LCD_DrawBitmap+0x180>)
 8003bf4:	68fa      	ldr	r2, [r7, #12]
 8003bf6:	4613      	mov	r3, r2
 8003bf8:	005b      	lsls	r3, r3, #1
 8003bfa:	4413      	add	r3, r2
 8003bfc:	00db      	lsls	r3, r3, #3
 8003bfe:	440b      	add	r3, r1
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a10      	ldr	r2, [pc, #64]	; (8003c44 <BSP_LCD_DrawBitmap+0x188>)
 8003c04:	6812      	ldr	r2, [r2, #0]
 8003c06:	fb02 f303 	mul.w	r3, r2, r3
 8003c0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c0c:	4413      	add	r3, r2
 8003c0e:	62bb      	str	r3, [r7, #40]	; 0x28
    pbmp -= width*(bit_pixel/8U);
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	08db      	lsrs	r3, r3, #3
 8003c14:	69ba      	ldr	r2, [r7, #24]
 8003c16:	fb02 f303 	mul.w	r3, r2, r3
 8003c1a:	425b      	negs	r3, r3
 8003c1c:	6a3a      	ldr	r2, [r7, #32]
 8003c1e:	4413      	add	r3, r2
 8003c20:	623b      	str	r3, [r7, #32]
  for(index=0; index < height; index++)
 8003c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c24:	3301      	adds	r3, #1
 8003c26:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	d3d8      	bcc.n	8003be2 <BSP_LCD_DrawBitmap+0x126>
  }

  return ret;
 8003c30:	69fb      	ldr	r3, [r7, #28]
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	3730      	adds	r7, #48	; 0x30
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}
 8003c3a:	bf00      	nop
 8003c3c:	240022f8 	.word	0x240022f8
 8003c40:	24002250 	.word	0x24002250
 8003c44:	240021e4 	.word	0x240021e4

08003c48 <BSP_LCD_FillRGBRect>:
  * @param  Width Rectangle width.
  * @param  Height Rectangle Height.
  * @retval BSP status.
  */
int32_t BSP_LCD_FillRGBRect(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b088      	sub	sp, #32
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	60f8      	str	r0, [r7, #12]
 8003c50:	60b9      	str	r1, [r7, #8]
 8003c52:	607a      	str	r2, [r7, #4]
 8003c54:	603b      	str	r3, [r7, #0]
    }
    pData += PixelFormatFactor*Width;
  }
#else
  uint32_t color, j;
  for(i = 0; i < Height; i++)
 8003c56:	2300      	movs	r3, #0
 8003c58:	61fb      	str	r3, [r7, #28]
 8003c5a:	e02e      	b.n	8003cba <BSP_LCD_FillRGBRect+0x72>
  {
    for(j = 0; j < Width; j++)
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	61bb      	str	r3, [r7, #24]
 8003c60:	e024      	b.n	8003cac <BSP_LCD_FillRGBRect+0x64>
    {
      color = *pData | (*(pData + 1) << 8) | (*(pData + 2) << 16) | (*(pData + 3) << 24);
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	781b      	ldrb	r3, [r3, #0]
 8003c66:	461a      	mov	r2, r3
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	3301      	adds	r3, #1
 8003c6c:	781b      	ldrb	r3, [r3, #0]
 8003c6e:	021b      	lsls	r3, r3, #8
 8003c70:	431a      	orrs	r2, r3
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	3302      	adds	r3, #2
 8003c76:	781b      	ldrb	r3, [r3, #0]
 8003c78:	041b      	lsls	r3, r3, #16
 8003c7a:	431a      	orrs	r2, r3
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	3303      	adds	r3, #3
 8003c80:	781b      	ldrb	r3, [r3, #0]
 8003c82:	061b      	lsls	r3, r3, #24
 8003c84:	4313      	orrs	r3, r2
 8003c86:	617b      	str	r3, [r7, #20]
      BSP_LCD_WritePixel(Instance, Xpos + j, Ypos + i, color);
 8003c88:	68ba      	ldr	r2, [r7, #8]
 8003c8a:	69bb      	ldr	r3, [r7, #24]
 8003c8c:	18d1      	adds	r1, r2, r3
 8003c8e:	687a      	ldr	r2, [r7, #4]
 8003c90:	69fb      	ldr	r3, [r7, #28]
 8003c92:	441a      	add	r2, r3
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	68f8      	ldr	r0, [r7, #12]
 8003c98:	f000 f976 	bl	8003f88 <BSP_LCD_WritePixel>
      pData += PixelFormatFactor;
 8003c9c:	4b0b      	ldr	r3, [pc, #44]	; (8003ccc <BSP_LCD_FillRGBRect+0x84>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	683a      	ldr	r2, [r7, #0]
 8003ca2:	4413      	add	r3, r2
 8003ca4:	603b      	str	r3, [r7, #0]
    for(j = 0; j < Width; j++)
 8003ca6:	69bb      	ldr	r3, [r7, #24]
 8003ca8:	3301      	adds	r3, #1
 8003caa:	61bb      	str	r3, [r7, #24]
 8003cac:	69ba      	ldr	r2, [r7, #24]
 8003cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	d3d6      	bcc.n	8003c62 <BSP_LCD_FillRGBRect+0x1a>
  for(i = 0; i < Height; i++)
 8003cb4:	69fb      	ldr	r3, [r7, #28]
 8003cb6:	3301      	adds	r3, #1
 8003cb8:	61fb      	str	r3, [r7, #28]
 8003cba:	69fa      	ldr	r2, [r7, #28]
 8003cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cbe:	429a      	cmp	r2, r3
 8003cc0:	d3cc      	bcc.n	8003c5c <BSP_LCD_FillRGBRect+0x14>
    }
  }
#endif
  return BSP_ERROR_NONE;
 8003cc2:	2300      	movs	r3, #0
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	3720      	adds	r7, #32
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}
 8003ccc:	240021e4 	.word	0x240021e4

08003cd0 <BSP_LCD_DrawHLine>:
  * @param  Length  Line length
  * @param  Color Pixel color
  * @retval BSP status.
  */
int32_t BSP_LCD_DrawHLine(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b08a      	sub	sp, #40	; 0x28
 8003cd4:	af04      	add	r7, sp, #16
 8003cd6:	60f8      	str	r0, [r7, #12]
 8003cd8:	60b9      	str	r1, [r7, #8]
 8003cda:	607a      	str	r2, [r7, #4]
 8003cdc:	603b      	str	r3, [r7, #0]
  uint32_t  Xaddress;

  /* Get the line address */
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (PixelFormatFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 8003cde:	491e      	ldr	r1, [pc, #120]	; (8003d58 <BSP_LCD_DrawHLine+0x88>)
 8003ce0:	68fa      	ldr	r2, [r7, #12]
 8003ce2:	4613      	mov	r3, r2
 8003ce4:	005b      	lsls	r3, r3, #1
 8003ce6:	4413      	add	r3, r2
 8003ce8:	00db      	lsls	r3, r3, #3
 8003cea:	440b      	add	r3, r1
 8003cec:	3308      	adds	r3, #8
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a1a      	ldr	r2, [pc, #104]	; (8003d5c <BSP_LCD_DrawHLine+0x8c>)
 8003cf2:	2134      	movs	r1, #52	; 0x34
 8003cf4:	fb01 f303 	mul.w	r3, r1, r3
 8003cf8:	4413      	add	r3, r2
 8003cfa:	335c      	adds	r3, #92	; 0x5c
 8003cfc:	6819      	ldr	r1, [r3, #0]
 8003cfe:	4816      	ldr	r0, [pc, #88]	; (8003d58 <BSP_LCD_DrawHLine+0x88>)
 8003d00:	68fa      	ldr	r2, [r7, #12]
 8003d02:	4613      	mov	r3, r2
 8003d04:	005b      	lsls	r3, r3, #1
 8003d06:	4413      	add	r3, r2
 8003d08:	00db      	lsls	r3, r3, #3
 8003d0a:	4403      	add	r3, r0
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	687a      	ldr	r2, [r7, #4]
 8003d10:	fb03 f202 	mul.w	r2, r3, r2
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	4413      	add	r3, r2
 8003d18:	4a11      	ldr	r2, [pc, #68]	; (8003d60 <BSP_LCD_DrawHLine+0x90>)
 8003d1a:	6812      	ldr	r2, [r2, #0]
 8003d1c:	fb02 f303 	mul.w	r3, r2, r3
 8003d20:	440b      	add	r3, r1
 8003d22:	617b      	str	r3, [r7, #20]

  /* Write line */
  LL_FillBuffer(Instance, Lcd_Ctx[Instance].ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, Color);
 8003d24:	490c      	ldr	r1, [pc, #48]	; (8003d58 <BSP_LCD_DrawHLine+0x88>)
 8003d26:	68fa      	ldr	r2, [r7, #12]
 8003d28:	4613      	mov	r3, r2
 8003d2a:	005b      	lsls	r3, r3, #1
 8003d2c:	4413      	add	r3, r2
 8003d2e:	00db      	lsls	r3, r3, #3
 8003d30:	440b      	add	r3, r1
 8003d32:	3308      	adds	r3, #8
 8003d34:	6819      	ldr	r1, [r3, #0]
 8003d36:	697a      	ldr	r2, [r7, #20]
 8003d38:	6a3b      	ldr	r3, [r7, #32]
 8003d3a:	9302      	str	r3, [sp, #8]
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	9301      	str	r3, [sp, #4]
 8003d40:	2301      	movs	r3, #1
 8003d42:	9300      	str	r3, [sp, #0]
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	68f8      	ldr	r0, [r7, #12]
 8003d48:	f000 f988 	bl	800405c <LL_FillBuffer>

  return BSP_ERROR_NONE;
 8003d4c:	2300      	movs	r3, #0
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3718      	adds	r7, #24
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}
 8003d56:	bf00      	nop
 8003d58:	240022f8 	.word	0x240022f8
 8003d5c:	24002250 	.word	0x24002250
 8003d60:	240021e4 	.word	0x240021e4

08003d64 <BSP_LCD_DrawVLine>:
  * @param  Length  Line length
  * @param  Color Pixel color
  * @retval BSP status.
  */
int32_t BSP_LCD_DrawVLine(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 8003d64:	b590      	push	{r4, r7, lr}
 8003d66:	b08b      	sub	sp, #44	; 0x2c
 8003d68:	af04      	add	r7, sp, #16
 8003d6a:	60f8      	str	r0, [r7, #12]
 8003d6c:	60b9      	str	r1, [r7, #8]
 8003d6e:	607a      	str	r2, [r7, #4]
 8003d70:	603b      	str	r3, [r7, #0]
  uint32_t  Xaddress;

  /* Get the line address */
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (PixelFormatFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 8003d72:	4922      	ldr	r1, [pc, #136]	; (8003dfc <BSP_LCD_DrawVLine+0x98>)
 8003d74:	68fa      	ldr	r2, [r7, #12]
 8003d76:	4613      	mov	r3, r2
 8003d78:	005b      	lsls	r3, r3, #1
 8003d7a:	4413      	add	r3, r2
 8003d7c:	00db      	lsls	r3, r3, #3
 8003d7e:	440b      	add	r3, r1
 8003d80:	3308      	adds	r3, #8
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a1e      	ldr	r2, [pc, #120]	; (8003e00 <BSP_LCD_DrawVLine+0x9c>)
 8003d86:	2134      	movs	r1, #52	; 0x34
 8003d88:	fb01 f303 	mul.w	r3, r1, r3
 8003d8c:	4413      	add	r3, r2
 8003d8e:	335c      	adds	r3, #92	; 0x5c
 8003d90:	6819      	ldr	r1, [r3, #0]
 8003d92:	481a      	ldr	r0, [pc, #104]	; (8003dfc <BSP_LCD_DrawVLine+0x98>)
 8003d94:	68fa      	ldr	r2, [r7, #12]
 8003d96:	4613      	mov	r3, r2
 8003d98:	005b      	lsls	r3, r3, #1
 8003d9a:	4413      	add	r3, r2
 8003d9c:	00db      	lsls	r3, r3, #3
 8003d9e:	4403      	add	r3, r0
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	687a      	ldr	r2, [r7, #4]
 8003da4:	fb03 f202 	mul.w	r2, r3, r2
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	4413      	add	r3, r2
 8003dac:	4a15      	ldr	r2, [pc, #84]	; (8003e04 <BSP_LCD_DrawVLine+0xa0>)
 8003dae:	6812      	ldr	r2, [r2, #0]
 8003db0:	fb02 f303 	mul.w	r3, r2, r3
 8003db4:	440b      	add	r3, r1
 8003db6:	617b      	str	r3, [r7, #20]

  /* Write line */
  LL_FillBuffer(Instance, Lcd_Ctx[Instance].ActiveLayer, (uint32_t *)Xaddress, 1, Length, (Lcd_Ctx[Instance].XSize - 1U), Color);
 8003db8:	4910      	ldr	r1, [pc, #64]	; (8003dfc <BSP_LCD_DrawVLine+0x98>)
 8003dba:	68fa      	ldr	r2, [r7, #12]
 8003dbc:	4613      	mov	r3, r2
 8003dbe:	005b      	lsls	r3, r3, #1
 8003dc0:	4413      	add	r3, r2
 8003dc2:	00db      	lsls	r3, r3, #3
 8003dc4:	440b      	add	r3, r1
 8003dc6:	3308      	adds	r3, #8
 8003dc8:	6819      	ldr	r1, [r3, #0]
 8003dca:	6978      	ldr	r0, [r7, #20]
 8003dcc:	4c0b      	ldr	r4, [pc, #44]	; (8003dfc <BSP_LCD_DrawVLine+0x98>)
 8003dce:	68fa      	ldr	r2, [r7, #12]
 8003dd0:	4613      	mov	r3, r2
 8003dd2:	005b      	lsls	r3, r3, #1
 8003dd4:	4413      	add	r3, r2
 8003dd6:	00db      	lsls	r3, r3, #3
 8003dd8:	4423      	add	r3, r4
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	3b01      	subs	r3, #1
 8003dde:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003de0:	9202      	str	r2, [sp, #8]
 8003de2:	9301      	str	r3, [sp, #4]
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	9300      	str	r3, [sp, #0]
 8003de8:	2301      	movs	r3, #1
 8003dea:	4602      	mov	r2, r0
 8003dec:	68f8      	ldr	r0, [r7, #12]
 8003dee:	f000 f935 	bl	800405c <LL_FillBuffer>

  return BSP_ERROR_NONE;
 8003df2:	2300      	movs	r3, #0
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	371c      	adds	r7, #28
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd90      	pop	{r4, r7, pc}
 8003dfc:	240022f8 	.word	0x240022f8
 8003e00:	24002250 	.word	0x24002250
 8003e04:	240021e4 	.word	0x240021e4

08003e08 <BSP_LCD_FillRect>:
  * @param  Height Rectangle height
  * @param  Color Pixel color
  * @retval BSP status.
  */
int32_t BSP_LCD_FillRect(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
 8003e08:	b590      	push	{r4, r7, lr}
 8003e0a:	b08b      	sub	sp, #44	; 0x2c
 8003e0c:	af04      	add	r7, sp, #16
 8003e0e:	60f8      	str	r0, [r7, #12]
 8003e10:	60b9      	str	r1, [r7, #8]
 8003e12:	607a      	str	r2, [r7, #4]
 8003e14:	603b      	str	r3, [r7, #0]
  uint32_t  Xaddress;

  /* Get the rectangle start address */
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (PixelFormatFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 8003e16:	4923      	ldr	r1, [pc, #140]	; (8003ea4 <BSP_LCD_FillRect+0x9c>)
 8003e18:	68fa      	ldr	r2, [r7, #12]
 8003e1a:	4613      	mov	r3, r2
 8003e1c:	005b      	lsls	r3, r3, #1
 8003e1e:	4413      	add	r3, r2
 8003e20:	00db      	lsls	r3, r3, #3
 8003e22:	440b      	add	r3, r1
 8003e24:	3308      	adds	r3, #8
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a1f      	ldr	r2, [pc, #124]	; (8003ea8 <BSP_LCD_FillRect+0xa0>)
 8003e2a:	2134      	movs	r1, #52	; 0x34
 8003e2c:	fb01 f303 	mul.w	r3, r1, r3
 8003e30:	4413      	add	r3, r2
 8003e32:	335c      	adds	r3, #92	; 0x5c
 8003e34:	6819      	ldr	r1, [r3, #0]
 8003e36:	481b      	ldr	r0, [pc, #108]	; (8003ea4 <BSP_LCD_FillRect+0x9c>)
 8003e38:	68fa      	ldr	r2, [r7, #12]
 8003e3a:	4613      	mov	r3, r2
 8003e3c:	005b      	lsls	r3, r3, #1
 8003e3e:	4413      	add	r3, r2
 8003e40:	00db      	lsls	r3, r3, #3
 8003e42:	4403      	add	r3, r0
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	687a      	ldr	r2, [r7, #4]
 8003e48:	fb03 f202 	mul.w	r2, r3, r2
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	4413      	add	r3, r2
 8003e50:	4a16      	ldr	r2, [pc, #88]	; (8003eac <BSP_LCD_FillRect+0xa4>)
 8003e52:	6812      	ldr	r2, [r2, #0]
 8003e54:	fb02 f303 	mul.w	r3, r2, r3
 8003e58:	440b      	add	r3, r1
 8003e5a:	617b      	str	r3, [r7, #20]

  /* Fill the rectangle */
  LL_FillBuffer(Instance, Lcd_Ctx[Instance].ActiveLayer, (uint32_t *)Xaddress, Width, Height, (Lcd_Ctx[Instance].XSize - Width), Color);
 8003e5c:	4911      	ldr	r1, [pc, #68]	; (8003ea4 <BSP_LCD_FillRect+0x9c>)
 8003e5e:	68fa      	ldr	r2, [r7, #12]
 8003e60:	4613      	mov	r3, r2
 8003e62:	005b      	lsls	r3, r3, #1
 8003e64:	4413      	add	r3, r2
 8003e66:	00db      	lsls	r3, r3, #3
 8003e68:	440b      	add	r3, r1
 8003e6a:	3308      	adds	r3, #8
 8003e6c:	6819      	ldr	r1, [r3, #0]
 8003e6e:	6978      	ldr	r0, [r7, #20]
 8003e70:	4c0c      	ldr	r4, [pc, #48]	; (8003ea4 <BSP_LCD_FillRect+0x9c>)
 8003e72:	68fa      	ldr	r2, [r7, #12]
 8003e74:	4613      	mov	r3, r2
 8003e76:	005b      	lsls	r3, r3, #1
 8003e78:	4413      	add	r3, r2
 8003e7a:	00db      	lsls	r3, r3, #3
 8003e7c:	4423      	add	r3, r4
 8003e7e:	681a      	ldr	r2, [r3, #0]
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	1ad3      	subs	r3, r2, r3
 8003e84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e86:	9202      	str	r2, [sp, #8]
 8003e88:	9301      	str	r3, [sp, #4]
 8003e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e8c:	9300      	str	r3, [sp, #0]
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	4602      	mov	r2, r0
 8003e92:	68f8      	ldr	r0, [r7, #12]
 8003e94:	f000 f8e2 	bl	800405c <LL_FillBuffer>

  return BSP_ERROR_NONE;
 8003e98:	2300      	movs	r3, #0
}
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	371c      	adds	r7, #28
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd90      	pop	{r4, r7, pc}
 8003ea2:	bf00      	nop
 8003ea4:	240022f8 	.word	0x240022f8
 8003ea8:	24002250 	.word	0x24002250
 8003eac:	240021e4 	.word	0x240021e4

08003eb0 <BSP_LCD_ReadPixel>:
  * @param  Ypos Y position
  * @param  Color RGB pixel color
  * @retval BSP status.
  */
int32_t BSP_LCD_ReadPixel(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t *Color)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b085      	sub	sp, #20
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	60f8      	str	r0, [r7, #12]
 8003eb8:	60b9      	str	r1, [r7, #8]
 8003eba:	607a      	str	r2, [r7, #4]
 8003ebc:	603b      	str	r3, [r7, #0]
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8003ebe:	4930      	ldr	r1, [pc, #192]	; (8003f80 <BSP_LCD_ReadPixel+0xd0>)
 8003ec0:	68fa      	ldr	r2, [r7, #12]
 8003ec2:	4613      	mov	r3, r2
 8003ec4:	005b      	lsls	r3, r3, #1
 8003ec6:	4413      	add	r3, r2
 8003ec8:	00db      	lsls	r3, r3, #3
 8003eca:	440b      	add	r3, r1
 8003ecc:	3308      	adds	r3, #8
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a2c      	ldr	r2, [pc, #176]	; (8003f84 <BSP_LCD_ReadPixel+0xd4>)
 8003ed2:	2134      	movs	r1, #52	; 0x34
 8003ed4:	fb01 f303 	mul.w	r3, r1, r3
 8003ed8:	4413      	add	r3, r2
 8003eda:	3348      	adds	r3, #72	; 0x48
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d122      	bne.n	8003f28 <BSP_LCD_ReadPixel+0x78>
  {
    /* Read data value from SDRAM memory */
    *Color = *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos)));
 8003ee2:	4927      	ldr	r1, [pc, #156]	; (8003f80 <BSP_LCD_ReadPixel+0xd0>)
 8003ee4:	68fa      	ldr	r2, [r7, #12]
 8003ee6:	4613      	mov	r3, r2
 8003ee8:	005b      	lsls	r3, r3, #1
 8003eea:	4413      	add	r3, r2
 8003eec:	00db      	lsls	r3, r3, #3
 8003eee:	440b      	add	r3, r1
 8003ef0:	3308      	adds	r3, #8
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a23      	ldr	r2, [pc, #140]	; (8003f84 <BSP_LCD_ReadPixel+0xd4>)
 8003ef6:	2134      	movs	r1, #52	; 0x34
 8003ef8:	fb01 f303 	mul.w	r3, r1, r3
 8003efc:	4413      	add	r3, r2
 8003efe:	335c      	adds	r3, #92	; 0x5c
 8003f00:	6819      	ldr	r1, [r3, #0]
 8003f02:	481f      	ldr	r0, [pc, #124]	; (8003f80 <BSP_LCD_ReadPixel+0xd0>)
 8003f04:	68fa      	ldr	r2, [r7, #12]
 8003f06:	4613      	mov	r3, r2
 8003f08:	005b      	lsls	r3, r3, #1
 8003f0a:	4413      	add	r3, r2
 8003f0c:	00db      	lsls	r3, r3, #3
 8003f0e:	4403      	add	r3, r0
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	687a      	ldr	r2, [r7, #4]
 8003f14:	fb03 f202 	mul.w	r2, r3, r2
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	4413      	add	r3, r2
 8003f1c:	009b      	lsls	r3, r3, #2
 8003f1e:	440b      	add	r3, r1
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	601a      	str	r2, [r3, #0]
 8003f26:	e023      	b.n	8003f70 <BSP_LCD_ReadPixel+0xc0>
  }
  else /* if((hlcd_ltdc.LayerCfg[layer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565) */
  {
    /* Read data value from SDRAM memory */
    *Color = *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos)));
 8003f28:	4915      	ldr	r1, [pc, #84]	; (8003f80 <BSP_LCD_ReadPixel+0xd0>)
 8003f2a:	68fa      	ldr	r2, [r7, #12]
 8003f2c:	4613      	mov	r3, r2
 8003f2e:	005b      	lsls	r3, r3, #1
 8003f30:	4413      	add	r3, r2
 8003f32:	00db      	lsls	r3, r3, #3
 8003f34:	440b      	add	r3, r1
 8003f36:	3308      	adds	r3, #8
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a12      	ldr	r2, [pc, #72]	; (8003f84 <BSP_LCD_ReadPixel+0xd4>)
 8003f3c:	2134      	movs	r1, #52	; 0x34
 8003f3e:	fb01 f303 	mul.w	r3, r1, r3
 8003f42:	4413      	add	r3, r2
 8003f44:	335c      	adds	r3, #92	; 0x5c
 8003f46:	6819      	ldr	r1, [r3, #0]
 8003f48:	480d      	ldr	r0, [pc, #52]	; (8003f80 <BSP_LCD_ReadPixel+0xd0>)
 8003f4a:	68fa      	ldr	r2, [r7, #12]
 8003f4c:	4613      	mov	r3, r2
 8003f4e:	005b      	lsls	r3, r3, #1
 8003f50:	4413      	add	r3, r2
 8003f52:	00db      	lsls	r3, r3, #3
 8003f54:	4403      	add	r3, r0
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	687a      	ldr	r2, [r7, #4]
 8003f5a:	fb03 f202 	mul.w	r2, r3, r2
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	4413      	add	r3, r2
 8003f62:	005b      	lsls	r3, r3, #1
 8003f64:	440b      	add	r3, r1
 8003f66:	881b      	ldrh	r3, [r3, #0]
 8003f68:	b29b      	uxth	r3, r3
 8003f6a:	461a      	mov	r2, r3
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	601a      	str	r2, [r3, #0]
  }

  return BSP_ERROR_NONE;
 8003f70:	2300      	movs	r3, #0
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	3714      	adds	r7, #20
 8003f76:	46bd      	mov	sp, r7
 8003f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7c:	4770      	bx	lr
 8003f7e:	bf00      	nop
 8003f80:	240022f8 	.word	0x240022f8
 8003f84:	24002250 	.word	0x24002250

08003f88 <BSP_LCD_WritePixel>:
  * @param  Ypos Y position
  * @param  Color Pixel color
  * @retval BSP status
  */
int32_t BSP_LCD_WritePixel(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Color)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b085      	sub	sp, #20
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	60f8      	str	r0, [r7, #12]
 8003f90:	60b9      	str	r1, [r7, #8]
 8003f92:	607a      	str	r2, [r7, #4]
 8003f94:	603b      	str	r3, [r7, #0]
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8003f96:	492f      	ldr	r1, [pc, #188]	; (8004054 <BSP_LCD_WritePixel+0xcc>)
 8003f98:	68fa      	ldr	r2, [r7, #12]
 8003f9a:	4613      	mov	r3, r2
 8003f9c:	005b      	lsls	r3, r3, #1
 8003f9e:	4413      	add	r3, r2
 8003fa0:	00db      	lsls	r3, r3, #3
 8003fa2:	440b      	add	r3, r1
 8003fa4:	3308      	adds	r3, #8
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a2b      	ldr	r2, [pc, #172]	; (8004058 <BSP_LCD_WritePixel+0xd0>)
 8003faa:	2134      	movs	r1, #52	; 0x34
 8003fac:	fb01 f303 	mul.w	r3, r1, r3
 8003fb0:	4413      	add	r3, r2
 8003fb2:	3348      	adds	r3, #72	; 0x48
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d122      	bne.n	8004000 <BSP_LCD_WritePixel+0x78>
  {
    /* Write data value to SDRAM memory */
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 8003fba:	4926      	ldr	r1, [pc, #152]	; (8004054 <BSP_LCD_WritePixel+0xcc>)
 8003fbc:	68fa      	ldr	r2, [r7, #12]
 8003fbe:	4613      	mov	r3, r2
 8003fc0:	005b      	lsls	r3, r3, #1
 8003fc2:	4413      	add	r3, r2
 8003fc4:	00db      	lsls	r3, r3, #3
 8003fc6:	440b      	add	r3, r1
 8003fc8:	3308      	adds	r3, #8
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a22      	ldr	r2, [pc, #136]	; (8004058 <BSP_LCD_WritePixel+0xd0>)
 8003fce:	2134      	movs	r1, #52	; 0x34
 8003fd0:	fb01 f303 	mul.w	r3, r1, r3
 8003fd4:	4413      	add	r3, r2
 8003fd6:	335c      	adds	r3, #92	; 0x5c
 8003fd8:	6819      	ldr	r1, [r3, #0]
 8003fda:	481e      	ldr	r0, [pc, #120]	; (8004054 <BSP_LCD_WritePixel+0xcc>)
 8003fdc:	68fa      	ldr	r2, [r7, #12]
 8003fde:	4613      	mov	r3, r2
 8003fe0:	005b      	lsls	r3, r3, #1
 8003fe2:	4413      	add	r3, r2
 8003fe4:	00db      	lsls	r3, r3, #3
 8003fe6:	4403      	add	r3, r0
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	687a      	ldr	r2, [r7, #4]
 8003fec:	fb03 f202 	mul.w	r2, r3, r2
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	4413      	add	r3, r2
 8003ff4:	009b      	lsls	r3, r3, #2
 8003ff6:	440b      	add	r3, r1
 8003ff8:	461a      	mov	r2, r3
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	6013      	str	r3, [r2, #0]
 8003ffe:	e021      	b.n	8004044 <BSP_LCD_WritePixel+0xbc>
  }
  else
  {
    /* Write data value to SDRAM memory */
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 8004000:	4914      	ldr	r1, [pc, #80]	; (8004054 <BSP_LCD_WritePixel+0xcc>)
 8004002:	68fa      	ldr	r2, [r7, #12]
 8004004:	4613      	mov	r3, r2
 8004006:	005b      	lsls	r3, r3, #1
 8004008:	4413      	add	r3, r2
 800400a:	00db      	lsls	r3, r3, #3
 800400c:	440b      	add	r3, r1
 800400e:	3308      	adds	r3, #8
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a11      	ldr	r2, [pc, #68]	; (8004058 <BSP_LCD_WritePixel+0xd0>)
 8004014:	2134      	movs	r1, #52	; 0x34
 8004016:	fb01 f303 	mul.w	r3, r1, r3
 800401a:	4413      	add	r3, r2
 800401c:	335c      	adds	r3, #92	; 0x5c
 800401e:	6819      	ldr	r1, [r3, #0]
 8004020:	480c      	ldr	r0, [pc, #48]	; (8004054 <BSP_LCD_WritePixel+0xcc>)
 8004022:	68fa      	ldr	r2, [r7, #12]
 8004024:	4613      	mov	r3, r2
 8004026:	005b      	lsls	r3, r3, #1
 8004028:	4413      	add	r3, r2
 800402a:	00db      	lsls	r3, r3, #3
 800402c:	4403      	add	r3, r0
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	687a      	ldr	r2, [r7, #4]
 8004032:	fb03 f202 	mul.w	r2, r3, r2
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	4413      	add	r3, r2
 800403a:	005b      	lsls	r3, r3, #1
 800403c:	440b      	add	r3, r1
 800403e:	683a      	ldr	r2, [r7, #0]
 8004040:	b292      	uxth	r2, r2
 8004042:	801a      	strh	r2, [r3, #0]
  }

  return BSP_ERROR_NONE;
 8004044:	2300      	movs	r3, #0
}
 8004046:	4618      	mov	r0, r3
 8004048:	3714      	adds	r7, #20
 800404a:	46bd      	mov	sp, r7
 800404c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004050:	4770      	bx	lr
 8004052:	bf00      	nop
 8004054:	240022f8 	.word	0x240022f8
 8004058:	24002250 	.word	0x24002250

0800405c <LL_FillBuffer>:
  * @param  ySize Buffer height
  * @param  OffLine Offset
  * @param  Color Color index
  */
static void LL_FillBuffer(uint32_t Instance, uint32_t LayerIndex, uint32_t *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t Color)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b088      	sub	sp, #32
 8004060:	af02      	add	r7, sp, #8
 8004062:	60f8      	str	r0, [r7, #12]
 8004064:	60b9      	str	r1, [r7, #8]
 8004066:	607a      	str	r2, [r7, #4]
 8004068:	603b      	str	r3, [r7, #0]
  uint32_t output_color_mode, input_color = Color;
 800406a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800406c:	613b      	str	r3, [r7, #16]

  switch(Lcd_Ctx[Instance].PixelFormat)
 800406e:	4932      	ldr	r1, [pc, #200]	; (8004138 <LL_FillBuffer+0xdc>)
 8004070:	68fa      	ldr	r2, [r7, #12]
 8004072:	4613      	mov	r3, r2
 8004074:	005b      	lsls	r3, r3, #1
 8004076:	4413      	add	r3, r2
 8004078:	00db      	lsls	r3, r3, #3
 800407a:	440b      	add	r3, r1
 800407c:	330c      	adds	r3, #12
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	2b02      	cmp	r3, #2
 8004082:	d129      	bne.n	80040d8 <LL_FillBuffer+0x7c>
  {
  case LCD_PIXEL_FORMAT_RGB565:
    output_color_mode = DMA2D_OUTPUT_RGB565; /* RGB565 */
 8004084:	2302      	movs	r3, #2
 8004086:	617b      	str	r3, [r7, #20]
    input_color = CONVERTRGB5652ARGB8888(Color);
 8004088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800408a:	0adb      	lsrs	r3, r3, #11
 800408c:	f003 021f 	and.w	r2, r3, #31
 8004090:	4613      	mov	r3, r2
 8004092:	011b      	lsls	r3, r3, #4
 8004094:	4413      	add	r3, r2
 8004096:	015a      	lsls	r2, r3, #5
 8004098:	1ad3      	subs	r3, r2, r3
 800409a:	3317      	adds	r3, #23
 800409c:	099b      	lsrs	r3, r3, #6
 800409e:	0419      	lsls	r1, r3, #16
 80040a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040a2:	095b      	lsrs	r3, r3, #5
 80040a4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80040a8:	4613      	mov	r3, r2
 80040aa:	01db      	lsls	r3, r3, #7
 80040ac:	4413      	add	r3, r2
 80040ae:	005b      	lsls	r3, r3, #1
 80040b0:	4413      	add	r3, r2
 80040b2:	3321      	adds	r3, #33	; 0x21
 80040b4:	099b      	lsrs	r3, r3, #6
 80040b6:	021b      	lsls	r3, r3, #8
 80040b8:	4319      	orrs	r1, r3
 80040ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040bc:	f003 021f 	and.w	r2, r3, #31
 80040c0:	4613      	mov	r3, r2
 80040c2:	011b      	lsls	r3, r3, #4
 80040c4:	4413      	add	r3, r2
 80040c6:	015a      	lsls	r2, r3, #5
 80040c8:	1ad3      	subs	r3, r2, r3
 80040ca:	3317      	adds	r3, #23
 80040cc:	099b      	lsrs	r3, r3, #6
 80040ce:	430b      	orrs	r3, r1
 80040d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040d4:	613b      	str	r3, [r7, #16]
    break;
 80040d6:	e002      	b.n	80040de <LL_FillBuffer+0x82>
  case LCD_PIXEL_FORMAT_RGB888:
  default:
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
 80040d8:	2300      	movs	r3, #0
 80040da:	617b      	str	r3, [r7, #20]
    break;
 80040dc:	bf00      	nop
  }

  /* Register to memory mode with ARGB8888 as color Mode */
  hlcd_dma2d.Init.Mode         = DMA2D_R2M;
 80040de:	4b17      	ldr	r3, [pc, #92]	; (800413c <LL_FillBuffer+0xe0>)
 80040e0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80040e4:	605a      	str	r2, [r3, #4]
  hlcd_dma2d.Init.ColorMode    = output_color_mode;
 80040e6:	4a15      	ldr	r2, [pc, #84]	; (800413c <LL_FillBuffer+0xe0>)
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	6093      	str	r3, [r2, #8]
  hlcd_dma2d.Init.OutputOffset = OffLine;
 80040ec:	4a13      	ldr	r2, [pc, #76]	; (800413c <LL_FillBuffer+0xe0>)
 80040ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f0:	60d3      	str	r3, [r2, #12]

  hlcd_dma2d.Instance = DMA2D;
 80040f2:	4b12      	ldr	r3, [pc, #72]	; (800413c <LL_FillBuffer+0xe0>)
 80040f4:	4a12      	ldr	r2, [pc, #72]	; (8004140 <LL_FillBuffer+0xe4>)
 80040f6:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 80040f8:	4810      	ldr	r0, [pc, #64]	; (800413c <LL_FillBuffer+0xe0>)
 80040fa:	f001 fa1b 	bl	8005534 <HAL_DMA2D_Init>
 80040fe:	4603      	mov	r3, r0
 8004100:	2b00      	cmp	r3, #0
 8004102:	d115      	bne.n	8004130 <LL_FillBuffer+0xd4>
  {
    if(HAL_DMA2D_ConfigLayer(&hlcd_dma2d, 1) == HAL_OK)
 8004104:	2101      	movs	r1, #1
 8004106:	480d      	ldr	r0, [pc, #52]	; (800413c <LL_FillBuffer+0xe0>)
 8004108:	f001 fb96 	bl	8005838 <HAL_DMA2D_ConfigLayer>
 800410c:	4603      	mov	r3, r0
 800410e:	2b00      	cmp	r3, #0
 8004110:	d10e      	bne.n	8004130 <LL_FillBuffer+0xd4>
    {
      if (HAL_DMA2D_Start(&hlcd_dma2d, input_color, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8004112:	687a      	ldr	r2, [r7, #4]
 8004114:	6a3b      	ldr	r3, [r7, #32]
 8004116:	9300      	str	r3, [sp, #0]
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	6939      	ldr	r1, [r7, #16]
 800411c:	4807      	ldr	r0, [pc, #28]	; (800413c <LL_FillBuffer+0xe0>)
 800411e:	f001 fa77 	bl	8005610 <HAL_DMA2D_Start>
 8004122:	4603      	mov	r3, r0
 8004124:	2b00      	cmp	r3, #0
 8004126:	d103      	bne.n	8004130 <LL_FillBuffer+0xd4>
      {
        /* Polling For DMA transfer */
        (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 25);
 8004128:	2119      	movs	r1, #25
 800412a:	4804      	ldr	r0, [pc, #16]	; (800413c <LL_FillBuffer+0xe0>)
 800412c:	f001 fa9b 	bl	8005666 <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
 8004130:	bf00      	nop
 8004132:	3718      	adds	r7, #24
 8004134:	46bd      	mov	sp, r7
 8004136:	bd80      	pop	{r7, pc}
 8004138:	240022f8 	.word	0x240022f8
 800413c:	240021e8 	.word	0x240021e8
 8004140:	52001000 	.word	0x52001000

08004144 <LL_ConvertLineToRGB>:
  * @param  pDst Output color
  * @param  xSize Buffer width
  * @param  ColorMode Input color mode
  */
static void LL_ConvertLineToRGB(uint32_t Instance, uint32_t *pSrc, uint32_t *pDst, uint32_t xSize, uint32_t ColorMode)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b088      	sub	sp, #32
 8004148:	af02      	add	r7, sp, #8
 800414a:	60f8      	str	r0, [r7, #12]
 800414c:	60b9      	str	r1, [r7, #8]
 800414e:	607a      	str	r2, [r7, #4]
 8004150:	603b      	str	r3, [r7, #0]
  uint32_t output_color_mode;

  switch(Lcd_Ctx[Instance].PixelFormat)
 8004152:	4925      	ldr	r1, [pc, #148]	; (80041e8 <LL_ConvertLineToRGB+0xa4>)
 8004154:	68fa      	ldr	r2, [r7, #12]
 8004156:	4613      	mov	r3, r2
 8004158:	005b      	lsls	r3, r3, #1
 800415a:	4413      	add	r3, r2
 800415c:	00db      	lsls	r3, r3, #3
 800415e:	440b      	add	r3, r1
 8004160:	330c      	adds	r3, #12
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	2b02      	cmp	r3, #2
 8004166:	d102      	bne.n	800416e <LL_ConvertLineToRGB+0x2a>
  {
  case LCD_PIXEL_FORMAT_RGB565:
    output_color_mode = DMA2D_OUTPUT_RGB565; /* RGB565 */
 8004168:	2302      	movs	r3, #2
 800416a:	617b      	str	r3, [r7, #20]
    break;
 800416c:	e002      	b.n	8004174 <LL_ConvertLineToRGB+0x30>
  case LCD_PIXEL_FORMAT_RGB888:
  default:
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
 800416e:	2300      	movs	r3, #0
 8004170:	617b      	str	r3, [r7, #20]
    break;
 8004172:	bf00      	nop
  }

  /* Configure the DMA2D Mode, Color Mode and output offset */
  hlcd_dma2d.Init.Mode         = DMA2D_M2M_PFC;
 8004174:	4b1d      	ldr	r3, [pc, #116]	; (80041ec <LL_ConvertLineToRGB+0xa8>)
 8004176:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800417a:	605a      	str	r2, [r3, #4]
  hlcd_dma2d.Init.ColorMode    = output_color_mode;
 800417c:	4a1b      	ldr	r2, [pc, #108]	; (80041ec <LL_ConvertLineToRGB+0xa8>)
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	6093      	str	r3, [r2, #8]
  hlcd_dma2d.Init.OutputOffset = 0;
 8004182:	4b1a      	ldr	r3, [pc, #104]	; (80041ec <LL_ConvertLineToRGB+0xa8>)
 8004184:	2200      	movs	r2, #0
 8004186:	60da      	str	r2, [r3, #12]

  /* Foreground Configuration */
  hlcd_dma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8004188:	4b18      	ldr	r3, [pc, #96]	; (80041ec <LL_ConvertLineToRGB+0xa8>)
 800418a:	2200      	movs	r2, #0
 800418c:	64da      	str	r2, [r3, #76]	; 0x4c
  hlcd_dma2d.LayerCfg[1].InputAlpha = 0xFF;
 800418e:	4b17      	ldr	r3, [pc, #92]	; (80041ec <LL_ConvertLineToRGB+0xa8>)
 8004190:	22ff      	movs	r2, #255	; 0xff
 8004192:	651a      	str	r2, [r3, #80]	; 0x50
  hlcd_dma2d.LayerCfg[1].InputColorMode = ColorMode;
 8004194:	4a15      	ldr	r2, [pc, #84]	; (80041ec <LL_ConvertLineToRGB+0xa8>)
 8004196:	6a3b      	ldr	r3, [r7, #32]
 8004198:	6493      	str	r3, [r2, #72]	; 0x48
  hlcd_dma2d.LayerCfg[1].InputOffset = 0;
 800419a:	4b14      	ldr	r3, [pc, #80]	; (80041ec <LL_ConvertLineToRGB+0xa8>)
 800419c:	2200      	movs	r2, #0
 800419e:	645a      	str	r2, [r3, #68]	; 0x44

  hlcd_dma2d.Instance = DMA2D;
 80041a0:	4b12      	ldr	r3, [pc, #72]	; (80041ec <LL_ConvertLineToRGB+0xa8>)
 80041a2:	4a13      	ldr	r2, [pc, #76]	; (80041f0 <LL_ConvertLineToRGB+0xac>)
 80041a4:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 80041a6:	4811      	ldr	r0, [pc, #68]	; (80041ec <LL_ConvertLineToRGB+0xa8>)
 80041a8:	f001 f9c4 	bl	8005534 <HAL_DMA2D_Init>
 80041ac:	4603      	mov	r3, r0
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d115      	bne.n	80041de <LL_ConvertLineToRGB+0x9a>
  {
    if(HAL_DMA2D_ConfigLayer(&hlcd_dma2d, 1) == HAL_OK)
 80041b2:	2101      	movs	r1, #1
 80041b4:	480d      	ldr	r0, [pc, #52]	; (80041ec <LL_ConvertLineToRGB+0xa8>)
 80041b6:	f001 fb3f 	bl	8005838 <HAL_DMA2D_ConfigLayer>
 80041ba:	4603      	mov	r3, r0
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d10e      	bne.n	80041de <LL_ConvertLineToRGB+0x9a>
    {
      if (HAL_DMA2D_Start(&hlcd_dma2d, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
 80041c0:	68b9      	ldr	r1, [r7, #8]
 80041c2:	687a      	ldr	r2, [r7, #4]
 80041c4:	2301      	movs	r3, #1
 80041c6:	9300      	str	r3, [sp, #0]
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	4808      	ldr	r0, [pc, #32]	; (80041ec <LL_ConvertLineToRGB+0xa8>)
 80041cc:	f001 fa20 	bl	8005610 <HAL_DMA2D_Start>
 80041d0:	4603      	mov	r3, r0
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d103      	bne.n	80041de <LL_ConvertLineToRGB+0x9a>
      {
        /* Polling For DMA transfer */
        (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 25);
 80041d6:	2119      	movs	r1, #25
 80041d8:	4804      	ldr	r0, [pc, #16]	; (80041ec <LL_ConvertLineToRGB+0xa8>)
 80041da:	f001 fa44 	bl	8005666 <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
 80041de:	bf00      	nop
 80041e0:	3718      	adds	r7, #24
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}
 80041e6:	bf00      	nop
 80041e8:	240022f8 	.word	0x240022f8
 80041ec:	240021e8 	.word	0x240021e8
 80041f0:	52001000 	.word	0x52001000

080041f4 <LTDC_MspInit>:
  * @brief  Initialize the BSP LTDC Msp.
  * @param  hltdc  LTDC handle
  * @retval None
  */
static void LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b08c      	sub	sp, #48	; 0x30
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  if(hltdc->Instance == LTDC)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a3c      	ldr	r2, [pc, #240]	; (80042f4 <LTDC_MspInit+0x100>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d171      	bne.n	80042ea <LTDC_MspInit+0xf6>
  {
    /** Enable the LTDC clock */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8004206:	4b3c      	ldr	r3, [pc, #240]	; (80042f8 <LTDC_MspInit+0x104>)
 8004208:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800420c:	4a3a      	ldr	r2, [pc, #232]	; (80042f8 <LTDC_MspInit+0x104>)
 800420e:	f043 0308 	orr.w	r3, r3, #8
 8004212:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8004216:	4b38      	ldr	r3, [pc, #224]	; (80042f8 <LTDC_MspInit+0x104>)
 8004218:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800421c:	f003 0308 	and.w	r3, r3, #8
 8004220:	61bb      	str	r3, [r7, #24]
 8004222:	69bb      	ldr	r3, [r7, #24]

    /* Enable GPIOs clock */
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8004224:	4b34      	ldr	r3, [pc, #208]	; (80042f8 <LTDC_MspInit+0x104>)
 8004226:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800422a:	4a33      	ldr	r2, [pc, #204]	; (80042f8 <LTDC_MspInit+0x104>)
 800422c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004230:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004234:	4b30      	ldr	r3, [pc, #192]	; (80042f8 <LTDC_MspInit+0x104>)
 8004236:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800423a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800423e:	617b      	str	r3, [r7, #20]
 8004240:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8004242:	4b2d      	ldr	r3, [pc, #180]	; (80042f8 <LTDC_MspInit+0x104>)
 8004244:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004248:	4a2b      	ldr	r2, [pc, #172]	; (80042f8 <LTDC_MspInit+0x104>)
 800424a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800424e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004252:	4b29      	ldr	r3, [pc, #164]	; (80042f8 <LTDC_MspInit+0x104>)
 8004254:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004258:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800425c:	613b      	str	r3, [r7, #16]
 800425e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8004260:	4b25      	ldr	r3, [pc, #148]	; (80042f8 <LTDC_MspInit+0x104>)
 8004262:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004266:	4a24      	ldr	r2, [pc, #144]	; (80042f8 <LTDC_MspInit+0x104>)
 8004268:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800426c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004270:	4b21      	ldr	r3, [pc, #132]	; (80042f8 <LTDC_MspInit+0x104>)
 8004272:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004276:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800427a:	60fb      	str	r3, [r7, #12]
 800427c:	68fb      	ldr	r3, [r7, #12]

    /*** LTDC Pins configuration ***/
    /* GPIOI configuration */
    gpio_init_structure.Pin       = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 800427e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8004282:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8004284:	2302      	movs	r3, #2
 8004286:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull      = GPIO_NOPULL;
 8004288:	2300      	movs	r3, #0
 800428a:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 800428c:	2302      	movs	r3, #2
 800428e:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8004290:	230e      	movs	r3, #14
 8004292:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8004294:	f107 031c 	add.w	r3, r7, #28
 8004298:	4619      	mov	r1, r3
 800429a:	4818      	ldr	r0, [pc, #96]	; (80042fc <LTDC_MspInit+0x108>)
 800429c:	f002 fbc8 	bl	8006a30 <HAL_GPIO_Init>

    /* GPIOJ configuration */
    gpio_init_structure.Pin      = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 80042a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80042a4:	61fb      	str	r3, [r7, #28]
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80042a6:	230e      	movs	r3, #14
 80042a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 80042aa:	f107 031c 	add.w	r3, r7, #28
 80042ae:	4619      	mov	r1, r3
 80042b0:	4813      	ldr	r0, [pc, #76]	; (8004300 <LTDC_MspInit+0x10c>)
 80042b2:	f002 fbbd 	bl	8006a30 <HAL_GPIO_Init>
    /* GPIOK configuration */
    gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 80042b6:	23ff      	movs	r3, #255	; 0xff
 80042b8:	61fb      	str	r3, [r7, #28]
                                    GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80042ba:	230e      	movs	r3, #14
 80042bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 80042be:	f107 031c 	add.w	r3, r7, #28
 80042c2:	4619      	mov	r1, r3
 80042c4:	480f      	ldr	r0, [pc, #60]	; (8004304 <LTDC_MspInit+0x110>)
 80042c6:	f002 fbb3 	bl	8006a30 <HAL_GPIO_Init>


    /** Toggle Sw reset of LTDC IP */
    __HAL_RCC_LTDC_FORCE_RESET();
 80042ca:	4b0b      	ldr	r3, [pc, #44]	; (80042f8 <LTDC_MspInit+0x104>)
 80042cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042d0:	4a09      	ldr	r2, [pc, #36]	; (80042f8 <LTDC_MspInit+0x104>)
 80042d2:	f043 0308 	orr.w	r3, r3, #8
 80042d6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    __HAL_RCC_LTDC_RELEASE_RESET();
 80042da:	4b07      	ldr	r3, [pc, #28]	; (80042f8 <LTDC_MspInit+0x104>)
 80042dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042e0:	4a05      	ldr	r2, [pc, #20]	; (80042f8 <LTDC_MspInit+0x104>)
 80042e2:	f023 0308 	bic.w	r3, r3, #8
 80042e6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  }
}
 80042ea:	bf00      	nop
 80042ec:	3730      	adds	r7, #48	; 0x30
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}
 80042f2:	bf00      	nop
 80042f4:	50001000 	.word	0x50001000
 80042f8:	58024400 	.word	0x58024400
 80042fc:	58022000 	.word	0x58022000
 8004300:	58022400 	.word	0x58022400
 8004304:	58022800 	.word	0x58022800

08004308 <DMA2D_MspInit>:
  * @brief  Initialize the BSP DMA2D Msp.
  * @param  hdma2d  DMA2D handle
  * @retval None
  */
static void DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
 8004308:	b480      	push	{r7}
 800430a:	b085      	sub	sp, #20
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance == DMA2D)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a11      	ldr	r2, [pc, #68]	; (800435c <DMA2D_MspInit+0x54>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d11a      	bne.n	8004350 <DMA2D_MspInit+0x48>
  {
    /** Enable the DMA2D clock */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800431a:	4b11      	ldr	r3, [pc, #68]	; (8004360 <DMA2D_MspInit+0x58>)
 800431c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8004320:	4a0f      	ldr	r2, [pc, #60]	; (8004360 <DMA2D_MspInit+0x58>)
 8004322:	f043 0310 	orr.w	r3, r3, #16
 8004326:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 800432a:	4b0d      	ldr	r3, [pc, #52]	; (8004360 <DMA2D_MspInit+0x58>)
 800432c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8004330:	f003 0310 	and.w	r3, r3, #16
 8004334:	60fb      	str	r3, [r7, #12]
 8004336:	68fb      	ldr	r3, [r7, #12]

    /** Toggle Sw reset of DMA2D IP */
    __HAL_RCC_DMA2D_FORCE_RESET();
 8004338:	4b09      	ldr	r3, [pc, #36]	; (8004360 <DMA2D_MspInit+0x58>)
 800433a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800433c:	4a08      	ldr	r2, [pc, #32]	; (8004360 <DMA2D_MspInit+0x58>)
 800433e:	f043 0310 	orr.w	r3, r3, #16
 8004342:	67d3      	str	r3, [r2, #124]	; 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8004344:	4b06      	ldr	r3, [pc, #24]	; (8004360 <DMA2D_MspInit+0x58>)
 8004346:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004348:	4a05      	ldr	r2, [pc, #20]	; (8004360 <DMA2D_MspInit+0x58>)
 800434a:	f023 0310 	bic.w	r3, r3, #16
 800434e:	67d3      	str	r3, [r2, #124]	; 0x7c
  }
}
 8004350:	bf00      	nop
 8004352:	3714      	adds	r7, #20
 8004354:	46bd      	mov	sp, r7
 8004356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435a:	4770      	bx	lr
 800435c:	52001000 	.word	0x52001000
 8004360:	58024400 	.word	0x58024400

08004364 <BSP_SDRAM_Init>:
  * @brief  Initializes the SDRAM device.
  * @param Instance  SDRAM Instance
  * @retval BSP status
  */
int32_t BSP_SDRAM_Init(uint32_t Instance)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b084      	sub	sp, #16
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  int32_t ret;
  static IS42S32800G_Context_t pRegMode;

  if(Instance >= SDRAM_INSTANCES_NBR)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d003      	beq.n	800437a <BSP_SDRAM_Init+0x16>
  {
    ret =  BSP_ERROR_WRONG_PARAM;
 8004372:	f06f 0301 	mvn.w	r3, #1
 8004376:	60fb      	str	r3, [r7, #12]
 8004378:	e047      	b.n	800440a <BSP_SDRAM_Init+0xa6>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 800437a:	2300      	movs	r3, #0
 800437c:	60fb      	str	r3, [r7, #12]
        ret = BSP_ERROR_PERIPH_FAILURE;
      }
    }
#else
    /* Msp SDRAM initialization */
    SDRAM_MspInit(&hsdram[Instance]);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2234      	movs	r2, #52	; 0x34
 8004382:	fb02 f303 	mul.w	r3, r2, r3
 8004386:	4a23      	ldr	r2, [pc, #140]	; (8004414 <BSP_SDRAM_Init+0xb0>)
 8004388:	4413      	add	r3, r2
 800438a:	4618      	mov	r0, r3
 800438c:	f000 f88e 	bl	80044ac <SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */

    if(ret == BSP_ERROR_NONE)
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d139      	bne.n	800440a <BSP_SDRAM_Init+0xa6>
    {
      if(MX_SDRAM_BANK2_Init(&hsdram[Instance]) != HAL_OK)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2234      	movs	r2, #52	; 0x34
 800439a:	fb02 f303 	mul.w	r3, r2, r3
 800439e:	4a1d      	ldr	r2, [pc, #116]	; (8004414 <BSP_SDRAM_Init+0xb0>)
 80043a0:	4413      	add	r3, r2
 80043a2:	4618      	mov	r0, r3
 80043a4:	f000 f83a 	bl	800441c <MX_SDRAM_BANK2_Init>
 80043a8:	4603      	mov	r3, r0
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d003      	beq.n	80043b6 <BSP_SDRAM_Init+0x52>
      {
        ret = BSP_ERROR_NO_INIT;
 80043ae:	f04f 33ff 	mov.w	r3, #4294967295
 80043b2:	60fb      	str	r3, [r7, #12]
 80043b4:	e029      	b.n	800440a <BSP_SDRAM_Init+0xa6>
      }
      else
      {
        /* External memory mode register configuration */
        pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
 80043b6:	4b18      	ldr	r3, [pc, #96]	; (8004418 <BSP_SDRAM_Init+0xb4>)
 80043b8:	2208      	movs	r2, #8
 80043ba:	601a      	str	r2, [r3, #0]
        pRegMode.RefreshMode     = IS42S32800G_AUTOREFRESH_MODE_CMD;
 80043bc:	4b16      	ldr	r3, [pc, #88]	; (8004418 <BSP_SDRAM_Init+0xb4>)
 80043be:	2203      	movs	r2, #3
 80043c0:	605a      	str	r2, [r3, #4]
        pRegMode.RefreshRate     = REFRESH_COUNT;
 80043c2:	4b15      	ldr	r3, [pc, #84]	; (8004418 <BSP_SDRAM_Init+0xb4>)
 80043c4:	f240 6203 	movw	r2, #1539	; 0x603
 80043c8:	609a      	str	r2, [r3, #8]
        pRegMode.BurstLength     = IS42S32800G_BURST_LENGTH_1;
 80043ca:	4b13      	ldr	r3, [pc, #76]	; (8004418 <BSP_SDRAM_Init+0xb4>)
 80043cc:	2200      	movs	r2, #0
 80043ce:	60da      	str	r2, [r3, #12]
        pRegMode.BurstType       = IS42S32800G_BURST_TYPE_SEQUENTIAL;
 80043d0:	4b11      	ldr	r3, [pc, #68]	; (8004418 <BSP_SDRAM_Init+0xb4>)
 80043d2:	2200      	movs	r2, #0
 80043d4:	611a      	str	r2, [r3, #16]
        pRegMode.CASLatency      = IS42S32800G_CAS_LATENCY_3;
 80043d6:	4b10      	ldr	r3, [pc, #64]	; (8004418 <BSP_SDRAM_Init+0xb4>)
 80043d8:	2230      	movs	r2, #48	; 0x30
 80043da:	615a      	str	r2, [r3, #20]
        pRegMode.OperationMode   = IS42S32800G_OPERATING_MODE_STANDARD;
 80043dc:	4b0e      	ldr	r3, [pc, #56]	; (8004418 <BSP_SDRAM_Init+0xb4>)
 80043de:	2200      	movs	r2, #0
 80043e0:	619a      	str	r2, [r3, #24]
        pRegMode.WriteBurstMode  = IS42S32800G_WRITEBURST_MODE_SINGLE;
 80043e2:	4b0d      	ldr	r3, [pc, #52]	; (8004418 <BSP_SDRAM_Init+0xb4>)
 80043e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80043e8:	61da      	str	r2, [r3, #28]

        /* SDRAM initialization sequence */
        if(IS42S32800G_Init(&hsdram[Instance], &pRegMode) != IS42S32800G_OK)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2234      	movs	r2, #52	; 0x34
 80043ee:	fb02 f303 	mul.w	r3, r2, r3
 80043f2:	4a08      	ldr	r2, [pc, #32]	; (8004414 <BSP_SDRAM_Init+0xb0>)
 80043f4:	4413      	add	r3, r2
 80043f6:	4908      	ldr	r1, [pc, #32]	; (8004418 <BSP_SDRAM_Init+0xb4>)
 80043f8:	4618      	mov	r0, r3
 80043fa:	f7fe fad3 	bl	80029a4 <IS42S32800G_Init>
 80043fe:	4603      	mov	r3, r0
 8004400:	2b00      	cmp	r3, #0
 8004402:	d002      	beq.n	800440a <BSP_SDRAM_Init+0xa6>
        {
          ret =  BSP_ERROR_COMPONENT_FAILURE;
 8004404:	f06f 0304 	mvn.w	r3, #4
 8004408:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 800440a:	68fb      	ldr	r3, [r7, #12]
}
 800440c:	4618      	mov	r0, r3
 800440e:	3710      	adds	r7, #16
 8004410:	46bd      	mov	sp, r7
 8004412:	bd80      	pop	{r7, pc}
 8004414:	24002310 	.word	0x24002310
 8004418:	24002344 	.word	0x24002344

0800441c <MX_SDRAM_BANK2_Init>:
  * @brief  Initializes the SDRAM periperal.
  * @param  hSdram SDRAM handle
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_SDRAM_BANK2_Init(SDRAM_HandleTypeDef *hSdram)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b08a      	sub	sp, #40	; 0x28
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  FMC_SDRAM_TimingTypeDef sdram_timing;

  /* SDRAM device configuration */
  hSdram->Instance = FMC_SDRAM_DEVICE;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	4a20      	ldr	r2, [pc, #128]	; (80044a8 <MX_SDRAM_BANK2_Init+0x8c>)
 8004428:	601a      	str	r2, [r3, #0]

  /* SDRAM handle configuration */
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2201      	movs	r2, #1
 800442e:	605a      	str	r2, [r3, #4]
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_9;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2201      	movs	r2, #1
 8004434:	609a      	str	r2, [r3, #8]
  hSdram->Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2204      	movs	r2, #4
 800443a:	60da      	str	r2, [r3, #12]
  hSdram->Init.MemoryDataWidth    = FMC_SDRAM_MEM_BUS_WIDTH_32;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2220      	movs	r2, #32
 8004440:	611a      	str	r2, [r3, #16]
  hSdram->Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2240      	movs	r2, #64	; 0x40
 8004446:	615a      	str	r2, [r3, #20]
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800444e:	619a      	str	r2, [r3, #24]
  hSdram->Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2200      	movs	r2, #0
 8004454:	61da      	str	r2, [r3, #28]
  hSdram->Init.SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800445c:	621a      	str	r2, [r3, #32]
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004464:	625a      	str	r2, [r3, #36]	; 0x24
  hSdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2200      	movs	r2, #0
 800446a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Timing configuration for as SDRAM */
  sdram_timing.LoadToActiveDelay    = 2;
 800446c:	2302      	movs	r3, #2
 800446e:	60fb      	str	r3, [r7, #12]
  sdram_timing.ExitSelfRefreshDelay = 7;
 8004470:	2307      	movs	r3, #7
 8004472:	613b      	str	r3, [r7, #16]
  sdram_timing.SelfRefreshTime      = 4;
 8004474:	2304      	movs	r3, #4
 8004476:	617b      	str	r3, [r7, #20]
  sdram_timing.RowCycleDelay        = 7;
 8004478:	2307      	movs	r3, #7
 800447a:	61bb      	str	r3, [r7, #24]
  sdram_timing.WriteRecoveryTime    = 2;
 800447c:	2302      	movs	r3, #2
 800447e:	61fb      	str	r3, [r7, #28]
  sdram_timing.RPDelay              = 2;
 8004480:	2302      	movs	r3, #2
 8004482:	623b      	str	r3, [r7, #32]
  sdram_timing.RCDDelay             = 2;
 8004484:	2302      	movs	r3, #2
 8004486:	627b      	str	r3, [r7, #36]	; 0x24

  /* SDRAM controller initialization */
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 8004488:	f107 030c 	add.w	r3, r7, #12
 800448c:	4619      	mov	r1, r3
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f009 f872 	bl	800d578 <HAL_SDRAM_Init>
 8004494:	4603      	mov	r3, r0
 8004496:	2b00      	cmp	r3, #0
 8004498:	d001      	beq.n	800449e <MX_SDRAM_BANK2_Init+0x82>
  {
    return  HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	e000      	b.n	80044a0 <MX_SDRAM_BANK2_Init+0x84>
  }

  return HAL_OK;
 800449e:	2300      	movs	r3, #0
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	3728      	adds	r7, #40	; 0x28
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}
 80044a8:	52004140 	.word	0x52004140

080044ac <SDRAM_MspInit>:
  * @brief  Initializes SDRAM MSP.
  * @param  hSdram SDRAM handle
  * @retval None
  */
static void SDRAM_MspInit(SDRAM_HandleTypeDef  *hSdram)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b090      	sub	sp, #64	; 0x40
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  static MDMA_HandleTypeDef mdma_handle;
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 80044b4:	4b7f      	ldr	r3, [pc, #508]	; (80046b4 <SDRAM_MspInit+0x208>)
 80044b6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80044ba:	4a7e      	ldr	r2, [pc, #504]	; (80046b4 <SDRAM_MspInit+0x208>)
 80044bc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80044c0:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80044c4:	4b7b      	ldr	r3, [pc, #492]	; (80046b4 <SDRAM_MspInit+0x208>)
 80044c6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80044ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80044ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80044d0:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable chosen MDMAx clock */
  SDRAM_MDMAx_CLK_ENABLE();
 80044d2:	4b78      	ldr	r3, [pc, #480]	; (80046b4 <SDRAM_MspInit+0x208>)
 80044d4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80044d8:	4a76      	ldr	r2, [pc, #472]	; (80046b4 <SDRAM_MspInit+0x208>)
 80044da:	f043 0301 	orr.w	r3, r3, #1
 80044de:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80044e2:	4b74      	ldr	r3, [pc, #464]	; (80046b4 <SDRAM_MspInit+0x208>)
 80044e4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80044e8:	f003 0301 	and.w	r3, r3, #1
 80044ec:	627b      	str	r3, [r7, #36]	; 0x24
 80044ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80044f0:	4b70      	ldr	r3, [pc, #448]	; (80046b4 <SDRAM_MspInit+0x208>)
 80044f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80044f6:	4a6f      	ldr	r2, [pc, #444]	; (80046b4 <SDRAM_MspInit+0x208>)
 80044f8:	f043 0308 	orr.w	r3, r3, #8
 80044fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004500:	4b6c      	ldr	r3, [pc, #432]	; (80046b4 <SDRAM_MspInit+0x208>)
 8004502:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004506:	f003 0308 	and.w	r3, r3, #8
 800450a:	623b      	str	r3, [r7, #32]
 800450c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800450e:	4b69      	ldr	r3, [pc, #420]	; (80046b4 <SDRAM_MspInit+0x208>)
 8004510:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004514:	4a67      	ldr	r2, [pc, #412]	; (80046b4 <SDRAM_MspInit+0x208>)
 8004516:	f043 0310 	orr.w	r3, r3, #16
 800451a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800451e:	4b65      	ldr	r3, [pc, #404]	; (80046b4 <SDRAM_MspInit+0x208>)
 8004520:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004524:	f003 0310 	and.w	r3, r3, #16
 8004528:	61fb      	str	r3, [r7, #28]
 800452a:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800452c:	4b61      	ldr	r3, [pc, #388]	; (80046b4 <SDRAM_MspInit+0x208>)
 800452e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004532:	4a60      	ldr	r2, [pc, #384]	; (80046b4 <SDRAM_MspInit+0x208>)
 8004534:	f043 0320 	orr.w	r3, r3, #32
 8004538:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800453c:	4b5d      	ldr	r3, [pc, #372]	; (80046b4 <SDRAM_MspInit+0x208>)
 800453e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004542:	f003 0320 	and.w	r3, r3, #32
 8004546:	61bb      	str	r3, [r7, #24]
 8004548:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800454a:	4b5a      	ldr	r3, [pc, #360]	; (80046b4 <SDRAM_MspInit+0x208>)
 800454c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004550:	4a58      	ldr	r2, [pc, #352]	; (80046b4 <SDRAM_MspInit+0x208>)
 8004552:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004556:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800455a:	4b56      	ldr	r3, [pc, #344]	; (80046b4 <SDRAM_MspInit+0x208>)
 800455c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004560:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004564:	617b      	str	r3, [r7, #20]
 8004566:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004568:	4b52      	ldr	r3, [pc, #328]	; (80046b4 <SDRAM_MspInit+0x208>)
 800456a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800456e:	4a51      	ldr	r2, [pc, #324]	; (80046b4 <SDRAM_MspInit+0x208>)
 8004570:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004574:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004578:	4b4e      	ldr	r3, [pc, #312]	; (80046b4 <SDRAM_MspInit+0x208>)
 800457a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800457e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004582:	613b      	str	r3, [r7, #16]
 8004584:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8004586:	4b4b      	ldr	r3, [pc, #300]	; (80046b4 <SDRAM_MspInit+0x208>)
 8004588:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800458c:	4a49      	ldr	r2, [pc, #292]	; (80046b4 <SDRAM_MspInit+0x208>)
 800458e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004592:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004596:	4b47      	ldr	r3, [pc, #284]	; (80046b4 <SDRAM_MspInit+0x208>)
 8004598:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800459c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045a0:	60fb      	str	r3, [r7, #12]
 80045a2:	68fb      	ldr	r3, [r7, #12]

  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80045a4:	2302      	movs	r3, #2
 80045a6:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80045a8:	2301      	movs	r3, #1
 80045aa:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 80045ac:	2303      	movs	r3, #3
 80045ae:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 80045b0:	230c      	movs	r3, #12
 80045b2:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 80045b4:	f24c 7303 	movw	r3, #50947	; 0xc703
 80045b8:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_14 | GPIO_PIN_15;

  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 80045ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80045be:	4619      	mov	r1, r3
 80045c0:	483d      	ldr	r0, [pc, #244]	; (80046b8 <SDRAM_MspInit+0x20c>)
 80045c2:	f002 fa35 	bl	8006a30 <HAL_GPIO_Init>

  /* GPIOE configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 80045c6:	f64f 7383 	movw	r3, #65411	; 0xff83
 80045ca:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80045cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80045d0:	4619      	mov	r1, r3
 80045d2:	483a      	ldr	r0, [pc, #232]	; (80046bc <SDRAM_MspInit+0x210>)
 80045d4:	f002 fa2c 	bl	8006a30 <HAL_GPIO_Init>

  /* GPIOF configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 80045d8:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80045dc:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 80045de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80045e2:	4619      	mov	r1, r3
 80045e4:	4836      	ldr	r0, [pc, #216]	; (80046c0 <SDRAM_MspInit+0x214>)
 80045e6:	f002 fa23 	bl	8006a30 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 |\
 80045ea:	f248 133f 	movw	r3, #33087	; 0x813f
 80045ee:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80045f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80045f4:	4619      	mov	r1, r3
 80045f6:	4833      	ldr	r0, [pc, #204]	; (80046c4 <SDRAM_MspInit+0x218>)
 80045f8:	f002 fa1a 	bl	8006a30 <HAL_GPIO_Init>

  /* GPIOH configuration */
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 |\
 80045fc:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004600:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 8004602:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004606:	4619      	mov	r1, r3
 8004608:	482f      	ldr	r0, [pc, #188]	; (80046c8 <SDRAM_MspInit+0x21c>)
 800460a:	f002 fa11 	bl	8006a30 <HAL_GPIO_Init>

  /* GPIOI configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 800460e:	f240 63ff 	movw	r3, #1791	; 0x6ff
 8004612:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_9 | GPIO_PIN_10;
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8004614:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004618:	4619      	mov	r1, r3
 800461a:	482c      	ldr	r0, [pc, #176]	; (80046cc <SDRAM_MspInit+0x220>)
 800461c:	f002 fa08 	bl	8006a30 <HAL_GPIO_Init>

  /* Configure common MDMA parameters */
  mdma_handle.Init.Request                  = MDMA_REQUEST_SW;
 8004620:	4b2b      	ldr	r3, [pc, #172]	; (80046d0 <SDRAM_MspInit+0x224>)
 8004622:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004626:	605a      	str	r2, [r3, #4]
  mdma_handle.Init.TransferTriggerMode      = MDMA_BLOCK_TRANSFER;
 8004628:	4b29      	ldr	r3, [pc, #164]	; (80046d0 <SDRAM_MspInit+0x224>)
 800462a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800462e:	609a      	str	r2, [r3, #8]
  mdma_handle.Init.Priority                 = MDMA_PRIORITY_HIGH;
 8004630:	4b27      	ldr	r3, [pc, #156]	; (80046d0 <SDRAM_MspInit+0x224>)
 8004632:	2280      	movs	r2, #128	; 0x80
 8004634:	60da      	str	r2, [r3, #12]
  mdma_handle.Init.Endianness               = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8004636:	4b26      	ldr	r3, [pc, #152]	; (80046d0 <SDRAM_MspInit+0x224>)
 8004638:	2200      	movs	r2, #0
 800463a:	611a      	str	r2, [r3, #16]
  mdma_handle.Init.SourceInc                = MDMA_SRC_INC_WORD;
 800463c:	4b24      	ldr	r3, [pc, #144]	; (80046d0 <SDRAM_MspInit+0x224>)
 800463e:	f240 2202 	movw	r2, #514	; 0x202
 8004642:	615a      	str	r2, [r3, #20]
  mdma_handle.Init.DestinationInc           = MDMA_DEST_INC_WORD;
 8004644:	4b22      	ldr	r3, [pc, #136]	; (80046d0 <SDRAM_MspInit+0x224>)
 8004646:	f640 0208 	movw	r2, #2056	; 0x808
 800464a:	619a      	str	r2, [r3, #24]
  mdma_handle.Init.SourceDataSize           = MDMA_SRC_DATASIZE_WORD;
 800464c:	4b20      	ldr	r3, [pc, #128]	; (80046d0 <SDRAM_MspInit+0x224>)
 800464e:	2220      	movs	r2, #32
 8004650:	61da      	str	r2, [r3, #28]
  mdma_handle.Init.DestDataSize             = MDMA_DEST_DATASIZE_WORD;
 8004652:	4b1f      	ldr	r3, [pc, #124]	; (80046d0 <SDRAM_MspInit+0x224>)
 8004654:	2280      	movs	r2, #128	; 0x80
 8004656:	621a      	str	r2, [r3, #32]
  mdma_handle.Init.DataAlignment            = MDMA_DATAALIGN_PACKENABLE;
 8004658:	4b1d      	ldr	r3, [pc, #116]	; (80046d0 <SDRAM_MspInit+0x224>)
 800465a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800465e:	625a      	str	r2, [r3, #36]	; 0x24
  mdma_handle.Init.SourceBurst              = MDMA_SOURCE_BURST_SINGLE;
 8004660:	4b1b      	ldr	r3, [pc, #108]	; (80046d0 <SDRAM_MspInit+0x224>)
 8004662:	2200      	movs	r2, #0
 8004664:	62da      	str	r2, [r3, #44]	; 0x2c
  mdma_handle.Init.DestBurst                = MDMA_DEST_BURST_SINGLE;
 8004666:	4b1a      	ldr	r3, [pc, #104]	; (80046d0 <SDRAM_MspInit+0x224>)
 8004668:	2200      	movs	r2, #0
 800466a:	631a      	str	r2, [r3, #48]	; 0x30
  mdma_handle.Init.BufferTransferLength     = 128;
 800466c:	4b18      	ldr	r3, [pc, #96]	; (80046d0 <SDRAM_MspInit+0x224>)
 800466e:	2280      	movs	r2, #128	; 0x80
 8004670:	629a      	str	r2, [r3, #40]	; 0x28
  mdma_handle.Init.SourceBlockAddressOffset = 0;
 8004672:	4b17      	ldr	r3, [pc, #92]	; (80046d0 <SDRAM_MspInit+0x224>)
 8004674:	2200      	movs	r2, #0
 8004676:	635a      	str	r2, [r3, #52]	; 0x34
  mdma_handle.Init.DestBlockAddressOffset   = 0;
 8004678:	4b15      	ldr	r3, [pc, #84]	; (80046d0 <SDRAM_MspInit+0x224>)
 800467a:	2200      	movs	r2, #0
 800467c:	639a      	str	r2, [r3, #56]	; 0x38
  mdma_handle.Instance                      = SDRAM_MDMAx_CHANNEL;
 800467e:	4b14      	ldr	r3, [pc, #80]	; (80046d0 <SDRAM_MspInit+0x224>)
 8004680:	4a14      	ldr	r2, [pc, #80]	; (80046d4 <SDRAM_MspInit+0x228>)
 8004682:	601a      	str	r2, [r3, #0]

   /* Associate the MDMA handle */
  __HAL_LINKDMA(hSdram, hmdma, mdma_handle);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	4a12      	ldr	r2, [pc, #72]	; (80046d0 <SDRAM_MspInit+0x224>)
 8004688:	631a      	str	r2, [r3, #48]	; 0x30
 800468a:	4a11      	ldr	r2, [pc, #68]	; (80046d0 <SDRAM_MspInit+0x224>)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6413      	str	r3, [r2, #64]	; 0x40

  /* De-initialize the Stream for new transfer */
  HAL_MDMA_DeInit(&mdma_handle);
 8004690:	480f      	ldr	r0, [pc, #60]	; (80046d0 <SDRAM_MspInit+0x224>)
 8004692:	f003 fc8d 	bl	8007fb0 <HAL_MDMA_DeInit>

  /* Configure the MDMA stream */
  (void)HAL_MDMA_Init(&mdma_handle);
 8004696:	480e      	ldr	r0, [pc, #56]	; (80046d0 <SDRAM_MspInit+0x224>)
 8004698:	f003 fc3e 	bl	8007f18 <HAL_MDMA_Init>

  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_MDMAx_IRQn, BSP_SDRAM_IT_PRIORITY, 0);
 800469c:	2200      	movs	r2, #0
 800469e:	210f      	movs	r1, #15
 80046a0:	207a      	movs	r0, #122	; 0x7a
 80046a2:	f000 f9a8 	bl	80049f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_MDMAx_IRQn);
 80046a6:	207a      	movs	r0, #122	; 0x7a
 80046a8:	f000 f9bf 	bl	8004a2a <HAL_NVIC_EnableIRQ>
}
 80046ac:	bf00      	nop
 80046ae:	3740      	adds	r7, #64	; 0x40
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bd80      	pop	{r7, pc}
 80046b4:	58024400 	.word	0x58024400
 80046b8:	58020c00 	.word	0x58020c00
 80046bc:	58021000 	.word	0x58021000
 80046c0:	58021400 	.word	0x58021400
 80046c4:	58021800 	.word	0x58021800
 80046c8:	58021c00 	.word	0x58021c00
 80046cc:	58022000 	.word	0x58022000
 80046d0:	24002364 	.word	0x24002364
 80046d4:	52000040 	.word	0x52000040

080046d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b082      	sub	sp, #8
 80046dc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80046de:	2003      	movs	r0, #3
 80046e0:	f000 f97e 	bl	80049e0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80046e4:	f004 fb9e 	bl	8008e24 <HAL_RCC_GetSysClockFreq>
 80046e8:	4602      	mov	r2, r0
 80046ea:	4b15      	ldr	r3, [pc, #84]	; (8004740 <HAL_Init+0x68>)
 80046ec:	699b      	ldr	r3, [r3, #24]
 80046ee:	0a1b      	lsrs	r3, r3, #8
 80046f0:	f003 030f 	and.w	r3, r3, #15
 80046f4:	4913      	ldr	r1, [pc, #76]	; (8004744 <HAL_Init+0x6c>)
 80046f6:	5ccb      	ldrb	r3, [r1, r3]
 80046f8:	f003 031f 	and.w	r3, r3, #31
 80046fc:	fa22 f303 	lsr.w	r3, r2, r3
 8004700:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004702:	4b0f      	ldr	r3, [pc, #60]	; (8004740 <HAL_Init+0x68>)
 8004704:	699b      	ldr	r3, [r3, #24]
 8004706:	f003 030f 	and.w	r3, r3, #15
 800470a:	4a0e      	ldr	r2, [pc, #56]	; (8004744 <HAL_Init+0x6c>)
 800470c:	5cd3      	ldrb	r3, [r2, r3]
 800470e:	f003 031f 	and.w	r3, r3, #31
 8004712:	687a      	ldr	r2, [r7, #4]
 8004714:	fa22 f303 	lsr.w	r3, r2, r3
 8004718:	4a0b      	ldr	r2, [pc, #44]	; (8004748 <HAL_Init+0x70>)
 800471a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800471c:	4a0b      	ldr	r2, [pc, #44]	; (800474c <HAL_Init+0x74>)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004722:	200f      	movs	r0, #15
 8004724:	f7fd fe46 	bl	80023b4 <HAL_InitTick>
 8004728:	4603      	mov	r3, r0
 800472a:	2b00      	cmp	r3, #0
 800472c:	d001      	beq.n	8004732 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800472e:	2301      	movs	r3, #1
 8004730:	e002      	b.n	8004738 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8004732:	f7fd fe25 	bl	8002380 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004736:	2300      	movs	r3, #0
}
 8004738:	4618      	mov	r0, r3
 800473a:	3708      	adds	r7, #8
 800473c:	46bd      	mov	sp, r7
 800473e:	bd80      	pop	{r7, pc}
 8004740:	58024400 	.word	0x58024400
 8004744:	08020e9c 	.word	0x08020e9c
 8004748:	24000004 	.word	0x24000004
 800474c:	24000000 	.word	0x24000000

08004750 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004750:	b480      	push	{r7}
 8004752:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004754:	4b06      	ldr	r3, [pc, #24]	; (8004770 <HAL_IncTick+0x20>)
 8004756:	781b      	ldrb	r3, [r3, #0]
 8004758:	461a      	mov	r2, r3
 800475a:	4b06      	ldr	r3, [pc, #24]	; (8004774 <HAL_IncTick+0x24>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4413      	add	r3, r2
 8004760:	4a04      	ldr	r2, [pc, #16]	; (8004774 <HAL_IncTick+0x24>)
 8004762:	6013      	str	r3, [r2, #0]
}
 8004764:	bf00      	nop
 8004766:	46bd      	mov	sp, r7
 8004768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476c:	4770      	bx	lr
 800476e:	bf00      	nop
 8004770:	2400000c 	.word	0x2400000c
 8004774:	240023d0 	.word	0x240023d0

08004778 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004778:	b480      	push	{r7}
 800477a:	af00      	add	r7, sp, #0
  return uwTick;
 800477c:	4b03      	ldr	r3, [pc, #12]	; (800478c <HAL_GetTick+0x14>)
 800477e:	681b      	ldr	r3, [r3, #0]
}
 8004780:	4618      	mov	r0, r3
 8004782:	46bd      	mov	sp, r7
 8004784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004788:	4770      	bx	lr
 800478a:	bf00      	nop
 800478c:	240023d0 	.word	0x240023d0

08004790 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b084      	sub	sp, #16
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004798:	f7ff ffee 	bl	8004778 <HAL_GetTick>
 800479c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047a8:	d005      	beq.n	80047b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80047aa:	4b0a      	ldr	r3, [pc, #40]	; (80047d4 <HAL_Delay+0x44>)
 80047ac:	781b      	ldrb	r3, [r3, #0]
 80047ae:	461a      	mov	r2, r3
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	4413      	add	r3, r2
 80047b4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80047b6:	bf00      	nop
 80047b8:	f7ff ffde 	bl	8004778 <HAL_GetTick>
 80047bc:	4602      	mov	r2, r0
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	1ad3      	subs	r3, r2, r3
 80047c2:	68fa      	ldr	r2, [r7, #12]
 80047c4:	429a      	cmp	r2, r3
 80047c6:	d8f7      	bhi.n	80047b8 <HAL_Delay+0x28>
  {
  }
}
 80047c8:	bf00      	nop
 80047ca:	bf00      	nop
 80047cc:	3710      	adds	r7, #16
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}
 80047d2:	bf00      	nop
 80047d4:	2400000c 	.word	0x2400000c

080047d8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80047d8:	b480      	push	{r7}
 80047da:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80047dc:	4b03      	ldr	r3, [pc, #12]	; (80047ec <HAL_GetREVID+0x14>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	0c1b      	lsrs	r3, r3, #16
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	46bd      	mov	sp, r7
 80047e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ea:	4770      	bx	lr
 80047ec:	5c001000 	.word	0x5c001000

080047f0 <HAL_EnableCompensationCell>:
  * @note   The I/O compensation cell can be used only when the device supply
  *         voltage ranges from 1.62 to 2.0 V and from 2.7 to 3.6 V.
  * @retval None
  */
void HAL_EnableCompensationCell(void)
{
 80047f0:	b480      	push	{r7}
 80047f2:	af00      	add	r7, sp, #0
  SET_BIT(SYSCFG->CCCSR, SYSCFG_CCCSR_EN) ;
 80047f4:	4b05      	ldr	r3, [pc, #20]	; (800480c <HAL_EnableCompensationCell+0x1c>)
 80047f6:	6a1b      	ldr	r3, [r3, #32]
 80047f8:	4a04      	ldr	r2, [pc, #16]	; (800480c <HAL_EnableCompensationCell+0x1c>)
 80047fa:	f043 0301 	orr.w	r3, r3, #1
 80047fe:	6213      	str	r3, [r2, #32]
}
 8004800:	bf00      	nop
 8004802:	46bd      	mov	sp, r7
 8004804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004808:	4770      	bx	lr
 800480a:	bf00      	nop
 800480c:	58000400 	.word	0x58000400

08004810 <__NVIC_SetPriorityGrouping>:
{
 8004810:	b480      	push	{r7}
 8004812:	b085      	sub	sp, #20
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	f003 0307 	and.w	r3, r3, #7
 800481e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004820:	4b0b      	ldr	r3, [pc, #44]	; (8004850 <__NVIC_SetPriorityGrouping+0x40>)
 8004822:	68db      	ldr	r3, [r3, #12]
 8004824:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004826:	68ba      	ldr	r2, [r7, #8]
 8004828:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800482c:	4013      	ands	r3, r2
 800482e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004838:	4b06      	ldr	r3, [pc, #24]	; (8004854 <__NVIC_SetPriorityGrouping+0x44>)
 800483a:	4313      	orrs	r3, r2
 800483c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800483e:	4a04      	ldr	r2, [pc, #16]	; (8004850 <__NVIC_SetPriorityGrouping+0x40>)
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	60d3      	str	r3, [r2, #12]
}
 8004844:	bf00      	nop
 8004846:	3714      	adds	r7, #20
 8004848:	46bd      	mov	sp, r7
 800484a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484e:	4770      	bx	lr
 8004850:	e000ed00 	.word	0xe000ed00
 8004854:	05fa0000 	.word	0x05fa0000

08004858 <__NVIC_GetPriorityGrouping>:
{
 8004858:	b480      	push	{r7}
 800485a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800485c:	4b04      	ldr	r3, [pc, #16]	; (8004870 <__NVIC_GetPriorityGrouping+0x18>)
 800485e:	68db      	ldr	r3, [r3, #12]
 8004860:	0a1b      	lsrs	r3, r3, #8
 8004862:	f003 0307 	and.w	r3, r3, #7
}
 8004866:	4618      	mov	r0, r3
 8004868:	46bd      	mov	sp, r7
 800486a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486e:	4770      	bx	lr
 8004870:	e000ed00 	.word	0xe000ed00

08004874 <__NVIC_EnableIRQ>:
{
 8004874:	b480      	push	{r7}
 8004876:	b083      	sub	sp, #12
 8004878:	af00      	add	r7, sp, #0
 800487a:	4603      	mov	r3, r0
 800487c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800487e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004882:	2b00      	cmp	r3, #0
 8004884:	db0b      	blt.n	800489e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004886:	88fb      	ldrh	r3, [r7, #6]
 8004888:	f003 021f 	and.w	r2, r3, #31
 800488c:	4907      	ldr	r1, [pc, #28]	; (80048ac <__NVIC_EnableIRQ+0x38>)
 800488e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004892:	095b      	lsrs	r3, r3, #5
 8004894:	2001      	movs	r0, #1
 8004896:	fa00 f202 	lsl.w	r2, r0, r2
 800489a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800489e:	bf00      	nop
 80048a0:	370c      	adds	r7, #12
 80048a2:	46bd      	mov	sp, r7
 80048a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a8:	4770      	bx	lr
 80048aa:	bf00      	nop
 80048ac:	e000e100 	.word	0xe000e100

080048b0 <__NVIC_DisableIRQ>:
{
 80048b0:	b480      	push	{r7}
 80048b2:	b083      	sub	sp, #12
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	4603      	mov	r3, r0
 80048b8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80048ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	db12      	blt.n	80048e8 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80048c2:	88fb      	ldrh	r3, [r7, #6]
 80048c4:	f003 021f 	and.w	r2, r3, #31
 80048c8:	490a      	ldr	r1, [pc, #40]	; (80048f4 <__NVIC_DisableIRQ+0x44>)
 80048ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80048ce:	095b      	lsrs	r3, r3, #5
 80048d0:	2001      	movs	r0, #1
 80048d2:	fa00 f202 	lsl.w	r2, r0, r2
 80048d6:	3320      	adds	r3, #32
 80048d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80048dc:	f3bf 8f4f 	dsb	sy
}
 80048e0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80048e2:	f3bf 8f6f 	isb	sy
}
 80048e6:	bf00      	nop
}
 80048e8:	bf00      	nop
 80048ea:	370c      	adds	r7, #12
 80048ec:	46bd      	mov	sp, r7
 80048ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f2:	4770      	bx	lr
 80048f4:	e000e100 	.word	0xe000e100

080048f8 <__NVIC_SetPriority>:
{
 80048f8:	b480      	push	{r7}
 80048fa:	b083      	sub	sp, #12
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	4603      	mov	r3, r0
 8004900:	6039      	str	r1, [r7, #0]
 8004902:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004904:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004908:	2b00      	cmp	r3, #0
 800490a:	db0a      	blt.n	8004922 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	b2da      	uxtb	r2, r3
 8004910:	490c      	ldr	r1, [pc, #48]	; (8004944 <__NVIC_SetPriority+0x4c>)
 8004912:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004916:	0112      	lsls	r2, r2, #4
 8004918:	b2d2      	uxtb	r2, r2
 800491a:	440b      	add	r3, r1
 800491c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004920:	e00a      	b.n	8004938 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	b2da      	uxtb	r2, r3
 8004926:	4908      	ldr	r1, [pc, #32]	; (8004948 <__NVIC_SetPriority+0x50>)
 8004928:	88fb      	ldrh	r3, [r7, #6]
 800492a:	f003 030f 	and.w	r3, r3, #15
 800492e:	3b04      	subs	r3, #4
 8004930:	0112      	lsls	r2, r2, #4
 8004932:	b2d2      	uxtb	r2, r2
 8004934:	440b      	add	r3, r1
 8004936:	761a      	strb	r2, [r3, #24]
}
 8004938:	bf00      	nop
 800493a:	370c      	adds	r7, #12
 800493c:	46bd      	mov	sp, r7
 800493e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004942:	4770      	bx	lr
 8004944:	e000e100 	.word	0xe000e100
 8004948:	e000ed00 	.word	0xe000ed00

0800494c <NVIC_EncodePriority>:
{
 800494c:	b480      	push	{r7}
 800494e:	b089      	sub	sp, #36	; 0x24
 8004950:	af00      	add	r7, sp, #0
 8004952:	60f8      	str	r0, [r7, #12]
 8004954:	60b9      	str	r1, [r7, #8]
 8004956:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	f003 0307 	and.w	r3, r3, #7
 800495e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004960:	69fb      	ldr	r3, [r7, #28]
 8004962:	f1c3 0307 	rsb	r3, r3, #7
 8004966:	2b04      	cmp	r3, #4
 8004968:	bf28      	it	cs
 800496a:	2304      	movcs	r3, #4
 800496c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800496e:	69fb      	ldr	r3, [r7, #28]
 8004970:	3304      	adds	r3, #4
 8004972:	2b06      	cmp	r3, #6
 8004974:	d902      	bls.n	800497c <NVIC_EncodePriority+0x30>
 8004976:	69fb      	ldr	r3, [r7, #28]
 8004978:	3b03      	subs	r3, #3
 800497a:	e000      	b.n	800497e <NVIC_EncodePriority+0x32>
 800497c:	2300      	movs	r3, #0
 800497e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004980:	f04f 32ff 	mov.w	r2, #4294967295
 8004984:	69bb      	ldr	r3, [r7, #24]
 8004986:	fa02 f303 	lsl.w	r3, r2, r3
 800498a:	43da      	mvns	r2, r3
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	401a      	ands	r2, r3
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004994:	f04f 31ff 	mov.w	r1, #4294967295
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	fa01 f303 	lsl.w	r3, r1, r3
 800499e:	43d9      	mvns	r1, r3
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80049a4:	4313      	orrs	r3, r2
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	3724      	adds	r7, #36	; 0x24
 80049aa:	46bd      	mov	sp, r7
 80049ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b0:	4770      	bx	lr
	...

080049b4 <__NVIC_SystemReset>:
{
 80049b4:	b480      	push	{r7}
 80049b6:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 80049b8:	f3bf 8f4f 	dsb	sy
}
 80049bc:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80049be:	4b06      	ldr	r3, [pc, #24]	; (80049d8 <__NVIC_SystemReset+0x24>)
 80049c0:	68db      	ldr	r3, [r3, #12]
 80049c2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80049c6:	4904      	ldr	r1, [pc, #16]	; (80049d8 <__NVIC_SystemReset+0x24>)
 80049c8:	4b04      	ldr	r3, [pc, #16]	; (80049dc <__NVIC_SystemReset+0x28>)
 80049ca:	4313      	orrs	r3, r2
 80049cc:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80049ce:	f3bf 8f4f 	dsb	sy
}
 80049d2:	bf00      	nop
    __NOP();
 80049d4:	bf00      	nop
 80049d6:	e7fd      	b.n	80049d4 <__NVIC_SystemReset+0x20>
 80049d8:	e000ed00 	.word	0xe000ed00
 80049dc:	05fa0004 	.word	0x05fa0004

080049e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b082      	sub	sp, #8
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80049e8:	6878      	ldr	r0, [r7, #4]
 80049ea:	f7ff ff11 	bl	8004810 <__NVIC_SetPriorityGrouping>
}
 80049ee:	bf00      	nop
 80049f0:	3708      	adds	r7, #8
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}

080049f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80049f6:	b580      	push	{r7, lr}
 80049f8:	b086      	sub	sp, #24
 80049fa:	af00      	add	r7, sp, #0
 80049fc:	4603      	mov	r3, r0
 80049fe:	60b9      	str	r1, [r7, #8]
 8004a00:	607a      	str	r2, [r7, #4]
 8004a02:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004a04:	f7ff ff28 	bl	8004858 <__NVIC_GetPriorityGrouping>
 8004a08:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004a0a:	687a      	ldr	r2, [r7, #4]
 8004a0c:	68b9      	ldr	r1, [r7, #8]
 8004a0e:	6978      	ldr	r0, [r7, #20]
 8004a10:	f7ff ff9c 	bl	800494c <NVIC_EncodePriority>
 8004a14:	4602      	mov	r2, r0
 8004a16:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004a1a:	4611      	mov	r1, r2
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	f7ff ff6b 	bl	80048f8 <__NVIC_SetPriority>
}
 8004a22:	bf00      	nop
 8004a24:	3718      	adds	r7, #24
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bd80      	pop	{r7, pc}

08004a2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a2a:	b580      	push	{r7, lr}
 8004a2c:	b082      	sub	sp, #8
 8004a2e:	af00      	add	r7, sp, #0
 8004a30:	4603      	mov	r3, r0
 8004a32:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004a34:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004a38:	4618      	mov	r0, r3
 8004a3a:	f7ff ff1b 	bl	8004874 <__NVIC_EnableIRQ>
}
 8004a3e:	bf00      	nop
 8004a40:	3708      	adds	r7, #8
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}

08004a46 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004a46:	b580      	push	{r7, lr}
 8004a48:	b082      	sub	sp, #8
 8004a4a:	af00      	add	r7, sp, #0
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004a50:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004a54:	4618      	mov	r0, r3
 8004a56:	f7ff ff2b 	bl	80048b0 <__NVIC_DisableIRQ>
}
 8004a5a:	bf00      	nop
 8004a5c:	3708      	adds	r7, #8
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bd80      	pop	{r7, pc}

08004a62 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8004a62:	b580      	push	{r7, lr}
 8004a64:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8004a66:	f7ff ffa5 	bl	80049b4 <__NVIC_SystemReset>
	...

08004a6c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b086      	sub	sp, #24
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8004a74:	f7ff fe80 	bl	8004778 <HAL_GetTick>
 8004a78:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d101      	bne.n	8004a84 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8004a80:	2301      	movs	r3, #1
 8004a82:	e2dc      	b.n	800503e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004a8a:	b2db      	uxtb	r3, r3
 8004a8c:	2b02      	cmp	r3, #2
 8004a8e:	d008      	beq.n	8004aa2 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2280      	movs	r2, #128	; 0x80
 8004a94:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	e2cd      	b.n	800503e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a76      	ldr	r2, [pc, #472]	; (8004c80 <HAL_DMA_Abort+0x214>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d04a      	beq.n	8004b42 <HAL_DMA_Abort+0xd6>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a74      	ldr	r2, [pc, #464]	; (8004c84 <HAL_DMA_Abort+0x218>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d045      	beq.n	8004b42 <HAL_DMA_Abort+0xd6>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a73      	ldr	r2, [pc, #460]	; (8004c88 <HAL_DMA_Abort+0x21c>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d040      	beq.n	8004b42 <HAL_DMA_Abort+0xd6>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a71      	ldr	r2, [pc, #452]	; (8004c8c <HAL_DMA_Abort+0x220>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d03b      	beq.n	8004b42 <HAL_DMA_Abort+0xd6>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a70      	ldr	r2, [pc, #448]	; (8004c90 <HAL_DMA_Abort+0x224>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d036      	beq.n	8004b42 <HAL_DMA_Abort+0xd6>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a6e      	ldr	r2, [pc, #440]	; (8004c94 <HAL_DMA_Abort+0x228>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d031      	beq.n	8004b42 <HAL_DMA_Abort+0xd6>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a6d      	ldr	r2, [pc, #436]	; (8004c98 <HAL_DMA_Abort+0x22c>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d02c      	beq.n	8004b42 <HAL_DMA_Abort+0xd6>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a6b      	ldr	r2, [pc, #428]	; (8004c9c <HAL_DMA_Abort+0x230>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d027      	beq.n	8004b42 <HAL_DMA_Abort+0xd6>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a6a      	ldr	r2, [pc, #424]	; (8004ca0 <HAL_DMA_Abort+0x234>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d022      	beq.n	8004b42 <HAL_DMA_Abort+0xd6>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a68      	ldr	r2, [pc, #416]	; (8004ca4 <HAL_DMA_Abort+0x238>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d01d      	beq.n	8004b42 <HAL_DMA_Abort+0xd6>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a67      	ldr	r2, [pc, #412]	; (8004ca8 <HAL_DMA_Abort+0x23c>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d018      	beq.n	8004b42 <HAL_DMA_Abort+0xd6>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a65      	ldr	r2, [pc, #404]	; (8004cac <HAL_DMA_Abort+0x240>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d013      	beq.n	8004b42 <HAL_DMA_Abort+0xd6>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a64      	ldr	r2, [pc, #400]	; (8004cb0 <HAL_DMA_Abort+0x244>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d00e      	beq.n	8004b42 <HAL_DMA_Abort+0xd6>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a62      	ldr	r2, [pc, #392]	; (8004cb4 <HAL_DMA_Abort+0x248>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d009      	beq.n	8004b42 <HAL_DMA_Abort+0xd6>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4a61      	ldr	r2, [pc, #388]	; (8004cb8 <HAL_DMA_Abort+0x24c>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d004      	beq.n	8004b42 <HAL_DMA_Abort+0xd6>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a5f      	ldr	r2, [pc, #380]	; (8004cbc <HAL_DMA_Abort+0x250>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d101      	bne.n	8004b46 <HAL_DMA_Abort+0xda>
 8004b42:	2301      	movs	r3, #1
 8004b44:	e000      	b.n	8004b48 <HAL_DMA_Abort+0xdc>
 8004b46:	2300      	movs	r3, #0
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d013      	beq.n	8004b74 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	681a      	ldr	r2, [r3, #0]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f022 021e 	bic.w	r2, r2, #30
 8004b5a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	695a      	ldr	r2, [r3, #20]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004b6a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	617b      	str	r3, [r7, #20]
 8004b72:	e00a      	b.n	8004b8a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f022 020e 	bic.w	r2, r2, #14
 8004b82:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a3c      	ldr	r2, [pc, #240]	; (8004c80 <HAL_DMA_Abort+0x214>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d072      	beq.n	8004c7a <HAL_DMA_Abort+0x20e>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a3a      	ldr	r2, [pc, #232]	; (8004c84 <HAL_DMA_Abort+0x218>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d06d      	beq.n	8004c7a <HAL_DMA_Abort+0x20e>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a39      	ldr	r2, [pc, #228]	; (8004c88 <HAL_DMA_Abort+0x21c>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d068      	beq.n	8004c7a <HAL_DMA_Abort+0x20e>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a37      	ldr	r2, [pc, #220]	; (8004c8c <HAL_DMA_Abort+0x220>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d063      	beq.n	8004c7a <HAL_DMA_Abort+0x20e>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a36      	ldr	r2, [pc, #216]	; (8004c90 <HAL_DMA_Abort+0x224>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d05e      	beq.n	8004c7a <HAL_DMA_Abort+0x20e>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a34      	ldr	r2, [pc, #208]	; (8004c94 <HAL_DMA_Abort+0x228>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d059      	beq.n	8004c7a <HAL_DMA_Abort+0x20e>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a33      	ldr	r2, [pc, #204]	; (8004c98 <HAL_DMA_Abort+0x22c>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d054      	beq.n	8004c7a <HAL_DMA_Abort+0x20e>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a31      	ldr	r2, [pc, #196]	; (8004c9c <HAL_DMA_Abort+0x230>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d04f      	beq.n	8004c7a <HAL_DMA_Abort+0x20e>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a30      	ldr	r2, [pc, #192]	; (8004ca0 <HAL_DMA_Abort+0x234>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d04a      	beq.n	8004c7a <HAL_DMA_Abort+0x20e>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a2e      	ldr	r2, [pc, #184]	; (8004ca4 <HAL_DMA_Abort+0x238>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d045      	beq.n	8004c7a <HAL_DMA_Abort+0x20e>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a2d      	ldr	r2, [pc, #180]	; (8004ca8 <HAL_DMA_Abort+0x23c>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d040      	beq.n	8004c7a <HAL_DMA_Abort+0x20e>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a2b      	ldr	r2, [pc, #172]	; (8004cac <HAL_DMA_Abort+0x240>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d03b      	beq.n	8004c7a <HAL_DMA_Abort+0x20e>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a2a      	ldr	r2, [pc, #168]	; (8004cb0 <HAL_DMA_Abort+0x244>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d036      	beq.n	8004c7a <HAL_DMA_Abort+0x20e>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a28      	ldr	r2, [pc, #160]	; (8004cb4 <HAL_DMA_Abort+0x248>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d031      	beq.n	8004c7a <HAL_DMA_Abort+0x20e>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a27      	ldr	r2, [pc, #156]	; (8004cb8 <HAL_DMA_Abort+0x24c>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d02c      	beq.n	8004c7a <HAL_DMA_Abort+0x20e>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a25      	ldr	r2, [pc, #148]	; (8004cbc <HAL_DMA_Abort+0x250>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d027      	beq.n	8004c7a <HAL_DMA_Abort+0x20e>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a24      	ldr	r2, [pc, #144]	; (8004cc0 <HAL_DMA_Abort+0x254>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d022      	beq.n	8004c7a <HAL_DMA_Abort+0x20e>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a22      	ldr	r2, [pc, #136]	; (8004cc4 <HAL_DMA_Abort+0x258>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d01d      	beq.n	8004c7a <HAL_DMA_Abort+0x20e>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a21      	ldr	r2, [pc, #132]	; (8004cc8 <HAL_DMA_Abort+0x25c>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d018      	beq.n	8004c7a <HAL_DMA_Abort+0x20e>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a1f      	ldr	r2, [pc, #124]	; (8004ccc <HAL_DMA_Abort+0x260>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d013      	beq.n	8004c7a <HAL_DMA_Abort+0x20e>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a1e      	ldr	r2, [pc, #120]	; (8004cd0 <HAL_DMA_Abort+0x264>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d00e      	beq.n	8004c7a <HAL_DMA_Abort+0x20e>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a1c      	ldr	r2, [pc, #112]	; (8004cd4 <HAL_DMA_Abort+0x268>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d009      	beq.n	8004c7a <HAL_DMA_Abort+0x20e>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a1b      	ldr	r2, [pc, #108]	; (8004cd8 <HAL_DMA_Abort+0x26c>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d004      	beq.n	8004c7a <HAL_DMA_Abort+0x20e>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a19      	ldr	r2, [pc, #100]	; (8004cdc <HAL_DMA_Abort+0x270>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d132      	bne.n	8004ce0 <HAL_DMA_Abort+0x274>
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	e031      	b.n	8004ce2 <HAL_DMA_Abort+0x276>
 8004c7e:	bf00      	nop
 8004c80:	40020010 	.word	0x40020010
 8004c84:	40020028 	.word	0x40020028
 8004c88:	40020040 	.word	0x40020040
 8004c8c:	40020058 	.word	0x40020058
 8004c90:	40020070 	.word	0x40020070
 8004c94:	40020088 	.word	0x40020088
 8004c98:	400200a0 	.word	0x400200a0
 8004c9c:	400200b8 	.word	0x400200b8
 8004ca0:	40020410 	.word	0x40020410
 8004ca4:	40020428 	.word	0x40020428
 8004ca8:	40020440 	.word	0x40020440
 8004cac:	40020458 	.word	0x40020458
 8004cb0:	40020470 	.word	0x40020470
 8004cb4:	40020488 	.word	0x40020488
 8004cb8:	400204a0 	.word	0x400204a0
 8004cbc:	400204b8 	.word	0x400204b8
 8004cc0:	58025408 	.word	0x58025408
 8004cc4:	5802541c 	.word	0x5802541c
 8004cc8:	58025430 	.word	0x58025430
 8004ccc:	58025444 	.word	0x58025444
 8004cd0:	58025458 	.word	0x58025458
 8004cd4:	5802546c 	.word	0x5802546c
 8004cd8:	58025480 	.word	0x58025480
 8004cdc:	58025494 	.word	0x58025494
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d007      	beq.n	8004cf6 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cea:	681a      	ldr	r2, [r3, #0]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cf0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004cf4:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a6d      	ldr	r2, [pc, #436]	; (8004eb0 <HAL_DMA_Abort+0x444>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d04a      	beq.n	8004d96 <HAL_DMA_Abort+0x32a>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a6b      	ldr	r2, [pc, #428]	; (8004eb4 <HAL_DMA_Abort+0x448>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d045      	beq.n	8004d96 <HAL_DMA_Abort+0x32a>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a6a      	ldr	r2, [pc, #424]	; (8004eb8 <HAL_DMA_Abort+0x44c>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d040      	beq.n	8004d96 <HAL_DMA_Abort+0x32a>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a68      	ldr	r2, [pc, #416]	; (8004ebc <HAL_DMA_Abort+0x450>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d03b      	beq.n	8004d96 <HAL_DMA_Abort+0x32a>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a67      	ldr	r2, [pc, #412]	; (8004ec0 <HAL_DMA_Abort+0x454>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d036      	beq.n	8004d96 <HAL_DMA_Abort+0x32a>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a65      	ldr	r2, [pc, #404]	; (8004ec4 <HAL_DMA_Abort+0x458>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d031      	beq.n	8004d96 <HAL_DMA_Abort+0x32a>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a64      	ldr	r2, [pc, #400]	; (8004ec8 <HAL_DMA_Abort+0x45c>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d02c      	beq.n	8004d96 <HAL_DMA_Abort+0x32a>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a62      	ldr	r2, [pc, #392]	; (8004ecc <HAL_DMA_Abort+0x460>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d027      	beq.n	8004d96 <HAL_DMA_Abort+0x32a>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a61      	ldr	r2, [pc, #388]	; (8004ed0 <HAL_DMA_Abort+0x464>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d022      	beq.n	8004d96 <HAL_DMA_Abort+0x32a>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a5f      	ldr	r2, [pc, #380]	; (8004ed4 <HAL_DMA_Abort+0x468>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d01d      	beq.n	8004d96 <HAL_DMA_Abort+0x32a>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a5e      	ldr	r2, [pc, #376]	; (8004ed8 <HAL_DMA_Abort+0x46c>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d018      	beq.n	8004d96 <HAL_DMA_Abort+0x32a>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a5c      	ldr	r2, [pc, #368]	; (8004edc <HAL_DMA_Abort+0x470>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d013      	beq.n	8004d96 <HAL_DMA_Abort+0x32a>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a5b      	ldr	r2, [pc, #364]	; (8004ee0 <HAL_DMA_Abort+0x474>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d00e      	beq.n	8004d96 <HAL_DMA_Abort+0x32a>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a59      	ldr	r2, [pc, #356]	; (8004ee4 <HAL_DMA_Abort+0x478>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d009      	beq.n	8004d96 <HAL_DMA_Abort+0x32a>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a58      	ldr	r2, [pc, #352]	; (8004ee8 <HAL_DMA_Abort+0x47c>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d004      	beq.n	8004d96 <HAL_DMA_Abort+0x32a>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a56      	ldr	r2, [pc, #344]	; (8004eec <HAL_DMA_Abort+0x480>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d108      	bne.n	8004da8 <HAL_DMA_Abort+0x33c>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	681a      	ldr	r2, [r3, #0]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f022 0201 	bic.w	r2, r2, #1
 8004da4:	601a      	str	r2, [r3, #0]
 8004da6:	e007      	b.n	8004db8 <HAL_DMA_Abort+0x34c>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	681a      	ldr	r2, [r3, #0]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f022 0201 	bic.w	r2, r2, #1
 8004db6:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004db8:	e013      	b.n	8004de2 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004dba:	f7ff fcdd 	bl	8004778 <HAL_GetTick>
 8004dbe:	4602      	mov	r2, r0
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	1ad3      	subs	r3, r2, r3
 8004dc4:	2b05      	cmp	r3, #5
 8004dc6:	d90c      	bls.n	8004de2 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2220      	movs	r2, #32
 8004dcc:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2203      	movs	r2, #3
 8004dd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8004dde:	2301      	movs	r3, #1
 8004de0:	e12d      	b.n	800503e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f003 0301 	and.w	r3, r3, #1
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d1e5      	bne.n	8004dba <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4a2f      	ldr	r2, [pc, #188]	; (8004eb0 <HAL_DMA_Abort+0x444>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d04a      	beq.n	8004e8e <HAL_DMA_Abort+0x422>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a2d      	ldr	r2, [pc, #180]	; (8004eb4 <HAL_DMA_Abort+0x448>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d045      	beq.n	8004e8e <HAL_DMA_Abort+0x422>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a2c      	ldr	r2, [pc, #176]	; (8004eb8 <HAL_DMA_Abort+0x44c>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d040      	beq.n	8004e8e <HAL_DMA_Abort+0x422>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a2a      	ldr	r2, [pc, #168]	; (8004ebc <HAL_DMA_Abort+0x450>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d03b      	beq.n	8004e8e <HAL_DMA_Abort+0x422>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a29      	ldr	r2, [pc, #164]	; (8004ec0 <HAL_DMA_Abort+0x454>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d036      	beq.n	8004e8e <HAL_DMA_Abort+0x422>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a27      	ldr	r2, [pc, #156]	; (8004ec4 <HAL_DMA_Abort+0x458>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d031      	beq.n	8004e8e <HAL_DMA_Abort+0x422>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a26      	ldr	r2, [pc, #152]	; (8004ec8 <HAL_DMA_Abort+0x45c>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d02c      	beq.n	8004e8e <HAL_DMA_Abort+0x422>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a24      	ldr	r2, [pc, #144]	; (8004ecc <HAL_DMA_Abort+0x460>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d027      	beq.n	8004e8e <HAL_DMA_Abort+0x422>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a23      	ldr	r2, [pc, #140]	; (8004ed0 <HAL_DMA_Abort+0x464>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d022      	beq.n	8004e8e <HAL_DMA_Abort+0x422>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a21      	ldr	r2, [pc, #132]	; (8004ed4 <HAL_DMA_Abort+0x468>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d01d      	beq.n	8004e8e <HAL_DMA_Abort+0x422>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a20      	ldr	r2, [pc, #128]	; (8004ed8 <HAL_DMA_Abort+0x46c>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d018      	beq.n	8004e8e <HAL_DMA_Abort+0x422>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a1e      	ldr	r2, [pc, #120]	; (8004edc <HAL_DMA_Abort+0x470>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d013      	beq.n	8004e8e <HAL_DMA_Abort+0x422>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a1d      	ldr	r2, [pc, #116]	; (8004ee0 <HAL_DMA_Abort+0x474>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d00e      	beq.n	8004e8e <HAL_DMA_Abort+0x422>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a1b      	ldr	r2, [pc, #108]	; (8004ee4 <HAL_DMA_Abort+0x478>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d009      	beq.n	8004e8e <HAL_DMA_Abort+0x422>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a1a      	ldr	r2, [pc, #104]	; (8004ee8 <HAL_DMA_Abort+0x47c>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d004      	beq.n	8004e8e <HAL_DMA_Abort+0x422>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a18      	ldr	r2, [pc, #96]	; (8004eec <HAL_DMA_Abort+0x480>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d101      	bne.n	8004e92 <HAL_DMA_Abort+0x426>
 8004e8e:	2301      	movs	r3, #1
 8004e90:	e000      	b.n	8004e94 <HAL_DMA_Abort+0x428>
 8004e92:	2300      	movs	r3, #0
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d02b      	beq.n	8004ef0 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e9c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ea2:	f003 031f 	and.w	r3, r3, #31
 8004ea6:	223f      	movs	r2, #63	; 0x3f
 8004ea8:	409a      	lsls	r2, r3
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	609a      	str	r2, [r3, #8]
 8004eae:	e02a      	b.n	8004f06 <HAL_DMA_Abort+0x49a>
 8004eb0:	40020010 	.word	0x40020010
 8004eb4:	40020028 	.word	0x40020028
 8004eb8:	40020040 	.word	0x40020040
 8004ebc:	40020058 	.word	0x40020058
 8004ec0:	40020070 	.word	0x40020070
 8004ec4:	40020088 	.word	0x40020088
 8004ec8:	400200a0 	.word	0x400200a0
 8004ecc:	400200b8 	.word	0x400200b8
 8004ed0:	40020410 	.word	0x40020410
 8004ed4:	40020428 	.word	0x40020428
 8004ed8:	40020440 	.word	0x40020440
 8004edc:	40020458 	.word	0x40020458
 8004ee0:	40020470 	.word	0x40020470
 8004ee4:	40020488 	.word	0x40020488
 8004ee8:	400204a0 	.word	0x400204a0
 8004eec:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ef4:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004efa:	f003 031f 	and.w	r3, r3, #31
 8004efe:	2201      	movs	r2, #1
 8004f00:	409a      	lsls	r2, r3
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a4f      	ldr	r2, [pc, #316]	; (8005048 <HAL_DMA_Abort+0x5dc>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d072      	beq.n	8004ff6 <HAL_DMA_Abort+0x58a>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a4d      	ldr	r2, [pc, #308]	; (800504c <HAL_DMA_Abort+0x5e0>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d06d      	beq.n	8004ff6 <HAL_DMA_Abort+0x58a>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a4c      	ldr	r2, [pc, #304]	; (8005050 <HAL_DMA_Abort+0x5e4>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d068      	beq.n	8004ff6 <HAL_DMA_Abort+0x58a>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a4a      	ldr	r2, [pc, #296]	; (8005054 <HAL_DMA_Abort+0x5e8>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d063      	beq.n	8004ff6 <HAL_DMA_Abort+0x58a>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a49      	ldr	r2, [pc, #292]	; (8005058 <HAL_DMA_Abort+0x5ec>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d05e      	beq.n	8004ff6 <HAL_DMA_Abort+0x58a>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a47      	ldr	r2, [pc, #284]	; (800505c <HAL_DMA_Abort+0x5f0>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d059      	beq.n	8004ff6 <HAL_DMA_Abort+0x58a>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a46      	ldr	r2, [pc, #280]	; (8005060 <HAL_DMA_Abort+0x5f4>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d054      	beq.n	8004ff6 <HAL_DMA_Abort+0x58a>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a44      	ldr	r2, [pc, #272]	; (8005064 <HAL_DMA_Abort+0x5f8>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d04f      	beq.n	8004ff6 <HAL_DMA_Abort+0x58a>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a43      	ldr	r2, [pc, #268]	; (8005068 <HAL_DMA_Abort+0x5fc>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d04a      	beq.n	8004ff6 <HAL_DMA_Abort+0x58a>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a41      	ldr	r2, [pc, #260]	; (800506c <HAL_DMA_Abort+0x600>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d045      	beq.n	8004ff6 <HAL_DMA_Abort+0x58a>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a40      	ldr	r2, [pc, #256]	; (8005070 <HAL_DMA_Abort+0x604>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d040      	beq.n	8004ff6 <HAL_DMA_Abort+0x58a>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a3e      	ldr	r2, [pc, #248]	; (8005074 <HAL_DMA_Abort+0x608>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d03b      	beq.n	8004ff6 <HAL_DMA_Abort+0x58a>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a3d      	ldr	r2, [pc, #244]	; (8005078 <HAL_DMA_Abort+0x60c>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d036      	beq.n	8004ff6 <HAL_DMA_Abort+0x58a>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a3b      	ldr	r2, [pc, #236]	; (800507c <HAL_DMA_Abort+0x610>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d031      	beq.n	8004ff6 <HAL_DMA_Abort+0x58a>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4a3a      	ldr	r2, [pc, #232]	; (8005080 <HAL_DMA_Abort+0x614>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d02c      	beq.n	8004ff6 <HAL_DMA_Abort+0x58a>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a38      	ldr	r2, [pc, #224]	; (8005084 <HAL_DMA_Abort+0x618>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d027      	beq.n	8004ff6 <HAL_DMA_Abort+0x58a>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a37      	ldr	r2, [pc, #220]	; (8005088 <HAL_DMA_Abort+0x61c>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d022      	beq.n	8004ff6 <HAL_DMA_Abort+0x58a>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a35      	ldr	r2, [pc, #212]	; (800508c <HAL_DMA_Abort+0x620>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d01d      	beq.n	8004ff6 <HAL_DMA_Abort+0x58a>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a34      	ldr	r2, [pc, #208]	; (8005090 <HAL_DMA_Abort+0x624>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d018      	beq.n	8004ff6 <HAL_DMA_Abort+0x58a>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a32      	ldr	r2, [pc, #200]	; (8005094 <HAL_DMA_Abort+0x628>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d013      	beq.n	8004ff6 <HAL_DMA_Abort+0x58a>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a31      	ldr	r2, [pc, #196]	; (8005098 <HAL_DMA_Abort+0x62c>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d00e      	beq.n	8004ff6 <HAL_DMA_Abort+0x58a>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a2f      	ldr	r2, [pc, #188]	; (800509c <HAL_DMA_Abort+0x630>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d009      	beq.n	8004ff6 <HAL_DMA_Abort+0x58a>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a2e      	ldr	r2, [pc, #184]	; (80050a0 <HAL_DMA_Abort+0x634>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d004      	beq.n	8004ff6 <HAL_DMA_Abort+0x58a>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a2c      	ldr	r2, [pc, #176]	; (80050a4 <HAL_DMA_Abort+0x638>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d101      	bne.n	8004ffa <HAL_DMA_Abort+0x58e>
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	e000      	b.n	8004ffc <HAL_DMA_Abort+0x590>
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d015      	beq.n	800502c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005004:	687a      	ldr	r2, [r7, #4]
 8005006:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005008:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800500e:	2b00      	cmp	r3, #0
 8005010:	d00c      	beq.n	800502c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005016:	681a      	ldr	r2, [r3, #0]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800501c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005020:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005026:	687a      	ldr	r2, [r7, #4]
 8005028:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800502a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2201      	movs	r2, #1
 8005030:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2200      	movs	r2, #0
 8005038:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 800503c:	2300      	movs	r3, #0
}
 800503e:	4618      	mov	r0, r3
 8005040:	3718      	adds	r7, #24
 8005042:	46bd      	mov	sp, r7
 8005044:	bd80      	pop	{r7, pc}
 8005046:	bf00      	nop
 8005048:	40020010 	.word	0x40020010
 800504c:	40020028 	.word	0x40020028
 8005050:	40020040 	.word	0x40020040
 8005054:	40020058 	.word	0x40020058
 8005058:	40020070 	.word	0x40020070
 800505c:	40020088 	.word	0x40020088
 8005060:	400200a0 	.word	0x400200a0
 8005064:	400200b8 	.word	0x400200b8
 8005068:	40020410 	.word	0x40020410
 800506c:	40020428 	.word	0x40020428
 8005070:	40020440 	.word	0x40020440
 8005074:	40020458 	.word	0x40020458
 8005078:	40020470 	.word	0x40020470
 800507c:	40020488 	.word	0x40020488
 8005080:	400204a0 	.word	0x400204a0
 8005084:	400204b8 	.word	0x400204b8
 8005088:	58025408 	.word	0x58025408
 800508c:	5802541c 	.word	0x5802541c
 8005090:	58025430 	.word	0x58025430
 8005094:	58025444 	.word	0x58025444
 8005098:	58025458 	.word	0x58025458
 800509c:	5802546c 	.word	0x5802546c
 80050a0:	58025480 	.word	0x58025480
 80050a4:	58025494 	.word	0x58025494

080050a8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b084      	sub	sp, #16
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d101      	bne.n	80050ba <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80050b6:	2301      	movs	r3, #1
 80050b8:	e237      	b.n	800552a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80050c0:	b2db      	uxtb	r3, r3
 80050c2:	2b02      	cmp	r3, #2
 80050c4:	d004      	beq.n	80050d0 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2280      	movs	r2, #128	; 0x80
 80050ca:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80050cc:	2301      	movs	r3, #1
 80050ce:	e22c      	b.n	800552a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a5c      	ldr	r2, [pc, #368]	; (8005248 <HAL_DMA_Abort_IT+0x1a0>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d04a      	beq.n	8005170 <HAL_DMA_Abort_IT+0xc8>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4a5b      	ldr	r2, [pc, #364]	; (800524c <HAL_DMA_Abort_IT+0x1a4>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d045      	beq.n	8005170 <HAL_DMA_Abort_IT+0xc8>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a59      	ldr	r2, [pc, #356]	; (8005250 <HAL_DMA_Abort_IT+0x1a8>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d040      	beq.n	8005170 <HAL_DMA_Abort_IT+0xc8>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4a58      	ldr	r2, [pc, #352]	; (8005254 <HAL_DMA_Abort_IT+0x1ac>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d03b      	beq.n	8005170 <HAL_DMA_Abort_IT+0xc8>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4a56      	ldr	r2, [pc, #344]	; (8005258 <HAL_DMA_Abort_IT+0x1b0>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d036      	beq.n	8005170 <HAL_DMA_Abort_IT+0xc8>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4a55      	ldr	r2, [pc, #340]	; (800525c <HAL_DMA_Abort_IT+0x1b4>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d031      	beq.n	8005170 <HAL_DMA_Abort_IT+0xc8>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a53      	ldr	r2, [pc, #332]	; (8005260 <HAL_DMA_Abort_IT+0x1b8>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d02c      	beq.n	8005170 <HAL_DMA_Abort_IT+0xc8>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a52      	ldr	r2, [pc, #328]	; (8005264 <HAL_DMA_Abort_IT+0x1bc>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d027      	beq.n	8005170 <HAL_DMA_Abort_IT+0xc8>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4a50      	ldr	r2, [pc, #320]	; (8005268 <HAL_DMA_Abort_IT+0x1c0>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d022      	beq.n	8005170 <HAL_DMA_Abort_IT+0xc8>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4a4f      	ldr	r2, [pc, #316]	; (800526c <HAL_DMA_Abort_IT+0x1c4>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d01d      	beq.n	8005170 <HAL_DMA_Abort_IT+0xc8>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a4d      	ldr	r2, [pc, #308]	; (8005270 <HAL_DMA_Abort_IT+0x1c8>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d018      	beq.n	8005170 <HAL_DMA_Abort_IT+0xc8>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a4c      	ldr	r2, [pc, #304]	; (8005274 <HAL_DMA_Abort_IT+0x1cc>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d013      	beq.n	8005170 <HAL_DMA_Abort_IT+0xc8>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a4a      	ldr	r2, [pc, #296]	; (8005278 <HAL_DMA_Abort_IT+0x1d0>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d00e      	beq.n	8005170 <HAL_DMA_Abort_IT+0xc8>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a49      	ldr	r2, [pc, #292]	; (800527c <HAL_DMA_Abort_IT+0x1d4>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d009      	beq.n	8005170 <HAL_DMA_Abort_IT+0xc8>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a47      	ldr	r2, [pc, #284]	; (8005280 <HAL_DMA_Abort_IT+0x1d8>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d004      	beq.n	8005170 <HAL_DMA_Abort_IT+0xc8>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a46      	ldr	r2, [pc, #280]	; (8005284 <HAL_DMA_Abort_IT+0x1dc>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d101      	bne.n	8005174 <HAL_DMA_Abort_IT+0xcc>
 8005170:	2301      	movs	r3, #1
 8005172:	e000      	b.n	8005176 <HAL_DMA_Abort_IT+0xce>
 8005174:	2300      	movs	r3, #0
 8005176:	2b00      	cmp	r3, #0
 8005178:	f000 8086 	beq.w	8005288 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2204      	movs	r2, #4
 8005180:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a2f      	ldr	r2, [pc, #188]	; (8005248 <HAL_DMA_Abort_IT+0x1a0>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d04a      	beq.n	8005224 <HAL_DMA_Abort_IT+0x17c>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4a2e      	ldr	r2, [pc, #184]	; (800524c <HAL_DMA_Abort_IT+0x1a4>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d045      	beq.n	8005224 <HAL_DMA_Abort_IT+0x17c>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a2c      	ldr	r2, [pc, #176]	; (8005250 <HAL_DMA_Abort_IT+0x1a8>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d040      	beq.n	8005224 <HAL_DMA_Abort_IT+0x17c>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a2b      	ldr	r2, [pc, #172]	; (8005254 <HAL_DMA_Abort_IT+0x1ac>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d03b      	beq.n	8005224 <HAL_DMA_Abort_IT+0x17c>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a29      	ldr	r2, [pc, #164]	; (8005258 <HAL_DMA_Abort_IT+0x1b0>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d036      	beq.n	8005224 <HAL_DMA_Abort_IT+0x17c>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a28      	ldr	r2, [pc, #160]	; (800525c <HAL_DMA_Abort_IT+0x1b4>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d031      	beq.n	8005224 <HAL_DMA_Abort_IT+0x17c>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a26      	ldr	r2, [pc, #152]	; (8005260 <HAL_DMA_Abort_IT+0x1b8>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d02c      	beq.n	8005224 <HAL_DMA_Abort_IT+0x17c>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a25      	ldr	r2, [pc, #148]	; (8005264 <HAL_DMA_Abort_IT+0x1bc>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d027      	beq.n	8005224 <HAL_DMA_Abort_IT+0x17c>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a23      	ldr	r2, [pc, #140]	; (8005268 <HAL_DMA_Abort_IT+0x1c0>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d022      	beq.n	8005224 <HAL_DMA_Abort_IT+0x17c>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4a22      	ldr	r2, [pc, #136]	; (800526c <HAL_DMA_Abort_IT+0x1c4>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d01d      	beq.n	8005224 <HAL_DMA_Abort_IT+0x17c>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a20      	ldr	r2, [pc, #128]	; (8005270 <HAL_DMA_Abort_IT+0x1c8>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d018      	beq.n	8005224 <HAL_DMA_Abort_IT+0x17c>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4a1f      	ldr	r2, [pc, #124]	; (8005274 <HAL_DMA_Abort_IT+0x1cc>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d013      	beq.n	8005224 <HAL_DMA_Abort_IT+0x17c>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a1d      	ldr	r2, [pc, #116]	; (8005278 <HAL_DMA_Abort_IT+0x1d0>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d00e      	beq.n	8005224 <HAL_DMA_Abort_IT+0x17c>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a1c      	ldr	r2, [pc, #112]	; (800527c <HAL_DMA_Abort_IT+0x1d4>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d009      	beq.n	8005224 <HAL_DMA_Abort_IT+0x17c>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a1a      	ldr	r2, [pc, #104]	; (8005280 <HAL_DMA_Abort_IT+0x1d8>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d004      	beq.n	8005224 <HAL_DMA_Abort_IT+0x17c>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a19      	ldr	r2, [pc, #100]	; (8005284 <HAL_DMA_Abort_IT+0x1dc>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d108      	bne.n	8005236 <HAL_DMA_Abort_IT+0x18e>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	681a      	ldr	r2, [r3, #0]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f022 0201 	bic.w	r2, r2, #1
 8005232:	601a      	str	r2, [r3, #0]
 8005234:	e178      	b.n	8005528 <HAL_DMA_Abort_IT+0x480>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	681a      	ldr	r2, [r3, #0]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f022 0201 	bic.w	r2, r2, #1
 8005244:	601a      	str	r2, [r3, #0]
 8005246:	e16f      	b.n	8005528 <HAL_DMA_Abort_IT+0x480>
 8005248:	40020010 	.word	0x40020010
 800524c:	40020028 	.word	0x40020028
 8005250:	40020040 	.word	0x40020040
 8005254:	40020058 	.word	0x40020058
 8005258:	40020070 	.word	0x40020070
 800525c:	40020088 	.word	0x40020088
 8005260:	400200a0 	.word	0x400200a0
 8005264:	400200b8 	.word	0x400200b8
 8005268:	40020410 	.word	0x40020410
 800526c:	40020428 	.word	0x40020428
 8005270:	40020440 	.word	0x40020440
 8005274:	40020458 	.word	0x40020458
 8005278:	40020470 	.word	0x40020470
 800527c:	40020488 	.word	0x40020488
 8005280:	400204a0 	.word	0x400204a0
 8005284:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	681a      	ldr	r2, [r3, #0]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f022 020e 	bic.w	r2, r2, #14
 8005296:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a6c      	ldr	r2, [pc, #432]	; (8005450 <HAL_DMA_Abort_IT+0x3a8>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d04a      	beq.n	8005338 <HAL_DMA_Abort_IT+0x290>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a6b      	ldr	r2, [pc, #428]	; (8005454 <HAL_DMA_Abort_IT+0x3ac>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d045      	beq.n	8005338 <HAL_DMA_Abort_IT+0x290>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a69      	ldr	r2, [pc, #420]	; (8005458 <HAL_DMA_Abort_IT+0x3b0>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d040      	beq.n	8005338 <HAL_DMA_Abort_IT+0x290>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a68      	ldr	r2, [pc, #416]	; (800545c <HAL_DMA_Abort_IT+0x3b4>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d03b      	beq.n	8005338 <HAL_DMA_Abort_IT+0x290>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a66      	ldr	r2, [pc, #408]	; (8005460 <HAL_DMA_Abort_IT+0x3b8>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d036      	beq.n	8005338 <HAL_DMA_Abort_IT+0x290>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4a65      	ldr	r2, [pc, #404]	; (8005464 <HAL_DMA_Abort_IT+0x3bc>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d031      	beq.n	8005338 <HAL_DMA_Abort_IT+0x290>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a63      	ldr	r2, [pc, #396]	; (8005468 <HAL_DMA_Abort_IT+0x3c0>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d02c      	beq.n	8005338 <HAL_DMA_Abort_IT+0x290>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4a62      	ldr	r2, [pc, #392]	; (800546c <HAL_DMA_Abort_IT+0x3c4>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d027      	beq.n	8005338 <HAL_DMA_Abort_IT+0x290>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4a60      	ldr	r2, [pc, #384]	; (8005470 <HAL_DMA_Abort_IT+0x3c8>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d022      	beq.n	8005338 <HAL_DMA_Abort_IT+0x290>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4a5f      	ldr	r2, [pc, #380]	; (8005474 <HAL_DMA_Abort_IT+0x3cc>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d01d      	beq.n	8005338 <HAL_DMA_Abort_IT+0x290>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a5d      	ldr	r2, [pc, #372]	; (8005478 <HAL_DMA_Abort_IT+0x3d0>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d018      	beq.n	8005338 <HAL_DMA_Abort_IT+0x290>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4a5c      	ldr	r2, [pc, #368]	; (800547c <HAL_DMA_Abort_IT+0x3d4>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d013      	beq.n	8005338 <HAL_DMA_Abort_IT+0x290>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a5a      	ldr	r2, [pc, #360]	; (8005480 <HAL_DMA_Abort_IT+0x3d8>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d00e      	beq.n	8005338 <HAL_DMA_Abort_IT+0x290>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a59      	ldr	r2, [pc, #356]	; (8005484 <HAL_DMA_Abort_IT+0x3dc>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d009      	beq.n	8005338 <HAL_DMA_Abort_IT+0x290>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a57      	ldr	r2, [pc, #348]	; (8005488 <HAL_DMA_Abort_IT+0x3e0>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d004      	beq.n	8005338 <HAL_DMA_Abort_IT+0x290>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4a56      	ldr	r2, [pc, #344]	; (800548c <HAL_DMA_Abort_IT+0x3e4>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d108      	bne.n	800534a <HAL_DMA_Abort_IT+0x2a2>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	681a      	ldr	r2, [r3, #0]
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f022 0201 	bic.w	r2, r2, #1
 8005346:	601a      	str	r2, [r3, #0]
 8005348:	e007      	b.n	800535a <HAL_DMA_Abort_IT+0x2b2>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	681a      	ldr	r2, [r3, #0]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f022 0201 	bic.w	r2, r2, #1
 8005358:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a3c      	ldr	r2, [pc, #240]	; (8005450 <HAL_DMA_Abort_IT+0x3a8>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d072      	beq.n	800544a <HAL_DMA_Abort_IT+0x3a2>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a3a      	ldr	r2, [pc, #232]	; (8005454 <HAL_DMA_Abort_IT+0x3ac>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d06d      	beq.n	800544a <HAL_DMA_Abort_IT+0x3a2>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a39      	ldr	r2, [pc, #228]	; (8005458 <HAL_DMA_Abort_IT+0x3b0>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d068      	beq.n	800544a <HAL_DMA_Abort_IT+0x3a2>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a37      	ldr	r2, [pc, #220]	; (800545c <HAL_DMA_Abort_IT+0x3b4>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d063      	beq.n	800544a <HAL_DMA_Abort_IT+0x3a2>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a36      	ldr	r2, [pc, #216]	; (8005460 <HAL_DMA_Abort_IT+0x3b8>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d05e      	beq.n	800544a <HAL_DMA_Abort_IT+0x3a2>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a34      	ldr	r2, [pc, #208]	; (8005464 <HAL_DMA_Abort_IT+0x3bc>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d059      	beq.n	800544a <HAL_DMA_Abort_IT+0x3a2>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a33      	ldr	r2, [pc, #204]	; (8005468 <HAL_DMA_Abort_IT+0x3c0>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d054      	beq.n	800544a <HAL_DMA_Abort_IT+0x3a2>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a31      	ldr	r2, [pc, #196]	; (800546c <HAL_DMA_Abort_IT+0x3c4>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d04f      	beq.n	800544a <HAL_DMA_Abort_IT+0x3a2>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a30      	ldr	r2, [pc, #192]	; (8005470 <HAL_DMA_Abort_IT+0x3c8>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d04a      	beq.n	800544a <HAL_DMA_Abort_IT+0x3a2>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a2e      	ldr	r2, [pc, #184]	; (8005474 <HAL_DMA_Abort_IT+0x3cc>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d045      	beq.n	800544a <HAL_DMA_Abort_IT+0x3a2>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a2d      	ldr	r2, [pc, #180]	; (8005478 <HAL_DMA_Abort_IT+0x3d0>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d040      	beq.n	800544a <HAL_DMA_Abort_IT+0x3a2>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a2b      	ldr	r2, [pc, #172]	; (800547c <HAL_DMA_Abort_IT+0x3d4>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d03b      	beq.n	800544a <HAL_DMA_Abort_IT+0x3a2>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a2a      	ldr	r2, [pc, #168]	; (8005480 <HAL_DMA_Abort_IT+0x3d8>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d036      	beq.n	800544a <HAL_DMA_Abort_IT+0x3a2>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a28      	ldr	r2, [pc, #160]	; (8005484 <HAL_DMA_Abort_IT+0x3dc>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d031      	beq.n	800544a <HAL_DMA_Abort_IT+0x3a2>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a27      	ldr	r2, [pc, #156]	; (8005488 <HAL_DMA_Abort_IT+0x3e0>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d02c      	beq.n	800544a <HAL_DMA_Abort_IT+0x3a2>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a25      	ldr	r2, [pc, #148]	; (800548c <HAL_DMA_Abort_IT+0x3e4>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d027      	beq.n	800544a <HAL_DMA_Abort_IT+0x3a2>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4a24      	ldr	r2, [pc, #144]	; (8005490 <HAL_DMA_Abort_IT+0x3e8>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d022      	beq.n	800544a <HAL_DMA_Abort_IT+0x3a2>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a22      	ldr	r2, [pc, #136]	; (8005494 <HAL_DMA_Abort_IT+0x3ec>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d01d      	beq.n	800544a <HAL_DMA_Abort_IT+0x3a2>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4a21      	ldr	r2, [pc, #132]	; (8005498 <HAL_DMA_Abort_IT+0x3f0>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d018      	beq.n	800544a <HAL_DMA_Abort_IT+0x3a2>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a1f      	ldr	r2, [pc, #124]	; (800549c <HAL_DMA_Abort_IT+0x3f4>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d013      	beq.n	800544a <HAL_DMA_Abort_IT+0x3a2>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a1e      	ldr	r2, [pc, #120]	; (80054a0 <HAL_DMA_Abort_IT+0x3f8>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d00e      	beq.n	800544a <HAL_DMA_Abort_IT+0x3a2>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a1c      	ldr	r2, [pc, #112]	; (80054a4 <HAL_DMA_Abort_IT+0x3fc>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d009      	beq.n	800544a <HAL_DMA_Abort_IT+0x3a2>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a1b      	ldr	r2, [pc, #108]	; (80054a8 <HAL_DMA_Abort_IT+0x400>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d004      	beq.n	800544a <HAL_DMA_Abort_IT+0x3a2>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a19      	ldr	r2, [pc, #100]	; (80054ac <HAL_DMA_Abort_IT+0x404>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d132      	bne.n	80054b0 <HAL_DMA_Abort_IT+0x408>
 800544a:	2301      	movs	r3, #1
 800544c:	e031      	b.n	80054b2 <HAL_DMA_Abort_IT+0x40a>
 800544e:	bf00      	nop
 8005450:	40020010 	.word	0x40020010
 8005454:	40020028 	.word	0x40020028
 8005458:	40020040 	.word	0x40020040
 800545c:	40020058 	.word	0x40020058
 8005460:	40020070 	.word	0x40020070
 8005464:	40020088 	.word	0x40020088
 8005468:	400200a0 	.word	0x400200a0
 800546c:	400200b8 	.word	0x400200b8
 8005470:	40020410 	.word	0x40020410
 8005474:	40020428 	.word	0x40020428
 8005478:	40020440 	.word	0x40020440
 800547c:	40020458 	.word	0x40020458
 8005480:	40020470 	.word	0x40020470
 8005484:	40020488 	.word	0x40020488
 8005488:	400204a0 	.word	0x400204a0
 800548c:	400204b8 	.word	0x400204b8
 8005490:	58025408 	.word	0x58025408
 8005494:	5802541c 	.word	0x5802541c
 8005498:	58025430 	.word	0x58025430
 800549c:	58025444 	.word	0x58025444
 80054a0:	58025458 	.word	0x58025458
 80054a4:	5802546c 	.word	0x5802546c
 80054a8:	58025480 	.word	0x58025480
 80054ac:	58025494 	.word	0x58025494
 80054b0:	2300      	movs	r3, #0
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d028      	beq.n	8005508 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054ba:	681a      	ldr	r2, [r3, #0]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80054c4:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054ca:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054d0:	f003 031f 	and.w	r3, r3, #31
 80054d4:	2201      	movs	r2, #1
 80054d6:	409a      	lsls	r2, r3
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80054e0:	687a      	ldr	r2, [r7, #4]
 80054e2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80054e4:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d00c      	beq.n	8005508 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054f2:	681a      	ldr	r2, [r3, #0]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80054fc:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005502:	687a      	ldr	r2, [r7, #4]
 8005504:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005506:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2201      	movs	r2, #1
 800550c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2200      	movs	r2, #0
 8005514:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800551c:	2b00      	cmp	r3, #0
 800551e:	d003      	beq.n	8005528 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005524:	6878      	ldr	r0, [r7, #4]
 8005526:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8005528:	2300      	movs	r3, #0
}
 800552a:	4618      	mov	r0, r3
 800552c:	3710      	adds	r7, #16
 800552e:	46bd      	mov	sp, r7
 8005530:	bd80      	pop	{r7, pc}
 8005532:	bf00      	nop

08005534 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b082      	sub	sp, #8
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d101      	bne.n	8005546 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8005542:	2301      	movs	r3, #1
 8005544:	e04f      	b.n	80055e6 <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800554c:	b2db      	uxtb	r3, r3
 800554e:	2b00      	cmp	r3, #0
 8005550:	d106      	bne.n	8005560 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2200      	movs	r2, #0
 8005556:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800555a:	6878      	ldr	r0, [r7, #4]
 800555c:	f000 f84e 	bl	80055fc <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2202      	movs	r2, #2
 8005564:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	681a      	ldr	r2, [r3, #0]
 800556e:	4b20      	ldr	r3, [pc, #128]	; (80055f0 <HAL_DMA2D_Init+0xbc>)
 8005570:	4013      	ands	r3, r2
 8005572:	687a      	ldr	r2, [r7, #4]
 8005574:	6851      	ldr	r1, [r2, #4]
 8005576:	687a      	ldr	r2, [r7, #4]
 8005578:	69d2      	ldr	r2, [r2, #28]
 800557a:	4311      	orrs	r1, r2
 800557c:	687a      	ldr	r2, [r7, #4]
 800557e:	6812      	ldr	r2, [r2, #0]
 8005580:	430b      	orrs	r3, r1
 8005582:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800558a:	4b1a      	ldr	r3, [pc, #104]	; (80055f4 <HAL_DMA2D_Init+0xc0>)
 800558c:	4013      	ands	r3, r2
 800558e:	687a      	ldr	r2, [r7, #4]
 8005590:	6891      	ldr	r1, [r2, #8]
 8005592:	687a      	ldr	r2, [r7, #4]
 8005594:	6992      	ldr	r2, [r2, #24]
 8005596:	4311      	orrs	r1, r2
 8005598:	687a      	ldr	r2, [r7, #4]
 800559a:	6812      	ldr	r2, [r2, #0]
 800559c:	430b      	orrs	r3, r1
 800559e:	6353      	str	r3, [r2, #52]	; 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80055a6:	4b14      	ldr	r3, [pc, #80]	; (80055f8 <HAL_DMA2D_Init+0xc4>)
 80055a8:	4013      	ands	r3, r2
 80055aa:	687a      	ldr	r2, [r7, #4]
 80055ac:	68d1      	ldr	r1, [r2, #12]
 80055ae:	687a      	ldr	r2, [r7, #4]
 80055b0:	6812      	ldr	r2, [r2, #0]
 80055b2:	430b      	orrs	r3, r1
 80055b4:	6413      	str	r3, [r2, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055bc:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	691b      	ldr	r3, [r3, #16]
 80055c4:	051a      	lsls	r2, r3, #20
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	695b      	ldr	r3, [r3, #20]
 80055ca:	055b      	lsls	r3, r3, #21
 80055cc:	431a      	orrs	r2, r3
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	430a      	orrs	r2, r1
 80055d4:	635a      	str	r2, [r3, #52]	; 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2200      	movs	r2, #0
 80055da:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2201      	movs	r2, #1
 80055e0:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  return HAL_OK;
 80055e4:	2300      	movs	r3, #0
}
 80055e6:	4618      	mov	r0, r3
 80055e8:	3708      	adds	r7, #8
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bd80      	pop	{r7, pc}
 80055ee:	bf00      	nop
 80055f0:	fff8ffbf 	.word	0xfff8ffbf
 80055f4:	fffffef8 	.word	0xfffffef8
 80055f8:	ffff0000 	.word	0xffff0000

080055fc <HAL_DMA2D_MspInit>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
 80055fc:	b480      	push	{r7}
 80055fe:	b083      	sub	sp, #12
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
 8005604:	bf00      	nop
 8005606:	370c      	adds	r7, #12
 8005608:	46bd      	mov	sp, r7
 800560a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560e:	4770      	bx	lr

08005610 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b086      	sub	sp, #24
 8005614:	af02      	add	r7, sp, #8
 8005616:	60f8      	str	r0, [r7, #12]
 8005618:	60b9      	str	r1, [r7, #8]
 800561a:	607a      	str	r2, [r7, #4]
 800561c:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8005624:	2b01      	cmp	r3, #1
 8005626:	d101      	bne.n	800562c <HAL_DMA2D_Start+0x1c>
 8005628:	2302      	movs	r3, #2
 800562a:	e018      	b.n	800565e <HAL_DMA2D_Start+0x4e>
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	2201      	movs	r2, #1
 8005630:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	2202      	movs	r2, #2
 8005638:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 800563c:	69bb      	ldr	r3, [r7, #24]
 800563e:	9300      	str	r3, [sp, #0]
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	687a      	ldr	r2, [r7, #4]
 8005644:	68b9      	ldr	r1, [r7, #8]
 8005646:	68f8      	ldr	r0, [r7, #12]
 8005648:	f000 f9a4 	bl	8005994 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	681a      	ldr	r2, [r3, #0]
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f042 0201 	orr.w	r2, r2, #1
 800565a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800565c:	2300      	movs	r3, #0
}
 800565e:	4618      	mov	r0, r3
 8005660:	3710      	adds	r7, #16
 8005662:	46bd      	mov	sp, r7
 8005664:	bd80      	pop	{r7, pc}

08005666 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8005666:	b580      	push	{r7, lr}
 8005668:	b086      	sub	sp, #24
 800566a:	af00      	add	r7, sp, #0
 800566c:	6078      	str	r0, [r7, #4]
 800566e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8005670:	2300      	movs	r3, #0
 8005672:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f003 0301 	and.w	r3, r3, #1
 800567e:	2b00      	cmp	r3, #0
 8005680:	d056      	beq.n	8005730 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8005682:	f7ff f879 	bl	8004778 <HAL_GetTick>
 8005686:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8005688:	e04b      	b.n	8005722 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8005698:	2b00      	cmp	r3, #0
 800569a:	d023      	beq.n	80056e4 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	f003 0320 	and.w	r3, r3, #32
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d005      	beq.n	80056b2 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80056aa:	f043 0202 	orr.w	r2, r3, #2
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	665a      	str	r2, [r3, #100]	; 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	f003 0301 	and.w	r3, r3, #1
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d005      	beq.n	80056c8 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80056c0:	f043 0201 	orr.w	r2, r3, #1
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	665a      	str	r2, [r3, #100]	; 0x64
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	2221      	movs	r2, #33	; 0x21
 80056ce:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2204      	movs	r2, #4
 80056d4:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2200      	movs	r2, #0
 80056dc:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 80056e0:	2301      	movs	r3, #1
 80056e2:	e0a5      	b.n	8005830 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056ea:	d01a      	beq.n	8005722 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80056ec:	f7ff f844 	bl	8004778 <HAL_GetTick>
 80056f0:	4602      	mov	r2, r0
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	1ad3      	subs	r3, r2, r3
 80056f6:	683a      	ldr	r2, [r7, #0]
 80056f8:	429a      	cmp	r2, r3
 80056fa:	d302      	bcc.n	8005702 <HAL_DMA2D_PollForTransfer+0x9c>
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d10f      	bne.n	8005722 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005706:	f043 0220 	orr.w	r2, r3, #32
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	665a      	str	r2, [r3, #100]	; 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2203      	movs	r2, #3
 8005712:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2200      	movs	r2, #0
 800571a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

          return HAL_TIMEOUT;
 800571e:	2303      	movs	r3, #3
 8005720:	e086      	b.n	8005830 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	f003 0302 	and.w	r3, r3, #2
 800572c:	2b00      	cmp	r3, #0
 800572e:	d0ac      	beq.n	800568a <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	69db      	ldr	r3, [r3, #28]
 8005736:	f003 0320 	and.w	r3, r3, #32
 800573a:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005742:	f003 0320 	and.w	r3, r3, #32
 8005746:	693a      	ldr	r2, [r7, #16]
 8005748:	4313      	orrs	r3, r2
 800574a:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 800574c:	693b      	ldr	r3, [r7, #16]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d061      	beq.n	8005816 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8005752:	f7ff f811 	bl	8004778 <HAL_GetTick>
 8005756:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8005758:	e056      	b.n	8005808 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	685b      	ldr	r3, [r3, #4]
 8005760:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8005768:	2b00      	cmp	r3, #0
 800576a:	d02e      	beq.n	80057ca <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	f003 0308 	and.w	r3, r3, #8
 8005772:	2b00      	cmp	r3, #0
 8005774:	d005      	beq.n	8005782 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800577a:	f043 0204 	orr.w	r2, r3, #4
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	665a      	str	r2, [r3, #100]	; 0x64
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	f003 0320 	and.w	r3, r3, #32
 8005788:	2b00      	cmp	r3, #0
 800578a:	d005      	beq.n	8005798 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005790:	f043 0202 	orr.w	r2, r3, #2
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	665a      	str	r2, [r3, #100]	; 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	f003 0301 	and.w	r3, r3, #1
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d005      	beq.n	80057ae <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80057a6:	f043 0201 	orr.w	r2, r3, #1
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	665a      	str	r2, [r3, #100]	; 0x64
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	2229      	movs	r2, #41	; 0x29
 80057b4:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2204      	movs	r2, #4
 80057ba:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2200      	movs	r2, #0
 80057c2:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 80057c6:	2301      	movs	r3, #1
 80057c8:	e032      	b.n	8005830 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057d0:	d01a      	beq.n	8005808 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80057d2:	f7fe ffd1 	bl	8004778 <HAL_GetTick>
 80057d6:	4602      	mov	r2, r0
 80057d8:	697b      	ldr	r3, [r7, #20]
 80057da:	1ad3      	subs	r3, r2, r3
 80057dc:	683a      	ldr	r2, [r7, #0]
 80057de:	429a      	cmp	r2, r3
 80057e0:	d302      	bcc.n	80057e8 <HAL_DMA2D_PollForTransfer+0x182>
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d10f      	bne.n	8005808 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80057ec:	f043 0220 	orr.w	r2, r3, #32
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	665a      	str	r2, [r3, #100]	; 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2203      	movs	r2, #3
 80057f8:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2200      	movs	r2, #0
 8005800:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

          return HAL_TIMEOUT;
 8005804:	2303      	movs	r3, #3
 8005806:	e013      	b.n	8005830 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	685b      	ldr	r3, [r3, #4]
 800580e:	f003 0310 	and.w	r3, r3, #16
 8005812:	2b00      	cmp	r3, #0
 8005814:	d0a1      	beq.n	800575a <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	2212      	movs	r2, #18
 800581c:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2201      	movs	r2, #1
 8005822:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2200      	movs	r2, #0
 800582a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 800582e:	2300      	movs	r3, #0
}
 8005830:	4618      	mov	r0, r3
 8005832:	3718      	adds	r7, #24
 8005834:	46bd      	mov	sp, r7
 8005836:	bd80      	pop	{r7, pc}

08005838 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8005838:	b480      	push	{r7}
 800583a:	b087      	sub	sp, #28
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
 8005840:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	685b      	ldr	r3, [r3, #4]
 8005846:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
    }
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	2b01      	cmp	r3, #1
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8005854:	2b01      	cmp	r3, #1
 8005856:	d101      	bne.n	800585c <HAL_DMA2D_ConfigLayer+0x24>
 8005858:	2302      	movs	r3, #2
 800585a:	e092      	b.n	8005982 <HAL_DMA2D_ConfigLayer+0x14a>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2201      	movs	r2, #1
 8005860:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2202      	movs	r2, #2
 8005868:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 800586c:	683a      	ldr	r2, [r7, #0]
 800586e:	4613      	mov	r3, r2
 8005870:	00db      	lsls	r3, r3, #3
 8005872:	1a9b      	subs	r3, r3, r2
 8005874:	009b      	lsls	r3, r3, #2
 8005876:	3328      	adds	r3, #40	; 0x28
 8005878:	687a      	ldr	r2, [r7, #4]
 800587a:	4413      	add	r3, r2
 800587c:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	685a      	ldr	r2, [r3, #4]
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	689b      	ldr	r3, [r3, #8]
 8005886:	041b      	lsls	r3, r3, #16
 8005888:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	691b      	ldr	r3, [r3, #16]
 800588e:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8005890:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	695b      	ldr	r3, [r3, #20]
 8005896:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8005898:	4313      	orrs	r3, r2
 800589a:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 800589c:	4b3c      	ldr	r3, [pc, #240]	; (8005990 <HAL_DMA2D_ConfigLayer+0x158>)
 800589e:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	685b      	ldr	r3, [r3, #4]
 80058a4:	2b0a      	cmp	r3, #10
 80058a6:	d003      	beq.n	80058b0 <HAL_DMA2D_ConfigLayer+0x78>
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	2b09      	cmp	r3, #9
 80058ae:	d107      	bne.n	80058c0 <HAL_DMA2D_ConfigLayer+0x88>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	68db      	ldr	r3, [r3, #12]
 80058b4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80058b8:	693a      	ldr	r2, [r7, #16]
 80058ba:	4313      	orrs	r3, r2
 80058bc:	613b      	str	r3, [r7, #16]
 80058be:	e005      	b.n	80058cc <HAL_DMA2D_ConfigLayer+0x94>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	68db      	ldr	r3, [r3, #12]
 80058c4:	061b      	lsls	r3, r3, #24
 80058c6:	693a      	ldr	r2, [r7, #16]
 80058c8:	4313      	orrs	r3, r2
 80058ca:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d120      	bne.n	8005914 <HAL_DMA2D_ConfigLayer+0xdc>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80058d8:	697b      	ldr	r3, [r7, #20]
 80058da:	43db      	mvns	r3, r3
 80058dc:	ea02 0103 	and.w	r1, r2, r3
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	693a      	ldr	r2, [r7, #16]
 80058e6:	430a      	orrs	r2, r1
 80058e8:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	68fa      	ldr	r2, [r7, #12]
 80058f0:	6812      	ldr	r2, [r2, #0]
 80058f2:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	2b0a      	cmp	r3, #10
 80058fa:	d003      	beq.n	8005904 <HAL_DMA2D_ConfigLayer+0xcc>
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	685b      	ldr	r3, [r3, #4]
 8005900:	2b09      	cmp	r3, #9
 8005902:	d135      	bne.n	8005970 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	68da      	ldr	r2, [r3, #12]
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8005910:	629a      	str	r2, [r3, #40]	; 0x28
 8005912:	e02d      	b.n	8005970 <HAL_DMA2D_ConfigLayer+0x138>
  }
  /* Configure the foreground DMA2D layer */
  else
  {

    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	685b      	ldr	r3, [r3, #4]
 8005918:	2b0b      	cmp	r3, #11
 800591a:	d109      	bne.n	8005930 <HAL_DMA2D_ConfigLayer+0xf8>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	699b      	ldr	r3, [r3, #24]
 8005920:	049b      	lsls	r3, r3, #18
 8005922:	693a      	ldr	r2, [r7, #16]
 8005924:	4313      	orrs	r3, r2
 8005926:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 800592e:	617b      	str	r3, [r7, #20]
    }

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	69da      	ldr	r2, [r3, #28]
 8005936:	697b      	ldr	r3, [r7, #20]
 8005938:	43db      	mvns	r3, r3
 800593a:	ea02 0103 	and.w	r1, r2, r3
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	693a      	ldr	r2, [r7, #16]
 8005944:	430a      	orrs	r2, r1
 8005946:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	68fa      	ldr	r2, [r7, #12]
 800594e:	6812      	ldr	r2, [r2, #0]
 8005950:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	685b      	ldr	r3, [r3, #4]
 8005956:	2b0a      	cmp	r3, #10
 8005958:	d003      	beq.n	8005962 <HAL_DMA2D_ConfigLayer+0x12a>
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	685b      	ldr	r3, [r3, #4]
 800595e:	2b09      	cmp	r3, #9
 8005960:	d106      	bne.n	8005970 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	68da      	ldr	r2, [r3, #12]
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800596e:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2201      	movs	r2, #1
 8005974:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2200      	movs	r2, #0
 800597c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8005980:	2300      	movs	r3, #0
}
 8005982:	4618      	mov	r0, r3
 8005984:	371c      	adds	r7, #28
 8005986:	46bd      	mov	sp, r7
 8005988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598c:	4770      	bx	lr
 800598e:	bf00      	nop
 8005990:	ff33000f 	.word	0xff33000f

08005994 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8005994:	b480      	push	{r7}
 8005996:	b08b      	sub	sp, #44	; 0x2c
 8005998:	af00      	add	r7, sp, #0
 800599a:	60f8      	str	r0, [r7, #12]
 800599c:	60b9      	str	r1, [r7, #8]
 800599e:	607a      	str	r2, [r7, #4]
 80059a0:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059a8:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	041a      	lsls	r2, r3, #16
 80059b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059b2:	431a      	orrs	r2, r3
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	430a      	orrs	r2, r1
 80059ba:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	687a      	ldr	r2, [r7, #4]
 80059c2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	685b      	ldr	r3, [r3, #4]
 80059c8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80059cc:	d174      	bne.n	8005ab8 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80059d4:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80059dc:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80059e4:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	b2db      	uxtb	r3, r3
 80059ea:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	689b      	ldr	r3, [r3, #8]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d108      	bne.n	8005a06 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 80059f4:	69ba      	ldr	r2, [r7, #24]
 80059f6:	69fb      	ldr	r3, [r7, #28]
 80059f8:	431a      	orrs	r2, r3
 80059fa:	6a3b      	ldr	r3, [r7, #32]
 80059fc:	4313      	orrs	r3, r2
 80059fe:	697a      	ldr	r2, [r7, #20]
 8005a00:	4313      	orrs	r3, r2
 8005a02:	627b      	str	r3, [r7, #36]	; 0x24
 8005a04:	e053      	b.n	8005aae <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	689b      	ldr	r3, [r3, #8]
 8005a0a:	2b01      	cmp	r3, #1
 8005a0c:	d106      	bne.n	8005a1c <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8005a0e:	69ba      	ldr	r2, [r7, #24]
 8005a10:	69fb      	ldr	r3, [r7, #28]
 8005a12:	4313      	orrs	r3, r2
 8005a14:	697a      	ldr	r2, [r7, #20]
 8005a16:	4313      	orrs	r3, r2
 8005a18:	627b      	str	r3, [r7, #36]	; 0x24
 8005a1a:	e048      	b.n	8005aae <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	689b      	ldr	r3, [r3, #8]
 8005a20:	2b02      	cmp	r3, #2
 8005a22:	d111      	bne.n	8005a48 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8005a24:	69fb      	ldr	r3, [r7, #28]
 8005a26:	0cdb      	lsrs	r3, r3, #19
 8005a28:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8005a2a:	69bb      	ldr	r3, [r7, #24]
 8005a2c:	0a9b      	lsrs	r3, r3, #10
 8005a2e:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	08db      	lsrs	r3, r3, #3
 8005a34:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8005a36:	69bb      	ldr	r3, [r7, #24]
 8005a38:	015a      	lsls	r2, r3, #5
 8005a3a:	69fb      	ldr	r3, [r7, #28]
 8005a3c:	02db      	lsls	r3, r3, #11
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	697a      	ldr	r2, [r7, #20]
 8005a42:	4313      	orrs	r3, r2
 8005a44:	627b      	str	r3, [r7, #36]	; 0x24
 8005a46:	e032      	b.n	8005aae <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	689b      	ldr	r3, [r3, #8]
 8005a4c:	2b03      	cmp	r3, #3
 8005a4e:	d117      	bne.n	8005a80 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8005a50:	6a3b      	ldr	r3, [r7, #32]
 8005a52:	0fdb      	lsrs	r3, r3, #31
 8005a54:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8005a56:	69fb      	ldr	r3, [r7, #28]
 8005a58:	0cdb      	lsrs	r3, r3, #19
 8005a5a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8005a5c:	69bb      	ldr	r3, [r7, #24]
 8005a5e:	0adb      	lsrs	r3, r3, #11
 8005a60:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8005a62:	697b      	ldr	r3, [r7, #20]
 8005a64:	08db      	lsrs	r3, r3, #3
 8005a66:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8005a68:	69bb      	ldr	r3, [r7, #24]
 8005a6a:	015a      	lsls	r2, r3, #5
 8005a6c:	69fb      	ldr	r3, [r7, #28]
 8005a6e:	029b      	lsls	r3, r3, #10
 8005a70:	431a      	orrs	r2, r3
 8005a72:	6a3b      	ldr	r3, [r7, #32]
 8005a74:	03db      	lsls	r3, r3, #15
 8005a76:	4313      	orrs	r3, r2
 8005a78:	697a      	ldr	r2, [r7, #20]
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	627b      	str	r3, [r7, #36]	; 0x24
 8005a7e:	e016      	b.n	8005aae <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8005a80:	6a3b      	ldr	r3, [r7, #32]
 8005a82:	0f1b      	lsrs	r3, r3, #28
 8005a84:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8005a86:	69fb      	ldr	r3, [r7, #28]
 8005a88:	0d1b      	lsrs	r3, r3, #20
 8005a8a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8005a8c:	69bb      	ldr	r3, [r7, #24]
 8005a8e:	0b1b      	lsrs	r3, r3, #12
 8005a90:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8005a92:	697b      	ldr	r3, [r7, #20]
 8005a94:	091b      	lsrs	r3, r3, #4
 8005a96:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8005a98:	69bb      	ldr	r3, [r7, #24]
 8005a9a:	011a      	lsls	r2, r3, #4
 8005a9c:	69fb      	ldr	r3, [r7, #28]
 8005a9e:	021b      	lsls	r3, r3, #8
 8005aa0:	431a      	orrs	r2, r3
 8005aa2:	6a3b      	ldr	r3, [r7, #32]
 8005aa4:	031b      	lsls	r3, r3, #12
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	697a      	ldr	r2, [r7, #20]
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ab4:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC,M2M_Blending or M2M_blending with fixed color BG DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8005ab6:	e00d      	b.n	8005ad4 <DMA2D_SetConfig+0x140>
  else if (hdma2d->Init.Mode == DMA2D_M2M_BLEND_FG) /*M2M_blending with fixed color FG DMA2D Mode selected*/
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005ac0:	d104      	bne.n	8005acc <DMA2D_SetConfig+0x138>
    WRITE_REG(hdma2d->Instance->BGMAR, pdata);
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	68ba      	ldr	r2, [r7, #8]
 8005ac8:	615a      	str	r2, [r3, #20]
}
 8005aca:	e003      	b.n	8005ad4 <DMA2D_SetConfig+0x140>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	68ba      	ldr	r2, [r7, #8]
 8005ad2:	60da      	str	r2, [r3, #12]
}
 8005ad4:	bf00      	nop
 8005ad6:	372c      	adds	r7, #44	; 0x2c
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ade:	4770      	bx	lr

08005ae0 <HAL_FLASH_Program>:
  *         This parameter shall be 32-bit aligned
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t FlashAddress, uint32_t DataAddress)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b08a      	sub	sp, #40	; 0x28
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	60f8      	str	r0, [r7, #12]
 8005ae8:	60b9      	str	r1, [r7, #8]
 8005aea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t *dest_addr = (__IO uint32_t *)FlashAddress;
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	623b      	str	r3, [r7, #32]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	61fb      	str	r3, [r7, #28]
  uint32_t bank;
  uint8_t row_index = FLASH_NB_32BITWORD_IN_FLASHWORD;
 8005af4:	2308      	movs	r3, #8
 8005af6:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(FlashAddress));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005af8:	4b40      	ldr	r3, [pc, #256]	; (8005bfc <HAL_FLASH_Program+0x11c>)
 8005afa:	7d1b      	ldrb	r3, [r3, #20]
 8005afc:	2b01      	cmp	r3, #1
 8005afe:	d101      	bne.n	8005b04 <HAL_FLASH_Program+0x24>
 8005b00:	2302      	movs	r3, #2
 8005b02:	e076      	b.n	8005bf2 <HAL_FLASH_Program+0x112>
 8005b04:	4b3d      	ldr	r3, [pc, #244]	; (8005bfc <HAL_FLASH_Program+0x11c>)
 8005b06:	2201      	movs	r2, #1
 8005b08:	751a      	strb	r2, [r3, #20]

#if defined (FLASH_OPTCR_PG_OTP)
  if((IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress)) || (IS_FLASH_PROGRAM_ADDRESS_OTP(FlashAddress)))
#else
  if(IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress))
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b10:	d306      	bcc.n	8005b20 <HAL_FLASH_Program+0x40>
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 8005b18:	d202      	bcs.n	8005b20 <HAL_FLASH_Program+0x40>
#endif /* FLASH_OPTCR_PG_OTP */
  {
    bank = FLASH_BANK_1;
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	61bb      	str	r3, [r7, #24]
 8005b1e:	e00c      	b.n	8005b3a <HAL_FLASH_Program+0x5a>
  }
#if defined (DUAL_BANK)
  else if(IS_FLASH_PROGRAM_ADDRESS_BANK2(FlashAddress))
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 8005b26:	d306      	bcc.n	8005b36 <HAL_FLASH_Program+0x56>
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	f1b3 6f02 	cmp.w	r3, #136314880	; 0x8200000
 8005b2e:	d202      	bcs.n	8005b36 <HAL_FLASH_Program+0x56>
  {
    bank = FLASH_BANK_2;
 8005b30:	2302      	movs	r3, #2
 8005b32:	61bb      	str	r3, [r7, #24]
 8005b34:	e001      	b.n	8005b3a <HAL_FLASH_Program+0x5a>
  }
#endif /* DUAL_BANK */
  else
  {
    return HAL_ERROR;
 8005b36:	2301      	movs	r3, #1
 8005b38:	e05b      	b.n	8005bf2 <HAL_FLASH_Program+0x112>
  }

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005b3a:	4b30      	ldr	r3, [pc, #192]	; (8005bfc <HAL_FLASH_Program+0x11c>)
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 8005b40:	69b9      	ldr	r1, [r7, #24]
 8005b42:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005b46:	f000 f8eb 	bl	8005d20 <FLASH_WaitForLastOperation>
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if(status == HAL_OK)
 8005b50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d147      	bne.n	8005be8 <HAL_FLASH_Program+0x108>
  {
#if defined (DUAL_BANK)
    if(bank == FLASH_BANK_1)
 8005b58:	69bb      	ldr	r3, [r7, #24]
 8005b5a:	2b01      	cmp	r3, #1
 8005b5c:	d106      	bne.n	8005b6c <HAL_FLASH_Program+0x8c>
      }
      else
#endif /* FLASH_OPTCR_PG_OTP */
      {
        /* Set PG bit */
        SET_BIT(FLASH->CR1, FLASH_CR_PG);
 8005b5e:	4b28      	ldr	r3, [pc, #160]	; (8005c00 <HAL_FLASH_Program+0x120>)
 8005b60:	68db      	ldr	r3, [r3, #12]
 8005b62:	4a27      	ldr	r2, [pc, #156]	; (8005c00 <HAL_FLASH_Program+0x120>)
 8005b64:	f043 0302 	orr.w	r3, r3, #2
 8005b68:	60d3      	str	r3, [r2, #12]
 8005b6a:	e007      	b.n	8005b7c <HAL_FLASH_Program+0x9c>
      }
    }
    else
    {
      /* Set PG bit */
      SET_BIT(FLASH->CR2, FLASH_CR_PG);
 8005b6c:	4b24      	ldr	r3, [pc, #144]	; (8005c00 <HAL_FLASH_Program+0x120>)
 8005b6e:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8005b72:	4a23      	ldr	r2, [pc, #140]	; (8005c00 <HAL_FLASH_Program+0x120>)
 8005b74:	f043 0302 	orr.w	r3, r3, #2
 8005b78:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
  __ASM volatile ("isb 0xF":::"memory");
 8005b7c:	f3bf 8f6f 	isb	sy
}
 8005b80:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 8005b82:	f3bf 8f4f 	dsb	sy
}
 8005b86:	bf00      	nop
#endif /* FLASH_OPTCR_PG_OTP */
    {
      /* Program the flash word */
      do
      {
        *dest_addr = *src_addr;
 8005b88:	69fb      	ldr	r3, [r7, #28]
 8005b8a:	681a      	ldr	r2, [r3, #0]
 8005b8c:	6a3b      	ldr	r3, [r7, #32]
 8005b8e:	601a      	str	r2, [r3, #0]
        dest_addr++;
 8005b90:	6a3b      	ldr	r3, [r7, #32]
 8005b92:	3304      	adds	r3, #4
 8005b94:	623b      	str	r3, [r7, #32]
        src_addr++;
 8005b96:	69fb      	ldr	r3, [r7, #28]
 8005b98:	3304      	adds	r3, #4
 8005b9a:	61fb      	str	r3, [r7, #28]
        row_index--;
 8005b9c:	7dfb      	ldrb	r3, [r7, #23]
 8005b9e:	3b01      	subs	r3, #1
 8005ba0:	75fb      	strb	r3, [r7, #23]
     } while (row_index != 0U);
 8005ba2:	7dfb      	ldrb	r3, [r7, #23]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d1ef      	bne.n	8005b88 <HAL_FLASH_Program+0xa8>
  __ASM volatile ("isb 0xF":::"memory");
 8005ba8:	f3bf 8f6f 	isb	sy
}
 8005bac:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 8005bae:	f3bf 8f4f 	dsb	sy
}
 8005bb2:	bf00      	nop

    __ISB();
    __DSB();

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 8005bb4:	69b9      	ldr	r1, [r7, #24]
 8005bb6:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005bba:	f000 f8b1 	bl	8005d20 <FLASH_WaitForLastOperation>
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      CLEAR_BIT(FLASH->OPTCR, FLASH_OPTCR_PG_OTP);
    }
    else
#endif /* FLASH_OPTCR_PG_OTP */
    {
      if(bank == FLASH_BANK_1)
 8005bc4:	69bb      	ldr	r3, [r7, #24]
 8005bc6:	2b01      	cmp	r3, #1
 8005bc8:	d106      	bne.n	8005bd8 <HAL_FLASH_Program+0xf8>
      {
        /* If the program operation is completed, disable the PG */
        CLEAR_BIT(FLASH->CR1, FLASH_CR_PG);
 8005bca:	4b0d      	ldr	r3, [pc, #52]	; (8005c00 <HAL_FLASH_Program+0x120>)
 8005bcc:	68db      	ldr	r3, [r3, #12]
 8005bce:	4a0c      	ldr	r2, [pc, #48]	; (8005c00 <HAL_FLASH_Program+0x120>)
 8005bd0:	f023 0302 	bic.w	r3, r3, #2
 8005bd4:	60d3      	str	r3, [r2, #12]
 8005bd6:	e007      	b.n	8005be8 <HAL_FLASH_Program+0x108>
      }
      else
      {
        /* If the program operation is completed, disable the PG */
        CLEAR_BIT(FLASH->CR2, FLASH_CR_PG);
 8005bd8:	4b09      	ldr	r3, [pc, #36]	; (8005c00 <HAL_FLASH_Program+0x120>)
 8005bda:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8005bde:	4a08      	ldr	r2, [pc, #32]	; (8005c00 <HAL_FLASH_Program+0x120>)
 8005be0:	f023 0302 	bic.w	r3, r3, #2
 8005be4:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
    }
#endif /* DUAL_BANK */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005be8:	4b04      	ldr	r3, [pc, #16]	; (8005bfc <HAL_FLASH_Program+0x11c>)
 8005bea:	2200      	movs	r2, #0
 8005bec:	751a      	strb	r2, [r3, #20]

  return status;
 8005bee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	3728      	adds	r7, #40	; 0x28
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bd80      	pop	{r7, pc}
 8005bfa:	bf00      	nop
 8005bfc:	240023d4 	.word	0x240023d4
 8005c00:	52002000 	.word	0x52002000

08005c04 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8005c04:	b480      	push	{r7}
 8005c06:	af00      	add	r7, sp, #0
  if(READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 8005c08:	4b18      	ldr	r3, [pc, #96]	; (8005c6c <HAL_FLASH_Unlock+0x68>)
 8005c0a:	68db      	ldr	r3, [r3, #12]
 8005c0c:	f003 0301 	and.w	r3, r3, #1
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d00d      	beq.n	8005c30 <HAL_FLASH_Unlock+0x2c>
  {
    /* Authorize the FLASH Bank1 Registers access */
    WRITE_REG(FLASH->KEYR1, FLASH_KEY1);
 8005c14:	4b15      	ldr	r3, [pc, #84]	; (8005c6c <HAL_FLASH_Unlock+0x68>)
 8005c16:	4a16      	ldr	r2, [pc, #88]	; (8005c70 <HAL_FLASH_Unlock+0x6c>)
 8005c18:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR1, FLASH_KEY2);
 8005c1a:	4b14      	ldr	r3, [pc, #80]	; (8005c6c <HAL_FLASH_Unlock+0x68>)
 8005c1c:	4a15      	ldr	r2, [pc, #84]	; (8005c74 <HAL_FLASH_Unlock+0x70>)
 8005c1e:	605a      	str	r2, [r3, #4]

    /* Verify Flash Bank1 is unlocked */
    if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 8005c20:	4b12      	ldr	r3, [pc, #72]	; (8005c6c <HAL_FLASH_Unlock+0x68>)
 8005c22:	68db      	ldr	r3, [r3, #12]
 8005c24:	f003 0301 	and.w	r3, r3, #1
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d001      	beq.n	8005c30 <HAL_FLASH_Unlock+0x2c>
    {
      return HAL_ERROR;
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	e018      	b.n	8005c62 <HAL_FLASH_Unlock+0x5e>
    }
  }

#if defined (DUAL_BANK)
  if(READ_BIT(FLASH->CR2, FLASH_CR_LOCK) != 0U)
 8005c30:	4b0e      	ldr	r3, [pc, #56]	; (8005c6c <HAL_FLASH_Unlock+0x68>)
 8005c32:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8005c36:	f003 0301 	and.w	r3, r3, #1
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d010      	beq.n	8005c60 <HAL_FLASH_Unlock+0x5c>
  {
    /* Authorize the FLASH Bank2 Registers access */
    WRITE_REG(FLASH->KEYR2, FLASH_KEY1);
 8005c3e:	4b0b      	ldr	r3, [pc, #44]	; (8005c6c <HAL_FLASH_Unlock+0x68>)
 8005c40:	4a0b      	ldr	r2, [pc, #44]	; (8005c70 <HAL_FLASH_Unlock+0x6c>)
 8005c42:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    WRITE_REG(FLASH->KEYR2, FLASH_KEY2);
 8005c46:	4b09      	ldr	r3, [pc, #36]	; (8005c6c <HAL_FLASH_Unlock+0x68>)
 8005c48:	4a0a      	ldr	r2, [pc, #40]	; (8005c74 <HAL_FLASH_Unlock+0x70>)
 8005c4a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

    /* Verify Flash Bank2 is unlocked */
    if (READ_BIT(FLASH->CR2, FLASH_CR_LOCK) != 0U)
 8005c4e:	4b07      	ldr	r3, [pc, #28]	; (8005c6c <HAL_FLASH_Unlock+0x68>)
 8005c50:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8005c54:	f003 0301 	and.w	r3, r3, #1
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d001      	beq.n	8005c60 <HAL_FLASH_Unlock+0x5c>
    {
      return HAL_ERROR;
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	e000      	b.n	8005c62 <HAL_FLASH_Unlock+0x5e>
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 8005c60:	2300      	movs	r3, #0
}
 8005c62:	4618      	mov	r0, r3
 8005c64:	46bd      	mov	sp, r7
 8005c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6a:	4770      	bx	lr
 8005c6c:	52002000 	.word	0x52002000
 8005c70:	45670123 	.word	0x45670123
 8005c74:	cdef89ab 	.word	0xcdef89ab

08005c78 <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	af00      	add	r7, sp, #0
  if(READ_BIT(FLASH->OPTCR, FLASH_OPTCR_OPTLOCK) != 0U)
 8005c7c:	4b0c      	ldr	r3, [pc, #48]	; (8005cb0 <HAL_FLASH_OB_Unlock+0x38>)
 8005c7e:	699b      	ldr	r3, [r3, #24]
 8005c80:	f003 0301 	and.w	r3, r3, #1
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d00d      	beq.n	8005ca4 <HAL_FLASH_OB_Unlock+0x2c>
  {
    /* Authorizes the Option Byte registers programming */
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPT_KEY1);
 8005c88:	4b09      	ldr	r3, [pc, #36]	; (8005cb0 <HAL_FLASH_OB_Unlock+0x38>)
 8005c8a:	4a0a      	ldr	r2, [pc, #40]	; (8005cb4 <HAL_FLASH_OB_Unlock+0x3c>)
 8005c8c:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPT_KEY2);
 8005c8e:	4b08      	ldr	r3, [pc, #32]	; (8005cb0 <HAL_FLASH_OB_Unlock+0x38>)
 8005c90:	4a09      	ldr	r2, [pc, #36]	; (8005cb8 <HAL_FLASH_OB_Unlock+0x40>)
 8005c92:	609a      	str	r2, [r3, #8]

    /* Verify that the Option Bytes are unlocked */
    if (READ_BIT(FLASH->OPTCR, FLASH_OPTCR_OPTLOCK) != 0U)
 8005c94:	4b06      	ldr	r3, [pc, #24]	; (8005cb0 <HAL_FLASH_OB_Unlock+0x38>)
 8005c96:	699b      	ldr	r3, [r3, #24]
 8005c98:	f003 0301 	and.w	r3, r3, #1
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d001      	beq.n	8005ca4 <HAL_FLASH_OB_Unlock+0x2c>
    {
      return HAL_ERROR;
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	e000      	b.n	8005ca6 <HAL_FLASH_OB_Unlock+0x2e>
    }
  }

  return HAL_OK;
 8005ca4:	2300      	movs	r3, #0
}
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cae:	4770      	bx	lr
 8005cb0:	52002000 	.word	0x52002000
 8005cb4:	08192a3b 	.word	0x08192a3b
 8005cb8:	4c5d6e7f 	.word	0x4c5d6e7f

08005cbc <HAL_FLASH_OB_Launch>:
/**
  * @brief  Launch the option bytes loading.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Launch(void)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b082      	sub	sp, #8
 8005cc0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status;

  /* Wait for CRC computation to be completed */
  if (FLASH_CRC_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 8005cc2:	2101      	movs	r1, #1
 8005cc4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005cc8:	f000 f902 	bl	8005ed0 <FLASH_CRC_WaitForLastOperation>
 8005ccc:	4603      	mov	r3, r0
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d002      	beq.n	8005cd8 <HAL_FLASH_OB_Launch+0x1c>
  {
    status = HAL_ERROR;
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	71fb      	strb	r3, [r7, #7]
 8005cd6:	e00c      	b.n	8005cf2 <HAL_FLASH_OB_Launch+0x36>
  }
#if defined (DUAL_BANK)
  else if (FLASH_CRC_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2) != HAL_OK)
 8005cd8:	2102      	movs	r1, #2
 8005cda:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005cde:	f000 f8f7 	bl	8005ed0 <FLASH_CRC_WaitForLastOperation>
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d002      	beq.n	8005cee <HAL_FLASH_OB_Launch+0x32>
  {
    status = HAL_ERROR;
 8005ce8:	2301      	movs	r3, #1
 8005cea:	71fb      	strb	r3, [r7, #7]
 8005cec:	e001      	b.n	8005cf2 <HAL_FLASH_OB_Launch+0x36>
  }
#endif /* DUAL_BANK */
  else
  {
    status = HAL_OK;
 8005cee:	2300      	movs	r3, #0
 8005cf0:	71fb      	strb	r3, [r7, #7]
  }

  if (status == HAL_OK)
 8005cf2:	79fb      	ldrb	r3, [r7, #7]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d10b      	bne.n	8005d10 <HAL_FLASH_OB_Launch+0x54>
  {
    /* Set OPTSTRT Bit */
    SET_BIT(FLASH->OPTCR, FLASH_OPTCR_OPTSTART);
 8005cf8:	4b08      	ldr	r3, [pc, #32]	; (8005d1c <HAL_FLASH_OB_Launch+0x60>)
 8005cfa:	699b      	ldr	r3, [r3, #24]
 8005cfc:	4a07      	ldr	r2, [pc, #28]	; (8005d1c <HAL_FLASH_OB_Launch+0x60>)
 8005cfe:	f043 0302 	orr.w	r3, r3, #2
 8005d02:	6193      	str	r3, [r2, #24]

    /* Wait for OB change operation to be completed */
    status = FLASH_OB_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005d04:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005d08:	f000 f8a6 	bl	8005e58 <FLASH_OB_WaitForLastOperation>
 8005d0c:	4603      	mov	r3, r0
 8005d0e:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8005d10:	79fb      	ldrb	r3, [r7, #7]
}
 8005d12:	4618      	mov	r0, r3
 8005d14:	3708      	adds	r7, #8
 8005d16:	46bd      	mov	sp, r7
 8005d18:	bd80      	pop	{r7, pc}
 8005d1a:	bf00      	nop
 8005d1c:	52002000 	.word	0x52002000

08005d20 <FLASH_WaitForLastOperation>:
  * @param  Timeout maximum flash operation timeout
  * @param  Bank flash FLASH_BANK_1 or FLASH_BANK_2
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout, uint32_t Bank)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b086      	sub	sp, #24
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
 8005d28:	6039      	str	r1, [r7, #0]
  /* Wait for the FLASH operation to complete by polling on QW flag to be reset.
     Even if the FLASH operation fails, the QW flag will be reset and an error
     flag will be set */

  uint32_t bsyflag = FLASH_FLAG_QW_BANK1;
 8005d2a:	2304      	movs	r3, #4
 8005d2c:	617b      	str	r3, [r7, #20]
  uint32_t errorflag = 0;
 8005d2e:	2300      	movs	r3, #0
 8005d30:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = HAL_GetTick();
 8005d32:	f7fe fd21 	bl	8004778 <HAL_GetTick>
 8005d36:	60f8      	str	r0, [r7, #12]

  assert_param(IS_FLASH_BANK_EXCLUSIVE(Bank));

#if defined (DUAL_BANK)

  if (Bank == FLASH_BANK_2)
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	2b02      	cmp	r3, #2
 8005d3c:	d113      	bne.n	8005d66 <FLASH_WaitForLastOperation+0x46>
  {
    /* Select bsyflag depending on Bank */
    bsyflag = FLASH_FLAG_QW_BANK2;
 8005d3e:	4b41      	ldr	r3, [pc, #260]	; (8005e44 <FLASH_WaitForLastOperation+0x124>)
 8005d40:	617b      	str	r3, [r7, #20]
  }
#endif /* DUAL_BANK */

  while(__HAL_FLASH_GET_FLAG(bsyflag))
 8005d42:	e010      	b.n	8005d66 <FLASH_WaitForLastOperation+0x46>
  {
    if(Timeout != HAL_MAX_DELAY)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d4a:	d00c      	beq.n	8005d66 <FLASH_WaitForLastOperation+0x46>
    {
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005d4c:	f7fe fd14 	bl	8004778 <HAL_GetTick>
 8005d50:	4602      	mov	r2, r0
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	1ad3      	subs	r3, r2, r3
 8005d56:	687a      	ldr	r2, [r7, #4]
 8005d58:	429a      	cmp	r2, r3
 8005d5a:	d302      	bcc.n	8005d62 <FLASH_WaitForLastOperation+0x42>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d101      	bne.n	8005d66 <FLASH_WaitForLastOperation+0x46>
      {
        return HAL_TIMEOUT;
 8005d62:	2303      	movs	r3, #3
 8005d64:	e06a      	b.n	8005e3c <FLASH_WaitForLastOperation+0x11c>
  while(__HAL_FLASH_GET_FLAG(bsyflag))
 8005d66:	697a      	ldr	r2, [r7, #20]
 8005d68:	4b37      	ldr	r3, [pc, #220]	; (8005e48 <FLASH_WaitForLastOperation+0x128>)
 8005d6a:	4013      	ands	r3, r2
 8005d6c:	697a      	ldr	r2, [r7, #20]
 8005d6e:	429a      	cmp	r2, r3
 8005d70:	d10a      	bne.n	8005d88 <FLASH_WaitForLastOperation+0x68>
 8005d72:	4b36      	ldr	r3, [pc, #216]	; (8005e4c <FLASH_WaitForLastOperation+0x12c>)
 8005d74:	691a      	ldr	r2, [r3, #16]
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	4013      	ands	r3, r2
 8005d7a:	697a      	ldr	r2, [r7, #20]
 8005d7c:	429a      	cmp	r2, r3
 8005d7e:	bf0c      	ite	eq
 8005d80:	2301      	moveq	r3, #1
 8005d82:	2300      	movne	r3, #0
 8005d84:	b2db      	uxtb	r3, r3
 8005d86:	e00c      	b.n	8005da2 <FLASH_WaitForLastOperation+0x82>
 8005d88:	4b30      	ldr	r3, [pc, #192]	; (8005e4c <FLASH_WaitForLastOperation+0x12c>)
 8005d8a:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8005d8e:	43da      	mvns	r2, r3
 8005d90:	697b      	ldr	r3, [r7, #20]
 8005d92:	4013      	ands	r3, r2
 8005d94:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	bf0c      	ite	eq
 8005d9c:	2301      	moveq	r3, #1
 8005d9e:	2300      	movne	r3, #0
 8005da0:	b2db      	uxtb	r3, r3
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d1ce      	bne.n	8005d44 <FLASH_WaitForLastOperation+0x24>
      }
    }
  }

  /* Get Error Flags */
  if (Bank == FLASH_BANK_1)
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	2b01      	cmp	r3, #1
 8005daa:	d105      	bne.n	8005db8 <FLASH_WaitForLastOperation+0x98>
  {
    errorflag = FLASH->SR1 & FLASH_FLAG_ALL_ERRORS_BANK1;
 8005dac:	4b27      	ldr	r3, [pc, #156]	; (8005e4c <FLASH_WaitForLastOperation+0x12c>)
 8005dae:	691a      	ldr	r2, [r3, #16]
 8005db0:	4b27      	ldr	r3, [pc, #156]	; (8005e50 <FLASH_WaitForLastOperation+0x130>)
 8005db2:	4013      	ands	r3, r2
 8005db4:	613b      	str	r3, [r7, #16]
 8005db6:	e007      	b.n	8005dc8 <FLASH_WaitForLastOperation+0xa8>
  }
#if defined (DUAL_BANK)
  else
  {
    errorflag = (FLASH->SR2 & FLASH_FLAG_ALL_ERRORS_BANK2) | 0x80000000U;
 8005db8:	4b24      	ldr	r3, [pc, #144]	; (8005e4c <FLASH_WaitForLastOperation+0x12c>)
 8005dba:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 8005dbe:	4b24      	ldr	r3, [pc, #144]	; (8005e50 <FLASH_WaitForLastOperation+0x130>)
 8005dc0:	4013      	ands	r3, r2
 8005dc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005dc6:	613b      	str	r3, [r7, #16]
  }
#endif /* DUAL_BANK */

  /* In case of error reported in Flash SR1 or SR2 register */
  if((errorflag & 0x7FFFFFFFU) != 0U)
 8005dc8:	693b      	ldr	r3, [r7, #16]
 8005dca:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d017      	beq.n	8005e02 <FLASH_WaitForLastOperation+0xe2>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= errorflag;
 8005dd2:	4b20      	ldr	r3, [pc, #128]	; (8005e54 <FLASH_WaitForLastOperation+0x134>)
 8005dd4:	699a      	ldr	r2, [r3, #24]
 8005dd6:	693b      	ldr	r3, [r7, #16]
 8005dd8:	4313      	orrs	r3, r2
 8005dda:	4a1e      	ldr	r2, [pc, #120]	; (8005e54 <FLASH_WaitForLastOperation+0x134>)
 8005ddc:	6193      	str	r3, [r2, #24]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(errorflag);
 8005dde:	693a      	ldr	r2, [r7, #16]
 8005de0:	4b19      	ldr	r3, [pc, #100]	; (8005e48 <FLASH_WaitForLastOperation+0x128>)
 8005de2:	4013      	ands	r3, r2
 8005de4:	693a      	ldr	r2, [r7, #16]
 8005de6:	429a      	cmp	r2, r3
 8005de8:	d103      	bne.n	8005df2 <FLASH_WaitForLastOperation+0xd2>
 8005dea:	4a18      	ldr	r2, [pc, #96]	; (8005e4c <FLASH_WaitForLastOperation+0x12c>)
 8005dec:	693b      	ldr	r3, [r7, #16]
 8005dee:	6153      	str	r3, [r2, #20]
 8005df0:	e005      	b.n	8005dfe <FLASH_WaitForLastOperation+0xde>
 8005df2:	4a16      	ldr	r2, [pc, #88]	; (8005e4c <FLASH_WaitForLastOperation+0x12c>)
 8005df4:	693b      	ldr	r3, [r7, #16]
 8005df6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005dfa:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

    return HAL_ERROR;
 8005dfe:	2301      	movs	r3, #1
 8005e00:	e01c      	b.n	8005e3c <FLASH_WaitForLastOperation+0x11c>
  }

  /* Check FLASH End of Operation flag  */
  if(Bank == FLASH_BANK_1)
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	2b01      	cmp	r3, #1
 8005e06:	d10b      	bne.n	8005e20 <FLASH_WaitForLastOperation+0x100>
  {
    if (__HAL_FLASH_GET_FLAG_BANK1(FLASH_FLAG_EOP_BANK1))
 8005e08:	4b10      	ldr	r3, [pc, #64]	; (8005e4c <FLASH_WaitForLastOperation+0x12c>)
 8005e0a:	691b      	ldr	r3, [r3, #16]
 8005e0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e14:	d111      	bne.n	8005e3a <FLASH_WaitForLastOperation+0x11a>
    {
      /* Clear FLASH End of Operation pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_EOP_BANK1);
 8005e16:	4b0d      	ldr	r3, [pc, #52]	; (8005e4c <FLASH_WaitForLastOperation+0x12c>)
 8005e18:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005e1c:	615a      	str	r2, [r3, #20]
 8005e1e:	e00c      	b.n	8005e3a <FLASH_WaitForLastOperation+0x11a>
    }
  }
#if defined (DUAL_BANK)
  else
  {
    if (__HAL_FLASH_GET_FLAG_BANK2(FLASH_FLAG_EOP_BANK2))
 8005e20:	4b0a      	ldr	r3, [pc, #40]	; (8005e4c <FLASH_WaitForLastOperation+0x12c>)
 8005e22:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8005e26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e2e:	d104      	bne.n	8005e3a <FLASH_WaitForLastOperation+0x11a>
    {
      /* Clear FLASH End of Operation pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK2(FLASH_FLAG_EOP_BANK2);
 8005e30:	4b06      	ldr	r3, [pc, #24]	; (8005e4c <FLASH_WaitForLastOperation+0x12c>)
 8005e32:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005e36:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 8005e3a:	2300      	movs	r3, #0
}
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	3718      	adds	r7, #24
 8005e40:	46bd      	mov	sp, r7
 8005e42:	bd80      	pop	{r7, pc}
 8005e44:	80000004 	.word	0x80000004
 8005e48:	1fef000f 	.word	0x1fef000f
 8005e4c:	52002000 	.word	0x52002000
 8005e50:	17ee0000 	.word	0x17ee0000
 8005e54:	240023d4 	.word	0x240023d4

08005e58 <FLASH_OB_WaitForLastOperation>:
  * @brief  Wait for a FLASH Option Bytes change operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_OB_WaitForLastOperation(uint32_t Timeout)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b084      	sub	sp, #16
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
  /* Get timeout */
  uint32_t tickstart = HAL_GetTick();
 8005e60:	f7fe fc8a 	bl	8004778 <HAL_GetTick>
 8005e64:	60f8      	str	r0, [r7, #12]

  /* Wait for the FLASH Option Bytes change operation to complete by polling on OPT_BUSY flag to be reset */
  while(READ_BIT(FLASH->OPTSR_CUR, FLASH_OPTSR_OPT_BUSY) != 0U)
 8005e66:	e010      	b.n	8005e8a <FLASH_OB_WaitForLastOperation+0x32>
  {
    if(Timeout != HAL_MAX_DELAY)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e6e:	d00c      	beq.n	8005e8a <FLASH_OB_WaitForLastOperation+0x32>
    {
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005e70:	f7fe fc82 	bl	8004778 <HAL_GetTick>
 8005e74:	4602      	mov	r2, r0
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	1ad3      	subs	r3, r2, r3
 8005e7a:	687a      	ldr	r2, [r7, #4]
 8005e7c:	429a      	cmp	r2, r3
 8005e7e:	d302      	bcc.n	8005e86 <FLASH_OB_WaitForLastOperation+0x2e>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d101      	bne.n	8005e8a <FLASH_OB_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8005e86:	2303      	movs	r3, #3
 8005e88:	e01a      	b.n	8005ec0 <FLASH_OB_WaitForLastOperation+0x68>
  while(READ_BIT(FLASH->OPTSR_CUR, FLASH_OPTSR_OPT_BUSY) != 0U)
 8005e8a:	4b0f      	ldr	r3, [pc, #60]	; (8005ec8 <FLASH_OB_WaitForLastOperation+0x70>)
 8005e8c:	69db      	ldr	r3, [r3, #28]
 8005e8e:	f003 0301 	and.w	r3, r3, #1
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d1e8      	bne.n	8005e68 <FLASH_OB_WaitForLastOperation+0x10>
      }
    }
  }

  /* Check option byte change error */
  if(READ_BIT(FLASH->OPTSR_CUR, FLASH_OPTSR_OPTCHANGEERR) != 0U)
 8005e96:	4b0c      	ldr	r3, [pc, #48]	; (8005ec8 <FLASH_OB_WaitForLastOperation+0x70>)
 8005e98:	69db      	ldr	r3, [r3, #28]
 8005e9a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d00d      	beq.n	8005ebe <FLASH_OB_WaitForLastOperation+0x66>
  {
    /* Save the error code */
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OB_CHANGE;
 8005ea2:	4b0a      	ldr	r3, [pc, #40]	; (8005ecc <FLASH_OB_WaitForLastOperation+0x74>)
 8005ea4:	699b      	ldr	r3, [r3, #24]
 8005ea6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005eaa:	4a08      	ldr	r2, [pc, #32]	; (8005ecc <FLASH_OB_WaitForLastOperation+0x74>)
 8005eac:	6193      	str	r3, [r2, #24]

    /* Clear the OB error flag */
    FLASH->OPTCCR |= FLASH_OPTCCR_CLR_OPTCHANGEERR;
 8005eae:	4b06      	ldr	r3, [pc, #24]	; (8005ec8 <FLASH_OB_WaitForLastOperation+0x70>)
 8005eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eb2:	4a05      	ldr	r2, [pc, #20]	; (8005ec8 <FLASH_OB_WaitForLastOperation+0x70>)
 8005eb4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005eb8:	6253      	str	r3, [r2, #36]	; 0x24

    return HAL_ERROR;
 8005eba:	2301      	movs	r3, #1
 8005ebc:	e000      	b.n	8005ec0 <FLASH_OB_WaitForLastOperation+0x68>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8005ebe:	2300      	movs	r3, #0
}
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	3710      	adds	r7, #16
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	bd80      	pop	{r7, pc}
 8005ec8:	52002000 	.word	0x52002000
 8005ecc:	240023d4 	.word	0x240023d4

08005ed0 <FLASH_CRC_WaitForLastOperation>:
  * @param  Timeout maximum flash operation timeout
  * @param  Bank flash FLASH_BANK_1 or FLASH_BANK_2
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_CRC_WaitForLastOperation(uint32_t Timeout, uint32_t Bank)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b084      	sub	sp, #16
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
 8005ed8:	6039      	str	r1, [r7, #0]
  uint32_t bsyflag;
  uint32_t tickstart = HAL_GetTick();
 8005eda:	f7fe fc4d 	bl	8004778 <HAL_GetTick>
 8005ede:	60b8      	str	r0, [r7, #8]

  assert_param(IS_FLASH_BANK_EXCLUSIVE(Bank));

  /* Select bsyflag depending on Bank */
  if(Bank == FLASH_BANK_1)
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	2b01      	cmp	r3, #1
 8005ee4:	d102      	bne.n	8005eec <FLASH_CRC_WaitForLastOperation+0x1c>
  {
    bsyflag = FLASH_FLAG_CRC_BUSY_BANK1;
 8005ee6:	2308      	movs	r3, #8
 8005ee8:	60fb      	str	r3, [r7, #12]
 8005eea:	e013      	b.n	8005f14 <FLASH_CRC_WaitForLastOperation+0x44>
  }
  else
  {
    bsyflag = FLASH_FLAG_CRC_BUSY_BANK2;
 8005eec:	4b31      	ldr	r3, [pc, #196]	; (8005fb4 <FLASH_CRC_WaitForLastOperation+0xe4>)
 8005eee:	60fb      	str	r3, [r7, #12]
  }

  /* Wait for the FLASH CRC computation to complete by polling on CRC_BUSY flag to be reset */
  while(__HAL_FLASH_GET_FLAG(bsyflag))
 8005ef0:	e010      	b.n	8005f14 <FLASH_CRC_WaitForLastOperation+0x44>
  {
    if(Timeout != HAL_MAX_DELAY)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ef8:	d00c      	beq.n	8005f14 <FLASH_CRC_WaitForLastOperation+0x44>
    {
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005efa:	f7fe fc3d 	bl	8004778 <HAL_GetTick>
 8005efe:	4602      	mov	r2, r0
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	1ad3      	subs	r3, r2, r3
 8005f04:	687a      	ldr	r2, [r7, #4]
 8005f06:	429a      	cmp	r2, r3
 8005f08:	d302      	bcc.n	8005f10 <FLASH_CRC_WaitForLastOperation+0x40>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d101      	bne.n	8005f14 <FLASH_CRC_WaitForLastOperation+0x44>
      {
        return HAL_TIMEOUT;
 8005f10:	2303      	movs	r3, #3
 8005f12:	e04b      	b.n	8005fac <FLASH_CRC_WaitForLastOperation+0xdc>
  while(__HAL_FLASH_GET_FLAG(bsyflag))
 8005f14:	68fa      	ldr	r2, [r7, #12]
 8005f16:	4b28      	ldr	r3, [pc, #160]	; (8005fb8 <FLASH_CRC_WaitForLastOperation+0xe8>)
 8005f18:	4013      	ands	r3, r2
 8005f1a:	68fa      	ldr	r2, [r7, #12]
 8005f1c:	429a      	cmp	r2, r3
 8005f1e:	d10a      	bne.n	8005f36 <FLASH_CRC_WaitForLastOperation+0x66>
 8005f20:	4b26      	ldr	r3, [pc, #152]	; (8005fbc <FLASH_CRC_WaitForLastOperation+0xec>)
 8005f22:	691a      	ldr	r2, [r3, #16]
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	4013      	ands	r3, r2
 8005f28:	68fa      	ldr	r2, [r7, #12]
 8005f2a:	429a      	cmp	r2, r3
 8005f2c:	bf0c      	ite	eq
 8005f2e:	2301      	moveq	r3, #1
 8005f30:	2300      	movne	r3, #0
 8005f32:	b2db      	uxtb	r3, r3
 8005f34:	e00c      	b.n	8005f50 <FLASH_CRC_WaitForLastOperation+0x80>
 8005f36:	4b21      	ldr	r3, [pc, #132]	; (8005fbc <FLASH_CRC_WaitForLastOperation+0xec>)
 8005f38:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8005f3c:	43da      	mvns	r2, r3
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	4013      	ands	r3, r2
 8005f42:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	bf0c      	ite	eq
 8005f4a:	2301      	moveq	r3, #1
 8005f4c:	2300      	movne	r3, #0
 8005f4e:	b2db      	uxtb	r3, r3
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d1ce      	bne.n	8005ef2 <FLASH_CRC_WaitForLastOperation+0x22>
      }
    }
  }

  /* Check FLASH CRC read error flag  */
  if(Bank == FLASH_BANK_1)
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	2b01      	cmp	r3, #1
 8005f58:	d112      	bne.n	8005f80 <FLASH_CRC_WaitForLastOperation+0xb0>
  {
    if (__HAL_FLASH_GET_FLAG_BANK1(FLASH_FLAG_CRCRDERR_BANK1))
 8005f5a:	4b18      	ldr	r3, [pc, #96]	; (8005fbc <FLASH_CRC_WaitForLastOperation+0xec>)
 8005f5c:	691b      	ldr	r3, [r3, #16]
 8005f5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f62:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005f66:	d120      	bne.n	8005faa <FLASH_CRC_WaitForLastOperation+0xda>
    {
      /* Save the error code */
      pFlash.ErrorCode |= HAL_FLASH_ERROR_CRCRD_BANK1;
 8005f68:	4b15      	ldr	r3, [pc, #84]	; (8005fc0 <FLASH_CRC_WaitForLastOperation+0xf0>)
 8005f6a:	699b      	ldr	r3, [r3, #24]
 8005f6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f70:	4a13      	ldr	r2, [pc, #76]	; (8005fc0 <FLASH_CRC_WaitForLastOperation+0xf0>)
 8005f72:	6193      	str	r3, [r2, #24]

      /* Clear FLASH CRC read error pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_CRCRDERR_BANK1);
 8005f74:	4b11      	ldr	r3, [pc, #68]	; (8005fbc <FLASH_CRC_WaitForLastOperation+0xec>)
 8005f76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f7a:	615a      	str	r2, [r3, #20]

      return HAL_ERROR;
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	e015      	b.n	8005fac <FLASH_CRC_WaitForLastOperation+0xdc>
    }
  }
#if defined (DUAL_BANK)
  else
  {
    if (__HAL_FLASH_GET_FLAG_BANK2(FLASH_FLAG_CRCRDERR_BANK2))
 8005f80:	4b0e      	ldr	r3, [pc, #56]	; (8005fbc <FLASH_CRC_WaitForLastOperation+0xec>)
 8005f82:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8005f86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f8a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005f8e:	d10c      	bne.n	8005faa <FLASH_CRC_WaitForLastOperation+0xda>
    {
      /* Save the error code */
      pFlash.ErrorCode |= HAL_FLASH_ERROR_CRCRD_BANK2;
 8005f90:	4b0b      	ldr	r3, [pc, #44]	; (8005fc0 <FLASH_CRC_WaitForLastOperation+0xf0>)
 8005f92:	699b      	ldr	r3, [r3, #24]
 8005f94:	f043 4310 	orr.w	r3, r3, #2415919104	; 0x90000000
 8005f98:	4a09      	ldr	r2, [pc, #36]	; (8005fc0 <FLASH_CRC_WaitForLastOperation+0xf0>)
 8005f9a:	6193      	str	r3, [r2, #24]

      /* Clear FLASH CRC read error pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK2(FLASH_FLAG_CRCRDERR_BANK2);
 8005f9c:	4b07      	ldr	r3, [pc, #28]	; (8005fbc <FLASH_CRC_WaitForLastOperation+0xec>)
 8005f9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005fa2:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

      return HAL_ERROR;
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	e000      	b.n	8005fac <FLASH_CRC_WaitForLastOperation+0xdc>
    }
  }
#endif /* DUAL_BANK */

  /* If there is no error flag set */
  return HAL_OK;
 8005faa:	2300      	movs	r3, #0
}
 8005fac:	4618      	mov	r0, r3
 8005fae:	3710      	adds	r7, #16
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	bd80      	pop	{r7, pc}
 8005fb4:	80000008 	.word	0x80000008
 8005fb8:	1fef000f 	.word	0x1fef000f
 8005fbc:	52002000 	.word	0x52002000
 8005fc0:	240023d4 	.word	0x240023d4

08005fc4 <HAL_FLASHEx_Erase>:
  *          the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b084      	sub	sp, #16
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
 8005fcc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005fce:	2300      	movs	r3, #0
 8005fd0:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
  assert_param(IS_FLASH_BANK(pEraseInit->Banks));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005fd2:	4b5e      	ldr	r3, [pc, #376]	; (800614c <HAL_FLASHEx_Erase+0x188>)
 8005fd4:	7d1b      	ldrb	r3, [r3, #20]
 8005fd6:	2b01      	cmp	r3, #1
 8005fd8:	d101      	bne.n	8005fde <HAL_FLASHEx_Erase+0x1a>
 8005fda:	2302      	movs	r3, #2
 8005fdc:	e0b2      	b.n	8006144 <HAL_FLASHEx_Erase+0x180>
 8005fde:	4b5b      	ldr	r3, [pc, #364]	; (800614c <HAL_FLASHEx_Erase+0x188>)
 8005fe0:	2201      	movs	r2, #1
 8005fe2:	751a      	strb	r2, [r3, #20]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005fe4:	4b59      	ldr	r3, [pc, #356]	; (800614c <HAL_FLASHEx_Erase+0x188>)
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed on Bank1 */
  if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	685b      	ldr	r3, [r3, #4]
 8005fee:	f003 0301 	and.w	r3, r3, #1
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d009      	beq.n	800600a <HAL_FLASHEx_Erase+0x46>
  {
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 8005ff6:	2101      	movs	r1, #1
 8005ff8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005ffc:	f7ff fe90 	bl	8005d20 <FLASH_WaitForLastOperation>
 8006000:	4603      	mov	r3, r0
 8006002:	2b00      	cmp	r3, #0
 8006004:	d001      	beq.n	800600a <HAL_FLASHEx_Erase+0x46>
    {
      status = HAL_ERROR;
 8006006:	2301      	movs	r3, #1
 8006008:	73fb      	strb	r3, [r7, #15]
    }
  }

#if defined (DUAL_BANK)
  /* Wait for last operation to be completed on Bank2 */
  if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	685b      	ldr	r3, [r3, #4]
 800600e:	f003 0302 	and.w	r3, r3, #2
 8006012:	2b00      	cmp	r3, #0
 8006014:	d009      	beq.n	800602a <HAL_FLASHEx_Erase+0x66>
  {
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2) != HAL_OK)
 8006016:	2102      	movs	r1, #2
 8006018:	f24c 3050 	movw	r0, #50000	; 0xc350
 800601c:	f7ff fe80 	bl	8005d20 <FLASH_WaitForLastOperation>
 8006020:	4603      	mov	r3, r0
 8006022:	2b00      	cmp	r3, #0
 8006024:	d001      	beq.n	800602a <HAL_FLASHEx_Erase+0x66>
    {
      status = HAL_ERROR;
 8006026:	2301      	movs	r3, #1
 8006028:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* DUAL_BANK */

  if(status == HAL_OK)
 800602a:	7bfb      	ldrb	r3, [r7, #15]
 800602c:	2b00      	cmp	r3, #0
 800602e:	f040 8085 	bne.w	800613c <HAL_FLASHEx_Erase+0x178>
  {
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	2b01      	cmp	r3, #1
 8006038:	d136      	bne.n	80060a8 <HAL_FLASHEx_Erase+0xe4>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->VoltageRange, pEraseInit->Banks);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	691a      	ldr	r2, [r3, #16]
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	685b      	ldr	r3, [r3, #4]
 8006042:	4619      	mov	r1, r3
 8006044:	4610      	mov	r0, r2
 8006046:	f000 f987 	bl	8006358 <FLASH_MassErase>

      /* Wait for last operation to be completed on Bank 1 */
      if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	685b      	ldr	r3, [r3, #4]
 800604e:	f003 0301 	and.w	r3, r3, #1
 8006052:	2b00      	cmp	r3, #0
 8006054:	d00f      	beq.n	8006076 <HAL_FLASHEx_Erase+0xb2>
      {
        if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 8006056:	2101      	movs	r1, #1
 8006058:	f24c 3050 	movw	r0, #50000	; 0xc350
 800605c:	f7ff fe60 	bl	8005d20 <FLASH_WaitForLastOperation>
 8006060:	4603      	mov	r3, r0
 8006062:	2b00      	cmp	r3, #0
 8006064:	d001      	beq.n	800606a <HAL_FLASHEx_Erase+0xa6>
        {
          status = HAL_ERROR;
 8006066:	2301      	movs	r3, #1
 8006068:	73fb      	strb	r3, [r7, #15]
        }
        /* if the erase operation is completed, disable the Bank1 BER Bit */
        FLASH->CR1 &= (~FLASH_CR_BER);
 800606a:	4b39      	ldr	r3, [pc, #228]	; (8006150 <HAL_FLASHEx_Erase+0x18c>)
 800606c:	68db      	ldr	r3, [r3, #12]
 800606e:	4a38      	ldr	r2, [pc, #224]	; (8006150 <HAL_FLASHEx_Erase+0x18c>)
 8006070:	f023 0308 	bic.w	r3, r3, #8
 8006074:	60d3      	str	r3, [r2, #12]
      }
#if defined (DUAL_BANK)
      /* Wait for last operation to be completed on Bank 2 */
      if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	685b      	ldr	r3, [r3, #4]
 800607a:	f003 0302 	and.w	r3, r3, #2
 800607e:	2b00      	cmp	r3, #0
 8006080:	d05c      	beq.n	800613c <HAL_FLASHEx_Erase+0x178>
      {
        if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2) != HAL_OK)
 8006082:	2102      	movs	r1, #2
 8006084:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006088:	f7ff fe4a 	bl	8005d20 <FLASH_WaitForLastOperation>
 800608c:	4603      	mov	r3, r0
 800608e:	2b00      	cmp	r3, #0
 8006090:	d001      	beq.n	8006096 <HAL_FLASHEx_Erase+0xd2>
        {
          status = HAL_ERROR;
 8006092:	2301      	movs	r3, #1
 8006094:	73fb      	strb	r3, [r7, #15]
        }
        /* if the erase operation is completed, disable the Bank2 BER Bit */
        FLASH->CR2 &= (~FLASH_CR_BER);
 8006096:	4b2e      	ldr	r3, [pc, #184]	; (8006150 <HAL_FLASHEx_Erase+0x18c>)
 8006098:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800609c:	4a2c      	ldr	r2, [pc, #176]	; (8006150 <HAL_FLASHEx_Erase+0x18c>)
 800609e:	f023 0308 	bic.w	r3, r3, #8
 80060a2:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
 80060a6:	e049      	b.n	800613c <HAL_FLASHEx_Erase+0x178>
#endif /* DUAL_BANK */
    }
    else
    {
      /*Initialization of SectorError variable*/
      *SectorError = 0xFFFFFFFFU;
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	f04f 32ff 	mov.w	r2, #4294967295
 80060ae:	601a      	str	r2, [r3, #0]

      /* Erase by sector by sector to be done*/
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	689b      	ldr	r3, [r3, #8]
 80060b4:	60bb      	str	r3, [r7, #8]
 80060b6:	e039      	b.n	800612c <HAL_FLASHEx_Erase+0x168>
      {
        FLASH_Erase_Sector(sector_index, pEraseInit->Banks, pEraseInit->VoltageRange);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6859      	ldr	r1, [r3, #4]
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	691b      	ldr	r3, [r3, #16]
 80060c0:	461a      	mov	r2, r3
 80060c2:	68b8      	ldr	r0, [r7, #8]
 80060c4:	f000 f9b2 	bl	800642c <FLASH_Erase_Sector>

        if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	685b      	ldr	r3, [r3, #4]
 80060cc:	f003 0301 	and.w	r3, r3, #1
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d00c      	beq.n	80060ee <HAL_FLASHEx_Erase+0x12a>
        {
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1);
 80060d4:	2101      	movs	r1, #1
 80060d6:	f24c 3050 	movw	r0, #50000	; 0xc350
 80060da:	f7ff fe21 	bl	8005d20 <FLASH_WaitForLastOperation>
 80060de:	4603      	mov	r3, r0
 80060e0:	73fb      	strb	r3, [r7, #15]

          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR1 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
 80060e2:	4b1b      	ldr	r3, [pc, #108]	; (8006150 <HAL_FLASHEx_Erase+0x18c>)
 80060e4:	68da      	ldr	r2, [r3, #12]
 80060e6:	491a      	ldr	r1, [pc, #104]	; (8006150 <HAL_FLASHEx_Erase+0x18c>)
 80060e8:	4b1a      	ldr	r3, [pc, #104]	; (8006154 <HAL_FLASHEx_Erase+0x190>)
 80060ea:	4013      	ands	r3, r2
 80060ec:	60cb      	str	r3, [r1, #12]
        }
#if defined (DUAL_BANK)
        if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	685b      	ldr	r3, [r3, #4]
 80060f2:	f003 0302 	and.w	r3, r3, #2
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d00e      	beq.n	8006118 <HAL_FLASHEx_Erase+0x154>
        {
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2);
 80060fa:	2102      	movs	r1, #2
 80060fc:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006100:	f7ff fe0e 	bl	8005d20 <FLASH_WaitForLastOperation>
 8006104:	4603      	mov	r3, r0
 8006106:	73fb      	strb	r3, [r7, #15]

          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR2 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
 8006108:	4b11      	ldr	r3, [pc, #68]	; (8006150 <HAL_FLASHEx_Erase+0x18c>)
 800610a:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 800610e:	4910      	ldr	r1, [pc, #64]	; (8006150 <HAL_FLASHEx_Erase+0x18c>)
 8006110:	4b10      	ldr	r3, [pc, #64]	; (8006154 <HAL_FLASHEx_Erase+0x190>)
 8006112:	4013      	ands	r3, r2
 8006114:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
        }
#endif /* DUAL_BANK */

        if(status != HAL_OK)
 8006118:	7bfb      	ldrb	r3, [r7, #15]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d003      	beq.n	8006126 <HAL_FLASHEx_Erase+0x162>
        {
          /* In case of error, stop erase procedure and return the faulty sector */
          *SectorError = sector_index;
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	68ba      	ldr	r2, [r7, #8]
 8006122:	601a      	str	r2, [r3, #0]
          break;
 8006124:	e00a      	b.n	800613c <HAL_FLASHEx_Erase+0x178>
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 8006126:	68bb      	ldr	r3, [r7, #8]
 8006128:	3301      	adds	r3, #1
 800612a:	60bb      	str	r3, [r7, #8]
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	68da      	ldr	r2, [r3, #12]
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	689b      	ldr	r3, [r3, #8]
 8006134:	4413      	add	r3, r2
 8006136:	68ba      	ldr	r2, [r7, #8]
 8006138:	429a      	cmp	r2, r3
 800613a:	d3bd      	bcc.n	80060b8 <HAL_FLASHEx_Erase+0xf4>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800613c:	4b03      	ldr	r3, [pc, #12]	; (800614c <HAL_FLASHEx_Erase+0x188>)
 800613e:	2200      	movs	r2, #0
 8006140:	751a      	strb	r2, [r3, #20]

  return status;
 8006142:	7bfb      	ldrb	r3, [r7, #15]
}
 8006144:	4618      	mov	r0, r3
 8006146:	3710      	adds	r7, #16
 8006148:	46bd      	mov	sp, r7
 800614a:	bd80      	pop	{r7, pc}
 800614c:	240023d4 	.word	0x240023d4
 8006150:	52002000 	.word	0x52002000
 8006154:	fffff8fb 	.word	0xfffff8fb

08006158 <HAL_FLASHEx_OBProgram>:
  *         contains the configuration information for the programming.
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_OBProgram(FLASH_OBProgramInitTypeDef *pOBInit)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b084      	sub	sp, #16
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_OPTIONBYTE(pOBInit->OptionType));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8006160:	4b4e      	ldr	r3, [pc, #312]	; (800629c <HAL_FLASHEx_OBProgram+0x144>)
 8006162:	7d1b      	ldrb	r3, [r3, #20]
 8006164:	2b01      	cmp	r3, #1
 8006166:	d101      	bne.n	800616c <HAL_FLASHEx_OBProgram+0x14>
 8006168:	2302      	movs	r3, #2
 800616a:	e092      	b.n	8006292 <HAL_FLASHEx_OBProgram+0x13a>
 800616c:	4b4b      	ldr	r3, [pc, #300]	; (800629c <HAL_FLASHEx_OBProgram+0x144>)
 800616e:	2201      	movs	r2, #1
 8006170:	751a      	strb	r2, [r3, #20]

  /* Reset Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8006172:	4b4a      	ldr	r3, [pc, #296]	; (800629c <HAL_FLASHEx_OBProgram+0x144>)
 8006174:	2200      	movs	r2, #0
 8006176:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed */
  if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 8006178:	2101      	movs	r1, #1
 800617a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800617e:	f7ff fdcf 	bl	8005d20 <FLASH_WaitForLastOperation>
 8006182:	4603      	mov	r3, r0
 8006184:	2b00      	cmp	r3, #0
 8006186:	d002      	beq.n	800618e <HAL_FLASHEx_OBProgram+0x36>
  {
    status = HAL_ERROR;
 8006188:	2301      	movs	r3, #1
 800618a:	73fb      	strb	r3, [r7, #15]
 800618c:	e00c      	b.n	80061a8 <HAL_FLASHEx_OBProgram+0x50>
  }
#if defined (DUAL_BANK)
  else if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2) != HAL_OK)
 800618e:	2102      	movs	r1, #2
 8006190:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006194:	f7ff fdc4 	bl	8005d20 <FLASH_WaitForLastOperation>
 8006198:	4603      	mov	r3, r0
 800619a:	2b00      	cmp	r3, #0
 800619c:	d002      	beq.n	80061a4 <HAL_FLASHEx_OBProgram+0x4c>
  {
    status = HAL_ERROR;
 800619e:	2301      	movs	r3, #1
 80061a0:	73fb      	strb	r3, [r7, #15]
 80061a2:	e001      	b.n	80061a8 <HAL_FLASHEx_OBProgram+0x50>
  }
#endif /* DUAL_BANK */
  else
  {
    status = HAL_OK;
 80061a4:	2300      	movs	r3, #0
 80061a6:	73fb      	strb	r3, [r7, #15]
  }

  if(status == HAL_OK)
 80061a8:	7bfb      	ldrb	r3, [r7, #15]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d16d      	bne.n	800628a <HAL_FLASHEx_OBProgram+0x132>
  {
    /*Write protection configuration*/
    if((pOBInit->OptionType & OPTIONBYTE_WRP) == OPTIONBYTE_WRP)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f003 0301 	and.w	r3, r3, #1
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d014      	beq.n	80061e4 <HAL_FLASHEx_OBProgram+0x8c>
    {
      assert_param(IS_WRPSTATE(pOBInit->WRPState));

      if(pOBInit->WRPState == OB_WRPSTATE_ENABLE)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	685b      	ldr	r3, [r3, #4]
 80061be:	2b01      	cmp	r3, #1
 80061c0:	d108      	bne.n	80061d4 <HAL_FLASHEx_OBProgram+0x7c>
      {
        /*Enable of Write protection on the selected Sector*/
        FLASH_OB_EnableWRP(pOBInit->WRPSector,pOBInit->Banks);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	689a      	ldr	r2, [r3, #8]
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	69db      	ldr	r3, [r3, #28]
 80061ca:	4619      	mov	r1, r3
 80061cc:	4610      	mov	r0, r2
 80061ce:	f000 f96b 	bl	80064a8 <FLASH_OB_EnableWRP>
 80061d2:	e007      	b.n	80061e4 <HAL_FLASHEx_OBProgram+0x8c>
      }
      else
      {
        /*Disable of Write protection on the selected Sector*/
        FLASH_OB_DisableWRP(pOBInit->WRPSector, pOBInit->Banks);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	689a      	ldr	r2, [r3, #8]
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	69db      	ldr	r3, [r3, #28]
 80061dc:	4619      	mov	r1, r3
 80061de:	4610      	mov	r0, r2
 80061e0:	f000 f98c 	bl	80064fc <FLASH_OB_DisableWRP>
      }
    }

    /* Read protection configuration */
    if((pOBInit->OptionType & OPTIONBYTE_RDP) != 0U)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f003 0302 	and.w	r3, r3, #2
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d004      	beq.n	80061fa <HAL_FLASHEx_OBProgram+0xa2>
    {
      /* Configure the Read protection level */
      FLASH_OB_RDPConfig(pOBInit->RDPLevel);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	68db      	ldr	r3, [r3, #12]
 80061f4:	4618      	mov	r0, r3
 80061f6:	f000 f9d7 	bl	80065a8 <FLASH_OB_RDPConfig>
    }

    /* User Configuration */
    if((pOBInit->OptionType & OPTIONBYTE_USER) != 0U)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f003 0304 	and.w	r3, r3, #4
 8006202:	2b00      	cmp	r3, #0
 8006204:	d007      	beq.n	8006216 <HAL_FLASHEx_OBProgram+0xbe>
    {
      /* Configure the user option bytes */
      FLASH_OB_UserConfig(pOBInit->USERType, pOBInit->USERConfig);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	695a      	ldr	r2, [r3, #20]
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	699b      	ldr	r3, [r3, #24]
 800620e:	4619      	mov	r1, r3
 8006210:	4610      	mov	r0, r2
 8006212:	f000 f9f9 	bl	8006608 <FLASH_OB_UserConfig>
    }

    /* PCROP Configuration */
    if((pOBInit->OptionType & OPTIONBYTE_PCROP) != 0U)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f003 0308 	and.w	r3, r3, #8
 800621e:	2b00      	cmp	r3, #0
 8006220:	d009      	beq.n	8006236 <HAL_FLASHEx_OBProgram+0xde>
    {
      assert_param(IS_FLASH_BANK(pOBInit->Banks));

      /*Configure the Proprietary code readout protection */
      FLASH_OB_PCROPConfig(pOBInit->PCROPConfig, pOBInit->PCROPStartAddr, pOBInit->PCROPEndAddr, pOBInit->Banks);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6a18      	ldr	r0, [r3, #32]
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	69db      	ldr	r3, [r3, #28]
 8006232:	f000 faa1 	bl	8006778 <FLASH_OB_PCROPConfig>
    }

    /* BOR Level configuration */
    if((pOBInit->OptionType & OPTIONBYTE_BOR) == OPTIONBYTE_BOR)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f003 0310 	and.w	r3, r3, #16
 800623e:	2b00      	cmp	r3, #0
 8006240:	d004      	beq.n	800624c <HAL_FLASHEx_OBProgram+0xf4>
    {
      FLASH_OB_BOR_LevelConfig(pOBInit->BORLevel);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	691b      	ldr	r3, [r3, #16]
 8006246:	4618      	mov	r0, r3
 8006248:	f000 fb0e 	bl	8006868 <FLASH_OB_BOR_LevelConfig>
    {
      FLASH_OB_CM4BootAddConfig(pOBInit->CM4BootConfig, pOBInit->CM4BootAddr0, pOBInit->CM4BootAddr1);
    }
#else /* Single Core*/
    /* Boot Address  configuration */
    if((pOBInit->OptionType & OPTIONBYTE_BOOTADD) == OPTIONBYTE_BOOTADD)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006254:	2b00      	cmp	r3, #0
 8006256:	d008      	beq.n	800626a <HAL_FLASHEx_OBProgram+0x112>
    {
      FLASH_OB_BootAddConfig(pOBInit->BootConfig, pOBInit->BootAddr0, pOBInit->BootAddr1);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006264:	461a      	mov	r2, r3
 8006266:	f000 fb21 	bl	80068ac <FLASH_OB_BootAddConfig>
    }
#endif /*DUAL_CORE*/

    /* Secure area configuration */
    if((pOBInit->OptionType & OPTIONBYTE_SECURE_AREA) == OPTIONBYTE_SECURE_AREA)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f003 0320 	and.w	r3, r3, #32
 8006272:	2b00      	cmp	r3, #0
 8006274:	d009      	beq.n	800628a <HAL_FLASHEx_OBProgram+0x132>
    {
      FLASH_OB_SecureAreaConfig(pOBInit->SecureAreaConfig, pOBInit->SecureAreaStartAddr, pOBInit->SecureAreaEndAddr,pOBInit->Banks);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	69db      	ldr	r3, [r3, #28]
 8006286:	f000 fb57 	bl	8006938 <FLASH_OB_SecureAreaConfig>
    }
#endif /* FLASH_OPTSR2_CPUFREQ_BOOST */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800628a:	4b04      	ldr	r3, [pc, #16]	; (800629c <HAL_FLASHEx_OBProgram+0x144>)
 800628c:	2200      	movs	r2, #0
 800628e:	751a      	strb	r2, [r3, #20]

  return status;
 8006290:	7bfb      	ldrb	r3, [r7, #15]
}
 8006292:	4618      	mov	r0, r3
 8006294:	3710      	adds	r7, #16
 8006296:	46bd      	mov	sp, r7
 8006298:	bd80      	pop	{r7, pc}
 800629a:	bf00      	nop
 800629c:	240023d4 	.word	0x240023d4

080062a0 <HAL_FLASHEx_OBGetConfig>:
  *         as this parameter is use to get the given Bank WRP, PCROP and secured area configuration.
  *
  * @retval None
  */
void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b082      	sub	sp, #8
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
  pOBInit->OptionType = (OPTIONBYTE_USER | OPTIONBYTE_RDP | OPTIONBYTE_BOR);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2216      	movs	r2, #22
 80062ac:	601a      	str	r2, [r3, #0]

  /* Get Read protection level */
  pOBInit->RDPLevel = FLASH_OB_GetRDP();
 80062ae:	f000 f98f 	bl	80065d0 <FLASH_OB_GetRDP>
 80062b2:	4602      	mov	r2, r0
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	60da      	str	r2, [r3, #12]

  /* Get the user option bytes */
  pOBInit->USERConfig = FLASH_OB_GetUser();
 80062b8:	f000 fa48 	bl	800674c <FLASH_OB_GetUser>
 80062bc:	4602      	mov	r2, r0
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	619a      	str	r2, [r3, #24]

  /*Get BOR Level*/
  pOBInit->BORLevel = FLASH_OB_GetBOR();
 80062c2:	f000 fae5 	bl	8006890 <FLASH_OB_GetBOR>
 80062c6:	4602      	mov	r2, r0
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	611a      	str	r2, [r3, #16]

#if defined (DUAL_BANK)
  if ((pOBInit->Banks == FLASH_BANK_1) || (pOBInit->Banks == FLASH_BANK_2))
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	69db      	ldr	r3, [r3, #28]
 80062d0:	2b01      	cmp	r3, #1
 80062d2:	d003      	beq.n	80062dc <HAL_FLASHEx_OBGetConfig+0x3c>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	69db      	ldr	r3, [r3, #28]
 80062d8:	2b02      	cmp	r3, #2
 80062da:	d129      	bne.n	8006330 <HAL_FLASHEx_OBGetConfig+0x90>
#else
  if (pOBInit->Banks == FLASH_BANK_1)
#endif /* DUAL_BANK */
  {
    pOBInit->OptionType |= (OPTIONBYTE_WRP | OPTIONBYTE_PCROP | OPTIONBYTE_SECURE_AREA);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f043 0229 	orr.w	r2, r3, #41	; 0x29
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	601a      	str	r2, [r3, #0]

    /* Get write protection on the selected area */
    FLASH_OB_GetWRP(&(pOBInit->WRPState), &(pOBInit->WRPSector), pOBInit->Banks);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	1d18      	adds	r0, r3, #4
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	f103 0108 	add.w	r1, r3, #8
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	69db      	ldr	r3, [r3, #28]
 80062f6:	461a      	mov	r2, r3
 80062f8:	f000 f928 	bl	800654c <FLASH_OB_GetWRP>

    /* Get the Proprietary code readout protection */
    FLASH_OB_GetPCROP(&(pOBInit->PCROPConfig), &(pOBInit->PCROPStartAddr), &(pOBInit->PCROPEndAddr), pOBInit->Banks);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	f103 0020 	add.w	r0, r3, #32
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	69db      	ldr	r3, [r3, #28]
 8006312:	f000 fa67 	bl	80067e4 <FLASH_OB_GetPCROP>

    /*Get Bank Secure area*/
    FLASH_OB_GetSecureArea(&(pOBInit->SecureAreaConfig), &(pOBInit->SecureAreaStartAddr), &(pOBInit->SecureAreaEndAddr), pOBInit->Banks);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	69db      	ldr	r3, [r3, #28]
 800632c:	f000 fb3e 	bl	80069ac <FLASH_OB_GetSecureArea>
  }

  /*Get Boot Address*/
  FLASH_OB_GetBootAdd(&(pOBInit->BootAddr0), &(pOBInit->BootAddr1));
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	3334      	adds	r3, #52	; 0x34
 800633a:	4619      	mov	r1, r3
 800633c:	4610      	mov	r0, r2
 800633e:	f000 fadf 	bl	8006900 <FLASH_OB_GetBootAdd>
  pOBInit->OptionType |= OPTIONBYTE_CM7_BOOTADD | OPTIONBYTE_CM4_BOOTADD;

  /*Get CM4 Boot Address*/
  FLASH_OB_GetCM4BootAdd(&(pOBInit->CM4BootAddr0), &(pOBInit->CM4BootAddr1));
#else
  pOBInit->OptionType |= OPTIONBYTE_BOOTADD;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	601a      	str	r2, [r3, #0]
  pOBInit->OptionType |= OPTIONBYTE_FREQ_BOOST;

  /* Get CPU Frequency Boost */
  pOBInit->FreqBoostState = FLASH_OB_CPUFreq_GetBoost();
#endif /* FLASH_OPTSR2_CPUFREQ_BOOST */
}
 800634e:	bf00      	nop
 8006350:	3708      	adds	r7, #8
 8006352:	46bd      	mov	sp, r7
 8006354:	bd80      	pop	{r7, pc}
	...

08006358 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint32_t VoltageRange, uint32_t Banks)
{
 8006358:	b480      	push	{r7}
 800635a:	b083      	sub	sp, #12
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
 8006360:	6039      	str	r1, [r7, #0]
#endif /* FLASH_CR_PSIZE */
  assert_param(IS_FLASH_BANK(Banks));

#if defined (DUAL_BANK)
  /* Flash Mass Erase */
  if((Banks & FLASH_BANK_BOTH) == FLASH_BANK_BOTH)
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	f003 0303 	and.w	r3, r3, #3
 8006368:	2b03      	cmp	r3, #3
 800636a:	d122      	bne.n	80063b2 <FLASH_MassErase+0x5a>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange for Bank1 and Bank2 */
    FLASH->CR1 &= (~FLASH_CR_PSIZE);
 800636c:	4b2e      	ldr	r3, [pc, #184]	; (8006428 <FLASH_MassErase+0xd0>)
 800636e:	68db      	ldr	r3, [r3, #12]
 8006370:	4a2d      	ldr	r2, [pc, #180]	; (8006428 <FLASH_MassErase+0xd0>)
 8006372:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8006376:	60d3      	str	r3, [r2, #12]
    FLASH->CR2 &= (~FLASH_CR_PSIZE);
 8006378:	4b2b      	ldr	r3, [pc, #172]	; (8006428 <FLASH_MassErase+0xd0>)
 800637a:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800637e:	4a2a      	ldr	r2, [pc, #168]	; (8006428 <FLASH_MassErase+0xd0>)
 8006380:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8006384:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

    /* Set voltage range */
    FLASH->CR1 |= VoltageRange;
 8006388:	4b27      	ldr	r3, [pc, #156]	; (8006428 <FLASH_MassErase+0xd0>)
 800638a:	68da      	ldr	r2, [r3, #12]
 800638c:	4926      	ldr	r1, [pc, #152]	; (8006428 <FLASH_MassErase+0xd0>)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	4313      	orrs	r3, r2
 8006392:	60cb      	str	r3, [r1, #12]
    FLASH->CR2 |= VoltageRange;
 8006394:	4b24      	ldr	r3, [pc, #144]	; (8006428 <FLASH_MassErase+0xd0>)
 8006396:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 800639a:	4923      	ldr	r1, [pc, #140]	; (8006428 <FLASH_MassErase+0xd0>)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	4313      	orrs	r3, r2
 80063a0:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
#endif /* FLASH_CR_PSIZE */

    /* Set Mass Erase Bit */
    FLASH->OPTCR |= FLASH_OPTCR_MER;
 80063a4:	4b20      	ldr	r3, [pc, #128]	; (8006428 <FLASH_MassErase+0xd0>)
 80063a6:	699b      	ldr	r3, [r3, #24]
 80063a8:	4a1f      	ldr	r2, [pc, #124]	; (8006428 <FLASH_MassErase+0xd0>)
 80063aa:	f043 0310 	orr.w	r3, r3, #16
 80063ae:	6193      	str	r3, [r2, #24]
      /* Erase Bank2 */
      FLASH->CR2 |= (FLASH_CR_BER | FLASH_CR_START);
    }
#endif /* DUAL_BANK */
  }
}
 80063b0:	e033      	b.n	800641a <FLASH_MassErase+0xc2>
    if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	f003 0301 	and.w	r3, r3, #1
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d011      	beq.n	80063e0 <FLASH_MassErase+0x88>
      FLASH->CR1 &= (~FLASH_CR_PSIZE);
 80063bc:	4b1a      	ldr	r3, [pc, #104]	; (8006428 <FLASH_MassErase+0xd0>)
 80063be:	68db      	ldr	r3, [r3, #12]
 80063c0:	4a19      	ldr	r2, [pc, #100]	; (8006428 <FLASH_MassErase+0xd0>)
 80063c2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80063c6:	60d3      	str	r3, [r2, #12]
      FLASH->CR1 |=  VoltageRange;
 80063c8:	4b17      	ldr	r3, [pc, #92]	; (8006428 <FLASH_MassErase+0xd0>)
 80063ca:	68da      	ldr	r2, [r3, #12]
 80063cc:	4916      	ldr	r1, [pc, #88]	; (8006428 <FLASH_MassErase+0xd0>)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	4313      	orrs	r3, r2
 80063d2:	60cb      	str	r3, [r1, #12]
      FLASH->CR1 |= (FLASH_CR_BER | FLASH_CR_START);
 80063d4:	4b14      	ldr	r3, [pc, #80]	; (8006428 <FLASH_MassErase+0xd0>)
 80063d6:	68db      	ldr	r3, [r3, #12]
 80063d8:	4a13      	ldr	r2, [pc, #76]	; (8006428 <FLASH_MassErase+0xd0>)
 80063da:	f043 0388 	orr.w	r3, r3, #136	; 0x88
 80063de:	60d3      	str	r3, [r2, #12]
    if((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	f003 0302 	and.w	r3, r3, #2
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d017      	beq.n	800641a <FLASH_MassErase+0xc2>
      FLASH->CR2 &= (~FLASH_CR_PSIZE);
 80063ea:	4b0f      	ldr	r3, [pc, #60]	; (8006428 <FLASH_MassErase+0xd0>)
 80063ec:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80063f0:	4a0d      	ldr	r2, [pc, #52]	; (8006428 <FLASH_MassErase+0xd0>)
 80063f2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80063f6:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
      FLASH->CR2 |= VoltageRange;
 80063fa:	4b0b      	ldr	r3, [pc, #44]	; (8006428 <FLASH_MassErase+0xd0>)
 80063fc:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8006400:	4909      	ldr	r1, [pc, #36]	; (8006428 <FLASH_MassErase+0xd0>)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	4313      	orrs	r3, r2
 8006406:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
      FLASH->CR2 |= (FLASH_CR_BER | FLASH_CR_START);
 800640a:	4b07      	ldr	r3, [pc, #28]	; (8006428 <FLASH_MassErase+0xd0>)
 800640c:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8006410:	4a05      	ldr	r2, [pc, #20]	; (8006428 <FLASH_MassErase+0xd0>)
 8006412:	f043 0388 	orr.w	r3, r3, #136	; 0x88
 8006416:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
}
 800641a:	bf00      	nop
 800641c:	370c      	adds	r7, #12
 800641e:	46bd      	mov	sp, r7
 8006420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006424:	4770      	bx	lr
 8006426:	bf00      	nop
 8006428:	52002000 	.word	0x52002000

0800642c <FLASH_Erase_Sector>:
  *            @arg FLASH_VOLTAGE_RANGE_4 : Flash program/erase by 64 bits
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint32_t Banks, uint32_t VoltageRange)
{
 800642c:	b480      	push	{r7}
 800642e:	b085      	sub	sp, #20
 8006430:	af00      	add	r7, sp, #0
 8006432:	60f8      	str	r0, [r7, #12]
 8006434:	60b9      	str	r1, [r7, #8]
 8006436:	607a      	str	r2, [r7, #4]
  assert_param(IS_VOLTAGERANGE(VoltageRange));
#else
  UNUSED(VoltageRange);
#endif /* FLASH_CR_PSIZE */

  if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	f003 0301 	and.w	r3, r3, #1
 800643e:	2b00      	cmp	r3, #0
 8006440:	d010      	beq.n	8006464 <FLASH_Erase_Sector+0x38>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange and Sector Number for Bank1 */
    FLASH->CR1 &= ~(FLASH_CR_PSIZE | FLASH_CR_SNB);
 8006442:	4b18      	ldr	r3, [pc, #96]	; (80064a4 <FLASH_Erase_Sector+0x78>)
 8006444:	68db      	ldr	r3, [r3, #12]
 8006446:	4a17      	ldr	r2, [pc, #92]	; (80064a4 <FLASH_Erase_Sector+0x78>)
 8006448:	f423 63e6 	bic.w	r3, r3, #1840	; 0x730
 800644c:	60d3      	str	r3, [r2, #12]

    FLASH->CR1 |= (FLASH_CR_SER | VoltageRange | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 800644e:	4b15      	ldr	r3, [pc, #84]	; (80064a4 <FLASH_Erase_Sector+0x78>)
 8006450:	68da      	ldr	r2, [r3, #12]
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	0219      	lsls	r1, r3, #8
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	430b      	orrs	r3, r1
 800645a:	4313      	orrs	r3, r2
 800645c:	4a11      	ldr	r2, [pc, #68]	; (80064a4 <FLASH_Erase_Sector+0x78>)
 800645e:	f043 0384 	orr.w	r3, r3, #132	; 0x84
 8006462:	60d3      	str	r3, [r2, #12]
    FLASH->CR1 |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
#endif /* FLASH_CR_PSIZE */
  }

#if defined (DUAL_BANK)
  if((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	f003 0302 	and.w	r3, r3, #2
 800646a:	2b00      	cmp	r3, #0
 800646c:	d014      	beq.n	8006498 <FLASH_Erase_Sector+0x6c>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange and Sector Number for Bank2 */
    FLASH->CR2 &= ~(FLASH_CR_PSIZE | FLASH_CR_SNB);
 800646e:	4b0d      	ldr	r3, [pc, #52]	; (80064a4 <FLASH_Erase_Sector+0x78>)
 8006470:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8006474:	4a0b      	ldr	r2, [pc, #44]	; (80064a4 <FLASH_Erase_Sector+0x78>)
 8006476:	f423 63e6 	bic.w	r3, r3, #1840	; 0x730
 800647a:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

    FLASH->CR2 |= (FLASH_CR_SER | VoltageRange  | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 800647e:	4b09      	ldr	r3, [pc, #36]	; (80064a4 <FLASH_Erase_Sector+0x78>)
 8006480:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	0219      	lsls	r1, r3, #8
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	430b      	orrs	r3, r1
 800648c:	4313      	orrs	r3, r2
 800648e:	4a05      	ldr	r2, [pc, #20]	; (80064a4 <FLASH_Erase_Sector+0x78>)
 8006490:	f043 0384 	orr.w	r3, r3, #132	; 0x84
 8006494:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

    FLASH->CR2 |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
#endif /* FLASH_CR_PSIZE */
  }
#endif /* DUAL_BANK */
}
 8006498:	bf00      	nop
 800649a:	3714      	adds	r7, #20
 800649c:	46bd      	mov	sp, r7
 800649e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a2:	4770      	bx	lr
 80064a4:	52002000 	.word	0x52002000

080064a8 <FLASH_OB_EnableWRP>:
  *            @arg FLASH_BANK_BOTH: enable WRP on both bank1 and bank2 specified sectors
  *
  * @retval HAL FLASH State
  */
static void FLASH_OB_EnableWRP(uint32_t WRPSector, uint32_t Banks)
{
 80064a8:	b480      	push	{r7}
 80064aa:	b083      	sub	sp, #12
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
 80064b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_OB_WRP_SECTOR(WRPSector));
  assert_param(IS_FLASH_BANK(Banks));

  if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	f003 0301 	and.w	r3, r3, #1
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d007      	beq.n	80064cc <FLASH_OB_EnableWRP+0x24>
  {
    /* Enable Write Protection for bank 1 */
    FLASH->WPSN_PRG1 &= (~(WRPSector & FLASH_WPSN_WRPSN));
 80064bc:	4b0e      	ldr	r3, [pc, #56]	; (80064f8 <FLASH_OB_EnableWRP+0x50>)
 80064be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	b2db      	uxtb	r3, r3
 80064c4:	43db      	mvns	r3, r3
 80064c6:	490c      	ldr	r1, [pc, #48]	; (80064f8 <FLASH_OB_EnableWRP+0x50>)
 80064c8:	4013      	ands	r3, r2
 80064ca:	63cb      	str	r3, [r1, #60]	; 0x3c
  }

#if defined (DUAL_BANK)
  if((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	f003 0302 	and.w	r3, r3, #2
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d009      	beq.n	80064ea <FLASH_OB_EnableWRP+0x42>
  {
    /* Enable Write Protection for bank 2 */
    FLASH->WPSN_PRG2 &= (~(WRPSector & FLASH_WPSN_WRPSN));
 80064d6:	4b08      	ldr	r3, [pc, #32]	; (80064f8 <FLASH_OB_EnableWRP+0x50>)
 80064d8:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	b2db      	uxtb	r3, r3
 80064e0:	43db      	mvns	r3, r3
 80064e2:	4905      	ldr	r1, [pc, #20]	; (80064f8 <FLASH_OB_EnableWRP+0x50>)
 80064e4:	4013      	ands	r3, r2
 80064e6:	f8c1 313c 	str.w	r3, [r1, #316]	; 0x13c
  }
#endif /* DUAL_BANK */
}
 80064ea:	bf00      	nop
 80064ec:	370c      	adds	r7, #12
 80064ee:	46bd      	mov	sp, r7
 80064f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f4:	4770      	bx	lr
 80064f6:	bf00      	nop
 80064f8:	52002000 	.word	0x52002000

080064fc <FLASH_OB_DisableWRP>:
  *            @arg FLASH_BANK_BOTH: disable WRP on both bank1 and bank2 specified sectors
  *
  * @retval HAL FLASH State
  */
static void FLASH_OB_DisableWRP(uint32_t WRPSector, uint32_t Banks)
{
 80064fc:	b480      	push	{r7}
 80064fe:	b083      	sub	sp, #12
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
 8006504:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_OB_WRP_SECTOR(WRPSector));
  assert_param(IS_FLASH_BANK(Banks));

  if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	f003 0301 	and.w	r3, r3, #1
 800650c:	2b00      	cmp	r3, #0
 800650e:	d006      	beq.n	800651e <FLASH_OB_DisableWRP+0x22>
  {
    /* Disable Write Protection for bank 1 */
    FLASH->WPSN_PRG1 |= (WRPSector & FLASH_WPSN_WRPSN);
 8006510:	4b0d      	ldr	r3, [pc, #52]	; (8006548 <FLASH_OB_DisableWRP+0x4c>)
 8006512:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	b2db      	uxtb	r3, r3
 8006518:	490b      	ldr	r1, [pc, #44]	; (8006548 <FLASH_OB_DisableWRP+0x4c>)
 800651a:	4313      	orrs	r3, r2
 800651c:	63cb      	str	r3, [r1, #60]	; 0x3c
  }

#if defined (DUAL_BANK)
  if((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	f003 0302 	and.w	r3, r3, #2
 8006524:	2b00      	cmp	r3, #0
 8006526:	d008      	beq.n	800653a <FLASH_OB_DisableWRP+0x3e>
  {
    /* Disable Write Protection for bank 2 */
    FLASH->WPSN_PRG2 |= (WRPSector & FLASH_WPSN_WRPSN);
 8006528:	4b07      	ldr	r3, [pc, #28]	; (8006548 <FLASH_OB_DisableWRP+0x4c>)
 800652a:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	b2db      	uxtb	r3, r3
 8006532:	4905      	ldr	r1, [pc, #20]	; (8006548 <FLASH_OB_DisableWRP+0x4c>)
 8006534:	4313      	orrs	r3, r2
 8006536:	f8c1 313c 	str.w	r3, [r1, #316]	; 0x13c
  }
#endif /* DUAL_BANK */
}
 800653a:	bf00      	nop
 800653c:	370c      	adds	r7, #12
 800653e:	46bd      	mov	sp, r7
 8006540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006544:	4770      	bx	lr
 8006546:	bf00      	nop
 8006548:	52002000 	.word	0x52002000

0800654c <FLASH_OB_GetWRP>:
  *            @arg FLASH_BANK_BOTH: note allowed in this functions
  *
  * @retval HAL FLASH State
  */
static void FLASH_OB_GetWRP(uint32_t *WRPState, uint32_t *WRPSector, uint32_t Bank)
{
 800654c:	b480      	push	{r7}
 800654e:	b087      	sub	sp, #28
 8006550:	af00      	add	r7, sp, #0
 8006552:	60f8      	str	r0, [r7, #12]
 8006554:	60b9      	str	r1, [r7, #8]
 8006556:	607a      	str	r2, [r7, #4]
  uint32_t regvalue = 0U;
 8006558:	2300      	movs	r3, #0
 800655a:	617b      	str	r3, [r7, #20]

  if(Bank == FLASH_BANK_1)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2b01      	cmp	r3, #1
 8006560:	d102      	bne.n	8006568 <FLASH_OB_GetWRP+0x1c>
  {
    regvalue = FLASH->WPSN_CUR1;
 8006562:	4b10      	ldr	r3, [pc, #64]	; (80065a4 <FLASH_OB_GetWRP+0x58>)
 8006564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006566:	617b      	str	r3, [r7, #20]
  }

#if defined (DUAL_BANK)
  if(Bank == FLASH_BANK_2)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2b02      	cmp	r3, #2
 800656c:	d103      	bne.n	8006576 <FLASH_OB_GetWRP+0x2a>
  {
    regvalue = FLASH->WPSN_CUR2;
 800656e:	4b0d      	ldr	r3, [pc, #52]	; (80065a4 <FLASH_OB_GetWRP+0x58>)
 8006570:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8006574:	617b      	str	r3, [r7, #20]
  }
#endif /* DUAL_BANK */

  (*WRPSector) = (~regvalue) & FLASH_WPSN_WRPSN;
 8006576:	697b      	ldr	r3, [r7, #20]
 8006578:	43db      	mvns	r3, r3
 800657a:	b2da      	uxtb	r2, r3
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	601a      	str	r2, [r3, #0]

  if(*WRPSector == 0U)
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d103      	bne.n	8006590 <FLASH_OB_GetWRP+0x44>
  {
    (*WRPState) = OB_WRPSTATE_DISABLE;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	2200      	movs	r2, #0
 800658c:	601a      	str	r2, [r3, #0]
  }
  else
  {
    (*WRPState) = OB_WRPSTATE_ENABLE;
  }
}
 800658e:	e002      	b.n	8006596 <FLASH_OB_GetWRP+0x4a>
    (*WRPState) = OB_WRPSTATE_ENABLE;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	2201      	movs	r2, #1
 8006594:	601a      	str	r2, [r3, #0]
}
 8006596:	bf00      	nop
 8006598:	371c      	adds	r7, #28
 800659a:	46bd      	mov	sp, r7
 800659c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a0:	4770      	bx	lr
 80065a2:	bf00      	nop
 80065a4:	52002000 	.word	0x52002000

080065a8 <FLASH_OB_RDPConfig>:
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  *
  * @retval HAL status
  */
static void FLASH_OB_RDPConfig(uint32_t RDPLevel)
{
 80065a8:	b480      	push	{r7}
 80065aa:	b083      	sub	sp, #12
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_OB_RDP_LEVEL(RDPLevel));

  /* Configure the RDP level in the option bytes register */
  MODIFY_REG(FLASH->OPTSR_PRG, FLASH_OPTSR_RDP, RDPLevel);
 80065b0:	4b06      	ldr	r3, [pc, #24]	; (80065cc <FLASH_OB_RDPConfig+0x24>)
 80065b2:	6a1b      	ldr	r3, [r3, #32]
 80065b4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80065b8:	4904      	ldr	r1, [pc, #16]	; (80065cc <FLASH_OB_RDPConfig+0x24>)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	4313      	orrs	r3, r2
 80065be:	620b      	str	r3, [r1, #32]
}
 80065c0:	bf00      	nop
 80065c2:	370c      	adds	r7, #12
 80065c4:	46bd      	mov	sp, r7
 80065c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ca:	4770      	bx	lr
 80065cc:	52002000 	.word	0x52002000

080065d0 <FLASH_OB_GetRDP>:
  *            @arg OB_RDP_LEVEL_0: No protection
  *            @arg OB_RDP_LEVEL_1: Read protection of the memory
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  */
static uint32_t FLASH_OB_GetRDP(void)
{
 80065d0:	b480      	push	{r7}
 80065d2:	b083      	sub	sp, #12
 80065d4:	af00      	add	r7, sp, #0
  uint32_t rdp_level = READ_BIT(FLASH->OPTSR_CUR, FLASH_OPTSR_RDP);
 80065d6:	4b0b      	ldr	r3, [pc, #44]	; (8006604 <FLASH_OB_GetRDP+0x34>)
 80065d8:	69db      	ldr	r3, [r3, #28]
 80065da:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80065de:	607b      	str	r3, [r7, #4]
  
  if ((rdp_level != OB_RDP_LEVEL_0) && (rdp_level != OB_RDP_LEVEL_2))
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	f5b3 4f2a 	cmp.w	r3, #43520	; 0xaa00
 80065e6:	d006      	beq.n	80065f6 <FLASH_OB_GetRDP+0x26>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	f5b3 4f4c 	cmp.w	r3, #52224	; 0xcc00
 80065ee:	d002      	beq.n	80065f6 <FLASH_OB_GetRDP+0x26>
  {
    return (OB_RDP_LEVEL_1);
 80065f0:	f44f 43aa 	mov.w	r3, #21760	; 0x5500
 80065f4:	e000      	b.n	80065f8 <FLASH_OB_GetRDP+0x28>
  }
  else
  {
    return rdp_level;
 80065f6:	687b      	ldr	r3, [r7, #4]
  }
}
 80065f8:	4618      	mov	r0, r3
 80065fa:	370c      	adds	r7, #12
 80065fc:	46bd      	mov	sp, r7
 80065fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006602:	4770      	bx	lr
 8006604:	52002000 	.word	0x52002000

08006608 <FLASH_OB_UserConfig>:
  *
  * @retval HAL status
  */
#endif /*DUAL_CORE*/
static void FLASH_OB_UserConfig(uint32_t UserType, uint32_t UserConfig)
{
 8006608:	b480      	push	{r7}
 800660a:	b085      	sub	sp, #20
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
 8006610:	6039      	str	r1, [r7, #0]
  uint32_t optr_reg_val = 0;
 8006612:	2300      	movs	r3, #0
 8006614:	60fb      	str	r3, [r7, #12]
  uint32_t optr_reg_mask = 0;
 8006616:	2300      	movs	r3, #0
 8006618:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_OB_USER_TYPE(UserType));

  if((UserType & OB_USER_IWDG1_SW) != 0U)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	f003 0301 	and.w	r3, r3, #1
 8006620:	2b00      	cmp	r3, #0
 8006622:	d009      	beq.n	8006638 <FLASH_OB_UserConfig+0x30>
  {
    /* IWDG_HW option byte should be modified */
    assert_param(IS_OB_IWDG1_SOURCE(UserConfig & FLASH_OPTSR_IWDG1_SW));

    /* Set value and mask for IWDG_HW option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTSR_IWDG1_SW);
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	f003 0310 	and.w	r3, r3, #16
 800662a:	68fa      	ldr	r2, [r7, #12]
 800662c:	4313      	orrs	r3, r2
 800662e:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTSR_IWDG1_SW;
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	f043 0310 	orr.w	r3, r3, #16
 8006636:	60bb      	str	r3, [r7, #8]
    /* Set value and mask for IWDG2_SW option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTSR_IWDG2_SW);
    optr_reg_mask |= FLASH_OPTSR_IWDG2_SW;
  }
#endif /*DUAL_CORE*/
  if((UserType & OB_USER_NRST_STOP_D1) != 0U)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	f003 0302 	and.w	r3, r3, #2
 800663e:	2b00      	cmp	r3, #0
 8006640:	d009      	beq.n	8006656 <FLASH_OB_UserConfig+0x4e>
  {
    /* NRST_STOP option byte should be modified */
    assert_param(IS_OB_STOP_D1_RESET(UserConfig & FLASH_OPTSR_NRST_STOP_D1));

    /* Set value and mask for NRST_STOP option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTSR_NRST_STOP_D1);
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006648:	68fa      	ldr	r2, [r7, #12]
 800664a:	4313      	orrs	r3, r2
 800664c:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTSR_NRST_STOP_D1;
 800664e:	68bb      	ldr	r3, [r7, #8]
 8006650:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006654:	60bb      	str	r3, [r7, #8]
  }

  if((UserType & OB_USER_NRST_STDBY_D1) != 0U)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	f003 0304 	and.w	r3, r3, #4
 800665c:	2b00      	cmp	r3, #0
 800665e:	d009      	beq.n	8006674 <FLASH_OB_UserConfig+0x6c>
  {
    /* NRST_STDBY option byte should be modified */
    assert_param(IS_OB_STDBY_D1_RESET(UserConfig & FLASH_OPTSR_NRST_STBY_D1));

    /* Set value and mask for NRST_STDBY option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTSR_NRST_STBY_D1);
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006666:	68fa      	ldr	r2, [r7, #12]
 8006668:	4313      	orrs	r3, r2
 800666a:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTSR_NRST_STBY_D1;
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006672:	60bb      	str	r3, [r7, #8]
  }

  if((UserType & OB_USER_IWDG_STOP) != 0U)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	f003 0308 	and.w	r3, r3, #8
 800667a:	2b00      	cmp	r3, #0
 800667c:	d009      	beq.n	8006692 <FLASH_OB_UserConfig+0x8a>
  {
    /* IWDG_STOP option byte should be modified */
    assert_param(IS_OB_USER_IWDG_STOP(UserConfig & FLASH_OPTSR_FZ_IWDG_STOP));

    /* Set value and mask for IWDG_STOP option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTSR_FZ_IWDG_STOP);
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006684:	68fa      	ldr	r2, [r7, #12]
 8006686:	4313      	orrs	r3, r2
 8006688:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTSR_FZ_IWDG_STOP;
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006690:	60bb      	str	r3, [r7, #8]
  }

  if((UserType & OB_USER_IWDG_STDBY) != 0U)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	f003 0310 	and.w	r3, r3, #16
 8006698:	2b00      	cmp	r3, #0
 800669a:	d009      	beq.n	80066b0 <FLASH_OB_UserConfig+0xa8>
  {
    /* IWDG_STDBY option byte should be modified */
    assert_param(IS_OB_USER_IWDG_STDBY(UserConfig & FLASH_OPTSR_FZ_IWDG_SDBY));

    /* Set value and mask for IWDG_STDBY option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTSR_FZ_IWDG_SDBY);
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80066a2:	68fa      	ldr	r2, [r7, #12]
 80066a4:	4313      	orrs	r3, r2
 80066a6:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTSR_FZ_IWDG_SDBY;
 80066a8:	68bb      	ldr	r3, [r7, #8]
 80066aa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80066ae:	60bb      	str	r3, [r7, #8]
  }

  if((UserType & OB_USER_ST_RAM_SIZE) != 0U)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	f003 0320 	and.w	r3, r3, #32
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d009      	beq.n	80066ce <FLASH_OB_UserConfig+0xc6>
  {
    /* ST_RAM_SIZE option byte should be modified */
    assert_param(IS_OB_USER_ST_RAM_SIZE(UserConfig & FLASH_OPTSR_ST_RAM_SIZE));

    /* Set value and mask for ST_RAM_SIZE option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTSR_ST_RAM_SIZE);
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	f403 13c0 	and.w	r3, r3, #1572864	; 0x180000
 80066c0:	68fa      	ldr	r2, [r7, #12]
 80066c2:	4313      	orrs	r3, r2
 80066c4:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTSR_ST_RAM_SIZE;
 80066c6:	68bb      	ldr	r3, [r7, #8]
 80066c8:	f443 13c0 	orr.w	r3, r3, #1572864	; 0x180000
 80066cc:	60bb      	str	r3, [r7, #8]
  }

  if((UserType & OB_USER_SECURITY) != 0U)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d009      	beq.n	80066ec <FLASH_OB_UserConfig+0xe4>
  {
    /* SECURITY option byte should be modified */
    assert_param(IS_OB_USER_SECURITY(UserConfig & FLASH_OPTSR_SECURITY));

    /* Set value and mask for SECURITY option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTSR_SECURITY);
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80066de:	68fa      	ldr	r2, [r7, #12]
 80066e0:	4313      	orrs	r3, r2
 80066e2:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTSR_SECURITY;
 80066e4:	68bb      	ldr	r3, [r7, #8]
 80066e6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80066ea:	60bb      	str	r3, [r7, #8]
    optr_reg_mask |= FLASH_OPTSR_NRST_STBY_D2;
  }
#endif /* FLASH_OPTSR_NRST_STOP_D2 */

#if defined (DUAL_BANK)
  if((UserType & OB_USER_SWAP_BANK) != 0U)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d009      	beq.n	800670a <FLASH_OB_UserConfig+0x102>
  {
    /* SWAP_BANK_OPT option byte should be modified */
    assert_param(IS_OB_USER_SWAP_BANK(UserConfig & FLASH_OPTSR_SWAP_BANK_OPT));

    /* Set value and mask for SWAP_BANK_OPT option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTSR_SWAP_BANK_OPT);
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80066fc:	68fa      	ldr	r2, [r7, #12]
 80066fe:	4313      	orrs	r3, r2
 8006700:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTSR_SWAP_BANK_OPT;
 8006702:	68bb      	ldr	r3, [r7, #8]
 8006704:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006708:	60bb      	str	r3, [r7, #8]
  }
#endif /* DUAL_BANK */

  if((UserType & OB_USER_IOHSLV) != 0U)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006710:	2b00      	cmp	r3, #0
 8006712:	d009      	beq.n	8006728 <FLASH_OB_UserConfig+0x120>
  {
    /* IOHSLV_OPT option byte should be modified */
    assert_param(IS_OB_USER_IOHSLV(UserConfig & FLASH_OPTSR_IO_HSLV));

    /* Set value and mask for IOHSLV_OPT option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTSR_IO_HSLV);
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800671a:	68fa      	ldr	r2, [r7, #12]
 800671c:	4313      	orrs	r3, r2
 800671e:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTSR_IO_HSLV;
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006726:	60bb      	str	r3, [r7, #8]
    optr_reg_mask |= FLASH_OPTSR_VDDMMC_HSLV;
  }
#endif /* FLASH_OPTSR_VDDMMC_HSLV */

  /* Configure the option bytes register */
  MODIFY_REG(FLASH->OPTSR_PRG, optr_reg_mask, optr_reg_val);
 8006728:	4b07      	ldr	r3, [pc, #28]	; (8006748 <FLASH_OB_UserConfig+0x140>)
 800672a:	6a1a      	ldr	r2, [r3, #32]
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	43db      	mvns	r3, r3
 8006730:	401a      	ands	r2, r3
 8006732:	4905      	ldr	r1, [pc, #20]	; (8006748 <FLASH_OB_UserConfig+0x140>)
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	4313      	orrs	r3, r2
 8006738:	620b      	str	r3, [r1, #32]
}
 800673a:	bf00      	nop
 800673c:	3714      	adds	r7, #20
 800673e:	46bd      	mov	sp, r7
 8006740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006744:	4770      	bx	lr
 8006746:	bf00      	nop
 8006748:	52002000 	.word	0x52002000

0800674c <FLASH_OB_GetUser>:
  *         FZ_IWDG_STOP(Bit 17), FZ_IWDG_SDBY(Bit 18), ST_RAM_SIZE(Bit[19:20]),
  *         SECURITY(Bit 21), IO_HSLV (Bit 29) and SWAP_BANK_OPT(Bit 31).
  */
#endif /*DUAL_CORE*/
static uint32_t FLASH_OB_GetUser(void)
{
 800674c:	b480      	push	{r7}
 800674e:	b083      	sub	sp, #12
 8006750:	af00      	add	r7, sp, #0
  uint32_t userConfig = READ_REG(FLASH->OPTSR_CUR);
 8006752:	4b07      	ldr	r3, [pc, #28]	; (8006770 <FLASH_OB_GetUser+0x24>)
 8006754:	69db      	ldr	r3, [r3, #28]
 8006756:	607b      	str	r3, [r7, #4]
  userConfig &= (~(FLASH_OPTSR_BOR_LEV | FLASH_OPTSR_RDP));
 8006758:	687a      	ldr	r2, [r7, #4]
 800675a:	4b06      	ldr	r3, [pc, #24]	; (8006774 <FLASH_OB_GetUser+0x28>)
 800675c:	4013      	ands	r3, r2
 800675e:	607b      	str	r3, [r7, #4]

  return userConfig;
 8006760:	687b      	ldr	r3, [r7, #4]
}
 8006762:	4618      	mov	r0, r3
 8006764:	370c      	adds	r7, #12
 8006766:	46bd      	mov	sp, r7
 8006768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676c:	4770      	bx	lr
 800676e:	bf00      	nop
 8006770:	52002000 	.word	0x52002000
 8006774:	ffff00f3 	.word	0xffff00f3

08006778 <FLASH_OB_PCROPConfig>:
  *            @arg FLASH_BANK_BOTH: PCROP on specified bank1 and bank2 area (same config will be applied on both banks)
  *
  * @retval None
  */
static void FLASH_OB_PCROPConfig(uint32_t PCROPConfig, uint32_t PCROPStartAddr, uint32_t PCROPEndAddr, uint32_t Banks)
{
 8006778:	b480      	push	{r7}
 800677a:	b085      	sub	sp, #20
 800677c:	af00      	add	r7, sp, #0
 800677e:	60f8      	str	r0, [r7, #12]
 8006780:	60b9      	str	r1, [r7, #8]
 8006782:	607a      	str	r2, [r7, #4]
 8006784:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));
  assert_param(IS_OB_PCROP_RDP(PCROPConfig));

  if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	f003 0301 	and.w	r3, r3, #1
 800678c:	2b00      	cmp	r3, #0
 800678e:	d00d      	beq.n	80067ac <FLASH_OB_PCROPConfig+0x34>
  {
    assert_param(IS_FLASH_PROGRAM_ADDRESS_BANK1(PCROPStartAddr));
    assert_param(IS_FLASH_PROGRAM_ADDRESS_BANK1(PCROPEndAddr));

    /* Configure the Proprietary code readout protection */
    FLASH->PRAR_PRG1 = ((PCROPStartAddr - FLASH_BANK1_BASE) >> 8)                                 | \
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8006796:	0a1a      	lsrs	r2, r3, #8
                       (((PCROPEndAddr - FLASH_BANK1_BASE) >> 8) << FLASH_PRAR_PROT_AREA_END_Pos) | \
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 800679e:	0a1b      	lsrs	r3, r3, #8
 80067a0:	041b      	lsls	r3, r3, #16
    FLASH->PRAR_PRG1 = ((PCROPStartAddr - FLASH_BANK1_BASE) >> 8)                                 | \
 80067a2:	431a      	orrs	r2, r3
 80067a4:	490e      	ldr	r1, [pc, #56]	; (80067e0 <FLASH_OB_PCROPConfig+0x68>)
                       (((PCROPEndAddr - FLASH_BANK1_BASE) >> 8) << FLASH_PRAR_PROT_AREA_END_Pos) | \
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	4313      	orrs	r3, r2
    FLASH->PRAR_PRG1 = ((PCROPStartAddr - FLASH_BANK1_BASE) >> 8)                                 | \
 80067aa:	62cb      	str	r3, [r1, #44]	; 0x2c
                       PCROPConfig;
  }

#if defined (DUAL_BANK)
  if((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	f003 0302 	and.w	r3, r3, #2
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d00e      	beq.n	80067d4 <FLASH_OB_PCROPConfig+0x5c>
  {
    assert_param(IS_FLASH_PROGRAM_ADDRESS_BANK2(PCROPStartAddr));
    assert_param(IS_FLASH_PROGRAM_ADDRESS_BANK2(PCROPEndAddr));

    /* Configure the Proprietary code readout protection */
    FLASH->PRAR_PRG2 = ((PCROPStartAddr - FLASH_BANK2_BASE) >> 8)                                 | \
 80067b6:	68bb      	ldr	r3, [r7, #8]
 80067b8:	f1a3 6301 	sub.w	r3, r3, #135266304	; 0x8100000
 80067bc:	0a1a      	lsrs	r2, r3, #8
                       (((PCROPEndAddr - FLASH_BANK2_BASE) >> 8) << FLASH_PRAR_PROT_AREA_END_Pos) | \
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	f1a3 6301 	sub.w	r3, r3, #135266304	; 0x8100000
 80067c4:	0a1b      	lsrs	r3, r3, #8
 80067c6:	041b      	lsls	r3, r3, #16
    FLASH->PRAR_PRG2 = ((PCROPStartAddr - FLASH_BANK2_BASE) >> 8)                                 | \
 80067c8:	431a      	orrs	r2, r3
 80067ca:	4905      	ldr	r1, [pc, #20]	; (80067e0 <FLASH_OB_PCROPConfig+0x68>)
                       (((PCROPEndAddr - FLASH_BANK2_BASE) >> 8) << FLASH_PRAR_PROT_AREA_END_Pos) | \
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	4313      	orrs	r3, r2
    FLASH->PRAR_PRG2 = ((PCROPStartAddr - FLASH_BANK2_BASE) >> 8)                                 | \
 80067d0:	f8c1 312c 	str.w	r3, [r1, #300]	; 0x12c
                       PCROPConfig;
  }
#endif /* DUAL_BANK */
}
 80067d4:	bf00      	nop
 80067d6:	3714      	adds	r7, #20
 80067d8:	46bd      	mov	sp, r7
 80067da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067de:	4770      	bx	lr
 80067e0:	52002000 	.word	0x52002000

080067e4 <FLASH_OB_GetPCROP>:
  *            @arg FLASH_BANK_BOTH: is  not allowed here
  *
  * @retval None
  */
static void FLASH_OB_GetPCROP(uint32_t *PCROPConfig, uint32_t *PCROPStartAddr, uint32_t *PCROPEndAddr, uint32_t Bank)
{
 80067e4:	b480      	push	{r7}
 80067e6:	b087      	sub	sp, #28
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	60f8      	str	r0, [r7, #12]
 80067ec:	60b9      	str	r1, [r7, #8]
 80067ee:	607a      	str	r2, [r7, #4]
 80067f0:	603b      	str	r3, [r7, #0]
  uint32_t regvalue = 0;
 80067f2:	2300      	movs	r3, #0
 80067f4:	617b      	str	r3, [r7, #20]
  uint32_t bankBase = 0;
 80067f6:	2300      	movs	r3, #0
 80067f8:	613b      	str	r3, [r7, #16]

  if(Bank == FLASH_BANK_1)
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	2b01      	cmp	r3, #1
 80067fe:	d105      	bne.n	800680c <FLASH_OB_GetPCROP+0x28>
  {
    regvalue = FLASH->PRAR_CUR1;
 8006800:	4b17      	ldr	r3, [pc, #92]	; (8006860 <FLASH_OB_GetPCROP+0x7c>)
 8006802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006804:	617b      	str	r3, [r7, #20]
    bankBase = FLASH_BANK1_BASE;
 8006806:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800680a:	613b      	str	r3, [r7, #16]
  }

#if defined (DUAL_BANK)
  if(Bank == FLASH_BANK_2)
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	2b02      	cmp	r3, #2
 8006810:	d106      	bne.n	8006820 <FLASH_OB_GetPCROP+0x3c>
  {
    regvalue = FLASH->PRAR_CUR2;
 8006812:	4b13      	ldr	r3, [pc, #76]	; (8006860 <FLASH_OB_GetPCROP+0x7c>)
 8006814:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 8006818:	617b      	str	r3, [r7, #20]
    bankBase = FLASH_BANK2_BASE;
 800681a:	f04f 6301 	mov.w	r3, #135266304	; 0x8100000
 800681e:	613b      	str	r3, [r7, #16]
  }
#endif /* DUAL_BANK */

  (*PCROPConfig) =  (regvalue & FLASH_PRAR_DMEP);
 8006820:	697b      	ldr	r3, [r7, #20]
 8006822:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	601a      	str	r2, [r3, #0]

  (*PCROPStartAddr) = ((regvalue & FLASH_PRAR_PROT_AREA_START) << 8) + bankBase;
 800682a:	697b      	ldr	r3, [r7, #20]
 800682c:	021a      	lsls	r2, r3, #8
 800682e:	4b0d      	ldr	r3, [pc, #52]	; (8006864 <FLASH_OB_GetPCROP+0x80>)
 8006830:	4013      	ands	r3, r2
 8006832:	693a      	ldr	r2, [r7, #16]
 8006834:	441a      	add	r2, r3
 8006836:	68bb      	ldr	r3, [r7, #8]
 8006838:	601a      	str	r2, [r3, #0]
  (*PCROPEndAddr) = (regvalue & FLASH_PRAR_PROT_AREA_END) >> FLASH_PRAR_PROT_AREA_END_Pos;
 800683a:	697b      	ldr	r3, [r7, #20]
 800683c:	0c1b      	lsrs	r3, r3, #16
 800683e:	f3c3 020b 	ubfx	r2, r3, #0, #12
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	601a      	str	r2, [r3, #0]
  (*PCROPEndAddr) = ((*PCROPEndAddr) << 8) + bankBase;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	021a      	lsls	r2, r3, #8
 800684c:	693b      	ldr	r3, [r7, #16]
 800684e:	441a      	add	r2, r3
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	601a      	str	r2, [r3, #0]
}
 8006854:	bf00      	nop
 8006856:	371c      	adds	r7, #28
 8006858:	46bd      	mov	sp, r7
 800685a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685e:	4770      	bx	lr
 8006860:	52002000 	.word	0x52002000
 8006864:	000fff00 	.word	0x000fff00

08006868 <FLASH_OB_BOR_LevelConfig>:
  *            @arg OB_BOR_LEVEL2: Reset level threshold is set to 2.4V
  *            @arg OB_BOR_LEVEL3: Reset level threshold is set to 2.7V
  * @retval None
  */
static void FLASH_OB_BOR_LevelConfig(uint32_t Level)
{
 8006868:	b480      	push	{r7}
 800686a:	b083      	sub	sp, #12
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
  assert_param(IS_OB_BOR_LEVEL(Level));

  /* Configure BOR_LEV option byte */
  MODIFY_REG(FLASH->OPTSR_PRG, FLASH_OPTSR_BOR_LEV, Level);
 8006870:	4b06      	ldr	r3, [pc, #24]	; (800688c <FLASH_OB_BOR_LevelConfig+0x24>)
 8006872:	6a1b      	ldr	r3, [r3, #32]
 8006874:	f023 020c 	bic.w	r2, r3, #12
 8006878:	4904      	ldr	r1, [pc, #16]	; (800688c <FLASH_OB_BOR_LevelConfig+0x24>)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	4313      	orrs	r3, r2
 800687e:	620b      	str	r3, [r1, #32]
}
 8006880:	bf00      	nop
 8006882:	370c      	adds	r7, #12
 8006884:	46bd      	mov	sp, r7
 8006886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688a:	4770      	bx	lr
 800688c:	52002000 	.word	0x52002000

08006890 <FLASH_OB_GetBOR>:
  *            @arg OB_BOR_LEVEL1: Reset level threshold is set to 2.1V
  *            @arg OB_BOR_LEVEL2: Reset level threshold is set to 2.4V
  *            @arg OB_BOR_LEVEL3: Reset level threshold is set to 2.7V
  */
static uint32_t FLASH_OB_GetBOR(void)
{
 8006890:	b480      	push	{r7}
 8006892:	af00      	add	r7, sp, #0
  return (FLASH->OPTSR_CUR & FLASH_OPTSR_BOR_LEV);
 8006894:	4b04      	ldr	r3, [pc, #16]	; (80068a8 <FLASH_OB_GetBOR+0x18>)
 8006896:	69db      	ldr	r3, [r3, #28]
 8006898:	f003 030c 	and.w	r3, r3, #12
}
 800689c:	4618      	mov	r0, r3
 800689e:	46bd      	mov	sp, r7
 80068a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a4:	4770      	bx	lr
 80068a6:	bf00      	nop
 80068a8:	52002000 	.word	0x52002000

080068ac <FLASH_OB_BootAddConfig>:
  * @param  BootAddress0 Specifies the Boot Address 0
  * @param  BootAddress1 Specifies the Boot Address 1
  * @retval HAL Status
  */
static void FLASH_OB_BootAddConfig(uint32_t BootOption, uint32_t BootAddress0, uint32_t BootAddress1)
{
 80068ac:	b480      	push	{r7}
 80068ae:	b085      	sub	sp, #20
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	60f8      	str	r0, [r7, #12]
 80068b4:	60b9      	str	r1, [r7, #8]
 80068b6:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_OB_BOOT_ADD_OPTION(BootOption));

  if((BootOption & OB_BOOT_ADD0) == OB_BOOT_ADD0)
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	f003 0301 	and.w	r3, r3, #1
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d008      	beq.n	80068d4 <FLASH_OB_BootAddConfig+0x28>

    /* Configure CM7 BOOT ADD0 */
#if defined(DUAL_CORE)
    MODIFY_REG(FLASH->BOOT7_PRG, FLASH_BOOT7_BCM7_ADD0, (BootAddress0 >> 16));
#else /* Single Core*/
    MODIFY_REG(FLASH->BOOT_PRG, FLASH_BOOT_ADD0, (BootAddress0 >> 16));
 80068c2:	4b0d      	ldr	r3, [pc, #52]	; (80068f8 <FLASH_OB_BootAddConfig+0x4c>)
 80068c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80068c6:	4b0d      	ldr	r3, [pc, #52]	; (80068fc <FLASH_OB_BootAddConfig+0x50>)
 80068c8:	4013      	ands	r3, r2
 80068ca:	68ba      	ldr	r2, [r7, #8]
 80068cc:	0c12      	lsrs	r2, r2, #16
 80068ce:	490a      	ldr	r1, [pc, #40]	; (80068f8 <FLASH_OB_BootAddConfig+0x4c>)
 80068d0:	4313      	orrs	r3, r2
 80068d2:	644b      	str	r3, [r1, #68]	; 0x44
#endif /* DUAL_CORE */
  }

  if((BootOption & OB_BOOT_ADD1) == OB_BOOT_ADD1)
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	f003 0302 	and.w	r3, r3, #2
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d006      	beq.n	80068ec <FLASH_OB_BootAddConfig+0x40>

    /* Configure CM7 BOOT ADD1 */
#if defined(DUAL_CORE)
    MODIFY_REG(FLASH->BOOT7_PRG, FLASH_BOOT7_BCM7_ADD1, BootAddress1);
#else /* Single Core*/
    MODIFY_REG(FLASH->BOOT_PRG, FLASH_BOOT_ADD1, BootAddress1);
 80068de:	4b06      	ldr	r3, [pc, #24]	; (80068f8 <FLASH_OB_BootAddConfig+0x4c>)
 80068e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068e2:	b29a      	uxth	r2, r3
 80068e4:	4904      	ldr	r1, [pc, #16]	; (80068f8 <FLASH_OB_BootAddConfig+0x4c>)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	4313      	orrs	r3, r2
 80068ea:	644b      	str	r3, [r1, #68]	; 0x44
#endif /* DUAL_CORE */
  }
}
 80068ec:	bf00      	nop
 80068ee:	3714      	adds	r7, #20
 80068f0:	46bd      	mov	sp, r7
 80068f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f6:	4770      	bx	lr
 80068f8:	52002000 	.word	0x52002000
 80068fc:	ffff0000 	.word	0xffff0000

08006900 <FLASH_OB_GetBootAdd>:
  * @param  BootAddress0 Specifies the Boot Address 0.
  * @param  BootAddress1 Specifies the Boot Address 1.
  * @retval HAL Status
  */
static void FLASH_OB_GetBootAdd(uint32_t *BootAddress0, uint32_t *BootAddress1)
{
 8006900:	b480      	push	{r7}
 8006902:	b085      	sub	sp, #20
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
 8006908:	6039      	str	r1, [r7, #0]
  regvalue = FLASH->BOOT7_CUR;

  (*BootAddress0) = (regvalue & FLASH_BOOT7_BCM7_ADD0) << 16;
  (*BootAddress1) = (regvalue & FLASH_BOOT7_BCM7_ADD1);
#else /* Single Core */
  regvalue = FLASH->BOOT_CUR;
 800690a:	4b09      	ldr	r3, [pc, #36]	; (8006930 <FLASH_OB_GetBootAdd+0x30>)
 800690c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800690e:	60fb      	str	r3, [r7, #12]

  (*BootAddress0) = (regvalue & FLASH_BOOT_ADD0) << 16;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	041a      	lsls	r2, r3, #16
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	601a      	str	r2, [r3, #0]
  (*BootAddress1) = (regvalue & FLASH_BOOT_ADD1);
 8006918:	68fa      	ldr	r2, [r7, #12]
 800691a:	4b06      	ldr	r3, [pc, #24]	; (8006934 <FLASH_OB_GetBootAdd+0x34>)
 800691c:	4013      	ands	r3, r2
 800691e:	683a      	ldr	r2, [r7, #0]
 8006920:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE */
}
 8006922:	bf00      	nop
 8006924:	3714      	adds	r7, #20
 8006926:	46bd      	mov	sp, r7
 8006928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692c:	4770      	bx	lr
 800692e:	bf00      	nop
 8006930:	52002000 	.word	0x52002000
 8006934:	ffff0000 	.word	0xffff0000

08006938 <FLASH_OB_SecureAreaConfig>:
  *            @arg FLASH_BANK_2: Secure area on specified bank2 area
  *            @arg FLASH_BANK_BOTH: Secure area on specified bank1 and bank2 area (same config will be applied on both banks)
  * @retval None
  */
static void FLASH_OB_SecureAreaConfig(uint32_t SecureAreaConfig, uint32_t SecureAreaStartAddr, uint32_t SecureAreaEndAddr, uint32_t Banks)
{
 8006938:	b480      	push	{r7}
 800693a:	b085      	sub	sp, #20
 800693c:	af00      	add	r7, sp, #0
 800693e:	60f8      	str	r0, [r7, #12]
 8006940:	60b9      	str	r1, [r7, #8]
 8006942:	607a      	str	r2, [r7, #4]
 8006944:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));
  assert_param(IS_OB_SECURE_RDP(SecureAreaConfig));

  if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	f003 0301 	and.w	r3, r3, #1
 800694c:	2b00      	cmp	r3, #0
 800694e:	d00f      	beq.n	8006970 <FLASH_OB_SecureAreaConfig+0x38>
    /* Check the parameters */
    assert_param(IS_FLASH_PROGRAM_ADDRESS_BANK1(SecureAreaStartAddr));
    assert_param(IS_FLASH_PROGRAM_ADDRESS_BANK1(SecureAreaEndAddr));

    /* Configure the secure area */
    FLASH->SCAR_PRG1 = ((SecureAreaStartAddr - FLASH_BANK1_BASE) >> 8)                                | \
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8006956:	0a1a      	lsrs	r2, r3, #8
                       (((SecureAreaEndAddr - FLASH_BANK1_BASE) >> 8) << FLASH_SCAR_SEC_AREA_END_Pos) | \
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 800695e:	0a1b      	lsrs	r3, r3, #8
 8006960:	041b      	lsls	r3, r3, #16
    FLASH->SCAR_PRG1 = ((SecureAreaStartAddr - FLASH_BANK1_BASE) >> 8)                                | \
 8006962:	431a      	orrs	r2, r3
                       (SecureAreaConfig & FLASH_SCAR_DMES);
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
    FLASH->SCAR_PRG1 = ((SecureAreaStartAddr - FLASH_BANK1_BASE) >> 8)                                | \
 800696a:	490f      	ldr	r1, [pc, #60]	; (80069a8 <FLASH_OB_SecureAreaConfig+0x70>)
                       (((SecureAreaEndAddr - FLASH_BANK1_BASE) >> 8) << FLASH_SCAR_SEC_AREA_END_Pos) | \
 800696c:	4313      	orrs	r3, r2
    FLASH->SCAR_PRG1 = ((SecureAreaStartAddr - FLASH_BANK1_BASE) >> 8)                                | \
 800696e:	634b      	str	r3, [r1, #52]	; 0x34
  }

#if defined (DUAL_BANK)
  if((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	f003 0302 	and.w	r3, r3, #2
 8006976:	2b00      	cmp	r3, #0
 8006978:	d010      	beq.n	800699c <FLASH_OB_SecureAreaConfig+0x64>
    /* Check the parameters */
    assert_param(IS_FLASH_PROGRAM_ADDRESS_BANK2(SecureAreaStartAddr));
    assert_param(IS_FLASH_PROGRAM_ADDRESS_BANK2(SecureAreaEndAddr));

    /* Configure the secure area */
    FLASH->SCAR_PRG2 = ((SecureAreaStartAddr - FLASH_BANK2_BASE) >> 8)                                | \
 800697a:	68bb      	ldr	r3, [r7, #8]
 800697c:	f1a3 6301 	sub.w	r3, r3, #135266304	; 0x8100000
 8006980:	0a1a      	lsrs	r2, r3, #8
                       (((SecureAreaEndAddr - FLASH_BANK2_BASE) >> 8) << FLASH_SCAR_SEC_AREA_END_Pos) | \
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	f1a3 6301 	sub.w	r3, r3, #135266304	; 0x8100000
 8006988:	0a1b      	lsrs	r3, r3, #8
 800698a:	041b      	lsls	r3, r3, #16
    FLASH->SCAR_PRG2 = ((SecureAreaStartAddr - FLASH_BANK2_BASE) >> 8)                                | \
 800698c:	431a      	orrs	r2, r3
                       (SecureAreaConfig & FLASH_SCAR_DMES);
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
    FLASH->SCAR_PRG2 = ((SecureAreaStartAddr - FLASH_BANK2_BASE) >> 8)                                | \
 8006994:	4904      	ldr	r1, [pc, #16]	; (80069a8 <FLASH_OB_SecureAreaConfig+0x70>)
                       (((SecureAreaEndAddr - FLASH_BANK2_BASE) >> 8) << FLASH_SCAR_SEC_AREA_END_Pos) | \
 8006996:	4313      	orrs	r3, r2
    FLASH->SCAR_PRG2 = ((SecureAreaStartAddr - FLASH_BANK2_BASE) >> 8)                                | \
 8006998:	f8c1 3134 	str.w	r3, [r1, #308]	; 0x134
  }
#endif /* DUAL_BANK */
}
 800699c:	bf00      	nop
 800699e:	3714      	adds	r7, #20
 80069a0:	46bd      	mov	sp, r7
 80069a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a6:	4770      	bx	lr
 80069a8:	52002000 	.word	0x52002000

080069ac <FLASH_OB_GetSecureArea>:
  * @param  SecureAreaEndAddr gives the secure area end address
  * @param  Bank Specifies the Bank
  * @retval None
  */
static void FLASH_OB_GetSecureArea(uint32_t *SecureAreaConfig, uint32_t *SecureAreaStartAddr, uint32_t *SecureAreaEndAddr, uint32_t Bank)
{
 80069ac:	b480      	push	{r7}
 80069ae:	b087      	sub	sp, #28
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	60f8      	str	r0, [r7, #12]
 80069b4:	60b9      	str	r1, [r7, #8]
 80069b6:	607a      	str	r2, [r7, #4]
 80069b8:	603b      	str	r3, [r7, #0]
  uint32_t regvalue = 0;
 80069ba:	2300      	movs	r3, #0
 80069bc:	617b      	str	r3, [r7, #20]
  uint32_t bankBase = 0;
 80069be:	2300      	movs	r3, #0
 80069c0:	613b      	str	r3, [r7, #16]

  /* Check Bank parameter value */
  if(Bank == FLASH_BANK_1)
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	2b01      	cmp	r3, #1
 80069c6:	d105      	bne.n	80069d4 <FLASH_OB_GetSecureArea+0x28>
  {
    regvalue = FLASH->SCAR_CUR1;
 80069c8:	4b17      	ldr	r3, [pc, #92]	; (8006a28 <FLASH_OB_GetSecureArea+0x7c>)
 80069ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069cc:	617b      	str	r3, [r7, #20]
    bankBase = FLASH_BANK1_BASE;
 80069ce:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80069d2:	613b      	str	r3, [r7, #16]
  }

#if defined (DUAL_BANK)
  if(Bank == FLASH_BANK_2)
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	2b02      	cmp	r3, #2
 80069d8:	d106      	bne.n	80069e8 <FLASH_OB_GetSecureArea+0x3c>
  {
    regvalue = FLASH->SCAR_CUR2;
 80069da:	4b13      	ldr	r3, [pc, #76]	; (8006a28 <FLASH_OB_GetSecureArea+0x7c>)
 80069dc:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 80069e0:	617b      	str	r3, [r7, #20]
    bankBase = FLASH_BANK2_BASE;
 80069e2:	f04f 6301 	mov.w	r3, #135266304	; 0x8100000
 80069e6:	613b      	str	r3, [r7, #16]
  }
#endif /* DUAL_BANK */

  /* Get the secure area settings */
  (*SecureAreaConfig) = (regvalue & FLASH_SCAR_DMES);
 80069e8:	697b      	ldr	r3, [r7, #20]
 80069ea:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	601a      	str	r2, [r3, #0]
  (*SecureAreaStartAddr) = ((regvalue & FLASH_SCAR_SEC_AREA_START) << 8) + bankBase;
 80069f2:	697b      	ldr	r3, [r7, #20]
 80069f4:	021a      	lsls	r2, r3, #8
 80069f6:	4b0d      	ldr	r3, [pc, #52]	; (8006a2c <FLASH_OB_GetSecureArea+0x80>)
 80069f8:	4013      	ands	r3, r2
 80069fa:	693a      	ldr	r2, [r7, #16]
 80069fc:	441a      	add	r2, r3
 80069fe:	68bb      	ldr	r3, [r7, #8]
 8006a00:	601a      	str	r2, [r3, #0]
  (*SecureAreaEndAddr) = (regvalue & FLASH_SCAR_SEC_AREA_END) >> FLASH_SCAR_SEC_AREA_END_Pos;
 8006a02:	697b      	ldr	r3, [r7, #20]
 8006a04:	0c1b      	lsrs	r3, r3, #16
 8006a06:	f3c3 020b 	ubfx	r2, r3, #0, #12
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	601a      	str	r2, [r3, #0]
  (*SecureAreaEndAddr) = ((*SecureAreaEndAddr) << 8) + bankBase;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	021a      	lsls	r2, r3, #8
 8006a14:	693b      	ldr	r3, [r7, #16]
 8006a16:	441a      	add	r2, r3
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	601a      	str	r2, [r3, #0]
}
 8006a1c:	bf00      	nop
 8006a1e:	371c      	adds	r7, #28
 8006a20:	46bd      	mov	sp, r7
 8006a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a26:	4770      	bx	lr
 8006a28:	52002000 	.word	0x52002000
 8006a2c:	000fff00 	.word	0x000fff00

08006a30 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006a30:	b480      	push	{r7}
 8006a32:	b089      	sub	sp, #36	; 0x24
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
 8006a38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006a3e:	4b89      	ldr	r3, [pc, #548]	; (8006c64 <HAL_GPIO_Init+0x234>)
 8006a40:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006a42:	e194      	b.n	8006d6e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	681a      	ldr	r2, [r3, #0]
 8006a48:	2101      	movs	r1, #1
 8006a4a:	69fb      	ldr	r3, [r7, #28]
 8006a4c:	fa01 f303 	lsl.w	r3, r1, r3
 8006a50:	4013      	ands	r3, r2
 8006a52:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006a54:	693b      	ldr	r3, [r7, #16]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	f000 8186 	beq.w	8006d68 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	685b      	ldr	r3, [r3, #4]
 8006a60:	f003 0303 	and.w	r3, r3, #3
 8006a64:	2b01      	cmp	r3, #1
 8006a66:	d005      	beq.n	8006a74 <HAL_GPIO_Init+0x44>
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	685b      	ldr	r3, [r3, #4]
 8006a6c:	f003 0303 	and.w	r3, r3, #3
 8006a70:	2b02      	cmp	r3, #2
 8006a72:	d130      	bne.n	8006ad6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	689b      	ldr	r3, [r3, #8]
 8006a78:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006a7a:	69fb      	ldr	r3, [r7, #28]
 8006a7c:	005b      	lsls	r3, r3, #1
 8006a7e:	2203      	movs	r2, #3
 8006a80:	fa02 f303 	lsl.w	r3, r2, r3
 8006a84:	43db      	mvns	r3, r3
 8006a86:	69ba      	ldr	r2, [r7, #24]
 8006a88:	4013      	ands	r3, r2
 8006a8a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	68da      	ldr	r2, [r3, #12]
 8006a90:	69fb      	ldr	r3, [r7, #28]
 8006a92:	005b      	lsls	r3, r3, #1
 8006a94:	fa02 f303 	lsl.w	r3, r2, r3
 8006a98:	69ba      	ldr	r2, [r7, #24]
 8006a9a:	4313      	orrs	r3, r2
 8006a9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	69ba      	ldr	r2, [r7, #24]
 8006aa2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	685b      	ldr	r3, [r3, #4]
 8006aa8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006aaa:	2201      	movs	r2, #1
 8006aac:	69fb      	ldr	r3, [r7, #28]
 8006aae:	fa02 f303 	lsl.w	r3, r2, r3
 8006ab2:	43db      	mvns	r3, r3
 8006ab4:	69ba      	ldr	r2, [r7, #24]
 8006ab6:	4013      	ands	r3, r2
 8006ab8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	685b      	ldr	r3, [r3, #4]
 8006abe:	091b      	lsrs	r3, r3, #4
 8006ac0:	f003 0201 	and.w	r2, r3, #1
 8006ac4:	69fb      	ldr	r3, [r7, #28]
 8006ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8006aca:	69ba      	ldr	r2, [r7, #24]
 8006acc:	4313      	orrs	r3, r2
 8006ace:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	69ba      	ldr	r2, [r7, #24]
 8006ad4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	685b      	ldr	r3, [r3, #4]
 8006ada:	f003 0303 	and.w	r3, r3, #3
 8006ade:	2b03      	cmp	r3, #3
 8006ae0:	d017      	beq.n	8006b12 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	68db      	ldr	r3, [r3, #12]
 8006ae6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006ae8:	69fb      	ldr	r3, [r7, #28]
 8006aea:	005b      	lsls	r3, r3, #1
 8006aec:	2203      	movs	r2, #3
 8006aee:	fa02 f303 	lsl.w	r3, r2, r3
 8006af2:	43db      	mvns	r3, r3
 8006af4:	69ba      	ldr	r2, [r7, #24]
 8006af6:	4013      	ands	r3, r2
 8006af8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	689a      	ldr	r2, [r3, #8]
 8006afe:	69fb      	ldr	r3, [r7, #28]
 8006b00:	005b      	lsls	r3, r3, #1
 8006b02:	fa02 f303 	lsl.w	r3, r2, r3
 8006b06:	69ba      	ldr	r2, [r7, #24]
 8006b08:	4313      	orrs	r3, r2
 8006b0a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	69ba      	ldr	r2, [r7, #24]
 8006b10:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	685b      	ldr	r3, [r3, #4]
 8006b16:	f003 0303 	and.w	r3, r3, #3
 8006b1a:	2b02      	cmp	r3, #2
 8006b1c:	d123      	bne.n	8006b66 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006b1e:	69fb      	ldr	r3, [r7, #28]
 8006b20:	08da      	lsrs	r2, r3, #3
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	3208      	adds	r2, #8
 8006b26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006b2c:	69fb      	ldr	r3, [r7, #28]
 8006b2e:	f003 0307 	and.w	r3, r3, #7
 8006b32:	009b      	lsls	r3, r3, #2
 8006b34:	220f      	movs	r2, #15
 8006b36:	fa02 f303 	lsl.w	r3, r2, r3
 8006b3a:	43db      	mvns	r3, r3
 8006b3c:	69ba      	ldr	r2, [r7, #24]
 8006b3e:	4013      	ands	r3, r2
 8006b40:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	691a      	ldr	r2, [r3, #16]
 8006b46:	69fb      	ldr	r3, [r7, #28]
 8006b48:	f003 0307 	and.w	r3, r3, #7
 8006b4c:	009b      	lsls	r3, r3, #2
 8006b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8006b52:	69ba      	ldr	r2, [r7, #24]
 8006b54:	4313      	orrs	r3, r2
 8006b56:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006b58:	69fb      	ldr	r3, [r7, #28]
 8006b5a:	08da      	lsrs	r2, r3, #3
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	3208      	adds	r2, #8
 8006b60:	69b9      	ldr	r1, [r7, #24]
 8006b62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006b6c:	69fb      	ldr	r3, [r7, #28]
 8006b6e:	005b      	lsls	r3, r3, #1
 8006b70:	2203      	movs	r2, #3
 8006b72:	fa02 f303 	lsl.w	r3, r2, r3
 8006b76:	43db      	mvns	r3, r3
 8006b78:	69ba      	ldr	r2, [r7, #24]
 8006b7a:	4013      	ands	r3, r2
 8006b7c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	685b      	ldr	r3, [r3, #4]
 8006b82:	f003 0203 	and.w	r2, r3, #3
 8006b86:	69fb      	ldr	r3, [r7, #28]
 8006b88:	005b      	lsls	r3, r3, #1
 8006b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8006b8e:	69ba      	ldr	r2, [r7, #24]
 8006b90:	4313      	orrs	r3, r2
 8006b92:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	69ba      	ldr	r2, [r7, #24]
 8006b98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	685b      	ldr	r3, [r3, #4]
 8006b9e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	f000 80e0 	beq.w	8006d68 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006ba8:	4b2f      	ldr	r3, [pc, #188]	; (8006c68 <HAL_GPIO_Init+0x238>)
 8006baa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006bae:	4a2e      	ldr	r2, [pc, #184]	; (8006c68 <HAL_GPIO_Init+0x238>)
 8006bb0:	f043 0302 	orr.w	r3, r3, #2
 8006bb4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8006bb8:	4b2b      	ldr	r3, [pc, #172]	; (8006c68 <HAL_GPIO_Init+0x238>)
 8006bba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006bbe:	f003 0302 	and.w	r3, r3, #2
 8006bc2:	60fb      	str	r3, [r7, #12]
 8006bc4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006bc6:	4a29      	ldr	r2, [pc, #164]	; (8006c6c <HAL_GPIO_Init+0x23c>)
 8006bc8:	69fb      	ldr	r3, [r7, #28]
 8006bca:	089b      	lsrs	r3, r3, #2
 8006bcc:	3302      	adds	r3, #2
 8006bce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006bd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006bd4:	69fb      	ldr	r3, [r7, #28]
 8006bd6:	f003 0303 	and.w	r3, r3, #3
 8006bda:	009b      	lsls	r3, r3, #2
 8006bdc:	220f      	movs	r2, #15
 8006bde:	fa02 f303 	lsl.w	r3, r2, r3
 8006be2:	43db      	mvns	r3, r3
 8006be4:	69ba      	ldr	r2, [r7, #24]
 8006be6:	4013      	ands	r3, r2
 8006be8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	4a20      	ldr	r2, [pc, #128]	; (8006c70 <HAL_GPIO_Init+0x240>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d052      	beq.n	8006c98 <HAL_GPIO_Init+0x268>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	4a1f      	ldr	r2, [pc, #124]	; (8006c74 <HAL_GPIO_Init+0x244>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d031      	beq.n	8006c5e <HAL_GPIO_Init+0x22e>
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	4a1e      	ldr	r2, [pc, #120]	; (8006c78 <HAL_GPIO_Init+0x248>)
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d02b      	beq.n	8006c5a <HAL_GPIO_Init+0x22a>
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	4a1d      	ldr	r2, [pc, #116]	; (8006c7c <HAL_GPIO_Init+0x24c>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d025      	beq.n	8006c56 <HAL_GPIO_Init+0x226>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	4a1c      	ldr	r2, [pc, #112]	; (8006c80 <HAL_GPIO_Init+0x250>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d01f      	beq.n	8006c52 <HAL_GPIO_Init+0x222>
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	4a1b      	ldr	r2, [pc, #108]	; (8006c84 <HAL_GPIO_Init+0x254>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d019      	beq.n	8006c4e <HAL_GPIO_Init+0x21e>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	4a1a      	ldr	r2, [pc, #104]	; (8006c88 <HAL_GPIO_Init+0x258>)
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d013      	beq.n	8006c4a <HAL_GPIO_Init+0x21a>
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	4a19      	ldr	r2, [pc, #100]	; (8006c8c <HAL_GPIO_Init+0x25c>)
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d00d      	beq.n	8006c46 <HAL_GPIO_Init+0x216>
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	4a18      	ldr	r2, [pc, #96]	; (8006c90 <HAL_GPIO_Init+0x260>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d007      	beq.n	8006c42 <HAL_GPIO_Init+0x212>
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	4a17      	ldr	r2, [pc, #92]	; (8006c94 <HAL_GPIO_Init+0x264>)
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d101      	bne.n	8006c3e <HAL_GPIO_Init+0x20e>
 8006c3a:	2309      	movs	r3, #9
 8006c3c:	e02d      	b.n	8006c9a <HAL_GPIO_Init+0x26a>
 8006c3e:	230a      	movs	r3, #10
 8006c40:	e02b      	b.n	8006c9a <HAL_GPIO_Init+0x26a>
 8006c42:	2308      	movs	r3, #8
 8006c44:	e029      	b.n	8006c9a <HAL_GPIO_Init+0x26a>
 8006c46:	2307      	movs	r3, #7
 8006c48:	e027      	b.n	8006c9a <HAL_GPIO_Init+0x26a>
 8006c4a:	2306      	movs	r3, #6
 8006c4c:	e025      	b.n	8006c9a <HAL_GPIO_Init+0x26a>
 8006c4e:	2305      	movs	r3, #5
 8006c50:	e023      	b.n	8006c9a <HAL_GPIO_Init+0x26a>
 8006c52:	2304      	movs	r3, #4
 8006c54:	e021      	b.n	8006c9a <HAL_GPIO_Init+0x26a>
 8006c56:	2303      	movs	r3, #3
 8006c58:	e01f      	b.n	8006c9a <HAL_GPIO_Init+0x26a>
 8006c5a:	2302      	movs	r3, #2
 8006c5c:	e01d      	b.n	8006c9a <HAL_GPIO_Init+0x26a>
 8006c5e:	2301      	movs	r3, #1
 8006c60:	e01b      	b.n	8006c9a <HAL_GPIO_Init+0x26a>
 8006c62:	bf00      	nop
 8006c64:	58000080 	.word	0x58000080
 8006c68:	58024400 	.word	0x58024400
 8006c6c:	58000400 	.word	0x58000400
 8006c70:	58020000 	.word	0x58020000
 8006c74:	58020400 	.word	0x58020400
 8006c78:	58020800 	.word	0x58020800
 8006c7c:	58020c00 	.word	0x58020c00
 8006c80:	58021000 	.word	0x58021000
 8006c84:	58021400 	.word	0x58021400
 8006c88:	58021800 	.word	0x58021800
 8006c8c:	58021c00 	.word	0x58021c00
 8006c90:	58022000 	.word	0x58022000
 8006c94:	58022400 	.word	0x58022400
 8006c98:	2300      	movs	r3, #0
 8006c9a:	69fa      	ldr	r2, [r7, #28]
 8006c9c:	f002 0203 	and.w	r2, r2, #3
 8006ca0:	0092      	lsls	r2, r2, #2
 8006ca2:	4093      	lsls	r3, r2
 8006ca4:	69ba      	ldr	r2, [r7, #24]
 8006ca6:	4313      	orrs	r3, r2
 8006ca8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006caa:	4938      	ldr	r1, [pc, #224]	; (8006d8c <HAL_GPIO_Init+0x35c>)
 8006cac:	69fb      	ldr	r3, [r7, #28]
 8006cae:	089b      	lsrs	r3, r3, #2
 8006cb0:	3302      	adds	r3, #2
 8006cb2:	69ba      	ldr	r2, [r7, #24]
 8006cb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006cb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006cc0:	693b      	ldr	r3, [r7, #16]
 8006cc2:	43db      	mvns	r3, r3
 8006cc4:	69ba      	ldr	r2, [r7, #24]
 8006cc6:	4013      	ands	r3, r2
 8006cc8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	685b      	ldr	r3, [r3, #4]
 8006cce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d003      	beq.n	8006cde <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8006cd6:	69ba      	ldr	r2, [r7, #24]
 8006cd8:	693b      	ldr	r3, [r7, #16]
 8006cda:	4313      	orrs	r3, r2
 8006cdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006cde:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006ce2:	69bb      	ldr	r3, [r7, #24]
 8006ce4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006ce6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006cea:	685b      	ldr	r3, [r3, #4]
 8006cec:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006cee:	693b      	ldr	r3, [r7, #16]
 8006cf0:	43db      	mvns	r3, r3
 8006cf2:	69ba      	ldr	r2, [r7, #24]
 8006cf4:	4013      	ands	r3, r2
 8006cf6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	685b      	ldr	r3, [r3, #4]
 8006cfc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d003      	beq.n	8006d0c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006d04:	69ba      	ldr	r2, [r7, #24]
 8006d06:	693b      	ldr	r3, [r7, #16]
 8006d08:	4313      	orrs	r3, r2
 8006d0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006d0c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006d10:	69bb      	ldr	r3, [r7, #24]
 8006d12:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006d14:	697b      	ldr	r3, [r7, #20]
 8006d16:	685b      	ldr	r3, [r3, #4]
 8006d18:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006d1a:	693b      	ldr	r3, [r7, #16]
 8006d1c:	43db      	mvns	r3, r3
 8006d1e:	69ba      	ldr	r2, [r7, #24]
 8006d20:	4013      	ands	r3, r2
 8006d22:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	685b      	ldr	r3, [r3, #4]
 8006d28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d003      	beq.n	8006d38 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8006d30:	69ba      	ldr	r2, [r7, #24]
 8006d32:	693b      	ldr	r3, [r7, #16]
 8006d34:	4313      	orrs	r3, r2
 8006d36:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006d38:	697b      	ldr	r3, [r7, #20]
 8006d3a:	69ba      	ldr	r2, [r7, #24]
 8006d3c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006d3e:	697b      	ldr	r3, [r7, #20]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006d44:	693b      	ldr	r3, [r7, #16]
 8006d46:	43db      	mvns	r3, r3
 8006d48:	69ba      	ldr	r2, [r7, #24]
 8006d4a:	4013      	ands	r3, r2
 8006d4c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	685b      	ldr	r3, [r3, #4]
 8006d52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d003      	beq.n	8006d62 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8006d5a:	69ba      	ldr	r2, [r7, #24]
 8006d5c:	693b      	ldr	r3, [r7, #16]
 8006d5e:	4313      	orrs	r3, r2
 8006d60:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006d62:	697b      	ldr	r3, [r7, #20]
 8006d64:	69ba      	ldr	r2, [r7, #24]
 8006d66:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006d68:	69fb      	ldr	r3, [r7, #28]
 8006d6a:	3301      	adds	r3, #1
 8006d6c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	681a      	ldr	r2, [r3, #0]
 8006d72:	69fb      	ldr	r3, [r7, #28]
 8006d74:	fa22 f303 	lsr.w	r3, r2, r3
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	f47f ae63 	bne.w	8006a44 <HAL_GPIO_Init+0x14>
  }
}
 8006d7e:	bf00      	nop
 8006d80:	bf00      	nop
 8006d82:	3724      	adds	r7, #36	; 0x24
 8006d84:	46bd      	mov	sp, r7
 8006d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8a:	4770      	bx	lr
 8006d8c:	58000400 	.word	0x58000400

08006d90 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8006d90:	b480      	push	{r7}
 8006d92:	b087      	sub	sp, #28
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
 8006d98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006d9e:	4b75      	ldr	r3, [pc, #468]	; (8006f74 <HAL_GPIO_DeInit+0x1e4>)
 8006da0:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 8006da2:	e0d9      	b.n	8006f58 <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8006da4:	2201      	movs	r2, #1
 8006da6:	697b      	ldr	r3, [r7, #20]
 8006da8:	fa02 f303 	lsl.w	r3, r2, r3
 8006dac:	683a      	ldr	r2, [r7, #0]
 8006dae:	4013      	ands	r3, r2
 8006db0:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	f000 80cc 	beq.w	8006f52 <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 8006dba:	4a6f      	ldr	r2, [pc, #444]	; (8006f78 <HAL_GPIO_DeInit+0x1e8>)
 8006dbc:	697b      	ldr	r3, [r7, #20]
 8006dbe:	089b      	lsrs	r3, r3, #2
 8006dc0:	3302      	adds	r3, #2
 8006dc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006dc6:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8006dc8:	697b      	ldr	r3, [r7, #20]
 8006dca:	f003 0303 	and.w	r3, r3, #3
 8006dce:	009b      	lsls	r3, r3, #2
 8006dd0:	220f      	movs	r2, #15
 8006dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8006dd6:	68ba      	ldr	r2, [r7, #8]
 8006dd8:	4013      	ands	r3, r2
 8006dda:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	4a67      	ldr	r2, [pc, #412]	; (8006f7c <HAL_GPIO_DeInit+0x1ec>)
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d037      	beq.n	8006e54 <HAL_GPIO_DeInit+0xc4>
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	4a66      	ldr	r2, [pc, #408]	; (8006f80 <HAL_GPIO_DeInit+0x1f0>)
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d031      	beq.n	8006e50 <HAL_GPIO_DeInit+0xc0>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	4a65      	ldr	r2, [pc, #404]	; (8006f84 <HAL_GPIO_DeInit+0x1f4>)
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d02b      	beq.n	8006e4c <HAL_GPIO_DeInit+0xbc>
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	4a64      	ldr	r2, [pc, #400]	; (8006f88 <HAL_GPIO_DeInit+0x1f8>)
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d025      	beq.n	8006e48 <HAL_GPIO_DeInit+0xb8>
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	4a63      	ldr	r2, [pc, #396]	; (8006f8c <HAL_GPIO_DeInit+0x1fc>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d01f      	beq.n	8006e44 <HAL_GPIO_DeInit+0xb4>
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	4a62      	ldr	r2, [pc, #392]	; (8006f90 <HAL_GPIO_DeInit+0x200>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d019      	beq.n	8006e40 <HAL_GPIO_DeInit+0xb0>
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	4a61      	ldr	r2, [pc, #388]	; (8006f94 <HAL_GPIO_DeInit+0x204>)
 8006e10:	4293      	cmp	r3, r2
 8006e12:	d013      	beq.n	8006e3c <HAL_GPIO_DeInit+0xac>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	4a60      	ldr	r2, [pc, #384]	; (8006f98 <HAL_GPIO_DeInit+0x208>)
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	d00d      	beq.n	8006e38 <HAL_GPIO_DeInit+0xa8>
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	4a5f      	ldr	r2, [pc, #380]	; (8006f9c <HAL_GPIO_DeInit+0x20c>)
 8006e20:	4293      	cmp	r3, r2
 8006e22:	d007      	beq.n	8006e34 <HAL_GPIO_DeInit+0xa4>
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	4a5e      	ldr	r2, [pc, #376]	; (8006fa0 <HAL_GPIO_DeInit+0x210>)
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	d101      	bne.n	8006e30 <HAL_GPIO_DeInit+0xa0>
 8006e2c:	2309      	movs	r3, #9
 8006e2e:	e012      	b.n	8006e56 <HAL_GPIO_DeInit+0xc6>
 8006e30:	230a      	movs	r3, #10
 8006e32:	e010      	b.n	8006e56 <HAL_GPIO_DeInit+0xc6>
 8006e34:	2308      	movs	r3, #8
 8006e36:	e00e      	b.n	8006e56 <HAL_GPIO_DeInit+0xc6>
 8006e38:	2307      	movs	r3, #7
 8006e3a:	e00c      	b.n	8006e56 <HAL_GPIO_DeInit+0xc6>
 8006e3c:	2306      	movs	r3, #6
 8006e3e:	e00a      	b.n	8006e56 <HAL_GPIO_DeInit+0xc6>
 8006e40:	2305      	movs	r3, #5
 8006e42:	e008      	b.n	8006e56 <HAL_GPIO_DeInit+0xc6>
 8006e44:	2304      	movs	r3, #4
 8006e46:	e006      	b.n	8006e56 <HAL_GPIO_DeInit+0xc6>
 8006e48:	2303      	movs	r3, #3
 8006e4a:	e004      	b.n	8006e56 <HAL_GPIO_DeInit+0xc6>
 8006e4c:	2302      	movs	r3, #2
 8006e4e:	e002      	b.n	8006e56 <HAL_GPIO_DeInit+0xc6>
 8006e50:	2301      	movs	r3, #1
 8006e52:	e000      	b.n	8006e56 <HAL_GPIO_DeInit+0xc6>
 8006e54:	2300      	movs	r3, #0
 8006e56:	697a      	ldr	r2, [r7, #20]
 8006e58:	f002 0203 	and.w	r2, r2, #3
 8006e5c:	0092      	lsls	r2, r2, #2
 8006e5e:	4093      	lsls	r3, r2
 8006e60:	68ba      	ldr	r2, [r7, #8]
 8006e62:	429a      	cmp	r2, r3
 8006e64:	d136      	bne.n	8006ed4 <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8006e66:	693b      	ldr	r3, [r7, #16]
 8006e68:	681a      	ldr	r2, [r3, #0]
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	43db      	mvns	r3, r3
 8006e6e:	401a      	ands	r2, r3
 8006e70:	693b      	ldr	r3, [r7, #16]
 8006e72:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8006e74:	693b      	ldr	r3, [r7, #16]
 8006e76:	685a      	ldr	r2, [r3, #4]
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	43db      	mvns	r3, r3
 8006e7c:	401a      	ands	r2, r3
 8006e7e:	693b      	ldr	r3, [r7, #16]
 8006e80:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8006e82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e86:	685a      	ldr	r2, [r3, #4]
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	43db      	mvns	r3, r3
 8006e8c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006e90:	4013      	ands	r3, r2
 8006e92:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8006e94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e98:	681a      	ldr	r2, [r3, #0]
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	43db      	mvns	r3, r3
 8006e9e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006ea2:	4013      	ands	r3, r2
 8006ea4:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8006ea6:	697b      	ldr	r3, [r7, #20]
 8006ea8:	f003 0303 	and.w	r3, r3, #3
 8006eac:	009b      	lsls	r3, r3, #2
 8006eae:	220f      	movs	r2, #15
 8006eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8006eb4:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8006eb6:	4a30      	ldr	r2, [pc, #192]	; (8006f78 <HAL_GPIO_DeInit+0x1e8>)
 8006eb8:	697b      	ldr	r3, [r7, #20]
 8006eba:	089b      	lsrs	r3, r3, #2
 8006ebc:	3302      	adds	r3, #2
 8006ebe:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006ec2:	68bb      	ldr	r3, [r7, #8]
 8006ec4:	43da      	mvns	r2, r3
 8006ec6:	482c      	ldr	r0, [pc, #176]	; (8006f78 <HAL_GPIO_DeInit+0x1e8>)
 8006ec8:	697b      	ldr	r3, [r7, #20]
 8006eca:	089b      	lsrs	r3, r3, #2
 8006ecc:	400a      	ands	r2, r1
 8006ece:	3302      	adds	r3, #2
 8006ed0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681a      	ldr	r2, [r3, #0]
 8006ed8:	697b      	ldr	r3, [r7, #20]
 8006eda:	005b      	lsls	r3, r3, #1
 8006edc:	2103      	movs	r1, #3
 8006ede:	fa01 f303 	lsl.w	r3, r1, r3
 8006ee2:	431a      	orrs	r2, r3
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8006ee8:	697b      	ldr	r3, [r7, #20]
 8006eea:	08da      	lsrs	r2, r3, #3
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	3208      	adds	r2, #8
 8006ef0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006ef4:	697b      	ldr	r3, [r7, #20]
 8006ef6:	f003 0307 	and.w	r3, r3, #7
 8006efa:	009b      	lsls	r3, r3, #2
 8006efc:	220f      	movs	r2, #15
 8006efe:	fa02 f303 	lsl.w	r3, r2, r3
 8006f02:	43db      	mvns	r3, r3
 8006f04:	697a      	ldr	r2, [r7, #20]
 8006f06:	08d2      	lsrs	r2, r2, #3
 8006f08:	4019      	ands	r1, r3
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	3208      	adds	r2, #8
 8006f0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	68da      	ldr	r2, [r3, #12]
 8006f16:	697b      	ldr	r3, [r7, #20]
 8006f18:	005b      	lsls	r3, r3, #1
 8006f1a:	2103      	movs	r1, #3
 8006f1c:	fa01 f303 	lsl.w	r3, r1, r3
 8006f20:	43db      	mvns	r3, r3
 8006f22:	401a      	ands	r2, r3
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	685a      	ldr	r2, [r3, #4]
 8006f2c:	2101      	movs	r1, #1
 8006f2e:	697b      	ldr	r3, [r7, #20]
 8006f30:	fa01 f303 	lsl.w	r3, r1, r3
 8006f34:	43db      	mvns	r3, r3
 8006f36:	401a      	ands	r2, r3
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	689a      	ldr	r2, [r3, #8]
 8006f40:	697b      	ldr	r3, [r7, #20]
 8006f42:	005b      	lsls	r3, r3, #1
 8006f44:	2103      	movs	r1, #3
 8006f46:	fa01 f303 	lsl.w	r3, r1, r3
 8006f4a:	43db      	mvns	r3, r3
 8006f4c:	401a      	ands	r2, r3
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	609a      	str	r2, [r3, #8]
    }

    position++;
 8006f52:	697b      	ldr	r3, [r7, #20]
 8006f54:	3301      	adds	r3, #1
 8006f56:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 8006f58:	683a      	ldr	r2, [r7, #0]
 8006f5a:	697b      	ldr	r3, [r7, #20]
 8006f5c:	fa22 f303 	lsr.w	r3, r2, r3
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	f47f af1f 	bne.w	8006da4 <HAL_GPIO_DeInit+0x14>
  }
}
 8006f66:	bf00      	nop
 8006f68:	bf00      	nop
 8006f6a:	371c      	adds	r7, #28
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f72:	4770      	bx	lr
 8006f74:	58000080 	.word	0x58000080
 8006f78:	58000400 	.word	0x58000400
 8006f7c:	58020000 	.word	0x58020000
 8006f80:	58020400 	.word	0x58020400
 8006f84:	58020800 	.word	0x58020800
 8006f88:	58020c00 	.word	0x58020c00
 8006f8c:	58021000 	.word	0x58021000
 8006f90:	58021400 	.word	0x58021400
 8006f94:	58021800 	.word	0x58021800
 8006f98:	58021c00 	.word	0x58021c00
 8006f9c:	58022000 	.word	0x58022000
 8006fa0:	58022400 	.word	0x58022400

08006fa4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006fa4:	b480      	push	{r7}
 8006fa6:	b083      	sub	sp, #12
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
 8006fac:	460b      	mov	r3, r1
 8006fae:	807b      	strh	r3, [r7, #2]
 8006fb0:	4613      	mov	r3, r2
 8006fb2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006fb4:	787b      	ldrb	r3, [r7, #1]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d003      	beq.n	8006fc2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006fba:	887a      	ldrh	r2, [r7, #2]
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006fc0:	e003      	b.n	8006fca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006fc2:	887b      	ldrh	r3, [r7, #2]
 8006fc4:	041a      	lsls	r2, r3, #16
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	619a      	str	r2, [r3, #24]
}
 8006fca:	bf00      	nop
 8006fcc:	370c      	adds	r7, #12
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd4:	4770      	bx	lr

08006fd6 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006fd6:	b580      	push	{r7, lr}
 8006fd8:	b082      	sub	sp, #8
 8006fda:	af00      	add	r7, sp, #0
 8006fdc:	4603      	mov	r3, r0
 8006fde:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8006fe0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006fe4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006fe8:	88fb      	ldrh	r3, [r7, #6]
 8006fea:	4013      	ands	r3, r2
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d008      	beq.n	8007002 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006ff0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006ff4:	88fb      	ldrh	r3, [r7, #6]
 8006ff6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006ffa:	88fb      	ldrh	r3, [r7, #6]
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	f000 f804 	bl	800700a <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8007002:	bf00      	nop
 8007004:	3708      	adds	r7, #8
 8007006:	46bd      	mov	sp, r7
 8007008:	bd80      	pop	{r7, pc}

0800700a <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800700a:	b480      	push	{r7}
 800700c:	b083      	sub	sp, #12
 800700e:	af00      	add	r7, sp, #0
 8007010:	4603      	mov	r3, r0
 8007012:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8007014:	bf00      	nop
 8007016:	370c      	adds	r7, #12
 8007018:	46bd      	mov	sp, r7
 800701a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701e:	4770      	bx	lr

08007020 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b082      	sub	sp, #8
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d101      	bne.n	8007032 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800702e:	2301      	movs	r3, #1
 8007030:	e07f      	b.n	8007132 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007038:	b2db      	uxtb	r3, r3
 800703a:	2b00      	cmp	r3, #0
 800703c:	d106      	bne.n	800704c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2200      	movs	r2, #0
 8007042:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	f000 f87a 	bl	8007140 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2224      	movs	r2, #36	; 0x24
 8007050:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	681a      	ldr	r2, [r3, #0]
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f022 0201 	bic.w	r2, r2, #1
 8007062:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	685a      	ldr	r2, [r3, #4]
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007070:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	689a      	ldr	r2, [r3, #8]
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007080:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	68db      	ldr	r3, [r3, #12]
 8007086:	2b01      	cmp	r3, #1
 8007088:	d107      	bne.n	800709a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	689a      	ldr	r2, [r3, #8]
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007096:	609a      	str	r2, [r3, #8]
 8007098:	e006      	b.n	80070a8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	689a      	ldr	r2, [r3, #8]
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80070a6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	68db      	ldr	r3, [r3, #12]
 80070ac:	2b02      	cmp	r3, #2
 80070ae:	d104      	bne.n	80070ba <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80070b8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	6859      	ldr	r1, [r3, #4]
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681a      	ldr	r2, [r3, #0]
 80070c4:	4b1d      	ldr	r3, [pc, #116]	; (800713c <HAL_I2C_Init+0x11c>)
 80070c6:	430b      	orrs	r3, r1
 80070c8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	68da      	ldr	r2, [r3, #12]
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80070d8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	691a      	ldr	r2, [r3, #16]
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	695b      	ldr	r3, [r3, #20]
 80070e2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	699b      	ldr	r3, [r3, #24]
 80070ea:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	430a      	orrs	r2, r1
 80070f2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	69d9      	ldr	r1, [r3, #28]
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	6a1a      	ldr	r2, [r3, #32]
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	430a      	orrs	r2, r1
 8007102:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	681a      	ldr	r2, [r3, #0]
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f042 0201 	orr.w	r2, r2, #1
 8007112:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2200      	movs	r2, #0
 8007118:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2220      	movs	r2, #32
 800711e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2200      	movs	r2, #0
 8007126:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2200      	movs	r2, #0
 800712c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8007130:	2300      	movs	r3, #0
}
 8007132:	4618      	mov	r0, r3
 8007134:	3708      	adds	r7, #8
 8007136:	46bd      	mov	sp, r7
 8007138:	bd80      	pop	{r7, pc}
 800713a:	bf00      	nop
 800713c:	02008000 	.word	0x02008000

08007140 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8007140:	b480      	push	{r7}
 8007142:	b083      	sub	sp, #12
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8007148:	bf00      	nop
 800714a:	370c      	adds	r7, #12
 800714c:	46bd      	mov	sp, r7
 800714e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007152:	4770      	bx	lr

08007154 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b088      	sub	sp, #32
 8007158:	af02      	add	r7, sp, #8
 800715a:	60f8      	str	r0, [r7, #12]
 800715c:	4608      	mov	r0, r1
 800715e:	4611      	mov	r1, r2
 8007160:	461a      	mov	r2, r3
 8007162:	4603      	mov	r3, r0
 8007164:	817b      	strh	r3, [r7, #10]
 8007166:	460b      	mov	r3, r1
 8007168:	813b      	strh	r3, [r7, #8]
 800716a:	4613      	mov	r3, r2
 800716c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007174:	b2db      	uxtb	r3, r3
 8007176:	2b20      	cmp	r3, #32
 8007178:	f040 80fd 	bne.w	8007376 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800717c:	6a3b      	ldr	r3, [r7, #32]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d002      	beq.n	8007188 <HAL_I2C_Mem_Read+0x34>
 8007182:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007184:	2b00      	cmp	r3, #0
 8007186:	d105      	bne.n	8007194 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800718e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8007190:	2301      	movs	r3, #1
 8007192:	e0f1      	b.n	8007378 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800719a:	2b01      	cmp	r3, #1
 800719c:	d101      	bne.n	80071a2 <HAL_I2C_Mem_Read+0x4e>
 800719e:	2302      	movs	r3, #2
 80071a0:	e0ea      	b.n	8007378 <HAL_I2C_Mem_Read+0x224>
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	2201      	movs	r2, #1
 80071a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80071aa:	f7fd fae5 	bl	8004778 <HAL_GetTick>
 80071ae:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80071b0:	697b      	ldr	r3, [r7, #20]
 80071b2:	9300      	str	r3, [sp, #0]
 80071b4:	2319      	movs	r3, #25
 80071b6:	2201      	movs	r2, #1
 80071b8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80071bc:	68f8      	ldr	r0, [r7, #12]
 80071be:	f000 f975 	bl	80074ac <I2C_WaitOnFlagUntilTimeout>
 80071c2:	4603      	mov	r3, r0
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d001      	beq.n	80071cc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80071c8:	2301      	movs	r3, #1
 80071ca:	e0d5      	b.n	8007378 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	2222      	movs	r2, #34	; 0x22
 80071d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	2240      	movs	r2, #64	; 0x40
 80071d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	2200      	movs	r2, #0
 80071e0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	6a3a      	ldr	r2, [r7, #32]
 80071e6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80071ec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	2200      	movs	r2, #0
 80071f2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80071f4:	88f8      	ldrh	r0, [r7, #6]
 80071f6:	893a      	ldrh	r2, [r7, #8]
 80071f8:	8979      	ldrh	r1, [r7, #10]
 80071fa:	697b      	ldr	r3, [r7, #20]
 80071fc:	9301      	str	r3, [sp, #4]
 80071fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007200:	9300      	str	r3, [sp, #0]
 8007202:	4603      	mov	r3, r0
 8007204:	68f8      	ldr	r0, [r7, #12]
 8007206:	f000 f8d9 	bl	80073bc <I2C_RequestMemoryRead>
 800720a:	4603      	mov	r3, r0
 800720c:	2b00      	cmp	r3, #0
 800720e:	d005      	beq.n	800721c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	2200      	movs	r2, #0
 8007214:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8007218:	2301      	movs	r3, #1
 800721a:	e0ad      	b.n	8007378 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007220:	b29b      	uxth	r3, r3
 8007222:	2bff      	cmp	r3, #255	; 0xff
 8007224:	d90e      	bls.n	8007244 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	22ff      	movs	r2, #255	; 0xff
 800722a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007230:	b2da      	uxtb	r2, r3
 8007232:	8979      	ldrh	r1, [r7, #10]
 8007234:	4b52      	ldr	r3, [pc, #328]	; (8007380 <HAL_I2C_Mem_Read+0x22c>)
 8007236:	9300      	str	r3, [sp, #0]
 8007238:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800723c:	68f8      	ldr	r0, [r7, #12]
 800723e:	f000 faef 	bl	8007820 <I2C_TransferConfig>
 8007242:	e00f      	b.n	8007264 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007248:	b29a      	uxth	r2, r3
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007252:	b2da      	uxtb	r2, r3
 8007254:	8979      	ldrh	r1, [r7, #10]
 8007256:	4b4a      	ldr	r3, [pc, #296]	; (8007380 <HAL_I2C_Mem_Read+0x22c>)
 8007258:	9300      	str	r3, [sp, #0]
 800725a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800725e:	68f8      	ldr	r0, [r7, #12]
 8007260:	f000 fade 	bl	8007820 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8007264:	697b      	ldr	r3, [r7, #20]
 8007266:	9300      	str	r3, [sp, #0]
 8007268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800726a:	2200      	movs	r2, #0
 800726c:	2104      	movs	r1, #4
 800726e:	68f8      	ldr	r0, [r7, #12]
 8007270:	f000 f91c 	bl	80074ac <I2C_WaitOnFlagUntilTimeout>
 8007274:	4603      	mov	r3, r0
 8007276:	2b00      	cmp	r3, #0
 8007278:	d001      	beq.n	800727e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800727a:	2301      	movs	r3, #1
 800727c:	e07c      	b.n	8007378 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007288:	b2d2      	uxtb	r2, r2
 800728a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007290:	1c5a      	adds	r2, r3, #1
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800729a:	3b01      	subs	r3, #1
 800729c:	b29a      	uxth	r2, r3
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072a6:	b29b      	uxth	r3, r3
 80072a8:	3b01      	subs	r3, #1
 80072aa:	b29a      	uxth	r2, r3
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072b4:	b29b      	uxth	r3, r3
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d034      	beq.n	8007324 <HAL_I2C_Mem_Read+0x1d0>
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d130      	bne.n	8007324 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80072c2:	697b      	ldr	r3, [r7, #20]
 80072c4:	9300      	str	r3, [sp, #0]
 80072c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072c8:	2200      	movs	r2, #0
 80072ca:	2180      	movs	r1, #128	; 0x80
 80072cc:	68f8      	ldr	r0, [r7, #12]
 80072ce:	f000 f8ed 	bl	80074ac <I2C_WaitOnFlagUntilTimeout>
 80072d2:	4603      	mov	r3, r0
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d001      	beq.n	80072dc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80072d8:	2301      	movs	r3, #1
 80072da:	e04d      	b.n	8007378 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072e0:	b29b      	uxth	r3, r3
 80072e2:	2bff      	cmp	r3, #255	; 0xff
 80072e4:	d90e      	bls.n	8007304 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	22ff      	movs	r2, #255	; 0xff
 80072ea:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072f0:	b2da      	uxtb	r2, r3
 80072f2:	8979      	ldrh	r1, [r7, #10]
 80072f4:	2300      	movs	r3, #0
 80072f6:	9300      	str	r3, [sp, #0]
 80072f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80072fc:	68f8      	ldr	r0, [r7, #12]
 80072fe:	f000 fa8f 	bl	8007820 <I2C_TransferConfig>
 8007302:	e00f      	b.n	8007324 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007308:	b29a      	uxth	r2, r3
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007312:	b2da      	uxtb	r2, r3
 8007314:	8979      	ldrh	r1, [r7, #10]
 8007316:	2300      	movs	r3, #0
 8007318:	9300      	str	r3, [sp, #0]
 800731a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800731e:	68f8      	ldr	r0, [r7, #12]
 8007320:	f000 fa7e 	bl	8007820 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007328:	b29b      	uxth	r3, r3
 800732a:	2b00      	cmp	r3, #0
 800732c:	d19a      	bne.n	8007264 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800732e:	697a      	ldr	r2, [r7, #20]
 8007330:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007332:	68f8      	ldr	r0, [r7, #12]
 8007334:	f000 f950 	bl	80075d8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007338:	4603      	mov	r3, r0
 800733a:	2b00      	cmp	r3, #0
 800733c:	d001      	beq.n	8007342 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800733e:	2301      	movs	r3, #1
 8007340:	e01a      	b.n	8007378 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	2220      	movs	r2, #32
 8007348:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	6859      	ldr	r1, [r3, #4]
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	681a      	ldr	r2, [r3, #0]
 8007354:	4b0b      	ldr	r3, [pc, #44]	; (8007384 <HAL_I2C_Mem_Read+0x230>)
 8007356:	400b      	ands	r3, r1
 8007358:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	2220      	movs	r2, #32
 800735e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	2200      	movs	r2, #0
 8007366:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	2200      	movs	r2, #0
 800736e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007372:	2300      	movs	r3, #0
 8007374:	e000      	b.n	8007378 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8007376:	2302      	movs	r3, #2
  }
}
 8007378:	4618      	mov	r0, r3
 800737a:	3718      	adds	r7, #24
 800737c:	46bd      	mov	sp, r7
 800737e:	bd80      	pop	{r7, pc}
 8007380:	80002400 	.word	0x80002400
 8007384:	fe00e800 	.word	0xfe00e800

08007388 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8007388:	b480      	push	{r7}
 800738a:	b083      	sub	sp, #12
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007396:	b2db      	uxtb	r3, r3
}
 8007398:	4618      	mov	r0, r3
 800739a:	370c      	adds	r7, #12
 800739c:	46bd      	mov	sp, r7
 800739e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a2:	4770      	bx	lr

080073a4 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 80073a4:	b480      	push	{r7}
 80073a6:	b083      	sub	sp, #12
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 80073b0:	4618      	mov	r0, r3
 80073b2:	370c      	adds	r7, #12
 80073b4:	46bd      	mov	sp, r7
 80073b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ba:	4770      	bx	lr

080073bc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b086      	sub	sp, #24
 80073c0:	af02      	add	r7, sp, #8
 80073c2:	60f8      	str	r0, [r7, #12]
 80073c4:	4608      	mov	r0, r1
 80073c6:	4611      	mov	r1, r2
 80073c8:	461a      	mov	r2, r3
 80073ca:	4603      	mov	r3, r0
 80073cc:	817b      	strh	r3, [r7, #10]
 80073ce:	460b      	mov	r3, r1
 80073d0:	813b      	strh	r3, [r7, #8]
 80073d2:	4613      	mov	r3, r2
 80073d4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80073d6:	88fb      	ldrh	r3, [r7, #6]
 80073d8:	b2da      	uxtb	r2, r3
 80073da:	8979      	ldrh	r1, [r7, #10]
 80073dc:	4b20      	ldr	r3, [pc, #128]	; (8007460 <I2C_RequestMemoryRead+0xa4>)
 80073de:	9300      	str	r3, [sp, #0]
 80073e0:	2300      	movs	r3, #0
 80073e2:	68f8      	ldr	r0, [r7, #12]
 80073e4:	f000 fa1c 	bl	8007820 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80073e8:	69fa      	ldr	r2, [r7, #28]
 80073ea:	69b9      	ldr	r1, [r7, #24]
 80073ec:	68f8      	ldr	r0, [r7, #12]
 80073ee:	f000 f8ac 	bl	800754a <I2C_WaitOnTXISFlagUntilTimeout>
 80073f2:	4603      	mov	r3, r0
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d001      	beq.n	80073fc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80073f8:	2301      	movs	r3, #1
 80073fa:	e02c      	b.n	8007456 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80073fc:	88fb      	ldrh	r3, [r7, #6]
 80073fe:	2b01      	cmp	r3, #1
 8007400:	d105      	bne.n	800740e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007402:	893b      	ldrh	r3, [r7, #8]
 8007404:	b2da      	uxtb	r2, r3
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	629a      	str	r2, [r3, #40]	; 0x28
 800740c:	e015      	b.n	800743a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800740e:	893b      	ldrh	r3, [r7, #8]
 8007410:	0a1b      	lsrs	r3, r3, #8
 8007412:	b29b      	uxth	r3, r3
 8007414:	b2da      	uxtb	r2, r3
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800741c:	69fa      	ldr	r2, [r7, #28]
 800741e:	69b9      	ldr	r1, [r7, #24]
 8007420:	68f8      	ldr	r0, [r7, #12]
 8007422:	f000 f892 	bl	800754a <I2C_WaitOnTXISFlagUntilTimeout>
 8007426:	4603      	mov	r3, r0
 8007428:	2b00      	cmp	r3, #0
 800742a:	d001      	beq.n	8007430 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800742c:	2301      	movs	r3, #1
 800742e:	e012      	b.n	8007456 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007430:	893b      	ldrh	r3, [r7, #8]
 8007432:	b2da      	uxtb	r2, r3
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800743a:	69fb      	ldr	r3, [r7, #28]
 800743c:	9300      	str	r3, [sp, #0]
 800743e:	69bb      	ldr	r3, [r7, #24]
 8007440:	2200      	movs	r2, #0
 8007442:	2140      	movs	r1, #64	; 0x40
 8007444:	68f8      	ldr	r0, [r7, #12]
 8007446:	f000 f831 	bl	80074ac <I2C_WaitOnFlagUntilTimeout>
 800744a:	4603      	mov	r3, r0
 800744c:	2b00      	cmp	r3, #0
 800744e:	d001      	beq.n	8007454 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8007450:	2301      	movs	r3, #1
 8007452:	e000      	b.n	8007456 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8007454:	2300      	movs	r3, #0
}
 8007456:	4618      	mov	r0, r3
 8007458:	3710      	adds	r7, #16
 800745a:	46bd      	mov	sp, r7
 800745c:	bd80      	pop	{r7, pc}
 800745e:	bf00      	nop
 8007460:	80002000 	.word	0x80002000

08007464 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007464:	b480      	push	{r7}
 8007466:	b083      	sub	sp, #12
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	699b      	ldr	r3, [r3, #24]
 8007472:	f003 0302 	and.w	r3, r3, #2
 8007476:	2b02      	cmp	r3, #2
 8007478:	d103      	bne.n	8007482 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	2200      	movs	r2, #0
 8007480:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	699b      	ldr	r3, [r3, #24]
 8007488:	f003 0301 	and.w	r3, r3, #1
 800748c:	2b01      	cmp	r3, #1
 800748e:	d007      	beq.n	80074a0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	699a      	ldr	r2, [r3, #24]
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f042 0201 	orr.w	r2, r2, #1
 800749e:	619a      	str	r2, [r3, #24]
  }
}
 80074a0:	bf00      	nop
 80074a2:	370c      	adds	r7, #12
 80074a4:	46bd      	mov	sp, r7
 80074a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074aa:	4770      	bx	lr

080074ac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b084      	sub	sp, #16
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	60f8      	str	r0, [r7, #12]
 80074b4:	60b9      	str	r1, [r7, #8]
 80074b6:	603b      	str	r3, [r7, #0]
 80074b8:	4613      	mov	r3, r2
 80074ba:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80074bc:	e031      	b.n	8007522 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074c4:	d02d      	beq.n	8007522 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80074c6:	f7fd f957 	bl	8004778 <HAL_GetTick>
 80074ca:	4602      	mov	r2, r0
 80074cc:	69bb      	ldr	r3, [r7, #24]
 80074ce:	1ad3      	subs	r3, r2, r3
 80074d0:	683a      	ldr	r2, [r7, #0]
 80074d2:	429a      	cmp	r2, r3
 80074d4:	d302      	bcc.n	80074dc <I2C_WaitOnFlagUntilTimeout+0x30>
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d122      	bne.n	8007522 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	699a      	ldr	r2, [r3, #24]
 80074e2:	68bb      	ldr	r3, [r7, #8]
 80074e4:	4013      	ands	r3, r2
 80074e6:	68ba      	ldr	r2, [r7, #8]
 80074e8:	429a      	cmp	r2, r3
 80074ea:	bf0c      	ite	eq
 80074ec:	2301      	moveq	r3, #1
 80074ee:	2300      	movne	r3, #0
 80074f0:	b2db      	uxtb	r3, r3
 80074f2:	461a      	mov	r2, r3
 80074f4:	79fb      	ldrb	r3, [r7, #7]
 80074f6:	429a      	cmp	r2, r3
 80074f8:	d113      	bne.n	8007522 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074fe:	f043 0220 	orr.w	r2, r3, #32
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	2220      	movs	r2, #32
 800750a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	2200      	movs	r2, #0
 8007512:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	2200      	movs	r2, #0
 800751a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800751e:	2301      	movs	r3, #1
 8007520:	e00f      	b.n	8007542 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	699a      	ldr	r2, [r3, #24]
 8007528:	68bb      	ldr	r3, [r7, #8]
 800752a:	4013      	ands	r3, r2
 800752c:	68ba      	ldr	r2, [r7, #8]
 800752e:	429a      	cmp	r2, r3
 8007530:	bf0c      	ite	eq
 8007532:	2301      	moveq	r3, #1
 8007534:	2300      	movne	r3, #0
 8007536:	b2db      	uxtb	r3, r3
 8007538:	461a      	mov	r2, r3
 800753a:	79fb      	ldrb	r3, [r7, #7]
 800753c:	429a      	cmp	r2, r3
 800753e:	d0be      	beq.n	80074be <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007540:	2300      	movs	r3, #0
}
 8007542:	4618      	mov	r0, r3
 8007544:	3710      	adds	r7, #16
 8007546:	46bd      	mov	sp, r7
 8007548:	bd80      	pop	{r7, pc}

0800754a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800754a:	b580      	push	{r7, lr}
 800754c:	b084      	sub	sp, #16
 800754e:	af00      	add	r7, sp, #0
 8007550:	60f8      	str	r0, [r7, #12]
 8007552:	60b9      	str	r1, [r7, #8]
 8007554:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007556:	e033      	b.n	80075c0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007558:	687a      	ldr	r2, [r7, #4]
 800755a:	68b9      	ldr	r1, [r7, #8]
 800755c:	68f8      	ldr	r0, [r7, #12]
 800755e:	f000 f87f 	bl	8007660 <I2C_IsErrorOccurred>
 8007562:	4603      	mov	r3, r0
 8007564:	2b00      	cmp	r3, #0
 8007566:	d001      	beq.n	800756c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007568:	2301      	movs	r3, #1
 800756a:	e031      	b.n	80075d0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800756c:	68bb      	ldr	r3, [r7, #8]
 800756e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007572:	d025      	beq.n	80075c0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007574:	f7fd f900 	bl	8004778 <HAL_GetTick>
 8007578:	4602      	mov	r2, r0
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	1ad3      	subs	r3, r2, r3
 800757e:	68ba      	ldr	r2, [r7, #8]
 8007580:	429a      	cmp	r2, r3
 8007582:	d302      	bcc.n	800758a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007584:	68bb      	ldr	r3, [r7, #8]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d11a      	bne.n	80075c0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	699b      	ldr	r3, [r3, #24]
 8007590:	f003 0302 	and.w	r3, r3, #2
 8007594:	2b02      	cmp	r3, #2
 8007596:	d013      	beq.n	80075c0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800759c:	f043 0220 	orr.w	r2, r3, #32
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	2220      	movs	r2, #32
 80075a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	2200      	movs	r2, #0
 80075b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	2200      	movs	r2, #0
 80075b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80075bc:	2301      	movs	r3, #1
 80075be:	e007      	b.n	80075d0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	699b      	ldr	r3, [r3, #24]
 80075c6:	f003 0302 	and.w	r3, r3, #2
 80075ca:	2b02      	cmp	r3, #2
 80075cc:	d1c4      	bne.n	8007558 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80075ce:	2300      	movs	r3, #0
}
 80075d0:	4618      	mov	r0, r3
 80075d2:	3710      	adds	r7, #16
 80075d4:	46bd      	mov	sp, r7
 80075d6:	bd80      	pop	{r7, pc}

080075d8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b084      	sub	sp, #16
 80075dc:	af00      	add	r7, sp, #0
 80075de:	60f8      	str	r0, [r7, #12]
 80075e0:	60b9      	str	r1, [r7, #8]
 80075e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80075e4:	e02f      	b.n	8007646 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80075e6:	687a      	ldr	r2, [r7, #4]
 80075e8:	68b9      	ldr	r1, [r7, #8]
 80075ea:	68f8      	ldr	r0, [r7, #12]
 80075ec:	f000 f838 	bl	8007660 <I2C_IsErrorOccurred>
 80075f0:	4603      	mov	r3, r0
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d001      	beq.n	80075fa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80075f6:	2301      	movs	r3, #1
 80075f8:	e02d      	b.n	8007656 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80075fa:	f7fd f8bd 	bl	8004778 <HAL_GetTick>
 80075fe:	4602      	mov	r2, r0
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	1ad3      	subs	r3, r2, r3
 8007604:	68ba      	ldr	r2, [r7, #8]
 8007606:	429a      	cmp	r2, r3
 8007608:	d302      	bcc.n	8007610 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800760a:	68bb      	ldr	r3, [r7, #8]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d11a      	bne.n	8007646 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	699b      	ldr	r3, [r3, #24]
 8007616:	f003 0320 	and.w	r3, r3, #32
 800761a:	2b20      	cmp	r3, #32
 800761c:	d013      	beq.n	8007646 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007622:	f043 0220 	orr.w	r2, r3, #32
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	2220      	movs	r2, #32
 800762e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	2200      	movs	r2, #0
 8007636:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	2200      	movs	r2, #0
 800763e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8007642:	2301      	movs	r3, #1
 8007644:	e007      	b.n	8007656 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	699b      	ldr	r3, [r3, #24]
 800764c:	f003 0320 	and.w	r3, r3, #32
 8007650:	2b20      	cmp	r3, #32
 8007652:	d1c8      	bne.n	80075e6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007654:	2300      	movs	r3, #0
}
 8007656:	4618      	mov	r0, r3
 8007658:	3710      	adds	r7, #16
 800765a:	46bd      	mov	sp, r7
 800765c:	bd80      	pop	{r7, pc}
	...

08007660 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b08a      	sub	sp, #40	; 0x28
 8007664:	af00      	add	r7, sp, #0
 8007666:	60f8      	str	r0, [r7, #12]
 8007668:	60b9      	str	r1, [r7, #8]
 800766a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800766c:	2300      	movs	r3, #0
 800766e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	699b      	ldr	r3, [r3, #24]
 8007678:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800767a:	2300      	movs	r3, #0
 800767c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8007682:	69bb      	ldr	r3, [r7, #24]
 8007684:	f003 0310 	and.w	r3, r3, #16
 8007688:	2b00      	cmp	r3, #0
 800768a:	d068      	beq.n	800775e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	2210      	movs	r2, #16
 8007692:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007694:	e049      	b.n	800772a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007696:	68bb      	ldr	r3, [r7, #8]
 8007698:	f1b3 3fff 	cmp.w	r3, #4294967295
 800769c:	d045      	beq.n	800772a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800769e:	f7fd f86b 	bl	8004778 <HAL_GetTick>
 80076a2:	4602      	mov	r2, r0
 80076a4:	69fb      	ldr	r3, [r7, #28]
 80076a6:	1ad3      	subs	r3, r2, r3
 80076a8:	68ba      	ldr	r2, [r7, #8]
 80076aa:	429a      	cmp	r2, r3
 80076ac:	d302      	bcc.n	80076b4 <I2C_IsErrorOccurred+0x54>
 80076ae:	68bb      	ldr	r3, [r7, #8]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d13a      	bne.n	800772a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	685b      	ldr	r3, [r3, #4]
 80076ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80076be:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80076c6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	699b      	ldr	r3, [r3, #24]
 80076ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80076d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80076d6:	d121      	bne.n	800771c <I2C_IsErrorOccurred+0xbc>
 80076d8:	697b      	ldr	r3, [r7, #20]
 80076da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80076de:	d01d      	beq.n	800771c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80076e0:	7cfb      	ldrb	r3, [r7, #19]
 80076e2:	2b20      	cmp	r3, #32
 80076e4:	d01a      	beq.n	800771c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	685a      	ldr	r2, [r3, #4]
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80076f4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80076f6:	f7fd f83f 	bl	8004778 <HAL_GetTick>
 80076fa:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80076fc:	e00e      	b.n	800771c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80076fe:	f7fd f83b 	bl	8004778 <HAL_GetTick>
 8007702:	4602      	mov	r2, r0
 8007704:	69fb      	ldr	r3, [r7, #28]
 8007706:	1ad3      	subs	r3, r2, r3
 8007708:	2b19      	cmp	r3, #25
 800770a:	d907      	bls.n	800771c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800770c:	6a3b      	ldr	r3, [r7, #32]
 800770e:	f043 0320 	orr.w	r3, r3, #32
 8007712:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8007714:	2301      	movs	r3, #1
 8007716:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800771a:	e006      	b.n	800772a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	699b      	ldr	r3, [r3, #24]
 8007722:	f003 0320 	and.w	r3, r3, #32
 8007726:	2b20      	cmp	r3, #32
 8007728:	d1e9      	bne.n	80076fe <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	699b      	ldr	r3, [r3, #24]
 8007730:	f003 0320 	and.w	r3, r3, #32
 8007734:	2b20      	cmp	r3, #32
 8007736:	d003      	beq.n	8007740 <I2C_IsErrorOccurred+0xe0>
 8007738:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800773c:	2b00      	cmp	r3, #0
 800773e:	d0aa      	beq.n	8007696 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8007740:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007744:	2b00      	cmp	r3, #0
 8007746:	d103      	bne.n	8007750 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	2220      	movs	r2, #32
 800774e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8007750:	6a3b      	ldr	r3, [r7, #32]
 8007752:	f043 0304 	orr.w	r3, r3, #4
 8007756:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8007758:	2301      	movs	r3, #1
 800775a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	699b      	ldr	r3, [r3, #24]
 8007764:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8007766:	69bb      	ldr	r3, [r7, #24]
 8007768:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800776c:	2b00      	cmp	r3, #0
 800776e:	d00b      	beq.n	8007788 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8007770:	6a3b      	ldr	r3, [r7, #32]
 8007772:	f043 0301 	orr.w	r3, r3, #1
 8007776:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007780:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007782:	2301      	movs	r3, #1
 8007784:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8007788:	69bb      	ldr	r3, [r7, #24]
 800778a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800778e:	2b00      	cmp	r3, #0
 8007790:	d00b      	beq.n	80077aa <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8007792:	6a3b      	ldr	r3, [r7, #32]
 8007794:	f043 0308 	orr.w	r3, r3, #8
 8007798:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80077a2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80077a4:	2301      	movs	r3, #1
 80077a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80077aa:	69bb      	ldr	r3, [r7, #24]
 80077ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d00b      	beq.n	80077cc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80077b4:	6a3b      	ldr	r3, [r7, #32]
 80077b6:	f043 0302 	orr.w	r3, r3, #2
 80077ba:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80077c4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80077c6:	2301      	movs	r3, #1
 80077c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80077cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d01c      	beq.n	800780e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80077d4:	68f8      	ldr	r0, [r7, #12]
 80077d6:	f7ff fe45 	bl	8007464 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	6859      	ldr	r1, [r3, #4]
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681a      	ldr	r2, [r3, #0]
 80077e4:	4b0d      	ldr	r3, [pc, #52]	; (800781c <I2C_IsErrorOccurred+0x1bc>)
 80077e6:	400b      	ands	r3, r1
 80077e8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80077ee:	6a3b      	ldr	r3, [r7, #32]
 80077f0:	431a      	orrs	r2, r3
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	2220      	movs	r2, #32
 80077fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	2200      	movs	r2, #0
 8007802:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	2200      	movs	r2, #0
 800780a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800780e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007812:	4618      	mov	r0, r3
 8007814:	3728      	adds	r7, #40	; 0x28
 8007816:	46bd      	mov	sp, r7
 8007818:	bd80      	pop	{r7, pc}
 800781a:	bf00      	nop
 800781c:	fe00e800 	.word	0xfe00e800

08007820 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007820:	b480      	push	{r7}
 8007822:	b087      	sub	sp, #28
 8007824:	af00      	add	r7, sp, #0
 8007826:	60f8      	str	r0, [r7, #12]
 8007828:	607b      	str	r3, [r7, #4]
 800782a:	460b      	mov	r3, r1
 800782c:	817b      	strh	r3, [r7, #10]
 800782e:	4613      	mov	r3, r2
 8007830:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007832:	897b      	ldrh	r3, [r7, #10]
 8007834:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007838:	7a7b      	ldrb	r3, [r7, #9]
 800783a:	041b      	lsls	r3, r3, #16
 800783c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007840:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007846:	6a3b      	ldr	r3, [r7, #32]
 8007848:	4313      	orrs	r3, r2
 800784a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800784e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	685a      	ldr	r2, [r3, #4]
 8007856:	6a3b      	ldr	r3, [r7, #32]
 8007858:	0d5b      	lsrs	r3, r3, #21
 800785a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800785e:	4b08      	ldr	r3, [pc, #32]	; (8007880 <I2C_TransferConfig+0x60>)
 8007860:	430b      	orrs	r3, r1
 8007862:	43db      	mvns	r3, r3
 8007864:	ea02 0103 	and.w	r1, r2, r3
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	697a      	ldr	r2, [r7, #20]
 800786e:	430a      	orrs	r2, r1
 8007870:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007872:	bf00      	nop
 8007874:	371c      	adds	r7, #28
 8007876:	46bd      	mov	sp, r7
 8007878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787c:	4770      	bx	lr
 800787e:	bf00      	nop
 8007880:	03ff63ff 	.word	0x03ff63ff

08007884 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007884:	b480      	push	{r7}
 8007886:	b083      	sub	sp, #12
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
 800788c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007894:	b2db      	uxtb	r3, r3
 8007896:	2b20      	cmp	r3, #32
 8007898:	d138      	bne.n	800790c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80078a0:	2b01      	cmp	r3, #1
 80078a2:	d101      	bne.n	80078a8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80078a4:	2302      	movs	r3, #2
 80078a6:	e032      	b.n	800790e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2201      	movs	r2, #1
 80078ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2224      	movs	r2, #36	; 0x24
 80078b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	681a      	ldr	r2, [r3, #0]
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f022 0201 	bic.w	r2, r2, #1
 80078c6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	681a      	ldr	r2, [r3, #0]
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80078d6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	6819      	ldr	r1, [r3, #0]
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	683a      	ldr	r2, [r7, #0]
 80078e4:	430a      	orrs	r2, r1
 80078e6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	681a      	ldr	r2, [r3, #0]
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f042 0201 	orr.w	r2, r2, #1
 80078f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2220      	movs	r2, #32
 80078fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2200      	movs	r2, #0
 8007904:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007908:	2300      	movs	r3, #0
 800790a:	e000      	b.n	800790e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800790c:	2302      	movs	r3, #2
  }
}
 800790e:	4618      	mov	r0, r3
 8007910:	370c      	adds	r7, #12
 8007912:	46bd      	mov	sp, r7
 8007914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007918:	4770      	bx	lr

0800791a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800791a:	b480      	push	{r7}
 800791c:	b085      	sub	sp, #20
 800791e:	af00      	add	r7, sp, #0
 8007920:	6078      	str	r0, [r7, #4]
 8007922:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800792a:	b2db      	uxtb	r3, r3
 800792c:	2b20      	cmp	r3, #32
 800792e:	d139      	bne.n	80079a4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007936:	2b01      	cmp	r3, #1
 8007938:	d101      	bne.n	800793e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800793a:	2302      	movs	r3, #2
 800793c:	e033      	b.n	80079a6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	2201      	movs	r2, #1
 8007942:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	2224      	movs	r2, #36	; 0x24
 800794a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	681a      	ldr	r2, [r3, #0]
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f022 0201 	bic.w	r2, r2, #1
 800795c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800796c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	021b      	lsls	r3, r3, #8
 8007972:	68fa      	ldr	r2, [r7, #12]
 8007974:	4313      	orrs	r3, r2
 8007976:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	68fa      	ldr	r2, [r7, #12]
 800797e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	681a      	ldr	r2, [r3, #0]
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	f042 0201 	orr.w	r2, r2, #1
 800798e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2220      	movs	r2, #32
 8007994:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2200      	movs	r2, #0
 800799c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80079a0:	2300      	movs	r3, #0
 80079a2:	e000      	b.n	80079a6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80079a4:	2302      	movs	r3, #2
  }
}
 80079a6:	4618      	mov	r0, r3
 80079a8:	3714      	adds	r7, #20
 80079aa:	46bd      	mov	sp, r7
 80079ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b0:	4770      	bx	lr
	...

080079b4 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b084      	sub	sp, #16
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d101      	bne.n	80079c6 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80079c2:	2301      	movs	r3, #1
 80079c4:	e0bf      	b.n	8007b46 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80079cc:	b2db      	uxtb	r3, r3
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d106      	bne.n	80079e0 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2200      	movs	r2, #0
 80079d6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80079da:	6878      	ldr	r0, [r7, #4]
 80079dc:	f000 f8ba 	bl	8007b54 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2202      	movs	r2, #2
 80079e4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	699a      	ldr	r2, [r3, #24]
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80079f6:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	6999      	ldr	r1, [r3, #24]
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	685a      	ldr	r2, [r3, #4]
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	689b      	ldr	r3, [r3, #8]
 8007a06:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007a0c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	691b      	ldr	r3, [r3, #16]
 8007a12:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	430a      	orrs	r2, r1
 8007a1a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	6899      	ldr	r1, [r3, #8]
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681a      	ldr	r2, [r3, #0]
 8007a26:	4b4a      	ldr	r3, [pc, #296]	; (8007b50 <HAL_LTDC_Init+0x19c>)
 8007a28:	400b      	ands	r3, r1
 8007a2a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	695b      	ldr	r3, [r3, #20]
 8007a30:	041b      	lsls	r3, r3, #16
 8007a32:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	6899      	ldr	r1, [r3, #8]
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	699a      	ldr	r2, [r3, #24]
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	431a      	orrs	r2, r3
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	430a      	orrs	r2, r1
 8007a48:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	68d9      	ldr	r1, [r3, #12]
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681a      	ldr	r2, [r3, #0]
 8007a54:	4b3e      	ldr	r3, [pc, #248]	; (8007b50 <HAL_LTDC_Init+0x19c>)
 8007a56:	400b      	ands	r3, r1
 8007a58:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	69db      	ldr	r3, [r3, #28]
 8007a5e:	041b      	lsls	r3, r3, #16
 8007a60:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	68d9      	ldr	r1, [r3, #12]
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	6a1a      	ldr	r2, [r3, #32]
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	431a      	orrs	r2, r3
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	430a      	orrs	r2, r1
 8007a76:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	6919      	ldr	r1, [r3, #16]
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681a      	ldr	r2, [r3, #0]
 8007a82:	4b33      	ldr	r3, [pc, #204]	; (8007b50 <HAL_LTDC_Init+0x19c>)
 8007a84:	400b      	ands	r3, r1
 8007a86:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a8c:	041b      	lsls	r3, r3, #16
 8007a8e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	6919      	ldr	r1, [r3, #16]
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	431a      	orrs	r2, r3
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	430a      	orrs	r2, r1
 8007aa4:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	6959      	ldr	r1, [r3, #20]
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681a      	ldr	r2, [r3, #0]
 8007ab0:	4b27      	ldr	r3, [pc, #156]	; (8007b50 <HAL_LTDC_Init+0x19c>)
 8007ab2:	400b      	ands	r3, r1
 8007ab4:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007aba:	041b      	lsls	r3, r3, #16
 8007abc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	6959      	ldr	r1, [r3, #20]
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	431a      	orrs	r2, r3
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	430a      	orrs	r2, r1
 8007ad2:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007ada:	021b      	lsls	r3, r3, #8
 8007adc:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8007ae4:	041b      	lsls	r3, r3, #16
 8007ae6:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8007af6:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007afe:	68ba      	ldr	r2, [r7, #8]
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	4313      	orrs	r3, r2
 8007b04:	687a      	ldr	r2, [r7, #4]
 8007b06:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8007b0a:	431a      	orrs	r2, r3
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	430a      	orrs	r2, r1
 8007b12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	f042 0206 	orr.w	r2, r2, #6
 8007b22:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	699a      	ldr	r2, [r3, #24]
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	f042 0201 	orr.w	r2, r2, #1
 8007b32:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2200      	movs	r2, #0
 8007b38:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2201      	movs	r2, #1
 8007b40:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8007b44:	2300      	movs	r3, #0
}
 8007b46:	4618      	mov	r0, r3
 8007b48:	3710      	adds	r7, #16
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	bd80      	pop	{r7, pc}
 8007b4e:	bf00      	nop
 8007b50:	f000f800 	.word	0xf000f800

08007b54 <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 8007b54:	b480      	push	{r7}
 8007b56:	b083      	sub	sp, #12
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
 8007b5c:	bf00      	nop
 8007b5e:	370c      	adds	r7, #12
 8007b60:	46bd      	mov	sp, r7
 8007b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b66:	4770      	bx	lr

08007b68 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007b68:	b5b0      	push	{r4, r5, r7, lr}
 8007b6a:	b084      	sub	sp, #16
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	60f8      	str	r0, [r7, #12]
 8007b70:	60b9      	str	r1, [r7, #8]
 8007b72:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8007b7a:	2b01      	cmp	r3, #1
 8007b7c:	d101      	bne.n	8007b82 <HAL_LTDC_ConfigLayer+0x1a>
 8007b7e:	2302      	movs	r3, #2
 8007b80:	e02c      	b.n	8007bdc <HAL_LTDC_ConfigLayer+0x74>
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	2201      	movs	r2, #1
 8007b86:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	2202      	movs	r2, #2
 8007b8e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8007b92:	68fa      	ldr	r2, [r7, #12]
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2134      	movs	r1, #52	; 0x34
 8007b98:	fb01 f303 	mul.w	r3, r1, r3
 8007b9c:	4413      	add	r3, r2
 8007b9e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8007ba2:	68bb      	ldr	r3, [r7, #8]
 8007ba4:	4614      	mov	r4, r2
 8007ba6:	461d      	mov	r5, r3
 8007ba8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007baa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007bac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007bae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007bb0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007bb2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007bb4:	682b      	ldr	r3, [r5, #0]
 8007bb6:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8007bb8:	687a      	ldr	r2, [r7, #4]
 8007bba:	68b9      	ldr	r1, [r7, #8]
 8007bbc:	68f8      	ldr	r0, [r7, #12]
 8007bbe:	f000 f811 	bl	8007be4 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	2201      	movs	r2, #1
 8007bc8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	2201      	movs	r2, #1
 8007bce:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8007bda:	2300      	movs	r3, #0
}
 8007bdc:	4618      	mov	r0, r3
 8007bde:	3710      	adds	r7, #16
 8007be0:	46bd      	mov	sp, r7
 8007be2:	bdb0      	pop	{r4, r5, r7, pc}

08007be4 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007be4:	b480      	push	{r7}
 8007be6:	b089      	sub	sp, #36	; 0x24
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	60f8      	str	r0, [r7, #12]
 8007bec:	60b9      	str	r1, [r7, #8]
 8007bee:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8007bf0:	68bb      	ldr	r3, [r7, #8]
 8007bf2:	685a      	ldr	r2, [r3, #4]
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	68db      	ldr	r3, [r3, #12]
 8007bfa:	0c1b      	lsrs	r3, r3, #16
 8007bfc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007c00:	4413      	add	r3, r2
 8007c02:	041b      	lsls	r3, r3, #16
 8007c04:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	461a      	mov	r2, r3
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	01db      	lsls	r3, r3, #7
 8007c10:	4413      	add	r3, r2
 8007c12:	3384      	adds	r3, #132	; 0x84
 8007c14:	685b      	ldr	r3, [r3, #4]
 8007c16:	68fa      	ldr	r2, [r7, #12]
 8007c18:	6812      	ldr	r2, [r2, #0]
 8007c1a:	4611      	mov	r1, r2
 8007c1c:	687a      	ldr	r2, [r7, #4]
 8007c1e:	01d2      	lsls	r2, r2, #7
 8007c20:	440a      	add	r2, r1
 8007c22:	3284      	adds	r2, #132	; 0x84
 8007c24:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8007c28:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8007c2a:	68bb      	ldr	r3, [r7, #8]
 8007c2c:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	68db      	ldr	r3, [r3, #12]
 8007c34:	0c1b      	lsrs	r3, r3, #16
 8007c36:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8007c3a:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007c3c:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	4619      	mov	r1, r3
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	01db      	lsls	r3, r3, #7
 8007c48:	440b      	add	r3, r1
 8007c4a:	3384      	adds	r3, #132	; 0x84
 8007c4c:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007c4e:	69fb      	ldr	r3, [r7, #28]
 8007c50:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8007c52:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8007c54:	68bb      	ldr	r3, [r7, #8]
 8007c56:	68da      	ldr	r2, [r3, #12]
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	68db      	ldr	r3, [r3, #12]
 8007c5e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007c62:	4413      	add	r3, r2
 8007c64:	041b      	lsls	r3, r3, #16
 8007c66:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	461a      	mov	r2, r3
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	01db      	lsls	r3, r3, #7
 8007c72:	4413      	add	r3, r2
 8007c74:	3384      	adds	r3, #132	; 0x84
 8007c76:	689b      	ldr	r3, [r3, #8]
 8007c78:	68fa      	ldr	r2, [r7, #12]
 8007c7a:	6812      	ldr	r2, [r2, #0]
 8007c7c:	4611      	mov	r1, r2
 8007c7e:	687a      	ldr	r2, [r7, #4]
 8007c80:	01d2      	lsls	r2, r2, #7
 8007c82:	440a      	add	r2, r1
 8007c84:	3284      	adds	r2, #132	; 0x84
 8007c86:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8007c8a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8007c8c:	68bb      	ldr	r3, [r7, #8]
 8007c8e:	689a      	ldr	r2, [r3, #8]
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	68db      	ldr	r3, [r3, #12]
 8007c96:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007c9a:	4413      	add	r3, r2
 8007c9c:	1c5a      	adds	r2, r3, #1
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	4619      	mov	r1, r3
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	01db      	lsls	r3, r3, #7
 8007ca8:	440b      	add	r3, r1
 8007caa:	3384      	adds	r3, #132	; 0x84
 8007cac:	4619      	mov	r1, r3
 8007cae:	69fb      	ldr	r3, [r7, #28]
 8007cb0:	4313      	orrs	r3, r2
 8007cb2:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	461a      	mov	r2, r3
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	01db      	lsls	r3, r3, #7
 8007cbe:	4413      	add	r3, r2
 8007cc0:	3384      	adds	r3, #132	; 0x84
 8007cc2:	691b      	ldr	r3, [r3, #16]
 8007cc4:	68fa      	ldr	r2, [r7, #12]
 8007cc6:	6812      	ldr	r2, [r2, #0]
 8007cc8:	4611      	mov	r1, r2
 8007cca:	687a      	ldr	r2, [r7, #4]
 8007ccc:	01d2      	lsls	r2, r2, #7
 8007cce:	440a      	add	r2, r1
 8007cd0:	3284      	adds	r2, #132	; 0x84
 8007cd2:	f023 0307 	bic.w	r3, r3, #7
 8007cd6:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	461a      	mov	r2, r3
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	01db      	lsls	r3, r3, #7
 8007ce2:	4413      	add	r3, r2
 8007ce4:	3384      	adds	r3, #132	; 0x84
 8007ce6:	461a      	mov	r2, r3
 8007ce8:	68bb      	ldr	r3, [r7, #8]
 8007cea:	691b      	ldr	r3, [r3, #16]
 8007cec:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8007cee:	68bb      	ldr	r3, [r7, #8]
 8007cf0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007cf4:	021b      	lsls	r3, r3, #8
 8007cf6:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8007cfe:	041b      	lsls	r3, r3, #16
 8007d00:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8007d02:	68bb      	ldr	r3, [r7, #8]
 8007d04:	699b      	ldr	r3, [r3, #24]
 8007d06:	061b      	lsls	r3, r3, #24
 8007d08:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	461a      	mov	r2, r3
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	01db      	lsls	r3, r3, #7
 8007d14:	4413      	add	r3, r2
 8007d16:	3384      	adds	r3, #132	; 0x84
 8007d18:	699b      	ldr	r3, [r3, #24]
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	461a      	mov	r2, r3
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	01db      	lsls	r3, r3, #7
 8007d24:	4413      	add	r3, r2
 8007d26:	3384      	adds	r3, #132	; 0x84
 8007d28:	461a      	mov	r2, r3
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8007d2e:	68bb      	ldr	r3, [r7, #8]
 8007d30:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007d34:	461a      	mov	r2, r3
 8007d36:	69fb      	ldr	r3, [r7, #28]
 8007d38:	431a      	orrs	r2, r3
 8007d3a:	69bb      	ldr	r3, [r7, #24]
 8007d3c:	431a      	orrs	r2, r3
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	4619      	mov	r1, r3
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	01db      	lsls	r3, r3, #7
 8007d48:	440b      	add	r3, r1
 8007d4a:	3384      	adds	r3, #132	; 0x84
 8007d4c:	4619      	mov	r1, r3
 8007d4e:	697b      	ldr	r3, [r7, #20]
 8007d50:	4313      	orrs	r3, r2
 8007d52:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	461a      	mov	r2, r3
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	01db      	lsls	r3, r3, #7
 8007d5e:	4413      	add	r3, r2
 8007d60:	3384      	adds	r3, #132	; 0x84
 8007d62:	695b      	ldr	r3, [r3, #20]
 8007d64:	68fa      	ldr	r2, [r7, #12]
 8007d66:	6812      	ldr	r2, [r2, #0]
 8007d68:	4611      	mov	r1, r2
 8007d6a:	687a      	ldr	r2, [r7, #4]
 8007d6c:	01d2      	lsls	r2, r2, #7
 8007d6e:	440a      	add	r2, r1
 8007d70:	3284      	adds	r2, #132	; 0x84
 8007d72:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007d76:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	461a      	mov	r2, r3
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	01db      	lsls	r3, r3, #7
 8007d82:	4413      	add	r3, r2
 8007d84:	3384      	adds	r3, #132	; 0x84
 8007d86:	461a      	mov	r2, r3
 8007d88:	68bb      	ldr	r3, [r7, #8]
 8007d8a:	695b      	ldr	r3, [r3, #20]
 8007d8c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	461a      	mov	r2, r3
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	01db      	lsls	r3, r3, #7
 8007d98:	4413      	add	r3, r2
 8007d9a:	3384      	adds	r3, #132	; 0x84
 8007d9c:	69da      	ldr	r2, [r3, #28]
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	4619      	mov	r1, r3
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	01db      	lsls	r3, r3, #7
 8007da8:	440b      	add	r3, r1
 8007daa:	3384      	adds	r3, #132	; 0x84
 8007dac:	4619      	mov	r1, r3
 8007dae:	4b58      	ldr	r3, [pc, #352]	; (8007f10 <LTDC_SetConfig+0x32c>)
 8007db0:	4013      	ands	r3, r2
 8007db2:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8007db4:	68bb      	ldr	r3, [r7, #8]
 8007db6:	69da      	ldr	r2, [r3, #28]
 8007db8:	68bb      	ldr	r3, [r7, #8]
 8007dba:	6a1b      	ldr	r3, [r3, #32]
 8007dbc:	68f9      	ldr	r1, [r7, #12]
 8007dbe:	6809      	ldr	r1, [r1, #0]
 8007dc0:	4608      	mov	r0, r1
 8007dc2:	6879      	ldr	r1, [r7, #4]
 8007dc4:	01c9      	lsls	r1, r1, #7
 8007dc6:	4401      	add	r1, r0
 8007dc8:	3184      	adds	r1, #132	; 0x84
 8007dca:	4313      	orrs	r3, r2
 8007dcc:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	461a      	mov	r2, r3
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	01db      	lsls	r3, r3, #7
 8007dd8:	4413      	add	r3, r2
 8007dda:	3384      	adds	r3, #132	; 0x84
 8007ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	461a      	mov	r2, r3
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	01db      	lsls	r3, r3, #7
 8007de8:	4413      	add	r3, r2
 8007dea:	3384      	adds	r3, #132	; 0x84
 8007dec:	461a      	mov	r2, r3
 8007dee:	2300      	movs	r3, #0
 8007df0:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	461a      	mov	r2, r3
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	01db      	lsls	r3, r3, #7
 8007dfc:	4413      	add	r3, r2
 8007dfe:	3384      	adds	r3, #132	; 0x84
 8007e00:	461a      	mov	r2, r3
 8007e02:	68bb      	ldr	r3, [r7, #8]
 8007e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e06:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8007e08:	68bb      	ldr	r3, [r7, #8]
 8007e0a:	691b      	ldr	r3, [r3, #16]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d102      	bne.n	8007e16 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8007e10:	2304      	movs	r3, #4
 8007e12:	61fb      	str	r3, [r7, #28]
 8007e14:	e01b      	b.n	8007e4e <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8007e16:	68bb      	ldr	r3, [r7, #8]
 8007e18:	691b      	ldr	r3, [r3, #16]
 8007e1a:	2b01      	cmp	r3, #1
 8007e1c:	d102      	bne.n	8007e24 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8007e1e:	2303      	movs	r3, #3
 8007e20:	61fb      	str	r3, [r7, #28]
 8007e22:	e014      	b.n	8007e4e <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007e24:	68bb      	ldr	r3, [r7, #8]
 8007e26:	691b      	ldr	r3, [r3, #16]
 8007e28:	2b04      	cmp	r3, #4
 8007e2a:	d00b      	beq.n	8007e44 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8007e2c:	68bb      	ldr	r3, [r7, #8]
 8007e2e:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007e30:	2b02      	cmp	r3, #2
 8007e32:	d007      	beq.n	8007e44 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8007e34:	68bb      	ldr	r3, [r7, #8]
 8007e36:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8007e38:	2b03      	cmp	r3, #3
 8007e3a:	d003      	beq.n	8007e44 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8007e3c:	68bb      	ldr	r3, [r7, #8]
 8007e3e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8007e40:	2b07      	cmp	r3, #7
 8007e42:	d102      	bne.n	8007e4a <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8007e44:	2302      	movs	r3, #2
 8007e46:	61fb      	str	r3, [r7, #28]
 8007e48:	e001      	b.n	8007e4e <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8007e4a:	2301      	movs	r3, #1
 8007e4c:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	461a      	mov	r2, r3
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	01db      	lsls	r3, r3, #7
 8007e58:	4413      	add	r3, r2
 8007e5a:	3384      	adds	r3, #132	; 0x84
 8007e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e5e:	68fa      	ldr	r2, [r7, #12]
 8007e60:	6812      	ldr	r2, [r2, #0]
 8007e62:	4611      	mov	r1, r2
 8007e64:	687a      	ldr	r2, [r7, #4]
 8007e66:	01d2      	lsls	r2, r2, #7
 8007e68:	440a      	add	r2, r1
 8007e6a:	3284      	adds	r2, #132	; 0x84
 8007e6c:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8007e70:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8007e72:	68bb      	ldr	r3, [r7, #8]
 8007e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e76:	69fa      	ldr	r2, [r7, #28]
 8007e78:	fb02 f303 	mul.w	r3, r2, r3
 8007e7c:	041a      	lsls	r2, r3, #16
 8007e7e:	68bb      	ldr	r3, [r7, #8]
 8007e80:	6859      	ldr	r1, [r3, #4]
 8007e82:	68bb      	ldr	r3, [r7, #8]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	1acb      	subs	r3, r1, r3
 8007e88:	69f9      	ldr	r1, [r7, #28]
 8007e8a:	fb01 f303 	mul.w	r3, r1, r3
 8007e8e:	3307      	adds	r3, #7
 8007e90:	68f9      	ldr	r1, [r7, #12]
 8007e92:	6809      	ldr	r1, [r1, #0]
 8007e94:	4608      	mov	r0, r1
 8007e96:	6879      	ldr	r1, [r7, #4]
 8007e98:	01c9      	lsls	r1, r1, #7
 8007e9a:	4401      	add	r1, r0
 8007e9c:	3184      	adds	r1, #132	; 0x84
 8007e9e:	4313      	orrs	r3, r2
 8007ea0:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	461a      	mov	r2, r3
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	01db      	lsls	r3, r3, #7
 8007eac:	4413      	add	r3, r2
 8007eae:	3384      	adds	r3, #132	; 0x84
 8007eb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	4619      	mov	r1, r3
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	01db      	lsls	r3, r3, #7
 8007ebc:	440b      	add	r3, r1
 8007ebe:	3384      	adds	r3, #132	; 0x84
 8007ec0:	4619      	mov	r1, r3
 8007ec2:	4b14      	ldr	r3, [pc, #80]	; (8007f14 <LTDC_SetConfig+0x330>)
 8007ec4:	4013      	ands	r3, r2
 8007ec6:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	461a      	mov	r2, r3
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	01db      	lsls	r3, r3, #7
 8007ed2:	4413      	add	r3, r2
 8007ed4:	3384      	adds	r3, #132	; 0x84
 8007ed6:	461a      	mov	r2, r3
 8007ed8:	68bb      	ldr	r3, [r7, #8]
 8007eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007edc:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	461a      	mov	r2, r3
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	01db      	lsls	r3, r3, #7
 8007ee8:	4413      	add	r3, r2
 8007eea:	3384      	adds	r3, #132	; 0x84
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	68fa      	ldr	r2, [r7, #12]
 8007ef0:	6812      	ldr	r2, [r2, #0]
 8007ef2:	4611      	mov	r1, r2
 8007ef4:	687a      	ldr	r2, [r7, #4]
 8007ef6:	01d2      	lsls	r2, r2, #7
 8007ef8:	440a      	add	r2, r1
 8007efa:	3284      	adds	r2, #132	; 0x84
 8007efc:	f043 0301 	orr.w	r3, r3, #1
 8007f00:	6013      	str	r3, [r2, #0]
}
 8007f02:	bf00      	nop
 8007f04:	3724      	adds	r7, #36	; 0x24
 8007f06:	46bd      	mov	sp, r7
 8007f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0c:	4770      	bx	lr
 8007f0e:	bf00      	nop
 8007f10:	fffff8f8 	.word	0xfffff8f8
 8007f14:	fffff800 	.word	0xfffff800

08007f18 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b084      	sub	sp, #16
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007f20:	f7fc fc2a 	bl	8004778 <HAL_GetTick>
 8007f24:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d101      	bne.n	8007f30 <HAL_MDMA_Init+0x18>
  {
    return HAL_ERROR;
 8007f2c:	2301      	movs	r3, #1
 8007f2e:	e03b      	b.n	8007fa8 <HAL_MDMA_Init+0x90>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	2200      	movs	r2, #0
 8007f34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2202      	movs	r2, #2
 8007f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	68da      	ldr	r2, [r3, #12]
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	f022 0201 	bic.w	r2, r2, #1
 8007f4e:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8007f50:	e00f      	b.n	8007f72 <HAL_MDMA_Init+0x5a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 8007f52:	f7fc fc11 	bl	8004778 <HAL_GetTick>
 8007f56:	4602      	mov	r2, r0
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	1ad3      	subs	r3, r2, r3
 8007f5c:	2b05      	cmp	r3, #5
 8007f5e:	d908      	bls.n	8007f72 <HAL_MDMA_Init+0x5a>
    {
      /* Update error code */
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2240      	movs	r2, #64	; 0x40
 8007f64:	669a      	str	r2, [r3, #104]	; 0x68

      /* Change the MDMA state */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	2203      	movs	r2, #3
 8007f6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      return HAL_ERROR;
 8007f6e:	2301      	movs	r3, #1
 8007f70:	e01a      	b.n	8007fa8 <HAL_MDMA_Init+0x90>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	68db      	ldr	r3, [r3, #12]
 8007f78:	f003 0301 	and.w	r3, r3, #1
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d1e8      	bne.n	8007f52 <HAL_MDMA_Init+0x3a>
    }
  }

  /* Initialize the MDMA channel registers */
  MDMA_Init(hmdma);
 8007f80:	6878      	ldr	r0, [r7, #4]
 8007f82:	f000 f86d 	bl	8008060 <MDMA_Init>

  /* Reset the MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2200      	movs	r2, #0
 8007f8a:	65da      	str	r2, [r3, #92]	; 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2200      	movs	r2, #0
 8007f90:	661a      	str	r2, [r3, #96]	; 0x60
  hmdma->LinkedListNodeCounter  = 0;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	2200      	movs	r2, #0
 8007f96:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	669a      	str	r2, [r3, #104]	; 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_READY;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2201      	movs	r2, #1
 8007fa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007fa6:	2300      	movs	r3, #0
}
 8007fa8:	4618      	mov	r0, r3
 8007faa:	3710      	adds	r7, #16
 8007fac:	46bd      	mov	sp, r7
 8007fae:	bd80      	pop	{r7, pc}

08007fb0 <HAL_MDMA_DeInit>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_DeInit(MDMA_HandleTypeDef *hmdma)
{
 8007fb0:	b480      	push	{r7}
 8007fb2:	b083      	sub	sp, #12
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d101      	bne.n	8007fc2 <HAL_MDMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8007fbe:	2301      	movs	r3, #1
 8007fc0:	e048      	b.n	8008054 <HAL_MDMA_DeInit+0xa4>
  }

  /* Disable the selected MDMA Channelx */
  __HAL_MDMA_DISABLE(hmdma);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	68da      	ldr	r2, [r3, #12]
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	f022 0201 	bic.w	r2, r2, #1
 8007fd0:	60da      	str	r2, [r3, #12]

  /* Reset MDMA Channel control register */
  hmdma->Instance->CCR  = 0;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	60da      	str	r2, [r3, #12]
  hmdma->Instance->CTCR = 0;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	2200      	movs	r2, #0
 8007fe0:	611a      	str	r2, [r3, #16]
  hmdma->Instance->CBNDTR = 0;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	615a      	str	r2, [r3, #20]
  hmdma->Instance->CSAR = 0;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	2200      	movs	r2, #0
 8007ff0:	619a      	str	r2, [r3, #24]
  hmdma->Instance->CDAR = 0;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	61da      	str	r2, [r3, #28]
  hmdma->Instance->CBRUR = 0;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	2200      	movs	r2, #0
 8008000:	621a      	str	r2, [r3, #32]
  hmdma->Instance->CLAR = 0;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	2200      	movs	r2, #0
 8008008:	625a      	str	r2, [r3, #36]	; 0x24
  hmdma->Instance->CTBR = 0;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	2200      	movs	r2, #0
 8008010:	629a      	str	r2, [r3, #40]	; 0x28
  hmdma->Instance->CMAR = 0;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	2200      	movs	r2, #0
 8008018:	631a      	str	r2, [r3, #48]	; 0x30
  hmdma->Instance->CMDR = 0;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	2200      	movs	r2, #0
 8008020:	635a      	str	r2, [r3, #52]	; 0x34

  /* Clear all flags */
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	221f      	movs	r2, #31
 8008028:	605a      	str	r2, [r3, #4]

  /* Reset the  MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	2200      	movs	r2, #0
 800802e:	65da      	str	r2, [r3, #92]	; 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2200      	movs	r2, #0
 8008034:	661a      	str	r2, [r3, #96]	; 0x60
  hmdma->LinkedListNodeCounter  = 0;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	2200      	movs	r2, #0
 800803a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2200      	movs	r2, #0
 8008040:	669a      	str	r2, [r3, #104]	; 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_RESET;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	2200      	movs	r2, #0
 8008046:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(hmdma);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	2200      	movs	r2, #0
 800804e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008052:	2300      	movs	r3, #0
}
 8008054:	4618      	mov	r0, r3
 8008056:	370c      	adds	r7, #12
 8008058:	46bd      	mov	sp, r7
 800805a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805e:	4770      	bx	lr

08008060 <MDMA_Init>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Channel.
  * @retval None
  */
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 8008060:	b480      	push	{r7}
 8008062:	b085      	sub	sp, #20
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	68d9      	ldr	r1, [r3, #12]
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	691a      	ldr	r2, [r3, #16]
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	430a      	orrs	r2, r1
 8008076:	60da      	str	r2, [r3, #12]

  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	695a      	ldr	r2, [r3, #20]
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	699b      	ldr	r3, [r3, #24]
 8008080:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	69db      	ldr	r3, [r3, #28]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8008086:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	6a1b      	ldr	r3, [r3, #32]
 800808c:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 8008092:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008098:	431a      	orrs	r2, r3
                           hmdma->Init.DestBurst                                   | \
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 800809e:	431a      	orrs	r2, r3
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080a4:	3b01      	subs	r3, #1
 80080a6:	049b      	lsls	r3, r3, #18
                           hmdma->Init.DestBurst                                   | \
 80080a8:	ea42 0103 	orr.w	r1, r2, r3
                           hmdma->Init.TransferTriggerMode;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	689a      	ldr	r2, [r3, #8]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 80080b4:	430a      	orrs	r2, r1
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 80080b6:	611a      	str	r2, [r3, #16]

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	685b      	ldr	r3, [r3, #4]
 80080bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080c0:	d107      	bne.n	80080d2 <MDMA_Init+0x72>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	691a      	ldr	r2, [r3, #16]
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 80080d0:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	2200      	movs	r2, #0
 80080d8:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080de:	2b00      	cmp	r3, #0
 80080e0:	da11      	bge.n	8008106 <MDMA_Init+0xa6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	695a      	ldr	r2, [r3, #20]
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80080f0:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080f6:	425b      	negs	r3, r3
 80080f8:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	68fa      	ldr	r2, [r7, #12]
 8008100:	b292      	uxth	r2, r2
 8008102:	621a      	str	r2, [r3, #32]
 8008104:	e006      	b.n	8008114 <MDMA_Init+0xb4>
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800810a:	461a      	mov	r2, r3
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	b292      	uxth	r2, r2
 8008112:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008118:	2b00      	cmp	r3, #0
 800811a:	da15      	bge.n	8008148 <MDMA_Init+0xe8>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	695a      	ldr	r2, [r3, #20]
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800812a:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008130:	425b      	negs	r3, r3
 8008132:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	6a19      	ldr	r1, [r3, #32]
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	041a      	lsls	r2, r3, #16
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	430a      	orrs	r2, r1
 8008144:	621a      	str	r2, [r3, #32]
 8008146:	e009      	b.n	800815c <MDMA_Init+0xfc>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	6a19      	ldr	r1, [r3, #32]
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008152:	041a      	lsls	r2, r3, #16
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	430a      	orrs	r2, r1
 800815a:	621a      	str	r2, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	685b      	ldr	r3, [r3, #4]
 8008160:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008164:	d006      	beq.n	8008174 <MDMA_Init+0x114>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	685a      	ldr	r2, [r3, #4]
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	b2d2      	uxtb	r2, r2
 8008170:	629a      	str	r2, [r3, #40]	; 0x28
 8008172:	e003      	b.n	800817c <MDMA_Init+0x11c>
  }
  else /* SW request : reset the CTBR register */
  {
    hmdma->Instance->CTBR = 0;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	2200      	movs	r2, #0
 800817a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	2200      	movs	r2, #0
 8008182:	625a      	str	r2, [r3, #36]	; 0x24
}
 8008184:	bf00      	nop
 8008186:	3714      	adds	r7, #20
 8008188:	46bd      	mov	sp, r7
 800818a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818e:	4770      	bx	lr

08008190 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008190:	b580      	push	{r7, lr}
 8008192:	b084      	sub	sp, #16
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008198:	4b19      	ldr	r3, [pc, #100]	; (8008200 <HAL_PWREx_ConfigSupply+0x70>)
 800819a:	68db      	ldr	r3, [r3, #12]
 800819c:	f003 0304 	and.w	r3, r3, #4
 80081a0:	2b04      	cmp	r3, #4
 80081a2:	d00a      	beq.n	80081ba <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80081a4:	4b16      	ldr	r3, [pc, #88]	; (8008200 <HAL_PWREx_ConfigSupply+0x70>)
 80081a6:	68db      	ldr	r3, [r3, #12]
 80081a8:	f003 0307 	and.w	r3, r3, #7
 80081ac:	687a      	ldr	r2, [r7, #4]
 80081ae:	429a      	cmp	r2, r3
 80081b0:	d001      	beq.n	80081b6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80081b2:	2301      	movs	r3, #1
 80081b4:	e01f      	b.n	80081f6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80081b6:	2300      	movs	r3, #0
 80081b8:	e01d      	b.n	80081f6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80081ba:	4b11      	ldr	r3, [pc, #68]	; (8008200 <HAL_PWREx_ConfigSupply+0x70>)
 80081bc:	68db      	ldr	r3, [r3, #12]
 80081be:	f023 0207 	bic.w	r2, r3, #7
 80081c2:	490f      	ldr	r1, [pc, #60]	; (8008200 <HAL_PWREx_ConfigSupply+0x70>)
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	4313      	orrs	r3, r2
 80081c8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80081ca:	f7fc fad5 	bl	8004778 <HAL_GetTick>
 80081ce:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80081d0:	e009      	b.n	80081e6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80081d2:	f7fc fad1 	bl	8004778 <HAL_GetTick>
 80081d6:	4602      	mov	r2, r0
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	1ad3      	subs	r3, r2, r3
 80081dc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80081e0:	d901      	bls.n	80081e6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80081e2:	2301      	movs	r3, #1
 80081e4:	e007      	b.n	80081f6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80081e6:	4b06      	ldr	r3, [pc, #24]	; (8008200 <HAL_PWREx_ConfigSupply+0x70>)
 80081e8:	685b      	ldr	r3, [r3, #4]
 80081ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80081ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80081f2:	d1ee      	bne.n	80081d2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80081f4:	2300      	movs	r3, #0
}
 80081f6:	4618      	mov	r0, r3
 80081f8:	3710      	adds	r7, #16
 80081fa:	46bd      	mov	sp, r7
 80081fc:	bd80      	pop	{r7, pc}
 80081fe:	bf00      	nop
 8008200:	58024800 	.word	0x58024800

08008204 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008204:	b580      	push	{r7, lr}
 8008206:	b08c      	sub	sp, #48	; 0x30
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d102      	bne.n	8008218 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8008212:	2301      	movs	r3, #1
 8008214:	f000 bc48 	b.w	8008aa8 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	f003 0301 	and.w	r3, r3, #1
 8008220:	2b00      	cmp	r3, #0
 8008222:	f000 8088 	beq.w	8008336 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008226:	4b99      	ldr	r3, [pc, #612]	; (800848c <HAL_RCC_OscConfig+0x288>)
 8008228:	691b      	ldr	r3, [r3, #16]
 800822a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800822e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008230:	4b96      	ldr	r3, [pc, #600]	; (800848c <HAL_RCC_OscConfig+0x288>)
 8008232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008234:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008238:	2b10      	cmp	r3, #16
 800823a:	d007      	beq.n	800824c <HAL_RCC_OscConfig+0x48>
 800823c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800823e:	2b18      	cmp	r3, #24
 8008240:	d111      	bne.n	8008266 <HAL_RCC_OscConfig+0x62>
 8008242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008244:	f003 0303 	and.w	r3, r3, #3
 8008248:	2b02      	cmp	r3, #2
 800824a:	d10c      	bne.n	8008266 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800824c:	4b8f      	ldr	r3, [pc, #572]	; (800848c <HAL_RCC_OscConfig+0x288>)
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008254:	2b00      	cmp	r3, #0
 8008256:	d06d      	beq.n	8008334 <HAL_RCC_OscConfig+0x130>
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	685b      	ldr	r3, [r3, #4]
 800825c:	2b00      	cmp	r3, #0
 800825e:	d169      	bne.n	8008334 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8008260:	2301      	movs	r3, #1
 8008262:	f000 bc21 	b.w	8008aa8 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	685b      	ldr	r3, [r3, #4]
 800826a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800826e:	d106      	bne.n	800827e <HAL_RCC_OscConfig+0x7a>
 8008270:	4b86      	ldr	r3, [pc, #536]	; (800848c <HAL_RCC_OscConfig+0x288>)
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	4a85      	ldr	r2, [pc, #532]	; (800848c <HAL_RCC_OscConfig+0x288>)
 8008276:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800827a:	6013      	str	r3, [r2, #0]
 800827c:	e02e      	b.n	80082dc <HAL_RCC_OscConfig+0xd8>
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	685b      	ldr	r3, [r3, #4]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d10c      	bne.n	80082a0 <HAL_RCC_OscConfig+0x9c>
 8008286:	4b81      	ldr	r3, [pc, #516]	; (800848c <HAL_RCC_OscConfig+0x288>)
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	4a80      	ldr	r2, [pc, #512]	; (800848c <HAL_RCC_OscConfig+0x288>)
 800828c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008290:	6013      	str	r3, [r2, #0]
 8008292:	4b7e      	ldr	r3, [pc, #504]	; (800848c <HAL_RCC_OscConfig+0x288>)
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	4a7d      	ldr	r2, [pc, #500]	; (800848c <HAL_RCC_OscConfig+0x288>)
 8008298:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800829c:	6013      	str	r3, [r2, #0]
 800829e:	e01d      	b.n	80082dc <HAL_RCC_OscConfig+0xd8>
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	685b      	ldr	r3, [r3, #4]
 80082a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80082a8:	d10c      	bne.n	80082c4 <HAL_RCC_OscConfig+0xc0>
 80082aa:	4b78      	ldr	r3, [pc, #480]	; (800848c <HAL_RCC_OscConfig+0x288>)
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	4a77      	ldr	r2, [pc, #476]	; (800848c <HAL_RCC_OscConfig+0x288>)
 80082b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80082b4:	6013      	str	r3, [r2, #0]
 80082b6:	4b75      	ldr	r3, [pc, #468]	; (800848c <HAL_RCC_OscConfig+0x288>)
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	4a74      	ldr	r2, [pc, #464]	; (800848c <HAL_RCC_OscConfig+0x288>)
 80082bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80082c0:	6013      	str	r3, [r2, #0]
 80082c2:	e00b      	b.n	80082dc <HAL_RCC_OscConfig+0xd8>
 80082c4:	4b71      	ldr	r3, [pc, #452]	; (800848c <HAL_RCC_OscConfig+0x288>)
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	4a70      	ldr	r2, [pc, #448]	; (800848c <HAL_RCC_OscConfig+0x288>)
 80082ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80082ce:	6013      	str	r3, [r2, #0]
 80082d0:	4b6e      	ldr	r3, [pc, #440]	; (800848c <HAL_RCC_OscConfig+0x288>)
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	4a6d      	ldr	r2, [pc, #436]	; (800848c <HAL_RCC_OscConfig+0x288>)
 80082d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80082da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	685b      	ldr	r3, [r3, #4]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d013      	beq.n	800830c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082e4:	f7fc fa48 	bl	8004778 <HAL_GetTick>
 80082e8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80082ea:	e008      	b.n	80082fe <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80082ec:	f7fc fa44 	bl	8004778 <HAL_GetTick>
 80082f0:	4602      	mov	r2, r0
 80082f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082f4:	1ad3      	subs	r3, r2, r3
 80082f6:	2b64      	cmp	r3, #100	; 0x64
 80082f8:	d901      	bls.n	80082fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80082fa:	2303      	movs	r3, #3
 80082fc:	e3d4      	b.n	8008aa8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80082fe:	4b63      	ldr	r3, [pc, #396]	; (800848c <HAL_RCC_OscConfig+0x288>)
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008306:	2b00      	cmp	r3, #0
 8008308:	d0f0      	beq.n	80082ec <HAL_RCC_OscConfig+0xe8>
 800830a:	e014      	b.n	8008336 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800830c:	f7fc fa34 	bl	8004778 <HAL_GetTick>
 8008310:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008312:	e008      	b.n	8008326 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008314:	f7fc fa30 	bl	8004778 <HAL_GetTick>
 8008318:	4602      	mov	r2, r0
 800831a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800831c:	1ad3      	subs	r3, r2, r3
 800831e:	2b64      	cmp	r3, #100	; 0x64
 8008320:	d901      	bls.n	8008326 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8008322:	2303      	movs	r3, #3
 8008324:	e3c0      	b.n	8008aa8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008326:	4b59      	ldr	r3, [pc, #356]	; (800848c <HAL_RCC_OscConfig+0x288>)
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800832e:	2b00      	cmp	r3, #0
 8008330:	d1f0      	bne.n	8008314 <HAL_RCC_OscConfig+0x110>
 8008332:	e000      	b.n	8008336 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008334:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	f003 0302 	and.w	r3, r3, #2
 800833e:	2b00      	cmp	r3, #0
 8008340:	f000 80ca 	beq.w	80084d8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008344:	4b51      	ldr	r3, [pc, #324]	; (800848c <HAL_RCC_OscConfig+0x288>)
 8008346:	691b      	ldr	r3, [r3, #16]
 8008348:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800834c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800834e:	4b4f      	ldr	r3, [pc, #316]	; (800848c <HAL_RCC_OscConfig+0x288>)
 8008350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008352:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008354:	6a3b      	ldr	r3, [r7, #32]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d007      	beq.n	800836a <HAL_RCC_OscConfig+0x166>
 800835a:	6a3b      	ldr	r3, [r7, #32]
 800835c:	2b18      	cmp	r3, #24
 800835e:	d156      	bne.n	800840e <HAL_RCC_OscConfig+0x20a>
 8008360:	69fb      	ldr	r3, [r7, #28]
 8008362:	f003 0303 	and.w	r3, r3, #3
 8008366:	2b00      	cmp	r3, #0
 8008368:	d151      	bne.n	800840e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800836a:	4b48      	ldr	r3, [pc, #288]	; (800848c <HAL_RCC_OscConfig+0x288>)
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	f003 0304 	and.w	r3, r3, #4
 8008372:	2b00      	cmp	r3, #0
 8008374:	d005      	beq.n	8008382 <HAL_RCC_OscConfig+0x17e>
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	68db      	ldr	r3, [r3, #12]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d101      	bne.n	8008382 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800837e:	2301      	movs	r3, #1
 8008380:	e392      	b.n	8008aa8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008382:	4b42      	ldr	r3, [pc, #264]	; (800848c <HAL_RCC_OscConfig+0x288>)
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	f023 0219 	bic.w	r2, r3, #25
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	68db      	ldr	r3, [r3, #12]
 800838e:	493f      	ldr	r1, [pc, #252]	; (800848c <HAL_RCC_OscConfig+0x288>)
 8008390:	4313      	orrs	r3, r2
 8008392:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008394:	f7fc f9f0 	bl	8004778 <HAL_GetTick>
 8008398:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800839a:	e008      	b.n	80083ae <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800839c:	f7fc f9ec 	bl	8004778 <HAL_GetTick>
 80083a0:	4602      	mov	r2, r0
 80083a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083a4:	1ad3      	subs	r3, r2, r3
 80083a6:	2b02      	cmp	r3, #2
 80083a8:	d901      	bls.n	80083ae <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80083aa:	2303      	movs	r3, #3
 80083ac:	e37c      	b.n	8008aa8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80083ae:	4b37      	ldr	r3, [pc, #220]	; (800848c <HAL_RCC_OscConfig+0x288>)
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	f003 0304 	and.w	r3, r3, #4
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d0f0      	beq.n	800839c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80083ba:	f7fc fa0d 	bl	80047d8 <HAL_GetREVID>
 80083be:	4603      	mov	r3, r0
 80083c0:	f241 0203 	movw	r2, #4099	; 0x1003
 80083c4:	4293      	cmp	r3, r2
 80083c6:	d817      	bhi.n	80083f8 <HAL_RCC_OscConfig+0x1f4>
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	691b      	ldr	r3, [r3, #16]
 80083cc:	2b40      	cmp	r3, #64	; 0x40
 80083ce:	d108      	bne.n	80083e2 <HAL_RCC_OscConfig+0x1de>
 80083d0:	4b2e      	ldr	r3, [pc, #184]	; (800848c <HAL_RCC_OscConfig+0x288>)
 80083d2:	685b      	ldr	r3, [r3, #4]
 80083d4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80083d8:	4a2c      	ldr	r2, [pc, #176]	; (800848c <HAL_RCC_OscConfig+0x288>)
 80083da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80083de:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80083e0:	e07a      	b.n	80084d8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80083e2:	4b2a      	ldr	r3, [pc, #168]	; (800848c <HAL_RCC_OscConfig+0x288>)
 80083e4:	685b      	ldr	r3, [r3, #4]
 80083e6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	691b      	ldr	r3, [r3, #16]
 80083ee:	031b      	lsls	r3, r3, #12
 80083f0:	4926      	ldr	r1, [pc, #152]	; (800848c <HAL_RCC_OscConfig+0x288>)
 80083f2:	4313      	orrs	r3, r2
 80083f4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80083f6:	e06f      	b.n	80084d8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80083f8:	4b24      	ldr	r3, [pc, #144]	; (800848c <HAL_RCC_OscConfig+0x288>)
 80083fa:	685b      	ldr	r3, [r3, #4]
 80083fc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	691b      	ldr	r3, [r3, #16]
 8008404:	061b      	lsls	r3, r3, #24
 8008406:	4921      	ldr	r1, [pc, #132]	; (800848c <HAL_RCC_OscConfig+0x288>)
 8008408:	4313      	orrs	r3, r2
 800840a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800840c:	e064      	b.n	80084d8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	68db      	ldr	r3, [r3, #12]
 8008412:	2b00      	cmp	r3, #0
 8008414:	d047      	beq.n	80084a6 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008416:	4b1d      	ldr	r3, [pc, #116]	; (800848c <HAL_RCC_OscConfig+0x288>)
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	f023 0219 	bic.w	r2, r3, #25
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	68db      	ldr	r3, [r3, #12]
 8008422:	491a      	ldr	r1, [pc, #104]	; (800848c <HAL_RCC_OscConfig+0x288>)
 8008424:	4313      	orrs	r3, r2
 8008426:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008428:	f7fc f9a6 	bl	8004778 <HAL_GetTick>
 800842c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800842e:	e008      	b.n	8008442 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008430:	f7fc f9a2 	bl	8004778 <HAL_GetTick>
 8008434:	4602      	mov	r2, r0
 8008436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008438:	1ad3      	subs	r3, r2, r3
 800843a:	2b02      	cmp	r3, #2
 800843c:	d901      	bls.n	8008442 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800843e:	2303      	movs	r3, #3
 8008440:	e332      	b.n	8008aa8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008442:	4b12      	ldr	r3, [pc, #72]	; (800848c <HAL_RCC_OscConfig+0x288>)
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	f003 0304 	and.w	r3, r3, #4
 800844a:	2b00      	cmp	r3, #0
 800844c:	d0f0      	beq.n	8008430 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800844e:	f7fc f9c3 	bl	80047d8 <HAL_GetREVID>
 8008452:	4603      	mov	r3, r0
 8008454:	f241 0203 	movw	r2, #4099	; 0x1003
 8008458:	4293      	cmp	r3, r2
 800845a:	d819      	bhi.n	8008490 <HAL_RCC_OscConfig+0x28c>
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	691b      	ldr	r3, [r3, #16]
 8008460:	2b40      	cmp	r3, #64	; 0x40
 8008462:	d108      	bne.n	8008476 <HAL_RCC_OscConfig+0x272>
 8008464:	4b09      	ldr	r3, [pc, #36]	; (800848c <HAL_RCC_OscConfig+0x288>)
 8008466:	685b      	ldr	r3, [r3, #4]
 8008468:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800846c:	4a07      	ldr	r2, [pc, #28]	; (800848c <HAL_RCC_OscConfig+0x288>)
 800846e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008472:	6053      	str	r3, [r2, #4]
 8008474:	e030      	b.n	80084d8 <HAL_RCC_OscConfig+0x2d4>
 8008476:	4b05      	ldr	r3, [pc, #20]	; (800848c <HAL_RCC_OscConfig+0x288>)
 8008478:	685b      	ldr	r3, [r3, #4]
 800847a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	691b      	ldr	r3, [r3, #16]
 8008482:	031b      	lsls	r3, r3, #12
 8008484:	4901      	ldr	r1, [pc, #4]	; (800848c <HAL_RCC_OscConfig+0x288>)
 8008486:	4313      	orrs	r3, r2
 8008488:	604b      	str	r3, [r1, #4]
 800848a:	e025      	b.n	80084d8 <HAL_RCC_OscConfig+0x2d4>
 800848c:	58024400 	.word	0x58024400
 8008490:	4b9a      	ldr	r3, [pc, #616]	; (80086fc <HAL_RCC_OscConfig+0x4f8>)
 8008492:	685b      	ldr	r3, [r3, #4]
 8008494:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	691b      	ldr	r3, [r3, #16]
 800849c:	061b      	lsls	r3, r3, #24
 800849e:	4997      	ldr	r1, [pc, #604]	; (80086fc <HAL_RCC_OscConfig+0x4f8>)
 80084a0:	4313      	orrs	r3, r2
 80084a2:	604b      	str	r3, [r1, #4]
 80084a4:	e018      	b.n	80084d8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80084a6:	4b95      	ldr	r3, [pc, #596]	; (80086fc <HAL_RCC_OscConfig+0x4f8>)
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	4a94      	ldr	r2, [pc, #592]	; (80086fc <HAL_RCC_OscConfig+0x4f8>)
 80084ac:	f023 0301 	bic.w	r3, r3, #1
 80084b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084b2:	f7fc f961 	bl	8004778 <HAL_GetTick>
 80084b6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80084b8:	e008      	b.n	80084cc <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80084ba:	f7fc f95d 	bl	8004778 <HAL_GetTick>
 80084be:	4602      	mov	r2, r0
 80084c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084c2:	1ad3      	subs	r3, r2, r3
 80084c4:	2b02      	cmp	r3, #2
 80084c6:	d901      	bls.n	80084cc <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80084c8:	2303      	movs	r3, #3
 80084ca:	e2ed      	b.n	8008aa8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80084cc:	4b8b      	ldr	r3, [pc, #556]	; (80086fc <HAL_RCC_OscConfig+0x4f8>)
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	f003 0304 	and.w	r3, r3, #4
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d1f0      	bne.n	80084ba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	f003 0310 	and.w	r3, r3, #16
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	f000 80a9 	beq.w	8008638 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80084e6:	4b85      	ldr	r3, [pc, #532]	; (80086fc <HAL_RCC_OscConfig+0x4f8>)
 80084e8:	691b      	ldr	r3, [r3, #16]
 80084ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80084ee:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80084f0:	4b82      	ldr	r3, [pc, #520]	; (80086fc <HAL_RCC_OscConfig+0x4f8>)
 80084f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084f4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80084f6:	69bb      	ldr	r3, [r7, #24]
 80084f8:	2b08      	cmp	r3, #8
 80084fa:	d007      	beq.n	800850c <HAL_RCC_OscConfig+0x308>
 80084fc:	69bb      	ldr	r3, [r7, #24]
 80084fe:	2b18      	cmp	r3, #24
 8008500:	d13a      	bne.n	8008578 <HAL_RCC_OscConfig+0x374>
 8008502:	697b      	ldr	r3, [r7, #20]
 8008504:	f003 0303 	and.w	r3, r3, #3
 8008508:	2b01      	cmp	r3, #1
 800850a:	d135      	bne.n	8008578 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800850c:	4b7b      	ldr	r3, [pc, #492]	; (80086fc <HAL_RCC_OscConfig+0x4f8>)
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008514:	2b00      	cmp	r3, #0
 8008516:	d005      	beq.n	8008524 <HAL_RCC_OscConfig+0x320>
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	69db      	ldr	r3, [r3, #28]
 800851c:	2b80      	cmp	r3, #128	; 0x80
 800851e:	d001      	beq.n	8008524 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8008520:	2301      	movs	r3, #1
 8008522:	e2c1      	b.n	8008aa8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008524:	f7fc f958 	bl	80047d8 <HAL_GetREVID>
 8008528:	4603      	mov	r3, r0
 800852a:	f241 0203 	movw	r2, #4099	; 0x1003
 800852e:	4293      	cmp	r3, r2
 8008530:	d817      	bhi.n	8008562 <HAL_RCC_OscConfig+0x35e>
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	6a1b      	ldr	r3, [r3, #32]
 8008536:	2b20      	cmp	r3, #32
 8008538:	d108      	bne.n	800854c <HAL_RCC_OscConfig+0x348>
 800853a:	4b70      	ldr	r3, [pc, #448]	; (80086fc <HAL_RCC_OscConfig+0x4f8>)
 800853c:	685b      	ldr	r3, [r3, #4]
 800853e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008542:	4a6e      	ldr	r2, [pc, #440]	; (80086fc <HAL_RCC_OscConfig+0x4f8>)
 8008544:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008548:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800854a:	e075      	b.n	8008638 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800854c:	4b6b      	ldr	r3, [pc, #428]	; (80086fc <HAL_RCC_OscConfig+0x4f8>)
 800854e:	685b      	ldr	r3, [r3, #4]
 8008550:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	6a1b      	ldr	r3, [r3, #32]
 8008558:	069b      	lsls	r3, r3, #26
 800855a:	4968      	ldr	r1, [pc, #416]	; (80086fc <HAL_RCC_OscConfig+0x4f8>)
 800855c:	4313      	orrs	r3, r2
 800855e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008560:	e06a      	b.n	8008638 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008562:	4b66      	ldr	r3, [pc, #408]	; (80086fc <HAL_RCC_OscConfig+0x4f8>)
 8008564:	68db      	ldr	r3, [r3, #12]
 8008566:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	6a1b      	ldr	r3, [r3, #32]
 800856e:	061b      	lsls	r3, r3, #24
 8008570:	4962      	ldr	r1, [pc, #392]	; (80086fc <HAL_RCC_OscConfig+0x4f8>)
 8008572:	4313      	orrs	r3, r2
 8008574:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008576:	e05f      	b.n	8008638 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	69db      	ldr	r3, [r3, #28]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d042      	beq.n	8008606 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008580:	4b5e      	ldr	r3, [pc, #376]	; (80086fc <HAL_RCC_OscConfig+0x4f8>)
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	4a5d      	ldr	r2, [pc, #372]	; (80086fc <HAL_RCC_OscConfig+0x4f8>)
 8008586:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800858a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800858c:	f7fc f8f4 	bl	8004778 <HAL_GetTick>
 8008590:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008592:	e008      	b.n	80085a6 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008594:	f7fc f8f0 	bl	8004778 <HAL_GetTick>
 8008598:	4602      	mov	r2, r0
 800859a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800859c:	1ad3      	subs	r3, r2, r3
 800859e:	2b02      	cmp	r3, #2
 80085a0:	d901      	bls.n	80085a6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80085a2:	2303      	movs	r3, #3
 80085a4:	e280      	b.n	8008aa8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80085a6:	4b55      	ldr	r3, [pc, #340]	; (80086fc <HAL_RCC_OscConfig+0x4f8>)
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d0f0      	beq.n	8008594 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80085b2:	f7fc f911 	bl	80047d8 <HAL_GetREVID>
 80085b6:	4603      	mov	r3, r0
 80085b8:	f241 0203 	movw	r2, #4099	; 0x1003
 80085bc:	4293      	cmp	r3, r2
 80085be:	d817      	bhi.n	80085f0 <HAL_RCC_OscConfig+0x3ec>
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	6a1b      	ldr	r3, [r3, #32]
 80085c4:	2b20      	cmp	r3, #32
 80085c6:	d108      	bne.n	80085da <HAL_RCC_OscConfig+0x3d6>
 80085c8:	4b4c      	ldr	r3, [pc, #304]	; (80086fc <HAL_RCC_OscConfig+0x4f8>)
 80085ca:	685b      	ldr	r3, [r3, #4]
 80085cc:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80085d0:	4a4a      	ldr	r2, [pc, #296]	; (80086fc <HAL_RCC_OscConfig+0x4f8>)
 80085d2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80085d6:	6053      	str	r3, [r2, #4]
 80085d8:	e02e      	b.n	8008638 <HAL_RCC_OscConfig+0x434>
 80085da:	4b48      	ldr	r3, [pc, #288]	; (80086fc <HAL_RCC_OscConfig+0x4f8>)
 80085dc:	685b      	ldr	r3, [r3, #4]
 80085de:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	6a1b      	ldr	r3, [r3, #32]
 80085e6:	069b      	lsls	r3, r3, #26
 80085e8:	4944      	ldr	r1, [pc, #272]	; (80086fc <HAL_RCC_OscConfig+0x4f8>)
 80085ea:	4313      	orrs	r3, r2
 80085ec:	604b      	str	r3, [r1, #4]
 80085ee:	e023      	b.n	8008638 <HAL_RCC_OscConfig+0x434>
 80085f0:	4b42      	ldr	r3, [pc, #264]	; (80086fc <HAL_RCC_OscConfig+0x4f8>)
 80085f2:	68db      	ldr	r3, [r3, #12]
 80085f4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	6a1b      	ldr	r3, [r3, #32]
 80085fc:	061b      	lsls	r3, r3, #24
 80085fe:	493f      	ldr	r1, [pc, #252]	; (80086fc <HAL_RCC_OscConfig+0x4f8>)
 8008600:	4313      	orrs	r3, r2
 8008602:	60cb      	str	r3, [r1, #12]
 8008604:	e018      	b.n	8008638 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8008606:	4b3d      	ldr	r3, [pc, #244]	; (80086fc <HAL_RCC_OscConfig+0x4f8>)
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	4a3c      	ldr	r2, [pc, #240]	; (80086fc <HAL_RCC_OscConfig+0x4f8>)
 800860c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008610:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008612:	f7fc f8b1 	bl	8004778 <HAL_GetTick>
 8008616:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008618:	e008      	b.n	800862c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800861a:	f7fc f8ad 	bl	8004778 <HAL_GetTick>
 800861e:	4602      	mov	r2, r0
 8008620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008622:	1ad3      	subs	r3, r2, r3
 8008624:	2b02      	cmp	r3, #2
 8008626:	d901      	bls.n	800862c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008628:	2303      	movs	r3, #3
 800862a:	e23d      	b.n	8008aa8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800862c:	4b33      	ldr	r3, [pc, #204]	; (80086fc <HAL_RCC_OscConfig+0x4f8>)
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008634:	2b00      	cmp	r3, #0
 8008636:	d1f0      	bne.n	800861a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	f003 0308 	and.w	r3, r3, #8
 8008640:	2b00      	cmp	r3, #0
 8008642:	d036      	beq.n	80086b2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	695b      	ldr	r3, [r3, #20]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d019      	beq.n	8008680 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800864c:	4b2b      	ldr	r3, [pc, #172]	; (80086fc <HAL_RCC_OscConfig+0x4f8>)
 800864e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008650:	4a2a      	ldr	r2, [pc, #168]	; (80086fc <HAL_RCC_OscConfig+0x4f8>)
 8008652:	f043 0301 	orr.w	r3, r3, #1
 8008656:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008658:	f7fc f88e 	bl	8004778 <HAL_GetTick>
 800865c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800865e:	e008      	b.n	8008672 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008660:	f7fc f88a 	bl	8004778 <HAL_GetTick>
 8008664:	4602      	mov	r2, r0
 8008666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008668:	1ad3      	subs	r3, r2, r3
 800866a:	2b02      	cmp	r3, #2
 800866c:	d901      	bls.n	8008672 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800866e:	2303      	movs	r3, #3
 8008670:	e21a      	b.n	8008aa8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008672:	4b22      	ldr	r3, [pc, #136]	; (80086fc <HAL_RCC_OscConfig+0x4f8>)
 8008674:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008676:	f003 0302 	and.w	r3, r3, #2
 800867a:	2b00      	cmp	r3, #0
 800867c:	d0f0      	beq.n	8008660 <HAL_RCC_OscConfig+0x45c>
 800867e:	e018      	b.n	80086b2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008680:	4b1e      	ldr	r3, [pc, #120]	; (80086fc <HAL_RCC_OscConfig+0x4f8>)
 8008682:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008684:	4a1d      	ldr	r2, [pc, #116]	; (80086fc <HAL_RCC_OscConfig+0x4f8>)
 8008686:	f023 0301 	bic.w	r3, r3, #1
 800868a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800868c:	f7fc f874 	bl	8004778 <HAL_GetTick>
 8008690:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008692:	e008      	b.n	80086a6 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008694:	f7fc f870 	bl	8004778 <HAL_GetTick>
 8008698:	4602      	mov	r2, r0
 800869a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800869c:	1ad3      	subs	r3, r2, r3
 800869e:	2b02      	cmp	r3, #2
 80086a0:	d901      	bls.n	80086a6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80086a2:	2303      	movs	r3, #3
 80086a4:	e200      	b.n	8008aa8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80086a6:	4b15      	ldr	r3, [pc, #84]	; (80086fc <HAL_RCC_OscConfig+0x4f8>)
 80086a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80086aa:	f003 0302 	and.w	r3, r3, #2
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d1f0      	bne.n	8008694 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	f003 0320 	and.w	r3, r3, #32
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d039      	beq.n	8008732 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	699b      	ldr	r3, [r3, #24]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d01c      	beq.n	8008700 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80086c6:	4b0d      	ldr	r3, [pc, #52]	; (80086fc <HAL_RCC_OscConfig+0x4f8>)
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	4a0c      	ldr	r2, [pc, #48]	; (80086fc <HAL_RCC_OscConfig+0x4f8>)
 80086cc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80086d0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80086d2:	f7fc f851 	bl	8004778 <HAL_GetTick>
 80086d6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80086d8:	e008      	b.n	80086ec <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80086da:	f7fc f84d 	bl	8004778 <HAL_GetTick>
 80086de:	4602      	mov	r2, r0
 80086e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086e2:	1ad3      	subs	r3, r2, r3
 80086e4:	2b02      	cmp	r3, #2
 80086e6:	d901      	bls.n	80086ec <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80086e8:	2303      	movs	r3, #3
 80086ea:	e1dd      	b.n	8008aa8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80086ec:	4b03      	ldr	r3, [pc, #12]	; (80086fc <HAL_RCC_OscConfig+0x4f8>)
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d0f0      	beq.n	80086da <HAL_RCC_OscConfig+0x4d6>
 80086f8:	e01b      	b.n	8008732 <HAL_RCC_OscConfig+0x52e>
 80086fa:	bf00      	nop
 80086fc:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008700:	4b9b      	ldr	r3, [pc, #620]	; (8008970 <HAL_RCC_OscConfig+0x76c>)
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	4a9a      	ldr	r2, [pc, #616]	; (8008970 <HAL_RCC_OscConfig+0x76c>)
 8008706:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800870a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800870c:	f7fc f834 	bl	8004778 <HAL_GetTick>
 8008710:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008712:	e008      	b.n	8008726 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008714:	f7fc f830 	bl	8004778 <HAL_GetTick>
 8008718:	4602      	mov	r2, r0
 800871a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800871c:	1ad3      	subs	r3, r2, r3
 800871e:	2b02      	cmp	r3, #2
 8008720:	d901      	bls.n	8008726 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8008722:	2303      	movs	r3, #3
 8008724:	e1c0      	b.n	8008aa8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008726:	4b92      	ldr	r3, [pc, #584]	; (8008970 <HAL_RCC_OscConfig+0x76c>)
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800872e:	2b00      	cmp	r3, #0
 8008730:	d1f0      	bne.n	8008714 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	f003 0304 	and.w	r3, r3, #4
 800873a:	2b00      	cmp	r3, #0
 800873c:	f000 8081 	beq.w	8008842 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008740:	4b8c      	ldr	r3, [pc, #560]	; (8008974 <HAL_RCC_OscConfig+0x770>)
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	4a8b      	ldr	r2, [pc, #556]	; (8008974 <HAL_RCC_OscConfig+0x770>)
 8008746:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800874a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800874c:	f7fc f814 	bl	8004778 <HAL_GetTick>
 8008750:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008752:	e008      	b.n	8008766 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008754:	f7fc f810 	bl	8004778 <HAL_GetTick>
 8008758:	4602      	mov	r2, r0
 800875a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800875c:	1ad3      	subs	r3, r2, r3
 800875e:	2b64      	cmp	r3, #100	; 0x64
 8008760:	d901      	bls.n	8008766 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8008762:	2303      	movs	r3, #3
 8008764:	e1a0      	b.n	8008aa8 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008766:	4b83      	ldr	r3, [pc, #524]	; (8008974 <HAL_RCC_OscConfig+0x770>)
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800876e:	2b00      	cmp	r3, #0
 8008770:	d0f0      	beq.n	8008754 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	689b      	ldr	r3, [r3, #8]
 8008776:	2b01      	cmp	r3, #1
 8008778:	d106      	bne.n	8008788 <HAL_RCC_OscConfig+0x584>
 800877a:	4b7d      	ldr	r3, [pc, #500]	; (8008970 <HAL_RCC_OscConfig+0x76c>)
 800877c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800877e:	4a7c      	ldr	r2, [pc, #496]	; (8008970 <HAL_RCC_OscConfig+0x76c>)
 8008780:	f043 0301 	orr.w	r3, r3, #1
 8008784:	6713      	str	r3, [r2, #112]	; 0x70
 8008786:	e02d      	b.n	80087e4 <HAL_RCC_OscConfig+0x5e0>
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	689b      	ldr	r3, [r3, #8]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d10c      	bne.n	80087aa <HAL_RCC_OscConfig+0x5a6>
 8008790:	4b77      	ldr	r3, [pc, #476]	; (8008970 <HAL_RCC_OscConfig+0x76c>)
 8008792:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008794:	4a76      	ldr	r2, [pc, #472]	; (8008970 <HAL_RCC_OscConfig+0x76c>)
 8008796:	f023 0301 	bic.w	r3, r3, #1
 800879a:	6713      	str	r3, [r2, #112]	; 0x70
 800879c:	4b74      	ldr	r3, [pc, #464]	; (8008970 <HAL_RCC_OscConfig+0x76c>)
 800879e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087a0:	4a73      	ldr	r2, [pc, #460]	; (8008970 <HAL_RCC_OscConfig+0x76c>)
 80087a2:	f023 0304 	bic.w	r3, r3, #4
 80087a6:	6713      	str	r3, [r2, #112]	; 0x70
 80087a8:	e01c      	b.n	80087e4 <HAL_RCC_OscConfig+0x5e0>
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	689b      	ldr	r3, [r3, #8]
 80087ae:	2b05      	cmp	r3, #5
 80087b0:	d10c      	bne.n	80087cc <HAL_RCC_OscConfig+0x5c8>
 80087b2:	4b6f      	ldr	r3, [pc, #444]	; (8008970 <HAL_RCC_OscConfig+0x76c>)
 80087b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087b6:	4a6e      	ldr	r2, [pc, #440]	; (8008970 <HAL_RCC_OscConfig+0x76c>)
 80087b8:	f043 0304 	orr.w	r3, r3, #4
 80087bc:	6713      	str	r3, [r2, #112]	; 0x70
 80087be:	4b6c      	ldr	r3, [pc, #432]	; (8008970 <HAL_RCC_OscConfig+0x76c>)
 80087c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087c2:	4a6b      	ldr	r2, [pc, #428]	; (8008970 <HAL_RCC_OscConfig+0x76c>)
 80087c4:	f043 0301 	orr.w	r3, r3, #1
 80087c8:	6713      	str	r3, [r2, #112]	; 0x70
 80087ca:	e00b      	b.n	80087e4 <HAL_RCC_OscConfig+0x5e0>
 80087cc:	4b68      	ldr	r3, [pc, #416]	; (8008970 <HAL_RCC_OscConfig+0x76c>)
 80087ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087d0:	4a67      	ldr	r2, [pc, #412]	; (8008970 <HAL_RCC_OscConfig+0x76c>)
 80087d2:	f023 0301 	bic.w	r3, r3, #1
 80087d6:	6713      	str	r3, [r2, #112]	; 0x70
 80087d8:	4b65      	ldr	r3, [pc, #404]	; (8008970 <HAL_RCC_OscConfig+0x76c>)
 80087da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087dc:	4a64      	ldr	r2, [pc, #400]	; (8008970 <HAL_RCC_OscConfig+0x76c>)
 80087de:	f023 0304 	bic.w	r3, r3, #4
 80087e2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	689b      	ldr	r3, [r3, #8]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d015      	beq.n	8008818 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80087ec:	f7fb ffc4 	bl	8004778 <HAL_GetTick>
 80087f0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80087f2:	e00a      	b.n	800880a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80087f4:	f7fb ffc0 	bl	8004778 <HAL_GetTick>
 80087f8:	4602      	mov	r2, r0
 80087fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087fc:	1ad3      	subs	r3, r2, r3
 80087fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8008802:	4293      	cmp	r3, r2
 8008804:	d901      	bls.n	800880a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8008806:	2303      	movs	r3, #3
 8008808:	e14e      	b.n	8008aa8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800880a:	4b59      	ldr	r3, [pc, #356]	; (8008970 <HAL_RCC_OscConfig+0x76c>)
 800880c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800880e:	f003 0302 	and.w	r3, r3, #2
 8008812:	2b00      	cmp	r3, #0
 8008814:	d0ee      	beq.n	80087f4 <HAL_RCC_OscConfig+0x5f0>
 8008816:	e014      	b.n	8008842 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008818:	f7fb ffae 	bl	8004778 <HAL_GetTick>
 800881c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800881e:	e00a      	b.n	8008836 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008820:	f7fb ffaa 	bl	8004778 <HAL_GetTick>
 8008824:	4602      	mov	r2, r0
 8008826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008828:	1ad3      	subs	r3, r2, r3
 800882a:	f241 3288 	movw	r2, #5000	; 0x1388
 800882e:	4293      	cmp	r3, r2
 8008830:	d901      	bls.n	8008836 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8008832:	2303      	movs	r3, #3
 8008834:	e138      	b.n	8008aa8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008836:	4b4e      	ldr	r3, [pc, #312]	; (8008970 <HAL_RCC_OscConfig+0x76c>)
 8008838:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800883a:	f003 0302 	and.w	r3, r3, #2
 800883e:	2b00      	cmp	r3, #0
 8008840:	d1ee      	bne.n	8008820 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008846:	2b00      	cmp	r3, #0
 8008848:	f000 812d 	beq.w	8008aa6 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800884c:	4b48      	ldr	r3, [pc, #288]	; (8008970 <HAL_RCC_OscConfig+0x76c>)
 800884e:	691b      	ldr	r3, [r3, #16]
 8008850:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008854:	2b18      	cmp	r3, #24
 8008856:	f000 80bd 	beq.w	80089d4 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800885e:	2b02      	cmp	r3, #2
 8008860:	f040 809e 	bne.w	80089a0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008864:	4b42      	ldr	r3, [pc, #264]	; (8008970 <HAL_RCC_OscConfig+0x76c>)
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	4a41      	ldr	r2, [pc, #260]	; (8008970 <HAL_RCC_OscConfig+0x76c>)
 800886a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800886e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008870:	f7fb ff82 	bl	8004778 <HAL_GetTick>
 8008874:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008876:	e008      	b.n	800888a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008878:	f7fb ff7e 	bl	8004778 <HAL_GetTick>
 800887c:	4602      	mov	r2, r0
 800887e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008880:	1ad3      	subs	r3, r2, r3
 8008882:	2b02      	cmp	r3, #2
 8008884:	d901      	bls.n	800888a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8008886:	2303      	movs	r3, #3
 8008888:	e10e      	b.n	8008aa8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800888a:	4b39      	ldr	r3, [pc, #228]	; (8008970 <HAL_RCC_OscConfig+0x76c>)
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008892:	2b00      	cmp	r3, #0
 8008894:	d1f0      	bne.n	8008878 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008896:	4b36      	ldr	r3, [pc, #216]	; (8008970 <HAL_RCC_OscConfig+0x76c>)
 8008898:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800889a:	4b37      	ldr	r3, [pc, #220]	; (8008978 <HAL_RCC_OscConfig+0x774>)
 800889c:	4013      	ands	r3, r2
 800889e:	687a      	ldr	r2, [r7, #4]
 80088a0:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80088a2:	687a      	ldr	r2, [r7, #4]
 80088a4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80088a6:	0112      	lsls	r2, r2, #4
 80088a8:	430a      	orrs	r2, r1
 80088aa:	4931      	ldr	r1, [pc, #196]	; (8008970 <HAL_RCC_OscConfig+0x76c>)
 80088ac:	4313      	orrs	r3, r2
 80088ae:	628b      	str	r3, [r1, #40]	; 0x28
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088b4:	3b01      	subs	r3, #1
 80088b6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088be:	3b01      	subs	r3, #1
 80088c0:	025b      	lsls	r3, r3, #9
 80088c2:	b29b      	uxth	r3, r3
 80088c4:	431a      	orrs	r2, r3
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088ca:	3b01      	subs	r3, #1
 80088cc:	041b      	lsls	r3, r3, #16
 80088ce:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80088d2:	431a      	orrs	r2, r3
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088d8:	3b01      	subs	r3, #1
 80088da:	061b      	lsls	r3, r3, #24
 80088dc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80088e0:	4923      	ldr	r1, [pc, #140]	; (8008970 <HAL_RCC_OscConfig+0x76c>)
 80088e2:	4313      	orrs	r3, r2
 80088e4:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80088e6:	4b22      	ldr	r3, [pc, #136]	; (8008970 <HAL_RCC_OscConfig+0x76c>)
 80088e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088ea:	4a21      	ldr	r2, [pc, #132]	; (8008970 <HAL_RCC_OscConfig+0x76c>)
 80088ec:	f023 0301 	bic.w	r3, r3, #1
 80088f0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80088f2:	4b1f      	ldr	r3, [pc, #124]	; (8008970 <HAL_RCC_OscConfig+0x76c>)
 80088f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80088f6:	4b21      	ldr	r3, [pc, #132]	; (800897c <HAL_RCC_OscConfig+0x778>)
 80088f8:	4013      	ands	r3, r2
 80088fa:	687a      	ldr	r2, [r7, #4]
 80088fc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80088fe:	00d2      	lsls	r2, r2, #3
 8008900:	491b      	ldr	r1, [pc, #108]	; (8008970 <HAL_RCC_OscConfig+0x76c>)
 8008902:	4313      	orrs	r3, r2
 8008904:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008906:	4b1a      	ldr	r3, [pc, #104]	; (8008970 <HAL_RCC_OscConfig+0x76c>)
 8008908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800890a:	f023 020c 	bic.w	r2, r3, #12
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008912:	4917      	ldr	r1, [pc, #92]	; (8008970 <HAL_RCC_OscConfig+0x76c>)
 8008914:	4313      	orrs	r3, r2
 8008916:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008918:	4b15      	ldr	r3, [pc, #84]	; (8008970 <HAL_RCC_OscConfig+0x76c>)
 800891a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800891c:	f023 0202 	bic.w	r2, r3, #2
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008924:	4912      	ldr	r1, [pc, #72]	; (8008970 <HAL_RCC_OscConfig+0x76c>)
 8008926:	4313      	orrs	r3, r2
 8008928:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800892a:	4b11      	ldr	r3, [pc, #68]	; (8008970 <HAL_RCC_OscConfig+0x76c>)
 800892c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800892e:	4a10      	ldr	r2, [pc, #64]	; (8008970 <HAL_RCC_OscConfig+0x76c>)
 8008930:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008934:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008936:	4b0e      	ldr	r3, [pc, #56]	; (8008970 <HAL_RCC_OscConfig+0x76c>)
 8008938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800893a:	4a0d      	ldr	r2, [pc, #52]	; (8008970 <HAL_RCC_OscConfig+0x76c>)
 800893c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008940:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008942:	4b0b      	ldr	r3, [pc, #44]	; (8008970 <HAL_RCC_OscConfig+0x76c>)
 8008944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008946:	4a0a      	ldr	r2, [pc, #40]	; (8008970 <HAL_RCC_OscConfig+0x76c>)
 8008948:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800894c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800894e:	4b08      	ldr	r3, [pc, #32]	; (8008970 <HAL_RCC_OscConfig+0x76c>)
 8008950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008952:	4a07      	ldr	r2, [pc, #28]	; (8008970 <HAL_RCC_OscConfig+0x76c>)
 8008954:	f043 0301 	orr.w	r3, r3, #1
 8008958:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800895a:	4b05      	ldr	r3, [pc, #20]	; (8008970 <HAL_RCC_OscConfig+0x76c>)
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	4a04      	ldr	r2, [pc, #16]	; (8008970 <HAL_RCC_OscConfig+0x76c>)
 8008960:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008964:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008966:	f7fb ff07 	bl	8004778 <HAL_GetTick>
 800896a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800896c:	e011      	b.n	8008992 <HAL_RCC_OscConfig+0x78e>
 800896e:	bf00      	nop
 8008970:	58024400 	.word	0x58024400
 8008974:	58024800 	.word	0x58024800
 8008978:	fffffc0c 	.word	0xfffffc0c
 800897c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008980:	f7fb fefa 	bl	8004778 <HAL_GetTick>
 8008984:	4602      	mov	r2, r0
 8008986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008988:	1ad3      	subs	r3, r2, r3
 800898a:	2b02      	cmp	r3, #2
 800898c:	d901      	bls.n	8008992 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800898e:	2303      	movs	r3, #3
 8008990:	e08a      	b.n	8008aa8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008992:	4b47      	ldr	r3, [pc, #284]	; (8008ab0 <HAL_RCC_OscConfig+0x8ac>)
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800899a:	2b00      	cmp	r3, #0
 800899c:	d0f0      	beq.n	8008980 <HAL_RCC_OscConfig+0x77c>
 800899e:	e082      	b.n	8008aa6 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80089a0:	4b43      	ldr	r3, [pc, #268]	; (8008ab0 <HAL_RCC_OscConfig+0x8ac>)
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	4a42      	ldr	r2, [pc, #264]	; (8008ab0 <HAL_RCC_OscConfig+0x8ac>)
 80089a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80089aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089ac:	f7fb fee4 	bl	8004778 <HAL_GetTick>
 80089b0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80089b2:	e008      	b.n	80089c6 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80089b4:	f7fb fee0 	bl	8004778 <HAL_GetTick>
 80089b8:	4602      	mov	r2, r0
 80089ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089bc:	1ad3      	subs	r3, r2, r3
 80089be:	2b02      	cmp	r3, #2
 80089c0:	d901      	bls.n	80089c6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80089c2:	2303      	movs	r3, #3
 80089c4:	e070      	b.n	8008aa8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80089c6:	4b3a      	ldr	r3, [pc, #232]	; (8008ab0 <HAL_RCC_OscConfig+0x8ac>)
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d1f0      	bne.n	80089b4 <HAL_RCC_OscConfig+0x7b0>
 80089d2:	e068      	b.n	8008aa6 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80089d4:	4b36      	ldr	r3, [pc, #216]	; (8008ab0 <HAL_RCC_OscConfig+0x8ac>)
 80089d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089d8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80089da:	4b35      	ldr	r3, [pc, #212]	; (8008ab0 <HAL_RCC_OscConfig+0x8ac>)
 80089dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089de:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089e4:	2b01      	cmp	r3, #1
 80089e6:	d031      	beq.n	8008a4c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80089e8:	693b      	ldr	r3, [r7, #16]
 80089ea:	f003 0203 	and.w	r2, r3, #3
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80089f2:	429a      	cmp	r2, r3
 80089f4:	d12a      	bne.n	8008a4c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80089f6:	693b      	ldr	r3, [r7, #16]
 80089f8:	091b      	lsrs	r3, r3, #4
 80089fa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008a02:	429a      	cmp	r2, r3
 8008a04:	d122      	bne.n	8008a4c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a10:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008a12:	429a      	cmp	r2, r3
 8008a14:	d11a      	bne.n	8008a4c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	0a5b      	lsrs	r3, r3, #9
 8008a1a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a22:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008a24:	429a      	cmp	r2, r3
 8008a26:	d111      	bne.n	8008a4c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	0c1b      	lsrs	r3, r3, #16
 8008a2c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a34:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008a36:	429a      	cmp	r2, r3
 8008a38:	d108      	bne.n	8008a4c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	0e1b      	lsrs	r3, r3, #24
 8008a3e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a46:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008a48:	429a      	cmp	r2, r3
 8008a4a:	d001      	beq.n	8008a50 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8008a4c:	2301      	movs	r3, #1
 8008a4e:	e02b      	b.n	8008aa8 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8008a50:	4b17      	ldr	r3, [pc, #92]	; (8008ab0 <HAL_RCC_OscConfig+0x8ac>)
 8008a52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a54:	08db      	lsrs	r3, r3, #3
 8008a56:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008a5a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008a60:	693a      	ldr	r2, [r7, #16]
 8008a62:	429a      	cmp	r2, r3
 8008a64:	d01f      	beq.n	8008aa6 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8008a66:	4b12      	ldr	r3, [pc, #72]	; (8008ab0 <HAL_RCC_OscConfig+0x8ac>)
 8008a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a6a:	4a11      	ldr	r2, [pc, #68]	; (8008ab0 <HAL_RCC_OscConfig+0x8ac>)
 8008a6c:	f023 0301 	bic.w	r3, r3, #1
 8008a70:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008a72:	f7fb fe81 	bl	8004778 <HAL_GetTick>
 8008a76:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8008a78:	bf00      	nop
 8008a7a:	f7fb fe7d 	bl	8004778 <HAL_GetTick>
 8008a7e:	4602      	mov	r2, r0
 8008a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a82:	4293      	cmp	r3, r2
 8008a84:	d0f9      	beq.n	8008a7a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008a86:	4b0a      	ldr	r3, [pc, #40]	; (8008ab0 <HAL_RCC_OscConfig+0x8ac>)
 8008a88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008a8a:	4b0a      	ldr	r3, [pc, #40]	; (8008ab4 <HAL_RCC_OscConfig+0x8b0>)
 8008a8c:	4013      	ands	r3, r2
 8008a8e:	687a      	ldr	r2, [r7, #4]
 8008a90:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008a92:	00d2      	lsls	r2, r2, #3
 8008a94:	4906      	ldr	r1, [pc, #24]	; (8008ab0 <HAL_RCC_OscConfig+0x8ac>)
 8008a96:	4313      	orrs	r3, r2
 8008a98:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8008a9a:	4b05      	ldr	r3, [pc, #20]	; (8008ab0 <HAL_RCC_OscConfig+0x8ac>)
 8008a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a9e:	4a04      	ldr	r2, [pc, #16]	; (8008ab0 <HAL_RCC_OscConfig+0x8ac>)
 8008aa0:	f043 0301 	orr.w	r3, r3, #1
 8008aa4:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8008aa6:	2300      	movs	r3, #0
}
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	3730      	adds	r7, #48	; 0x30
 8008aac:	46bd      	mov	sp, r7
 8008aae:	bd80      	pop	{r7, pc}
 8008ab0:	58024400 	.word	0x58024400
 8008ab4:	ffff0007 	.word	0xffff0007

08008ab8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	b086      	sub	sp, #24
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	6078      	str	r0, [r7, #4]
 8008ac0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d101      	bne.n	8008acc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008ac8:	2301      	movs	r3, #1
 8008aca:	e19c      	b.n	8008e06 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008acc:	4b8a      	ldr	r3, [pc, #552]	; (8008cf8 <HAL_RCC_ClockConfig+0x240>)
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	f003 030f 	and.w	r3, r3, #15
 8008ad4:	683a      	ldr	r2, [r7, #0]
 8008ad6:	429a      	cmp	r2, r3
 8008ad8:	d910      	bls.n	8008afc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008ada:	4b87      	ldr	r3, [pc, #540]	; (8008cf8 <HAL_RCC_ClockConfig+0x240>)
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	f023 020f 	bic.w	r2, r3, #15
 8008ae2:	4985      	ldr	r1, [pc, #532]	; (8008cf8 <HAL_RCC_ClockConfig+0x240>)
 8008ae4:	683b      	ldr	r3, [r7, #0]
 8008ae6:	4313      	orrs	r3, r2
 8008ae8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008aea:	4b83      	ldr	r3, [pc, #524]	; (8008cf8 <HAL_RCC_ClockConfig+0x240>)
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	f003 030f 	and.w	r3, r3, #15
 8008af2:	683a      	ldr	r2, [r7, #0]
 8008af4:	429a      	cmp	r2, r3
 8008af6:	d001      	beq.n	8008afc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008af8:	2301      	movs	r3, #1
 8008afa:	e184      	b.n	8008e06 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	f003 0304 	and.w	r3, r3, #4
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d010      	beq.n	8008b2a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	691a      	ldr	r2, [r3, #16]
 8008b0c:	4b7b      	ldr	r3, [pc, #492]	; (8008cfc <HAL_RCC_ClockConfig+0x244>)
 8008b0e:	699b      	ldr	r3, [r3, #24]
 8008b10:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008b14:	429a      	cmp	r2, r3
 8008b16:	d908      	bls.n	8008b2a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008b18:	4b78      	ldr	r3, [pc, #480]	; (8008cfc <HAL_RCC_ClockConfig+0x244>)
 8008b1a:	699b      	ldr	r3, [r3, #24]
 8008b1c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	691b      	ldr	r3, [r3, #16]
 8008b24:	4975      	ldr	r1, [pc, #468]	; (8008cfc <HAL_RCC_ClockConfig+0x244>)
 8008b26:	4313      	orrs	r3, r2
 8008b28:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	f003 0308 	and.w	r3, r3, #8
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d010      	beq.n	8008b58 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	695a      	ldr	r2, [r3, #20]
 8008b3a:	4b70      	ldr	r3, [pc, #448]	; (8008cfc <HAL_RCC_ClockConfig+0x244>)
 8008b3c:	69db      	ldr	r3, [r3, #28]
 8008b3e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008b42:	429a      	cmp	r2, r3
 8008b44:	d908      	bls.n	8008b58 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008b46:	4b6d      	ldr	r3, [pc, #436]	; (8008cfc <HAL_RCC_ClockConfig+0x244>)
 8008b48:	69db      	ldr	r3, [r3, #28]
 8008b4a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	695b      	ldr	r3, [r3, #20]
 8008b52:	496a      	ldr	r1, [pc, #424]	; (8008cfc <HAL_RCC_ClockConfig+0x244>)
 8008b54:	4313      	orrs	r3, r2
 8008b56:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	f003 0310 	and.w	r3, r3, #16
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d010      	beq.n	8008b86 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	699a      	ldr	r2, [r3, #24]
 8008b68:	4b64      	ldr	r3, [pc, #400]	; (8008cfc <HAL_RCC_ClockConfig+0x244>)
 8008b6a:	69db      	ldr	r3, [r3, #28]
 8008b6c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008b70:	429a      	cmp	r2, r3
 8008b72:	d908      	bls.n	8008b86 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008b74:	4b61      	ldr	r3, [pc, #388]	; (8008cfc <HAL_RCC_ClockConfig+0x244>)
 8008b76:	69db      	ldr	r3, [r3, #28]
 8008b78:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	699b      	ldr	r3, [r3, #24]
 8008b80:	495e      	ldr	r1, [pc, #376]	; (8008cfc <HAL_RCC_ClockConfig+0x244>)
 8008b82:	4313      	orrs	r3, r2
 8008b84:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	f003 0320 	and.w	r3, r3, #32
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d010      	beq.n	8008bb4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	69da      	ldr	r2, [r3, #28]
 8008b96:	4b59      	ldr	r3, [pc, #356]	; (8008cfc <HAL_RCC_ClockConfig+0x244>)
 8008b98:	6a1b      	ldr	r3, [r3, #32]
 8008b9a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008b9e:	429a      	cmp	r2, r3
 8008ba0:	d908      	bls.n	8008bb4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008ba2:	4b56      	ldr	r3, [pc, #344]	; (8008cfc <HAL_RCC_ClockConfig+0x244>)
 8008ba4:	6a1b      	ldr	r3, [r3, #32]
 8008ba6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	69db      	ldr	r3, [r3, #28]
 8008bae:	4953      	ldr	r1, [pc, #332]	; (8008cfc <HAL_RCC_ClockConfig+0x244>)
 8008bb0:	4313      	orrs	r3, r2
 8008bb2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	f003 0302 	and.w	r3, r3, #2
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d010      	beq.n	8008be2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	68da      	ldr	r2, [r3, #12]
 8008bc4:	4b4d      	ldr	r3, [pc, #308]	; (8008cfc <HAL_RCC_ClockConfig+0x244>)
 8008bc6:	699b      	ldr	r3, [r3, #24]
 8008bc8:	f003 030f 	and.w	r3, r3, #15
 8008bcc:	429a      	cmp	r2, r3
 8008bce:	d908      	bls.n	8008be2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008bd0:	4b4a      	ldr	r3, [pc, #296]	; (8008cfc <HAL_RCC_ClockConfig+0x244>)
 8008bd2:	699b      	ldr	r3, [r3, #24]
 8008bd4:	f023 020f 	bic.w	r2, r3, #15
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	68db      	ldr	r3, [r3, #12]
 8008bdc:	4947      	ldr	r1, [pc, #284]	; (8008cfc <HAL_RCC_ClockConfig+0x244>)
 8008bde:	4313      	orrs	r3, r2
 8008be0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	f003 0301 	and.w	r3, r3, #1
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d055      	beq.n	8008c9a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008bee:	4b43      	ldr	r3, [pc, #268]	; (8008cfc <HAL_RCC_ClockConfig+0x244>)
 8008bf0:	699b      	ldr	r3, [r3, #24]
 8008bf2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	689b      	ldr	r3, [r3, #8]
 8008bfa:	4940      	ldr	r1, [pc, #256]	; (8008cfc <HAL_RCC_ClockConfig+0x244>)
 8008bfc:	4313      	orrs	r3, r2
 8008bfe:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	685b      	ldr	r3, [r3, #4]
 8008c04:	2b02      	cmp	r3, #2
 8008c06:	d107      	bne.n	8008c18 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008c08:	4b3c      	ldr	r3, [pc, #240]	; (8008cfc <HAL_RCC_ClockConfig+0x244>)
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d121      	bne.n	8008c58 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008c14:	2301      	movs	r3, #1
 8008c16:	e0f6      	b.n	8008e06 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	685b      	ldr	r3, [r3, #4]
 8008c1c:	2b03      	cmp	r3, #3
 8008c1e:	d107      	bne.n	8008c30 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008c20:	4b36      	ldr	r3, [pc, #216]	; (8008cfc <HAL_RCC_ClockConfig+0x244>)
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d115      	bne.n	8008c58 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008c2c:	2301      	movs	r3, #1
 8008c2e:	e0ea      	b.n	8008e06 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	685b      	ldr	r3, [r3, #4]
 8008c34:	2b01      	cmp	r3, #1
 8008c36:	d107      	bne.n	8008c48 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008c38:	4b30      	ldr	r3, [pc, #192]	; (8008cfc <HAL_RCC_ClockConfig+0x244>)
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d109      	bne.n	8008c58 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008c44:	2301      	movs	r3, #1
 8008c46:	e0de      	b.n	8008e06 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008c48:	4b2c      	ldr	r3, [pc, #176]	; (8008cfc <HAL_RCC_ClockConfig+0x244>)
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	f003 0304 	and.w	r3, r3, #4
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d101      	bne.n	8008c58 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008c54:	2301      	movs	r3, #1
 8008c56:	e0d6      	b.n	8008e06 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008c58:	4b28      	ldr	r3, [pc, #160]	; (8008cfc <HAL_RCC_ClockConfig+0x244>)
 8008c5a:	691b      	ldr	r3, [r3, #16]
 8008c5c:	f023 0207 	bic.w	r2, r3, #7
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	685b      	ldr	r3, [r3, #4]
 8008c64:	4925      	ldr	r1, [pc, #148]	; (8008cfc <HAL_RCC_ClockConfig+0x244>)
 8008c66:	4313      	orrs	r3, r2
 8008c68:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008c6a:	f7fb fd85 	bl	8004778 <HAL_GetTick>
 8008c6e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008c70:	e00a      	b.n	8008c88 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008c72:	f7fb fd81 	bl	8004778 <HAL_GetTick>
 8008c76:	4602      	mov	r2, r0
 8008c78:	697b      	ldr	r3, [r7, #20]
 8008c7a:	1ad3      	subs	r3, r2, r3
 8008c7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c80:	4293      	cmp	r3, r2
 8008c82:	d901      	bls.n	8008c88 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8008c84:	2303      	movs	r3, #3
 8008c86:	e0be      	b.n	8008e06 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008c88:	4b1c      	ldr	r3, [pc, #112]	; (8008cfc <HAL_RCC_ClockConfig+0x244>)
 8008c8a:	691b      	ldr	r3, [r3, #16]
 8008c8c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	685b      	ldr	r3, [r3, #4]
 8008c94:	00db      	lsls	r3, r3, #3
 8008c96:	429a      	cmp	r2, r3
 8008c98:	d1eb      	bne.n	8008c72 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	f003 0302 	and.w	r3, r3, #2
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d010      	beq.n	8008cc8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	68da      	ldr	r2, [r3, #12]
 8008caa:	4b14      	ldr	r3, [pc, #80]	; (8008cfc <HAL_RCC_ClockConfig+0x244>)
 8008cac:	699b      	ldr	r3, [r3, #24]
 8008cae:	f003 030f 	and.w	r3, r3, #15
 8008cb2:	429a      	cmp	r2, r3
 8008cb4:	d208      	bcs.n	8008cc8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008cb6:	4b11      	ldr	r3, [pc, #68]	; (8008cfc <HAL_RCC_ClockConfig+0x244>)
 8008cb8:	699b      	ldr	r3, [r3, #24]
 8008cba:	f023 020f 	bic.w	r2, r3, #15
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	68db      	ldr	r3, [r3, #12]
 8008cc2:	490e      	ldr	r1, [pc, #56]	; (8008cfc <HAL_RCC_ClockConfig+0x244>)
 8008cc4:	4313      	orrs	r3, r2
 8008cc6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008cc8:	4b0b      	ldr	r3, [pc, #44]	; (8008cf8 <HAL_RCC_ClockConfig+0x240>)
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	f003 030f 	and.w	r3, r3, #15
 8008cd0:	683a      	ldr	r2, [r7, #0]
 8008cd2:	429a      	cmp	r2, r3
 8008cd4:	d214      	bcs.n	8008d00 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008cd6:	4b08      	ldr	r3, [pc, #32]	; (8008cf8 <HAL_RCC_ClockConfig+0x240>)
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	f023 020f 	bic.w	r2, r3, #15
 8008cde:	4906      	ldr	r1, [pc, #24]	; (8008cf8 <HAL_RCC_ClockConfig+0x240>)
 8008ce0:	683b      	ldr	r3, [r7, #0]
 8008ce2:	4313      	orrs	r3, r2
 8008ce4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008ce6:	4b04      	ldr	r3, [pc, #16]	; (8008cf8 <HAL_RCC_ClockConfig+0x240>)
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	f003 030f 	and.w	r3, r3, #15
 8008cee:	683a      	ldr	r2, [r7, #0]
 8008cf0:	429a      	cmp	r2, r3
 8008cf2:	d005      	beq.n	8008d00 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008cf4:	2301      	movs	r3, #1
 8008cf6:	e086      	b.n	8008e06 <HAL_RCC_ClockConfig+0x34e>
 8008cf8:	52002000 	.word	0x52002000
 8008cfc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	f003 0304 	and.w	r3, r3, #4
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d010      	beq.n	8008d2e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	691a      	ldr	r2, [r3, #16]
 8008d10:	4b3f      	ldr	r3, [pc, #252]	; (8008e10 <HAL_RCC_ClockConfig+0x358>)
 8008d12:	699b      	ldr	r3, [r3, #24]
 8008d14:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008d18:	429a      	cmp	r2, r3
 8008d1a:	d208      	bcs.n	8008d2e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008d1c:	4b3c      	ldr	r3, [pc, #240]	; (8008e10 <HAL_RCC_ClockConfig+0x358>)
 8008d1e:	699b      	ldr	r3, [r3, #24]
 8008d20:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	691b      	ldr	r3, [r3, #16]
 8008d28:	4939      	ldr	r1, [pc, #228]	; (8008e10 <HAL_RCC_ClockConfig+0x358>)
 8008d2a:	4313      	orrs	r3, r2
 8008d2c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	f003 0308 	and.w	r3, r3, #8
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d010      	beq.n	8008d5c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	695a      	ldr	r2, [r3, #20]
 8008d3e:	4b34      	ldr	r3, [pc, #208]	; (8008e10 <HAL_RCC_ClockConfig+0x358>)
 8008d40:	69db      	ldr	r3, [r3, #28]
 8008d42:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008d46:	429a      	cmp	r2, r3
 8008d48:	d208      	bcs.n	8008d5c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008d4a:	4b31      	ldr	r3, [pc, #196]	; (8008e10 <HAL_RCC_ClockConfig+0x358>)
 8008d4c:	69db      	ldr	r3, [r3, #28]
 8008d4e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	695b      	ldr	r3, [r3, #20]
 8008d56:	492e      	ldr	r1, [pc, #184]	; (8008e10 <HAL_RCC_ClockConfig+0x358>)
 8008d58:	4313      	orrs	r3, r2
 8008d5a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	f003 0310 	and.w	r3, r3, #16
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d010      	beq.n	8008d8a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	699a      	ldr	r2, [r3, #24]
 8008d6c:	4b28      	ldr	r3, [pc, #160]	; (8008e10 <HAL_RCC_ClockConfig+0x358>)
 8008d6e:	69db      	ldr	r3, [r3, #28]
 8008d70:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008d74:	429a      	cmp	r2, r3
 8008d76:	d208      	bcs.n	8008d8a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008d78:	4b25      	ldr	r3, [pc, #148]	; (8008e10 <HAL_RCC_ClockConfig+0x358>)
 8008d7a:	69db      	ldr	r3, [r3, #28]
 8008d7c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	699b      	ldr	r3, [r3, #24]
 8008d84:	4922      	ldr	r1, [pc, #136]	; (8008e10 <HAL_RCC_ClockConfig+0x358>)
 8008d86:	4313      	orrs	r3, r2
 8008d88:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	f003 0320 	and.w	r3, r3, #32
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d010      	beq.n	8008db8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	69da      	ldr	r2, [r3, #28]
 8008d9a:	4b1d      	ldr	r3, [pc, #116]	; (8008e10 <HAL_RCC_ClockConfig+0x358>)
 8008d9c:	6a1b      	ldr	r3, [r3, #32]
 8008d9e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008da2:	429a      	cmp	r2, r3
 8008da4:	d208      	bcs.n	8008db8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008da6:	4b1a      	ldr	r3, [pc, #104]	; (8008e10 <HAL_RCC_ClockConfig+0x358>)
 8008da8:	6a1b      	ldr	r3, [r3, #32]
 8008daa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	69db      	ldr	r3, [r3, #28]
 8008db2:	4917      	ldr	r1, [pc, #92]	; (8008e10 <HAL_RCC_ClockConfig+0x358>)
 8008db4:	4313      	orrs	r3, r2
 8008db6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008db8:	f000 f834 	bl	8008e24 <HAL_RCC_GetSysClockFreq>
 8008dbc:	4602      	mov	r2, r0
 8008dbe:	4b14      	ldr	r3, [pc, #80]	; (8008e10 <HAL_RCC_ClockConfig+0x358>)
 8008dc0:	699b      	ldr	r3, [r3, #24]
 8008dc2:	0a1b      	lsrs	r3, r3, #8
 8008dc4:	f003 030f 	and.w	r3, r3, #15
 8008dc8:	4912      	ldr	r1, [pc, #72]	; (8008e14 <HAL_RCC_ClockConfig+0x35c>)
 8008dca:	5ccb      	ldrb	r3, [r1, r3]
 8008dcc:	f003 031f 	and.w	r3, r3, #31
 8008dd0:	fa22 f303 	lsr.w	r3, r2, r3
 8008dd4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008dd6:	4b0e      	ldr	r3, [pc, #56]	; (8008e10 <HAL_RCC_ClockConfig+0x358>)
 8008dd8:	699b      	ldr	r3, [r3, #24]
 8008dda:	f003 030f 	and.w	r3, r3, #15
 8008dde:	4a0d      	ldr	r2, [pc, #52]	; (8008e14 <HAL_RCC_ClockConfig+0x35c>)
 8008de0:	5cd3      	ldrb	r3, [r2, r3]
 8008de2:	f003 031f 	and.w	r3, r3, #31
 8008de6:	693a      	ldr	r2, [r7, #16]
 8008de8:	fa22 f303 	lsr.w	r3, r2, r3
 8008dec:	4a0a      	ldr	r2, [pc, #40]	; (8008e18 <HAL_RCC_ClockConfig+0x360>)
 8008dee:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008df0:	4a0a      	ldr	r2, [pc, #40]	; (8008e1c <HAL_RCC_ClockConfig+0x364>)
 8008df2:	693b      	ldr	r3, [r7, #16]
 8008df4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8008df6:	4b0a      	ldr	r3, [pc, #40]	; (8008e20 <HAL_RCC_ClockConfig+0x368>)
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	f7f9 fada 	bl	80023b4 <HAL_InitTick>
 8008e00:	4603      	mov	r3, r0
 8008e02:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008e04:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e06:	4618      	mov	r0, r3
 8008e08:	3718      	adds	r7, #24
 8008e0a:	46bd      	mov	sp, r7
 8008e0c:	bd80      	pop	{r7, pc}
 8008e0e:	bf00      	nop
 8008e10:	58024400 	.word	0x58024400
 8008e14:	08020e9c 	.word	0x08020e9c
 8008e18:	24000004 	.word	0x24000004
 8008e1c:	24000000 	.word	0x24000000
 8008e20:	24000008 	.word	0x24000008

08008e24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008e24:	b480      	push	{r7}
 8008e26:	b089      	sub	sp, #36	; 0x24
 8008e28:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008e2a:	4bb3      	ldr	r3, [pc, #716]	; (80090f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008e2c:	691b      	ldr	r3, [r3, #16]
 8008e2e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008e32:	2b18      	cmp	r3, #24
 8008e34:	f200 8155 	bhi.w	80090e2 <HAL_RCC_GetSysClockFreq+0x2be>
 8008e38:	a201      	add	r2, pc, #4	; (adr r2, 8008e40 <HAL_RCC_GetSysClockFreq+0x1c>)
 8008e3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e3e:	bf00      	nop
 8008e40:	08008ea5 	.word	0x08008ea5
 8008e44:	080090e3 	.word	0x080090e3
 8008e48:	080090e3 	.word	0x080090e3
 8008e4c:	080090e3 	.word	0x080090e3
 8008e50:	080090e3 	.word	0x080090e3
 8008e54:	080090e3 	.word	0x080090e3
 8008e58:	080090e3 	.word	0x080090e3
 8008e5c:	080090e3 	.word	0x080090e3
 8008e60:	08008ecb 	.word	0x08008ecb
 8008e64:	080090e3 	.word	0x080090e3
 8008e68:	080090e3 	.word	0x080090e3
 8008e6c:	080090e3 	.word	0x080090e3
 8008e70:	080090e3 	.word	0x080090e3
 8008e74:	080090e3 	.word	0x080090e3
 8008e78:	080090e3 	.word	0x080090e3
 8008e7c:	080090e3 	.word	0x080090e3
 8008e80:	08008ed1 	.word	0x08008ed1
 8008e84:	080090e3 	.word	0x080090e3
 8008e88:	080090e3 	.word	0x080090e3
 8008e8c:	080090e3 	.word	0x080090e3
 8008e90:	080090e3 	.word	0x080090e3
 8008e94:	080090e3 	.word	0x080090e3
 8008e98:	080090e3 	.word	0x080090e3
 8008e9c:	080090e3 	.word	0x080090e3
 8008ea0:	08008ed7 	.word	0x08008ed7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008ea4:	4b94      	ldr	r3, [pc, #592]	; (80090f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	f003 0320 	and.w	r3, r3, #32
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d009      	beq.n	8008ec4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008eb0:	4b91      	ldr	r3, [pc, #580]	; (80090f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	08db      	lsrs	r3, r3, #3
 8008eb6:	f003 0303 	and.w	r3, r3, #3
 8008eba:	4a90      	ldr	r2, [pc, #576]	; (80090fc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008ebc:	fa22 f303 	lsr.w	r3, r2, r3
 8008ec0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8008ec2:	e111      	b.n	80090e8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008ec4:	4b8d      	ldr	r3, [pc, #564]	; (80090fc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008ec6:	61bb      	str	r3, [r7, #24]
      break;
 8008ec8:	e10e      	b.n	80090e8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8008eca:	4b8d      	ldr	r3, [pc, #564]	; (8009100 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008ecc:	61bb      	str	r3, [r7, #24]
      break;
 8008ece:	e10b      	b.n	80090e8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8008ed0:	4b8c      	ldr	r3, [pc, #560]	; (8009104 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8008ed2:	61bb      	str	r3, [r7, #24]
      break;
 8008ed4:	e108      	b.n	80090e8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008ed6:	4b88      	ldr	r3, [pc, #544]	; (80090f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008eda:	f003 0303 	and.w	r3, r3, #3
 8008ede:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8008ee0:	4b85      	ldr	r3, [pc, #532]	; (80090f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ee4:	091b      	lsrs	r3, r3, #4
 8008ee6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008eea:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008eec:	4b82      	ldr	r3, [pc, #520]	; (80090f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ef0:	f003 0301 	and.w	r3, r3, #1
 8008ef4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008ef6:	4b80      	ldr	r3, [pc, #512]	; (80090f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ef8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008efa:	08db      	lsrs	r3, r3, #3
 8008efc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008f00:	68fa      	ldr	r2, [r7, #12]
 8008f02:	fb02 f303 	mul.w	r3, r2, r3
 8008f06:	ee07 3a90 	vmov	s15, r3
 8008f0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f0e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8008f12:	693b      	ldr	r3, [r7, #16]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	f000 80e1 	beq.w	80090dc <HAL_RCC_GetSysClockFreq+0x2b8>
 8008f1a:	697b      	ldr	r3, [r7, #20]
 8008f1c:	2b02      	cmp	r3, #2
 8008f1e:	f000 8083 	beq.w	8009028 <HAL_RCC_GetSysClockFreq+0x204>
 8008f22:	697b      	ldr	r3, [r7, #20]
 8008f24:	2b02      	cmp	r3, #2
 8008f26:	f200 80a1 	bhi.w	800906c <HAL_RCC_GetSysClockFreq+0x248>
 8008f2a:	697b      	ldr	r3, [r7, #20]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d003      	beq.n	8008f38 <HAL_RCC_GetSysClockFreq+0x114>
 8008f30:	697b      	ldr	r3, [r7, #20]
 8008f32:	2b01      	cmp	r3, #1
 8008f34:	d056      	beq.n	8008fe4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8008f36:	e099      	b.n	800906c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008f38:	4b6f      	ldr	r3, [pc, #444]	; (80090f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	f003 0320 	and.w	r3, r3, #32
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d02d      	beq.n	8008fa0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008f44:	4b6c      	ldr	r3, [pc, #432]	; (80090f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	08db      	lsrs	r3, r3, #3
 8008f4a:	f003 0303 	and.w	r3, r3, #3
 8008f4e:	4a6b      	ldr	r2, [pc, #428]	; (80090fc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008f50:	fa22 f303 	lsr.w	r3, r2, r3
 8008f54:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	ee07 3a90 	vmov	s15, r3
 8008f5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f60:	693b      	ldr	r3, [r7, #16]
 8008f62:	ee07 3a90 	vmov	s15, r3
 8008f66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f6e:	4b62      	ldr	r3, [pc, #392]	; (80090f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f76:	ee07 3a90 	vmov	s15, r3
 8008f7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f7e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008f82:	eddf 5a61 	vldr	s11, [pc, #388]	; 8009108 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008f86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008f92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f9a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8008f9e:	e087      	b.n	80090b0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008fa0:	693b      	ldr	r3, [r7, #16]
 8008fa2:	ee07 3a90 	vmov	s15, r3
 8008fa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008faa:	eddf 6a58 	vldr	s13, [pc, #352]	; 800910c <HAL_RCC_GetSysClockFreq+0x2e8>
 8008fae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008fb2:	4b51      	ldr	r3, [pc, #324]	; (80090f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008fba:	ee07 3a90 	vmov	s15, r3
 8008fbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008fc2:	ed97 6a02 	vldr	s12, [r7, #8]
 8008fc6:	eddf 5a50 	vldr	s11, [pc, #320]	; 8009108 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008fca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008fce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008fd2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008fd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008fda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008fde:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008fe2:	e065      	b.n	80090b0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008fe4:	693b      	ldr	r3, [r7, #16]
 8008fe6:	ee07 3a90 	vmov	s15, r3
 8008fea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fee:	eddf 6a48 	vldr	s13, [pc, #288]	; 8009110 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008ff2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ff6:	4b40      	ldr	r3, [pc, #256]	; (80090f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ffa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ffe:	ee07 3a90 	vmov	s15, r3
 8009002:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009006:	ed97 6a02 	vldr	s12, [r7, #8]
 800900a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8009108 <HAL_RCC_GetSysClockFreq+0x2e4>
 800900e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009012:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009016:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800901a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800901e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009022:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009026:	e043      	b.n	80090b0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009028:	693b      	ldr	r3, [r7, #16]
 800902a:	ee07 3a90 	vmov	s15, r3
 800902e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009032:	eddf 6a38 	vldr	s13, [pc, #224]	; 8009114 <HAL_RCC_GetSysClockFreq+0x2f0>
 8009036:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800903a:	4b2f      	ldr	r3, [pc, #188]	; (80090f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800903c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800903e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009042:	ee07 3a90 	vmov	s15, r3
 8009046:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800904a:	ed97 6a02 	vldr	s12, [r7, #8]
 800904e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8009108 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009052:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009056:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800905a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800905e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009062:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009066:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800906a:	e021      	b.n	80090b0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800906c:	693b      	ldr	r3, [r7, #16]
 800906e:	ee07 3a90 	vmov	s15, r3
 8009072:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009076:	eddf 6a26 	vldr	s13, [pc, #152]	; 8009110 <HAL_RCC_GetSysClockFreq+0x2ec>
 800907a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800907e:	4b1e      	ldr	r3, [pc, #120]	; (80090f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009082:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009086:	ee07 3a90 	vmov	s15, r3
 800908a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800908e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009092:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8009108 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009096:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800909a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800909e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80090a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80090a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090aa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80090ae:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80090b0:	4b11      	ldr	r3, [pc, #68]	; (80090f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80090b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090b4:	0a5b      	lsrs	r3, r3, #9
 80090b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80090ba:	3301      	adds	r3, #1
 80090bc:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80090be:	683b      	ldr	r3, [r7, #0]
 80090c0:	ee07 3a90 	vmov	s15, r3
 80090c4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80090c8:	edd7 6a07 	vldr	s13, [r7, #28]
 80090cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80090d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80090d4:	ee17 3a90 	vmov	r3, s15
 80090d8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80090da:	e005      	b.n	80090e8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80090dc:	2300      	movs	r3, #0
 80090de:	61bb      	str	r3, [r7, #24]
      break;
 80090e0:	e002      	b.n	80090e8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80090e2:	4b07      	ldr	r3, [pc, #28]	; (8009100 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80090e4:	61bb      	str	r3, [r7, #24]
      break;
 80090e6:	bf00      	nop
  }

  return sysclockfreq;
 80090e8:	69bb      	ldr	r3, [r7, #24]
}
 80090ea:	4618      	mov	r0, r3
 80090ec:	3724      	adds	r7, #36	; 0x24
 80090ee:	46bd      	mov	sp, r7
 80090f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f4:	4770      	bx	lr
 80090f6:	bf00      	nop
 80090f8:	58024400 	.word	0x58024400
 80090fc:	03d09000 	.word	0x03d09000
 8009100:	003d0900 	.word	0x003d0900
 8009104:	017d7840 	.word	0x017d7840
 8009108:	46000000 	.word	0x46000000
 800910c:	4c742400 	.word	0x4c742400
 8009110:	4a742400 	.word	0x4a742400
 8009114:	4bbebc20 	.word	0x4bbebc20

08009118 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b082      	sub	sp, #8
 800911c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800911e:	f7ff fe81 	bl	8008e24 <HAL_RCC_GetSysClockFreq>
 8009122:	4602      	mov	r2, r0
 8009124:	4b10      	ldr	r3, [pc, #64]	; (8009168 <HAL_RCC_GetHCLKFreq+0x50>)
 8009126:	699b      	ldr	r3, [r3, #24]
 8009128:	0a1b      	lsrs	r3, r3, #8
 800912a:	f003 030f 	and.w	r3, r3, #15
 800912e:	490f      	ldr	r1, [pc, #60]	; (800916c <HAL_RCC_GetHCLKFreq+0x54>)
 8009130:	5ccb      	ldrb	r3, [r1, r3]
 8009132:	f003 031f 	and.w	r3, r3, #31
 8009136:	fa22 f303 	lsr.w	r3, r2, r3
 800913a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800913c:	4b0a      	ldr	r3, [pc, #40]	; (8009168 <HAL_RCC_GetHCLKFreq+0x50>)
 800913e:	699b      	ldr	r3, [r3, #24]
 8009140:	f003 030f 	and.w	r3, r3, #15
 8009144:	4a09      	ldr	r2, [pc, #36]	; (800916c <HAL_RCC_GetHCLKFreq+0x54>)
 8009146:	5cd3      	ldrb	r3, [r2, r3]
 8009148:	f003 031f 	and.w	r3, r3, #31
 800914c:	687a      	ldr	r2, [r7, #4]
 800914e:	fa22 f303 	lsr.w	r3, r2, r3
 8009152:	4a07      	ldr	r2, [pc, #28]	; (8009170 <HAL_RCC_GetHCLKFreq+0x58>)
 8009154:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009156:	4a07      	ldr	r2, [pc, #28]	; (8009174 <HAL_RCC_GetHCLKFreq+0x5c>)
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800915c:	4b04      	ldr	r3, [pc, #16]	; (8009170 <HAL_RCC_GetHCLKFreq+0x58>)
 800915e:	681b      	ldr	r3, [r3, #0]
}
 8009160:	4618      	mov	r0, r3
 8009162:	3708      	adds	r7, #8
 8009164:	46bd      	mov	sp, r7
 8009166:	bd80      	pop	{r7, pc}
 8009168:	58024400 	.word	0x58024400
 800916c:	08020e9c 	.word	0x08020e9c
 8009170:	24000004 	.word	0x24000004
 8009174:	24000000 	.word	0x24000000

08009178 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009178:	b580      	push	{r7, lr}
 800917a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800917c:	f7ff ffcc 	bl	8009118 <HAL_RCC_GetHCLKFreq>
 8009180:	4602      	mov	r2, r0
 8009182:	4b06      	ldr	r3, [pc, #24]	; (800919c <HAL_RCC_GetPCLK1Freq+0x24>)
 8009184:	69db      	ldr	r3, [r3, #28]
 8009186:	091b      	lsrs	r3, r3, #4
 8009188:	f003 0307 	and.w	r3, r3, #7
 800918c:	4904      	ldr	r1, [pc, #16]	; (80091a0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800918e:	5ccb      	ldrb	r3, [r1, r3]
 8009190:	f003 031f 	and.w	r3, r3, #31
 8009194:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8009198:	4618      	mov	r0, r3
 800919a:	bd80      	pop	{r7, pc}
 800919c:	58024400 	.word	0x58024400
 80091a0:	08020e9c 	.word	0x08020e9c

080091a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80091a4:	b580      	push	{r7, lr}
 80091a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80091a8:	f7ff ffb6 	bl	8009118 <HAL_RCC_GetHCLKFreq>
 80091ac:	4602      	mov	r2, r0
 80091ae:	4b06      	ldr	r3, [pc, #24]	; (80091c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80091b0:	69db      	ldr	r3, [r3, #28]
 80091b2:	0a1b      	lsrs	r3, r3, #8
 80091b4:	f003 0307 	and.w	r3, r3, #7
 80091b8:	4904      	ldr	r1, [pc, #16]	; (80091cc <HAL_RCC_GetPCLK2Freq+0x28>)
 80091ba:	5ccb      	ldrb	r3, [r1, r3]
 80091bc:	f003 031f 	and.w	r3, r3, #31
 80091c0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80091c4:	4618      	mov	r0, r3
 80091c6:	bd80      	pop	{r7, pc}
 80091c8:	58024400 	.word	0x58024400
 80091cc:	08020e9c 	.word	0x08020e9c

080091d0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80091d0:	b480      	push	{r7}
 80091d2:	b083      	sub	sp, #12
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
 80091d8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	223f      	movs	r2, #63	; 0x3f
 80091de:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80091e0:	4b1a      	ldr	r3, [pc, #104]	; (800924c <HAL_RCC_GetClockConfig+0x7c>)
 80091e2:	691b      	ldr	r3, [r3, #16]
 80091e4:	f003 0207 	and.w	r2, r3, #7
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80091ec:	4b17      	ldr	r3, [pc, #92]	; (800924c <HAL_RCC_GetClockConfig+0x7c>)
 80091ee:	699b      	ldr	r3, [r3, #24]
 80091f0:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80091f8:	4b14      	ldr	r3, [pc, #80]	; (800924c <HAL_RCC_GetClockConfig+0x7c>)
 80091fa:	699b      	ldr	r3, [r3, #24]
 80091fc:	f003 020f 	and.w	r2, r3, #15
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8009204:	4b11      	ldr	r3, [pc, #68]	; (800924c <HAL_RCC_GetClockConfig+0x7c>)
 8009206:	699b      	ldr	r3, [r3, #24]
 8009208:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8009210:	4b0e      	ldr	r3, [pc, #56]	; (800924c <HAL_RCC_GetClockConfig+0x7c>)
 8009212:	69db      	ldr	r3, [r3, #28]
 8009214:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800921c:	4b0b      	ldr	r3, [pc, #44]	; (800924c <HAL_RCC_GetClockConfig+0x7c>)
 800921e:	69db      	ldr	r3, [r3, #28]
 8009220:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8009228:	4b08      	ldr	r3, [pc, #32]	; (800924c <HAL_RCC_GetClockConfig+0x7c>)
 800922a:	6a1b      	ldr	r3, [r3, #32]
 800922c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8009234:	4b06      	ldr	r3, [pc, #24]	; (8009250 <HAL_RCC_GetClockConfig+0x80>)
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	f003 020f 	and.w	r2, r3, #15
 800923c:	683b      	ldr	r3, [r7, #0]
 800923e:	601a      	str	r2, [r3, #0]
}
 8009240:	bf00      	nop
 8009242:	370c      	adds	r7, #12
 8009244:	46bd      	mov	sp, r7
 8009246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924a:	4770      	bx	lr
 800924c:	58024400 	.word	0x58024400
 8009250:	52002000 	.word	0x52002000

08009254 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009254:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009258:	b0ca      	sub	sp, #296	; 0x128
 800925a:	af00      	add	r7, sp, #0
 800925c:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009260:	2300      	movs	r3, #0
 8009262:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009266:	2300      	movs	r3, #0
 8009268:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800926c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009274:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8009278:	2500      	movs	r5, #0
 800927a:	ea54 0305 	orrs.w	r3, r4, r5
 800927e:	d049      	beq.n	8009314 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8009280:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009284:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009286:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800928a:	d02f      	beq.n	80092ec <HAL_RCCEx_PeriphCLKConfig+0x98>
 800928c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009290:	d828      	bhi.n	80092e4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009292:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009296:	d01a      	beq.n	80092ce <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8009298:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800929c:	d822      	bhi.n	80092e4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d003      	beq.n	80092aa <HAL_RCCEx_PeriphCLKConfig+0x56>
 80092a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80092a6:	d007      	beq.n	80092b8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80092a8:	e01c      	b.n	80092e4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80092aa:	4bb8      	ldr	r3, [pc, #736]	; (800958c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80092ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092ae:	4ab7      	ldr	r2, [pc, #732]	; (800958c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80092b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80092b4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80092b6:	e01a      	b.n	80092ee <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80092b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80092bc:	3308      	adds	r3, #8
 80092be:	2102      	movs	r1, #2
 80092c0:	4618      	mov	r0, r3
 80092c2:	f002 fb61 	bl	800b988 <RCCEx_PLL2_Config>
 80092c6:	4603      	mov	r3, r0
 80092c8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80092cc:	e00f      	b.n	80092ee <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80092ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80092d2:	3328      	adds	r3, #40	; 0x28
 80092d4:	2102      	movs	r1, #2
 80092d6:	4618      	mov	r0, r3
 80092d8:	f002 fc08 	bl	800baec <RCCEx_PLL3_Config>
 80092dc:	4603      	mov	r3, r0
 80092de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80092e2:	e004      	b.n	80092ee <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80092e4:	2301      	movs	r3, #1
 80092e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80092ea:	e000      	b.n	80092ee <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80092ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80092ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d10a      	bne.n	800930c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80092f6:	4ba5      	ldr	r3, [pc, #660]	; (800958c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80092f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092fa:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80092fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009302:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009304:	4aa1      	ldr	r2, [pc, #644]	; (800958c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009306:	430b      	orrs	r3, r1
 8009308:	6513      	str	r3, [r2, #80]	; 0x50
 800930a:	e003      	b.n	8009314 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800930c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009310:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009314:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800931c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8009320:	f04f 0900 	mov.w	r9, #0
 8009324:	ea58 0309 	orrs.w	r3, r8, r9
 8009328:	d047      	beq.n	80093ba <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800932a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800932e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009330:	2b04      	cmp	r3, #4
 8009332:	d82a      	bhi.n	800938a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8009334:	a201      	add	r2, pc, #4	; (adr r2, 800933c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8009336:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800933a:	bf00      	nop
 800933c:	08009351 	.word	0x08009351
 8009340:	0800935f 	.word	0x0800935f
 8009344:	08009375 	.word	0x08009375
 8009348:	08009393 	.word	0x08009393
 800934c:	08009393 	.word	0x08009393
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009350:	4b8e      	ldr	r3, [pc, #568]	; (800958c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009354:	4a8d      	ldr	r2, [pc, #564]	; (800958c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009356:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800935a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800935c:	e01a      	b.n	8009394 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800935e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009362:	3308      	adds	r3, #8
 8009364:	2100      	movs	r1, #0
 8009366:	4618      	mov	r0, r3
 8009368:	f002 fb0e 	bl	800b988 <RCCEx_PLL2_Config>
 800936c:	4603      	mov	r3, r0
 800936e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009372:	e00f      	b.n	8009394 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009374:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009378:	3328      	adds	r3, #40	; 0x28
 800937a:	2100      	movs	r1, #0
 800937c:	4618      	mov	r0, r3
 800937e:	f002 fbb5 	bl	800baec <RCCEx_PLL3_Config>
 8009382:	4603      	mov	r3, r0
 8009384:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009388:	e004      	b.n	8009394 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800938a:	2301      	movs	r3, #1
 800938c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009390:	e000      	b.n	8009394 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8009392:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009394:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009398:	2b00      	cmp	r3, #0
 800939a:	d10a      	bne.n	80093b2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800939c:	4b7b      	ldr	r3, [pc, #492]	; (800958c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800939e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80093a0:	f023 0107 	bic.w	r1, r3, #7
 80093a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80093a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80093aa:	4a78      	ldr	r2, [pc, #480]	; (800958c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80093ac:	430b      	orrs	r3, r1
 80093ae:	6513      	str	r3, [r2, #80]	; 0x50
 80093b0:	e003      	b.n	80093ba <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80093b6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80093ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80093be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093c2:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 80093c6:	f04f 0b00 	mov.w	fp, #0
 80093ca:	ea5a 030b 	orrs.w	r3, sl, fp
 80093ce:	d04c      	beq.n	800946a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80093d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80093d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80093d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80093da:	d030      	beq.n	800943e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80093dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80093e0:	d829      	bhi.n	8009436 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80093e2:	2bc0      	cmp	r3, #192	; 0xc0
 80093e4:	d02d      	beq.n	8009442 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80093e6:	2bc0      	cmp	r3, #192	; 0xc0
 80093e8:	d825      	bhi.n	8009436 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80093ea:	2b80      	cmp	r3, #128	; 0x80
 80093ec:	d018      	beq.n	8009420 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80093ee:	2b80      	cmp	r3, #128	; 0x80
 80093f0:	d821      	bhi.n	8009436 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d002      	beq.n	80093fc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80093f6:	2b40      	cmp	r3, #64	; 0x40
 80093f8:	d007      	beq.n	800940a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80093fa:	e01c      	b.n	8009436 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80093fc:	4b63      	ldr	r3, [pc, #396]	; (800958c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80093fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009400:	4a62      	ldr	r2, [pc, #392]	; (800958c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009402:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009406:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009408:	e01c      	b.n	8009444 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800940a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800940e:	3308      	adds	r3, #8
 8009410:	2100      	movs	r1, #0
 8009412:	4618      	mov	r0, r3
 8009414:	f002 fab8 	bl	800b988 <RCCEx_PLL2_Config>
 8009418:	4603      	mov	r3, r0
 800941a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800941e:	e011      	b.n	8009444 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009420:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009424:	3328      	adds	r3, #40	; 0x28
 8009426:	2100      	movs	r1, #0
 8009428:	4618      	mov	r0, r3
 800942a:	f002 fb5f 	bl	800baec <RCCEx_PLL3_Config>
 800942e:	4603      	mov	r3, r0
 8009430:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009434:	e006      	b.n	8009444 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009436:	2301      	movs	r3, #1
 8009438:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800943c:	e002      	b.n	8009444 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800943e:	bf00      	nop
 8009440:	e000      	b.n	8009444 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8009442:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009444:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009448:	2b00      	cmp	r3, #0
 800944a:	d10a      	bne.n	8009462 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800944c:	4b4f      	ldr	r3, [pc, #316]	; (800958c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800944e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009450:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8009454:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009458:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800945a:	4a4c      	ldr	r2, [pc, #304]	; (800958c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800945c:	430b      	orrs	r3, r1
 800945e:	6513      	str	r3, [r2, #80]	; 0x50
 8009460:	e003      	b.n	800946a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009462:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009466:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800946a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800946e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009472:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8009476:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800947a:	2300      	movs	r3, #0
 800947c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8009480:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8009484:	460b      	mov	r3, r1
 8009486:	4313      	orrs	r3, r2
 8009488:	d053      	beq.n	8009532 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800948a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800948e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009492:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009496:	d035      	beq.n	8009504 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8009498:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800949c:	d82e      	bhi.n	80094fc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800949e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80094a2:	d031      	beq.n	8009508 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80094a4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80094a8:	d828      	bhi.n	80094fc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80094aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80094ae:	d01a      	beq.n	80094e6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80094b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80094b4:	d822      	bhi.n	80094fc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d003      	beq.n	80094c2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80094ba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80094be:	d007      	beq.n	80094d0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80094c0:	e01c      	b.n	80094fc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80094c2:	4b32      	ldr	r3, [pc, #200]	; (800958c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80094c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094c6:	4a31      	ldr	r2, [pc, #196]	; (800958c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80094c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80094cc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80094ce:	e01c      	b.n	800950a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80094d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80094d4:	3308      	adds	r3, #8
 80094d6:	2100      	movs	r1, #0
 80094d8:	4618      	mov	r0, r3
 80094da:	f002 fa55 	bl	800b988 <RCCEx_PLL2_Config>
 80094de:	4603      	mov	r3, r0
 80094e0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80094e4:	e011      	b.n	800950a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80094e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80094ea:	3328      	adds	r3, #40	; 0x28
 80094ec:	2100      	movs	r1, #0
 80094ee:	4618      	mov	r0, r3
 80094f0:	f002 fafc 	bl	800baec <RCCEx_PLL3_Config>
 80094f4:	4603      	mov	r3, r0
 80094f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80094fa:	e006      	b.n	800950a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80094fc:	2301      	movs	r3, #1
 80094fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009502:	e002      	b.n	800950a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8009504:	bf00      	nop
 8009506:	e000      	b.n	800950a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8009508:	bf00      	nop
    }

    if (ret == HAL_OK)
 800950a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800950e:	2b00      	cmp	r3, #0
 8009510:	d10b      	bne.n	800952a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8009512:	4b1e      	ldr	r3, [pc, #120]	; (800958c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009514:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009516:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800951a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800951e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009522:	4a1a      	ldr	r2, [pc, #104]	; (800958c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009524:	430b      	orrs	r3, r1
 8009526:	6593      	str	r3, [r2, #88]	; 0x58
 8009528:	e003      	b.n	8009532 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800952a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800952e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009532:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800953a:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800953e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009542:	2300      	movs	r3, #0
 8009544:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009548:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800954c:	460b      	mov	r3, r1
 800954e:	4313      	orrs	r3, r2
 8009550:	d056      	beq.n	8009600 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8009552:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009556:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800955a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800955e:	d038      	beq.n	80095d2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8009560:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009564:	d831      	bhi.n	80095ca <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009566:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800956a:	d034      	beq.n	80095d6 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800956c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009570:	d82b      	bhi.n	80095ca <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009572:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009576:	d01d      	beq.n	80095b4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8009578:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800957c:	d825      	bhi.n	80095ca <HAL_RCCEx_PeriphCLKConfig+0x376>
 800957e:	2b00      	cmp	r3, #0
 8009580:	d006      	beq.n	8009590 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8009582:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009586:	d00a      	beq.n	800959e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8009588:	e01f      	b.n	80095ca <HAL_RCCEx_PeriphCLKConfig+0x376>
 800958a:	bf00      	nop
 800958c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009590:	4ba2      	ldr	r3, [pc, #648]	; (800981c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009594:	4aa1      	ldr	r2, [pc, #644]	; (800981c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009596:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800959a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800959c:	e01c      	b.n	80095d8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800959e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80095a2:	3308      	adds	r3, #8
 80095a4:	2100      	movs	r1, #0
 80095a6:	4618      	mov	r0, r3
 80095a8:	f002 f9ee 	bl	800b988 <RCCEx_PLL2_Config>
 80095ac:	4603      	mov	r3, r0
 80095ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80095b2:	e011      	b.n	80095d8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80095b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80095b8:	3328      	adds	r3, #40	; 0x28
 80095ba:	2100      	movs	r1, #0
 80095bc:	4618      	mov	r0, r3
 80095be:	f002 fa95 	bl	800baec <RCCEx_PLL3_Config>
 80095c2:	4603      	mov	r3, r0
 80095c4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80095c8:	e006      	b.n	80095d8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80095ca:	2301      	movs	r3, #1
 80095cc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80095d0:	e002      	b.n	80095d8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80095d2:	bf00      	nop
 80095d4:	e000      	b.n	80095d8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80095d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80095d8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d10b      	bne.n	80095f8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80095e0:	4b8e      	ldr	r3, [pc, #568]	; (800981c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80095e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095e4:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80095e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80095ec:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80095f0:	4a8a      	ldr	r2, [pc, #552]	; (800981c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80095f2:	430b      	orrs	r3, r1
 80095f4:	6593      	str	r3, [r2, #88]	; 0x58
 80095f6:	e003      	b.n	8009600 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095f8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80095fc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8009600:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009608:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800960c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009610:	2300      	movs	r3, #0
 8009612:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009616:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800961a:	460b      	mov	r3, r1
 800961c:	4313      	orrs	r3, r2
 800961e:	d03a      	beq.n	8009696 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8009620:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009624:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009626:	2b30      	cmp	r3, #48	; 0x30
 8009628:	d01f      	beq.n	800966a <HAL_RCCEx_PeriphCLKConfig+0x416>
 800962a:	2b30      	cmp	r3, #48	; 0x30
 800962c:	d819      	bhi.n	8009662 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800962e:	2b20      	cmp	r3, #32
 8009630:	d00c      	beq.n	800964c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8009632:	2b20      	cmp	r3, #32
 8009634:	d815      	bhi.n	8009662 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8009636:	2b00      	cmp	r3, #0
 8009638:	d019      	beq.n	800966e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800963a:	2b10      	cmp	r3, #16
 800963c:	d111      	bne.n	8009662 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800963e:	4b77      	ldr	r3, [pc, #476]	; (800981c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009642:	4a76      	ldr	r2, [pc, #472]	; (800981c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009644:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009648:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800964a:	e011      	b.n	8009670 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800964c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009650:	3308      	adds	r3, #8
 8009652:	2102      	movs	r1, #2
 8009654:	4618      	mov	r0, r3
 8009656:	f002 f997 	bl	800b988 <RCCEx_PLL2_Config>
 800965a:	4603      	mov	r3, r0
 800965c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8009660:	e006      	b.n	8009670 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009662:	2301      	movs	r3, #1
 8009664:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009668:	e002      	b.n	8009670 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800966a:	bf00      	nop
 800966c:	e000      	b.n	8009670 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800966e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009670:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009674:	2b00      	cmp	r3, #0
 8009676:	d10a      	bne.n	800968e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009678:	4b68      	ldr	r3, [pc, #416]	; (800981c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800967a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800967c:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8009680:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009684:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009686:	4a65      	ldr	r2, [pc, #404]	; (800981c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009688:	430b      	orrs	r3, r1
 800968a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800968c:	e003      	b.n	8009696 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800968e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009692:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009696:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800969a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800969e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80096a2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80096a6:	2300      	movs	r3, #0
 80096a8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80096ac:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 80096b0:	460b      	mov	r3, r1
 80096b2:	4313      	orrs	r3, r2
 80096b4:	d051      	beq.n	800975a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80096b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80096ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80096bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80096c0:	d035      	beq.n	800972e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80096c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80096c6:	d82e      	bhi.n	8009726 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80096c8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80096cc:	d031      	beq.n	8009732 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80096ce:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80096d2:	d828      	bhi.n	8009726 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80096d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80096d8:	d01a      	beq.n	8009710 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80096da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80096de:	d822      	bhi.n	8009726 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d003      	beq.n	80096ec <HAL_RCCEx_PeriphCLKConfig+0x498>
 80096e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80096e8:	d007      	beq.n	80096fa <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80096ea:	e01c      	b.n	8009726 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80096ec:	4b4b      	ldr	r3, [pc, #300]	; (800981c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80096ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096f0:	4a4a      	ldr	r2, [pc, #296]	; (800981c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80096f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80096f6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80096f8:	e01c      	b.n	8009734 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80096fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80096fe:	3308      	adds	r3, #8
 8009700:	2100      	movs	r1, #0
 8009702:	4618      	mov	r0, r3
 8009704:	f002 f940 	bl	800b988 <RCCEx_PLL2_Config>
 8009708:	4603      	mov	r3, r0
 800970a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800970e:	e011      	b.n	8009734 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009710:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009714:	3328      	adds	r3, #40	; 0x28
 8009716:	2100      	movs	r1, #0
 8009718:	4618      	mov	r0, r3
 800971a:	f002 f9e7 	bl	800baec <RCCEx_PLL3_Config>
 800971e:	4603      	mov	r3, r0
 8009720:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009724:	e006      	b.n	8009734 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009726:	2301      	movs	r3, #1
 8009728:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800972c:	e002      	b.n	8009734 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800972e:	bf00      	nop
 8009730:	e000      	b.n	8009734 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8009732:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009734:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009738:	2b00      	cmp	r3, #0
 800973a:	d10a      	bne.n	8009752 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800973c:	4b37      	ldr	r3, [pc, #220]	; (800981c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800973e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009740:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8009744:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009748:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800974a:	4a34      	ldr	r2, [pc, #208]	; (800981c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800974c:	430b      	orrs	r3, r1
 800974e:	6513      	str	r3, [r2, #80]	; 0x50
 8009750:	e003      	b.n	800975a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009752:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009756:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800975a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800975e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009762:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8009766:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800976a:	2300      	movs	r3, #0
 800976c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009770:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8009774:	460b      	mov	r3, r1
 8009776:	4313      	orrs	r3, r2
 8009778:	d056      	beq.n	8009828 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800977a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800977e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009780:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009784:	d033      	beq.n	80097ee <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8009786:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800978a:	d82c      	bhi.n	80097e6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800978c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009790:	d02f      	beq.n	80097f2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8009792:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009796:	d826      	bhi.n	80097e6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009798:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800979c:	d02b      	beq.n	80097f6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800979e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80097a2:	d820      	bhi.n	80097e6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80097a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80097a8:	d012      	beq.n	80097d0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80097aa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80097ae:	d81a      	bhi.n	80097e6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d022      	beq.n	80097fa <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80097b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80097b8:	d115      	bne.n	80097e6 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80097ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80097be:	3308      	adds	r3, #8
 80097c0:	2101      	movs	r1, #1
 80097c2:	4618      	mov	r0, r3
 80097c4:	f002 f8e0 	bl	800b988 <RCCEx_PLL2_Config>
 80097c8:	4603      	mov	r3, r0
 80097ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80097ce:	e015      	b.n	80097fc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80097d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80097d4:	3328      	adds	r3, #40	; 0x28
 80097d6:	2101      	movs	r1, #1
 80097d8:	4618      	mov	r0, r3
 80097da:	f002 f987 	bl	800baec <RCCEx_PLL3_Config>
 80097de:	4603      	mov	r3, r0
 80097e0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80097e4:	e00a      	b.n	80097fc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80097e6:	2301      	movs	r3, #1
 80097e8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80097ec:	e006      	b.n	80097fc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80097ee:	bf00      	nop
 80097f0:	e004      	b.n	80097fc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80097f2:	bf00      	nop
 80097f4:	e002      	b.n	80097fc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80097f6:	bf00      	nop
 80097f8:	e000      	b.n	80097fc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80097fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80097fc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009800:	2b00      	cmp	r3, #0
 8009802:	d10d      	bne.n	8009820 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009804:	4b05      	ldr	r3, [pc, #20]	; (800981c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009806:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009808:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800980c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009810:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009812:	4a02      	ldr	r2, [pc, #8]	; (800981c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009814:	430b      	orrs	r3, r1
 8009816:	6513      	str	r3, [r2, #80]	; 0x50
 8009818:	e006      	b.n	8009828 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800981a:	bf00      	nop
 800981c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009820:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009824:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009828:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800982c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009830:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8009834:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009838:	2300      	movs	r3, #0
 800983a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800983e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8009842:	460b      	mov	r3, r1
 8009844:	4313      	orrs	r3, r2
 8009846:	d055      	beq.n	80098f4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8009848:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800984c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009850:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009854:	d033      	beq.n	80098be <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8009856:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800985a:	d82c      	bhi.n	80098b6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800985c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009860:	d02f      	beq.n	80098c2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8009862:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009866:	d826      	bhi.n	80098b6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009868:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800986c:	d02b      	beq.n	80098c6 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800986e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009872:	d820      	bhi.n	80098b6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009874:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009878:	d012      	beq.n	80098a0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800987a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800987e:	d81a      	bhi.n	80098b6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009880:	2b00      	cmp	r3, #0
 8009882:	d022      	beq.n	80098ca <HAL_RCCEx_PeriphCLKConfig+0x676>
 8009884:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009888:	d115      	bne.n	80098b6 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800988a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800988e:	3308      	adds	r3, #8
 8009890:	2101      	movs	r1, #1
 8009892:	4618      	mov	r0, r3
 8009894:	f002 f878 	bl	800b988 <RCCEx_PLL2_Config>
 8009898:	4603      	mov	r3, r0
 800989a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800989e:	e015      	b.n	80098cc <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80098a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098a4:	3328      	adds	r3, #40	; 0x28
 80098a6:	2101      	movs	r1, #1
 80098a8:	4618      	mov	r0, r3
 80098aa:	f002 f91f 	bl	800baec <RCCEx_PLL3_Config>
 80098ae:	4603      	mov	r3, r0
 80098b0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80098b4:	e00a      	b.n	80098cc <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80098b6:	2301      	movs	r3, #1
 80098b8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80098bc:	e006      	b.n	80098cc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80098be:	bf00      	nop
 80098c0:	e004      	b.n	80098cc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80098c2:	bf00      	nop
 80098c4:	e002      	b.n	80098cc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80098c6:	bf00      	nop
 80098c8:	e000      	b.n	80098cc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80098ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80098cc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d10b      	bne.n	80098ec <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80098d4:	4ba3      	ldr	r3, [pc, #652]	; (8009b64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80098d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80098d8:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80098dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098e0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80098e4:	4a9f      	ldr	r2, [pc, #636]	; (8009b64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80098e6:	430b      	orrs	r3, r1
 80098e8:	6593      	str	r3, [r2, #88]	; 0x58
 80098ea:	e003      	b.n	80098f4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098ec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80098f0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80098f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098fc:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8009900:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009904:	2300      	movs	r3, #0
 8009906:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800990a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800990e:	460b      	mov	r3, r1
 8009910:	4313      	orrs	r3, r2
 8009912:	d037      	beq.n	8009984 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8009914:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009918:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800991a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800991e:	d00e      	beq.n	800993e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8009920:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009924:	d816      	bhi.n	8009954 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8009926:	2b00      	cmp	r3, #0
 8009928:	d018      	beq.n	800995c <HAL_RCCEx_PeriphCLKConfig+0x708>
 800992a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800992e:	d111      	bne.n	8009954 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009930:	4b8c      	ldr	r3, [pc, #560]	; (8009b64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009934:	4a8b      	ldr	r2, [pc, #556]	; (8009b64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009936:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800993a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800993c:	e00f      	b.n	800995e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800993e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009942:	3308      	adds	r3, #8
 8009944:	2101      	movs	r1, #1
 8009946:	4618      	mov	r0, r3
 8009948:	f002 f81e 	bl	800b988 <RCCEx_PLL2_Config>
 800994c:	4603      	mov	r3, r0
 800994e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009952:	e004      	b.n	800995e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009954:	2301      	movs	r3, #1
 8009956:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800995a:	e000      	b.n	800995e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800995c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800995e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009962:	2b00      	cmp	r3, #0
 8009964:	d10a      	bne.n	800997c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009966:	4b7f      	ldr	r3, [pc, #508]	; (8009b64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009968:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800996a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800996e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009972:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009974:	4a7b      	ldr	r2, [pc, #492]	; (8009b64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009976:	430b      	orrs	r3, r1
 8009978:	6513      	str	r3, [r2, #80]	; 0x50
 800997a:	e003      	b.n	8009984 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800997c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009980:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009984:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800998c:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8009990:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009994:	2300      	movs	r3, #0
 8009996:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800999a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800999e:	460b      	mov	r3, r1
 80099a0:	4313      	orrs	r3, r2
 80099a2:	d039      	beq.n	8009a18 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80099a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80099aa:	2b03      	cmp	r3, #3
 80099ac:	d81c      	bhi.n	80099e8 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80099ae:	a201      	add	r2, pc, #4	; (adr r2, 80099b4 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80099b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099b4:	080099f1 	.word	0x080099f1
 80099b8:	080099c5 	.word	0x080099c5
 80099bc:	080099d3 	.word	0x080099d3
 80099c0:	080099f1 	.word	0x080099f1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80099c4:	4b67      	ldr	r3, [pc, #412]	; (8009b64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80099c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099c8:	4a66      	ldr	r2, [pc, #408]	; (8009b64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80099ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80099ce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80099d0:	e00f      	b.n	80099f2 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80099d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099d6:	3308      	adds	r3, #8
 80099d8:	2102      	movs	r1, #2
 80099da:	4618      	mov	r0, r3
 80099dc:	f001 ffd4 	bl	800b988 <RCCEx_PLL2_Config>
 80099e0:	4603      	mov	r3, r0
 80099e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80099e6:	e004      	b.n	80099f2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80099e8:	2301      	movs	r3, #1
 80099ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80099ee:	e000      	b.n	80099f2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80099f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80099f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d10a      	bne.n	8009a10 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80099fa:	4b5a      	ldr	r3, [pc, #360]	; (8009b64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80099fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80099fe:	f023 0103 	bic.w	r1, r3, #3
 8009a02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009a08:	4a56      	ldr	r2, [pc, #344]	; (8009b64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009a0a:	430b      	orrs	r3, r1
 8009a0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009a0e:	e003      	b.n	8009a18 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a10:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009a14:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009a18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a20:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8009a24:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009a28:	2300      	movs	r3, #0
 8009a2a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009a2e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8009a32:	460b      	mov	r3, r1
 8009a34:	4313      	orrs	r3, r2
 8009a36:	f000 809f 	beq.w	8009b78 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009a3a:	4b4b      	ldr	r3, [pc, #300]	; (8009b68 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	4a4a      	ldr	r2, [pc, #296]	; (8009b68 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009a40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009a44:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009a46:	f7fa fe97 	bl	8004778 <HAL_GetTick>
 8009a4a:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009a4e:	e00b      	b.n	8009a68 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009a50:	f7fa fe92 	bl	8004778 <HAL_GetTick>
 8009a54:	4602      	mov	r2, r0
 8009a56:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8009a5a:	1ad3      	subs	r3, r2, r3
 8009a5c:	2b64      	cmp	r3, #100	; 0x64
 8009a5e:	d903      	bls.n	8009a68 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8009a60:	2303      	movs	r3, #3
 8009a62:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009a66:	e005      	b.n	8009a74 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009a68:	4b3f      	ldr	r3, [pc, #252]	; (8009b68 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d0ed      	beq.n	8009a50 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8009a74:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d179      	bne.n	8009b70 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009a7c:	4b39      	ldr	r3, [pc, #228]	; (8009b64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009a7e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009a80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a84:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009a88:	4053      	eors	r3, r2
 8009a8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d015      	beq.n	8009abe <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009a92:	4b34      	ldr	r3, [pc, #208]	; (8009b64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009a94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009a9a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009a9e:	4b31      	ldr	r3, [pc, #196]	; (8009b64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009aa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009aa2:	4a30      	ldr	r2, [pc, #192]	; (8009b64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009aa4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009aa8:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009aaa:	4b2e      	ldr	r3, [pc, #184]	; (8009b64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009aac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009aae:	4a2d      	ldr	r2, [pc, #180]	; (8009b64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009ab0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009ab4:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009ab6:	4a2b      	ldr	r2, [pc, #172]	; (8009b64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009ab8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009abc:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009abe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ac2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009ac6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009aca:	d118      	bne.n	8009afe <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009acc:	f7fa fe54 	bl	8004778 <HAL_GetTick>
 8009ad0:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009ad4:	e00d      	b.n	8009af2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009ad6:	f7fa fe4f 	bl	8004778 <HAL_GetTick>
 8009ada:	4602      	mov	r2, r0
 8009adc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8009ae0:	1ad2      	subs	r2, r2, r3
 8009ae2:	f241 3388 	movw	r3, #5000	; 0x1388
 8009ae6:	429a      	cmp	r2, r3
 8009ae8:	d903      	bls.n	8009af2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8009aea:	2303      	movs	r3, #3
 8009aec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8009af0:	e005      	b.n	8009afe <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009af2:	4b1c      	ldr	r3, [pc, #112]	; (8009b64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009af4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009af6:	f003 0302 	and.w	r3, r3, #2
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d0eb      	beq.n	8009ad6 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8009afe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d129      	bne.n	8009b5a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009b06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b0a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009b0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009b12:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009b16:	d10e      	bne.n	8009b36 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8009b18:	4b12      	ldr	r3, [pc, #72]	; (8009b64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009b1a:	691b      	ldr	r3, [r3, #16]
 8009b1c:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8009b20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b24:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009b28:	091a      	lsrs	r2, r3, #4
 8009b2a:	4b10      	ldr	r3, [pc, #64]	; (8009b6c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8009b2c:	4013      	ands	r3, r2
 8009b2e:	4a0d      	ldr	r2, [pc, #52]	; (8009b64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009b30:	430b      	orrs	r3, r1
 8009b32:	6113      	str	r3, [r2, #16]
 8009b34:	e005      	b.n	8009b42 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8009b36:	4b0b      	ldr	r3, [pc, #44]	; (8009b64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009b38:	691b      	ldr	r3, [r3, #16]
 8009b3a:	4a0a      	ldr	r2, [pc, #40]	; (8009b64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009b3c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009b40:	6113      	str	r3, [r2, #16]
 8009b42:	4b08      	ldr	r3, [pc, #32]	; (8009b64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009b44:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8009b46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b4a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009b4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009b52:	4a04      	ldr	r2, [pc, #16]	; (8009b64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009b54:	430b      	orrs	r3, r1
 8009b56:	6713      	str	r3, [r2, #112]	; 0x70
 8009b58:	e00e      	b.n	8009b78 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009b5a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009b5e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8009b62:	e009      	b.n	8009b78 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8009b64:	58024400 	.word	0x58024400
 8009b68:	58024800 	.word	0x58024800
 8009b6c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b70:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009b74:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009b78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b80:	f002 0301 	and.w	r3, r2, #1
 8009b84:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009b88:	2300      	movs	r3, #0
 8009b8a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009b8e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009b92:	460b      	mov	r3, r1
 8009b94:	4313      	orrs	r3, r2
 8009b96:	f000 8089 	beq.w	8009cac <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8009b9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b9e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009ba0:	2b28      	cmp	r3, #40	; 0x28
 8009ba2:	d86b      	bhi.n	8009c7c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8009ba4:	a201      	add	r2, pc, #4	; (adr r2, 8009bac <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009ba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009baa:	bf00      	nop
 8009bac:	08009c85 	.word	0x08009c85
 8009bb0:	08009c7d 	.word	0x08009c7d
 8009bb4:	08009c7d 	.word	0x08009c7d
 8009bb8:	08009c7d 	.word	0x08009c7d
 8009bbc:	08009c7d 	.word	0x08009c7d
 8009bc0:	08009c7d 	.word	0x08009c7d
 8009bc4:	08009c7d 	.word	0x08009c7d
 8009bc8:	08009c7d 	.word	0x08009c7d
 8009bcc:	08009c51 	.word	0x08009c51
 8009bd0:	08009c7d 	.word	0x08009c7d
 8009bd4:	08009c7d 	.word	0x08009c7d
 8009bd8:	08009c7d 	.word	0x08009c7d
 8009bdc:	08009c7d 	.word	0x08009c7d
 8009be0:	08009c7d 	.word	0x08009c7d
 8009be4:	08009c7d 	.word	0x08009c7d
 8009be8:	08009c7d 	.word	0x08009c7d
 8009bec:	08009c67 	.word	0x08009c67
 8009bf0:	08009c7d 	.word	0x08009c7d
 8009bf4:	08009c7d 	.word	0x08009c7d
 8009bf8:	08009c7d 	.word	0x08009c7d
 8009bfc:	08009c7d 	.word	0x08009c7d
 8009c00:	08009c7d 	.word	0x08009c7d
 8009c04:	08009c7d 	.word	0x08009c7d
 8009c08:	08009c7d 	.word	0x08009c7d
 8009c0c:	08009c85 	.word	0x08009c85
 8009c10:	08009c7d 	.word	0x08009c7d
 8009c14:	08009c7d 	.word	0x08009c7d
 8009c18:	08009c7d 	.word	0x08009c7d
 8009c1c:	08009c7d 	.word	0x08009c7d
 8009c20:	08009c7d 	.word	0x08009c7d
 8009c24:	08009c7d 	.word	0x08009c7d
 8009c28:	08009c7d 	.word	0x08009c7d
 8009c2c:	08009c85 	.word	0x08009c85
 8009c30:	08009c7d 	.word	0x08009c7d
 8009c34:	08009c7d 	.word	0x08009c7d
 8009c38:	08009c7d 	.word	0x08009c7d
 8009c3c:	08009c7d 	.word	0x08009c7d
 8009c40:	08009c7d 	.word	0x08009c7d
 8009c44:	08009c7d 	.word	0x08009c7d
 8009c48:	08009c7d 	.word	0x08009c7d
 8009c4c:	08009c85 	.word	0x08009c85
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009c50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c54:	3308      	adds	r3, #8
 8009c56:	2101      	movs	r1, #1
 8009c58:	4618      	mov	r0, r3
 8009c5a:	f001 fe95 	bl	800b988 <RCCEx_PLL2_Config>
 8009c5e:	4603      	mov	r3, r0
 8009c60:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009c64:	e00f      	b.n	8009c86 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009c66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c6a:	3328      	adds	r3, #40	; 0x28
 8009c6c:	2101      	movs	r1, #1
 8009c6e:	4618      	mov	r0, r3
 8009c70:	f001 ff3c 	bl	800baec <RCCEx_PLL3_Config>
 8009c74:	4603      	mov	r3, r0
 8009c76:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009c7a:	e004      	b.n	8009c86 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009c7c:	2301      	movs	r3, #1
 8009c7e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009c82:	e000      	b.n	8009c86 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8009c84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009c86:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d10a      	bne.n	8009ca4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009c8e:	4bbf      	ldr	r3, [pc, #764]	; (8009f8c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009c90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c92:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8009c96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c9a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009c9c:	4abb      	ldr	r2, [pc, #748]	; (8009f8c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009c9e:	430b      	orrs	r3, r1
 8009ca0:	6553      	str	r3, [r2, #84]	; 0x54
 8009ca2:	e003      	b.n	8009cac <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ca4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009ca8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009cac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cb4:	f002 0302 	and.w	r3, r2, #2
 8009cb8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009cbc:	2300      	movs	r3, #0
 8009cbe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009cc2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8009cc6:	460b      	mov	r3, r1
 8009cc8:	4313      	orrs	r3, r2
 8009cca:	d041      	beq.n	8009d50 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8009ccc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009cd0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009cd2:	2b05      	cmp	r3, #5
 8009cd4:	d824      	bhi.n	8009d20 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8009cd6:	a201      	add	r2, pc, #4	; (adr r2, 8009cdc <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8009cd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cdc:	08009d29 	.word	0x08009d29
 8009ce0:	08009cf5 	.word	0x08009cf5
 8009ce4:	08009d0b 	.word	0x08009d0b
 8009ce8:	08009d29 	.word	0x08009d29
 8009cec:	08009d29 	.word	0x08009d29
 8009cf0:	08009d29 	.word	0x08009d29
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009cf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009cf8:	3308      	adds	r3, #8
 8009cfa:	2101      	movs	r1, #1
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	f001 fe43 	bl	800b988 <RCCEx_PLL2_Config>
 8009d02:	4603      	mov	r3, r0
 8009d04:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009d08:	e00f      	b.n	8009d2a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009d0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d0e:	3328      	adds	r3, #40	; 0x28
 8009d10:	2101      	movs	r1, #1
 8009d12:	4618      	mov	r0, r3
 8009d14:	f001 feea 	bl	800baec <RCCEx_PLL3_Config>
 8009d18:	4603      	mov	r3, r0
 8009d1a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009d1e:	e004      	b.n	8009d2a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009d20:	2301      	movs	r3, #1
 8009d22:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009d26:	e000      	b.n	8009d2a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8009d28:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009d2a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d10a      	bne.n	8009d48 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009d32:	4b96      	ldr	r3, [pc, #600]	; (8009f8c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009d34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d36:	f023 0107 	bic.w	r1, r3, #7
 8009d3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d3e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009d40:	4a92      	ldr	r2, [pc, #584]	; (8009f8c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009d42:	430b      	orrs	r3, r1
 8009d44:	6553      	str	r3, [r2, #84]	; 0x54
 8009d46:	e003      	b.n	8009d50 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d48:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009d4c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009d50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d58:	f002 0304 	and.w	r3, r2, #4
 8009d5c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009d60:	2300      	movs	r3, #0
 8009d62:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009d66:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8009d6a:	460b      	mov	r3, r1
 8009d6c:	4313      	orrs	r3, r2
 8009d6e:	d044      	beq.n	8009dfa <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8009d70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009d78:	2b05      	cmp	r3, #5
 8009d7a:	d825      	bhi.n	8009dc8 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8009d7c:	a201      	add	r2, pc, #4	; (adr r2, 8009d84 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8009d7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d82:	bf00      	nop
 8009d84:	08009dd1 	.word	0x08009dd1
 8009d88:	08009d9d 	.word	0x08009d9d
 8009d8c:	08009db3 	.word	0x08009db3
 8009d90:	08009dd1 	.word	0x08009dd1
 8009d94:	08009dd1 	.word	0x08009dd1
 8009d98:	08009dd1 	.word	0x08009dd1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009d9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009da0:	3308      	adds	r3, #8
 8009da2:	2101      	movs	r1, #1
 8009da4:	4618      	mov	r0, r3
 8009da6:	f001 fdef 	bl	800b988 <RCCEx_PLL2_Config>
 8009daa:	4603      	mov	r3, r0
 8009dac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009db0:	e00f      	b.n	8009dd2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009db2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009db6:	3328      	adds	r3, #40	; 0x28
 8009db8:	2101      	movs	r1, #1
 8009dba:	4618      	mov	r0, r3
 8009dbc:	f001 fe96 	bl	800baec <RCCEx_PLL3_Config>
 8009dc0:	4603      	mov	r3, r0
 8009dc2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009dc6:	e004      	b.n	8009dd2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009dc8:	2301      	movs	r3, #1
 8009dca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009dce:	e000      	b.n	8009dd2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8009dd0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009dd2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d10b      	bne.n	8009df2 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009dda:	4b6c      	ldr	r3, [pc, #432]	; (8009f8c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009ddc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009dde:	f023 0107 	bic.w	r1, r3, #7
 8009de2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009de6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009dea:	4a68      	ldr	r2, [pc, #416]	; (8009f8c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009dec:	430b      	orrs	r3, r1
 8009dee:	6593      	str	r3, [r2, #88]	; 0x58
 8009df0:	e003      	b.n	8009dfa <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009df2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009df6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009dfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e02:	f002 0320 	and.w	r3, r2, #32
 8009e06:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009e0a:	2300      	movs	r3, #0
 8009e0c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009e10:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009e14:	460b      	mov	r3, r1
 8009e16:	4313      	orrs	r3, r2
 8009e18:	d055      	beq.n	8009ec6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8009e1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009e22:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009e26:	d033      	beq.n	8009e90 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8009e28:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009e2c:	d82c      	bhi.n	8009e88 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009e2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e32:	d02f      	beq.n	8009e94 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8009e34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e38:	d826      	bhi.n	8009e88 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009e3a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009e3e:	d02b      	beq.n	8009e98 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8009e40:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009e44:	d820      	bhi.n	8009e88 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009e46:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009e4a:	d012      	beq.n	8009e72 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8009e4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009e50:	d81a      	bhi.n	8009e88 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d022      	beq.n	8009e9c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8009e56:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009e5a:	d115      	bne.n	8009e88 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009e5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e60:	3308      	adds	r3, #8
 8009e62:	2100      	movs	r1, #0
 8009e64:	4618      	mov	r0, r3
 8009e66:	f001 fd8f 	bl	800b988 <RCCEx_PLL2_Config>
 8009e6a:	4603      	mov	r3, r0
 8009e6c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009e70:	e015      	b.n	8009e9e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009e72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e76:	3328      	adds	r3, #40	; 0x28
 8009e78:	2102      	movs	r1, #2
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	f001 fe36 	bl	800baec <RCCEx_PLL3_Config>
 8009e80:	4603      	mov	r3, r0
 8009e82:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009e86:	e00a      	b.n	8009e9e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009e88:	2301      	movs	r3, #1
 8009e8a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009e8e:	e006      	b.n	8009e9e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009e90:	bf00      	nop
 8009e92:	e004      	b.n	8009e9e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009e94:	bf00      	nop
 8009e96:	e002      	b.n	8009e9e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009e98:	bf00      	nop
 8009e9a:	e000      	b.n	8009e9e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009e9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009e9e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d10b      	bne.n	8009ebe <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009ea6:	4b39      	ldr	r3, [pc, #228]	; (8009f8c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009ea8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009eaa:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8009eae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009eb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009eb6:	4a35      	ldr	r2, [pc, #212]	; (8009f8c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009eb8:	430b      	orrs	r3, r1
 8009eba:	6553      	str	r3, [r2, #84]	; 0x54
 8009ebc:	e003      	b.n	8009ec6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ebe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009ec2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009ec6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ece:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8009ed2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009ed6:	2300      	movs	r3, #0
 8009ed8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009edc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8009ee0:	460b      	mov	r3, r1
 8009ee2:	4313      	orrs	r3, r2
 8009ee4:	d058      	beq.n	8009f98 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8009ee6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009eea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009eee:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009ef2:	d033      	beq.n	8009f5c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8009ef4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009ef8:	d82c      	bhi.n	8009f54 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009efa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009efe:	d02f      	beq.n	8009f60 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8009f00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f04:	d826      	bhi.n	8009f54 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009f06:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009f0a:	d02b      	beq.n	8009f64 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8009f0c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009f10:	d820      	bhi.n	8009f54 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009f12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009f16:	d012      	beq.n	8009f3e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8009f18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009f1c:	d81a      	bhi.n	8009f54 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d022      	beq.n	8009f68 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8009f22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009f26:	d115      	bne.n	8009f54 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009f28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f2c:	3308      	adds	r3, #8
 8009f2e:	2100      	movs	r1, #0
 8009f30:	4618      	mov	r0, r3
 8009f32:	f001 fd29 	bl	800b988 <RCCEx_PLL2_Config>
 8009f36:	4603      	mov	r3, r0
 8009f38:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009f3c:	e015      	b.n	8009f6a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009f3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f42:	3328      	adds	r3, #40	; 0x28
 8009f44:	2102      	movs	r1, #2
 8009f46:	4618      	mov	r0, r3
 8009f48:	f001 fdd0 	bl	800baec <RCCEx_PLL3_Config>
 8009f4c:	4603      	mov	r3, r0
 8009f4e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009f52:	e00a      	b.n	8009f6a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009f54:	2301      	movs	r3, #1
 8009f56:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009f5a:	e006      	b.n	8009f6a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009f5c:	bf00      	nop
 8009f5e:	e004      	b.n	8009f6a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009f60:	bf00      	nop
 8009f62:	e002      	b.n	8009f6a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009f64:	bf00      	nop
 8009f66:	e000      	b.n	8009f6a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009f68:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009f6a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d10e      	bne.n	8009f90 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009f72:	4b06      	ldr	r3, [pc, #24]	; (8009f8c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009f74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f76:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8009f7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f7e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009f82:	4a02      	ldr	r2, [pc, #8]	; (8009f8c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009f84:	430b      	orrs	r3, r1
 8009f86:	6593      	str	r3, [r2, #88]	; 0x58
 8009f88:	e006      	b.n	8009f98 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8009f8a:	bf00      	nop
 8009f8c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f90:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009f94:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009f98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fa0:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8009fa4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009fa8:	2300      	movs	r3, #0
 8009faa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009fae:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8009fb2:	460b      	mov	r3, r1
 8009fb4:	4313      	orrs	r3, r2
 8009fb6:	d055      	beq.n	800a064 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8009fb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009fbc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009fc0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009fc4:	d033      	beq.n	800a02e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8009fc6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009fca:	d82c      	bhi.n	800a026 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009fcc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009fd0:	d02f      	beq.n	800a032 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8009fd2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009fd6:	d826      	bhi.n	800a026 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009fd8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009fdc:	d02b      	beq.n	800a036 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8009fde:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009fe2:	d820      	bhi.n	800a026 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009fe4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009fe8:	d012      	beq.n	800a010 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8009fea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009fee:	d81a      	bhi.n	800a026 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d022      	beq.n	800a03a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8009ff4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009ff8:	d115      	bne.n	800a026 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009ffa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ffe:	3308      	adds	r3, #8
 800a000:	2100      	movs	r1, #0
 800a002:	4618      	mov	r0, r3
 800a004:	f001 fcc0 	bl	800b988 <RCCEx_PLL2_Config>
 800a008:	4603      	mov	r3, r0
 800a00a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a00e:	e015      	b.n	800a03c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a010:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a014:	3328      	adds	r3, #40	; 0x28
 800a016:	2102      	movs	r1, #2
 800a018:	4618      	mov	r0, r3
 800a01a:	f001 fd67 	bl	800baec <RCCEx_PLL3_Config>
 800a01e:	4603      	mov	r3, r0
 800a020:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a024:	e00a      	b.n	800a03c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a026:	2301      	movs	r3, #1
 800a028:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a02c:	e006      	b.n	800a03c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a02e:	bf00      	nop
 800a030:	e004      	b.n	800a03c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a032:	bf00      	nop
 800a034:	e002      	b.n	800a03c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a036:	bf00      	nop
 800a038:	e000      	b.n	800a03c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a03a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a03c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a040:	2b00      	cmp	r3, #0
 800a042:	d10b      	bne.n	800a05c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a044:	4ba1      	ldr	r3, [pc, #644]	; (800a2cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a046:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a048:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800a04c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a050:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a054:	4a9d      	ldr	r2, [pc, #628]	; (800a2cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a056:	430b      	orrs	r3, r1
 800a058:	6593      	str	r3, [r2, #88]	; 0x58
 800a05a:	e003      	b.n	800a064 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a05c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a060:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800a064:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a06c:	f002 0308 	and.w	r3, r2, #8
 800a070:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a074:	2300      	movs	r3, #0
 800a076:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a07a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800a07e:	460b      	mov	r3, r1
 800a080:	4313      	orrs	r3, r2
 800a082:	d01e      	beq.n	800a0c2 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800a084:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a088:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a08c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a090:	d10c      	bne.n	800a0ac <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a092:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a096:	3328      	adds	r3, #40	; 0x28
 800a098:	2102      	movs	r1, #2
 800a09a:	4618      	mov	r0, r3
 800a09c:	f001 fd26 	bl	800baec <RCCEx_PLL3_Config>
 800a0a0:	4603      	mov	r3, r0
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d002      	beq.n	800a0ac <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800a0a6:	2301      	movs	r3, #1
 800a0a8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800a0ac:	4b87      	ldr	r3, [pc, #540]	; (800a2cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a0ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a0b0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a0b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a0b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a0bc:	4a83      	ldr	r2, [pc, #524]	; (800a2cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a0be:	430b      	orrs	r3, r1
 800a0c0:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a0c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a0c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0ca:	f002 0310 	and.w	r3, r2, #16
 800a0ce:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a0d2:	2300      	movs	r3, #0
 800a0d4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800a0d8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800a0dc:	460b      	mov	r3, r1
 800a0de:	4313      	orrs	r3, r2
 800a0e0:	d01e      	beq.n	800a120 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800a0e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a0e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a0ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a0ee:	d10c      	bne.n	800a10a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a0f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a0f4:	3328      	adds	r3, #40	; 0x28
 800a0f6:	2102      	movs	r1, #2
 800a0f8:	4618      	mov	r0, r3
 800a0fa:	f001 fcf7 	bl	800baec <RCCEx_PLL3_Config>
 800a0fe:	4603      	mov	r3, r0
 800a100:	2b00      	cmp	r3, #0
 800a102:	d002      	beq.n	800a10a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800a104:	2301      	movs	r3, #1
 800a106:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a10a:	4b70      	ldr	r3, [pc, #448]	; (800a2cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a10c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a10e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a112:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a116:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a11a:	4a6c      	ldr	r2, [pc, #432]	; (800a2cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a11c:	430b      	orrs	r3, r1
 800a11e:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a120:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a124:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a128:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800a12c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a130:	2300      	movs	r3, #0
 800a132:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a136:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800a13a:	460b      	mov	r3, r1
 800a13c:	4313      	orrs	r3, r2
 800a13e:	d03e      	beq.n	800a1be <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800a140:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a144:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a148:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a14c:	d022      	beq.n	800a194 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800a14e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a152:	d81b      	bhi.n	800a18c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800a154:	2b00      	cmp	r3, #0
 800a156:	d003      	beq.n	800a160 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800a158:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a15c:	d00b      	beq.n	800a176 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800a15e:	e015      	b.n	800a18c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a160:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a164:	3308      	adds	r3, #8
 800a166:	2100      	movs	r1, #0
 800a168:	4618      	mov	r0, r3
 800a16a:	f001 fc0d 	bl	800b988 <RCCEx_PLL2_Config>
 800a16e:	4603      	mov	r3, r0
 800a170:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a174:	e00f      	b.n	800a196 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a176:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a17a:	3328      	adds	r3, #40	; 0x28
 800a17c:	2102      	movs	r1, #2
 800a17e:	4618      	mov	r0, r3
 800a180:	f001 fcb4 	bl	800baec <RCCEx_PLL3_Config>
 800a184:	4603      	mov	r3, r0
 800a186:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a18a:	e004      	b.n	800a196 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a18c:	2301      	movs	r3, #1
 800a18e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a192:	e000      	b.n	800a196 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800a194:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a196:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d10b      	bne.n	800a1b6 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a19e:	4b4b      	ldr	r3, [pc, #300]	; (800a2cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a1a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a1a2:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800a1a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a1aa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a1ae:	4a47      	ldr	r2, [pc, #284]	; (800a2cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a1b0:	430b      	orrs	r3, r1
 800a1b2:	6593      	str	r3, [r2, #88]	; 0x58
 800a1b4:	e003      	b.n	800a1be <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a1b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a1ba:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a1be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a1c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1c6:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800a1ca:	67bb      	str	r3, [r7, #120]	; 0x78
 800a1cc:	2300      	movs	r3, #0
 800a1ce:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a1d0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800a1d4:	460b      	mov	r3, r1
 800a1d6:	4313      	orrs	r3, r2
 800a1d8:	d03b      	beq.n	800a252 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800a1da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a1de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1e2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a1e6:	d01f      	beq.n	800a228 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800a1e8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a1ec:	d818      	bhi.n	800a220 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800a1ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a1f2:	d003      	beq.n	800a1fc <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800a1f4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a1f8:	d007      	beq.n	800a20a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800a1fa:	e011      	b.n	800a220 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a1fc:	4b33      	ldr	r3, [pc, #204]	; (800a2cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a1fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a200:	4a32      	ldr	r2, [pc, #200]	; (800a2cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a202:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a206:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800a208:	e00f      	b.n	800a22a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a20a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a20e:	3328      	adds	r3, #40	; 0x28
 800a210:	2101      	movs	r1, #1
 800a212:	4618      	mov	r0, r3
 800a214:	f001 fc6a 	bl	800baec <RCCEx_PLL3_Config>
 800a218:	4603      	mov	r3, r0
 800a21a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800a21e:	e004      	b.n	800a22a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a220:	2301      	movs	r3, #1
 800a222:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a226:	e000      	b.n	800a22a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800a228:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a22a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d10b      	bne.n	800a24a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a232:	4b26      	ldr	r3, [pc, #152]	; (800a2cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a234:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a236:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800a23a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a23e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a242:	4a22      	ldr	r2, [pc, #136]	; (800a2cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a244:	430b      	orrs	r3, r1
 800a246:	6553      	str	r3, [r2, #84]	; 0x54
 800a248:	e003      	b.n	800a252 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a24a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a24e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a252:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a25a:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800a25e:	673b      	str	r3, [r7, #112]	; 0x70
 800a260:	2300      	movs	r3, #0
 800a262:	677b      	str	r3, [r7, #116]	; 0x74
 800a264:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800a268:	460b      	mov	r3, r1
 800a26a:	4313      	orrs	r3, r2
 800a26c:	d034      	beq.n	800a2d8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800a26e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a272:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a274:	2b00      	cmp	r3, #0
 800a276:	d003      	beq.n	800a280 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800a278:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a27c:	d007      	beq.n	800a28e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800a27e:	e011      	b.n	800a2a4 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a280:	4b12      	ldr	r3, [pc, #72]	; (800a2cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a284:	4a11      	ldr	r2, [pc, #68]	; (800a2cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a286:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a28a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a28c:	e00e      	b.n	800a2ac <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a28e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a292:	3308      	adds	r3, #8
 800a294:	2102      	movs	r1, #2
 800a296:	4618      	mov	r0, r3
 800a298:	f001 fb76 	bl	800b988 <RCCEx_PLL2_Config>
 800a29c:	4603      	mov	r3, r0
 800a29e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a2a2:	e003      	b.n	800a2ac <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800a2a4:	2301      	movs	r3, #1
 800a2a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a2aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a2ac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d10d      	bne.n	800a2d0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a2b4:	4b05      	ldr	r3, [pc, #20]	; (800a2cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a2b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a2b8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a2bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a2c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a2c2:	4a02      	ldr	r2, [pc, #8]	; (800a2cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a2c4:	430b      	orrs	r3, r1
 800a2c6:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a2c8:	e006      	b.n	800a2d8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800a2ca:	bf00      	nop
 800a2cc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a2d0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a2d4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a2d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a2dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2e0:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800a2e4:	66bb      	str	r3, [r7, #104]	; 0x68
 800a2e6:	2300      	movs	r3, #0
 800a2e8:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a2ea:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800a2ee:	460b      	mov	r3, r1
 800a2f0:	4313      	orrs	r3, r2
 800a2f2:	d00c      	beq.n	800a30e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a2f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a2f8:	3328      	adds	r3, #40	; 0x28
 800a2fa:	2102      	movs	r1, #2
 800a2fc:	4618      	mov	r0, r3
 800a2fe:	f001 fbf5 	bl	800baec <RCCEx_PLL3_Config>
 800a302:	4603      	mov	r3, r0
 800a304:	2b00      	cmp	r3, #0
 800a306:	d002      	beq.n	800a30e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800a308:	2301      	movs	r3, #1
 800a30a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a30e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a312:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a316:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800a31a:	663b      	str	r3, [r7, #96]	; 0x60
 800a31c:	2300      	movs	r3, #0
 800a31e:	667b      	str	r3, [r7, #100]	; 0x64
 800a320:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800a324:	460b      	mov	r3, r1
 800a326:	4313      	orrs	r3, r2
 800a328:	d038      	beq.n	800a39c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800a32a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a32e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a332:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a336:	d018      	beq.n	800a36a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800a338:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a33c:	d811      	bhi.n	800a362 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800a33e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a342:	d014      	beq.n	800a36e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800a344:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a348:	d80b      	bhi.n	800a362 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d011      	beq.n	800a372 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800a34e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a352:	d106      	bne.n	800a362 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a354:	4bc3      	ldr	r3, [pc, #780]	; (800a664 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a358:	4ac2      	ldr	r2, [pc, #776]	; (800a664 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a35a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a35e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800a360:	e008      	b.n	800a374 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a362:	2301      	movs	r3, #1
 800a364:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a368:	e004      	b.n	800a374 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a36a:	bf00      	nop
 800a36c:	e002      	b.n	800a374 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a36e:	bf00      	nop
 800a370:	e000      	b.n	800a374 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a372:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a374:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d10b      	bne.n	800a394 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a37c:	4bb9      	ldr	r3, [pc, #740]	; (800a664 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a37e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a380:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a384:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a388:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a38c:	4ab5      	ldr	r2, [pc, #724]	; (800a664 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a38e:	430b      	orrs	r3, r1
 800a390:	6553      	str	r3, [r2, #84]	; 0x54
 800a392:	e003      	b.n	800a39c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a394:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a398:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a39c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a3a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3a4:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800a3a8:	65bb      	str	r3, [r7, #88]	; 0x58
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a3ae:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800a3b2:	460b      	mov	r3, r1
 800a3b4:	4313      	orrs	r3, r2
 800a3b6:	d009      	beq.n	800a3cc <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a3b8:	4baa      	ldr	r3, [pc, #680]	; (800a664 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a3ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a3bc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a3c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a3c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a3c6:	4aa7      	ldr	r2, [pc, #668]	; (800a664 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a3c8:	430b      	orrs	r3, r1
 800a3ca:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800a3cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a3d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3d4:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800a3d8:	653b      	str	r3, [r7, #80]	; 0x50
 800a3da:	2300      	movs	r3, #0
 800a3dc:	657b      	str	r3, [r7, #84]	; 0x54
 800a3de:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800a3e2:	460b      	mov	r3, r1
 800a3e4:	4313      	orrs	r3, r2
 800a3e6:	d00a      	beq.n	800a3fe <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800a3e8:	4b9e      	ldr	r3, [pc, #632]	; (800a664 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a3ea:	691b      	ldr	r3, [r3, #16]
 800a3ec:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800a3f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a3f4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800a3f8:	4a9a      	ldr	r2, [pc, #616]	; (800a664 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a3fa:	430b      	orrs	r3, r1
 800a3fc:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a3fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a402:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a406:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800a40a:	64bb      	str	r3, [r7, #72]	; 0x48
 800a40c:	2300      	movs	r3, #0
 800a40e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a410:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800a414:	460b      	mov	r3, r1
 800a416:	4313      	orrs	r3, r2
 800a418:	d009      	beq.n	800a42e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a41a:	4b92      	ldr	r3, [pc, #584]	; (800a664 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a41c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a41e:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800a422:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a426:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a428:	4a8e      	ldr	r2, [pc, #568]	; (800a664 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a42a:	430b      	orrs	r3, r1
 800a42c:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a42e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a432:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a436:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800a43a:	643b      	str	r3, [r7, #64]	; 0x40
 800a43c:	2300      	movs	r3, #0
 800a43e:	647b      	str	r3, [r7, #68]	; 0x44
 800a440:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800a444:	460b      	mov	r3, r1
 800a446:	4313      	orrs	r3, r2
 800a448:	d00e      	beq.n	800a468 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a44a:	4b86      	ldr	r3, [pc, #536]	; (800a664 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a44c:	691b      	ldr	r3, [r3, #16]
 800a44e:	4a85      	ldr	r2, [pc, #532]	; (800a664 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a450:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a454:	6113      	str	r3, [r2, #16]
 800a456:	4b83      	ldr	r3, [pc, #524]	; (800a664 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a458:	6919      	ldr	r1, [r3, #16]
 800a45a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a45e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800a462:	4a80      	ldr	r2, [pc, #512]	; (800a664 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a464:	430b      	orrs	r3, r1
 800a466:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a468:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a46c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a470:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800a474:	63bb      	str	r3, [r7, #56]	; 0x38
 800a476:	2300      	movs	r3, #0
 800a478:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a47a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800a47e:	460b      	mov	r3, r1
 800a480:	4313      	orrs	r3, r2
 800a482:	d009      	beq.n	800a498 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a484:	4b77      	ldr	r3, [pc, #476]	; (800a664 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a486:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a488:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800a48c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a490:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a492:	4a74      	ldr	r2, [pc, #464]	; (800a664 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a494:	430b      	orrs	r3, r1
 800a496:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a498:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a49c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4a0:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800a4a4:	633b      	str	r3, [r7, #48]	; 0x30
 800a4a6:	2300      	movs	r3, #0
 800a4a8:	637b      	str	r3, [r7, #52]	; 0x34
 800a4aa:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800a4ae:	460b      	mov	r3, r1
 800a4b0:	4313      	orrs	r3, r2
 800a4b2:	d00a      	beq.n	800a4ca <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a4b4:	4b6b      	ldr	r3, [pc, #428]	; (800a664 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a4b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4b8:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800a4bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a4c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a4c4:	4a67      	ldr	r2, [pc, #412]	; (800a664 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a4c6:	430b      	orrs	r3, r1
 800a4c8:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800a4ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a4ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4d2:	2100      	movs	r1, #0
 800a4d4:	62b9      	str	r1, [r7, #40]	; 0x28
 800a4d6:	f003 0301 	and.w	r3, r3, #1
 800a4da:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a4dc:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800a4e0:	460b      	mov	r3, r1
 800a4e2:	4313      	orrs	r3, r2
 800a4e4:	d011      	beq.n	800a50a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a4e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a4ea:	3308      	adds	r3, #8
 800a4ec:	2100      	movs	r1, #0
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	f001 fa4a 	bl	800b988 <RCCEx_PLL2_Config>
 800a4f4:	4603      	mov	r3, r0
 800a4f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800a4fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d003      	beq.n	800a50a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a502:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a506:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800a50a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a50e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a512:	2100      	movs	r1, #0
 800a514:	6239      	str	r1, [r7, #32]
 800a516:	f003 0302 	and.w	r3, r3, #2
 800a51a:	627b      	str	r3, [r7, #36]	; 0x24
 800a51c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800a520:	460b      	mov	r3, r1
 800a522:	4313      	orrs	r3, r2
 800a524:	d011      	beq.n	800a54a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a526:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a52a:	3308      	adds	r3, #8
 800a52c:	2101      	movs	r1, #1
 800a52e:	4618      	mov	r0, r3
 800a530:	f001 fa2a 	bl	800b988 <RCCEx_PLL2_Config>
 800a534:	4603      	mov	r3, r0
 800a536:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800a53a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d003      	beq.n	800a54a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a542:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a546:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800a54a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a54e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a552:	2100      	movs	r1, #0
 800a554:	61b9      	str	r1, [r7, #24]
 800a556:	f003 0304 	and.w	r3, r3, #4
 800a55a:	61fb      	str	r3, [r7, #28]
 800a55c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800a560:	460b      	mov	r3, r1
 800a562:	4313      	orrs	r3, r2
 800a564:	d011      	beq.n	800a58a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a566:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a56a:	3308      	adds	r3, #8
 800a56c:	2102      	movs	r1, #2
 800a56e:	4618      	mov	r0, r3
 800a570:	f001 fa0a 	bl	800b988 <RCCEx_PLL2_Config>
 800a574:	4603      	mov	r3, r0
 800a576:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800a57a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d003      	beq.n	800a58a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a582:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a586:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800a58a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a58e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a592:	2100      	movs	r1, #0
 800a594:	6139      	str	r1, [r7, #16]
 800a596:	f003 0308 	and.w	r3, r3, #8
 800a59a:	617b      	str	r3, [r7, #20]
 800a59c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800a5a0:	460b      	mov	r3, r1
 800a5a2:	4313      	orrs	r3, r2
 800a5a4:	d011      	beq.n	800a5ca <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a5a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a5aa:	3328      	adds	r3, #40	; 0x28
 800a5ac:	2100      	movs	r1, #0
 800a5ae:	4618      	mov	r0, r3
 800a5b0:	f001 fa9c 	bl	800baec <RCCEx_PLL3_Config>
 800a5b4:	4603      	mov	r3, r0
 800a5b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800a5ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d003      	beq.n	800a5ca <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a5c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a5c6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800a5ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a5ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5d2:	2100      	movs	r1, #0
 800a5d4:	60b9      	str	r1, [r7, #8]
 800a5d6:	f003 0310 	and.w	r3, r3, #16
 800a5da:	60fb      	str	r3, [r7, #12]
 800a5dc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800a5e0:	460b      	mov	r3, r1
 800a5e2:	4313      	orrs	r3, r2
 800a5e4:	d011      	beq.n	800a60a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a5e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a5ea:	3328      	adds	r3, #40	; 0x28
 800a5ec:	2101      	movs	r1, #1
 800a5ee:	4618      	mov	r0, r3
 800a5f0:	f001 fa7c 	bl	800baec <RCCEx_PLL3_Config>
 800a5f4:	4603      	mov	r3, r0
 800a5f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800a5fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d003      	beq.n	800a60a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a602:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a606:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800a60a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a60e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a612:	2100      	movs	r1, #0
 800a614:	6039      	str	r1, [r7, #0]
 800a616:	f003 0320 	and.w	r3, r3, #32
 800a61a:	607b      	str	r3, [r7, #4]
 800a61c:	e9d7 1200 	ldrd	r1, r2, [r7]
 800a620:	460b      	mov	r3, r1
 800a622:	4313      	orrs	r3, r2
 800a624:	d011      	beq.n	800a64a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a626:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a62a:	3328      	adds	r3, #40	; 0x28
 800a62c:	2102      	movs	r1, #2
 800a62e:	4618      	mov	r0, r3
 800a630:	f001 fa5c 	bl	800baec <RCCEx_PLL3_Config>
 800a634:	4603      	mov	r3, r0
 800a636:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800a63a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d003      	beq.n	800a64a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a642:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a646:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800a64a:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d101      	bne.n	800a656 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800a652:	2300      	movs	r3, #0
 800a654:	e000      	b.n	800a658 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800a656:	2301      	movs	r3, #1
}
 800a658:	4618      	mov	r0, r3
 800a65a:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800a65e:	46bd      	mov	sp, r7
 800a660:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a664:	58024400 	.word	0x58024400

0800a668 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800a668:	b580      	push	{r7, lr}
 800a66a:	b090      	sub	sp, #64	; 0x40
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a672:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a676:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800a67a:	430b      	orrs	r3, r1
 800a67c:	f040 8094 	bne.w	800a7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800a680:	4b9e      	ldr	r3, [pc, #632]	; (800a8fc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a682:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a684:	f003 0307 	and.w	r3, r3, #7
 800a688:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800a68a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a68c:	2b04      	cmp	r3, #4
 800a68e:	f200 8087 	bhi.w	800a7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800a692:	a201      	add	r2, pc, #4	; (adr r2, 800a698 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800a694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a698:	0800a6ad 	.word	0x0800a6ad
 800a69c:	0800a6d5 	.word	0x0800a6d5
 800a6a0:	0800a6fd 	.word	0x0800a6fd
 800a6a4:	0800a799 	.word	0x0800a799
 800a6a8:	0800a725 	.word	0x0800a725
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a6ac:	4b93      	ldr	r3, [pc, #588]	; (800a8fc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a6b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a6b8:	d108      	bne.n	800a6cc <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a6ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a6be:	4618      	mov	r0, r3
 800a6c0:	f001 f810 	bl	800b6e4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a6c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a6c8:	f000 bd45 	b.w	800b156 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a6cc:	2300      	movs	r3, #0
 800a6ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a6d0:	f000 bd41 	b.w	800b156 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a6d4:	4b89      	ldr	r3, [pc, #548]	; (800a8fc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a6dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a6e0:	d108      	bne.n	800a6f4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a6e2:	f107 0318 	add.w	r3, r7, #24
 800a6e6:	4618      	mov	r0, r3
 800a6e8:	f000 fd54 	bl	800b194 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a6ec:	69bb      	ldr	r3, [r7, #24]
 800a6ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a6f0:	f000 bd31 	b.w	800b156 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a6f4:	2300      	movs	r3, #0
 800a6f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a6f8:	f000 bd2d 	b.w	800b156 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a6fc:	4b7f      	ldr	r3, [pc, #508]	; (800a8fc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a704:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a708:	d108      	bne.n	800a71c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a70a:	f107 030c 	add.w	r3, r7, #12
 800a70e:	4618      	mov	r0, r3
 800a710:	f000 fe94 	bl	800b43c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a718:	f000 bd1d 	b.w	800b156 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a71c:	2300      	movs	r3, #0
 800a71e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a720:	f000 bd19 	b.w	800b156 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a724:	4b75      	ldr	r3, [pc, #468]	; (800a8fc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a726:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a728:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a72c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a72e:	4b73      	ldr	r3, [pc, #460]	; (800a8fc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	f003 0304 	and.w	r3, r3, #4
 800a736:	2b04      	cmp	r3, #4
 800a738:	d10c      	bne.n	800a754 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800a73a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d109      	bne.n	800a754 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a740:	4b6e      	ldr	r3, [pc, #440]	; (800a8fc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	08db      	lsrs	r3, r3, #3
 800a746:	f003 0303 	and.w	r3, r3, #3
 800a74a:	4a6d      	ldr	r2, [pc, #436]	; (800a900 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a74c:	fa22 f303 	lsr.w	r3, r2, r3
 800a750:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a752:	e01f      	b.n	800a794 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a754:	4b69      	ldr	r3, [pc, #420]	; (800a8fc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a75c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a760:	d106      	bne.n	800a770 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800a762:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a764:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a768:	d102      	bne.n	800a770 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a76a:	4b66      	ldr	r3, [pc, #408]	; (800a904 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a76c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a76e:	e011      	b.n	800a794 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a770:	4b62      	ldr	r3, [pc, #392]	; (800a8fc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a778:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a77c:	d106      	bne.n	800a78c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800a77e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a780:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a784:	d102      	bne.n	800a78c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a786:	4b60      	ldr	r3, [pc, #384]	; (800a908 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800a788:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a78a:	e003      	b.n	800a794 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a78c:	2300      	movs	r3, #0
 800a78e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800a790:	f000 bce1 	b.w	800b156 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a794:	f000 bcdf 	b.w	800b156 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a798:	4b5c      	ldr	r3, [pc, #368]	; (800a90c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a79a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a79c:	f000 bcdb 	b.w	800b156 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a7a0:	2300      	movs	r3, #0
 800a7a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a7a4:	f000 bcd7 	b.w	800b156 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800a7a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a7ac:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800a7b0:	430b      	orrs	r3, r1
 800a7b2:	f040 80ad 	bne.w	800a910 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800a7b6:	4b51      	ldr	r3, [pc, #324]	; (800a8fc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a7b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a7ba:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800a7be:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800a7c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a7c6:	d056      	beq.n	800a876 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800a7c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a7ce:	f200 8090 	bhi.w	800a8f2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a7d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7d4:	2bc0      	cmp	r3, #192	; 0xc0
 800a7d6:	f000 8088 	beq.w	800a8ea <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800a7da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7dc:	2bc0      	cmp	r3, #192	; 0xc0
 800a7de:	f200 8088 	bhi.w	800a8f2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a7e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7e4:	2b80      	cmp	r3, #128	; 0x80
 800a7e6:	d032      	beq.n	800a84e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800a7e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7ea:	2b80      	cmp	r3, #128	; 0x80
 800a7ec:	f200 8081 	bhi.w	800a8f2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a7f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d003      	beq.n	800a7fe <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800a7f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7f8:	2b40      	cmp	r3, #64	; 0x40
 800a7fa:	d014      	beq.n	800a826 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800a7fc:	e079      	b.n	800a8f2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a7fe:	4b3f      	ldr	r3, [pc, #252]	; (800a8fc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a806:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a80a:	d108      	bne.n	800a81e <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a80c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a810:	4618      	mov	r0, r3
 800a812:	f000 ff67 	bl	800b6e4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a818:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a81a:	f000 bc9c 	b.w	800b156 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a81e:	2300      	movs	r3, #0
 800a820:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a822:	f000 bc98 	b.w	800b156 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a826:	4b35      	ldr	r3, [pc, #212]	; (800a8fc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a82e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a832:	d108      	bne.n	800a846 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a834:	f107 0318 	add.w	r3, r7, #24
 800a838:	4618      	mov	r0, r3
 800a83a:	f000 fcab 	bl	800b194 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a83e:	69bb      	ldr	r3, [r7, #24]
 800a840:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a842:	f000 bc88 	b.w	800b156 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a846:	2300      	movs	r3, #0
 800a848:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a84a:	f000 bc84 	b.w	800b156 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a84e:	4b2b      	ldr	r3, [pc, #172]	; (800a8fc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a856:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a85a:	d108      	bne.n	800a86e <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a85c:	f107 030c 	add.w	r3, r7, #12
 800a860:	4618      	mov	r0, r3
 800a862:	f000 fdeb 	bl	800b43c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a86a:	f000 bc74 	b.w	800b156 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a86e:	2300      	movs	r3, #0
 800a870:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a872:	f000 bc70 	b.w	800b156 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a876:	4b21      	ldr	r3, [pc, #132]	; (800a8fc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a878:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a87a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a87e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a880:	4b1e      	ldr	r3, [pc, #120]	; (800a8fc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	f003 0304 	and.w	r3, r3, #4
 800a888:	2b04      	cmp	r3, #4
 800a88a:	d10c      	bne.n	800a8a6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800a88c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d109      	bne.n	800a8a6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a892:	4b1a      	ldr	r3, [pc, #104]	; (800a8fc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	08db      	lsrs	r3, r3, #3
 800a898:	f003 0303 	and.w	r3, r3, #3
 800a89c:	4a18      	ldr	r2, [pc, #96]	; (800a900 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a89e:	fa22 f303 	lsr.w	r3, r2, r3
 800a8a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a8a4:	e01f      	b.n	800a8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a8a6:	4b15      	ldr	r3, [pc, #84]	; (800a8fc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a8ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a8b2:	d106      	bne.n	800a8c2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800a8b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a8ba:	d102      	bne.n	800a8c2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a8bc:	4b11      	ldr	r3, [pc, #68]	; (800a904 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a8be:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a8c0:	e011      	b.n	800a8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a8c2:	4b0e      	ldr	r3, [pc, #56]	; (800a8fc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a8ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a8ce:	d106      	bne.n	800a8de <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800a8d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a8d6:	d102      	bne.n	800a8de <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a8d8:	4b0b      	ldr	r3, [pc, #44]	; (800a908 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800a8da:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a8dc:	e003      	b.n	800a8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a8de:	2300      	movs	r3, #0
 800a8e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800a8e2:	f000 bc38 	b.w	800b156 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a8e6:	f000 bc36 	b.w	800b156 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a8ea:	4b08      	ldr	r3, [pc, #32]	; (800a90c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a8ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a8ee:	f000 bc32 	b.w	800b156 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a8f2:	2300      	movs	r3, #0
 800a8f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a8f6:	f000 bc2e 	b.w	800b156 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a8fa:	bf00      	nop
 800a8fc:	58024400 	.word	0x58024400
 800a900:	03d09000 	.word	0x03d09000
 800a904:	003d0900 	.word	0x003d0900
 800a908:	017d7840 	.word	0x017d7840
 800a90c:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800a910:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a914:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800a918:	430b      	orrs	r3, r1
 800a91a:	f040 809c 	bne.w	800aa56 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800a91e:	4b9e      	ldr	r3, [pc, #632]	; (800ab98 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a920:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a922:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800a926:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800a928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a92a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a92e:	d054      	beq.n	800a9da <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800a930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a932:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a936:	f200 808b 	bhi.w	800aa50 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a93a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a93c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a940:	f000 8083 	beq.w	800aa4a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800a944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a946:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a94a:	f200 8081 	bhi.w	800aa50 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a94e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a950:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a954:	d02f      	beq.n	800a9b6 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800a956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a958:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a95c:	d878      	bhi.n	800aa50 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a95e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a960:	2b00      	cmp	r3, #0
 800a962:	d004      	beq.n	800a96e <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800a964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a966:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a96a:	d012      	beq.n	800a992 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800a96c:	e070      	b.n	800aa50 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a96e:	4b8a      	ldr	r3, [pc, #552]	; (800ab98 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a976:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a97a:	d107      	bne.n	800a98c <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a97c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a980:	4618      	mov	r0, r3
 800a982:	f000 feaf 	bl	800b6e4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a988:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a98a:	e3e4      	b.n	800b156 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a98c:	2300      	movs	r3, #0
 800a98e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a990:	e3e1      	b.n	800b156 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a992:	4b81      	ldr	r3, [pc, #516]	; (800ab98 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a99a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a99e:	d107      	bne.n	800a9b0 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a9a0:	f107 0318 	add.w	r3, r7, #24
 800a9a4:	4618      	mov	r0, r3
 800a9a6:	f000 fbf5 	bl	800b194 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a9aa:	69bb      	ldr	r3, [r7, #24]
 800a9ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a9ae:	e3d2      	b.n	800b156 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a9b0:	2300      	movs	r3, #0
 800a9b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a9b4:	e3cf      	b.n	800b156 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a9b6:	4b78      	ldr	r3, [pc, #480]	; (800ab98 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a9be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a9c2:	d107      	bne.n	800a9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a9c4:	f107 030c 	add.w	r3, r7, #12
 800a9c8:	4618      	mov	r0, r3
 800a9ca:	f000 fd37 	bl	800b43c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a9d2:	e3c0      	b.n	800b156 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a9d4:	2300      	movs	r3, #0
 800a9d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a9d8:	e3bd      	b.n	800b156 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a9da:	4b6f      	ldr	r3, [pc, #444]	; (800ab98 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a9dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a9de:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a9e2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a9e4:	4b6c      	ldr	r3, [pc, #432]	; (800ab98 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	f003 0304 	and.w	r3, r3, #4
 800a9ec:	2b04      	cmp	r3, #4
 800a9ee:	d10c      	bne.n	800aa0a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800a9f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d109      	bne.n	800aa0a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a9f6:	4b68      	ldr	r3, [pc, #416]	; (800ab98 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	08db      	lsrs	r3, r3, #3
 800a9fc:	f003 0303 	and.w	r3, r3, #3
 800aa00:	4a66      	ldr	r2, [pc, #408]	; (800ab9c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800aa02:	fa22 f303 	lsr.w	r3, r2, r3
 800aa06:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aa08:	e01e      	b.n	800aa48 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800aa0a:	4b63      	ldr	r3, [pc, #396]	; (800ab98 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aa16:	d106      	bne.n	800aa26 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800aa18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa1a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800aa1e:	d102      	bne.n	800aa26 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800aa20:	4b5f      	ldr	r3, [pc, #380]	; (800aba0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800aa22:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aa24:	e010      	b.n	800aa48 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800aa26:	4b5c      	ldr	r3, [pc, #368]	; (800ab98 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aa2e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aa32:	d106      	bne.n	800aa42 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800aa34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa36:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aa3a:	d102      	bne.n	800aa42 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800aa3c:	4b59      	ldr	r3, [pc, #356]	; (800aba4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800aa3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aa40:	e002      	b.n	800aa48 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800aa42:	2300      	movs	r3, #0
 800aa44:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800aa46:	e386      	b.n	800b156 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800aa48:	e385      	b.n	800b156 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800aa4a:	4b57      	ldr	r3, [pc, #348]	; (800aba8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800aa4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aa4e:	e382      	b.n	800b156 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800aa50:	2300      	movs	r3, #0
 800aa52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aa54:	e37f      	b.n	800b156 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800aa56:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aa5a:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800aa5e:	430b      	orrs	r3, r1
 800aa60:	f040 80a7 	bne.w	800abb2 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800aa64:	4b4c      	ldr	r3, [pc, #304]	; (800ab98 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800aa66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa68:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800aa6c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800aa6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa70:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800aa74:	d055      	beq.n	800ab22 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800aa76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa78:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800aa7c:	f200 8096 	bhi.w	800abac <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800aa80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa82:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800aa86:	f000 8084 	beq.w	800ab92 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800aa8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa8c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800aa90:	f200 808c 	bhi.w	800abac <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800aa94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa96:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aa9a:	d030      	beq.n	800aafe <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800aa9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa9e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aaa2:	f200 8083 	bhi.w	800abac <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800aaa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d004      	beq.n	800aab6 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800aaac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaae:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800aab2:	d012      	beq.n	800aada <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800aab4:	e07a      	b.n	800abac <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800aab6:	4b38      	ldr	r3, [pc, #224]	; (800ab98 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aabe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aac2:	d107      	bne.n	800aad4 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800aac4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aac8:	4618      	mov	r0, r3
 800aaca:	f000 fe0b 	bl	800b6e4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800aace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aad0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aad2:	e340      	b.n	800b156 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aad4:	2300      	movs	r3, #0
 800aad6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aad8:	e33d      	b.n	800b156 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800aada:	4b2f      	ldr	r3, [pc, #188]	; (800ab98 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800aae2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800aae6:	d107      	bne.n	800aaf8 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aae8:	f107 0318 	add.w	r3, r7, #24
 800aaec:	4618      	mov	r0, r3
 800aaee:	f000 fb51 	bl	800b194 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800aaf2:	69bb      	ldr	r3, [r7, #24]
 800aaf4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aaf6:	e32e      	b.n	800b156 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aaf8:	2300      	movs	r3, #0
 800aafa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aafc:	e32b      	b.n	800b156 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800aafe:	4b26      	ldr	r3, [pc, #152]	; (800ab98 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ab06:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ab0a:	d107      	bne.n	800ab1c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ab0c:	f107 030c 	add.w	r3, r7, #12
 800ab10:	4618      	mov	r0, r3
 800ab12:	f000 fc93 	bl	800b43c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ab1a:	e31c      	b.n	800b156 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ab1c:	2300      	movs	r3, #0
 800ab1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ab20:	e319      	b.n	800b156 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ab22:	4b1d      	ldr	r3, [pc, #116]	; (800ab98 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ab24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab26:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ab2a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ab2c:	4b1a      	ldr	r3, [pc, #104]	; (800ab98 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	f003 0304 	and.w	r3, r3, #4
 800ab34:	2b04      	cmp	r3, #4
 800ab36:	d10c      	bne.n	800ab52 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800ab38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d109      	bne.n	800ab52 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ab3e:	4b16      	ldr	r3, [pc, #88]	; (800ab98 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	08db      	lsrs	r3, r3, #3
 800ab44:	f003 0303 	and.w	r3, r3, #3
 800ab48:	4a14      	ldr	r2, [pc, #80]	; (800ab9c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800ab4a:	fa22 f303 	lsr.w	r3, r2, r3
 800ab4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ab50:	e01e      	b.n	800ab90 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ab52:	4b11      	ldr	r3, [pc, #68]	; (800ab98 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ab5e:	d106      	bne.n	800ab6e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800ab60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab62:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ab66:	d102      	bne.n	800ab6e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ab68:	4b0d      	ldr	r3, [pc, #52]	; (800aba0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800ab6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ab6c:	e010      	b.n	800ab90 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ab6e:	4b0a      	ldr	r3, [pc, #40]	; (800ab98 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ab76:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ab7a:	d106      	bne.n	800ab8a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800ab7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ab82:	d102      	bne.n	800ab8a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ab84:	4b07      	ldr	r3, [pc, #28]	; (800aba4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800ab86:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ab88:	e002      	b.n	800ab90 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ab8a:	2300      	movs	r3, #0
 800ab8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800ab8e:	e2e2      	b.n	800b156 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ab90:	e2e1      	b.n	800b156 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ab92:	4b05      	ldr	r3, [pc, #20]	; (800aba8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800ab94:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ab96:	e2de      	b.n	800b156 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ab98:	58024400 	.word	0x58024400
 800ab9c:	03d09000 	.word	0x03d09000
 800aba0:	003d0900 	.word	0x003d0900
 800aba4:	017d7840 	.word	0x017d7840
 800aba8:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800abac:	2300      	movs	r3, #0
 800abae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800abb0:	e2d1      	b.n	800b156 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800abb2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800abb6:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800abba:	430b      	orrs	r3, r1
 800abbc:	f040 809c 	bne.w	800acf8 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800abc0:	4b93      	ldr	r3, [pc, #588]	; (800ae10 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800abc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800abc4:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800abc8:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800abca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abcc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800abd0:	d054      	beq.n	800ac7c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800abd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abd4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800abd8:	f200 808b 	bhi.w	800acf2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800abdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abde:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800abe2:	f000 8083 	beq.w	800acec <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800abe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abe8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800abec:	f200 8081 	bhi.w	800acf2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800abf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abf2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800abf6:	d02f      	beq.n	800ac58 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800abf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abfa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800abfe:	d878      	bhi.n	800acf2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800ac00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d004      	beq.n	800ac10 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800ac06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ac0c:	d012      	beq.n	800ac34 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800ac0e:	e070      	b.n	800acf2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ac10:	4b7f      	ldr	r3, [pc, #508]	; (800ae10 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ac18:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ac1c:	d107      	bne.n	800ac2e <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ac1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ac22:	4618      	mov	r0, r3
 800ac24:	f000 fd5e 	bl	800b6e4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ac28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ac2c:	e293      	b.n	800b156 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ac2e:	2300      	movs	r3, #0
 800ac30:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ac32:	e290      	b.n	800b156 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ac34:	4b76      	ldr	r3, [pc, #472]	; (800ae10 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ac3c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ac40:	d107      	bne.n	800ac52 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ac42:	f107 0318 	add.w	r3, r7, #24
 800ac46:	4618      	mov	r0, r3
 800ac48:	f000 faa4 	bl	800b194 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ac4c:	69bb      	ldr	r3, [r7, #24]
 800ac4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ac50:	e281      	b.n	800b156 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ac52:	2300      	movs	r3, #0
 800ac54:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ac56:	e27e      	b.n	800b156 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ac58:	4b6d      	ldr	r3, [pc, #436]	; (800ae10 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ac60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ac64:	d107      	bne.n	800ac76 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ac66:	f107 030c 	add.w	r3, r7, #12
 800ac6a:	4618      	mov	r0, r3
 800ac6c:	f000 fbe6 	bl	800b43c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ac74:	e26f      	b.n	800b156 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ac76:	2300      	movs	r3, #0
 800ac78:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ac7a:	e26c      	b.n	800b156 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ac7c:	4b64      	ldr	r3, [pc, #400]	; (800ae10 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ac7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac80:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ac84:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ac86:	4b62      	ldr	r3, [pc, #392]	; (800ae10 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	f003 0304 	and.w	r3, r3, #4
 800ac8e:	2b04      	cmp	r3, #4
 800ac90:	d10c      	bne.n	800acac <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800ac92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d109      	bne.n	800acac <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ac98:	4b5d      	ldr	r3, [pc, #372]	; (800ae10 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	08db      	lsrs	r3, r3, #3
 800ac9e:	f003 0303 	and.w	r3, r3, #3
 800aca2:	4a5c      	ldr	r2, [pc, #368]	; (800ae14 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800aca4:	fa22 f303 	lsr.w	r3, r2, r3
 800aca8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800acaa:	e01e      	b.n	800acea <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800acac:	4b58      	ldr	r3, [pc, #352]	; (800ae10 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800acb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800acb8:	d106      	bne.n	800acc8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800acba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acbc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800acc0:	d102      	bne.n	800acc8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800acc2:	4b55      	ldr	r3, [pc, #340]	; (800ae18 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800acc4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800acc6:	e010      	b.n	800acea <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800acc8:	4b51      	ldr	r3, [pc, #324]	; (800ae10 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800acd0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800acd4:	d106      	bne.n	800ace4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800acd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acd8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800acdc:	d102      	bne.n	800ace4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800acde:	4b4f      	ldr	r3, [pc, #316]	; (800ae1c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800ace0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ace2:	e002      	b.n	800acea <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ace4:	2300      	movs	r3, #0
 800ace6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800ace8:	e235      	b.n	800b156 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800acea:	e234      	b.n	800b156 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800acec:	4b4c      	ldr	r3, [pc, #304]	; (800ae20 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800acee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800acf0:	e231      	b.n	800b156 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800acf2:	2300      	movs	r3, #0
 800acf4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800acf6:	e22e      	b.n	800b156 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800acf8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800acfc:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800ad00:	430b      	orrs	r3, r1
 800ad02:	f040 808f 	bne.w	800ae24 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800ad06:	4b42      	ldr	r3, [pc, #264]	; (800ae10 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ad08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ad0a:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800ad0e:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800ad10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad12:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ad16:	d06b      	beq.n	800adf0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800ad18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad1a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ad1e:	d874      	bhi.n	800ae0a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800ad20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad22:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ad26:	d056      	beq.n	800add6 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800ad28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad2a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ad2e:	d86c      	bhi.n	800ae0a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800ad30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad32:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ad36:	d03b      	beq.n	800adb0 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800ad38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad3a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ad3e:	d864      	bhi.n	800ae0a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800ad40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad42:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ad46:	d021      	beq.n	800ad8c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800ad48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad4a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ad4e:	d85c      	bhi.n	800ae0a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800ad50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d004      	beq.n	800ad60 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800ad56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ad5c:	d004      	beq.n	800ad68 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800ad5e:	e054      	b.n	800ae0a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800ad60:	f7fe fa0a 	bl	8009178 <HAL_RCC_GetPCLK1Freq>
 800ad64:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ad66:	e1f6      	b.n	800b156 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ad68:	4b29      	ldr	r3, [pc, #164]	; (800ae10 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ad70:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ad74:	d107      	bne.n	800ad86 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ad76:	f107 0318 	add.w	r3, r7, #24
 800ad7a:	4618      	mov	r0, r3
 800ad7c:	f000 fa0a 	bl	800b194 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ad80:	69fb      	ldr	r3, [r7, #28]
 800ad82:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ad84:	e1e7      	b.n	800b156 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ad86:	2300      	movs	r3, #0
 800ad88:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ad8a:	e1e4      	b.n	800b156 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ad8c:	4b20      	ldr	r3, [pc, #128]	; (800ae10 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ad94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ad98:	d107      	bne.n	800adaa <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ad9a:	f107 030c 	add.w	r3, r7, #12
 800ad9e:	4618      	mov	r0, r3
 800ada0:	f000 fb4c 	bl	800b43c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800ada4:	693b      	ldr	r3, [r7, #16]
 800ada6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ada8:	e1d5      	b.n	800b156 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800adaa:	2300      	movs	r3, #0
 800adac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800adae:	e1d2      	b.n	800b156 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800adb0:	4b17      	ldr	r3, [pc, #92]	; (800ae10 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	f003 0304 	and.w	r3, r3, #4
 800adb8:	2b04      	cmp	r3, #4
 800adba:	d109      	bne.n	800add0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800adbc:	4b14      	ldr	r3, [pc, #80]	; (800ae10 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	08db      	lsrs	r3, r3, #3
 800adc2:	f003 0303 	and.w	r3, r3, #3
 800adc6:	4a13      	ldr	r2, [pc, #76]	; (800ae14 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800adc8:	fa22 f303 	lsr.w	r3, r2, r3
 800adcc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800adce:	e1c2      	b.n	800b156 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800add0:	2300      	movs	r3, #0
 800add2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800add4:	e1bf      	b.n	800b156 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800add6:	4b0e      	ldr	r3, [pc, #56]	; (800ae10 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800adde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ade2:	d102      	bne.n	800adea <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800ade4:	4b0c      	ldr	r3, [pc, #48]	; (800ae18 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800ade6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ade8:	e1b5      	b.n	800b156 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800adea:	2300      	movs	r3, #0
 800adec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800adee:	e1b2      	b.n	800b156 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800adf0:	4b07      	ldr	r3, [pc, #28]	; (800ae10 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800adf8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800adfc:	d102      	bne.n	800ae04 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800adfe:	4b07      	ldr	r3, [pc, #28]	; (800ae1c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800ae00:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ae02:	e1a8      	b.n	800b156 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ae04:	2300      	movs	r3, #0
 800ae06:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ae08:	e1a5      	b.n	800b156 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800ae0a:	2300      	movs	r3, #0
 800ae0c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ae0e:	e1a2      	b.n	800b156 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ae10:	58024400 	.word	0x58024400
 800ae14:	03d09000 	.word	0x03d09000
 800ae18:	003d0900 	.word	0x003d0900
 800ae1c:	017d7840 	.word	0x017d7840
 800ae20:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800ae24:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ae28:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800ae2c:	430b      	orrs	r3, r1
 800ae2e:	d173      	bne.n	800af18 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800ae30:	4b9c      	ldr	r3, [pc, #624]	; (800b0a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ae32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae34:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800ae38:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800ae3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae3c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ae40:	d02f      	beq.n	800aea2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800ae42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae44:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ae48:	d863      	bhi.n	800af12 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800ae4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d004      	beq.n	800ae5a <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800ae50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ae56:	d012      	beq.n	800ae7e <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800ae58:	e05b      	b.n	800af12 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ae5a:	4b92      	ldr	r3, [pc, #584]	; (800b0a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ae62:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ae66:	d107      	bne.n	800ae78 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ae68:	f107 0318 	add.w	r3, r7, #24
 800ae6c:	4618      	mov	r0, r3
 800ae6e:	f000 f991 	bl	800b194 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ae72:	69bb      	ldr	r3, [r7, #24]
 800ae74:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ae76:	e16e      	b.n	800b156 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ae78:	2300      	movs	r3, #0
 800ae7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ae7c:	e16b      	b.n	800b156 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ae7e:	4b89      	ldr	r3, [pc, #548]	; (800b0a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ae86:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ae8a:	d107      	bne.n	800ae9c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ae8c:	f107 030c 	add.w	r3, r7, #12
 800ae90:	4618      	mov	r0, r3
 800ae92:	f000 fad3 	bl	800b43c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800ae96:	697b      	ldr	r3, [r7, #20]
 800ae98:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ae9a:	e15c      	b.n	800b156 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ae9c:	2300      	movs	r3, #0
 800ae9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aea0:	e159      	b.n	800b156 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800aea2:	4b80      	ldr	r3, [pc, #512]	; (800b0a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aea4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aea6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800aeaa:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800aeac:	4b7d      	ldr	r3, [pc, #500]	; (800b0a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	f003 0304 	and.w	r3, r3, #4
 800aeb4:	2b04      	cmp	r3, #4
 800aeb6:	d10c      	bne.n	800aed2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800aeb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d109      	bne.n	800aed2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aebe:	4b79      	ldr	r3, [pc, #484]	; (800b0a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	08db      	lsrs	r3, r3, #3
 800aec4:	f003 0303 	and.w	r3, r3, #3
 800aec8:	4a77      	ldr	r2, [pc, #476]	; (800b0a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800aeca:	fa22 f303 	lsr.w	r3, r2, r3
 800aece:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aed0:	e01e      	b.n	800af10 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800aed2:	4b74      	ldr	r3, [pc, #464]	; (800b0a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aeda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aede:	d106      	bne.n	800aeee <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800aee0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aee2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800aee6:	d102      	bne.n	800aeee <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800aee8:	4b70      	ldr	r3, [pc, #448]	; (800b0ac <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800aeea:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aeec:	e010      	b.n	800af10 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800aeee:	4b6d      	ldr	r3, [pc, #436]	; (800b0a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aef6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aefa:	d106      	bne.n	800af0a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800aefc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aefe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800af02:	d102      	bne.n	800af0a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800af04:	4b6a      	ldr	r3, [pc, #424]	; (800b0b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800af06:	63fb      	str	r3, [r7, #60]	; 0x3c
 800af08:	e002      	b.n	800af10 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800af0a:	2300      	movs	r3, #0
 800af0c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800af0e:	e122      	b.n	800b156 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800af10:	e121      	b.n	800b156 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800af12:	2300      	movs	r3, #0
 800af14:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800af16:	e11e      	b.n	800b156 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800af18:	e9d7 2300 	ldrd	r2, r3, [r7]
 800af1c:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800af20:	430b      	orrs	r3, r1
 800af22:	d133      	bne.n	800af8c <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800af24:	4b5f      	ldr	r3, [pc, #380]	; (800b0a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800af26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800af28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800af2c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800af2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af30:	2b00      	cmp	r3, #0
 800af32:	d004      	beq.n	800af3e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800af34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800af3a:	d012      	beq.n	800af62 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800af3c:	e023      	b.n	800af86 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800af3e:	4b59      	ldr	r3, [pc, #356]	; (800b0a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800af46:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800af4a:	d107      	bne.n	800af5c <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800af4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800af50:	4618      	mov	r0, r3
 800af52:	f000 fbc7 	bl	800b6e4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800af56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af58:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800af5a:	e0fc      	b.n	800b156 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800af5c:	2300      	movs	r3, #0
 800af5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800af60:	e0f9      	b.n	800b156 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800af62:	4b50      	ldr	r3, [pc, #320]	; (800b0a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800af6a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800af6e:	d107      	bne.n	800af80 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800af70:	f107 0318 	add.w	r3, r7, #24
 800af74:	4618      	mov	r0, r3
 800af76:	f000 f90d 	bl	800b194 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800af7a:	6a3b      	ldr	r3, [r7, #32]
 800af7c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800af7e:	e0ea      	b.n	800b156 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800af80:	2300      	movs	r3, #0
 800af82:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800af84:	e0e7      	b.n	800b156 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800af86:	2300      	movs	r3, #0
 800af88:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800af8a:	e0e4      	b.n	800b156 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800af8c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800af90:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800af94:	430b      	orrs	r3, r1
 800af96:	f040 808d 	bne.w	800b0b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800af9a:	4b42      	ldr	r3, [pc, #264]	; (800b0a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800af9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af9e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800afa2:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800afa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afa6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800afaa:	d06b      	beq.n	800b084 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800afac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800afb2:	d874      	bhi.n	800b09e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800afb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800afba:	d056      	beq.n	800b06a <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800afbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800afc2:	d86c      	bhi.n	800b09e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800afc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afc6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800afca:	d03b      	beq.n	800b044 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800afcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afce:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800afd2:	d864      	bhi.n	800b09e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800afd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afd6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800afda:	d021      	beq.n	800b020 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800afdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afde:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800afe2:	d85c      	bhi.n	800b09e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800afe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d004      	beq.n	800aff4 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800afea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800aff0:	d004      	beq.n	800affc <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800aff2:	e054      	b.n	800b09e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800aff4:	f000 f8b8 	bl	800b168 <HAL_RCCEx_GetD3PCLK1Freq>
 800aff8:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800affa:	e0ac      	b.n	800b156 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800affc:	4b29      	ldr	r3, [pc, #164]	; (800b0a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b004:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b008:	d107      	bne.n	800b01a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b00a:	f107 0318 	add.w	r3, r7, #24
 800b00e:	4618      	mov	r0, r3
 800b010:	f000 f8c0 	bl	800b194 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b014:	69fb      	ldr	r3, [r7, #28]
 800b016:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b018:	e09d      	b.n	800b156 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b01a:	2300      	movs	r3, #0
 800b01c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b01e:	e09a      	b.n	800b156 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b020:	4b20      	ldr	r3, [pc, #128]	; (800b0a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b028:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b02c:	d107      	bne.n	800b03e <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b02e:	f107 030c 	add.w	r3, r7, #12
 800b032:	4618      	mov	r0, r3
 800b034:	f000 fa02 	bl	800b43c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b038:	693b      	ldr	r3, [r7, #16]
 800b03a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b03c:	e08b      	b.n	800b156 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b03e:	2300      	movs	r3, #0
 800b040:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b042:	e088      	b.n	800b156 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b044:	4b17      	ldr	r3, [pc, #92]	; (800b0a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	f003 0304 	and.w	r3, r3, #4
 800b04c:	2b04      	cmp	r3, #4
 800b04e:	d109      	bne.n	800b064 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b050:	4b14      	ldr	r3, [pc, #80]	; (800b0a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	08db      	lsrs	r3, r3, #3
 800b056:	f003 0303 	and.w	r3, r3, #3
 800b05a:	4a13      	ldr	r2, [pc, #76]	; (800b0a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800b05c:	fa22 f303 	lsr.w	r3, r2, r3
 800b060:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b062:	e078      	b.n	800b156 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b064:	2300      	movs	r3, #0
 800b066:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b068:	e075      	b.n	800b156 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b06a:	4b0e      	ldr	r3, [pc, #56]	; (800b0a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b072:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b076:	d102      	bne.n	800b07e <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800b078:	4b0c      	ldr	r3, [pc, #48]	; (800b0ac <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800b07a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b07c:	e06b      	b.n	800b156 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b07e:	2300      	movs	r3, #0
 800b080:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b082:	e068      	b.n	800b156 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b084:	4b07      	ldr	r3, [pc, #28]	; (800b0a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b08c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b090:	d102      	bne.n	800b098 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800b092:	4b07      	ldr	r3, [pc, #28]	; (800b0b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800b094:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b096:	e05e      	b.n	800b156 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b098:	2300      	movs	r3, #0
 800b09a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b09c:	e05b      	b.n	800b156 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800b09e:	2300      	movs	r3, #0
 800b0a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b0a2:	e058      	b.n	800b156 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b0a4:	58024400 	.word	0x58024400
 800b0a8:	03d09000 	.word	0x03d09000
 800b0ac:	003d0900 	.word	0x003d0900
 800b0b0:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800b0b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b0b8:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800b0bc:	430b      	orrs	r3, r1
 800b0be:	d148      	bne.n	800b152 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800b0c0:	4b27      	ldr	r3, [pc, #156]	; (800b160 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800b0c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b0c4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b0c8:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b0ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b0d0:	d02a      	beq.n	800b128 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800b0d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b0d8:	d838      	bhi.n	800b14c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800b0da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d004      	beq.n	800b0ea <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800b0e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b0e6:	d00d      	beq.n	800b104 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800b0e8:	e030      	b.n	800b14c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b0ea:	4b1d      	ldr	r3, [pc, #116]	; (800b160 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b0f2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b0f6:	d102      	bne.n	800b0fe <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800b0f8:	4b1a      	ldr	r3, [pc, #104]	; (800b164 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800b0fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b0fc:	e02b      	b.n	800b156 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b0fe:	2300      	movs	r3, #0
 800b100:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b102:	e028      	b.n	800b156 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b104:	4b16      	ldr	r3, [pc, #88]	; (800b160 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b10c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b110:	d107      	bne.n	800b122 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b112:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b116:	4618      	mov	r0, r3
 800b118:	f000 fae4 	bl	800b6e4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b11c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b11e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b120:	e019      	b.n	800b156 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b122:	2300      	movs	r3, #0
 800b124:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b126:	e016      	b.n	800b156 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b128:	4b0d      	ldr	r3, [pc, #52]	; (800b160 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b130:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b134:	d107      	bne.n	800b146 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b136:	f107 0318 	add.w	r3, r7, #24
 800b13a:	4618      	mov	r0, r3
 800b13c:	f000 f82a 	bl	800b194 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b140:	69fb      	ldr	r3, [r7, #28]
 800b142:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b144:	e007      	b.n	800b156 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b146:	2300      	movs	r3, #0
 800b148:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b14a:	e004      	b.n	800b156 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b14c:	2300      	movs	r3, #0
 800b14e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b150:	e001      	b.n	800b156 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800b152:	2300      	movs	r3, #0
 800b154:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800b156:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b158:	4618      	mov	r0, r3
 800b15a:	3740      	adds	r7, #64	; 0x40
 800b15c:	46bd      	mov	sp, r7
 800b15e:	bd80      	pop	{r7, pc}
 800b160:	58024400 	.word	0x58024400
 800b164:	017d7840 	.word	0x017d7840

0800b168 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800b168:	b580      	push	{r7, lr}
 800b16a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800b16c:	f7fd ffd4 	bl	8009118 <HAL_RCC_GetHCLKFreq>
 800b170:	4602      	mov	r2, r0
 800b172:	4b06      	ldr	r3, [pc, #24]	; (800b18c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800b174:	6a1b      	ldr	r3, [r3, #32]
 800b176:	091b      	lsrs	r3, r3, #4
 800b178:	f003 0307 	and.w	r3, r3, #7
 800b17c:	4904      	ldr	r1, [pc, #16]	; (800b190 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800b17e:	5ccb      	ldrb	r3, [r1, r3]
 800b180:	f003 031f 	and.w	r3, r3, #31
 800b184:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800b188:	4618      	mov	r0, r3
 800b18a:	bd80      	pop	{r7, pc}
 800b18c:	58024400 	.word	0x58024400
 800b190:	08020e9c 	.word	0x08020e9c

0800b194 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800b194:	b480      	push	{r7}
 800b196:	b089      	sub	sp, #36	; 0x24
 800b198:	af00      	add	r7, sp, #0
 800b19a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b19c:	4ba1      	ldr	r3, [pc, #644]	; (800b424 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b19e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1a0:	f003 0303 	and.w	r3, r3, #3
 800b1a4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800b1a6:	4b9f      	ldr	r3, [pc, #636]	; (800b424 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b1a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1aa:	0b1b      	lsrs	r3, r3, #12
 800b1ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b1b0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800b1b2:	4b9c      	ldr	r3, [pc, #624]	; (800b424 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b1b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1b6:	091b      	lsrs	r3, r3, #4
 800b1b8:	f003 0301 	and.w	r3, r3, #1
 800b1bc:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800b1be:	4b99      	ldr	r3, [pc, #612]	; (800b424 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b1c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b1c2:	08db      	lsrs	r3, r3, #3
 800b1c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b1c8:	693a      	ldr	r2, [r7, #16]
 800b1ca:	fb02 f303 	mul.w	r3, r2, r3
 800b1ce:	ee07 3a90 	vmov	s15, r3
 800b1d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1d6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800b1da:	697b      	ldr	r3, [r7, #20]
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	f000 8111 	beq.w	800b404 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800b1e2:	69bb      	ldr	r3, [r7, #24]
 800b1e4:	2b02      	cmp	r3, #2
 800b1e6:	f000 8083 	beq.w	800b2f0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800b1ea:	69bb      	ldr	r3, [r7, #24]
 800b1ec:	2b02      	cmp	r3, #2
 800b1ee:	f200 80a1 	bhi.w	800b334 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800b1f2:	69bb      	ldr	r3, [r7, #24]
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d003      	beq.n	800b200 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800b1f8:	69bb      	ldr	r3, [r7, #24]
 800b1fa:	2b01      	cmp	r3, #1
 800b1fc:	d056      	beq.n	800b2ac <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800b1fe:	e099      	b.n	800b334 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b200:	4b88      	ldr	r3, [pc, #544]	; (800b424 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	f003 0320 	and.w	r3, r3, #32
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d02d      	beq.n	800b268 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b20c:	4b85      	ldr	r3, [pc, #532]	; (800b424 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	08db      	lsrs	r3, r3, #3
 800b212:	f003 0303 	and.w	r3, r3, #3
 800b216:	4a84      	ldr	r2, [pc, #528]	; (800b428 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800b218:	fa22 f303 	lsr.w	r3, r2, r3
 800b21c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b21e:	68bb      	ldr	r3, [r7, #8]
 800b220:	ee07 3a90 	vmov	s15, r3
 800b224:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b228:	697b      	ldr	r3, [r7, #20]
 800b22a:	ee07 3a90 	vmov	s15, r3
 800b22e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b232:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b236:	4b7b      	ldr	r3, [pc, #492]	; (800b424 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b23a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b23e:	ee07 3a90 	vmov	s15, r3
 800b242:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b246:	ed97 6a03 	vldr	s12, [r7, #12]
 800b24a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b42c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b24e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b252:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b256:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b25a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b25e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b262:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b266:	e087      	b.n	800b378 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b268:	697b      	ldr	r3, [r7, #20]
 800b26a:	ee07 3a90 	vmov	s15, r3
 800b26e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b272:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b430 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800b276:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b27a:	4b6a      	ldr	r3, [pc, #424]	; (800b424 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b27c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b27e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b282:	ee07 3a90 	vmov	s15, r3
 800b286:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b28a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b28e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b42c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b292:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b296:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b29a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b29e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b2a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b2a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b2aa:	e065      	b.n	800b378 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b2ac:	697b      	ldr	r3, [r7, #20]
 800b2ae:	ee07 3a90 	vmov	s15, r3
 800b2b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2b6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b434 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b2ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b2be:	4b59      	ldr	r3, [pc, #356]	; (800b424 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b2c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b2c6:	ee07 3a90 	vmov	s15, r3
 800b2ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b2ce:	ed97 6a03 	vldr	s12, [r7, #12]
 800b2d2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b42c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b2d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b2da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b2de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b2e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b2e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b2ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b2ee:	e043      	b.n	800b378 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b2f0:	697b      	ldr	r3, [r7, #20]
 800b2f2:	ee07 3a90 	vmov	s15, r3
 800b2f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2fa:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b438 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800b2fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b302:	4b48      	ldr	r3, [pc, #288]	; (800b424 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b306:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b30a:	ee07 3a90 	vmov	s15, r3
 800b30e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b312:	ed97 6a03 	vldr	s12, [r7, #12]
 800b316:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b42c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b31a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b31e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b322:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b326:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b32a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b32e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b332:	e021      	b.n	800b378 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b334:	697b      	ldr	r3, [r7, #20]
 800b336:	ee07 3a90 	vmov	s15, r3
 800b33a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b33e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b434 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b342:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b346:	4b37      	ldr	r3, [pc, #220]	; (800b424 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b34a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b34e:	ee07 3a90 	vmov	s15, r3
 800b352:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b356:	ed97 6a03 	vldr	s12, [r7, #12]
 800b35a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b42c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b35e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b362:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b366:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b36a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b36e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b372:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b376:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800b378:	4b2a      	ldr	r3, [pc, #168]	; (800b424 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b37a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b37c:	0a5b      	lsrs	r3, r3, #9
 800b37e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b382:	ee07 3a90 	vmov	s15, r3
 800b386:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b38a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b38e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b392:	edd7 6a07 	vldr	s13, [r7, #28]
 800b396:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b39a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b39e:	ee17 2a90 	vmov	r2, s15
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800b3a6:	4b1f      	ldr	r3, [pc, #124]	; (800b424 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b3a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3aa:	0c1b      	lsrs	r3, r3, #16
 800b3ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b3b0:	ee07 3a90 	vmov	s15, r3
 800b3b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3b8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b3bc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b3c0:	edd7 6a07 	vldr	s13, [r7, #28]
 800b3c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b3c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b3cc:	ee17 2a90 	vmov	r2, s15
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800b3d4:	4b13      	ldr	r3, [pc, #76]	; (800b424 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b3d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3d8:	0e1b      	lsrs	r3, r3, #24
 800b3da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b3de:	ee07 3a90 	vmov	s15, r3
 800b3e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b3ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b3ee:	edd7 6a07 	vldr	s13, [r7, #28]
 800b3f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b3f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b3fa:	ee17 2a90 	vmov	r2, s15
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800b402:	e008      	b.n	800b416 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	2200      	movs	r2, #0
 800b408:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	2200      	movs	r2, #0
 800b40e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	2200      	movs	r2, #0
 800b414:	609a      	str	r2, [r3, #8]
}
 800b416:	bf00      	nop
 800b418:	3724      	adds	r7, #36	; 0x24
 800b41a:	46bd      	mov	sp, r7
 800b41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b420:	4770      	bx	lr
 800b422:	bf00      	nop
 800b424:	58024400 	.word	0x58024400
 800b428:	03d09000 	.word	0x03d09000
 800b42c:	46000000 	.word	0x46000000
 800b430:	4c742400 	.word	0x4c742400
 800b434:	4a742400 	.word	0x4a742400
 800b438:	4bbebc20 	.word	0x4bbebc20

0800b43c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800b43c:	b480      	push	{r7}
 800b43e:	b089      	sub	sp, #36	; 0x24
 800b440:	af00      	add	r7, sp, #0
 800b442:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b444:	4ba1      	ldr	r3, [pc, #644]	; (800b6cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b448:	f003 0303 	and.w	r3, r3, #3
 800b44c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800b44e:	4b9f      	ldr	r3, [pc, #636]	; (800b6cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b452:	0d1b      	lsrs	r3, r3, #20
 800b454:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b458:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800b45a:	4b9c      	ldr	r3, [pc, #624]	; (800b6cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b45c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b45e:	0a1b      	lsrs	r3, r3, #8
 800b460:	f003 0301 	and.w	r3, r3, #1
 800b464:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800b466:	4b99      	ldr	r3, [pc, #612]	; (800b6cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b46a:	08db      	lsrs	r3, r3, #3
 800b46c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b470:	693a      	ldr	r2, [r7, #16]
 800b472:	fb02 f303 	mul.w	r3, r2, r3
 800b476:	ee07 3a90 	vmov	s15, r3
 800b47a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b47e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800b482:	697b      	ldr	r3, [r7, #20]
 800b484:	2b00      	cmp	r3, #0
 800b486:	f000 8111 	beq.w	800b6ac <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800b48a:	69bb      	ldr	r3, [r7, #24]
 800b48c:	2b02      	cmp	r3, #2
 800b48e:	f000 8083 	beq.w	800b598 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800b492:	69bb      	ldr	r3, [r7, #24]
 800b494:	2b02      	cmp	r3, #2
 800b496:	f200 80a1 	bhi.w	800b5dc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800b49a:	69bb      	ldr	r3, [r7, #24]
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d003      	beq.n	800b4a8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800b4a0:	69bb      	ldr	r3, [r7, #24]
 800b4a2:	2b01      	cmp	r3, #1
 800b4a4:	d056      	beq.n	800b554 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800b4a6:	e099      	b.n	800b5dc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b4a8:	4b88      	ldr	r3, [pc, #544]	; (800b6cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	f003 0320 	and.w	r3, r3, #32
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d02d      	beq.n	800b510 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b4b4:	4b85      	ldr	r3, [pc, #532]	; (800b6cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	08db      	lsrs	r3, r3, #3
 800b4ba:	f003 0303 	and.w	r3, r3, #3
 800b4be:	4a84      	ldr	r2, [pc, #528]	; (800b6d0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800b4c0:	fa22 f303 	lsr.w	r3, r2, r3
 800b4c4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b4c6:	68bb      	ldr	r3, [r7, #8]
 800b4c8:	ee07 3a90 	vmov	s15, r3
 800b4cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b4d0:	697b      	ldr	r3, [r7, #20]
 800b4d2:	ee07 3a90 	vmov	s15, r3
 800b4d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b4de:	4b7b      	ldr	r3, [pc, #492]	; (800b6cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b4e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b4e6:	ee07 3a90 	vmov	s15, r3
 800b4ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b4ee:	ed97 6a03 	vldr	s12, [r7, #12]
 800b4f2:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b6d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b4f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b4fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b4fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b502:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b506:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b50a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b50e:	e087      	b.n	800b620 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b510:	697b      	ldr	r3, [r7, #20]
 800b512:	ee07 3a90 	vmov	s15, r3
 800b516:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b51a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b6d8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800b51e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b522:	4b6a      	ldr	r3, [pc, #424]	; (800b6cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b526:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b52a:	ee07 3a90 	vmov	s15, r3
 800b52e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b532:	ed97 6a03 	vldr	s12, [r7, #12]
 800b536:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b6d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b53a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b53e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b542:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b546:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b54a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b54e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b552:	e065      	b.n	800b620 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b554:	697b      	ldr	r3, [r7, #20]
 800b556:	ee07 3a90 	vmov	s15, r3
 800b55a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b55e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b6dc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b562:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b566:	4b59      	ldr	r3, [pc, #356]	; (800b6cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b56a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b56e:	ee07 3a90 	vmov	s15, r3
 800b572:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b576:	ed97 6a03 	vldr	s12, [r7, #12]
 800b57a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b6d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b57e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b582:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b586:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b58a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b58e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b592:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b596:	e043      	b.n	800b620 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b598:	697b      	ldr	r3, [r7, #20]
 800b59a:	ee07 3a90 	vmov	s15, r3
 800b59e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b5a2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b6e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800b5a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b5aa:	4b48      	ldr	r3, [pc, #288]	; (800b6cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b5ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b5b2:	ee07 3a90 	vmov	s15, r3
 800b5b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b5ba:	ed97 6a03 	vldr	s12, [r7, #12]
 800b5be:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b6d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b5c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b5c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b5ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b5ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b5d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b5d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b5da:	e021      	b.n	800b620 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b5dc:	697b      	ldr	r3, [r7, #20]
 800b5de:	ee07 3a90 	vmov	s15, r3
 800b5e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b5e6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b6dc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b5ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b5ee:	4b37      	ldr	r3, [pc, #220]	; (800b6cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b5f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b5f6:	ee07 3a90 	vmov	s15, r3
 800b5fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b5fe:	ed97 6a03 	vldr	s12, [r7, #12]
 800b602:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b6d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b606:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b60a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b60e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b612:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b616:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b61a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b61e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800b620:	4b2a      	ldr	r3, [pc, #168]	; (800b6cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b624:	0a5b      	lsrs	r3, r3, #9
 800b626:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b62a:	ee07 3a90 	vmov	s15, r3
 800b62e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b632:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b636:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b63a:	edd7 6a07 	vldr	s13, [r7, #28]
 800b63e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b642:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b646:	ee17 2a90 	vmov	r2, s15
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800b64e:	4b1f      	ldr	r3, [pc, #124]	; (800b6cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b652:	0c1b      	lsrs	r3, r3, #16
 800b654:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b658:	ee07 3a90 	vmov	s15, r3
 800b65c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b660:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b664:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b668:	edd7 6a07 	vldr	s13, [r7, #28]
 800b66c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b670:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b674:	ee17 2a90 	vmov	r2, s15
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800b67c:	4b13      	ldr	r3, [pc, #76]	; (800b6cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b67e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b680:	0e1b      	lsrs	r3, r3, #24
 800b682:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b686:	ee07 3a90 	vmov	s15, r3
 800b68a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b68e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b692:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b696:	edd7 6a07 	vldr	s13, [r7, #28]
 800b69a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b69e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b6a2:	ee17 2a90 	vmov	r2, s15
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800b6aa:	e008      	b.n	800b6be <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	2200      	movs	r2, #0
 800b6b0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	2200      	movs	r2, #0
 800b6b6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	2200      	movs	r2, #0
 800b6bc:	609a      	str	r2, [r3, #8]
}
 800b6be:	bf00      	nop
 800b6c0:	3724      	adds	r7, #36	; 0x24
 800b6c2:	46bd      	mov	sp, r7
 800b6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c8:	4770      	bx	lr
 800b6ca:	bf00      	nop
 800b6cc:	58024400 	.word	0x58024400
 800b6d0:	03d09000 	.word	0x03d09000
 800b6d4:	46000000 	.word	0x46000000
 800b6d8:	4c742400 	.word	0x4c742400
 800b6dc:	4a742400 	.word	0x4a742400
 800b6e0:	4bbebc20 	.word	0x4bbebc20

0800b6e4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800b6e4:	b480      	push	{r7}
 800b6e6:	b089      	sub	sp, #36	; 0x24
 800b6e8:	af00      	add	r7, sp, #0
 800b6ea:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b6ec:	4ba0      	ldr	r3, [pc, #640]	; (800b970 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b6ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6f0:	f003 0303 	and.w	r3, r3, #3
 800b6f4:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800b6f6:	4b9e      	ldr	r3, [pc, #632]	; (800b970 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b6f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6fa:	091b      	lsrs	r3, r3, #4
 800b6fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b700:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800b702:	4b9b      	ldr	r3, [pc, #620]	; (800b970 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b706:	f003 0301 	and.w	r3, r3, #1
 800b70a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b70c:	4b98      	ldr	r3, [pc, #608]	; (800b970 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b70e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b710:	08db      	lsrs	r3, r3, #3
 800b712:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b716:	693a      	ldr	r2, [r7, #16]
 800b718:	fb02 f303 	mul.w	r3, r2, r3
 800b71c:	ee07 3a90 	vmov	s15, r3
 800b720:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b724:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800b728:	697b      	ldr	r3, [r7, #20]
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	f000 8111 	beq.w	800b952 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800b730:	69bb      	ldr	r3, [r7, #24]
 800b732:	2b02      	cmp	r3, #2
 800b734:	f000 8083 	beq.w	800b83e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800b738:	69bb      	ldr	r3, [r7, #24]
 800b73a:	2b02      	cmp	r3, #2
 800b73c:	f200 80a1 	bhi.w	800b882 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800b740:	69bb      	ldr	r3, [r7, #24]
 800b742:	2b00      	cmp	r3, #0
 800b744:	d003      	beq.n	800b74e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800b746:	69bb      	ldr	r3, [r7, #24]
 800b748:	2b01      	cmp	r3, #1
 800b74a:	d056      	beq.n	800b7fa <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800b74c:	e099      	b.n	800b882 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b74e:	4b88      	ldr	r3, [pc, #544]	; (800b970 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	f003 0320 	and.w	r3, r3, #32
 800b756:	2b00      	cmp	r3, #0
 800b758:	d02d      	beq.n	800b7b6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b75a:	4b85      	ldr	r3, [pc, #532]	; (800b970 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	08db      	lsrs	r3, r3, #3
 800b760:	f003 0303 	and.w	r3, r3, #3
 800b764:	4a83      	ldr	r2, [pc, #524]	; (800b974 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800b766:	fa22 f303 	lsr.w	r3, r2, r3
 800b76a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b76c:	68bb      	ldr	r3, [r7, #8]
 800b76e:	ee07 3a90 	vmov	s15, r3
 800b772:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b776:	697b      	ldr	r3, [r7, #20]
 800b778:	ee07 3a90 	vmov	s15, r3
 800b77c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b780:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b784:	4b7a      	ldr	r3, [pc, #488]	; (800b970 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b788:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b78c:	ee07 3a90 	vmov	s15, r3
 800b790:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b794:	ed97 6a03 	vldr	s12, [r7, #12]
 800b798:	eddf 5a77 	vldr	s11, [pc, #476]	; 800b978 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b79c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b7a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b7a4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b7a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b7ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b7b0:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b7b4:	e087      	b.n	800b8c6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b7b6:	697b      	ldr	r3, [r7, #20]
 800b7b8:	ee07 3a90 	vmov	s15, r3
 800b7bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b7c0:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800b97c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b7c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b7c8:	4b69      	ldr	r3, [pc, #420]	; (800b970 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b7ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b7d0:	ee07 3a90 	vmov	s15, r3
 800b7d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b7d8:	ed97 6a03 	vldr	s12, [r7, #12]
 800b7dc:	eddf 5a66 	vldr	s11, [pc, #408]	; 800b978 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b7e0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b7e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b7e8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b7ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b7f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b7f4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b7f8:	e065      	b.n	800b8c6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b7fa:	697b      	ldr	r3, [r7, #20]
 800b7fc:	ee07 3a90 	vmov	s15, r3
 800b800:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b804:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800b980 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800b808:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b80c:	4b58      	ldr	r3, [pc, #352]	; (800b970 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b80e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b810:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b814:	ee07 3a90 	vmov	s15, r3
 800b818:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b81c:	ed97 6a03 	vldr	s12, [r7, #12]
 800b820:	eddf 5a55 	vldr	s11, [pc, #340]	; 800b978 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b824:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b828:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b82c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b830:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b834:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b838:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b83c:	e043      	b.n	800b8c6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b83e:	697b      	ldr	r3, [r7, #20]
 800b840:	ee07 3a90 	vmov	s15, r3
 800b844:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b848:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800b984 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800b84c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b850:	4b47      	ldr	r3, [pc, #284]	; (800b970 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b854:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b858:	ee07 3a90 	vmov	s15, r3
 800b85c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b860:	ed97 6a03 	vldr	s12, [r7, #12]
 800b864:	eddf 5a44 	vldr	s11, [pc, #272]	; 800b978 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b868:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b86c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b870:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b874:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b878:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b87c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b880:	e021      	b.n	800b8c6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b882:	697b      	ldr	r3, [r7, #20]
 800b884:	ee07 3a90 	vmov	s15, r3
 800b888:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b88c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800b97c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b890:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b894:	4b36      	ldr	r3, [pc, #216]	; (800b970 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b898:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b89c:	ee07 3a90 	vmov	s15, r3
 800b8a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b8a4:	ed97 6a03 	vldr	s12, [r7, #12]
 800b8a8:	eddf 5a33 	vldr	s11, [pc, #204]	; 800b978 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b8ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b8b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b8b4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b8b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b8bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b8c0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b8c4:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800b8c6:	4b2a      	ldr	r3, [pc, #168]	; (800b970 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b8c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8ca:	0a5b      	lsrs	r3, r3, #9
 800b8cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b8d0:	ee07 3a90 	vmov	s15, r3
 800b8d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b8d8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b8dc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b8e0:	edd7 6a07 	vldr	s13, [r7, #28]
 800b8e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b8e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b8ec:	ee17 2a90 	vmov	r2, s15
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800b8f4:	4b1e      	ldr	r3, [pc, #120]	; (800b970 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b8f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8f8:	0c1b      	lsrs	r3, r3, #16
 800b8fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b8fe:	ee07 3a90 	vmov	s15, r3
 800b902:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b906:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b90a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b90e:	edd7 6a07 	vldr	s13, [r7, #28]
 800b912:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b916:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b91a:	ee17 2a90 	vmov	r2, s15
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800b922:	4b13      	ldr	r3, [pc, #76]	; (800b970 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b926:	0e1b      	lsrs	r3, r3, #24
 800b928:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b92c:	ee07 3a90 	vmov	s15, r3
 800b930:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b934:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b938:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b93c:	edd7 6a07 	vldr	s13, [r7, #28]
 800b940:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b944:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b948:	ee17 2a90 	vmov	r2, s15
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800b950:	e008      	b.n	800b964 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	2200      	movs	r2, #0
 800b956:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	2200      	movs	r2, #0
 800b95c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	2200      	movs	r2, #0
 800b962:	609a      	str	r2, [r3, #8]
}
 800b964:	bf00      	nop
 800b966:	3724      	adds	r7, #36	; 0x24
 800b968:	46bd      	mov	sp, r7
 800b96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b96e:	4770      	bx	lr
 800b970:	58024400 	.word	0x58024400
 800b974:	03d09000 	.word	0x03d09000
 800b978:	46000000 	.word	0x46000000
 800b97c:	4c742400 	.word	0x4c742400
 800b980:	4a742400 	.word	0x4a742400
 800b984:	4bbebc20 	.word	0x4bbebc20

0800b988 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b988:	b580      	push	{r7, lr}
 800b98a:	b084      	sub	sp, #16
 800b98c:	af00      	add	r7, sp, #0
 800b98e:	6078      	str	r0, [r7, #4]
 800b990:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b992:	2300      	movs	r3, #0
 800b994:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b996:	4b53      	ldr	r3, [pc, #332]	; (800bae4 <RCCEx_PLL2_Config+0x15c>)
 800b998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b99a:	f003 0303 	and.w	r3, r3, #3
 800b99e:	2b03      	cmp	r3, #3
 800b9a0:	d101      	bne.n	800b9a6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b9a2:	2301      	movs	r3, #1
 800b9a4:	e099      	b.n	800bada <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b9a6:	4b4f      	ldr	r3, [pc, #316]	; (800bae4 <RCCEx_PLL2_Config+0x15c>)
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	4a4e      	ldr	r2, [pc, #312]	; (800bae4 <RCCEx_PLL2_Config+0x15c>)
 800b9ac:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b9b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b9b2:	f7f8 fee1 	bl	8004778 <HAL_GetTick>
 800b9b6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b9b8:	e008      	b.n	800b9cc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b9ba:	f7f8 fedd 	bl	8004778 <HAL_GetTick>
 800b9be:	4602      	mov	r2, r0
 800b9c0:	68bb      	ldr	r3, [r7, #8]
 800b9c2:	1ad3      	subs	r3, r2, r3
 800b9c4:	2b02      	cmp	r3, #2
 800b9c6:	d901      	bls.n	800b9cc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b9c8:	2303      	movs	r3, #3
 800b9ca:	e086      	b.n	800bada <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b9cc:	4b45      	ldr	r3, [pc, #276]	; (800bae4 <RCCEx_PLL2_Config+0x15c>)
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d1f0      	bne.n	800b9ba <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b9d8:	4b42      	ldr	r3, [pc, #264]	; (800bae4 <RCCEx_PLL2_Config+0x15c>)
 800b9da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9dc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	031b      	lsls	r3, r3, #12
 800b9e6:	493f      	ldr	r1, [pc, #252]	; (800bae4 <RCCEx_PLL2_Config+0x15c>)
 800b9e8:	4313      	orrs	r3, r2
 800b9ea:	628b      	str	r3, [r1, #40]	; 0x28
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	685b      	ldr	r3, [r3, #4]
 800b9f0:	3b01      	subs	r3, #1
 800b9f2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	689b      	ldr	r3, [r3, #8]
 800b9fa:	3b01      	subs	r3, #1
 800b9fc:	025b      	lsls	r3, r3, #9
 800b9fe:	b29b      	uxth	r3, r3
 800ba00:	431a      	orrs	r2, r3
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	68db      	ldr	r3, [r3, #12]
 800ba06:	3b01      	subs	r3, #1
 800ba08:	041b      	lsls	r3, r3, #16
 800ba0a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800ba0e:	431a      	orrs	r2, r3
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	691b      	ldr	r3, [r3, #16]
 800ba14:	3b01      	subs	r3, #1
 800ba16:	061b      	lsls	r3, r3, #24
 800ba18:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800ba1c:	4931      	ldr	r1, [pc, #196]	; (800bae4 <RCCEx_PLL2_Config+0x15c>)
 800ba1e:	4313      	orrs	r3, r2
 800ba20:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800ba22:	4b30      	ldr	r3, [pc, #192]	; (800bae4 <RCCEx_PLL2_Config+0x15c>)
 800ba24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba26:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	695b      	ldr	r3, [r3, #20]
 800ba2e:	492d      	ldr	r1, [pc, #180]	; (800bae4 <RCCEx_PLL2_Config+0x15c>)
 800ba30:	4313      	orrs	r3, r2
 800ba32:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800ba34:	4b2b      	ldr	r3, [pc, #172]	; (800bae4 <RCCEx_PLL2_Config+0x15c>)
 800ba36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba38:	f023 0220 	bic.w	r2, r3, #32
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	699b      	ldr	r3, [r3, #24]
 800ba40:	4928      	ldr	r1, [pc, #160]	; (800bae4 <RCCEx_PLL2_Config+0x15c>)
 800ba42:	4313      	orrs	r3, r2
 800ba44:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800ba46:	4b27      	ldr	r3, [pc, #156]	; (800bae4 <RCCEx_PLL2_Config+0x15c>)
 800ba48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba4a:	4a26      	ldr	r2, [pc, #152]	; (800bae4 <RCCEx_PLL2_Config+0x15c>)
 800ba4c:	f023 0310 	bic.w	r3, r3, #16
 800ba50:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800ba52:	4b24      	ldr	r3, [pc, #144]	; (800bae4 <RCCEx_PLL2_Config+0x15c>)
 800ba54:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ba56:	4b24      	ldr	r3, [pc, #144]	; (800bae8 <RCCEx_PLL2_Config+0x160>)
 800ba58:	4013      	ands	r3, r2
 800ba5a:	687a      	ldr	r2, [r7, #4]
 800ba5c:	69d2      	ldr	r2, [r2, #28]
 800ba5e:	00d2      	lsls	r2, r2, #3
 800ba60:	4920      	ldr	r1, [pc, #128]	; (800bae4 <RCCEx_PLL2_Config+0x15c>)
 800ba62:	4313      	orrs	r3, r2
 800ba64:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800ba66:	4b1f      	ldr	r3, [pc, #124]	; (800bae4 <RCCEx_PLL2_Config+0x15c>)
 800ba68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba6a:	4a1e      	ldr	r2, [pc, #120]	; (800bae4 <RCCEx_PLL2_Config+0x15c>)
 800ba6c:	f043 0310 	orr.w	r3, r3, #16
 800ba70:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800ba72:	683b      	ldr	r3, [r7, #0]
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d106      	bne.n	800ba86 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800ba78:	4b1a      	ldr	r3, [pc, #104]	; (800bae4 <RCCEx_PLL2_Config+0x15c>)
 800ba7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba7c:	4a19      	ldr	r2, [pc, #100]	; (800bae4 <RCCEx_PLL2_Config+0x15c>)
 800ba7e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ba82:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ba84:	e00f      	b.n	800baa6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800ba86:	683b      	ldr	r3, [r7, #0]
 800ba88:	2b01      	cmp	r3, #1
 800ba8a:	d106      	bne.n	800ba9a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800ba8c:	4b15      	ldr	r3, [pc, #84]	; (800bae4 <RCCEx_PLL2_Config+0x15c>)
 800ba8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba90:	4a14      	ldr	r2, [pc, #80]	; (800bae4 <RCCEx_PLL2_Config+0x15c>)
 800ba92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ba96:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ba98:	e005      	b.n	800baa6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800ba9a:	4b12      	ldr	r3, [pc, #72]	; (800bae4 <RCCEx_PLL2_Config+0x15c>)
 800ba9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba9e:	4a11      	ldr	r2, [pc, #68]	; (800bae4 <RCCEx_PLL2_Config+0x15c>)
 800baa0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800baa4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800baa6:	4b0f      	ldr	r3, [pc, #60]	; (800bae4 <RCCEx_PLL2_Config+0x15c>)
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	4a0e      	ldr	r2, [pc, #56]	; (800bae4 <RCCEx_PLL2_Config+0x15c>)
 800baac:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800bab0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bab2:	f7f8 fe61 	bl	8004778 <HAL_GetTick>
 800bab6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800bab8:	e008      	b.n	800bacc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800baba:	f7f8 fe5d 	bl	8004778 <HAL_GetTick>
 800babe:	4602      	mov	r2, r0
 800bac0:	68bb      	ldr	r3, [r7, #8]
 800bac2:	1ad3      	subs	r3, r2, r3
 800bac4:	2b02      	cmp	r3, #2
 800bac6:	d901      	bls.n	800bacc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800bac8:	2303      	movs	r3, #3
 800baca:	e006      	b.n	800bada <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800bacc:	4b05      	ldr	r3, [pc, #20]	; (800bae4 <RCCEx_PLL2_Config+0x15c>)
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d0f0      	beq.n	800baba <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800bad8:	7bfb      	ldrb	r3, [r7, #15]
}
 800bada:	4618      	mov	r0, r3
 800badc:	3710      	adds	r7, #16
 800bade:	46bd      	mov	sp, r7
 800bae0:	bd80      	pop	{r7, pc}
 800bae2:	bf00      	nop
 800bae4:	58024400 	.word	0x58024400
 800bae8:	ffff0007 	.word	0xffff0007

0800baec <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800baec:	b580      	push	{r7, lr}
 800baee:	b084      	sub	sp, #16
 800baf0:	af00      	add	r7, sp, #0
 800baf2:	6078      	str	r0, [r7, #4]
 800baf4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800baf6:	2300      	movs	r3, #0
 800baf8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800bafa:	4b53      	ldr	r3, [pc, #332]	; (800bc48 <RCCEx_PLL3_Config+0x15c>)
 800bafc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bafe:	f003 0303 	and.w	r3, r3, #3
 800bb02:	2b03      	cmp	r3, #3
 800bb04:	d101      	bne.n	800bb0a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800bb06:	2301      	movs	r3, #1
 800bb08:	e099      	b.n	800bc3e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800bb0a:	4b4f      	ldr	r3, [pc, #316]	; (800bc48 <RCCEx_PLL3_Config+0x15c>)
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	4a4e      	ldr	r2, [pc, #312]	; (800bc48 <RCCEx_PLL3_Config+0x15c>)
 800bb10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bb14:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bb16:	f7f8 fe2f 	bl	8004778 <HAL_GetTick>
 800bb1a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800bb1c:	e008      	b.n	800bb30 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800bb1e:	f7f8 fe2b 	bl	8004778 <HAL_GetTick>
 800bb22:	4602      	mov	r2, r0
 800bb24:	68bb      	ldr	r3, [r7, #8]
 800bb26:	1ad3      	subs	r3, r2, r3
 800bb28:	2b02      	cmp	r3, #2
 800bb2a:	d901      	bls.n	800bb30 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800bb2c:	2303      	movs	r3, #3
 800bb2e:	e086      	b.n	800bc3e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800bb30:	4b45      	ldr	r3, [pc, #276]	; (800bc48 <RCCEx_PLL3_Config+0x15c>)
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d1f0      	bne.n	800bb1e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800bb3c:	4b42      	ldr	r3, [pc, #264]	; (800bc48 <RCCEx_PLL3_Config+0x15c>)
 800bb3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb40:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	051b      	lsls	r3, r3, #20
 800bb4a:	493f      	ldr	r1, [pc, #252]	; (800bc48 <RCCEx_PLL3_Config+0x15c>)
 800bb4c:	4313      	orrs	r3, r2
 800bb4e:	628b      	str	r3, [r1, #40]	; 0x28
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	685b      	ldr	r3, [r3, #4]
 800bb54:	3b01      	subs	r3, #1
 800bb56:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	689b      	ldr	r3, [r3, #8]
 800bb5e:	3b01      	subs	r3, #1
 800bb60:	025b      	lsls	r3, r3, #9
 800bb62:	b29b      	uxth	r3, r3
 800bb64:	431a      	orrs	r2, r3
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	68db      	ldr	r3, [r3, #12]
 800bb6a:	3b01      	subs	r3, #1
 800bb6c:	041b      	lsls	r3, r3, #16
 800bb6e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800bb72:	431a      	orrs	r2, r3
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	691b      	ldr	r3, [r3, #16]
 800bb78:	3b01      	subs	r3, #1
 800bb7a:	061b      	lsls	r3, r3, #24
 800bb7c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800bb80:	4931      	ldr	r1, [pc, #196]	; (800bc48 <RCCEx_PLL3_Config+0x15c>)
 800bb82:	4313      	orrs	r3, r2
 800bb84:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800bb86:	4b30      	ldr	r3, [pc, #192]	; (800bc48 <RCCEx_PLL3_Config+0x15c>)
 800bb88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb8a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	695b      	ldr	r3, [r3, #20]
 800bb92:	492d      	ldr	r1, [pc, #180]	; (800bc48 <RCCEx_PLL3_Config+0x15c>)
 800bb94:	4313      	orrs	r3, r2
 800bb96:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800bb98:	4b2b      	ldr	r3, [pc, #172]	; (800bc48 <RCCEx_PLL3_Config+0x15c>)
 800bb9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb9c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	699b      	ldr	r3, [r3, #24]
 800bba4:	4928      	ldr	r1, [pc, #160]	; (800bc48 <RCCEx_PLL3_Config+0x15c>)
 800bba6:	4313      	orrs	r3, r2
 800bba8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800bbaa:	4b27      	ldr	r3, [pc, #156]	; (800bc48 <RCCEx_PLL3_Config+0x15c>)
 800bbac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbae:	4a26      	ldr	r2, [pc, #152]	; (800bc48 <RCCEx_PLL3_Config+0x15c>)
 800bbb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bbb4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800bbb6:	4b24      	ldr	r3, [pc, #144]	; (800bc48 <RCCEx_PLL3_Config+0x15c>)
 800bbb8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bbba:	4b24      	ldr	r3, [pc, #144]	; (800bc4c <RCCEx_PLL3_Config+0x160>)
 800bbbc:	4013      	ands	r3, r2
 800bbbe:	687a      	ldr	r2, [r7, #4]
 800bbc0:	69d2      	ldr	r2, [r2, #28]
 800bbc2:	00d2      	lsls	r2, r2, #3
 800bbc4:	4920      	ldr	r1, [pc, #128]	; (800bc48 <RCCEx_PLL3_Config+0x15c>)
 800bbc6:	4313      	orrs	r3, r2
 800bbc8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800bbca:	4b1f      	ldr	r3, [pc, #124]	; (800bc48 <RCCEx_PLL3_Config+0x15c>)
 800bbcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbce:	4a1e      	ldr	r2, [pc, #120]	; (800bc48 <RCCEx_PLL3_Config+0x15c>)
 800bbd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bbd4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800bbd6:	683b      	ldr	r3, [r7, #0]
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d106      	bne.n	800bbea <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800bbdc:	4b1a      	ldr	r3, [pc, #104]	; (800bc48 <RCCEx_PLL3_Config+0x15c>)
 800bbde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbe0:	4a19      	ldr	r2, [pc, #100]	; (800bc48 <RCCEx_PLL3_Config+0x15c>)
 800bbe2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800bbe6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800bbe8:	e00f      	b.n	800bc0a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800bbea:	683b      	ldr	r3, [r7, #0]
 800bbec:	2b01      	cmp	r3, #1
 800bbee:	d106      	bne.n	800bbfe <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800bbf0:	4b15      	ldr	r3, [pc, #84]	; (800bc48 <RCCEx_PLL3_Config+0x15c>)
 800bbf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbf4:	4a14      	ldr	r2, [pc, #80]	; (800bc48 <RCCEx_PLL3_Config+0x15c>)
 800bbf6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800bbfa:	62d3      	str	r3, [r2, #44]	; 0x2c
 800bbfc:	e005      	b.n	800bc0a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800bbfe:	4b12      	ldr	r3, [pc, #72]	; (800bc48 <RCCEx_PLL3_Config+0x15c>)
 800bc00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc02:	4a11      	ldr	r2, [pc, #68]	; (800bc48 <RCCEx_PLL3_Config+0x15c>)
 800bc04:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800bc08:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800bc0a:	4b0f      	ldr	r3, [pc, #60]	; (800bc48 <RCCEx_PLL3_Config+0x15c>)
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	4a0e      	ldr	r2, [pc, #56]	; (800bc48 <RCCEx_PLL3_Config+0x15c>)
 800bc10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bc14:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bc16:	f7f8 fdaf 	bl	8004778 <HAL_GetTick>
 800bc1a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800bc1c:	e008      	b.n	800bc30 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800bc1e:	f7f8 fdab 	bl	8004778 <HAL_GetTick>
 800bc22:	4602      	mov	r2, r0
 800bc24:	68bb      	ldr	r3, [r7, #8]
 800bc26:	1ad3      	subs	r3, r2, r3
 800bc28:	2b02      	cmp	r3, #2
 800bc2a:	d901      	bls.n	800bc30 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800bc2c:	2303      	movs	r3, #3
 800bc2e:	e006      	b.n	800bc3e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800bc30:	4b05      	ldr	r3, [pc, #20]	; (800bc48 <RCCEx_PLL3_Config+0x15c>)
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d0f0      	beq.n	800bc1e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800bc3c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc3e:	4618      	mov	r0, r3
 800bc40:	3710      	adds	r7, #16
 800bc42:	46bd      	mov	sp, r7
 800bc44:	bd80      	pop	{r7, pc}
 800bc46:	bf00      	nop
 800bc48:	58024400 	.word	0x58024400
 800bc4c:	ffff0007 	.word	0xffff0007

0800bc50 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800bc50:	b580      	push	{r7, lr}
 800bc52:	b08a      	sub	sp, #40	; 0x28
 800bc54:	af00      	add	r7, sp, #0
 800bc56:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d101      	bne.n	800bc62 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800bc5e:	2301      	movs	r3, #1
 800bc60:	e07c      	b.n	800bd5c <HAL_SD_Init+0x10c>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800bc68:	b2db      	uxtb	r3, r3
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d10c      	bne.n	800bc88 <HAL_SD_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	2200      	movs	r2, #0
 800bc72:	771a      	strb	r2, [r3, #28]

#if (USE_SD_TRANSCEIVER != 0U)
    /* Force  SDMMC_TRANSCEIVER_PRESENT for Legacy usage */
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_UNKNOWN)
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	699b      	ldr	r3, [r3, #24]
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d102      	bne.n	800bc82 <HAL_SD_Init+0x32>
    {
      hsd->Init.TranceiverPresent = SDMMC_TRANSCEIVER_PRESENT;
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	2202      	movs	r2, #2
 800bc80:	619a      	str	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800bc82:	6878      	ldr	r0, [r7, #4]
 800bc84:	f7f6 fa78 	bl	8002178 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	2204      	movs	r2, #4
 800bc8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800bc90:	6878      	ldr	r0, [r7, #4]
 800bc92:	f000 f867 	bl	800bd64 <HAL_SD_InitCard>
 800bc96:	4603      	mov	r3, r0
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d001      	beq.n	800bca0 <HAL_SD_Init+0x50>
  {
    return HAL_ERROR;
 800bc9c:	2301      	movs	r3, #1
 800bc9e:	e05d      	b.n	800bd5c <HAL_SD_Init+0x10c>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800bca0:	f107 0308 	add.w	r3, r7, #8
 800bca4:	4619      	mov	r1, r3
 800bca6:	6878      	ldr	r0, [r7, #4]
 800bca8:	f000 fdee 	bl	800c888 <HAL_SD_GetCardStatus>
 800bcac:	4603      	mov	r3, r0
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d001      	beq.n	800bcb6 <HAL_SD_Init+0x66>
  {
    return HAL_ERROR;
 800bcb2:	2301      	movs	r3, #1
 800bcb4:	e052      	b.n	800bd5c <HAL_SD_Init+0x10c>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800bcb6:	7e3b      	ldrb	r3, [r7, #24]
 800bcb8:	b2db      	uxtb	r3, r3
 800bcba:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800bcbc:	7e7b      	ldrb	r3, [r7, #25]
 800bcbe:	b2db      	uxtb	r3, r3
 800bcc0:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bcc6:	2b01      	cmp	r3, #1
 800bcc8:	d10a      	bne.n	800bce0 <HAL_SD_Init+0x90>
 800bcca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d102      	bne.n	800bcd6 <HAL_SD_Init+0x86>
 800bcd0:	6a3b      	ldr	r3, [r7, #32]
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d004      	beq.n	800bce0 <HAL_SD_Init+0x90>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bcdc:	65da      	str	r2, [r3, #92]	; 0x5c
 800bcde:	e00b      	b.n	800bcf8 <HAL_SD_Init+0xa8>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bce4:	2b01      	cmp	r3, #1
 800bce6:	d104      	bne.n	800bcf2 <HAL_SD_Init+0xa2>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bcee:	65da      	str	r2, [r3, #92]	; 0x5c
 800bcf0:	e002      	b.n	800bcf8 <HAL_SD_Init+0xa8>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	2200      	movs	r2, #0
 800bcf6:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	68db      	ldr	r3, [r3, #12]
 800bcfc:	4619      	mov	r1, r3
 800bcfe:	6878      	ldr	r0, [r7, #4]
 800bd00:	f000 fe80 	bl	800ca04 <HAL_SD_ConfigWideBusOperation>
 800bd04:	4603      	mov	r3, r0
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d001      	beq.n	800bd0e <HAL_SD_Init+0xbe>
  {
    return HAL_ERROR;
 800bd0a:	2301      	movs	r3, #1
 800bd0c:	e026      	b.n	800bd5c <HAL_SD_Init+0x10c>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800bd0e:	f7f8 fd33 	bl	8004778 <HAL_GetTick>
 800bd12:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800bd14:	e011      	b.n	800bd3a <HAL_SD_Init+0xea>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800bd16:	f7f8 fd2f 	bl	8004778 <HAL_GetTick>
 800bd1a:	4602      	mov	r2, r0
 800bd1c:	69fb      	ldr	r3, [r7, #28]
 800bd1e:	1ad3      	subs	r3, r2, r3
 800bd20:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd24:	d109      	bne.n	800bd3a <HAL_SD_Init+0xea>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800bd2c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	2201      	movs	r2, #1
 800bd32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_TIMEOUT;
 800bd36:	2303      	movs	r3, #3
 800bd38:	e010      	b.n	800bd5c <HAL_SD_Init+0x10c>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800bd3a:	6878      	ldr	r0, [r7, #4]
 800bd3c:	f000 ff78 	bl	800cc30 <HAL_SD_GetCardState>
 800bd40:	4603      	mov	r3, r0
 800bd42:	2b04      	cmp	r3, #4
 800bd44:	d1e7      	bne.n	800bd16 <HAL_SD_Init+0xc6>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	2200      	movs	r2, #0
 800bd4a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	2200      	movs	r2, #0
 800bd50:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	2201      	movs	r2, #1
 800bd56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800bd5a:	2300      	movs	r3, #0
}
 800bd5c:	4618      	mov	r0, r3
 800bd5e:	3728      	adds	r7, #40	; 0x28
 800bd60:	46bd      	mov	sp, r7
 800bd62:	bd80      	pop	{r7, pc}

0800bd64 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800bd64:	b5b0      	push	{r4, r5, r7, lr}
 800bd66:	b08e      	sub	sp, #56	; 0x38
 800bd68:	af04      	add	r7, sp, #16
 800bd6a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800bd6c:	2300      	movs	r3, #0
 800bd6e:	60bb      	str	r3, [r7, #8]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800bd70:	2300      	movs	r3, #0
 800bd72:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800bd74:	2300      	movs	r3, #0
 800bd76:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800bd78:	2300      	movs	r3, #0
 800bd7a:	617b      	str	r3, [r7, #20]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800bd7c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800bd80:	f04f 0100 	mov.w	r1, #0
 800bd84:	f7fe fc70 	bl	800a668 <HAL_RCCEx_GetPeriphCLKFreq>
 800bd88:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 800bd8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d109      	bne.n	800bda4 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	2201      	movs	r2, #1
 800bd94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800bd9e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800bda0:	2301      	movs	r3, #1
 800bda2:	e07f      	b.n	800bea4 <HAL_SD_InitCard+0x140>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800bda4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bda6:	0a1b      	lsrs	r3, r3, #8
 800bda8:	4a40      	ldr	r2, [pc, #256]	; (800beac <HAL_SD_InitCard+0x148>)
 800bdaa:	fba2 2303 	umull	r2, r3, r2, r3
 800bdae:	091b      	lsrs	r3, r3, #4
 800bdb0:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
  Init.TranceiverPresent = hsd->Init.TranceiverPresent;
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	699b      	ldr	r3, [r3, #24]
 800bdb6:	61fb      	str	r3, [r7, #28]

  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	699b      	ldr	r3, [r3, #24]
 800bdbc:	2b02      	cmp	r3, #2
 800bdbe:	d107      	bne.n	800bdd0 <HAL_SD_InitCard+0x6c>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	681a      	ldr	r2, [r3, #0]
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	f042 0210 	orr.w	r2, r2, #16
 800bdce:	601a      	str	r2, [r3, #0]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	681d      	ldr	r5, [r3, #0]
 800bdd4:	466c      	mov	r4, sp
 800bdd6:	f107 0314 	add.w	r3, r7, #20
 800bdda:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800bdde:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800bde2:	f107 0308 	add.w	r3, r7, #8
 800bde6:	cb0e      	ldmia	r3, {r1, r2, r3}
 800bde8:	4628      	mov	r0, r5
 800bdea:	f004 fe13 	bl	8010a14 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	4618      	mov	r0, r3
 800bdf4:	f004 fe56 	bl	8010aa4 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 800bdf8:	69bb      	ldr	r3, [r7, #24]
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d005      	beq.n	800be0a <HAL_SD_InitCard+0xa6>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800bdfe:	69bb      	ldr	r3, [r7, #24]
 800be00:	005b      	lsls	r3, r3, #1
 800be02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800be04:	fbb2 f3f3 	udiv	r3, r2, r3
 800be08:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (sdmmc_clk != 0U)
 800be0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d007      	beq.n	800be20 <HAL_SD_InitCard+0xbc>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800be10:	4a27      	ldr	r2, [pc, #156]	; (800beb0 <HAL_SD_InitCard+0x14c>)
 800be12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be14:	fbb2 f3f3 	udiv	r3, r2, r3
 800be18:	3301      	adds	r3, #1
 800be1a:	4618      	mov	r0, r3
 800be1c:	f7f8 fcb8 	bl	8004790 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800be20:	6878      	ldr	r0, [r7, #4]
 800be22:	f000 fff3 	bl	800ce0c <SD_PowerON>
 800be26:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800be28:	6a3b      	ldr	r3, [r7, #32]
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d00b      	beq.n	800be46 <HAL_SD_InitCard+0xe2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	2201      	movs	r2, #1
 800be32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800be3a:	6a3b      	ldr	r3, [r7, #32]
 800be3c:	431a      	orrs	r2, r3
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800be42:	2301      	movs	r3, #1
 800be44:	e02e      	b.n	800bea4 <HAL_SD_InitCard+0x140>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800be46:	6878      	ldr	r0, [r7, #4]
 800be48:	f000 ff12 	bl	800cc70 <SD_InitCard>
 800be4c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800be4e:	6a3b      	ldr	r3, [r7, #32]
 800be50:	2b00      	cmp	r3, #0
 800be52:	d00b      	beq.n	800be6c <HAL_SD_InitCard+0x108>
  {
    hsd->State = HAL_SD_STATE_READY;
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	2201      	movs	r2, #1
 800be58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800be60:	6a3b      	ldr	r3, [r7, #32]
 800be62:	431a      	orrs	r2, r3
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800be68:	2301      	movs	r3, #1
 800be6a:	e01b      	b.n	800bea4 <HAL_SD_InitCard+0x140>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	f44f 7100 	mov.w	r1, #512	; 0x200
 800be74:	4618      	mov	r0, r3
 800be76:	f004 febb 	bl	8010bf0 <SDMMC_CmdBlockLength>
 800be7a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800be7c:	6a3b      	ldr	r3, [r7, #32]
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d00f      	beq.n	800bea2 <HAL_SD_InitCard+0x13e>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	4a0b      	ldr	r2, [pc, #44]	; (800beb4 <HAL_SD_InitCard+0x150>)
 800be88:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800be8e:	6a3b      	ldr	r3, [r7, #32]
 800be90:	431a      	orrs	r2, r3
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	2201      	movs	r2, #1
 800be9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800be9e:	2301      	movs	r3, #1
 800bea0:	e000      	b.n	800bea4 <HAL_SD_InitCard+0x140>
  }

  return HAL_OK;
 800bea2:	2300      	movs	r3, #0
}
 800bea4:	4618      	mov	r0, r3
 800bea6:	3728      	adds	r7, #40	; 0x28
 800bea8:	46bd      	mov	sp, r7
 800beaa:	bdb0      	pop	{r4, r5, r7, pc}
 800beac:	014f8b59 	.word	0x014f8b59
 800beb0:	00012110 	.word	0x00012110
 800beb4:	1fe00fff 	.word	0x1fe00fff

0800beb8 <HAL_SD_DeInit>:
  * @brief  De-Initializes the SD card.
  * @param  hsd: Pointer to SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_DeInit(SD_HandleTypeDef *hsd)
{
 800beb8:	b580      	push	{r7, lr}
 800beba:	b082      	sub	sp, #8
 800bebc:	af00      	add	r7, sp, #0
 800bebe:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if (hsd == NULL)
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d101      	bne.n	800beca <HAL_SD_DeInit+0x12>
  {
    return HAL_ERROR;
 800bec6:	2301      	movs	r3, #1
 800bec8:	e018      	b.n	800befc <HAL_SD_DeInit+0x44>
  }

  /* Check the parameters */
  assert_param(IS_SDMMC_ALL_INSTANCE(hsd->Instance));

  hsd->State = HAL_SD_STATE_BUSY;
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	2203      	movs	r2, #3
 800bece:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

#if (USE_SD_TRANSCEIVER != 0U)
  /* Deactivate the 1.8V Mode */
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	699b      	ldr	r3, [r3, #24]
 800bed6:	2b02      	cmp	r3, #2
 800bed8:	d102      	bne.n	800bee0 <HAL_SD_DeInit+0x28>
    {
      hsd->DriveTransceiver_1_8V_Callback = HAL_SD_DriveTransceiver_1_8V_Callback;
    }
    hsd->DriveTransceiver_1_8V_Callback(RESET);
#else
    HAL_SD_DriveTransceiver_1_8V_Callback(RESET);
 800beda:	2000      	movs	r0, #0
 800bedc:	f000 fb24 	bl	800c528 <HAL_SD_DriveTransceiver_1_8V_Callback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }
#endif /* USE_SD_TRANSCEIVER   */

  /* Set SD power state to off */
  SD_PowerOFF(hsd);
 800bee0:	6878      	ldr	r0, [r7, #4]
 800bee2:	f001 f825 	bl	800cf30 <SD_PowerOFF>

  /* DeInit the low level hardware */
  hsd->MspDeInitCallback(hsd);
#else
  /* De-Initialize the MSP layer */
  HAL_SD_MspDeInit(hsd);
 800bee6:	6878      	ldr	r0, [r7, #4]
 800bee8:	f7f6 fa1a 	bl	8002320 <HAL_SD_MspDeInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */

  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	2200      	movs	r2, #0
 800bef0:	639a      	str	r2, [r3, #56]	; 0x38
  hsd->State = HAL_SD_STATE_RESET;
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	2200      	movs	r2, #0
 800bef6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800befa:	2300      	movs	r3, #0
}
 800befc:	4618      	mov	r0, r3
 800befe:	3708      	adds	r7, #8
 800bf00:	46bd      	mov	sp, r7
 800bf02:	bd80      	pop	{r7, pc}

0800bf04 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 800bf04:	b580      	push	{r7, lr}
 800bf06:	b08c      	sub	sp, #48	; 0x30
 800bf08:	af00      	add	r7, sp, #0
 800bf0a:	60f8      	str	r0, [r7, #12]
 800bf0c:	60b9      	str	r1, [r7, #8]
 800bf0e:	607a      	str	r2, [r7, #4]
 800bf10:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800bf16:	68bb      	ldr	r3, [r7, #8]
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d107      	bne.n	800bf2c <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf20:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800bf28:	2301      	movs	r3, #1
 800bf2a:	e08d      	b.n	800c048 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800bf32:	b2db      	uxtb	r3, r3
 800bf34:	2b01      	cmp	r3, #1
 800bf36:	f040 8086 	bne.w	800c046 <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	2200      	movs	r2, #0
 800bf3e:	639a      	str	r2, [r3, #56]	; 0x38

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800bf40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bf42:	683b      	ldr	r3, [r7, #0]
 800bf44:	441a      	add	r2, r3
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf4a:	429a      	cmp	r2, r3
 800bf4c:	d907      	bls.n	800bf5e <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf52:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800bf5a:	2301      	movs	r3, #1
 800bf5c:	e074      	b.n	800c048 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	2203      	movs	r2, #3
 800bf62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	2200      	movs	r2, #0
 800bf6c:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	68ba      	ldr	r2, [r7, #8]
 800bf72:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 800bf74:	683b      	ldr	r3, [r7, #0]
 800bf76:	025a      	lsls	r2, r3, #9
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf80:	2b01      	cmp	r3, #1
 800bf82:	d002      	beq.n	800bf8a <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 800bf84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf86:	025b      	lsls	r3, r3, #9
 800bf88:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800bf8a:	f04f 33ff 	mov.w	r3, #4294967295
 800bf8e:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800bf90:	683b      	ldr	r3, [r7, #0]
 800bf92:	025b      	lsls	r3, r3, #9
 800bf94:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800bf96:	2390      	movs	r3, #144	; 0x90
 800bf98:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800bf9a:	2302      	movs	r3, #2
 800bf9c:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800bf9e:	2300      	movs	r3, #0
 800bfa0:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800bfa2:	2300      	movs	r3, #0
 800bfa4:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	f107 0210 	add.w	r2, r7, #16
 800bfae:	4611      	mov	r1, r2
 800bfb0:	4618      	mov	r0, r3
 800bfb2:	f004 fdf1 	bl	8010b98 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	68da      	ldr	r2, [r3, #12]
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bfc4:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	68ba      	ldr	r2, [r7, #8]
 800bfcc:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	2201      	movs	r2, #1
 800bfd4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 800bfd6:	683b      	ldr	r3, [r7, #0]
 800bfd8:	2b01      	cmp	r3, #1
 800bfda:	d90a      	bls.n	800bff2 <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	2282      	movs	r2, #130	; 0x82
 800bfe0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bfe8:	4618      	mov	r0, r3
 800bfea:	f004 fe47 	bl	8010c7c <SDMMC_CmdReadMultiBlock>
 800bfee:	62f8      	str	r0, [r7, #44]	; 0x2c
 800bff0:	e009      	b.n	800c006 <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	2281      	movs	r2, #129	; 0x81
 800bff6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bffe:	4618      	mov	r0, r3
 800c000:	f004 fe19 	bl	8010c36 <SDMMC_CmdReadSingleBlock>
 800c004:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800c006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d012      	beq.n	800c032 <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	4a0f      	ldr	r2, [pc, #60]	; (800c050 <HAL_SD_ReadBlocks_DMA+0x14c>)
 800c012:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c01a:	431a      	orrs	r2, r3
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	2201      	movs	r2, #1
 800c024:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	2200      	movs	r2, #0
 800c02c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800c02e:	2301      	movs	r3, #1
 800c030:	e00a      	b.n	800c048 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800c040:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 800c042:	2300      	movs	r3, #0
 800c044:	e000      	b.n	800c048 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800c046:	2302      	movs	r3, #2
  }
}
 800c048:	4618      	mov	r0, r3
 800c04a:	3730      	adds	r7, #48	; 0x30
 800c04c:	46bd      	mov	sp, r7
 800c04e:	bd80      	pop	{r7, pc}
 800c050:	1fe00fff 	.word	0x1fe00fff

0800c054 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 800c054:	b580      	push	{r7, lr}
 800c056:	b08c      	sub	sp, #48	; 0x30
 800c058:	af00      	add	r7, sp, #0
 800c05a:	60f8      	str	r0, [r7, #12]
 800c05c:	60b9      	str	r1, [r7, #8]
 800c05e:	607a      	str	r2, [r7, #4]
 800c060:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800c066:	68bb      	ldr	r3, [r7, #8]
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d107      	bne.n	800c07c <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c070:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800c078:	2301      	movs	r3, #1
 800c07a:	e08d      	b.n	800c198 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c082:	b2db      	uxtb	r3, r3
 800c084:	2b01      	cmp	r3, #1
 800c086:	f040 8086 	bne.w	800c196 <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	2200      	movs	r2, #0
 800c08e:	639a      	str	r2, [r3, #56]	; 0x38

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800c090:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c092:	683b      	ldr	r3, [r7, #0]
 800c094:	441a      	add	r2, r3
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c09a:	429a      	cmp	r2, r3
 800c09c:	d907      	bls.n	800c0ae <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0a2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800c0aa:	2301      	movs	r3, #1
 800c0ac:	e074      	b.n	800c198 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	2203      	movs	r2, #3
 800c0b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	2200      	movs	r2, #0
 800c0bc:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	68ba      	ldr	r2, [r7, #8]
 800c0c2:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800c0c4:	683b      	ldr	r3, [r7, #0]
 800c0c6:	025a      	lsls	r2, r3, #9
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	625a      	str	r2, [r3, #36]	; 0x24

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c0d0:	2b01      	cmp	r3, #1
 800c0d2:	d002      	beq.n	800c0da <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 800c0d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0d6:	025b      	lsls	r3, r3, #9
 800c0d8:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c0da:	f04f 33ff 	mov.w	r3, #4294967295
 800c0de:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800c0e0:	683b      	ldr	r3, [r7, #0]
 800c0e2:	025b      	lsls	r3, r3, #9
 800c0e4:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800c0e6:	2390      	movs	r3, #144	; 0x90
 800c0e8:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800c0ea:	2300      	movs	r3, #0
 800c0ec:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800c0ee:	2300      	movs	r3, #0
 800c0f0:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800c0f2:	2300      	movs	r3, #0
 800c0f4:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	f107 0210 	add.w	r2, r7, #16
 800c0fe:	4611      	mov	r1, r2
 800c100:	4618      	mov	r0, r3
 800c102:	f004 fd49 	bl	8010b98 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	68da      	ldr	r2, [r3, #12]
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c114:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	68ba      	ldr	r2, [r7, #8]
 800c11c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	2201      	movs	r2, #1
 800c124:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 800c126:	683b      	ldr	r3, [r7, #0]
 800c128:	2b01      	cmp	r3, #1
 800c12a:	d90a      	bls.n	800c142 <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	22a0      	movs	r2, #160	; 0xa0
 800c130:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c138:	4618      	mov	r0, r3
 800c13a:	f004 fde5 	bl	8010d08 <SDMMC_CmdWriteMultiBlock>
 800c13e:	62f8      	str	r0, [r7, #44]	; 0x2c
 800c140:	e009      	b.n	800c156 <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	2290      	movs	r2, #144	; 0x90
 800c146:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c14e:	4618      	mov	r0, r3
 800c150:	f004 fdb7 	bl	8010cc2 <SDMMC_CmdWriteSingleBlock>
 800c154:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800c156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d012      	beq.n	800c182 <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	4a0f      	ldr	r2, [pc, #60]	; (800c1a0 <HAL_SD_WriteBlocks_DMA+0x14c>)
 800c162:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c16a:	431a      	orrs	r2, r3
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	2201      	movs	r2, #1
 800c174:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	2200      	movs	r2, #0
 800c17c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800c17e:	2301      	movs	r3, #1
 800c180:	e00a      	b.n	800c198 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 800c190:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800c192:	2300      	movs	r3, #0
 800c194:	e000      	b.n	800c198 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800c196:	2302      	movs	r3, #2
  }
}
 800c198:	4618      	mov	r0, r3
 800c19a:	3730      	adds	r7, #48	; 0x30
 800c19c:	46bd      	mov	sp, r7
 800c19e:	bd80      	pop	{r7, pc}
 800c1a0:	1fe00fff 	.word	0x1fe00fff

0800c1a4 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800c1a4:	b580      	push	{r7, lr}
 800c1a6:	b084      	sub	sp, #16
 800c1a8:	af00      	add	r7, sp, #0
 800c1aa:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c1b0:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c1b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d008      	beq.n	800c1d2 <HAL_SD_IRQHandler+0x2e>
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	f003 0308 	and.w	r3, r3, #8
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d003      	beq.n	800c1d2 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800c1ca:	6878      	ldr	r0, [r7, #4]
 800c1cc:	f001 f91c 	bl	800d408 <SD_Read_IT>
 800c1d0:	e19a      	b.n	800c508 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c1d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	f000 80ac 	beq.w	800c33a <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c1ea:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	681a      	ldr	r2, [r3, #0]
 800c1f6:	4b59      	ldr	r3, [pc, #356]	; (800c35c <HAL_SD_IRQHandler+0x1b8>)
 800c1f8:	400b      	ands	r3, r1
 800c1fa:	63d3      	str	r3, [r2, #60]	; 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800c20a:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	68da      	ldr	r2, [r3, #12]
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c21a:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	f003 0308 	and.w	r3, r3, #8
 800c222:	2b00      	cmp	r3, #0
 800c224:	d038      	beq.n	800c298 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	f003 0302 	and.w	r3, r3, #2
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d104      	bne.n	800c23a <HAL_SD_IRQHandler+0x96>
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	f003 0320 	and.w	r3, r3, #32
 800c236:	2b00      	cmp	r3, #0
 800c238:	d011      	beq.n	800c25e <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	4618      	mov	r0, r3
 800c240:	f004 fd86 	bl	8010d50 <SDMMC_CmdStopTransfer>
 800c244:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800c246:	68bb      	ldr	r3, [r7, #8]
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d008      	beq.n	800c25e <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c250:	68bb      	ldr	r3, [r7, #8]
 800c252:	431a      	orrs	r2, r3
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800c258:	6878      	ldr	r0, [r7, #4]
 800c25a:	f000 f95b 	bl	800c514 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	4a3f      	ldr	r2, [pc, #252]	; (800c360 <HAL_SD_IRQHandler+0x1bc>)
 800c264:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	2201      	movs	r2, #1
 800c26a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	2200      	movs	r2, #0
 800c272:	631a      	str	r2, [r3, #48]	; 0x30
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	f003 0301 	and.w	r3, r3, #1
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d104      	bne.n	800c288 <HAL_SD_IRQHandler+0xe4>
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	f003 0302 	and.w	r3, r3, #2
 800c284:	2b00      	cmp	r3, #0
 800c286:	d003      	beq.n	800c290 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800c288:	6878      	ldr	r0, [r7, #4]
 800c28a:	f005 fe7f 	bl	8011f8c <HAL_SD_RxCpltCallback>
 800c28e:	e13b      	b.n	800c508 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800c290:	6878      	ldr	r0, [r7, #4]
 800c292:	f005 fe6d 	bl	8011f70 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800c296:	e137      	b.n	800c508 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	f000 8132 	beq.w	800c508 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	2200      	movs	r2, #0
 800c2aa:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	2200      	movs	r2, #0
 800c2b2:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	2200      	movs	r2, #0
 800c2ba:	651a      	str	r2, [r3, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	f003 0302 	and.w	r3, r3, #2
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d104      	bne.n	800c2d0 <HAL_SD_IRQHandler+0x12c>
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	f003 0320 	and.w	r3, r3, #32
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d011      	beq.n	800c2f4 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	4618      	mov	r0, r3
 800c2d6:	f004 fd3b 	bl	8010d50 <SDMMC_CmdStopTransfer>
 800c2da:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800c2dc:	68bb      	ldr	r3, [r7, #8]
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d008      	beq.n	800c2f4 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c2e6:	68bb      	ldr	r3, [r7, #8]
 800c2e8:	431a      	orrs	r2, r3
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800c2ee:	6878      	ldr	r0, [r7, #4]
 800c2f0:	f000 f910 	bl	800c514 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	2201      	movs	r2, #1
 800c2f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	2200      	movs	r2, #0
 800c300:	631a      	str	r2, [r3, #48]	; 0x30
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	f003 0310 	and.w	r3, r3, #16
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d104      	bne.n	800c316 <HAL_SD_IRQHandler+0x172>
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	f003 0320 	and.w	r3, r3, #32
 800c312:	2b00      	cmp	r3, #0
 800c314:	d002      	beq.n	800c31c <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 800c316:	6878      	ldr	r0, [r7, #4]
 800c318:	f005 fe2a 	bl	8011f70 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	f003 0301 	and.w	r3, r3, #1
 800c322:	2b00      	cmp	r3, #0
 800c324:	d105      	bne.n	800c332 <HAL_SD_IRQHandler+0x18e>
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	f003 0302 	and.w	r3, r3, #2
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	f000 80eb 	beq.w	800c508 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 800c332:	6878      	ldr	r0, [r7, #4]
 800c334:	f005 fe2a 	bl	8011f8c <HAL_SD_RxCpltCallback>
}
 800c338:	e0e6      	b.n	800c508 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c340:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c344:	2b00      	cmp	r3, #0
 800c346:	d00d      	beq.n	800c364 <HAL_SD_IRQHandler+0x1c0>
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	f003 0308 	and.w	r3, r3, #8
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d008      	beq.n	800c364 <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 800c352:	6878      	ldr	r0, [r7, #4]
 800c354:	f001 f89e 	bl	800d494 <SD_Write_IT>
 800c358:	e0d6      	b.n	800c508 <HAL_SD_IRQHandler+0x364>
 800c35a:	bf00      	nop
 800c35c:	ffff3ec5 	.word	0xffff3ec5
 800c360:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c36a:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800c36e:	2b00      	cmp	r3, #0
 800c370:	f000 809d 	beq.w	800c4ae <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c37a:	f003 0302 	and.w	r3, r3, #2
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d005      	beq.n	800c38e <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c386:	f043 0202 	orr.w	r2, r3, #2
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	639a      	str	r2, [r3, #56]	; 0x38
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c394:	f003 0308 	and.w	r3, r3, #8
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d005      	beq.n	800c3a8 <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3a0:	f043 0208 	orr.w	r2, r3, #8
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	639a      	str	r2, [r3, #56]	; 0x38
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c3ae:	f003 0320 	and.w	r3, r3, #32
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d005      	beq.n	800c3c2 <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3ba:	f043 0220 	orr.w	r2, r3, #32
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	639a      	str	r2, [r3, #56]	; 0x38
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c3c8:	f003 0310 	and.w	r3, r3, #16
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d005      	beq.n	800c3dc <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3d4:	f043 0210 	orr.w	r2, r3, #16
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	4a4b      	ldr	r2, [pc, #300]	; (800c510 <HAL_SD_IRQHandler+0x36c>)
 800c3e2:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800c3f2:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	68da      	ldr	r2, [r3, #12]
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c402:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c412:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	68da      	ldr	r2, [r3, #12]
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800c422:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	4618      	mov	r0, r3
 800c42a:	f004 fc91 	bl	8010d50 <SDMMC_CmdStopTransfer>
 800c42e:	4602      	mov	r2, r0
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c434:	431a      	orrs	r2, r3
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	68da      	ldr	r2, [r3, #12]
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c448:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c452:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	f003 0308 	and.w	r3, r3, #8
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d00a      	beq.n	800c474 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	2201      	movs	r2, #1
 800c462:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	2200      	movs	r2, #0
 800c46a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800c46c:	6878      	ldr	r0, [r7, #4]
 800c46e:	f000 f851 	bl	800c514 <HAL_SD_ErrorCallback>
}
 800c472:	e049      	b.n	800c508 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d044      	beq.n	800c508 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c482:	2b00      	cmp	r3, #0
 800c484:	d040      	beq.n	800c508 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800c494:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	2200      	movs	r2, #0
 800c49c:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	2201      	movs	r2, #1
 800c4a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_ErrorCallback(hsd);
 800c4a6:	6878      	ldr	r0, [r7, #4]
 800c4a8:	f000 f834 	bl	800c514 <HAL_SD_ErrorCallback>
}
 800c4ac:	e02c      	b.n	800c508 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c4b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d025      	beq.n	800c508 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c4c4:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c4cc:	f003 0304 	and.w	r3, r3, #4
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d10c      	bne.n	800c4ee <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800c4d4:	68fb      	ldr	r3, [r7, #12]
 800c4d6:	f003 0320 	and.w	r3, r3, #32
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d003      	beq.n	800c4e6 <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800c4de:	6878      	ldr	r0, [r7, #4]
 800c4e0:	f001 f840 	bl	800d564 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 800c4e4:	e010      	b.n	800c508 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800c4e6:	6878      	ldr	r0, [r7, #4]
 800c4e8:	f001 f828 	bl	800d53c <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800c4ec:	e00c      	b.n	800c508 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	f003 0320 	and.w	r3, r3, #32
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d003      	beq.n	800c500 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800c4f8:	6878      	ldr	r0, [r7, #4]
 800c4fa:	f001 f829 	bl	800d550 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800c4fe:	e003      	b.n	800c508 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800c500:	6878      	ldr	r0, [r7, #4]
 800c502:	f001 f811 	bl	800d528 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800c506:	e7ff      	b.n	800c508 <HAL_SD_IRQHandler+0x364>
 800c508:	bf00      	nop
 800c50a:	3710      	adds	r7, #16
 800c50c:	46bd      	mov	sp, r7
 800c50e:	bd80      	pop	{r7, pc}
 800c510:	18000f3a 	.word	0x18000f3a

0800c514 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800c514:	b480      	push	{r7}
 800c516:	b083      	sub	sp, #12
 800c518:	af00      	add	r7, sp, #0
 800c51a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800c51c:	bf00      	nop
 800c51e:	370c      	adds	r7, #12
 800c520:	46bd      	mov	sp, r7
 800c522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c526:	4770      	bx	lr

0800c528 <HAL_SD_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status: Voltage Switch State
  * @retval None
  */
__weak  void HAL_SD_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 800c528:	b480      	push	{r7}
 800c52a:	b083      	sub	sp, #12
 800c52c:	af00      	add	r7, sp, #0
 800c52e:	4603      	mov	r3, r0
 800c530:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(status);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_EnableTransceiver could be implemented in the user file
   */
}
 800c532:	bf00      	nop
 800c534:	370c      	adds	r7, #12
 800c536:	46bd      	mov	sp, r7
 800c538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c53c:	4770      	bx	lr
	...

0800c540 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800c540:	b480      	push	{r7}
 800c542:	b083      	sub	sp, #12
 800c544:	af00      	add	r7, sp, #0
 800c546:	6078      	str	r0, [r7, #4]
 800c548:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c54e:	0f9b      	lsrs	r3, r3, #30
 800c550:	b2da      	uxtb	r2, r3
 800c552:	683b      	ldr	r3, [r7, #0]
 800c554:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c55a:	0e9b      	lsrs	r3, r3, #26
 800c55c:	b2db      	uxtb	r3, r3
 800c55e:	f003 030f 	and.w	r3, r3, #15
 800c562:	b2da      	uxtb	r2, r3
 800c564:	683b      	ldr	r3, [r7, #0]
 800c566:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c56c:	0e1b      	lsrs	r3, r3, #24
 800c56e:	b2db      	uxtb	r3, r3
 800c570:	f003 0303 	and.w	r3, r3, #3
 800c574:	b2da      	uxtb	r2, r3
 800c576:	683b      	ldr	r3, [r7, #0]
 800c578:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c57e:	0c1b      	lsrs	r3, r3, #16
 800c580:	b2da      	uxtb	r2, r3
 800c582:	683b      	ldr	r3, [r7, #0]
 800c584:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c58a:	0a1b      	lsrs	r3, r3, #8
 800c58c:	b2da      	uxtb	r2, r3
 800c58e:	683b      	ldr	r3, [r7, #0]
 800c590:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c596:	b2da      	uxtb	r2, r3
 800c598:	683b      	ldr	r3, [r7, #0]
 800c59a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c5a0:	0d1b      	lsrs	r3, r3, #20
 800c5a2:	b29a      	uxth	r2, r3
 800c5a4:	683b      	ldr	r3, [r7, #0]
 800c5a6:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c5ac:	0c1b      	lsrs	r3, r3, #16
 800c5ae:	b2db      	uxtb	r3, r3
 800c5b0:	f003 030f 	and.w	r3, r3, #15
 800c5b4:	b2da      	uxtb	r2, r3
 800c5b6:	683b      	ldr	r3, [r7, #0]
 800c5b8:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c5be:	0bdb      	lsrs	r3, r3, #15
 800c5c0:	b2db      	uxtb	r3, r3
 800c5c2:	f003 0301 	and.w	r3, r3, #1
 800c5c6:	b2da      	uxtb	r2, r3
 800c5c8:	683b      	ldr	r3, [r7, #0]
 800c5ca:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c5d0:	0b9b      	lsrs	r3, r3, #14
 800c5d2:	b2db      	uxtb	r3, r3
 800c5d4:	f003 0301 	and.w	r3, r3, #1
 800c5d8:	b2da      	uxtb	r2, r3
 800c5da:	683b      	ldr	r3, [r7, #0]
 800c5dc:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c5e2:	0b5b      	lsrs	r3, r3, #13
 800c5e4:	b2db      	uxtb	r3, r3
 800c5e6:	f003 0301 	and.w	r3, r3, #1
 800c5ea:	b2da      	uxtb	r2, r3
 800c5ec:	683b      	ldr	r3, [r7, #0]
 800c5ee:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c5f4:	0b1b      	lsrs	r3, r3, #12
 800c5f6:	b2db      	uxtb	r3, r3
 800c5f8:	f003 0301 	and.w	r3, r3, #1
 800c5fc:	b2da      	uxtb	r2, r3
 800c5fe:	683b      	ldr	r3, [r7, #0]
 800c600:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800c602:	683b      	ldr	r3, [r7, #0]
 800c604:	2200      	movs	r2, #0
 800c606:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d163      	bne.n	800c6d8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c614:	009a      	lsls	r2, r3, #2
 800c616:	f640 73fc 	movw	r3, #4092	; 0xffc
 800c61a:	4013      	ands	r3, r2
 800c61c:	687a      	ldr	r2, [r7, #4]
 800c61e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800c620:	0f92      	lsrs	r2, r2, #30
 800c622:	431a      	orrs	r2, r3
 800c624:	683b      	ldr	r3, [r7, #0]
 800c626:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c62c:	0edb      	lsrs	r3, r3, #27
 800c62e:	b2db      	uxtb	r3, r3
 800c630:	f003 0307 	and.w	r3, r3, #7
 800c634:	b2da      	uxtb	r2, r3
 800c636:	683b      	ldr	r3, [r7, #0]
 800c638:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c63e:	0e1b      	lsrs	r3, r3, #24
 800c640:	b2db      	uxtb	r3, r3
 800c642:	f003 0307 	and.w	r3, r3, #7
 800c646:	b2da      	uxtb	r2, r3
 800c648:	683b      	ldr	r3, [r7, #0]
 800c64a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c650:	0d5b      	lsrs	r3, r3, #21
 800c652:	b2db      	uxtb	r3, r3
 800c654:	f003 0307 	and.w	r3, r3, #7
 800c658:	b2da      	uxtb	r2, r3
 800c65a:	683b      	ldr	r3, [r7, #0]
 800c65c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c662:	0c9b      	lsrs	r3, r3, #18
 800c664:	b2db      	uxtb	r3, r3
 800c666:	f003 0307 	and.w	r3, r3, #7
 800c66a:	b2da      	uxtb	r2, r3
 800c66c:	683b      	ldr	r3, [r7, #0]
 800c66e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c674:	0bdb      	lsrs	r3, r3, #15
 800c676:	b2db      	uxtb	r3, r3
 800c678:	f003 0307 	and.w	r3, r3, #7
 800c67c:	b2da      	uxtb	r2, r3
 800c67e:	683b      	ldr	r3, [r7, #0]
 800c680:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800c682:	683b      	ldr	r3, [r7, #0]
 800c684:	691b      	ldr	r3, [r3, #16]
 800c686:	1c5a      	adds	r2, r3, #1
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800c68c:	683b      	ldr	r3, [r7, #0]
 800c68e:	7e1b      	ldrb	r3, [r3, #24]
 800c690:	b2db      	uxtb	r3, r3
 800c692:	f003 0307 	and.w	r3, r3, #7
 800c696:	3302      	adds	r3, #2
 800c698:	2201      	movs	r2, #1
 800c69a:	fa02 f303 	lsl.w	r3, r2, r3
 800c69e:	687a      	ldr	r2, [r7, #4]
 800c6a0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800c6a2:	fb03 f202 	mul.w	r2, r3, r2
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800c6aa:	683b      	ldr	r3, [r7, #0]
 800c6ac:	7a1b      	ldrb	r3, [r3, #8]
 800c6ae:	b2db      	uxtb	r3, r3
 800c6b0:	f003 030f 	and.w	r3, r3, #15
 800c6b4:	2201      	movs	r2, #1
 800c6b6:	409a      	lsls	r2, r3
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c6c0:	687a      	ldr	r2, [r7, #4]
 800c6c2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800c6c4:	0a52      	lsrs	r2, r2, #9
 800c6c6:	fb03 f202 	mul.w	r2, r3, r2
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c6d4:	659a      	str	r2, [r3, #88]	; 0x58
 800c6d6:	e031      	b.n	800c73c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c6dc:	2b01      	cmp	r3, #1
 800c6de:	d11d      	bne.n	800c71c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c6e4:	041b      	lsls	r3, r3, #16
 800c6e6:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c6ee:	0c1b      	lsrs	r3, r3, #16
 800c6f0:	431a      	orrs	r2, r3
 800c6f2:	683b      	ldr	r3, [r7, #0]
 800c6f4:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800c6f6:	683b      	ldr	r3, [r7, #0]
 800c6f8:	691b      	ldr	r3, [r3, #16]
 800c6fa:	3301      	adds	r3, #1
 800c6fc:	029a      	lsls	r2, r3, #10
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c710:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	659a      	str	r2, [r3, #88]	; 0x58
 800c71a:	e00f      	b.n	800c73c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	4a58      	ldr	r2, [pc, #352]	; (800c884 <HAL_SD_GetCardCSD+0x344>)
 800c722:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c728:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	2201      	movs	r2, #1
 800c734:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800c738:	2301      	movs	r3, #1
 800c73a:	e09d      	b.n	800c878 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c740:	0b9b      	lsrs	r3, r3, #14
 800c742:	b2db      	uxtb	r3, r3
 800c744:	f003 0301 	and.w	r3, r3, #1
 800c748:	b2da      	uxtb	r2, r3
 800c74a:	683b      	ldr	r3, [r7, #0]
 800c74c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c752:	09db      	lsrs	r3, r3, #7
 800c754:	b2db      	uxtb	r3, r3
 800c756:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c75a:	b2da      	uxtb	r2, r3
 800c75c:	683b      	ldr	r3, [r7, #0]
 800c75e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c764:	b2db      	uxtb	r3, r3
 800c766:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c76a:	b2da      	uxtb	r2, r3
 800c76c:	683b      	ldr	r3, [r7, #0]
 800c76e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c774:	0fdb      	lsrs	r3, r3, #31
 800c776:	b2da      	uxtb	r2, r3
 800c778:	683b      	ldr	r3, [r7, #0]
 800c77a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c780:	0f5b      	lsrs	r3, r3, #29
 800c782:	b2db      	uxtb	r3, r3
 800c784:	f003 0303 	and.w	r3, r3, #3
 800c788:	b2da      	uxtb	r2, r3
 800c78a:	683b      	ldr	r3, [r7, #0]
 800c78c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c792:	0e9b      	lsrs	r3, r3, #26
 800c794:	b2db      	uxtb	r3, r3
 800c796:	f003 0307 	and.w	r3, r3, #7
 800c79a:	b2da      	uxtb	r2, r3
 800c79c:	683b      	ldr	r3, [r7, #0]
 800c79e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c7a4:	0d9b      	lsrs	r3, r3, #22
 800c7a6:	b2db      	uxtb	r3, r3
 800c7a8:	f003 030f 	and.w	r3, r3, #15
 800c7ac:	b2da      	uxtb	r2, r3
 800c7ae:	683b      	ldr	r3, [r7, #0]
 800c7b0:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c7b6:	0d5b      	lsrs	r3, r3, #21
 800c7b8:	b2db      	uxtb	r3, r3
 800c7ba:	f003 0301 	and.w	r3, r3, #1
 800c7be:	b2da      	uxtb	r2, r3
 800c7c0:	683b      	ldr	r3, [r7, #0]
 800c7c2:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800c7c6:	683b      	ldr	r3, [r7, #0]
 800c7c8:	2200      	movs	r2, #0
 800c7ca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c7d2:	0c1b      	lsrs	r3, r3, #16
 800c7d4:	b2db      	uxtb	r3, r3
 800c7d6:	f003 0301 	and.w	r3, r3, #1
 800c7da:	b2da      	uxtb	r2, r3
 800c7dc:	683b      	ldr	r3, [r7, #0]
 800c7de:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c7e6:	0bdb      	lsrs	r3, r3, #15
 800c7e8:	b2db      	uxtb	r3, r3
 800c7ea:	f003 0301 	and.w	r3, r3, #1
 800c7ee:	b2da      	uxtb	r2, r3
 800c7f0:	683b      	ldr	r3, [r7, #0]
 800c7f2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c7fa:	0b9b      	lsrs	r3, r3, #14
 800c7fc:	b2db      	uxtb	r3, r3
 800c7fe:	f003 0301 	and.w	r3, r3, #1
 800c802:	b2da      	uxtb	r2, r3
 800c804:	683b      	ldr	r3, [r7, #0]
 800c806:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c80e:	0b5b      	lsrs	r3, r3, #13
 800c810:	b2db      	uxtb	r3, r3
 800c812:	f003 0301 	and.w	r3, r3, #1
 800c816:	b2da      	uxtb	r2, r3
 800c818:	683b      	ldr	r3, [r7, #0]
 800c81a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c822:	0b1b      	lsrs	r3, r3, #12
 800c824:	b2db      	uxtb	r3, r3
 800c826:	f003 0301 	and.w	r3, r3, #1
 800c82a:	b2da      	uxtb	r2, r3
 800c82c:	683b      	ldr	r3, [r7, #0]
 800c82e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c836:	0a9b      	lsrs	r3, r3, #10
 800c838:	b2db      	uxtb	r3, r3
 800c83a:	f003 0303 	and.w	r3, r3, #3
 800c83e:	b2da      	uxtb	r2, r3
 800c840:	683b      	ldr	r3, [r7, #0]
 800c842:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c84a:	0a1b      	lsrs	r3, r3, #8
 800c84c:	b2db      	uxtb	r3, r3
 800c84e:	f003 0303 	and.w	r3, r3, #3
 800c852:	b2da      	uxtb	r2, r3
 800c854:	683b      	ldr	r3, [r7, #0]
 800c856:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c85e:	085b      	lsrs	r3, r3, #1
 800c860:	b2db      	uxtb	r3, r3
 800c862:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c866:	b2da      	uxtb	r2, r3
 800c868:	683b      	ldr	r3, [r7, #0]
 800c86a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800c86e:	683b      	ldr	r3, [r7, #0]
 800c870:	2201      	movs	r2, #1
 800c872:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800c876:	2300      	movs	r3, #0
}
 800c878:	4618      	mov	r0, r3
 800c87a:	370c      	adds	r7, #12
 800c87c:	46bd      	mov	sp, r7
 800c87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c882:	4770      	bx	lr
 800c884:	1fe00fff 	.word	0x1fe00fff

0800c888 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800c888:	b580      	push	{r7, lr}
 800c88a:	b094      	sub	sp, #80	; 0x50
 800c88c:	af00      	add	r7, sp, #0
 800c88e:	6078      	str	r0, [r7, #4]
 800c890:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800c892:	2300      	movs	r3, #0
 800c894:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c89e:	b2db      	uxtb	r3, r3
 800c8a0:	2b03      	cmp	r3, #3
 800c8a2:	d101      	bne.n	800c8a8 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 800c8a4:	2301      	movs	r3, #1
 800c8a6:	e0a7      	b.n	800c9f8 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800c8a8:	f107 0308 	add.w	r3, r7, #8
 800c8ac:	4619      	mov	r1, r3
 800c8ae:	6878      	ldr	r0, [r7, #4]
 800c8b0:	f000 fb4c 	bl	800cf4c <SD_SendSDStatus>
 800c8b4:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800c8b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d011      	beq.n	800c8e0 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	4a4f      	ldr	r2, [pc, #316]	; (800ca00 <HAL_SD_GetCardStatus+0x178>)
 800c8c2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c8c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c8ca:	431a      	orrs	r2, r3
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	2201      	movs	r2, #1
 800c8d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800c8d8:	2301      	movs	r3, #1
 800c8da:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800c8de:	e070      	b.n	800c9c2 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800c8e0:	68bb      	ldr	r3, [r7, #8]
 800c8e2:	099b      	lsrs	r3, r3, #6
 800c8e4:	b2db      	uxtb	r3, r3
 800c8e6:	f003 0303 	and.w	r3, r3, #3
 800c8ea:	b2da      	uxtb	r2, r3
 800c8ec:	683b      	ldr	r3, [r7, #0]
 800c8ee:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800c8f0:	68bb      	ldr	r3, [r7, #8]
 800c8f2:	095b      	lsrs	r3, r3, #5
 800c8f4:	b2db      	uxtb	r3, r3
 800c8f6:	f003 0301 	and.w	r3, r3, #1
 800c8fa:	b2da      	uxtb	r2, r3
 800c8fc:	683b      	ldr	r3, [r7, #0]
 800c8fe:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800c900:	68bb      	ldr	r3, [r7, #8]
 800c902:	0a1b      	lsrs	r3, r3, #8
 800c904:	b29b      	uxth	r3, r3
 800c906:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c90a:	b29a      	uxth	r2, r3
 800c90c:	68bb      	ldr	r3, [r7, #8]
 800c90e:	0e1b      	lsrs	r3, r3, #24
 800c910:	b29b      	uxth	r3, r3
 800c912:	4313      	orrs	r3, r2
 800c914:	b29a      	uxth	r2, r3
 800c916:	683b      	ldr	r3, [r7, #0]
 800c918:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	061a      	lsls	r2, r3, #24
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	021b      	lsls	r3, r3, #8
 800c922:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c926:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	0a1b      	lsrs	r3, r3, #8
 800c92c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800c930:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	0e1b      	lsrs	r3, r3, #24
 800c936:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800c938:	683b      	ldr	r3, [r7, #0]
 800c93a:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800c93c:	693b      	ldr	r3, [r7, #16]
 800c93e:	b2da      	uxtb	r2, r3
 800c940:	683b      	ldr	r3, [r7, #0]
 800c942:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800c944:	693b      	ldr	r3, [r7, #16]
 800c946:	0a1b      	lsrs	r3, r3, #8
 800c948:	b2da      	uxtb	r2, r3
 800c94a:	683b      	ldr	r3, [r7, #0]
 800c94c:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800c94e:	693b      	ldr	r3, [r7, #16]
 800c950:	0d1b      	lsrs	r3, r3, #20
 800c952:	b2db      	uxtb	r3, r3
 800c954:	f003 030f 	and.w	r3, r3, #15
 800c958:	b2da      	uxtb	r2, r3
 800c95a:	683b      	ldr	r3, [r7, #0]
 800c95c:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800c95e:	693b      	ldr	r3, [r7, #16]
 800c960:	0c1b      	lsrs	r3, r3, #16
 800c962:	b29b      	uxth	r3, r3
 800c964:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c968:	b29a      	uxth	r2, r3
 800c96a:	697b      	ldr	r3, [r7, #20]
 800c96c:	b29b      	uxth	r3, r3
 800c96e:	b2db      	uxtb	r3, r3
 800c970:	b29b      	uxth	r3, r3
 800c972:	4313      	orrs	r3, r2
 800c974:	b29a      	uxth	r2, r3
 800c976:	683b      	ldr	r3, [r7, #0]
 800c978:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800c97a:	697b      	ldr	r3, [r7, #20]
 800c97c:	0a9b      	lsrs	r3, r3, #10
 800c97e:	b2db      	uxtb	r3, r3
 800c980:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c984:	b2da      	uxtb	r2, r3
 800c986:	683b      	ldr	r3, [r7, #0]
 800c988:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800c98a:	697b      	ldr	r3, [r7, #20]
 800c98c:	0a1b      	lsrs	r3, r3, #8
 800c98e:	b2db      	uxtb	r3, r3
 800c990:	f003 0303 	and.w	r3, r3, #3
 800c994:	b2da      	uxtb	r2, r3
 800c996:	683b      	ldr	r3, [r7, #0]
 800c998:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800c99a:	697b      	ldr	r3, [r7, #20]
 800c99c:	091b      	lsrs	r3, r3, #4
 800c99e:	b2db      	uxtb	r3, r3
 800c9a0:	f003 030f 	and.w	r3, r3, #15
 800c9a4:	b2da      	uxtb	r2, r3
 800c9a6:	683b      	ldr	r3, [r7, #0]
 800c9a8:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800c9aa:	697b      	ldr	r3, [r7, #20]
 800c9ac:	b2db      	uxtb	r3, r3
 800c9ae:	f003 030f 	and.w	r3, r3, #15
 800c9b2:	b2da      	uxtb	r2, r3
 800c9b4:	683b      	ldr	r3, [r7, #0]
 800c9b6:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800c9b8:	69bb      	ldr	r3, [r7, #24]
 800c9ba:	0e1b      	lsrs	r3, r3, #24
 800c9bc:	b2da      	uxtb	r2, r3
 800c9be:	683b      	ldr	r3, [r7, #0]
 800c9c0:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c9ca:	4618      	mov	r0, r3
 800c9cc:	f004 f910 	bl	8010bf0 <SDMMC_CmdBlockLength>
 800c9d0:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800c9d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d00d      	beq.n	800c9f4 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	4a08      	ldr	r2, [pc, #32]	; (800ca00 <HAL_SD_GetCardStatus+0x178>)
 800c9de:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c9e4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	2201      	movs	r2, #1
 800c9ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800c9ee:	2301      	movs	r3, #1
 800c9f0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 800c9f4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800c9f8:	4618      	mov	r0, r3
 800c9fa:	3750      	adds	r7, #80	; 0x50
 800c9fc:	46bd      	mov	sp, r7
 800c9fe:	bd80      	pop	{r7, pc}
 800ca00:	1fe00fff 	.word	0x1fe00fff

0800ca04 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800ca04:	b5b0      	push	{r4, r5, r7, lr}
 800ca06:	b090      	sub	sp, #64	; 0x40
 800ca08:	af04      	add	r7, sp, #16
 800ca0a:	6078      	str	r0, [r7, #4]
 800ca0c:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800ca0e:	2300      	movs	r3, #0
 800ca10:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	2203      	movs	r2, #3
 800ca18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if (hsd->SdCard.CardType != CARD_SECURED)
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca20:	2b03      	cmp	r3, #3
 800ca22:	d02e      	beq.n	800ca82 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800ca24:	683b      	ldr	r3, [r7, #0]
 800ca26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ca2a:	d106      	bne.n	800ca3a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca30:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	639a      	str	r2, [r3, #56]	; 0x38
 800ca38:	e029      	b.n	800ca8e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800ca3a:	683b      	ldr	r3, [r7, #0]
 800ca3c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ca40:	d10a      	bne.n	800ca58 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800ca42:	6878      	ldr	r0, [r7, #4]
 800ca44:	f000 fb7a 	bl	800d13c <SD_WideBus_Enable>
 800ca48:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ca4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca50:	431a      	orrs	r2, r3
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	639a      	str	r2, [r3, #56]	; 0x38
 800ca56:	e01a      	b.n	800ca8e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800ca58:	683b      	ldr	r3, [r7, #0]
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d10a      	bne.n	800ca74 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800ca5e:	6878      	ldr	r0, [r7, #4]
 800ca60:	f000 fbb7 	bl	800d1d2 <SD_WideBus_Disable>
 800ca64:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ca6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca6c:	431a      	orrs	r2, r3
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	639a      	str	r2, [r3, #56]	; 0x38
 800ca72:	e00c      	b.n	800ca8e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca78:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	639a      	str	r2, [r3, #56]	; 0x38
 800ca80:	e005      	b.n	800ca8e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca86:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d007      	beq.n	800caa6 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	4a61      	ldr	r2, [pc, #388]	; (800cc20 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800ca9c:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800ca9e:	2301      	movs	r3, #1
 800caa0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800caa4:	e099      	b.n	800cbda <HAL_SD_ConfigWideBusOperation+0x1d6>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800caa6:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800caaa:	f04f 0100 	mov.w	r1, #0
 800caae:	f7fd fddb 	bl	800a668 <HAL_RCCEx_GetPeriphCLKFreq>
 800cab2:	6278      	str	r0, [r7, #36]	; 0x24
    if (sdmmc_clk != 0U)
 800cab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	f000 8086 	beq.w	800cbc8 <HAL_SD_ConfigWideBusOperation+0x1c4>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	685b      	ldr	r3, [r3, #4]
 800cac0:	60fb      	str	r3, [r7, #12]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	689b      	ldr	r3, [r3, #8]
 800cac6:	613b      	str	r3, [r7, #16]
      Init.BusWide             = WideMode;
 800cac8:	683b      	ldr	r3, [r7, #0]
 800caca:	617b      	str	r3, [r7, #20]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	691b      	ldr	r3, [r3, #16]
 800cad0:	61bb      	str	r3, [r7, #24]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	695a      	ldr	r2, [r3, #20]
 800cad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cad8:	4952      	ldr	r1, [pc, #328]	; (800cc24 <HAL_SD_ConfigWideBusOperation+0x220>)
 800cada:	fba1 1303 	umull	r1, r3, r1, r3
 800cade:	0e1b      	lsrs	r3, r3, #24
 800cae0:	429a      	cmp	r2, r3
 800cae2:	d303      	bcc.n	800caec <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	695b      	ldr	r3, [r3, #20]
 800cae8:	61fb      	str	r3, [r7, #28]
 800caea:	e05a      	b.n	800cba2 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800caf0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800caf4:	d103      	bne.n	800cafe <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	695b      	ldr	r3, [r3, #20]
 800cafa:	61fb      	str	r3, [r7, #28]
 800cafc:	e051      	b.n	800cba2 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cb02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cb06:	d126      	bne.n	800cb56 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	695b      	ldr	r3, [r3, #20]
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d10e      	bne.n	800cb2e <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800cb10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb12:	4a45      	ldr	r2, [pc, #276]	; (800cc28 <HAL_SD_ConfigWideBusOperation+0x224>)
 800cb14:	4293      	cmp	r3, r2
 800cb16:	d906      	bls.n	800cb26 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800cb18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb1a:	4a42      	ldr	r2, [pc, #264]	; (800cc24 <HAL_SD_ConfigWideBusOperation+0x220>)
 800cb1c:	fba2 2303 	umull	r2, r3, r2, r3
 800cb20:	0e5b      	lsrs	r3, r3, #25
 800cb22:	61fb      	str	r3, [r7, #28]
 800cb24:	e03d      	b.n	800cba2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	695b      	ldr	r3, [r3, #20]
 800cb2a:	61fb      	str	r3, [r7, #28]
 800cb2c:	e039      	b.n	800cba2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	695b      	ldr	r3, [r3, #20]
 800cb32:	005b      	lsls	r3, r3, #1
 800cb34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cb36:	fbb2 f3f3 	udiv	r3, r2, r3
 800cb3a:	4a3b      	ldr	r2, [pc, #236]	; (800cc28 <HAL_SD_ConfigWideBusOperation+0x224>)
 800cb3c:	4293      	cmp	r3, r2
 800cb3e:	d906      	bls.n	800cb4e <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800cb40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb42:	4a38      	ldr	r2, [pc, #224]	; (800cc24 <HAL_SD_ConfigWideBusOperation+0x220>)
 800cb44:	fba2 2303 	umull	r2, r3, r2, r3
 800cb48:	0e5b      	lsrs	r3, r3, #25
 800cb4a:	61fb      	str	r3, [r7, #28]
 800cb4c:	e029      	b.n	800cba2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	695b      	ldr	r3, [r3, #20]
 800cb52:	61fb      	str	r3, [r7, #28]
 800cb54:	e025      	b.n	800cba2 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	695b      	ldr	r3, [r3, #20]
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d10e      	bne.n	800cb7c <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800cb5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb60:	4a32      	ldr	r2, [pc, #200]	; (800cc2c <HAL_SD_ConfigWideBusOperation+0x228>)
 800cb62:	4293      	cmp	r3, r2
 800cb64:	d906      	bls.n	800cb74 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800cb66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb68:	4a2e      	ldr	r2, [pc, #184]	; (800cc24 <HAL_SD_ConfigWideBusOperation+0x220>)
 800cb6a:	fba2 2303 	umull	r2, r3, r2, r3
 800cb6e:	0e1b      	lsrs	r3, r3, #24
 800cb70:	61fb      	str	r3, [r7, #28]
 800cb72:	e016      	b.n	800cba2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	695b      	ldr	r3, [r3, #20]
 800cb78:	61fb      	str	r3, [r7, #28]
 800cb7a:	e012      	b.n	800cba2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	695b      	ldr	r3, [r3, #20]
 800cb80:	005b      	lsls	r3, r3, #1
 800cb82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cb84:	fbb2 f3f3 	udiv	r3, r2, r3
 800cb88:	4a28      	ldr	r2, [pc, #160]	; (800cc2c <HAL_SD_ConfigWideBusOperation+0x228>)
 800cb8a:	4293      	cmp	r3, r2
 800cb8c:	d906      	bls.n	800cb9c <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800cb8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb90:	4a24      	ldr	r2, [pc, #144]	; (800cc24 <HAL_SD_ConfigWideBusOperation+0x220>)
 800cb92:	fba2 2303 	umull	r2, r3, r2, r3
 800cb96:	0e1b      	lsrs	r3, r3, #24
 800cb98:	61fb      	str	r3, [r7, #28]
 800cb9a:	e002      	b.n	800cba2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	695b      	ldr	r3, [r3, #20]
 800cba0:	61fb      	str	r3, [r7, #28]
          }
        }
      }

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	699b      	ldr	r3, [r3, #24]
 800cba6:	623b      	str	r3, [r7, #32]
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	681d      	ldr	r5, [r3, #0]
 800cbac:	466c      	mov	r4, sp
 800cbae:	f107 0318 	add.w	r3, r7, #24
 800cbb2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800cbb6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800cbba:	f107 030c 	add.w	r3, r7, #12
 800cbbe:	cb0e      	ldmia	r3, {r1, r2, r3}
 800cbc0:	4628      	mov	r0, r5
 800cbc2:	f003 ff27 	bl	8010a14 <SDMMC_Init>
 800cbc6:	e008      	b.n	800cbda <HAL_SD_ConfigWideBusOperation+0x1d6>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbcc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	639a      	str	r2, [r3, #56]	; 0x38
      status = HAL_ERROR;
 800cbd4:	2301      	movs	r3, #1
 800cbd6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	f44f 7100 	mov.w	r1, #512	; 0x200
 800cbe2:	4618      	mov	r0, r3
 800cbe4:	f004 f804 	bl	8010bf0 <SDMMC_CmdBlockLength>
 800cbe8:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800cbea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d00c      	beq.n	800cc0a <HAL_SD_ConfigWideBusOperation+0x206>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	4a0a      	ldr	r2, [pc, #40]	; (800cc20 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800cbf6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cbfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbfe:	431a      	orrs	r2, r3
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800cc04:	2301      	movs	r3, #1
 800cc06:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	2201      	movs	r2, #1
 800cc0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800cc12:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800cc16:	4618      	mov	r0, r3
 800cc18:	3730      	adds	r7, #48	; 0x30
 800cc1a:	46bd      	mov	sp, r7
 800cc1c:	bdb0      	pop	{r4, r5, r7, pc}
 800cc1e:	bf00      	nop
 800cc20:	1fe00fff 	.word	0x1fe00fff
 800cc24:	55e63b89 	.word	0x55e63b89
 800cc28:	02faf080 	.word	0x02faf080
 800cc2c:	017d7840 	.word	0x017d7840

0800cc30 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800cc30:	b580      	push	{r7, lr}
 800cc32:	b086      	sub	sp, #24
 800cc34:	af00      	add	r7, sp, #0
 800cc36:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800cc38:	2300      	movs	r3, #0
 800cc3a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800cc3c:	f107 030c 	add.w	r3, r7, #12
 800cc40:	4619      	mov	r1, r3
 800cc42:	6878      	ldr	r0, [r7, #4]
 800cc44:	f000 fa52 	bl	800d0ec <SD_SendStatus>
 800cc48:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800cc4a:	697b      	ldr	r3, [r7, #20]
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d005      	beq.n	800cc5c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cc54:	697b      	ldr	r3, [r7, #20]
 800cc56:	431a      	orrs	r2, r3
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	0a5b      	lsrs	r3, r3, #9
 800cc60:	f003 030f 	and.w	r3, r3, #15
 800cc64:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800cc66:	693b      	ldr	r3, [r7, #16]
}
 800cc68:	4618      	mov	r0, r3
 800cc6a:	3718      	adds	r7, #24
 800cc6c:	46bd      	mov	sp, r7
 800cc6e:	bd80      	pop	{r7, pc}

0800cc70 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800cc70:	b580      	push	{r7, lr}
 800cc72:	b090      	sub	sp, #64	; 0x40
 800cc74:	af00      	add	r7, sp, #0
 800cc76:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800cc78:	2300      	movs	r3, #0
 800cc7a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800cc7c:	f7f7 fd7c 	bl	8004778 <HAL_GetTick>
 800cc80:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	4618      	mov	r0, r3
 800cc88:	f003 ff2e 	bl	8010ae8 <SDMMC_GetPowerState>
 800cc8c:	4603      	mov	r3, r0
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d102      	bne.n	800cc98 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800cc92:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800cc96:	e0b5      	b.n	800ce04 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc9c:	2b03      	cmp	r3, #3
 800cc9e:	d02e      	beq.n	800ccfe <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	4618      	mov	r0, r3
 800cca6:	f004 f978 	bl	8010f9a <SDMMC_CmdSendCID>
 800ccaa:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800ccac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d001      	beq.n	800ccb6 <SD_InitCard+0x46>
    {
      return errorstate;
 800ccb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccb4:	e0a6      	b.n	800ce04 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	2100      	movs	r1, #0
 800ccbc:	4618      	mov	r0, r3
 800ccbe:	f003 ff58 	bl	8010b72 <SDMMC_GetResponse>
 800ccc2:	4602      	mov	r2, r0
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	2104      	movs	r1, #4
 800ccce:	4618      	mov	r0, r3
 800ccd0:	f003 ff4f 	bl	8010b72 <SDMMC_GetResponse>
 800ccd4:	4602      	mov	r2, r0
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	2108      	movs	r1, #8
 800cce0:	4618      	mov	r0, r3
 800cce2:	f003 ff46 	bl	8010b72 <SDMMC_GetResponse>
 800cce6:	4602      	mov	r2, r0
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	210c      	movs	r1, #12
 800ccf2:	4618      	mov	r0, r3
 800ccf4:	f003 ff3d 	bl	8010b72 <SDMMC_GetResponse>
 800ccf8:	4602      	mov	r2, r0
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd02:	2b03      	cmp	r3, #3
 800cd04:	d01d      	beq.n	800cd42 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800cd06:	e019      	b.n	800cd3c <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	f107 020a 	add.w	r2, r7, #10
 800cd10:	4611      	mov	r1, r2
 800cd12:	4618      	mov	r0, r3
 800cd14:	f004 f980 	bl	8011018 <SDMMC_CmdSetRelAdd>
 800cd18:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800cd1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d001      	beq.n	800cd24 <SD_InitCard+0xb4>
      {
        return errorstate;
 800cd20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd22:	e06f      	b.n	800ce04 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800cd24:	f7f7 fd28 	bl	8004778 <HAL_GetTick>
 800cd28:	4602      	mov	r2, r0
 800cd2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd2c:	1ad3      	subs	r3, r2, r3
 800cd2e:	f241 3287 	movw	r2, #4999	; 0x1387
 800cd32:	4293      	cmp	r3, r2
 800cd34:	d902      	bls.n	800cd3c <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800cd36:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cd3a:	e063      	b.n	800ce04 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800cd3c:	897b      	ldrh	r3, [r7, #10]
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d0e2      	beq.n	800cd08 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd46:	2b03      	cmp	r3, #3
 800cd48:	d036      	beq.n	800cdb8 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800cd4a:	897b      	ldrh	r3, [r7, #10]
 800cd4c:	461a      	mov	r2, r3
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	681a      	ldr	r2, [r3, #0]
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cd5a:	041b      	lsls	r3, r3, #16
 800cd5c:	4619      	mov	r1, r3
 800cd5e:	4610      	mov	r0, r2
 800cd60:	f004 f93a 	bl	8010fd8 <SDMMC_CmdSendCSD>
 800cd64:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800cd66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d001      	beq.n	800cd70 <SD_InitCard+0x100>
    {
      return errorstate;
 800cd6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd6e:	e049      	b.n	800ce04 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	2100      	movs	r1, #0
 800cd76:	4618      	mov	r0, r3
 800cd78:	f003 fefb 	bl	8010b72 <SDMMC_GetResponse>
 800cd7c:	4602      	mov	r2, r0
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	2104      	movs	r1, #4
 800cd88:	4618      	mov	r0, r3
 800cd8a:	f003 fef2 	bl	8010b72 <SDMMC_GetResponse>
 800cd8e:	4602      	mov	r2, r0
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	2108      	movs	r1, #8
 800cd9a:	4618      	mov	r0, r3
 800cd9c:	f003 fee9 	bl	8010b72 <SDMMC_GetResponse>
 800cda0:	4602      	mov	r2, r0
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	210c      	movs	r1, #12
 800cdac:	4618      	mov	r0, r3
 800cdae:	f003 fee0 	bl	8010b72 <SDMMC_GetResponse>
 800cdb2:	4602      	mov	r2, r0
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	2104      	movs	r1, #4
 800cdbe:	4618      	mov	r0, r3
 800cdc0:	f003 fed7 	bl	8010b72 <SDMMC_GetResponse>
 800cdc4:	4603      	mov	r3, r0
 800cdc6:	0d1a      	lsrs	r2, r3, #20
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800cdcc:	f107 030c 	add.w	r3, r7, #12
 800cdd0:	4619      	mov	r1, r3
 800cdd2:	6878      	ldr	r0, [r7, #4]
 800cdd4:	f7ff fbb4 	bl	800c540 <HAL_SD_GetCardCSD>
 800cdd8:	4603      	mov	r3, r0
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d002      	beq.n	800cde4 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800cdde:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800cde2:	e00f      	b.n	800ce04 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	681a      	ldr	r2, [r3, #0]
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cdec:	041b      	lsls	r3, r3, #16
 800cdee:	4619      	mov	r1, r3
 800cdf0:	4610      	mov	r0, r2
 800cdf2:	f003 ffe9 	bl	8010dc8 <SDMMC_CmdSelDesel>
 800cdf6:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800cdf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d001      	beq.n	800ce02 <SD_InitCard+0x192>
  {
    return errorstate;
 800cdfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce00:	e000      	b.n	800ce04 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800ce02:	2300      	movs	r3, #0
}
 800ce04:	4618      	mov	r0, r3
 800ce06:	3740      	adds	r7, #64	; 0x40
 800ce08:	46bd      	mov	sp, r7
 800ce0a:	bd80      	pop	{r7, pc}

0800ce0c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800ce0c:	b580      	push	{r7, lr}
 800ce0e:	b088      	sub	sp, #32
 800ce10:	af00      	add	r7, sp, #0
 800ce12:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ce14:	2300      	movs	r3, #0
 800ce16:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U;
 800ce18:	2300      	movs	r3, #0
 800ce1a:	61fb      	str	r3, [r7, #28]
  uint32_t validvoltage = 0U;
 800ce1c:	2300      	movs	r3, #0
 800ce1e:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
 800ce20:	f7f7 fcaa 	bl	8004778 <HAL_GetTick>
 800ce24:	6178      	str	r0, [r7, #20]
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	4618      	mov	r0, r3
 800ce2c:	f003 ffef 	bl	8010e0e <SDMMC_CmdGoIdleState>
 800ce30:	6138      	str	r0, [r7, #16]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ce32:	693b      	ldr	r3, [r7, #16]
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d001      	beq.n	800ce3c <SD_PowerON+0x30>
  {
    return errorstate;
 800ce38:	693b      	ldr	r3, [r7, #16]
 800ce3a:	e072      	b.n	800cf22 <SD_PowerON+0x116>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	4618      	mov	r0, r3
 800ce42:	f004 f802 	bl	8010e4a <SDMMC_CmdOperCond>
 800ce46:	6138      	str	r0, [r7, #16]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800ce48:	693b      	ldr	r3, [r7, #16]
 800ce4a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ce4e:	d10d      	bne.n	800ce6c <SD_PowerON+0x60>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	2200      	movs	r2, #0
 800ce54:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	4618      	mov	r0, r3
 800ce5c:	f003 ffd7 	bl	8010e0e <SDMMC_CmdGoIdleState>
 800ce60:	6138      	str	r0, [r7, #16]
    if (errorstate != HAL_SD_ERROR_NONE)
 800ce62:	693b      	ldr	r3, [r7, #16]
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d004      	beq.n	800ce72 <SD_PowerON+0x66>
    {
      return errorstate;
 800ce68:	693b      	ldr	r3, [r7, #16]
 800ce6a:	e05a      	b.n	800cf22 <SD_PowerON+0x116>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	2201      	movs	r2, #1
 800ce70:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce76:	2b01      	cmp	r3, #1
 800ce78:	d137      	bne.n	800ceea <SD_PowerON+0xde>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	2100      	movs	r1, #0
 800ce80:	4618      	mov	r0, r3
 800ce82:	f004 f802 	bl	8010e8a <SDMMC_CmdAppCommand>
 800ce86:	6138      	str	r0, [r7, #16]
    if (errorstate != HAL_SD_ERROR_NONE)
 800ce88:	693b      	ldr	r3, [r7, #16]
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d02d      	beq.n	800ceea <SD_PowerON+0xde>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ce8e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800ce92:	e046      	b.n	800cf22 <SD_PowerON+0x116>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	2100      	movs	r1, #0
 800ce9a:	4618      	mov	r0, r3
 800ce9c:	f003 fff5 	bl	8010e8a <SDMMC_CmdAppCommand>
 800cea0:	6138      	str	r0, [r7, #16]
    if (errorstate != HAL_SD_ERROR_NONE)
 800cea2:	693b      	ldr	r3, [r7, #16]
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d001      	beq.n	800ceac <SD_PowerON+0xa0>
    {
      return errorstate;
 800cea8:	693b      	ldr	r3, [r7, #16]
 800ceaa:	e03a      	b.n	800cf22 <SD_PowerON+0x116>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	491e      	ldr	r1, [pc, #120]	; (800cf2c <SD_PowerON+0x120>)
 800ceb2:	4618      	mov	r0, r3
 800ceb4:	f004 f80c 	bl	8010ed0 <SDMMC_CmdAppOperCommand>
 800ceb8:	6138      	str	r0, [r7, #16]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800ceba:	693b      	ldr	r3, [r7, #16]
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d002      	beq.n	800cec6 <SD_PowerON+0xba>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800cec0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800cec4:	e02d      	b.n	800cf22 <SD_PowerON+0x116>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	2100      	movs	r1, #0
 800cecc:	4618      	mov	r0, r3
 800cece:	f003 fe50 	bl	8010b72 <SDMMC_GetResponse>
 800ced2:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800ced4:	69fb      	ldr	r3, [r7, #28]
 800ced6:	0fdb      	lsrs	r3, r3, #31
 800ced8:	2b01      	cmp	r3, #1
 800ceda:	d101      	bne.n	800cee0 <SD_PowerON+0xd4>
 800cedc:	2301      	movs	r3, #1
 800cede:	e000      	b.n	800cee2 <SD_PowerON+0xd6>
 800cee0:	2300      	movs	r3, #0
 800cee2:	61bb      	str	r3, [r7, #24]

    count++;
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	3301      	adds	r3, #1
 800cee8:	60fb      	str	r3, [r7, #12]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800ceea:	68fb      	ldr	r3, [r7, #12]
 800ceec:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800cef0:	4293      	cmp	r3, r2
 800cef2:	d802      	bhi.n	800cefa <SD_PowerON+0xee>
 800cef4:	69bb      	ldr	r3, [r7, #24]
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d0cc      	beq.n	800ce94 <SD_PowerON+0x88>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800cf00:	4293      	cmp	r3, r2
 800cf02:	d902      	bls.n	800cf0a <SD_PowerON+0xfe>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800cf04:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800cf08:	e00b      	b.n	800cf22 <SD_PowerON+0x116>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	2200      	movs	r2, #0
 800cf0e:	63da      	str	r2, [r3, #60]	; 0x3c

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800cf10:	69fb      	ldr	r3, [r7, #28]
 800cf12:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d002      	beq.n	800cf20 <SD_PowerON+0x114>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	2201      	movs	r2, #1
 800cf1e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800cf20:	2300      	movs	r3, #0
}
 800cf22:	4618      	mov	r0, r3
 800cf24:	3720      	adds	r7, #32
 800cf26:	46bd      	mov	sp, r7
 800cf28:	bd80      	pop	{r7, pc}
 800cf2a:	bf00      	nop
 800cf2c:	c1100000 	.word	0xc1100000

0800cf30 <SD_PowerOFF>:
  * @brief  Turns the SDMMC output signals off.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
static void SD_PowerOFF(SD_HandleTypeDef *hsd)
{
 800cf30:	b580      	push	{r7, lr}
 800cf32:	b082      	sub	sp, #8
 800cf34:	af00      	add	r7, sp, #0
 800cf36:	6078      	str	r0, [r7, #4]
  /* Set Power State to OFF */
  (void)SDMMC_PowerState_OFF(hsd->Instance);
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	4618      	mov	r0, r3
 800cf3e:	f003 fdc2 	bl	8010ac6 <SDMMC_PowerState_OFF>
}
 800cf42:	bf00      	nop
 800cf44:	3708      	adds	r7, #8
 800cf46:	46bd      	mov	sp, r7
 800cf48:	bd80      	pop	{r7, pc}
	...

0800cf4c <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800cf4c:	b580      	push	{r7, lr}
 800cf4e:	b08c      	sub	sp, #48	; 0x30
 800cf50:	af00      	add	r7, sp, #0
 800cf52:	6078      	str	r0, [r7, #4]
 800cf54:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800cf56:	f7f7 fc0f 	bl	8004778 <HAL_GetTick>
 800cf5a:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800cf5c:	683b      	ldr	r3, [r7, #0]
 800cf5e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	2100      	movs	r1, #0
 800cf66:	4618      	mov	r0, r3
 800cf68:	f003 fe03 	bl	8010b72 <SDMMC_GetResponse>
 800cf6c:	4603      	mov	r3, r0
 800cf6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cf72:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cf76:	d102      	bne.n	800cf7e <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800cf78:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800cf7c:	e0b0      	b.n	800d0e0 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	2140      	movs	r1, #64	; 0x40
 800cf84:	4618      	mov	r0, r3
 800cf86:	f003 fe33 	bl	8010bf0 <SDMMC_CmdBlockLength>
 800cf8a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800cf8c:	6a3b      	ldr	r3, [r7, #32]
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d005      	beq.n	800cf9e <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800cf9a:	6a3b      	ldr	r3, [r7, #32]
 800cf9c:	e0a0      	b.n	800d0e0 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	681a      	ldr	r2, [r3, #0]
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cfa6:	041b      	lsls	r3, r3, #16
 800cfa8:	4619      	mov	r1, r3
 800cfaa:	4610      	mov	r0, r2
 800cfac:	f003 ff6d 	bl	8010e8a <SDMMC_CmdAppCommand>
 800cfb0:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800cfb2:	6a3b      	ldr	r3, [r7, #32]
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d005      	beq.n	800cfc4 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800cfc0:	6a3b      	ldr	r3, [r7, #32]
 800cfc2:	e08d      	b.n	800d0e0 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800cfc4:	f04f 33ff 	mov.w	r3, #4294967295
 800cfc8:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800cfca:	2340      	movs	r3, #64	; 0x40
 800cfcc:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800cfce:	2360      	movs	r3, #96	; 0x60
 800cfd0:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800cfd2:	2302      	movs	r3, #2
 800cfd4:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800cfd6:	2300      	movs	r3, #0
 800cfd8:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800cfda:	2301      	movs	r3, #1
 800cfdc:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	f107 0208 	add.w	r2, r7, #8
 800cfe6:	4611      	mov	r1, r2
 800cfe8:	4618      	mov	r0, r3
 800cfea:	f003 fdd5 	bl	8010b98 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	4618      	mov	r0, r3
 800cff4:	f004 f855 	bl	80110a2 <SDMMC_CmdStatusRegister>
 800cff8:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800cffa:	6a3b      	ldr	r3, [r7, #32]
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d02b      	beq.n	800d058 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800d008:	6a3b      	ldr	r3, [r7, #32]
 800d00a:	e069      	b.n	800d0e0 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d012:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d016:	2b00      	cmp	r3, #0
 800d018:	d013      	beq.n	800d042 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800d01a:	2300      	movs	r3, #0
 800d01c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d01e:	e00d      	b.n	800d03c <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	4618      	mov	r0, r3
 800d026:	f003 fd1f 	bl	8010a68 <SDMMC_ReadFIFO>
 800d02a:	4602      	mov	r2, r0
 800d02c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d02e:	601a      	str	r2, [r3, #0]
        pData++;
 800d030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d032:	3304      	adds	r3, #4
 800d034:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 800d036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d038:	3301      	adds	r3, #1
 800d03a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d03c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d03e:	2b07      	cmp	r3, #7
 800d040:	d9ee      	bls.n	800d020 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800d042:	f7f7 fb99 	bl	8004778 <HAL_GetTick>
 800d046:	4602      	mov	r2, r0
 800d048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d04a:	1ad3      	subs	r3, r2, r3
 800d04c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d050:	d102      	bne.n	800d058 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800d052:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d056:	e043      	b.n	800d0e0 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d05e:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800d062:	2b00      	cmp	r3, #0
 800d064:	d0d2      	beq.n	800d00c <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d06c:	f003 0308 	and.w	r3, r3, #8
 800d070:	2b00      	cmp	r3, #0
 800d072:	d001      	beq.n	800d078 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800d074:	2308      	movs	r3, #8
 800d076:	e033      	b.n	800d0e0 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d07e:	f003 0302 	and.w	r3, r3, #2
 800d082:	2b00      	cmp	r3, #0
 800d084:	d001      	beq.n	800d08a <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800d086:	2302      	movs	r3, #2
 800d088:	e02a      	b.n	800d0e0 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d090:	f003 0320 	and.w	r3, r3, #32
 800d094:	2b00      	cmp	r3, #0
 800d096:	d017      	beq.n	800d0c8 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800d098:	2320      	movs	r3, #32
 800d09a:	e021      	b.n	800d0e0 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	4618      	mov	r0, r3
 800d0a2:	f003 fce1 	bl	8010a68 <SDMMC_ReadFIFO>
 800d0a6:	4602      	mov	r2, r0
 800d0a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0aa:	601a      	str	r2, [r3, #0]
    pData++;
 800d0ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0ae:	3304      	adds	r3, #4
 800d0b0:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800d0b2:	f7f7 fb61 	bl	8004778 <HAL_GetTick>
 800d0b6:	4602      	mov	r2, r0
 800d0b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0ba:	1ad3      	subs	r3, r2, r3
 800d0bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0c0:	d102      	bne.n	800d0c8 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800d0c2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d0c6:	e00b      	b.n	800d0e0 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d0ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d1e2      	bne.n	800d09c <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	4a03      	ldr	r2, [pc, #12]	; (800d0e8 <SD_SendSDStatus+0x19c>)
 800d0dc:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800d0de:	2300      	movs	r3, #0
}
 800d0e0:	4618      	mov	r0, r3
 800d0e2:	3730      	adds	r7, #48	; 0x30
 800d0e4:	46bd      	mov	sp, r7
 800d0e6:	bd80      	pop	{r7, pc}
 800d0e8:	18000f3a 	.word	0x18000f3a

0800d0ec <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800d0ec:	b580      	push	{r7, lr}
 800d0ee:	b084      	sub	sp, #16
 800d0f0:	af00      	add	r7, sp, #0
 800d0f2:	6078      	str	r0, [r7, #4]
 800d0f4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800d0f6:	683b      	ldr	r3, [r7, #0]
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d102      	bne.n	800d102 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800d0fc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d100:	e018      	b.n	800d134 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	681a      	ldr	r2, [r3, #0]
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d10a:	041b      	lsls	r3, r3, #16
 800d10c:	4619      	mov	r1, r3
 800d10e:	4610      	mov	r0, r2
 800d110:	f003 ffa4 	bl	801105c <SDMMC_CmdSendStatus>
 800d114:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d116:	68fb      	ldr	r3, [r7, #12]
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d001      	beq.n	800d120 <SD_SendStatus+0x34>
  {
    return errorstate;
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	e009      	b.n	800d134 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	2100      	movs	r1, #0
 800d126:	4618      	mov	r0, r3
 800d128:	f003 fd23 	bl	8010b72 <SDMMC_GetResponse>
 800d12c:	4602      	mov	r2, r0
 800d12e:	683b      	ldr	r3, [r7, #0]
 800d130:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800d132:	2300      	movs	r3, #0
}
 800d134:	4618      	mov	r0, r3
 800d136:	3710      	adds	r7, #16
 800d138:	46bd      	mov	sp, r7
 800d13a:	bd80      	pop	{r7, pc}

0800d13c <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800d13c:	b580      	push	{r7, lr}
 800d13e:	b086      	sub	sp, #24
 800d140:	af00      	add	r7, sp, #0
 800d142:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800d144:	2300      	movs	r3, #0
 800d146:	60fb      	str	r3, [r7, #12]
 800d148:	2300      	movs	r3, #0
 800d14a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	2100      	movs	r1, #0
 800d152:	4618      	mov	r0, r3
 800d154:	f003 fd0d 	bl	8010b72 <SDMMC_GetResponse>
 800d158:	4603      	mov	r3, r0
 800d15a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d15e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d162:	d102      	bne.n	800d16a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800d164:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d168:	e02f      	b.n	800d1ca <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800d16a:	f107 030c 	add.w	r3, r7, #12
 800d16e:	4619      	mov	r1, r3
 800d170:	6878      	ldr	r0, [r7, #4]
 800d172:	f000 f879 	bl	800d268 <SD_FindSCR>
 800d176:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d178:	697b      	ldr	r3, [r7, #20]
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	d001      	beq.n	800d182 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800d17e:	697b      	ldr	r3, [r7, #20]
 800d180:	e023      	b.n	800d1ca <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800d182:	693b      	ldr	r3, [r7, #16]
 800d184:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d01c      	beq.n	800d1c6 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	681a      	ldr	r2, [r3, #0]
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d194:	041b      	lsls	r3, r3, #16
 800d196:	4619      	mov	r1, r3
 800d198:	4610      	mov	r0, r2
 800d19a:	f003 fe76 	bl	8010e8a <SDMMC_CmdAppCommand>
 800d19e:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800d1a0:	697b      	ldr	r3, [r7, #20]
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d001      	beq.n	800d1aa <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800d1a6:	697b      	ldr	r3, [r7, #20]
 800d1a8:	e00f      	b.n	800d1ca <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	2102      	movs	r1, #2
 800d1b0:	4618      	mov	r0, r3
 800d1b2:	f003 fead 	bl	8010f10 <SDMMC_CmdBusWidth>
 800d1b6:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800d1b8:	697b      	ldr	r3, [r7, #20]
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d001      	beq.n	800d1c2 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800d1be:	697b      	ldr	r3, [r7, #20]
 800d1c0:	e003      	b.n	800d1ca <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800d1c2:	2300      	movs	r3, #0
 800d1c4:	e001      	b.n	800d1ca <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800d1c6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800d1ca:	4618      	mov	r0, r3
 800d1cc:	3718      	adds	r7, #24
 800d1ce:	46bd      	mov	sp, r7
 800d1d0:	bd80      	pop	{r7, pc}

0800d1d2 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800d1d2:	b580      	push	{r7, lr}
 800d1d4:	b086      	sub	sp, #24
 800d1d6:	af00      	add	r7, sp, #0
 800d1d8:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800d1da:	2300      	movs	r3, #0
 800d1dc:	60fb      	str	r3, [r7, #12]
 800d1de:	2300      	movs	r3, #0
 800d1e0:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	681b      	ldr	r3, [r3, #0]
 800d1e6:	2100      	movs	r1, #0
 800d1e8:	4618      	mov	r0, r3
 800d1ea:	f003 fcc2 	bl	8010b72 <SDMMC_GetResponse>
 800d1ee:	4603      	mov	r3, r0
 800d1f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d1f4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d1f8:	d102      	bne.n	800d200 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800d1fa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d1fe:	e02f      	b.n	800d260 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800d200:	f107 030c 	add.w	r3, r7, #12
 800d204:	4619      	mov	r1, r3
 800d206:	6878      	ldr	r0, [r7, #4]
 800d208:	f000 f82e 	bl	800d268 <SD_FindSCR>
 800d20c:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d20e:	697b      	ldr	r3, [r7, #20]
 800d210:	2b00      	cmp	r3, #0
 800d212:	d001      	beq.n	800d218 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800d214:	697b      	ldr	r3, [r7, #20]
 800d216:	e023      	b.n	800d260 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800d218:	693b      	ldr	r3, [r7, #16]
 800d21a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d21e:	2b00      	cmp	r3, #0
 800d220:	d01c      	beq.n	800d25c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	681a      	ldr	r2, [r3, #0]
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d22a:	041b      	lsls	r3, r3, #16
 800d22c:	4619      	mov	r1, r3
 800d22e:	4610      	mov	r0, r2
 800d230:	f003 fe2b 	bl	8010e8a <SDMMC_CmdAppCommand>
 800d234:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800d236:	697b      	ldr	r3, [r7, #20]
 800d238:	2b00      	cmp	r3, #0
 800d23a:	d001      	beq.n	800d240 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800d23c:	697b      	ldr	r3, [r7, #20]
 800d23e:	e00f      	b.n	800d260 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	2100      	movs	r1, #0
 800d246:	4618      	mov	r0, r3
 800d248:	f003 fe62 	bl	8010f10 <SDMMC_CmdBusWidth>
 800d24c:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800d24e:	697b      	ldr	r3, [r7, #20]
 800d250:	2b00      	cmp	r3, #0
 800d252:	d001      	beq.n	800d258 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800d254:	697b      	ldr	r3, [r7, #20]
 800d256:	e003      	b.n	800d260 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800d258:	2300      	movs	r3, #0
 800d25a:	e001      	b.n	800d260 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800d25c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800d260:	4618      	mov	r0, r3
 800d262:	3718      	adds	r7, #24
 800d264:	46bd      	mov	sp, r7
 800d266:	bd80      	pop	{r7, pc}

0800d268 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800d268:	b580      	push	{r7, lr}
 800d26a:	b08e      	sub	sp, #56	; 0x38
 800d26c:	af00      	add	r7, sp, #0
 800d26e:	6078      	str	r0, [r7, #4]
 800d270:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800d272:	f7f7 fa81 	bl	8004778 <HAL_GetTick>
 800d276:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800d278:	2300      	movs	r3, #0
 800d27a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800d27c:	2300      	movs	r3, #0
 800d27e:	60bb      	str	r3, [r7, #8]
 800d280:	2300      	movs	r3, #0
 800d282:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800d284:	683b      	ldr	r3, [r7, #0]
 800d286:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	2108      	movs	r1, #8
 800d28e:	4618      	mov	r0, r3
 800d290:	f003 fcae 	bl	8010bf0 <SDMMC_CmdBlockLength>
 800d294:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800d296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d001      	beq.n	800d2a0 <SD_FindSCR+0x38>
  {
    return errorstate;
 800d29c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d29e:	e0ad      	b.n	800d3fc <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	681a      	ldr	r2, [r3, #0]
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d2a8:	041b      	lsls	r3, r3, #16
 800d2aa:	4619      	mov	r1, r3
 800d2ac:	4610      	mov	r0, r2
 800d2ae:	f003 fdec 	bl	8010e8a <SDMMC_CmdAppCommand>
 800d2b2:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800d2b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d001      	beq.n	800d2be <SD_FindSCR+0x56>
  {
    return errorstate;
 800d2ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2bc:	e09e      	b.n	800d3fc <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d2be:	f04f 33ff 	mov.w	r3, #4294967295
 800d2c2:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800d2c4:	2308      	movs	r3, #8
 800d2c6:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800d2c8:	2330      	movs	r3, #48	; 0x30
 800d2ca:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800d2cc:	2302      	movs	r3, #2
 800d2ce:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d2d0:	2300      	movs	r3, #0
 800d2d2:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800d2d4:	2301      	movs	r3, #1
 800d2d6:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	f107 0210 	add.w	r2, r7, #16
 800d2e0:	4611      	mov	r1, r2
 800d2e2:	4618      	mov	r0, r3
 800d2e4:	f003 fc58 	bl	8010b98 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	4618      	mov	r0, r3
 800d2ee:	f003 fe32 	bl	8010f56 <SDMMC_CmdSendSCR>
 800d2f2:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800d2f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d027      	beq.n	800d34a <SD_FindSCR+0xe2>
  {
    return errorstate;
 800d2fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2fc:	e07e      	b.n	800d3fc <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d304:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d113      	bne.n	800d334 <SD_FindSCR+0xcc>
 800d30c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d110      	bne.n	800d334 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	4618      	mov	r0, r3
 800d318:	f003 fba6 	bl	8010a68 <SDMMC_ReadFIFO>
 800d31c:	4603      	mov	r3, r0
 800d31e:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	4618      	mov	r0, r3
 800d326:	f003 fb9f 	bl	8010a68 <SDMMC_ReadFIFO>
 800d32a:	4603      	mov	r3, r0
 800d32c:	60fb      	str	r3, [r7, #12]
      index++;
 800d32e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d330:	3301      	adds	r3, #1
 800d332:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800d334:	f7f7 fa20 	bl	8004778 <HAL_GetTick>
 800d338:	4602      	mov	r2, r0
 800d33a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d33c:	1ad3      	subs	r3, r2, r3
 800d33e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d342:	d102      	bne.n	800d34a <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800d344:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d348:	e058      	b.n	800d3fc <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d350:	f240 532a 	movw	r3, #1322	; 0x52a
 800d354:	4013      	ands	r3, r2
 800d356:	2b00      	cmp	r3, #0
 800d358:	d0d1      	beq.n	800d2fe <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d360:	f003 0308 	and.w	r3, r3, #8
 800d364:	2b00      	cmp	r3, #0
 800d366:	d005      	beq.n	800d374 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	2208      	movs	r2, #8
 800d36e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800d370:	2308      	movs	r3, #8
 800d372:	e043      	b.n	800d3fc <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d37a:	f003 0302 	and.w	r3, r3, #2
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d005      	beq.n	800d38e <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	2202      	movs	r2, #2
 800d388:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800d38a:	2302      	movs	r3, #2
 800d38c:	e036      	b.n	800d3fc <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	681b      	ldr	r3, [r3, #0]
 800d392:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d394:	f003 0320 	and.w	r3, r3, #32
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d005      	beq.n	800d3a8 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	2220      	movs	r2, #32
 800d3a2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800d3a4:	2320      	movs	r3, #32
 800d3a6:	e029      	b.n	800d3fc <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	4a15      	ldr	r2, [pc, #84]	; (800d404 <SD_FindSCR+0x19c>)
 800d3ae:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800d3b0:	68fb      	ldr	r3, [r7, #12]
 800d3b2:	061a      	lsls	r2, r3, #24
 800d3b4:	68fb      	ldr	r3, [r7, #12]
 800d3b6:	021b      	lsls	r3, r3, #8
 800d3b8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d3bc:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	0a1b      	lsrs	r3, r3, #8
 800d3c2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800d3c6:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800d3c8:	68fb      	ldr	r3, [r7, #12]
 800d3ca:	0e1b      	lsrs	r3, r3, #24
 800d3cc:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800d3ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3d0:	601a      	str	r2, [r3, #0]
    scr++;
 800d3d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3d4:	3304      	adds	r3, #4
 800d3d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800d3d8:	68bb      	ldr	r3, [r7, #8]
 800d3da:	061a      	lsls	r2, r3, #24
 800d3dc:	68bb      	ldr	r3, [r7, #8]
 800d3de:	021b      	lsls	r3, r3, #8
 800d3e0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d3e4:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800d3e6:	68bb      	ldr	r3, [r7, #8]
 800d3e8:	0a1b      	lsrs	r3, r3, #8
 800d3ea:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800d3ee:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800d3f0:	68bb      	ldr	r3, [r7, #8]
 800d3f2:	0e1b      	lsrs	r3, r3, #24
 800d3f4:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800d3f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3f8:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800d3fa:	2300      	movs	r3, #0
}
 800d3fc:	4618      	mov	r0, r3
 800d3fe:	3738      	adds	r7, #56	; 0x38
 800d400:	46bd      	mov	sp, r7
 800d402:	bd80      	pop	{r7, pc}
 800d404:	18000f3a 	.word	0x18000f3a

0800d408 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800d408:	b580      	push	{r7, lr}
 800d40a:	b086      	sub	sp, #24
 800d40c:	af00      	add	r7, sp, #0
 800d40e:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d414:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d41a:	2b1f      	cmp	r3, #31
 800d41c:	d936      	bls.n	800d48c <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 800d41e:	2300      	movs	r3, #0
 800d420:	617b      	str	r3, [r7, #20]
 800d422:	e027      	b.n	800d474 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	681b      	ldr	r3, [r3, #0]
 800d428:	4618      	mov	r0, r3
 800d42a:	f003 fb1d 	bl	8010a68 <SDMMC_ReadFIFO>
 800d42e:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800d430:	68fb      	ldr	r3, [r7, #12]
 800d432:	b2da      	uxtb	r2, r3
 800d434:	693b      	ldr	r3, [r7, #16]
 800d436:	701a      	strb	r2, [r3, #0]
      tmp++;
 800d438:	693b      	ldr	r3, [r7, #16]
 800d43a:	3301      	adds	r3, #1
 800d43c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	0a1b      	lsrs	r3, r3, #8
 800d442:	b2da      	uxtb	r2, r3
 800d444:	693b      	ldr	r3, [r7, #16]
 800d446:	701a      	strb	r2, [r3, #0]
      tmp++;
 800d448:	693b      	ldr	r3, [r7, #16]
 800d44a:	3301      	adds	r3, #1
 800d44c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	0c1b      	lsrs	r3, r3, #16
 800d452:	b2da      	uxtb	r2, r3
 800d454:	693b      	ldr	r3, [r7, #16]
 800d456:	701a      	strb	r2, [r3, #0]
      tmp++;
 800d458:	693b      	ldr	r3, [r7, #16]
 800d45a:	3301      	adds	r3, #1
 800d45c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800d45e:	68fb      	ldr	r3, [r7, #12]
 800d460:	0e1b      	lsrs	r3, r3, #24
 800d462:	b2da      	uxtb	r2, r3
 800d464:	693b      	ldr	r3, [r7, #16]
 800d466:	701a      	strb	r2, [r3, #0]
      tmp++;
 800d468:	693b      	ldr	r3, [r7, #16]
 800d46a:	3301      	adds	r3, #1
 800d46c:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 800d46e:	697b      	ldr	r3, [r7, #20]
 800d470:	3301      	adds	r3, #1
 800d472:	617b      	str	r3, [r7, #20]
 800d474:	697b      	ldr	r3, [r7, #20]
 800d476:	2b07      	cmp	r3, #7
 800d478:	d9d4      	bls.n	800d424 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	693a      	ldr	r2, [r7, #16]
 800d47e:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize -= 32U;
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d484:	f1a3 0220 	sub.w	r2, r3, #32
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800d48c:	bf00      	nop
 800d48e:	3718      	adds	r7, #24
 800d490:	46bd      	mov	sp, r7
 800d492:	bd80      	pop	{r7, pc}

0800d494 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800d494:	b580      	push	{r7, lr}
 800d496:	b086      	sub	sp, #24
 800d498:	af00      	add	r7, sp, #0
 800d49a:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	6a1b      	ldr	r3, [r3, #32]
 800d4a0:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4a6:	2b1f      	cmp	r3, #31
 800d4a8:	d93a      	bls.n	800d520 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 800d4aa:	2300      	movs	r3, #0
 800d4ac:	617b      	str	r3, [r7, #20]
 800d4ae:	e02b      	b.n	800d508 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800d4b0:	693b      	ldr	r3, [r7, #16]
 800d4b2:	781b      	ldrb	r3, [r3, #0]
 800d4b4:	60fb      	str	r3, [r7, #12]
      tmp++;
 800d4b6:	693b      	ldr	r3, [r7, #16]
 800d4b8:	3301      	adds	r3, #1
 800d4ba:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800d4bc:	693b      	ldr	r3, [r7, #16]
 800d4be:	781b      	ldrb	r3, [r3, #0]
 800d4c0:	021a      	lsls	r2, r3, #8
 800d4c2:	68fb      	ldr	r3, [r7, #12]
 800d4c4:	4313      	orrs	r3, r2
 800d4c6:	60fb      	str	r3, [r7, #12]
      tmp++;
 800d4c8:	693b      	ldr	r3, [r7, #16]
 800d4ca:	3301      	adds	r3, #1
 800d4cc:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800d4ce:	693b      	ldr	r3, [r7, #16]
 800d4d0:	781b      	ldrb	r3, [r3, #0]
 800d4d2:	041a      	lsls	r2, r3, #16
 800d4d4:	68fb      	ldr	r3, [r7, #12]
 800d4d6:	4313      	orrs	r3, r2
 800d4d8:	60fb      	str	r3, [r7, #12]
      tmp++;
 800d4da:	693b      	ldr	r3, [r7, #16]
 800d4dc:	3301      	adds	r3, #1
 800d4de:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800d4e0:	693b      	ldr	r3, [r7, #16]
 800d4e2:	781b      	ldrb	r3, [r3, #0]
 800d4e4:	061a      	lsls	r2, r3, #24
 800d4e6:	68fb      	ldr	r3, [r7, #12]
 800d4e8:	4313      	orrs	r3, r2
 800d4ea:	60fb      	str	r3, [r7, #12]
      tmp++;
 800d4ec:	693b      	ldr	r3, [r7, #16]
 800d4ee:	3301      	adds	r3, #1
 800d4f0:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	681b      	ldr	r3, [r3, #0]
 800d4f6:	f107 020c 	add.w	r2, r7, #12
 800d4fa:	4611      	mov	r1, r2
 800d4fc:	4618      	mov	r0, r3
 800d4fe:	f003 fac0 	bl	8010a82 <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 800d502:	697b      	ldr	r3, [r7, #20]
 800d504:	3301      	adds	r3, #1
 800d506:	617b      	str	r3, [r7, #20]
 800d508:	697b      	ldr	r3, [r7, #20]
 800d50a:	2b07      	cmp	r3, #7
 800d50c:	d9d0      	bls.n	800d4b0 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	693a      	ldr	r2, [r7, #16]
 800d512:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize -= 32U;
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d518:	f1a3 0220 	sub.w	r2, r3, #32
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800d520:	bf00      	nop
 800d522:	3718      	adds	r7, #24
 800d524:	46bd      	mov	sp, r7
 800d526:	bd80      	pop	{r7, pc}

0800d528 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800d528:	b480      	push	{r7}
 800d52a:	b083      	sub	sp, #12
 800d52c:	af00      	add	r7, sp, #0
 800d52e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800d530:	bf00      	nop
 800d532:	370c      	adds	r7, #12
 800d534:	46bd      	mov	sp, r7
 800d536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d53a:	4770      	bx	lr

0800d53c <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800d53c:	b480      	push	{r7}
 800d53e:	b083      	sub	sp, #12
 800d540:	af00      	add	r7, sp, #0
 800d542:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800d544:	bf00      	nop
 800d546:	370c      	adds	r7, #12
 800d548:	46bd      	mov	sp, r7
 800d54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d54e:	4770      	bx	lr

0800d550 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800d550:	b480      	push	{r7}
 800d552:	b083      	sub	sp, #12
 800d554:	af00      	add	r7, sp, #0
 800d556:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800d558:	bf00      	nop
 800d55a:	370c      	adds	r7, #12
 800d55c:	46bd      	mov	sp, r7
 800d55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d562:	4770      	bx	lr

0800d564 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800d564:	b480      	push	{r7}
 800d566:	b083      	sub	sp, #12
 800d568:	af00      	add	r7, sp, #0
 800d56a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800d56c:	bf00      	nop
 800d56e:	370c      	adds	r7, #12
 800d570:	46bd      	mov	sp, r7
 800d572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d576:	4770      	bx	lr

0800d578 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800d578:	b580      	push	{r7, lr}
 800d57a:	b082      	sub	sp, #8
 800d57c:	af00      	add	r7, sp, #0
 800d57e:	6078      	str	r0, [r7, #4]
 800d580:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	2b00      	cmp	r3, #0
 800d586:	d101      	bne.n	800d58c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800d588:	2301      	movs	r3, #1
 800d58a:	e02b      	b.n	800d5e4 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d592:	b2db      	uxtb	r3, r3
 800d594:	2b00      	cmp	r3, #0
 800d596:	d106      	bne.n	800d5a6 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	2200      	movs	r2, #0
 800d59c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800d5a0:	6878      	ldr	r0, [r7, #4]
 800d5a2:	f000 f825 	bl	800d5f0 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	2202      	movs	r2, #2
 800d5aa:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	681a      	ldr	r2, [r3, #0]
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	3304      	adds	r3, #4
 800d5b6:	4619      	mov	r1, r3
 800d5b8:	4610      	mov	r0, r2
 800d5ba:	f003 f929 	bl	8010810 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	6818      	ldr	r0, [r3, #0]
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	685b      	ldr	r3, [r3, #4]
 800d5c6:	461a      	mov	r2, r3
 800d5c8:	6839      	ldr	r1, [r7, #0]
 800d5ca:	f003 f97d 	bl	80108c8 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800d5ce:	4b07      	ldr	r3, [pc, #28]	; (800d5ec <HAL_SDRAM_Init+0x74>)
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	4a06      	ldr	r2, [pc, #24]	; (800d5ec <HAL_SDRAM_Init+0x74>)
 800d5d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d5d8:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	2201      	movs	r2, #1
 800d5de:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800d5e2:	2300      	movs	r3, #0
}
 800d5e4:	4618      	mov	r0, r3
 800d5e6:	3708      	adds	r7, #8
 800d5e8:	46bd      	mov	sp, r7
 800d5ea:	bd80      	pop	{r7, pc}
 800d5ec:	52004000 	.word	0x52004000

0800d5f0 <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
 800d5f0:	b480      	push	{r7}
 800d5f2:	b083      	sub	sp, #12
 800d5f4:	af00      	add	r7, sp, #0
 800d5f6:	6078      	str	r0, [r7, #4]
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */
}
 800d5f8:	bf00      	nop
 800d5fa:	370c      	adds	r7, #12
 800d5fc:	46bd      	mov	sp, r7
 800d5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d602:	4770      	bx	lr

0800d604 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800d604:	b580      	push	{r7, lr}
 800d606:	b086      	sub	sp, #24
 800d608:	af00      	add	r7, sp, #0
 800d60a:	60f8      	str	r0, [r7, #12]
 800d60c:	60b9      	str	r1, [r7, #8]
 800d60e:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800d610:	68fb      	ldr	r3, [r7, #12]
 800d612:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d616:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800d618:	7dfb      	ldrb	r3, [r7, #23]
 800d61a:	2b02      	cmp	r3, #2
 800d61c:	d101      	bne.n	800d622 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 800d61e:	2302      	movs	r3, #2
 800d620:	e021      	b.n	800d666 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800d622:	7dfb      	ldrb	r3, [r7, #23]
 800d624:	2b01      	cmp	r3, #1
 800d626:	d002      	beq.n	800d62e <HAL_SDRAM_SendCommand+0x2a>
 800d628:	7dfb      	ldrb	r3, [r7, #23]
 800d62a:	2b05      	cmp	r3, #5
 800d62c:	d118      	bne.n	800d660 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800d62e:	68fb      	ldr	r3, [r7, #12]
 800d630:	2202      	movs	r2, #2
 800d632:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	687a      	ldr	r2, [r7, #4]
 800d63c:	68b9      	ldr	r1, [r7, #8]
 800d63e:	4618      	mov	r0, r3
 800d640:	f003 f9ac 	bl	801099c <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800d644:	68bb      	ldr	r3, [r7, #8]
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	2b02      	cmp	r3, #2
 800d64a:	d104      	bne.n	800d656 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800d64c:	68fb      	ldr	r3, [r7, #12]
 800d64e:	2205      	movs	r2, #5
 800d650:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800d654:	e006      	b.n	800d664 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 800d656:	68fb      	ldr	r3, [r7, #12]
 800d658:	2201      	movs	r2, #1
 800d65a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800d65e:	e001      	b.n	800d664 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 800d660:	2301      	movs	r3, #1
 800d662:	e000      	b.n	800d666 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 800d664:	2300      	movs	r3, #0
}
 800d666:	4618      	mov	r0, r3
 800d668:	3718      	adds	r7, #24
 800d66a:	46bd      	mov	sp, r7
 800d66c:	bd80      	pop	{r7, pc}

0800d66e <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800d66e:	b580      	push	{r7, lr}
 800d670:	b082      	sub	sp, #8
 800d672:	af00      	add	r7, sp, #0
 800d674:	6078      	str	r0, [r7, #4]
 800d676:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d67e:	b2db      	uxtb	r3, r3
 800d680:	2b02      	cmp	r3, #2
 800d682:	d101      	bne.n	800d688 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800d684:	2302      	movs	r3, #2
 800d686:	e016      	b.n	800d6b6 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d68e:	b2db      	uxtb	r3, r3
 800d690:	2b01      	cmp	r3, #1
 800d692:	d10f      	bne.n	800d6b4 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	2202      	movs	r2, #2
 800d698:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	6839      	ldr	r1, [r7, #0]
 800d6a2:	4618      	mov	r0, r3
 800d6a4:	f003 f99e 	bl	80109e4 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	2201      	movs	r2, #1
 800d6ac:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800d6b0:	2300      	movs	r3, #0
 800d6b2:	e000      	b.n	800d6b6 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 800d6b4:	2301      	movs	r3, #1
}
 800d6b6:	4618      	mov	r0, r3
 800d6b8:	3708      	adds	r7, #8
 800d6ba:	46bd      	mov	sp, r7
 800d6bc:	bd80      	pop	{r7, pc}

0800d6be <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d6be:	b580      	push	{r7, lr}
 800d6c0:	b082      	sub	sp, #8
 800d6c2:	af00      	add	r7, sp, #0
 800d6c4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d101      	bne.n	800d6d0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d6cc:	2301      	movs	r3, #1
 800d6ce:	e049      	b.n	800d764 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d6d6:	b2db      	uxtb	r3, r3
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d106      	bne.n	800d6ea <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	2200      	movs	r2, #0
 800d6e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d6e4:	6878      	ldr	r0, [r7, #4]
 800d6e6:	f000 f841 	bl	800d76c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	2202      	movs	r2, #2
 800d6ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	681a      	ldr	r2, [r3, #0]
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	3304      	adds	r3, #4
 800d6fa:	4619      	mov	r1, r3
 800d6fc:	4610      	mov	r0, r2
 800d6fe:	f000 f9ff 	bl	800db00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	2201      	movs	r2, #1
 800d706:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	2201      	movs	r2, #1
 800d70e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	2201      	movs	r2, #1
 800d716:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	2201      	movs	r2, #1
 800d71e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	2201      	movs	r2, #1
 800d726:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	2201      	movs	r2, #1
 800d72e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	2201      	movs	r2, #1
 800d736:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	2201      	movs	r2, #1
 800d73e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	2201      	movs	r2, #1
 800d746:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	2201      	movs	r2, #1
 800d74e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	2201      	movs	r2, #1
 800d756:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	2201      	movs	r2, #1
 800d75e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d762:	2300      	movs	r3, #0
}
 800d764:	4618      	mov	r0, r3
 800d766:	3708      	adds	r7, #8
 800d768:	46bd      	mov	sp, r7
 800d76a:	bd80      	pop	{r7, pc}

0800d76c <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800d76c:	b480      	push	{r7}
 800d76e:	b083      	sub	sp, #12
 800d770:	af00      	add	r7, sp, #0
 800d772:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800d774:	bf00      	nop
 800d776:	370c      	adds	r7, #12
 800d778:	46bd      	mov	sp, r7
 800d77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d77e:	4770      	bx	lr

0800d780 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d780:	b480      	push	{r7}
 800d782:	b085      	sub	sp, #20
 800d784:	af00      	add	r7, sp, #0
 800d786:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d78e:	b2db      	uxtb	r3, r3
 800d790:	2b01      	cmp	r3, #1
 800d792:	d001      	beq.n	800d798 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d794:	2301      	movs	r3, #1
 800d796:	e054      	b.n	800d842 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	2202      	movs	r2, #2
 800d79c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	68da      	ldr	r2, [r3, #12]
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	f042 0201 	orr.w	r2, r2, #1
 800d7ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	4a26      	ldr	r2, [pc, #152]	; (800d850 <HAL_TIM_Base_Start_IT+0xd0>)
 800d7b6:	4293      	cmp	r3, r2
 800d7b8:	d022      	beq.n	800d800 <HAL_TIM_Base_Start_IT+0x80>
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	681b      	ldr	r3, [r3, #0]
 800d7be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d7c2:	d01d      	beq.n	800d800 <HAL_TIM_Base_Start_IT+0x80>
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	4a22      	ldr	r2, [pc, #136]	; (800d854 <HAL_TIM_Base_Start_IT+0xd4>)
 800d7ca:	4293      	cmp	r3, r2
 800d7cc:	d018      	beq.n	800d800 <HAL_TIM_Base_Start_IT+0x80>
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	681b      	ldr	r3, [r3, #0]
 800d7d2:	4a21      	ldr	r2, [pc, #132]	; (800d858 <HAL_TIM_Base_Start_IT+0xd8>)
 800d7d4:	4293      	cmp	r3, r2
 800d7d6:	d013      	beq.n	800d800 <HAL_TIM_Base_Start_IT+0x80>
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	4a1f      	ldr	r2, [pc, #124]	; (800d85c <HAL_TIM_Base_Start_IT+0xdc>)
 800d7de:	4293      	cmp	r3, r2
 800d7e0:	d00e      	beq.n	800d800 <HAL_TIM_Base_Start_IT+0x80>
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	681b      	ldr	r3, [r3, #0]
 800d7e6:	4a1e      	ldr	r2, [pc, #120]	; (800d860 <HAL_TIM_Base_Start_IT+0xe0>)
 800d7e8:	4293      	cmp	r3, r2
 800d7ea:	d009      	beq.n	800d800 <HAL_TIM_Base_Start_IT+0x80>
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	4a1c      	ldr	r2, [pc, #112]	; (800d864 <HAL_TIM_Base_Start_IT+0xe4>)
 800d7f2:	4293      	cmp	r3, r2
 800d7f4:	d004      	beq.n	800d800 <HAL_TIM_Base_Start_IT+0x80>
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	4a1b      	ldr	r2, [pc, #108]	; (800d868 <HAL_TIM_Base_Start_IT+0xe8>)
 800d7fc:	4293      	cmp	r3, r2
 800d7fe:	d115      	bne.n	800d82c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	689a      	ldr	r2, [r3, #8]
 800d806:	4b19      	ldr	r3, [pc, #100]	; (800d86c <HAL_TIM_Base_Start_IT+0xec>)
 800d808:	4013      	ands	r3, r2
 800d80a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d80c:	68fb      	ldr	r3, [r7, #12]
 800d80e:	2b06      	cmp	r3, #6
 800d810:	d015      	beq.n	800d83e <HAL_TIM_Base_Start_IT+0xbe>
 800d812:	68fb      	ldr	r3, [r7, #12]
 800d814:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d818:	d011      	beq.n	800d83e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	681a      	ldr	r2, [r3, #0]
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	681b      	ldr	r3, [r3, #0]
 800d824:	f042 0201 	orr.w	r2, r2, #1
 800d828:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d82a:	e008      	b.n	800d83e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	681a      	ldr	r2, [r3, #0]
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	f042 0201 	orr.w	r2, r2, #1
 800d83a:	601a      	str	r2, [r3, #0]
 800d83c:	e000      	b.n	800d840 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d83e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d840:	2300      	movs	r3, #0
}
 800d842:	4618      	mov	r0, r3
 800d844:	3714      	adds	r7, #20
 800d846:	46bd      	mov	sp, r7
 800d848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d84c:	4770      	bx	lr
 800d84e:	bf00      	nop
 800d850:	40010000 	.word	0x40010000
 800d854:	40000400 	.word	0x40000400
 800d858:	40000800 	.word	0x40000800
 800d85c:	40000c00 	.word	0x40000c00
 800d860:	40010400 	.word	0x40010400
 800d864:	40001800 	.word	0x40001800
 800d868:	40014000 	.word	0x40014000
 800d86c:	00010007 	.word	0x00010007

0800d870 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d870:	b580      	push	{r7, lr}
 800d872:	b082      	sub	sp, #8
 800d874:	af00      	add	r7, sp, #0
 800d876:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	691b      	ldr	r3, [r3, #16]
 800d87e:	f003 0302 	and.w	r3, r3, #2
 800d882:	2b02      	cmp	r3, #2
 800d884:	d122      	bne.n	800d8cc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	68db      	ldr	r3, [r3, #12]
 800d88c:	f003 0302 	and.w	r3, r3, #2
 800d890:	2b02      	cmp	r3, #2
 800d892:	d11b      	bne.n	800d8cc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	681b      	ldr	r3, [r3, #0]
 800d898:	f06f 0202 	mvn.w	r2, #2
 800d89c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	2201      	movs	r2, #1
 800d8a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	699b      	ldr	r3, [r3, #24]
 800d8aa:	f003 0303 	and.w	r3, r3, #3
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	d003      	beq.n	800d8ba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d8b2:	6878      	ldr	r0, [r7, #4]
 800d8b4:	f000 f905 	bl	800dac2 <HAL_TIM_IC_CaptureCallback>
 800d8b8:	e005      	b.n	800d8c6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d8ba:	6878      	ldr	r0, [r7, #4]
 800d8bc:	f000 f8f7 	bl	800daae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d8c0:	6878      	ldr	r0, [r7, #4]
 800d8c2:	f000 f908 	bl	800dad6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	2200      	movs	r2, #0
 800d8ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	681b      	ldr	r3, [r3, #0]
 800d8d0:	691b      	ldr	r3, [r3, #16]
 800d8d2:	f003 0304 	and.w	r3, r3, #4
 800d8d6:	2b04      	cmp	r3, #4
 800d8d8:	d122      	bne.n	800d920 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	68db      	ldr	r3, [r3, #12]
 800d8e0:	f003 0304 	and.w	r3, r3, #4
 800d8e4:	2b04      	cmp	r3, #4
 800d8e6:	d11b      	bne.n	800d920 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	681b      	ldr	r3, [r3, #0]
 800d8ec:	f06f 0204 	mvn.w	r2, #4
 800d8f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	2202      	movs	r2, #2
 800d8f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	681b      	ldr	r3, [r3, #0]
 800d8fc:	699b      	ldr	r3, [r3, #24]
 800d8fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d902:	2b00      	cmp	r3, #0
 800d904:	d003      	beq.n	800d90e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d906:	6878      	ldr	r0, [r7, #4]
 800d908:	f000 f8db 	bl	800dac2 <HAL_TIM_IC_CaptureCallback>
 800d90c:	e005      	b.n	800d91a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d90e:	6878      	ldr	r0, [r7, #4]
 800d910:	f000 f8cd 	bl	800daae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d914:	6878      	ldr	r0, [r7, #4]
 800d916:	f000 f8de 	bl	800dad6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	2200      	movs	r2, #0
 800d91e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	681b      	ldr	r3, [r3, #0]
 800d924:	691b      	ldr	r3, [r3, #16]
 800d926:	f003 0308 	and.w	r3, r3, #8
 800d92a:	2b08      	cmp	r3, #8
 800d92c:	d122      	bne.n	800d974 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	68db      	ldr	r3, [r3, #12]
 800d934:	f003 0308 	and.w	r3, r3, #8
 800d938:	2b08      	cmp	r3, #8
 800d93a:	d11b      	bne.n	800d974 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	681b      	ldr	r3, [r3, #0]
 800d940:	f06f 0208 	mvn.w	r2, #8
 800d944:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	2204      	movs	r2, #4
 800d94a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	69db      	ldr	r3, [r3, #28]
 800d952:	f003 0303 	and.w	r3, r3, #3
 800d956:	2b00      	cmp	r3, #0
 800d958:	d003      	beq.n	800d962 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d95a:	6878      	ldr	r0, [r7, #4]
 800d95c:	f000 f8b1 	bl	800dac2 <HAL_TIM_IC_CaptureCallback>
 800d960:	e005      	b.n	800d96e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d962:	6878      	ldr	r0, [r7, #4]
 800d964:	f000 f8a3 	bl	800daae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d968:	6878      	ldr	r0, [r7, #4]
 800d96a:	f000 f8b4 	bl	800dad6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	2200      	movs	r2, #0
 800d972:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	681b      	ldr	r3, [r3, #0]
 800d978:	691b      	ldr	r3, [r3, #16]
 800d97a:	f003 0310 	and.w	r3, r3, #16
 800d97e:	2b10      	cmp	r3, #16
 800d980:	d122      	bne.n	800d9c8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	681b      	ldr	r3, [r3, #0]
 800d986:	68db      	ldr	r3, [r3, #12]
 800d988:	f003 0310 	and.w	r3, r3, #16
 800d98c:	2b10      	cmp	r3, #16
 800d98e:	d11b      	bne.n	800d9c8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	f06f 0210 	mvn.w	r2, #16
 800d998:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	2208      	movs	r2, #8
 800d99e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	681b      	ldr	r3, [r3, #0]
 800d9a4:	69db      	ldr	r3, [r3, #28]
 800d9a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	d003      	beq.n	800d9b6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d9ae:	6878      	ldr	r0, [r7, #4]
 800d9b0:	f000 f887 	bl	800dac2 <HAL_TIM_IC_CaptureCallback>
 800d9b4:	e005      	b.n	800d9c2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d9b6:	6878      	ldr	r0, [r7, #4]
 800d9b8:	f000 f879 	bl	800daae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d9bc:	6878      	ldr	r0, [r7, #4]
 800d9be:	f000 f88a 	bl	800dad6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	2200      	movs	r2, #0
 800d9c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	691b      	ldr	r3, [r3, #16]
 800d9ce:	f003 0301 	and.w	r3, r3, #1
 800d9d2:	2b01      	cmp	r3, #1
 800d9d4:	d10e      	bne.n	800d9f4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	681b      	ldr	r3, [r3, #0]
 800d9da:	68db      	ldr	r3, [r3, #12]
 800d9dc:	f003 0301 	and.w	r3, r3, #1
 800d9e0:	2b01      	cmp	r3, #1
 800d9e2:	d107      	bne.n	800d9f4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	f06f 0201 	mvn.w	r2, #1
 800d9ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d9ee:	6878      	ldr	r0, [r7, #4]
 800d9f0:	f7f4 fb88 	bl	8002104 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	681b      	ldr	r3, [r3, #0]
 800d9f8:	691b      	ldr	r3, [r3, #16]
 800d9fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d9fe:	2b80      	cmp	r3, #128	; 0x80
 800da00:	d10e      	bne.n	800da20 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	681b      	ldr	r3, [r3, #0]
 800da06:	68db      	ldr	r3, [r3, #12]
 800da08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800da0c:	2b80      	cmp	r3, #128	; 0x80
 800da0e:	d107      	bne.n	800da20 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800da18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800da1a:	6878      	ldr	r0, [r7, #4]
 800da1c:	f000 f914 	bl	800dc48 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	681b      	ldr	r3, [r3, #0]
 800da24:	691b      	ldr	r3, [r3, #16]
 800da26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800da2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800da2e:	d10e      	bne.n	800da4e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	68db      	ldr	r3, [r3, #12]
 800da36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800da3a:	2b80      	cmp	r3, #128	; 0x80
 800da3c:	d107      	bne.n	800da4e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	681b      	ldr	r3, [r3, #0]
 800da42:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800da46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800da48:	6878      	ldr	r0, [r7, #4]
 800da4a:	f000 f907 	bl	800dc5c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	681b      	ldr	r3, [r3, #0]
 800da52:	691b      	ldr	r3, [r3, #16]
 800da54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800da58:	2b40      	cmp	r3, #64	; 0x40
 800da5a:	d10e      	bne.n	800da7a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	68db      	ldr	r3, [r3, #12]
 800da62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800da66:	2b40      	cmp	r3, #64	; 0x40
 800da68:	d107      	bne.n	800da7a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800da72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800da74:	6878      	ldr	r0, [r7, #4]
 800da76:	f000 f838 	bl	800daea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	681b      	ldr	r3, [r3, #0]
 800da7e:	691b      	ldr	r3, [r3, #16]
 800da80:	f003 0320 	and.w	r3, r3, #32
 800da84:	2b20      	cmp	r3, #32
 800da86:	d10e      	bne.n	800daa6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	681b      	ldr	r3, [r3, #0]
 800da8c:	68db      	ldr	r3, [r3, #12]
 800da8e:	f003 0320 	and.w	r3, r3, #32
 800da92:	2b20      	cmp	r3, #32
 800da94:	d107      	bne.n	800daa6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	681b      	ldr	r3, [r3, #0]
 800da9a:	f06f 0220 	mvn.w	r2, #32
 800da9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800daa0:	6878      	ldr	r0, [r7, #4]
 800daa2:	f000 f8c7 	bl	800dc34 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800daa6:	bf00      	nop
 800daa8:	3708      	adds	r7, #8
 800daaa:	46bd      	mov	sp, r7
 800daac:	bd80      	pop	{r7, pc}

0800daae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800daae:	b480      	push	{r7}
 800dab0:	b083      	sub	sp, #12
 800dab2:	af00      	add	r7, sp, #0
 800dab4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800dab6:	bf00      	nop
 800dab8:	370c      	adds	r7, #12
 800daba:	46bd      	mov	sp, r7
 800dabc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dac0:	4770      	bx	lr

0800dac2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800dac2:	b480      	push	{r7}
 800dac4:	b083      	sub	sp, #12
 800dac6:	af00      	add	r7, sp, #0
 800dac8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800daca:	bf00      	nop
 800dacc:	370c      	adds	r7, #12
 800dace:	46bd      	mov	sp, r7
 800dad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dad4:	4770      	bx	lr

0800dad6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800dad6:	b480      	push	{r7}
 800dad8:	b083      	sub	sp, #12
 800dada:	af00      	add	r7, sp, #0
 800dadc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800dade:	bf00      	nop
 800dae0:	370c      	adds	r7, #12
 800dae2:	46bd      	mov	sp, r7
 800dae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dae8:	4770      	bx	lr

0800daea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800daea:	b480      	push	{r7}
 800daec:	b083      	sub	sp, #12
 800daee:	af00      	add	r7, sp, #0
 800daf0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800daf2:	bf00      	nop
 800daf4:	370c      	adds	r7, #12
 800daf6:	46bd      	mov	sp, r7
 800daf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dafc:	4770      	bx	lr
	...

0800db00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800db00:	b480      	push	{r7}
 800db02:	b085      	sub	sp, #20
 800db04:	af00      	add	r7, sp, #0
 800db06:	6078      	str	r0, [r7, #4]
 800db08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	681b      	ldr	r3, [r3, #0]
 800db0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	4a40      	ldr	r2, [pc, #256]	; (800dc14 <TIM_Base_SetConfig+0x114>)
 800db14:	4293      	cmp	r3, r2
 800db16:	d013      	beq.n	800db40 <TIM_Base_SetConfig+0x40>
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800db1e:	d00f      	beq.n	800db40 <TIM_Base_SetConfig+0x40>
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	4a3d      	ldr	r2, [pc, #244]	; (800dc18 <TIM_Base_SetConfig+0x118>)
 800db24:	4293      	cmp	r3, r2
 800db26:	d00b      	beq.n	800db40 <TIM_Base_SetConfig+0x40>
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	4a3c      	ldr	r2, [pc, #240]	; (800dc1c <TIM_Base_SetConfig+0x11c>)
 800db2c:	4293      	cmp	r3, r2
 800db2e:	d007      	beq.n	800db40 <TIM_Base_SetConfig+0x40>
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	4a3b      	ldr	r2, [pc, #236]	; (800dc20 <TIM_Base_SetConfig+0x120>)
 800db34:	4293      	cmp	r3, r2
 800db36:	d003      	beq.n	800db40 <TIM_Base_SetConfig+0x40>
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	4a3a      	ldr	r2, [pc, #232]	; (800dc24 <TIM_Base_SetConfig+0x124>)
 800db3c:	4293      	cmp	r3, r2
 800db3e:	d108      	bne.n	800db52 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800db40:	68fb      	ldr	r3, [r7, #12]
 800db42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800db46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800db48:	683b      	ldr	r3, [r7, #0]
 800db4a:	685b      	ldr	r3, [r3, #4]
 800db4c:	68fa      	ldr	r2, [r7, #12]
 800db4e:	4313      	orrs	r3, r2
 800db50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	4a2f      	ldr	r2, [pc, #188]	; (800dc14 <TIM_Base_SetConfig+0x114>)
 800db56:	4293      	cmp	r3, r2
 800db58:	d01f      	beq.n	800db9a <TIM_Base_SetConfig+0x9a>
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800db60:	d01b      	beq.n	800db9a <TIM_Base_SetConfig+0x9a>
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	4a2c      	ldr	r2, [pc, #176]	; (800dc18 <TIM_Base_SetConfig+0x118>)
 800db66:	4293      	cmp	r3, r2
 800db68:	d017      	beq.n	800db9a <TIM_Base_SetConfig+0x9a>
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	4a2b      	ldr	r2, [pc, #172]	; (800dc1c <TIM_Base_SetConfig+0x11c>)
 800db6e:	4293      	cmp	r3, r2
 800db70:	d013      	beq.n	800db9a <TIM_Base_SetConfig+0x9a>
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	4a2a      	ldr	r2, [pc, #168]	; (800dc20 <TIM_Base_SetConfig+0x120>)
 800db76:	4293      	cmp	r3, r2
 800db78:	d00f      	beq.n	800db9a <TIM_Base_SetConfig+0x9a>
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	4a29      	ldr	r2, [pc, #164]	; (800dc24 <TIM_Base_SetConfig+0x124>)
 800db7e:	4293      	cmp	r3, r2
 800db80:	d00b      	beq.n	800db9a <TIM_Base_SetConfig+0x9a>
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	4a28      	ldr	r2, [pc, #160]	; (800dc28 <TIM_Base_SetConfig+0x128>)
 800db86:	4293      	cmp	r3, r2
 800db88:	d007      	beq.n	800db9a <TIM_Base_SetConfig+0x9a>
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	4a27      	ldr	r2, [pc, #156]	; (800dc2c <TIM_Base_SetConfig+0x12c>)
 800db8e:	4293      	cmp	r3, r2
 800db90:	d003      	beq.n	800db9a <TIM_Base_SetConfig+0x9a>
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	4a26      	ldr	r2, [pc, #152]	; (800dc30 <TIM_Base_SetConfig+0x130>)
 800db96:	4293      	cmp	r3, r2
 800db98:	d108      	bne.n	800dbac <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800db9a:	68fb      	ldr	r3, [r7, #12]
 800db9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800dba0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800dba2:	683b      	ldr	r3, [r7, #0]
 800dba4:	68db      	ldr	r3, [r3, #12]
 800dba6:	68fa      	ldr	r2, [r7, #12]
 800dba8:	4313      	orrs	r3, r2
 800dbaa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800dbac:	68fb      	ldr	r3, [r7, #12]
 800dbae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800dbb2:	683b      	ldr	r3, [r7, #0]
 800dbb4:	695b      	ldr	r3, [r3, #20]
 800dbb6:	4313      	orrs	r3, r2
 800dbb8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	68fa      	ldr	r2, [r7, #12]
 800dbbe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800dbc0:	683b      	ldr	r3, [r7, #0]
 800dbc2:	689a      	ldr	r2, [r3, #8]
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800dbc8:	683b      	ldr	r3, [r7, #0]
 800dbca:	681a      	ldr	r2, [r3, #0]
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	4a10      	ldr	r2, [pc, #64]	; (800dc14 <TIM_Base_SetConfig+0x114>)
 800dbd4:	4293      	cmp	r3, r2
 800dbd6:	d00f      	beq.n	800dbf8 <TIM_Base_SetConfig+0xf8>
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	4a12      	ldr	r2, [pc, #72]	; (800dc24 <TIM_Base_SetConfig+0x124>)
 800dbdc:	4293      	cmp	r3, r2
 800dbde:	d00b      	beq.n	800dbf8 <TIM_Base_SetConfig+0xf8>
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	4a11      	ldr	r2, [pc, #68]	; (800dc28 <TIM_Base_SetConfig+0x128>)
 800dbe4:	4293      	cmp	r3, r2
 800dbe6:	d007      	beq.n	800dbf8 <TIM_Base_SetConfig+0xf8>
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	4a10      	ldr	r2, [pc, #64]	; (800dc2c <TIM_Base_SetConfig+0x12c>)
 800dbec:	4293      	cmp	r3, r2
 800dbee:	d003      	beq.n	800dbf8 <TIM_Base_SetConfig+0xf8>
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	4a0f      	ldr	r2, [pc, #60]	; (800dc30 <TIM_Base_SetConfig+0x130>)
 800dbf4:	4293      	cmp	r3, r2
 800dbf6:	d103      	bne.n	800dc00 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800dbf8:	683b      	ldr	r3, [r7, #0]
 800dbfa:	691a      	ldr	r2, [r3, #16]
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	2201      	movs	r2, #1
 800dc04:	615a      	str	r2, [r3, #20]
}
 800dc06:	bf00      	nop
 800dc08:	3714      	adds	r7, #20
 800dc0a:	46bd      	mov	sp, r7
 800dc0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc10:	4770      	bx	lr
 800dc12:	bf00      	nop
 800dc14:	40010000 	.word	0x40010000
 800dc18:	40000400 	.word	0x40000400
 800dc1c:	40000800 	.word	0x40000800
 800dc20:	40000c00 	.word	0x40000c00
 800dc24:	40010400 	.word	0x40010400
 800dc28:	40014000 	.word	0x40014000
 800dc2c:	40014400 	.word	0x40014400
 800dc30:	40014800 	.word	0x40014800

0800dc34 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800dc34:	b480      	push	{r7}
 800dc36:	b083      	sub	sp, #12
 800dc38:	af00      	add	r7, sp, #0
 800dc3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800dc3c:	bf00      	nop
 800dc3e:	370c      	adds	r7, #12
 800dc40:	46bd      	mov	sp, r7
 800dc42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc46:	4770      	bx	lr

0800dc48 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800dc48:	b480      	push	{r7}
 800dc4a:	b083      	sub	sp, #12
 800dc4c:	af00      	add	r7, sp, #0
 800dc4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800dc50:	bf00      	nop
 800dc52:	370c      	adds	r7, #12
 800dc54:	46bd      	mov	sp, r7
 800dc56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc5a:	4770      	bx	lr

0800dc5c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800dc5c:	b480      	push	{r7}
 800dc5e:	b083      	sub	sp, #12
 800dc60:	af00      	add	r7, sp, #0
 800dc62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800dc64:	bf00      	nop
 800dc66:	370c      	adds	r7, #12
 800dc68:	46bd      	mov	sp, r7
 800dc6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc6e:	4770      	bx	lr

0800dc70 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800dc70:	b580      	push	{r7, lr}
 800dc72:	b082      	sub	sp, #8
 800dc74:	af00      	add	r7, sp, #0
 800dc76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d101      	bne.n	800dc82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800dc7e:	2301      	movs	r3, #1
 800dc80:	e042      	b.n	800dd08 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	d106      	bne.n	800dc9a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	2200      	movs	r2, #0
 800dc90:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800dc94:	6878      	ldr	r0, [r7, #4]
 800dc96:	f7f4 fd3f 	bl	8002718 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	2224      	movs	r2, #36	; 0x24
 800dc9e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	681b      	ldr	r3, [r3, #0]
 800dca6:	681a      	ldr	r2, [r3, #0]
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	681b      	ldr	r3, [r3, #0]
 800dcac:	f022 0201 	bic.w	r2, r2, #1
 800dcb0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800dcb2:	6878      	ldr	r0, [r7, #4]
 800dcb4:	f000 fce6 	bl	800e684 <UART_SetConfig>
 800dcb8:	4603      	mov	r3, r0
 800dcba:	2b01      	cmp	r3, #1
 800dcbc:	d101      	bne.n	800dcc2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800dcbe:	2301      	movs	r3, #1
 800dcc0:	e022      	b.n	800dd08 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d002      	beq.n	800dcd0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800dcca:	6878      	ldr	r0, [r7, #4]
 800dccc:	f001 fa42 	bl	800f154 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	681b      	ldr	r3, [r3, #0]
 800dcd4:	685a      	ldr	r2, [r3, #4]
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	681b      	ldr	r3, [r3, #0]
 800dcda:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800dcde:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	681b      	ldr	r3, [r3, #0]
 800dce4:	689a      	ldr	r2, [r3, #8]
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800dcee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	681b      	ldr	r3, [r3, #0]
 800dcf4:	681a      	ldr	r2, [r3, #0]
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	f042 0201 	orr.w	r2, r2, #1
 800dcfe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800dd00:	6878      	ldr	r0, [r7, #4]
 800dd02:	f001 fac9 	bl	800f298 <UART_CheckIdleState>
 800dd06:	4603      	mov	r3, r0
}
 800dd08:	4618      	mov	r0, r3
 800dd0a:	3708      	adds	r7, #8
 800dd0c:	46bd      	mov	sp, r7
 800dd0e:	bd80      	pop	{r7, pc}

0800dd10 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800dd10:	b480      	push	{r7}
 800dd12:	b091      	sub	sp, #68	; 0x44
 800dd14:	af00      	add	r7, sp, #0
 800dd16:	60f8      	str	r0, [r7, #12]
 800dd18:	60b9      	str	r1, [r7, #8]
 800dd1a:	4613      	mov	r3, r2
 800dd1c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800dd1e:	68fb      	ldr	r3, [r7, #12]
 800dd20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dd24:	2b20      	cmp	r3, #32
 800dd26:	d178      	bne.n	800de1a <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 800dd28:	68bb      	ldr	r3, [r7, #8]
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	d002      	beq.n	800dd34 <HAL_UART_Transmit_IT+0x24>
 800dd2e:	88fb      	ldrh	r3, [r7, #6]
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d101      	bne.n	800dd38 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 800dd34:	2301      	movs	r3, #1
 800dd36:	e071      	b.n	800de1c <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 800dd38:	68fb      	ldr	r3, [r7, #12]
 800dd3a:	68ba      	ldr	r2, [r7, #8]
 800dd3c:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800dd3e:	68fb      	ldr	r3, [r7, #12]
 800dd40:	88fa      	ldrh	r2, [r7, #6]
 800dd42:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800dd46:	68fb      	ldr	r3, [r7, #12]
 800dd48:	88fa      	ldrh	r2, [r7, #6]
 800dd4a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	2200      	movs	r2, #0
 800dd52:	679a      	str	r2, [r3, #120]	; 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dd54:	68fb      	ldr	r3, [r7, #12]
 800dd56:	2200      	movs	r2, #0
 800dd58:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800dd5c:	68fb      	ldr	r3, [r7, #12]
 800dd5e:	2221      	movs	r2, #33	; 0x21
 800dd60:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800dd64:	68fb      	ldr	r3, [r7, #12]
 800dd66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dd68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800dd6c:	d12a      	bne.n	800ddc4 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800dd6e:	68fb      	ldr	r3, [r7, #12]
 800dd70:	689b      	ldr	r3, [r3, #8]
 800dd72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dd76:	d107      	bne.n	800dd88 <HAL_UART_Transmit_IT+0x78>
 800dd78:	68fb      	ldr	r3, [r7, #12]
 800dd7a:	691b      	ldr	r3, [r3, #16]
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d103      	bne.n	800dd88 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 800dd80:	68fb      	ldr	r3, [r7, #12]
 800dd82:	4a29      	ldr	r2, [pc, #164]	; (800de28 <HAL_UART_Transmit_IT+0x118>)
 800dd84:	679a      	str	r2, [r3, #120]	; 0x78
 800dd86:	e002      	b.n	800dd8e <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	4a28      	ldr	r2, [pc, #160]	; (800de2c <HAL_UART_Transmit_IT+0x11c>)
 800dd8c:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800dd8e:	68fb      	ldr	r3, [r7, #12]
 800dd90:	681b      	ldr	r3, [r3, #0]
 800dd92:	3308      	adds	r3, #8
 800dd94:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd98:	e853 3f00 	ldrex	r3, [r3]
 800dd9c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800dd9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dda0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800dda4:	63bb      	str	r3, [r7, #56]	; 0x38
 800dda6:	68fb      	ldr	r3, [r7, #12]
 800dda8:	681b      	ldr	r3, [r3, #0]
 800ddaa:	3308      	adds	r3, #8
 800ddac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ddae:	637a      	str	r2, [r7, #52]	; 0x34
 800ddb0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ddb2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ddb4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ddb6:	e841 2300 	strex	r3, r2, [r1]
 800ddba:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ddbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	d1e5      	bne.n	800dd8e <HAL_UART_Transmit_IT+0x7e>
 800ddc2:	e028      	b.n	800de16 <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ddc4:	68fb      	ldr	r3, [r7, #12]
 800ddc6:	689b      	ldr	r3, [r3, #8]
 800ddc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ddcc:	d107      	bne.n	800ddde <HAL_UART_Transmit_IT+0xce>
 800ddce:	68fb      	ldr	r3, [r7, #12]
 800ddd0:	691b      	ldr	r3, [r3, #16]
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	d103      	bne.n	800ddde <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 800ddd6:	68fb      	ldr	r3, [r7, #12]
 800ddd8:	4a15      	ldr	r2, [pc, #84]	; (800de30 <HAL_UART_Transmit_IT+0x120>)
 800ddda:	679a      	str	r2, [r3, #120]	; 0x78
 800dddc:	e002      	b.n	800dde4 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 800ddde:	68fb      	ldr	r3, [r7, #12]
 800dde0:	4a14      	ldr	r2, [pc, #80]	; (800de34 <HAL_UART_Transmit_IT+0x124>)
 800dde2:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800dde4:	68fb      	ldr	r3, [r7, #12]
 800dde6:	681b      	ldr	r3, [r3, #0]
 800dde8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ddea:	697b      	ldr	r3, [r7, #20]
 800ddec:	e853 3f00 	ldrex	r3, [r3]
 800ddf0:	613b      	str	r3, [r7, #16]
   return(result);
 800ddf2:	693b      	ldr	r3, [r7, #16]
 800ddf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ddf8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ddfa:	68fb      	ldr	r3, [r7, #12]
 800ddfc:	681b      	ldr	r3, [r3, #0]
 800ddfe:	461a      	mov	r2, r3
 800de00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de02:	623b      	str	r3, [r7, #32]
 800de04:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de06:	69f9      	ldr	r1, [r7, #28]
 800de08:	6a3a      	ldr	r2, [r7, #32]
 800de0a:	e841 2300 	strex	r3, r2, [r1]
 800de0e:	61bb      	str	r3, [r7, #24]
   return(result);
 800de10:	69bb      	ldr	r3, [r7, #24]
 800de12:	2b00      	cmp	r3, #0
 800de14:	d1e6      	bne.n	800dde4 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 800de16:	2300      	movs	r3, #0
 800de18:	e000      	b.n	800de1c <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800de1a:	2302      	movs	r3, #2
  }
}
 800de1c:	4618      	mov	r0, r3
 800de1e:	3744      	adds	r7, #68	; 0x44
 800de20:	46bd      	mov	sp, r7
 800de22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de26:	4770      	bx	lr
 800de28:	0800fa53 	.word	0x0800fa53
 800de2c:	0800f973 	.word	0x0800f973
 800de30:	0800f8b1 	.word	0x0800f8b1
 800de34:	0800f7f9 	.word	0x0800f7f9

0800de38 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800de38:	b580      	push	{r7, lr}
 800de3a:	b08a      	sub	sp, #40	; 0x28
 800de3c:	af00      	add	r7, sp, #0
 800de3e:	60f8      	str	r0, [r7, #12]
 800de40:	60b9      	str	r1, [r7, #8]
 800de42:	4613      	mov	r3, r2
 800de44:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800de46:	68fb      	ldr	r3, [r7, #12]
 800de48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800de4c:	2b20      	cmp	r3, #32
 800de4e:	d137      	bne.n	800dec0 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800de50:	68bb      	ldr	r3, [r7, #8]
 800de52:	2b00      	cmp	r3, #0
 800de54:	d002      	beq.n	800de5c <HAL_UART_Receive_IT+0x24>
 800de56:	88fb      	ldrh	r3, [r7, #6]
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d101      	bne.n	800de60 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800de5c:	2301      	movs	r3, #1
 800de5e:	e030      	b.n	800dec2 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800de60:	68fb      	ldr	r3, [r7, #12]
 800de62:	2200      	movs	r2, #0
 800de64:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800de66:	68fb      	ldr	r3, [r7, #12]
 800de68:	681b      	ldr	r3, [r3, #0]
 800de6a:	4a18      	ldr	r2, [pc, #96]	; (800decc <HAL_UART_Receive_IT+0x94>)
 800de6c:	4293      	cmp	r3, r2
 800de6e:	d01f      	beq.n	800deb0 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800de70:	68fb      	ldr	r3, [r7, #12]
 800de72:	681b      	ldr	r3, [r3, #0]
 800de74:	685b      	ldr	r3, [r3, #4]
 800de76:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	d018      	beq.n	800deb0 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800de7e:	68fb      	ldr	r3, [r7, #12]
 800de80:	681b      	ldr	r3, [r3, #0]
 800de82:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de84:	697b      	ldr	r3, [r7, #20]
 800de86:	e853 3f00 	ldrex	r3, [r3]
 800de8a:	613b      	str	r3, [r7, #16]
   return(result);
 800de8c:	693b      	ldr	r3, [r7, #16]
 800de8e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800de92:	627b      	str	r3, [r7, #36]	; 0x24
 800de94:	68fb      	ldr	r3, [r7, #12]
 800de96:	681b      	ldr	r3, [r3, #0]
 800de98:	461a      	mov	r2, r3
 800de9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de9c:	623b      	str	r3, [r7, #32]
 800de9e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dea0:	69f9      	ldr	r1, [r7, #28]
 800dea2:	6a3a      	ldr	r2, [r7, #32]
 800dea4:	e841 2300 	strex	r3, r2, [r1]
 800dea8:	61bb      	str	r3, [r7, #24]
   return(result);
 800deaa:	69bb      	ldr	r3, [r7, #24]
 800deac:	2b00      	cmp	r3, #0
 800deae:	d1e6      	bne.n	800de7e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800deb0:	88fb      	ldrh	r3, [r7, #6]
 800deb2:	461a      	mov	r2, r3
 800deb4:	68b9      	ldr	r1, [r7, #8]
 800deb6:	68f8      	ldr	r0, [r7, #12]
 800deb8:	f001 fb00 	bl	800f4bc <UART_Start_Receive_IT>
 800debc:	4603      	mov	r3, r0
 800debe:	e000      	b.n	800dec2 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800dec0:	2302      	movs	r3, #2
  }
}
 800dec2:	4618      	mov	r0, r3
 800dec4:	3728      	adds	r7, #40	; 0x28
 800dec6:	46bd      	mov	sp, r7
 800dec8:	bd80      	pop	{r7, pc}
 800deca:	bf00      	nop
 800decc:	58000c00 	.word	0x58000c00

0800ded0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ded0:	b580      	push	{r7, lr}
 800ded2:	b0ba      	sub	sp, #232	; 0xe8
 800ded4:	af00      	add	r7, sp, #0
 800ded6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	681b      	ldr	r3, [r3, #0]
 800dedc:	69db      	ldr	r3, [r3, #28]
 800dede:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	681b      	ldr	r3, [r3, #0]
 800dee6:	681b      	ldr	r3, [r3, #0]
 800dee8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	689b      	ldr	r3, [r3, #8]
 800def2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800def6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800defa:	f640 030f 	movw	r3, #2063	; 0x80f
 800defe:	4013      	ands	r3, r2
 800df00:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800df04:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800df08:	2b00      	cmp	r3, #0
 800df0a:	d11b      	bne.n	800df44 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800df0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800df10:	f003 0320 	and.w	r3, r3, #32
 800df14:	2b00      	cmp	r3, #0
 800df16:	d015      	beq.n	800df44 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800df18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800df1c:	f003 0320 	and.w	r3, r3, #32
 800df20:	2b00      	cmp	r3, #0
 800df22:	d105      	bne.n	800df30 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800df24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800df28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	d009      	beq.n	800df44 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800df34:	2b00      	cmp	r3, #0
 800df36:	f000 8377 	beq.w	800e628 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800df3e:	6878      	ldr	r0, [r7, #4]
 800df40:	4798      	blx	r3
      }
      return;
 800df42:	e371      	b.n	800e628 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800df44:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800df48:	2b00      	cmp	r3, #0
 800df4a:	f000 8123 	beq.w	800e194 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800df4e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800df52:	4b8d      	ldr	r3, [pc, #564]	; (800e188 <HAL_UART_IRQHandler+0x2b8>)
 800df54:	4013      	ands	r3, r2
 800df56:	2b00      	cmp	r3, #0
 800df58:	d106      	bne.n	800df68 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800df5a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800df5e:	4b8b      	ldr	r3, [pc, #556]	; (800e18c <HAL_UART_IRQHandler+0x2bc>)
 800df60:	4013      	ands	r3, r2
 800df62:	2b00      	cmp	r3, #0
 800df64:	f000 8116 	beq.w	800e194 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800df68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800df6c:	f003 0301 	and.w	r3, r3, #1
 800df70:	2b00      	cmp	r3, #0
 800df72:	d011      	beq.n	800df98 <HAL_UART_IRQHandler+0xc8>
 800df74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800df78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	d00b      	beq.n	800df98 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	2201      	movs	r2, #1
 800df86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800df8e:	f043 0201 	orr.w	r2, r3, #1
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800df98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800df9c:	f003 0302 	and.w	r3, r3, #2
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d011      	beq.n	800dfc8 <HAL_UART_IRQHandler+0xf8>
 800dfa4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800dfa8:	f003 0301 	and.w	r3, r3, #1
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	d00b      	beq.n	800dfc8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	681b      	ldr	r3, [r3, #0]
 800dfb4:	2202      	movs	r2, #2
 800dfb6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dfbe:	f043 0204 	orr.w	r2, r3, #4
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800dfc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dfcc:	f003 0304 	and.w	r3, r3, #4
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d011      	beq.n	800dff8 <HAL_UART_IRQHandler+0x128>
 800dfd4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800dfd8:	f003 0301 	and.w	r3, r3, #1
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	d00b      	beq.n	800dff8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	2204      	movs	r2, #4
 800dfe6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dfee:	f043 0202 	orr.w	r2, r3, #2
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800dff8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dffc:	f003 0308 	and.w	r3, r3, #8
 800e000:	2b00      	cmp	r3, #0
 800e002:	d017      	beq.n	800e034 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e004:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e008:	f003 0320 	and.w	r3, r3, #32
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d105      	bne.n	800e01c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800e010:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800e014:	4b5c      	ldr	r3, [pc, #368]	; (800e188 <HAL_UART_IRQHandler+0x2b8>)
 800e016:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e018:	2b00      	cmp	r3, #0
 800e01a:	d00b      	beq.n	800e034 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	2208      	movs	r2, #8
 800e022:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e02a:	f043 0208 	orr.w	r2, r3, #8
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800e034:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e038:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d012      	beq.n	800e066 <HAL_UART_IRQHandler+0x196>
 800e040:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e044:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e048:	2b00      	cmp	r3, #0
 800e04a:	d00c      	beq.n	800e066 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	681b      	ldr	r3, [r3, #0]
 800e050:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e054:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e05c:	f043 0220 	orr.w	r2, r3, #32
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	f000 82dd 	beq.w	800e62c <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e072:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e076:	f003 0320 	and.w	r3, r3, #32
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	d013      	beq.n	800e0a6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e07e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e082:	f003 0320 	and.w	r3, r3, #32
 800e086:	2b00      	cmp	r3, #0
 800e088:	d105      	bne.n	800e096 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e08a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e08e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e092:	2b00      	cmp	r3, #0
 800e094:	d007      	beq.n	800e0a6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	d003      	beq.n	800e0a6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e0a2:	6878      	ldr	r0, [r7, #4]
 800e0a4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e0ac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	681b      	ldr	r3, [r3, #0]
 800e0b4:	689b      	ldr	r3, [r3, #8]
 800e0b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e0ba:	2b40      	cmp	r3, #64	; 0x40
 800e0bc:	d005      	beq.n	800e0ca <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800e0be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e0c2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	d054      	beq.n	800e174 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e0ca:	6878      	ldr	r0, [r7, #4]
 800e0cc:	f001 fb18 	bl	800f700 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	681b      	ldr	r3, [r3, #0]
 800e0d4:	689b      	ldr	r3, [r3, #8]
 800e0d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e0da:	2b40      	cmp	r3, #64	; 0x40
 800e0dc:	d146      	bne.n	800e16c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	681b      	ldr	r3, [r3, #0]
 800e0e2:	3308      	adds	r3, #8
 800e0e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e0e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e0ec:	e853 3f00 	ldrex	r3, [r3]
 800e0f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800e0f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e0f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e0fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	681b      	ldr	r3, [r3, #0]
 800e104:	3308      	adds	r3, #8
 800e106:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800e10a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800e10e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e112:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800e116:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800e11a:	e841 2300 	strex	r3, r2, [r1]
 800e11e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800e122:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800e126:	2b00      	cmp	r3, #0
 800e128:	d1d9      	bne.n	800e0de <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e130:	2b00      	cmp	r3, #0
 800e132:	d017      	beq.n	800e164 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e13a:	4a15      	ldr	r2, [pc, #84]	; (800e190 <HAL_UART_IRQHandler+0x2c0>)
 800e13c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e144:	4618      	mov	r0, r3
 800e146:	f7f6 ffaf 	bl	80050a8 <HAL_DMA_Abort_IT>
 800e14a:	4603      	mov	r3, r0
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	d019      	beq.n	800e184 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e156:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e158:	687a      	ldr	r2, [r7, #4]
 800e15a:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800e15e:	4610      	mov	r0, r2
 800e160:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e162:	e00f      	b.n	800e184 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e164:	6878      	ldr	r0, [r7, #4]
 800e166:	f000 fa77 	bl	800e658 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e16a:	e00b      	b.n	800e184 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e16c:	6878      	ldr	r0, [r7, #4]
 800e16e:	f000 fa73 	bl	800e658 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e172:	e007      	b.n	800e184 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e174:	6878      	ldr	r0, [r7, #4]
 800e176:	f000 fa6f 	bl	800e658 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	2200      	movs	r2, #0
 800e17e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800e182:	e253      	b.n	800e62c <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e184:	bf00      	nop
    return;
 800e186:	e251      	b.n	800e62c <HAL_UART_IRQHandler+0x75c>
 800e188:	10000001 	.word	0x10000001
 800e18c:	04000120 	.word	0x04000120
 800e190:	0800f7cd 	.word	0x0800f7cd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e198:	2b01      	cmp	r3, #1
 800e19a:	f040 81e7 	bne.w	800e56c <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800e19e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e1a2:	f003 0310 	and.w	r3, r3, #16
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	f000 81e0 	beq.w	800e56c <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800e1ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e1b0:	f003 0310 	and.w	r3, r3, #16
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	f000 81d9 	beq.w	800e56c <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	681b      	ldr	r3, [r3, #0]
 800e1be:	2210      	movs	r2, #16
 800e1c0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	681b      	ldr	r3, [r3, #0]
 800e1c6:	689b      	ldr	r3, [r3, #8]
 800e1c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e1cc:	2b40      	cmp	r3, #64	; 0x40
 800e1ce:	f040 8151 	bne.w	800e474 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e1d8:	681b      	ldr	r3, [r3, #0]
 800e1da:	4a96      	ldr	r2, [pc, #600]	; (800e434 <HAL_UART_IRQHandler+0x564>)
 800e1dc:	4293      	cmp	r3, r2
 800e1de:	d068      	beq.n	800e2b2 <HAL_UART_IRQHandler+0x3e2>
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e1e6:	681b      	ldr	r3, [r3, #0]
 800e1e8:	4a93      	ldr	r2, [pc, #588]	; (800e438 <HAL_UART_IRQHandler+0x568>)
 800e1ea:	4293      	cmp	r3, r2
 800e1ec:	d061      	beq.n	800e2b2 <HAL_UART_IRQHandler+0x3e2>
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e1f4:	681b      	ldr	r3, [r3, #0]
 800e1f6:	4a91      	ldr	r2, [pc, #580]	; (800e43c <HAL_UART_IRQHandler+0x56c>)
 800e1f8:	4293      	cmp	r3, r2
 800e1fa:	d05a      	beq.n	800e2b2 <HAL_UART_IRQHandler+0x3e2>
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e202:	681b      	ldr	r3, [r3, #0]
 800e204:	4a8e      	ldr	r2, [pc, #568]	; (800e440 <HAL_UART_IRQHandler+0x570>)
 800e206:	4293      	cmp	r3, r2
 800e208:	d053      	beq.n	800e2b2 <HAL_UART_IRQHandler+0x3e2>
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e210:	681b      	ldr	r3, [r3, #0]
 800e212:	4a8c      	ldr	r2, [pc, #560]	; (800e444 <HAL_UART_IRQHandler+0x574>)
 800e214:	4293      	cmp	r3, r2
 800e216:	d04c      	beq.n	800e2b2 <HAL_UART_IRQHandler+0x3e2>
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e21e:	681b      	ldr	r3, [r3, #0]
 800e220:	4a89      	ldr	r2, [pc, #548]	; (800e448 <HAL_UART_IRQHandler+0x578>)
 800e222:	4293      	cmp	r3, r2
 800e224:	d045      	beq.n	800e2b2 <HAL_UART_IRQHandler+0x3e2>
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e22c:	681b      	ldr	r3, [r3, #0]
 800e22e:	4a87      	ldr	r2, [pc, #540]	; (800e44c <HAL_UART_IRQHandler+0x57c>)
 800e230:	4293      	cmp	r3, r2
 800e232:	d03e      	beq.n	800e2b2 <HAL_UART_IRQHandler+0x3e2>
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e23a:	681b      	ldr	r3, [r3, #0]
 800e23c:	4a84      	ldr	r2, [pc, #528]	; (800e450 <HAL_UART_IRQHandler+0x580>)
 800e23e:	4293      	cmp	r3, r2
 800e240:	d037      	beq.n	800e2b2 <HAL_UART_IRQHandler+0x3e2>
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e248:	681b      	ldr	r3, [r3, #0]
 800e24a:	4a82      	ldr	r2, [pc, #520]	; (800e454 <HAL_UART_IRQHandler+0x584>)
 800e24c:	4293      	cmp	r3, r2
 800e24e:	d030      	beq.n	800e2b2 <HAL_UART_IRQHandler+0x3e2>
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	4a7f      	ldr	r2, [pc, #508]	; (800e458 <HAL_UART_IRQHandler+0x588>)
 800e25a:	4293      	cmp	r3, r2
 800e25c:	d029      	beq.n	800e2b2 <HAL_UART_IRQHandler+0x3e2>
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e264:	681b      	ldr	r3, [r3, #0]
 800e266:	4a7d      	ldr	r2, [pc, #500]	; (800e45c <HAL_UART_IRQHandler+0x58c>)
 800e268:	4293      	cmp	r3, r2
 800e26a:	d022      	beq.n	800e2b2 <HAL_UART_IRQHandler+0x3e2>
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e272:	681b      	ldr	r3, [r3, #0]
 800e274:	4a7a      	ldr	r2, [pc, #488]	; (800e460 <HAL_UART_IRQHandler+0x590>)
 800e276:	4293      	cmp	r3, r2
 800e278:	d01b      	beq.n	800e2b2 <HAL_UART_IRQHandler+0x3e2>
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e280:	681b      	ldr	r3, [r3, #0]
 800e282:	4a78      	ldr	r2, [pc, #480]	; (800e464 <HAL_UART_IRQHandler+0x594>)
 800e284:	4293      	cmp	r3, r2
 800e286:	d014      	beq.n	800e2b2 <HAL_UART_IRQHandler+0x3e2>
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e28e:	681b      	ldr	r3, [r3, #0]
 800e290:	4a75      	ldr	r2, [pc, #468]	; (800e468 <HAL_UART_IRQHandler+0x598>)
 800e292:	4293      	cmp	r3, r2
 800e294:	d00d      	beq.n	800e2b2 <HAL_UART_IRQHandler+0x3e2>
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e29c:	681b      	ldr	r3, [r3, #0]
 800e29e:	4a73      	ldr	r2, [pc, #460]	; (800e46c <HAL_UART_IRQHandler+0x59c>)
 800e2a0:	4293      	cmp	r3, r2
 800e2a2:	d006      	beq.n	800e2b2 <HAL_UART_IRQHandler+0x3e2>
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e2aa:	681b      	ldr	r3, [r3, #0]
 800e2ac:	4a70      	ldr	r2, [pc, #448]	; (800e470 <HAL_UART_IRQHandler+0x5a0>)
 800e2ae:	4293      	cmp	r3, r2
 800e2b0:	d106      	bne.n	800e2c0 <HAL_UART_IRQHandler+0x3f0>
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	685b      	ldr	r3, [r3, #4]
 800e2bc:	b29b      	uxth	r3, r3
 800e2be:	e005      	b.n	800e2cc <HAL_UART_IRQHandler+0x3fc>
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e2c6:	681b      	ldr	r3, [r3, #0]
 800e2c8:	685b      	ldr	r3, [r3, #4]
 800e2ca:	b29b      	uxth	r3, r3
 800e2cc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800e2d0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	f000 81ab 	beq.w	800e630 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e2e0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e2e4:	429a      	cmp	r2, r3
 800e2e6:	f080 81a3 	bcs.w	800e630 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e2f0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e2fa:	69db      	ldr	r3, [r3, #28]
 800e2fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e300:	f000 8087 	beq.w	800e412 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	681b      	ldr	r3, [r3, #0]
 800e308:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e30c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e310:	e853 3f00 	ldrex	r3, [r3]
 800e314:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800e318:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e31c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e320:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	681b      	ldr	r3, [r3, #0]
 800e328:	461a      	mov	r2, r3
 800e32a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800e32e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800e332:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e336:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800e33a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800e33e:	e841 2300 	strex	r3, r2, [r1]
 800e342:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800e346:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	d1da      	bne.n	800e304 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	681b      	ldr	r3, [r3, #0]
 800e352:	3308      	adds	r3, #8
 800e354:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e356:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e358:	e853 3f00 	ldrex	r3, [r3]
 800e35c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800e35e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e360:	f023 0301 	bic.w	r3, r3, #1
 800e364:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	681b      	ldr	r3, [r3, #0]
 800e36c:	3308      	adds	r3, #8
 800e36e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800e372:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800e376:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e378:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800e37a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800e37e:	e841 2300 	strex	r3, r2, [r1]
 800e382:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800e384:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e386:	2b00      	cmp	r3, #0
 800e388:	d1e1      	bne.n	800e34e <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	681b      	ldr	r3, [r3, #0]
 800e38e:	3308      	adds	r3, #8
 800e390:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e392:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e394:	e853 3f00 	ldrex	r3, [r3]
 800e398:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800e39a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e39c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e3a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	681b      	ldr	r3, [r3, #0]
 800e3a8:	3308      	adds	r3, #8
 800e3aa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800e3ae:	66fa      	str	r2, [r7, #108]	; 0x6c
 800e3b0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e3b2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800e3b4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e3b6:	e841 2300 	strex	r3, r2, [r1]
 800e3ba:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800e3bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	d1e3      	bne.n	800e38a <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	2220      	movs	r2, #32
 800e3c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	2200      	movs	r2, #0
 800e3ce:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	681b      	ldr	r3, [r3, #0]
 800e3d4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e3d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e3d8:	e853 3f00 	ldrex	r3, [r3]
 800e3dc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800e3de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e3e0:	f023 0310 	bic.w	r3, r3, #16
 800e3e4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	681b      	ldr	r3, [r3, #0]
 800e3ec:	461a      	mov	r2, r3
 800e3ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e3f2:	65bb      	str	r3, [r7, #88]	; 0x58
 800e3f4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e3f6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e3f8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e3fa:	e841 2300 	strex	r3, r2, [r1]
 800e3fe:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800e400:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e402:	2b00      	cmp	r3, #0
 800e404:	d1e4      	bne.n	800e3d0 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e40c:	4618      	mov	r0, r3
 800e40e:	f7f6 fb2d 	bl	8004a6c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	2202      	movs	r2, #2
 800e416:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e424:	b29b      	uxth	r3, r3
 800e426:	1ad3      	subs	r3, r2, r3
 800e428:	b29b      	uxth	r3, r3
 800e42a:	4619      	mov	r1, r3
 800e42c:	6878      	ldr	r0, [r7, #4]
 800e42e:	f000 f91d 	bl	800e66c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e432:	e0fd      	b.n	800e630 <HAL_UART_IRQHandler+0x760>
 800e434:	40020010 	.word	0x40020010
 800e438:	40020028 	.word	0x40020028
 800e43c:	40020040 	.word	0x40020040
 800e440:	40020058 	.word	0x40020058
 800e444:	40020070 	.word	0x40020070
 800e448:	40020088 	.word	0x40020088
 800e44c:	400200a0 	.word	0x400200a0
 800e450:	400200b8 	.word	0x400200b8
 800e454:	40020410 	.word	0x40020410
 800e458:	40020428 	.word	0x40020428
 800e45c:	40020440 	.word	0x40020440
 800e460:	40020458 	.word	0x40020458
 800e464:	40020470 	.word	0x40020470
 800e468:	40020488 	.word	0x40020488
 800e46c:	400204a0 	.word	0x400204a0
 800e470:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e480:	b29b      	uxth	r3, r3
 800e482:	1ad3      	subs	r3, r2, r3
 800e484:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e48e:	b29b      	uxth	r3, r3
 800e490:	2b00      	cmp	r3, #0
 800e492:	f000 80cf 	beq.w	800e634 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800e496:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	f000 80ca 	beq.w	800e634 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	681b      	ldr	r3, [r3, #0]
 800e4a4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4a8:	e853 3f00 	ldrex	r3, [r3]
 800e4ac:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e4ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e4b0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e4b4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	681b      	ldr	r3, [r3, #0]
 800e4bc:	461a      	mov	r2, r3
 800e4be:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e4c2:	647b      	str	r3, [r7, #68]	; 0x44
 800e4c4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4c6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e4c8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e4ca:	e841 2300 	strex	r3, r2, [r1]
 800e4ce:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e4d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	d1e4      	bne.n	800e4a0 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	681b      	ldr	r3, [r3, #0]
 800e4da:	3308      	adds	r3, #8
 800e4dc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4e0:	e853 3f00 	ldrex	r3, [r3]
 800e4e4:	623b      	str	r3, [r7, #32]
   return(result);
 800e4e6:	6a3a      	ldr	r2, [r7, #32]
 800e4e8:	4b55      	ldr	r3, [pc, #340]	; (800e640 <HAL_UART_IRQHandler+0x770>)
 800e4ea:	4013      	ands	r3, r2
 800e4ec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	681b      	ldr	r3, [r3, #0]
 800e4f4:	3308      	adds	r3, #8
 800e4f6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800e4fa:	633a      	str	r2, [r7, #48]	; 0x30
 800e4fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e500:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e502:	e841 2300 	strex	r3, r2, [r1]
 800e506:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	d1e3      	bne.n	800e4d6 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	2220      	movs	r2, #32
 800e512:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	2200      	movs	r2, #0
 800e51a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	2200      	movs	r2, #0
 800e520:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	681b      	ldr	r3, [r3, #0]
 800e526:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e528:	693b      	ldr	r3, [r7, #16]
 800e52a:	e853 3f00 	ldrex	r3, [r3]
 800e52e:	60fb      	str	r3, [r7, #12]
   return(result);
 800e530:	68fb      	ldr	r3, [r7, #12]
 800e532:	f023 0310 	bic.w	r3, r3, #16
 800e536:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	681b      	ldr	r3, [r3, #0]
 800e53e:	461a      	mov	r2, r3
 800e540:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800e544:	61fb      	str	r3, [r7, #28]
 800e546:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e548:	69b9      	ldr	r1, [r7, #24]
 800e54a:	69fa      	ldr	r2, [r7, #28]
 800e54c:	e841 2300 	strex	r3, r2, [r1]
 800e550:	617b      	str	r3, [r7, #20]
   return(result);
 800e552:	697b      	ldr	r3, [r7, #20]
 800e554:	2b00      	cmp	r3, #0
 800e556:	d1e4      	bne.n	800e522 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	2202      	movs	r2, #2
 800e55c:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800e55e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e562:	4619      	mov	r1, r3
 800e564:	6878      	ldr	r0, [r7, #4]
 800e566:	f000 f881 	bl	800e66c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e56a:	e063      	b.n	800e634 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800e56c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e570:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e574:	2b00      	cmp	r3, #0
 800e576:	d00e      	beq.n	800e596 <HAL_UART_IRQHandler+0x6c6>
 800e578:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e57c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e580:	2b00      	cmp	r3, #0
 800e582:	d008      	beq.n	800e596 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	681b      	ldr	r3, [r3, #0]
 800e588:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800e58c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800e58e:	6878      	ldr	r0, [r7, #4]
 800e590:	f002 f81c 	bl	80105cc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e594:	e051      	b.n	800e63a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800e596:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e59a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	d014      	beq.n	800e5cc <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800e5a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e5a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	d105      	bne.n	800e5ba <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800e5ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e5b2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	d008      	beq.n	800e5cc <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	d03a      	beq.n	800e638 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e5c6:	6878      	ldr	r0, [r7, #4]
 800e5c8:	4798      	blx	r3
    }
    return;
 800e5ca:	e035      	b.n	800e638 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800e5cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e5d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e5d4:	2b00      	cmp	r3, #0
 800e5d6:	d009      	beq.n	800e5ec <HAL_UART_IRQHandler+0x71c>
 800e5d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e5dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e5e0:	2b00      	cmp	r3, #0
 800e5e2:	d003      	beq.n	800e5ec <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800e5e4:	6878      	ldr	r0, [r7, #4]
 800e5e6:	f001 faa9 	bl	800fb3c <UART_EndTransmit_IT>
    return;
 800e5ea:	e026      	b.n	800e63a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800e5ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e5f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d009      	beq.n	800e60c <HAL_UART_IRQHandler+0x73c>
 800e5f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e5fc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e600:	2b00      	cmp	r3, #0
 800e602:	d003      	beq.n	800e60c <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800e604:	6878      	ldr	r0, [r7, #4]
 800e606:	f001 fff5 	bl	80105f4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e60a:	e016      	b.n	800e63a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800e60c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e610:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e614:	2b00      	cmp	r3, #0
 800e616:	d010      	beq.n	800e63a <HAL_UART_IRQHandler+0x76a>
 800e618:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	da0c      	bge.n	800e63a <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800e620:	6878      	ldr	r0, [r7, #4]
 800e622:	f001 ffdd 	bl	80105e0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e626:	e008      	b.n	800e63a <HAL_UART_IRQHandler+0x76a>
      return;
 800e628:	bf00      	nop
 800e62a:	e006      	b.n	800e63a <HAL_UART_IRQHandler+0x76a>
    return;
 800e62c:	bf00      	nop
 800e62e:	e004      	b.n	800e63a <HAL_UART_IRQHandler+0x76a>
      return;
 800e630:	bf00      	nop
 800e632:	e002      	b.n	800e63a <HAL_UART_IRQHandler+0x76a>
      return;
 800e634:	bf00      	nop
 800e636:	e000      	b.n	800e63a <HAL_UART_IRQHandler+0x76a>
    return;
 800e638:	bf00      	nop
  }
}
 800e63a:	37e8      	adds	r7, #232	; 0xe8
 800e63c:	46bd      	mov	sp, r7
 800e63e:	bd80      	pop	{r7, pc}
 800e640:	effffffe 	.word	0xeffffffe

0800e644 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800e644:	b480      	push	{r7}
 800e646:	b083      	sub	sp, #12
 800e648:	af00      	add	r7, sp, #0
 800e64a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800e64c:	bf00      	nop
 800e64e:	370c      	adds	r7, #12
 800e650:	46bd      	mov	sp, r7
 800e652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e656:	4770      	bx	lr

0800e658 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800e658:	b480      	push	{r7}
 800e65a:	b083      	sub	sp, #12
 800e65c:	af00      	add	r7, sp, #0
 800e65e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800e660:	bf00      	nop
 800e662:	370c      	adds	r7, #12
 800e664:	46bd      	mov	sp, r7
 800e666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e66a:	4770      	bx	lr

0800e66c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800e66c:	b480      	push	{r7}
 800e66e:	b083      	sub	sp, #12
 800e670:	af00      	add	r7, sp, #0
 800e672:	6078      	str	r0, [r7, #4]
 800e674:	460b      	mov	r3, r1
 800e676:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800e678:	bf00      	nop
 800e67a:	370c      	adds	r7, #12
 800e67c:	46bd      	mov	sp, r7
 800e67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e682:	4770      	bx	lr

0800e684 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e684:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e688:	b092      	sub	sp, #72	; 0x48
 800e68a:	af00      	add	r7, sp, #0
 800e68c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e68e:	2300      	movs	r3, #0
 800e690:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e694:	697b      	ldr	r3, [r7, #20]
 800e696:	689a      	ldr	r2, [r3, #8]
 800e698:	697b      	ldr	r3, [r7, #20]
 800e69a:	691b      	ldr	r3, [r3, #16]
 800e69c:	431a      	orrs	r2, r3
 800e69e:	697b      	ldr	r3, [r7, #20]
 800e6a0:	695b      	ldr	r3, [r3, #20]
 800e6a2:	431a      	orrs	r2, r3
 800e6a4:	697b      	ldr	r3, [r7, #20]
 800e6a6:	69db      	ldr	r3, [r3, #28]
 800e6a8:	4313      	orrs	r3, r2
 800e6aa:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e6ac:	697b      	ldr	r3, [r7, #20]
 800e6ae:	681b      	ldr	r3, [r3, #0]
 800e6b0:	681a      	ldr	r2, [r3, #0]
 800e6b2:	4bbe      	ldr	r3, [pc, #760]	; (800e9ac <UART_SetConfig+0x328>)
 800e6b4:	4013      	ands	r3, r2
 800e6b6:	697a      	ldr	r2, [r7, #20]
 800e6b8:	6812      	ldr	r2, [r2, #0]
 800e6ba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e6bc:	430b      	orrs	r3, r1
 800e6be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e6c0:	697b      	ldr	r3, [r7, #20]
 800e6c2:	681b      	ldr	r3, [r3, #0]
 800e6c4:	685b      	ldr	r3, [r3, #4]
 800e6c6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e6ca:	697b      	ldr	r3, [r7, #20]
 800e6cc:	68da      	ldr	r2, [r3, #12]
 800e6ce:	697b      	ldr	r3, [r7, #20]
 800e6d0:	681b      	ldr	r3, [r3, #0]
 800e6d2:	430a      	orrs	r2, r1
 800e6d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e6d6:	697b      	ldr	r3, [r7, #20]
 800e6d8:	699b      	ldr	r3, [r3, #24]
 800e6da:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800e6dc:	697b      	ldr	r3, [r7, #20]
 800e6de:	681b      	ldr	r3, [r3, #0]
 800e6e0:	4ab3      	ldr	r2, [pc, #716]	; (800e9b0 <UART_SetConfig+0x32c>)
 800e6e2:	4293      	cmp	r3, r2
 800e6e4:	d004      	beq.n	800e6f0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800e6e6:	697b      	ldr	r3, [r7, #20]
 800e6e8:	6a1b      	ldr	r3, [r3, #32]
 800e6ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e6ec:	4313      	orrs	r3, r2
 800e6ee:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e6f0:	697b      	ldr	r3, [r7, #20]
 800e6f2:	681b      	ldr	r3, [r3, #0]
 800e6f4:	689a      	ldr	r2, [r3, #8]
 800e6f6:	4baf      	ldr	r3, [pc, #700]	; (800e9b4 <UART_SetConfig+0x330>)
 800e6f8:	4013      	ands	r3, r2
 800e6fa:	697a      	ldr	r2, [r7, #20]
 800e6fc:	6812      	ldr	r2, [r2, #0]
 800e6fe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e700:	430b      	orrs	r3, r1
 800e702:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800e704:	697b      	ldr	r3, [r7, #20]
 800e706:	681b      	ldr	r3, [r3, #0]
 800e708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e70a:	f023 010f 	bic.w	r1, r3, #15
 800e70e:	697b      	ldr	r3, [r7, #20]
 800e710:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e712:	697b      	ldr	r3, [r7, #20]
 800e714:	681b      	ldr	r3, [r3, #0]
 800e716:	430a      	orrs	r2, r1
 800e718:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e71a:	697b      	ldr	r3, [r7, #20]
 800e71c:	681b      	ldr	r3, [r3, #0]
 800e71e:	4aa6      	ldr	r2, [pc, #664]	; (800e9b8 <UART_SetConfig+0x334>)
 800e720:	4293      	cmp	r3, r2
 800e722:	d177      	bne.n	800e814 <UART_SetConfig+0x190>
 800e724:	4ba5      	ldr	r3, [pc, #660]	; (800e9bc <UART_SetConfig+0x338>)
 800e726:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e728:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e72c:	2b28      	cmp	r3, #40	; 0x28
 800e72e:	d86d      	bhi.n	800e80c <UART_SetConfig+0x188>
 800e730:	a201      	add	r2, pc, #4	; (adr r2, 800e738 <UART_SetConfig+0xb4>)
 800e732:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e736:	bf00      	nop
 800e738:	0800e7dd 	.word	0x0800e7dd
 800e73c:	0800e80d 	.word	0x0800e80d
 800e740:	0800e80d 	.word	0x0800e80d
 800e744:	0800e80d 	.word	0x0800e80d
 800e748:	0800e80d 	.word	0x0800e80d
 800e74c:	0800e80d 	.word	0x0800e80d
 800e750:	0800e80d 	.word	0x0800e80d
 800e754:	0800e80d 	.word	0x0800e80d
 800e758:	0800e7e5 	.word	0x0800e7e5
 800e75c:	0800e80d 	.word	0x0800e80d
 800e760:	0800e80d 	.word	0x0800e80d
 800e764:	0800e80d 	.word	0x0800e80d
 800e768:	0800e80d 	.word	0x0800e80d
 800e76c:	0800e80d 	.word	0x0800e80d
 800e770:	0800e80d 	.word	0x0800e80d
 800e774:	0800e80d 	.word	0x0800e80d
 800e778:	0800e7ed 	.word	0x0800e7ed
 800e77c:	0800e80d 	.word	0x0800e80d
 800e780:	0800e80d 	.word	0x0800e80d
 800e784:	0800e80d 	.word	0x0800e80d
 800e788:	0800e80d 	.word	0x0800e80d
 800e78c:	0800e80d 	.word	0x0800e80d
 800e790:	0800e80d 	.word	0x0800e80d
 800e794:	0800e80d 	.word	0x0800e80d
 800e798:	0800e7f5 	.word	0x0800e7f5
 800e79c:	0800e80d 	.word	0x0800e80d
 800e7a0:	0800e80d 	.word	0x0800e80d
 800e7a4:	0800e80d 	.word	0x0800e80d
 800e7a8:	0800e80d 	.word	0x0800e80d
 800e7ac:	0800e80d 	.word	0x0800e80d
 800e7b0:	0800e80d 	.word	0x0800e80d
 800e7b4:	0800e80d 	.word	0x0800e80d
 800e7b8:	0800e7fd 	.word	0x0800e7fd
 800e7bc:	0800e80d 	.word	0x0800e80d
 800e7c0:	0800e80d 	.word	0x0800e80d
 800e7c4:	0800e80d 	.word	0x0800e80d
 800e7c8:	0800e80d 	.word	0x0800e80d
 800e7cc:	0800e80d 	.word	0x0800e80d
 800e7d0:	0800e80d 	.word	0x0800e80d
 800e7d4:	0800e80d 	.word	0x0800e80d
 800e7d8:	0800e805 	.word	0x0800e805
 800e7dc:	2301      	movs	r3, #1
 800e7de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e7e2:	e222      	b.n	800ec2a <UART_SetConfig+0x5a6>
 800e7e4:	2304      	movs	r3, #4
 800e7e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e7ea:	e21e      	b.n	800ec2a <UART_SetConfig+0x5a6>
 800e7ec:	2308      	movs	r3, #8
 800e7ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e7f2:	e21a      	b.n	800ec2a <UART_SetConfig+0x5a6>
 800e7f4:	2310      	movs	r3, #16
 800e7f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e7fa:	e216      	b.n	800ec2a <UART_SetConfig+0x5a6>
 800e7fc:	2320      	movs	r3, #32
 800e7fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e802:	e212      	b.n	800ec2a <UART_SetConfig+0x5a6>
 800e804:	2340      	movs	r3, #64	; 0x40
 800e806:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e80a:	e20e      	b.n	800ec2a <UART_SetConfig+0x5a6>
 800e80c:	2380      	movs	r3, #128	; 0x80
 800e80e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e812:	e20a      	b.n	800ec2a <UART_SetConfig+0x5a6>
 800e814:	697b      	ldr	r3, [r7, #20]
 800e816:	681b      	ldr	r3, [r3, #0]
 800e818:	4a69      	ldr	r2, [pc, #420]	; (800e9c0 <UART_SetConfig+0x33c>)
 800e81a:	4293      	cmp	r3, r2
 800e81c:	d130      	bne.n	800e880 <UART_SetConfig+0x1fc>
 800e81e:	4b67      	ldr	r3, [pc, #412]	; (800e9bc <UART_SetConfig+0x338>)
 800e820:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e822:	f003 0307 	and.w	r3, r3, #7
 800e826:	2b05      	cmp	r3, #5
 800e828:	d826      	bhi.n	800e878 <UART_SetConfig+0x1f4>
 800e82a:	a201      	add	r2, pc, #4	; (adr r2, 800e830 <UART_SetConfig+0x1ac>)
 800e82c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e830:	0800e849 	.word	0x0800e849
 800e834:	0800e851 	.word	0x0800e851
 800e838:	0800e859 	.word	0x0800e859
 800e83c:	0800e861 	.word	0x0800e861
 800e840:	0800e869 	.word	0x0800e869
 800e844:	0800e871 	.word	0x0800e871
 800e848:	2300      	movs	r3, #0
 800e84a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e84e:	e1ec      	b.n	800ec2a <UART_SetConfig+0x5a6>
 800e850:	2304      	movs	r3, #4
 800e852:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e856:	e1e8      	b.n	800ec2a <UART_SetConfig+0x5a6>
 800e858:	2308      	movs	r3, #8
 800e85a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e85e:	e1e4      	b.n	800ec2a <UART_SetConfig+0x5a6>
 800e860:	2310      	movs	r3, #16
 800e862:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e866:	e1e0      	b.n	800ec2a <UART_SetConfig+0x5a6>
 800e868:	2320      	movs	r3, #32
 800e86a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e86e:	e1dc      	b.n	800ec2a <UART_SetConfig+0x5a6>
 800e870:	2340      	movs	r3, #64	; 0x40
 800e872:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e876:	e1d8      	b.n	800ec2a <UART_SetConfig+0x5a6>
 800e878:	2380      	movs	r3, #128	; 0x80
 800e87a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e87e:	e1d4      	b.n	800ec2a <UART_SetConfig+0x5a6>
 800e880:	697b      	ldr	r3, [r7, #20]
 800e882:	681b      	ldr	r3, [r3, #0]
 800e884:	4a4f      	ldr	r2, [pc, #316]	; (800e9c4 <UART_SetConfig+0x340>)
 800e886:	4293      	cmp	r3, r2
 800e888:	d130      	bne.n	800e8ec <UART_SetConfig+0x268>
 800e88a:	4b4c      	ldr	r3, [pc, #304]	; (800e9bc <UART_SetConfig+0x338>)
 800e88c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e88e:	f003 0307 	and.w	r3, r3, #7
 800e892:	2b05      	cmp	r3, #5
 800e894:	d826      	bhi.n	800e8e4 <UART_SetConfig+0x260>
 800e896:	a201      	add	r2, pc, #4	; (adr r2, 800e89c <UART_SetConfig+0x218>)
 800e898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e89c:	0800e8b5 	.word	0x0800e8b5
 800e8a0:	0800e8bd 	.word	0x0800e8bd
 800e8a4:	0800e8c5 	.word	0x0800e8c5
 800e8a8:	0800e8cd 	.word	0x0800e8cd
 800e8ac:	0800e8d5 	.word	0x0800e8d5
 800e8b0:	0800e8dd 	.word	0x0800e8dd
 800e8b4:	2300      	movs	r3, #0
 800e8b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e8ba:	e1b6      	b.n	800ec2a <UART_SetConfig+0x5a6>
 800e8bc:	2304      	movs	r3, #4
 800e8be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e8c2:	e1b2      	b.n	800ec2a <UART_SetConfig+0x5a6>
 800e8c4:	2308      	movs	r3, #8
 800e8c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e8ca:	e1ae      	b.n	800ec2a <UART_SetConfig+0x5a6>
 800e8cc:	2310      	movs	r3, #16
 800e8ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e8d2:	e1aa      	b.n	800ec2a <UART_SetConfig+0x5a6>
 800e8d4:	2320      	movs	r3, #32
 800e8d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e8da:	e1a6      	b.n	800ec2a <UART_SetConfig+0x5a6>
 800e8dc:	2340      	movs	r3, #64	; 0x40
 800e8de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e8e2:	e1a2      	b.n	800ec2a <UART_SetConfig+0x5a6>
 800e8e4:	2380      	movs	r3, #128	; 0x80
 800e8e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e8ea:	e19e      	b.n	800ec2a <UART_SetConfig+0x5a6>
 800e8ec:	697b      	ldr	r3, [r7, #20]
 800e8ee:	681b      	ldr	r3, [r3, #0]
 800e8f0:	4a35      	ldr	r2, [pc, #212]	; (800e9c8 <UART_SetConfig+0x344>)
 800e8f2:	4293      	cmp	r3, r2
 800e8f4:	d130      	bne.n	800e958 <UART_SetConfig+0x2d4>
 800e8f6:	4b31      	ldr	r3, [pc, #196]	; (800e9bc <UART_SetConfig+0x338>)
 800e8f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e8fa:	f003 0307 	and.w	r3, r3, #7
 800e8fe:	2b05      	cmp	r3, #5
 800e900:	d826      	bhi.n	800e950 <UART_SetConfig+0x2cc>
 800e902:	a201      	add	r2, pc, #4	; (adr r2, 800e908 <UART_SetConfig+0x284>)
 800e904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e908:	0800e921 	.word	0x0800e921
 800e90c:	0800e929 	.word	0x0800e929
 800e910:	0800e931 	.word	0x0800e931
 800e914:	0800e939 	.word	0x0800e939
 800e918:	0800e941 	.word	0x0800e941
 800e91c:	0800e949 	.word	0x0800e949
 800e920:	2300      	movs	r3, #0
 800e922:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e926:	e180      	b.n	800ec2a <UART_SetConfig+0x5a6>
 800e928:	2304      	movs	r3, #4
 800e92a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e92e:	e17c      	b.n	800ec2a <UART_SetConfig+0x5a6>
 800e930:	2308      	movs	r3, #8
 800e932:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e936:	e178      	b.n	800ec2a <UART_SetConfig+0x5a6>
 800e938:	2310      	movs	r3, #16
 800e93a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e93e:	e174      	b.n	800ec2a <UART_SetConfig+0x5a6>
 800e940:	2320      	movs	r3, #32
 800e942:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e946:	e170      	b.n	800ec2a <UART_SetConfig+0x5a6>
 800e948:	2340      	movs	r3, #64	; 0x40
 800e94a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e94e:	e16c      	b.n	800ec2a <UART_SetConfig+0x5a6>
 800e950:	2380      	movs	r3, #128	; 0x80
 800e952:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e956:	e168      	b.n	800ec2a <UART_SetConfig+0x5a6>
 800e958:	697b      	ldr	r3, [r7, #20]
 800e95a:	681b      	ldr	r3, [r3, #0]
 800e95c:	4a1b      	ldr	r2, [pc, #108]	; (800e9cc <UART_SetConfig+0x348>)
 800e95e:	4293      	cmp	r3, r2
 800e960:	d142      	bne.n	800e9e8 <UART_SetConfig+0x364>
 800e962:	4b16      	ldr	r3, [pc, #88]	; (800e9bc <UART_SetConfig+0x338>)
 800e964:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e966:	f003 0307 	and.w	r3, r3, #7
 800e96a:	2b05      	cmp	r3, #5
 800e96c:	d838      	bhi.n	800e9e0 <UART_SetConfig+0x35c>
 800e96e:	a201      	add	r2, pc, #4	; (adr r2, 800e974 <UART_SetConfig+0x2f0>)
 800e970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e974:	0800e98d 	.word	0x0800e98d
 800e978:	0800e995 	.word	0x0800e995
 800e97c:	0800e99d 	.word	0x0800e99d
 800e980:	0800e9a5 	.word	0x0800e9a5
 800e984:	0800e9d1 	.word	0x0800e9d1
 800e988:	0800e9d9 	.word	0x0800e9d9
 800e98c:	2300      	movs	r3, #0
 800e98e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e992:	e14a      	b.n	800ec2a <UART_SetConfig+0x5a6>
 800e994:	2304      	movs	r3, #4
 800e996:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e99a:	e146      	b.n	800ec2a <UART_SetConfig+0x5a6>
 800e99c:	2308      	movs	r3, #8
 800e99e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e9a2:	e142      	b.n	800ec2a <UART_SetConfig+0x5a6>
 800e9a4:	2310      	movs	r3, #16
 800e9a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e9aa:	e13e      	b.n	800ec2a <UART_SetConfig+0x5a6>
 800e9ac:	cfff69f3 	.word	0xcfff69f3
 800e9b0:	58000c00 	.word	0x58000c00
 800e9b4:	11fff4ff 	.word	0x11fff4ff
 800e9b8:	40011000 	.word	0x40011000
 800e9bc:	58024400 	.word	0x58024400
 800e9c0:	40004400 	.word	0x40004400
 800e9c4:	40004800 	.word	0x40004800
 800e9c8:	40004c00 	.word	0x40004c00
 800e9cc:	40005000 	.word	0x40005000
 800e9d0:	2320      	movs	r3, #32
 800e9d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e9d6:	e128      	b.n	800ec2a <UART_SetConfig+0x5a6>
 800e9d8:	2340      	movs	r3, #64	; 0x40
 800e9da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e9de:	e124      	b.n	800ec2a <UART_SetConfig+0x5a6>
 800e9e0:	2380      	movs	r3, #128	; 0x80
 800e9e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e9e6:	e120      	b.n	800ec2a <UART_SetConfig+0x5a6>
 800e9e8:	697b      	ldr	r3, [r7, #20]
 800e9ea:	681b      	ldr	r3, [r3, #0]
 800e9ec:	4acb      	ldr	r2, [pc, #812]	; (800ed1c <UART_SetConfig+0x698>)
 800e9ee:	4293      	cmp	r3, r2
 800e9f0:	d176      	bne.n	800eae0 <UART_SetConfig+0x45c>
 800e9f2:	4bcb      	ldr	r3, [pc, #812]	; (800ed20 <UART_SetConfig+0x69c>)
 800e9f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e9f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e9fa:	2b28      	cmp	r3, #40	; 0x28
 800e9fc:	d86c      	bhi.n	800ead8 <UART_SetConfig+0x454>
 800e9fe:	a201      	add	r2, pc, #4	; (adr r2, 800ea04 <UART_SetConfig+0x380>)
 800ea00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea04:	0800eaa9 	.word	0x0800eaa9
 800ea08:	0800ead9 	.word	0x0800ead9
 800ea0c:	0800ead9 	.word	0x0800ead9
 800ea10:	0800ead9 	.word	0x0800ead9
 800ea14:	0800ead9 	.word	0x0800ead9
 800ea18:	0800ead9 	.word	0x0800ead9
 800ea1c:	0800ead9 	.word	0x0800ead9
 800ea20:	0800ead9 	.word	0x0800ead9
 800ea24:	0800eab1 	.word	0x0800eab1
 800ea28:	0800ead9 	.word	0x0800ead9
 800ea2c:	0800ead9 	.word	0x0800ead9
 800ea30:	0800ead9 	.word	0x0800ead9
 800ea34:	0800ead9 	.word	0x0800ead9
 800ea38:	0800ead9 	.word	0x0800ead9
 800ea3c:	0800ead9 	.word	0x0800ead9
 800ea40:	0800ead9 	.word	0x0800ead9
 800ea44:	0800eab9 	.word	0x0800eab9
 800ea48:	0800ead9 	.word	0x0800ead9
 800ea4c:	0800ead9 	.word	0x0800ead9
 800ea50:	0800ead9 	.word	0x0800ead9
 800ea54:	0800ead9 	.word	0x0800ead9
 800ea58:	0800ead9 	.word	0x0800ead9
 800ea5c:	0800ead9 	.word	0x0800ead9
 800ea60:	0800ead9 	.word	0x0800ead9
 800ea64:	0800eac1 	.word	0x0800eac1
 800ea68:	0800ead9 	.word	0x0800ead9
 800ea6c:	0800ead9 	.word	0x0800ead9
 800ea70:	0800ead9 	.word	0x0800ead9
 800ea74:	0800ead9 	.word	0x0800ead9
 800ea78:	0800ead9 	.word	0x0800ead9
 800ea7c:	0800ead9 	.word	0x0800ead9
 800ea80:	0800ead9 	.word	0x0800ead9
 800ea84:	0800eac9 	.word	0x0800eac9
 800ea88:	0800ead9 	.word	0x0800ead9
 800ea8c:	0800ead9 	.word	0x0800ead9
 800ea90:	0800ead9 	.word	0x0800ead9
 800ea94:	0800ead9 	.word	0x0800ead9
 800ea98:	0800ead9 	.word	0x0800ead9
 800ea9c:	0800ead9 	.word	0x0800ead9
 800eaa0:	0800ead9 	.word	0x0800ead9
 800eaa4:	0800ead1 	.word	0x0800ead1
 800eaa8:	2301      	movs	r3, #1
 800eaaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eaae:	e0bc      	b.n	800ec2a <UART_SetConfig+0x5a6>
 800eab0:	2304      	movs	r3, #4
 800eab2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eab6:	e0b8      	b.n	800ec2a <UART_SetConfig+0x5a6>
 800eab8:	2308      	movs	r3, #8
 800eaba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eabe:	e0b4      	b.n	800ec2a <UART_SetConfig+0x5a6>
 800eac0:	2310      	movs	r3, #16
 800eac2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eac6:	e0b0      	b.n	800ec2a <UART_SetConfig+0x5a6>
 800eac8:	2320      	movs	r3, #32
 800eaca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eace:	e0ac      	b.n	800ec2a <UART_SetConfig+0x5a6>
 800ead0:	2340      	movs	r3, #64	; 0x40
 800ead2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ead6:	e0a8      	b.n	800ec2a <UART_SetConfig+0x5a6>
 800ead8:	2380      	movs	r3, #128	; 0x80
 800eada:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eade:	e0a4      	b.n	800ec2a <UART_SetConfig+0x5a6>
 800eae0:	697b      	ldr	r3, [r7, #20]
 800eae2:	681b      	ldr	r3, [r3, #0]
 800eae4:	4a8f      	ldr	r2, [pc, #572]	; (800ed24 <UART_SetConfig+0x6a0>)
 800eae6:	4293      	cmp	r3, r2
 800eae8:	d130      	bne.n	800eb4c <UART_SetConfig+0x4c8>
 800eaea:	4b8d      	ldr	r3, [pc, #564]	; (800ed20 <UART_SetConfig+0x69c>)
 800eaec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eaee:	f003 0307 	and.w	r3, r3, #7
 800eaf2:	2b05      	cmp	r3, #5
 800eaf4:	d826      	bhi.n	800eb44 <UART_SetConfig+0x4c0>
 800eaf6:	a201      	add	r2, pc, #4	; (adr r2, 800eafc <UART_SetConfig+0x478>)
 800eaf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eafc:	0800eb15 	.word	0x0800eb15
 800eb00:	0800eb1d 	.word	0x0800eb1d
 800eb04:	0800eb25 	.word	0x0800eb25
 800eb08:	0800eb2d 	.word	0x0800eb2d
 800eb0c:	0800eb35 	.word	0x0800eb35
 800eb10:	0800eb3d 	.word	0x0800eb3d
 800eb14:	2300      	movs	r3, #0
 800eb16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb1a:	e086      	b.n	800ec2a <UART_SetConfig+0x5a6>
 800eb1c:	2304      	movs	r3, #4
 800eb1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb22:	e082      	b.n	800ec2a <UART_SetConfig+0x5a6>
 800eb24:	2308      	movs	r3, #8
 800eb26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb2a:	e07e      	b.n	800ec2a <UART_SetConfig+0x5a6>
 800eb2c:	2310      	movs	r3, #16
 800eb2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb32:	e07a      	b.n	800ec2a <UART_SetConfig+0x5a6>
 800eb34:	2320      	movs	r3, #32
 800eb36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb3a:	e076      	b.n	800ec2a <UART_SetConfig+0x5a6>
 800eb3c:	2340      	movs	r3, #64	; 0x40
 800eb3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb42:	e072      	b.n	800ec2a <UART_SetConfig+0x5a6>
 800eb44:	2380      	movs	r3, #128	; 0x80
 800eb46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb4a:	e06e      	b.n	800ec2a <UART_SetConfig+0x5a6>
 800eb4c:	697b      	ldr	r3, [r7, #20]
 800eb4e:	681b      	ldr	r3, [r3, #0]
 800eb50:	4a75      	ldr	r2, [pc, #468]	; (800ed28 <UART_SetConfig+0x6a4>)
 800eb52:	4293      	cmp	r3, r2
 800eb54:	d130      	bne.n	800ebb8 <UART_SetConfig+0x534>
 800eb56:	4b72      	ldr	r3, [pc, #456]	; (800ed20 <UART_SetConfig+0x69c>)
 800eb58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eb5a:	f003 0307 	and.w	r3, r3, #7
 800eb5e:	2b05      	cmp	r3, #5
 800eb60:	d826      	bhi.n	800ebb0 <UART_SetConfig+0x52c>
 800eb62:	a201      	add	r2, pc, #4	; (adr r2, 800eb68 <UART_SetConfig+0x4e4>)
 800eb64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb68:	0800eb81 	.word	0x0800eb81
 800eb6c:	0800eb89 	.word	0x0800eb89
 800eb70:	0800eb91 	.word	0x0800eb91
 800eb74:	0800eb99 	.word	0x0800eb99
 800eb78:	0800eba1 	.word	0x0800eba1
 800eb7c:	0800eba9 	.word	0x0800eba9
 800eb80:	2300      	movs	r3, #0
 800eb82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb86:	e050      	b.n	800ec2a <UART_SetConfig+0x5a6>
 800eb88:	2304      	movs	r3, #4
 800eb8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb8e:	e04c      	b.n	800ec2a <UART_SetConfig+0x5a6>
 800eb90:	2308      	movs	r3, #8
 800eb92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb96:	e048      	b.n	800ec2a <UART_SetConfig+0x5a6>
 800eb98:	2310      	movs	r3, #16
 800eb9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb9e:	e044      	b.n	800ec2a <UART_SetConfig+0x5a6>
 800eba0:	2320      	movs	r3, #32
 800eba2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eba6:	e040      	b.n	800ec2a <UART_SetConfig+0x5a6>
 800eba8:	2340      	movs	r3, #64	; 0x40
 800ebaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ebae:	e03c      	b.n	800ec2a <UART_SetConfig+0x5a6>
 800ebb0:	2380      	movs	r3, #128	; 0x80
 800ebb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ebb6:	e038      	b.n	800ec2a <UART_SetConfig+0x5a6>
 800ebb8:	697b      	ldr	r3, [r7, #20]
 800ebba:	681b      	ldr	r3, [r3, #0]
 800ebbc:	4a5b      	ldr	r2, [pc, #364]	; (800ed2c <UART_SetConfig+0x6a8>)
 800ebbe:	4293      	cmp	r3, r2
 800ebc0:	d130      	bne.n	800ec24 <UART_SetConfig+0x5a0>
 800ebc2:	4b57      	ldr	r3, [pc, #348]	; (800ed20 <UART_SetConfig+0x69c>)
 800ebc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ebc6:	f003 0307 	and.w	r3, r3, #7
 800ebca:	2b05      	cmp	r3, #5
 800ebcc:	d826      	bhi.n	800ec1c <UART_SetConfig+0x598>
 800ebce:	a201      	add	r2, pc, #4	; (adr r2, 800ebd4 <UART_SetConfig+0x550>)
 800ebd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ebd4:	0800ebed 	.word	0x0800ebed
 800ebd8:	0800ebf5 	.word	0x0800ebf5
 800ebdc:	0800ebfd 	.word	0x0800ebfd
 800ebe0:	0800ec05 	.word	0x0800ec05
 800ebe4:	0800ec0d 	.word	0x0800ec0d
 800ebe8:	0800ec15 	.word	0x0800ec15
 800ebec:	2302      	movs	r3, #2
 800ebee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ebf2:	e01a      	b.n	800ec2a <UART_SetConfig+0x5a6>
 800ebf4:	2304      	movs	r3, #4
 800ebf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ebfa:	e016      	b.n	800ec2a <UART_SetConfig+0x5a6>
 800ebfc:	2308      	movs	r3, #8
 800ebfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec02:	e012      	b.n	800ec2a <UART_SetConfig+0x5a6>
 800ec04:	2310      	movs	r3, #16
 800ec06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec0a:	e00e      	b.n	800ec2a <UART_SetConfig+0x5a6>
 800ec0c:	2320      	movs	r3, #32
 800ec0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec12:	e00a      	b.n	800ec2a <UART_SetConfig+0x5a6>
 800ec14:	2340      	movs	r3, #64	; 0x40
 800ec16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec1a:	e006      	b.n	800ec2a <UART_SetConfig+0x5a6>
 800ec1c:	2380      	movs	r3, #128	; 0x80
 800ec1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec22:	e002      	b.n	800ec2a <UART_SetConfig+0x5a6>
 800ec24:	2380      	movs	r3, #128	; 0x80
 800ec26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ec2a:	697b      	ldr	r3, [r7, #20]
 800ec2c:	681b      	ldr	r3, [r3, #0]
 800ec2e:	4a3f      	ldr	r2, [pc, #252]	; (800ed2c <UART_SetConfig+0x6a8>)
 800ec30:	4293      	cmp	r3, r2
 800ec32:	f040 80f8 	bne.w	800ee26 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ec36:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ec3a:	2b20      	cmp	r3, #32
 800ec3c:	dc46      	bgt.n	800eccc <UART_SetConfig+0x648>
 800ec3e:	2b02      	cmp	r3, #2
 800ec40:	f2c0 8082 	blt.w	800ed48 <UART_SetConfig+0x6c4>
 800ec44:	3b02      	subs	r3, #2
 800ec46:	2b1e      	cmp	r3, #30
 800ec48:	d87e      	bhi.n	800ed48 <UART_SetConfig+0x6c4>
 800ec4a:	a201      	add	r2, pc, #4	; (adr r2, 800ec50 <UART_SetConfig+0x5cc>)
 800ec4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec50:	0800ecd3 	.word	0x0800ecd3
 800ec54:	0800ed49 	.word	0x0800ed49
 800ec58:	0800ecdb 	.word	0x0800ecdb
 800ec5c:	0800ed49 	.word	0x0800ed49
 800ec60:	0800ed49 	.word	0x0800ed49
 800ec64:	0800ed49 	.word	0x0800ed49
 800ec68:	0800eceb 	.word	0x0800eceb
 800ec6c:	0800ed49 	.word	0x0800ed49
 800ec70:	0800ed49 	.word	0x0800ed49
 800ec74:	0800ed49 	.word	0x0800ed49
 800ec78:	0800ed49 	.word	0x0800ed49
 800ec7c:	0800ed49 	.word	0x0800ed49
 800ec80:	0800ed49 	.word	0x0800ed49
 800ec84:	0800ed49 	.word	0x0800ed49
 800ec88:	0800ecfb 	.word	0x0800ecfb
 800ec8c:	0800ed49 	.word	0x0800ed49
 800ec90:	0800ed49 	.word	0x0800ed49
 800ec94:	0800ed49 	.word	0x0800ed49
 800ec98:	0800ed49 	.word	0x0800ed49
 800ec9c:	0800ed49 	.word	0x0800ed49
 800eca0:	0800ed49 	.word	0x0800ed49
 800eca4:	0800ed49 	.word	0x0800ed49
 800eca8:	0800ed49 	.word	0x0800ed49
 800ecac:	0800ed49 	.word	0x0800ed49
 800ecb0:	0800ed49 	.word	0x0800ed49
 800ecb4:	0800ed49 	.word	0x0800ed49
 800ecb8:	0800ed49 	.word	0x0800ed49
 800ecbc:	0800ed49 	.word	0x0800ed49
 800ecc0:	0800ed49 	.word	0x0800ed49
 800ecc4:	0800ed49 	.word	0x0800ed49
 800ecc8:	0800ed3b 	.word	0x0800ed3b
 800eccc:	2b40      	cmp	r3, #64	; 0x40
 800ecce:	d037      	beq.n	800ed40 <UART_SetConfig+0x6bc>
 800ecd0:	e03a      	b.n	800ed48 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800ecd2:	f7fc fa49 	bl	800b168 <HAL_RCCEx_GetD3PCLK1Freq>
 800ecd6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ecd8:	e03c      	b.n	800ed54 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ecda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ecde:	4618      	mov	r0, r3
 800ece0:	f7fc fa58 	bl	800b194 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ece4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ece6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ece8:	e034      	b.n	800ed54 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ecea:	f107 0318 	add.w	r3, r7, #24
 800ecee:	4618      	mov	r0, r3
 800ecf0:	f7fc fba4 	bl	800b43c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ecf4:	69fb      	ldr	r3, [r7, #28]
 800ecf6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ecf8:	e02c      	b.n	800ed54 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ecfa:	4b09      	ldr	r3, [pc, #36]	; (800ed20 <UART_SetConfig+0x69c>)
 800ecfc:	681b      	ldr	r3, [r3, #0]
 800ecfe:	f003 0320 	and.w	r3, r3, #32
 800ed02:	2b00      	cmp	r3, #0
 800ed04:	d016      	beq.n	800ed34 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ed06:	4b06      	ldr	r3, [pc, #24]	; (800ed20 <UART_SetConfig+0x69c>)
 800ed08:	681b      	ldr	r3, [r3, #0]
 800ed0a:	08db      	lsrs	r3, r3, #3
 800ed0c:	f003 0303 	and.w	r3, r3, #3
 800ed10:	4a07      	ldr	r2, [pc, #28]	; (800ed30 <UART_SetConfig+0x6ac>)
 800ed12:	fa22 f303 	lsr.w	r3, r2, r3
 800ed16:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ed18:	e01c      	b.n	800ed54 <UART_SetConfig+0x6d0>
 800ed1a:	bf00      	nop
 800ed1c:	40011400 	.word	0x40011400
 800ed20:	58024400 	.word	0x58024400
 800ed24:	40007800 	.word	0x40007800
 800ed28:	40007c00 	.word	0x40007c00
 800ed2c:	58000c00 	.word	0x58000c00
 800ed30:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800ed34:	4b9d      	ldr	r3, [pc, #628]	; (800efac <UART_SetConfig+0x928>)
 800ed36:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ed38:	e00c      	b.n	800ed54 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ed3a:	4b9d      	ldr	r3, [pc, #628]	; (800efb0 <UART_SetConfig+0x92c>)
 800ed3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ed3e:	e009      	b.n	800ed54 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ed40:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ed44:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ed46:	e005      	b.n	800ed54 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800ed48:	2300      	movs	r3, #0
 800ed4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800ed4c:	2301      	movs	r3, #1
 800ed4e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800ed52:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ed54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ed56:	2b00      	cmp	r3, #0
 800ed58:	f000 81de 	beq.w	800f118 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ed5c:	697b      	ldr	r3, [r7, #20]
 800ed5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed60:	4a94      	ldr	r2, [pc, #592]	; (800efb4 <UART_SetConfig+0x930>)
 800ed62:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ed66:	461a      	mov	r2, r3
 800ed68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ed6a:	fbb3 f3f2 	udiv	r3, r3, r2
 800ed6e:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ed70:	697b      	ldr	r3, [r7, #20]
 800ed72:	685a      	ldr	r2, [r3, #4]
 800ed74:	4613      	mov	r3, r2
 800ed76:	005b      	lsls	r3, r3, #1
 800ed78:	4413      	add	r3, r2
 800ed7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ed7c:	429a      	cmp	r2, r3
 800ed7e:	d305      	bcc.n	800ed8c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ed80:	697b      	ldr	r3, [r7, #20]
 800ed82:	685b      	ldr	r3, [r3, #4]
 800ed84:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ed86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ed88:	429a      	cmp	r2, r3
 800ed8a:	d903      	bls.n	800ed94 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800ed8c:	2301      	movs	r3, #1
 800ed8e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800ed92:	e1c1      	b.n	800f118 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ed94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ed96:	2200      	movs	r2, #0
 800ed98:	60bb      	str	r3, [r7, #8]
 800ed9a:	60fa      	str	r2, [r7, #12]
 800ed9c:	697b      	ldr	r3, [r7, #20]
 800ed9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eda0:	4a84      	ldr	r2, [pc, #528]	; (800efb4 <UART_SetConfig+0x930>)
 800eda2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800eda6:	b29b      	uxth	r3, r3
 800eda8:	2200      	movs	r2, #0
 800edaa:	603b      	str	r3, [r7, #0]
 800edac:	607a      	str	r2, [r7, #4]
 800edae:	e9d7 2300 	ldrd	r2, r3, [r7]
 800edb2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800edb6:	f7f1 fc13 	bl	80005e0 <__aeabi_uldivmod>
 800edba:	4602      	mov	r2, r0
 800edbc:	460b      	mov	r3, r1
 800edbe:	4610      	mov	r0, r2
 800edc0:	4619      	mov	r1, r3
 800edc2:	f04f 0200 	mov.w	r2, #0
 800edc6:	f04f 0300 	mov.w	r3, #0
 800edca:	020b      	lsls	r3, r1, #8
 800edcc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800edd0:	0202      	lsls	r2, r0, #8
 800edd2:	6979      	ldr	r1, [r7, #20]
 800edd4:	6849      	ldr	r1, [r1, #4]
 800edd6:	0849      	lsrs	r1, r1, #1
 800edd8:	2000      	movs	r0, #0
 800edda:	460c      	mov	r4, r1
 800eddc:	4605      	mov	r5, r0
 800edde:	eb12 0804 	adds.w	r8, r2, r4
 800ede2:	eb43 0905 	adc.w	r9, r3, r5
 800ede6:	697b      	ldr	r3, [r7, #20]
 800ede8:	685b      	ldr	r3, [r3, #4]
 800edea:	2200      	movs	r2, #0
 800edec:	469a      	mov	sl, r3
 800edee:	4693      	mov	fp, r2
 800edf0:	4652      	mov	r2, sl
 800edf2:	465b      	mov	r3, fp
 800edf4:	4640      	mov	r0, r8
 800edf6:	4649      	mov	r1, r9
 800edf8:	f7f1 fbf2 	bl	80005e0 <__aeabi_uldivmod>
 800edfc:	4602      	mov	r2, r0
 800edfe:	460b      	mov	r3, r1
 800ee00:	4613      	mov	r3, r2
 800ee02:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ee04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee06:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ee0a:	d308      	bcc.n	800ee1e <UART_SetConfig+0x79a>
 800ee0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ee12:	d204      	bcs.n	800ee1e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800ee14:	697b      	ldr	r3, [r7, #20]
 800ee16:	681b      	ldr	r3, [r3, #0]
 800ee18:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ee1a:	60da      	str	r2, [r3, #12]
 800ee1c:	e17c      	b.n	800f118 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800ee1e:	2301      	movs	r3, #1
 800ee20:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800ee24:	e178      	b.n	800f118 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ee26:	697b      	ldr	r3, [r7, #20]
 800ee28:	69db      	ldr	r3, [r3, #28]
 800ee2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ee2e:	f040 80c5 	bne.w	800efbc <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800ee32:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ee36:	2b20      	cmp	r3, #32
 800ee38:	dc48      	bgt.n	800eecc <UART_SetConfig+0x848>
 800ee3a:	2b00      	cmp	r3, #0
 800ee3c:	db7b      	blt.n	800ef36 <UART_SetConfig+0x8b2>
 800ee3e:	2b20      	cmp	r3, #32
 800ee40:	d879      	bhi.n	800ef36 <UART_SetConfig+0x8b2>
 800ee42:	a201      	add	r2, pc, #4	; (adr r2, 800ee48 <UART_SetConfig+0x7c4>)
 800ee44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee48:	0800eed3 	.word	0x0800eed3
 800ee4c:	0800eedb 	.word	0x0800eedb
 800ee50:	0800ef37 	.word	0x0800ef37
 800ee54:	0800ef37 	.word	0x0800ef37
 800ee58:	0800eee3 	.word	0x0800eee3
 800ee5c:	0800ef37 	.word	0x0800ef37
 800ee60:	0800ef37 	.word	0x0800ef37
 800ee64:	0800ef37 	.word	0x0800ef37
 800ee68:	0800eef3 	.word	0x0800eef3
 800ee6c:	0800ef37 	.word	0x0800ef37
 800ee70:	0800ef37 	.word	0x0800ef37
 800ee74:	0800ef37 	.word	0x0800ef37
 800ee78:	0800ef37 	.word	0x0800ef37
 800ee7c:	0800ef37 	.word	0x0800ef37
 800ee80:	0800ef37 	.word	0x0800ef37
 800ee84:	0800ef37 	.word	0x0800ef37
 800ee88:	0800ef03 	.word	0x0800ef03
 800ee8c:	0800ef37 	.word	0x0800ef37
 800ee90:	0800ef37 	.word	0x0800ef37
 800ee94:	0800ef37 	.word	0x0800ef37
 800ee98:	0800ef37 	.word	0x0800ef37
 800ee9c:	0800ef37 	.word	0x0800ef37
 800eea0:	0800ef37 	.word	0x0800ef37
 800eea4:	0800ef37 	.word	0x0800ef37
 800eea8:	0800ef37 	.word	0x0800ef37
 800eeac:	0800ef37 	.word	0x0800ef37
 800eeb0:	0800ef37 	.word	0x0800ef37
 800eeb4:	0800ef37 	.word	0x0800ef37
 800eeb8:	0800ef37 	.word	0x0800ef37
 800eebc:	0800ef37 	.word	0x0800ef37
 800eec0:	0800ef37 	.word	0x0800ef37
 800eec4:	0800ef37 	.word	0x0800ef37
 800eec8:	0800ef29 	.word	0x0800ef29
 800eecc:	2b40      	cmp	r3, #64	; 0x40
 800eece:	d02e      	beq.n	800ef2e <UART_SetConfig+0x8aa>
 800eed0:	e031      	b.n	800ef36 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800eed2:	f7fa f951 	bl	8009178 <HAL_RCC_GetPCLK1Freq>
 800eed6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800eed8:	e033      	b.n	800ef42 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800eeda:	f7fa f963 	bl	80091a4 <HAL_RCC_GetPCLK2Freq>
 800eede:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800eee0:	e02f      	b.n	800ef42 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800eee2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800eee6:	4618      	mov	r0, r3
 800eee8:	f7fc f954 	bl	800b194 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800eeec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eeee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800eef0:	e027      	b.n	800ef42 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800eef2:	f107 0318 	add.w	r3, r7, #24
 800eef6:	4618      	mov	r0, r3
 800eef8:	f7fc faa0 	bl	800b43c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800eefc:	69fb      	ldr	r3, [r7, #28]
 800eefe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ef00:	e01f      	b.n	800ef42 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ef02:	4b2d      	ldr	r3, [pc, #180]	; (800efb8 <UART_SetConfig+0x934>)
 800ef04:	681b      	ldr	r3, [r3, #0]
 800ef06:	f003 0320 	and.w	r3, r3, #32
 800ef0a:	2b00      	cmp	r3, #0
 800ef0c:	d009      	beq.n	800ef22 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ef0e:	4b2a      	ldr	r3, [pc, #168]	; (800efb8 <UART_SetConfig+0x934>)
 800ef10:	681b      	ldr	r3, [r3, #0]
 800ef12:	08db      	lsrs	r3, r3, #3
 800ef14:	f003 0303 	and.w	r3, r3, #3
 800ef18:	4a24      	ldr	r2, [pc, #144]	; (800efac <UART_SetConfig+0x928>)
 800ef1a:	fa22 f303 	lsr.w	r3, r2, r3
 800ef1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ef20:	e00f      	b.n	800ef42 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800ef22:	4b22      	ldr	r3, [pc, #136]	; (800efac <UART_SetConfig+0x928>)
 800ef24:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ef26:	e00c      	b.n	800ef42 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ef28:	4b21      	ldr	r3, [pc, #132]	; (800efb0 <UART_SetConfig+0x92c>)
 800ef2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ef2c:	e009      	b.n	800ef42 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ef2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ef32:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ef34:	e005      	b.n	800ef42 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800ef36:	2300      	movs	r3, #0
 800ef38:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800ef3a:	2301      	movs	r3, #1
 800ef3c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800ef40:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ef42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	f000 80e7 	beq.w	800f118 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ef4a:	697b      	ldr	r3, [r7, #20]
 800ef4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef4e:	4a19      	ldr	r2, [pc, #100]	; (800efb4 <UART_SetConfig+0x930>)
 800ef50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ef54:	461a      	mov	r2, r3
 800ef56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ef58:	fbb3 f3f2 	udiv	r3, r3, r2
 800ef5c:	005a      	lsls	r2, r3, #1
 800ef5e:	697b      	ldr	r3, [r7, #20]
 800ef60:	685b      	ldr	r3, [r3, #4]
 800ef62:	085b      	lsrs	r3, r3, #1
 800ef64:	441a      	add	r2, r3
 800ef66:	697b      	ldr	r3, [r7, #20]
 800ef68:	685b      	ldr	r3, [r3, #4]
 800ef6a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ef6e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ef70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef72:	2b0f      	cmp	r3, #15
 800ef74:	d916      	bls.n	800efa4 <UART_SetConfig+0x920>
 800ef76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ef7c:	d212      	bcs.n	800efa4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ef7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef80:	b29b      	uxth	r3, r3
 800ef82:	f023 030f 	bic.w	r3, r3, #15
 800ef86:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ef88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef8a:	085b      	lsrs	r3, r3, #1
 800ef8c:	b29b      	uxth	r3, r3
 800ef8e:	f003 0307 	and.w	r3, r3, #7
 800ef92:	b29a      	uxth	r2, r3
 800ef94:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ef96:	4313      	orrs	r3, r2
 800ef98:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800ef9a:	697b      	ldr	r3, [r7, #20]
 800ef9c:	681b      	ldr	r3, [r3, #0]
 800ef9e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800efa0:	60da      	str	r2, [r3, #12]
 800efa2:	e0b9      	b.n	800f118 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800efa4:	2301      	movs	r3, #1
 800efa6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800efaa:	e0b5      	b.n	800f118 <UART_SetConfig+0xa94>
 800efac:	03d09000 	.word	0x03d09000
 800efb0:	003d0900 	.word	0x003d0900
 800efb4:	08020f5c 	.word	0x08020f5c
 800efb8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800efbc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800efc0:	2b20      	cmp	r3, #32
 800efc2:	dc49      	bgt.n	800f058 <UART_SetConfig+0x9d4>
 800efc4:	2b00      	cmp	r3, #0
 800efc6:	db7c      	blt.n	800f0c2 <UART_SetConfig+0xa3e>
 800efc8:	2b20      	cmp	r3, #32
 800efca:	d87a      	bhi.n	800f0c2 <UART_SetConfig+0xa3e>
 800efcc:	a201      	add	r2, pc, #4	; (adr r2, 800efd4 <UART_SetConfig+0x950>)
 800efce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800efd2:	bf00      	nop
 800efd4:	0800f05f 	.word	0x0800f05f
 800efd8:	0800f067 	.word	0x0800f067
 800efdc:	0800f0c3 	.word	0x0800f0c3
 800efe0:	0800f0c3 	.word	0x0800f0c3
 800efe4:	0800f06f 	.word	0x0800f06f
 800efe8:	0800f0c3 	.word	0x0800f0c3
 800efec:	0800f0c3 	.word	0x0800f0c3
 800eff0:	0800f0c3 	.word	0x0800f0c3
 800eff4:	0800f07f 	.word	0x0800f07f
 800eff8:	0800f0c3 	.word	0x0800f0c3
 800effc:	0800f0c3 	.word	0x0800f0c3
 800f000:	0800f0c3 	.word	0x0800f0c3
 800f004:	0800f0c3 	.word	0x0800f0c3
 800f008:	0800f0c3 	.word	0x0800f0c3
 800f00c:	0800f0c3 	.word	0x0800f0c3
 800f010:	0800f0c3 	.word	0x0800f0c3
 800f014:	0800f08f 	.word	0x0800f08f
 800f018:	0800f0c3 	.word	0x0800f0c3
 800f01c:	0800f0c3 	.word	0x0800f0c3
 800f020:	0800f0c3 	.word	0x0800f0c3
 800f024:	0800f0c3 	.word	0x0800f0c3
 800f028:	0800f0c3 	.word	0x0800f0c3
 800f02c:	0800f0c3 	.word	0x0800f0c3
 800f030:	0800f0c3 	.word	0x0800f0c3
 800f034:	0800f0c3 	.word	0x0800f0c3
 800f038:	0800f0c3 	.word	0x0800f0c3
 800f03c:	0800f0c3 	.word	0x0800f0c3
 800f040:	0800f0c3 	.word	0x0800f0c3
 800f044:	0800f0c3 	.word	0x0800f0c3
 800f048:	0800f0c3 	.word	0x0800f0c3
 800f04c:	0800f0c3 	.word	0x0800f0c3
 800f050:	0800f0c3 	.word	0x0800f0c3
 800f054:	0800f0b5 	.word	0x0800f0b5
 800f058:	2b40      	cmp	r3, #64	; 0x40
 800f05a:	d02e      	beq.n	800f0ba <UART_SetConfig+0xa36>
 800f05c:	e031      	b.n	800f0c2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f05e:	f7fa f88b 	bl	8009178 <HAL_RCC_GetPCLK1Freq>
 800f062:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f064:	e033      	b.n	800f0ce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f066:	f7fa f89d 	bl	80091a4 <HAL_RCC_GetPCLK2Freq>
 800f06a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f06c:	e02f      	b.n	800f0ce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f06e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f072:	4618      	mov	r0, r3
 800f074:	f7fc f88e 	bl	800b194 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f07a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f07c:	e027      	b.n	800f0ce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f07e:	f107 0318 	add.w	r3, r7, #24
 800f082:	4618      	mov	r0, r3
 800f084:	f7fc f9da 	bl	800b43c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f088:	69fb      	ldr	r3, [r7, #28]
 800f08a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f08c:	e01f      	b.n	800f0ce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f08e:	4b2d      	ldr	r3, [pc, #180]	; (800f144 <UART_SetConfig+0xac0>)
 800f090:	681b      	ldr	r3, [r3, #0]
 800f092:	f003 0320 	and.w	r3, r3, #32
 800f096:	2b00      	cmp	r3, #0
 800f098:	d009      	beq.n	800f0ae <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f09a:	4b2a      	ldr	r3, [pc, #168]	; (800f144 <UART_SetConfig+0xac0>)
 800f09c:	681b      	ldr	r3, [r3, #0]
 800f09e:	08db      	lsrs	r3, r3, #3
 800f0a0:	f003 0303 	and.w	r3, r3, #3
 800f0a4:	4a28      	ldr	r2, [pc, #160]	; (800f148 <UART_SetConfig+0xac4>)
 800f0a6:	fa22 f303 	lsr.w	r3, r2, r3
 800f0aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f0ac:	e00f      	b.n	800f0ce <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800f0ae:	4b26      	ldr	r3, [pc, #152]	; (800f148 <UART_SetConfig+0xac4>)
 800f0b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f0b2:	e00c      	b.n	800f0ce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f0b4:	4b25      	ldr	r3, [pc, #148]	; (800f14c <UART_SetConfig+0xac8>)
 800f0b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f0b8:	e009      	b.n	800f0ce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f0ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f0be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f0c0:	e005      	b.n	800f0ce <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800f0c2:	2300      	movs	r3, #0
 800f0c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800f0c6:	2301      	movs	r3, #1
 800f0c8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800f0cc:	bf00      	nop
    }

    if (pclk != 0U)
 800f0ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f0d0:	2b00      	cmp	r3, #0
 800f0d2:	d021      	beq.n	800f118 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f0d4:	697b      	ldr	r3, [r7, #20]
 800f0d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f0d8:	4a1d      	ldr	r2, [pc, #116]	; (800f150 <UART_SetConfig+0xacc>)
 800f0da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f0de:	461a      	mov	r2, r3
 800f0e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f0e2:	fbb3 f2f2 	udiv	r2, r3, r2
 800f0e6:	697b      	ldr	r3, [r7, #20]
 800f0e8:	685b      	ldr	r3, [r3, #4]
 800f0ea:	085b      	lsrs	r3, r3, #1
 800f0ec:	441a      	add	r2, r3
 800f0ee:	697b      	ldr	r3, [r7, #20]
 800f0f0:	685b      	ldr	r3, [r3, #4]
 800f0f2:	fbb2 f3f3 	udiv	r3, r2, r3
 800f0f6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f0f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0fa:	2b0f      	cmp	r3, #15
 800f0fc:	d909      	bls.n	800f112 <UART_SetConfig+0xa8e>
 800f0fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f100:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f104:	d205      	bcs.n	800f112 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800f106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f108:	b29a      	uxth	r2, r3
 800f10a:	697b      	ldr	r3, [r7, #20]
 800f10c:	681b      	ldr	r3, [r3, #0]
 800f10e:	60da      	str	r2, [r3, #12]
 800f110:	e002      	b.n	800f118 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800f112:	2301      	movs	r3, #1
 800f114:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800f118:	697b      	ldr	r3, [r7, #20]
 800f11a:	2201      	movs	r2, #1
 800f11c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800f120:	697b      	ldr	r3, [r7, #20]
 800f122:	2201      	movs	r2, #1
 800f124:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f128:	697b      	ldr	r3, [r7, #20]
 800f12a:	2200      	movs	r2, #0
 800f12c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800f12e:	697b      	ldr	r3, [r7, #20]
 800f130:	2200      	movs	r2, #0
 800f132:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800f134:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800f138:	4618      	mov	r0, r3
 800f13a:	3748      	adds	r7, #72	; 0x48
 800f13c:	46bd      	mov	sp, r7
 800f13e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f142:	bf00      	nop
 800f144:	58024400 	.word	0x58024400
 800f148:	03d09000 	.word	0x03d09000
 800f14c:	003d0900 	.word	0x003d0900
 800f150:	08020f5c 	.word	0x08020f5c

0800f154 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f154:	b480      	push	{r7}
 800f156:	b083      	sub	sp, #12
 800f158:	af00      	add	r7, sp, #0
 800f15a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f160:	f003 0301 	and.w	r3, r3, #1
 800f164:	2b00      	cmp	r3, #0
 800f166:	d00a      	beq.n	800f17e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	681b      	ldr	r3, [r3, #0]
 800f16c:	685b      	ldr	r3, [r3, #4]
 800f16e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	681b      	ldr	r3, [r3, #0]
 800f17a:	430a      	orrs	r2, r1
 800f17c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f182:	f003 0302 	and.w	r3, r3, #2
 800f186:	2b00      	cmp	r3, #0
 800f188:	d00a      	beq.n	800f1a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	681b      	ldr	r3, [r3, #0]
 800f18e:	685b      	ldr	r3, [r3, #4]
 800f190:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	681b      	ldr	r3, [r3, #0]
 800f19c:	430a      	orrs	r2, r1
 800f19e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f1a4:	f003 0304 	and.w	r3, r3, #4
 800f1a8:	2b00      	cmp	r3, #0
 800f1aa:	d00a      	beq.n	800f1c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	681b      	ldr	r3, [r3, #0]
 800f1b0:	685b      	ldr	r3, [r3, #4]
 800f1b2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	681b      	ldr	r3, [r3, #0]
 800f1be:	430a      	orrs	r2, r1
 800f1c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f1c6:	f003 0308 	and.w	r3, r3, #8
 800f1ca:	2b00      	cmp	r3, #0
 800f1cc:	d00a      	beq.n	800f1e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	681b      	ldr	r3, [r3, #0]
 800f1d2:	685b      	ldr	r3, [r3, #4]
 800f1d4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	681b      	ldr	r3, [r3, #0]
 800f1e0:	430a      	orrs	r2, r1
 800f1e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f1e8:	f003 0310 	and.w	r3, r3, #16
 800f1ec:	2b00      	cmp	r3, #0
 800f1ee:	d00a      	beq.n	800f206 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	681b      	ldr	r3, [r3, #0]
 800f1f4:	689b      	ldr	r3, [r3, #8]
 800f1f6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	681b      	ldr	r3, [r3, #0]
 800f202:	430a      	orrs	r2, r1
 800f204:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f20a:	f003 0320 	and.w	r3, r3, #32
 800f20e:	2b00      	cmp	r3, #0
 800f210:	d00a      	beq.n	800f228 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	681b      	ldr	r3, [r3, #0]
 800f216:	689b      	ldr	r3, [r3, #8]
 800f218:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	681b      	ldr	r3, [r3, #0]
 800f224:	430a      	orrs	r2, r1
 800f226:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f22c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f230:	2b00      	cmp	r3, #0
 800f232:	d01a      	beq.n	800f26a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	681b      	ldr	r3, [r3, #0]
 800f238:	685b      	ldr	r3, [r3, #4]
 800f23a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	681b      	ldr	r3, [r3, #0]
 800f246:	430a      	orrs	r2, r1
 800f248:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f24e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f252:	d10a      	bne.n	800f26a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	681b      	ldr	r3, [r3, #0]
 800f258:	685b      	ldr	r3, [r3, #4]
 800f25a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	681b      	ldr	r3, [r3, #0]
 800f266:	430a      	orrs	r2, r1
 800f268:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f26e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f272:	2b00      	cmp	r3, #0
 800f274:	d00a      	beq.n	800f28c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	681b      	ldr	r3, [r3, #0]
 800f27a:	685b      	ldr	r3, [r3, #4]
 800f27c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	681b      	ldr	r3, [r3, #0]
 800f288:	430a      	orrs	r2, r1
 800f28a:	605a      	str	r2, [r3, #4]
  }
}
 800f28c:	bf00      	nop
 800f28e:	370c      	adds	r7, #12
 800f290:	46bd      	mov	sp, r7
 800f292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f296:	4770      	bx	lr

0800f298 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800f298:	b580      	push	{r7, lr}
 800f29a:	b098      	sub	sp, #96	; 0x60
 800f29c:	af02      	add	r7, sp, #8
 800f29e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	2200      	movs	r2, #0
 800f2a4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800f2a8:	f7f5 fa66 	bl	8004778 <HAL_GetTick>
 800f2ac:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	681b      	ldr	r3, [r3, #0]
 800f2b2:	681b      	ldr	r3, [r3, #0]
 800f2b4:	f003 0308 	and.w	r3, r3, #8
 800f2b8:	2b08      	cmp	r3, #8
 800f2ba:	d12f      	bne.n	800f31c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f2bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f2c0:	9300      	str	r3, [sp, #0]
 800f2c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f2c4:	2200      	movs	r2, #0
 800f2c6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800f2ca:	6878      	ldr	r0, [r7, #4]
 800f2cc:	f000 f88e 	bl	800f3ec <UART_WaitOnFlagUntilTimeout>
 800f2d0:	4603      	mov	r3, r0
 800f2d2:	2b00      	cmp	r3, #0
 800f2d4:	d022      	beq.n	800f31c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	681b      	ldr	r3, [r3, #0]
 800f2da:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f2dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2de:	e853 3f00 	ldrex	r3, [r3]
 800f2e2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f2e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f2e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f2ea:	653b      	str	r3, [r7, #80]	; 0x50
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	681b      	ldr	r3, [r3, #0]
 800f2f0:	461a      	mov	r2, r3
 800f2f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f2f4:	647b      	str	r3, [r7, #68]	; 0x44
 800f2f6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f2f8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f2fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f2fc:	e841 2300 	strex	r3, r2, [r1]
 800f300:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f302:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f304:	2b00      	cmp	r3, #0
 800f306:	d1e6      	bne.n	800f2d6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	2220      	movs	r2, #32
 800f30c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	2200      	movs	r2, #0
 800f314:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f318:	2303      	movs	r3, #3
 800f31a:	e063      	b.n	800f3e4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	681b      	ldr	r3, [r3, #0]
 800f320:	681b      	ldr	r3, [r3, #0]
 800f322:	f003 0304 	and.w	r3, r3, #4
 800f326:	2b04      	cmp	r3, #4
 800f328:	d149      	bne.n	800f3be <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f32a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f32e:	9300      	str	r3, [sp, #0]
 800f330:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f332:	2200      	movs	r2, #0
 800f334:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800f338:	6878      	ldr	r0, [r7, #4]
 800f33a:	f000 f857 	bl	800f3ec <UART_WaitOnFlagUntilTimeout>
 800f33e:	4603      	mov	r3, r0
 800f340:	2b00      	cmp	r3, #0
 800f342:	d03c      	beq.n	800f3be <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	681b      	ldr	r3, [r3, #0]
 800f348:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f34a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f34c:	e853 3f00 	ldrex	r3, [r3]
 800f350:	623b      	str	r3, [r7, #32]
   return(result);
 800f352:	6a3b      	ldr	r3, [r7, #32]
 800f354:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f358:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	681b      	ldr	r3, [r3, #0]
 800f35e:	461a      	mov	r2, r3
 800f360:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f362:	633b      	str	r3, [r7, #48]	; 0x30
 800f364:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f366:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f368:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f36a:	e841 2300 	strex	r3, r2, [r1]
 800f36e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f372:	2b00      	cmp	r3, #0
 800f374:	d1e6      	bne.n	800f344 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	681b      	ldr	r3, [r3, #0]
 800f37a:	3308      	adds	r3, #8
 800f37c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f37e:	693b      	ldr	r3, [r7, #16]
 800f380:	e853 3f00 	ldrex	r3, [r3]
 800f384:	60fb      	str	r3, [r7, #12]
   return(result);
 800f386:	68fb      	ldr	r3, [r7, #12]
 800f388:	f023 0301 	bic.w	r3, r3, #1
 800f38c:	64bb      	str	r3, [r7, #72]	; 0x48
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	681b      	ldr	r3, [r3, #0]
 800f392:	3308      	adds	r3, #8
 800f394:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f396:	61fa      	str	r2, [r7, #28]
 800f398:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f39a:	69b9      	ldr	r1, [r7, #24]
 800f39c:	69fa      	ldr	r2, [r7, #28]
 800f39e:	e841 2300 	strex	r3, r2, [r1]
 800f3a2:	617b      	str	r3, [r7, #20]
   return(result);
 800f3a4:	697b      	ldr	r3, [r7, #20]
 800f3a6:	2b00      	cmp	r3, #0
 800f3a8:	d1e5      	bne.n	800f376 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	2220      	movs	r2, #32
 800f3ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	2200      	movs	r2, #0
 800f3b6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f3ba:	2303      	movs	r3, #3
 800f3bc:	e012      	b.n	800f3e4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	2220      	movs	r2, #32
 800f3c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	2220      	movs	r2, #32
 800f3ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	2200      	movs	r2, #0
 800f3d2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	2200      	movs	r2, #0
 800f3d8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	2200      	movs	r2, #0
 800f3de:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f3e2:	2300      	movs	r3, #0
}
 800f3e4:	4618      	mov	r0, r3
 800f3e6:	3758      	adds	r7, #88	; 0x58
 800f3e8:	46bd      	mov	sp, r7
 800f3ea:	bd80      	pop	{r7, pc}

0800f3ec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800f3ec:	b580      	push	{r7, lr}
 800f3ee:	b084      	sub	sp, #16
 800f3f0:	af00      	add	r7, sp, #0
 800f3f2:	60f8      	str	r0, [r7, #12]
 800f3f4:	60b9      	str	r1, [r7, #8]
 800f3f6:	603b      	str	r3, [r7, #0]
 800f3f8:	4613      	mov	r3, r2
 800f3fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f3fc:	e049      	b.n	800f492 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f3fe:	69bb      	ldr	r3, [r7, #24]
 800f400:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f404:	d045      	beq.n	800f492 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f406:	f7f5 f9b7 	bl	8004778 <HAL_GetTick>
 800f40a:	4602      	mov	r2, r0
 800f40c:	683b      	ldr	r3, [r7, #0]
 800f40e:	1ad3      	subs	r3, r2, r3
 800f410:	69ba      	ldr	r2, [r7, #24]
 800f412:	429a      	cmp	r2, r3
 800f414:	d302      	bcc.n	800f41c <UART_WaitOnFlagUntilTimeout+0x30>
 800f416:	69bb      	ldr	r3, [r7, #24]
 800f418:	2b00      	cmp	r3, #0
 800f41a:	d101      	bne.n	800f420 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800f41c:	2303      	movs	r3, #3
 800f41e:	e048      	b.n	800f4b2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800f420:	68fb      	ldr	r3, [r7, #12]
 800f422:	681b      	ldr	r3, [r3, #0]
 800f424:	681b      	ldr	r3, [r3, #0]
 800f426:	f003 0304 	and.w	r3, r3, #4
 800f42a:	2b00      	cmp	r3, #0
 800f42c:	d031      	beq.n	800f492 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800f42e:	68fb      	ldr	r3, [r7, #12]
 800f430:	681b      	ldr	r3, [r3, #0]
 800f432:	69db      	ldr	r3, [r3, #28]
 800f434:	f003 0308 	and.w	r3, r3, #8
 800f438:	2b08      	cmp	r3, #8
 800f43a:	d110      	bne.n	800f45e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f43c:	68fb      	ldr	r3, [r7, #12]
 800f43e:	681b      	ldr	r3, [r3, #0]
 800f440:	2208      	movs	r2, #8
 800f442:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800f444:	68f8      	ldr	r0, [r7, #12]
 800f446:	f000 f95b 	bl	800f700 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800f44a:	68fb      	ldr	r3, [r7, #12]
 800f44c:	2208      	movs	r2, #8
 800f44e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800f452:	68fb      	ldr	r3, [r7, #12]
 800f454:	2200      	movs	r2, #0
 800f456:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800f45a:	2301      	movs	r3, #1
 800f45c:	e029      	b.n	800f4b2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f45e:	68fb      	ldr	r3, [r7, #12]
 800f460:	681b      	ldr	r3, [r3, #0]
 800f462:	69db      	ldr	r3, [r3, #28]
 800f464:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f468:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f46c:	d111      	bne.n	800f492 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f46e:	68fb      	ldr	r3, [r7, #12]
 800f470:	681b      	ldr	r3, [r3, #0]
 800f472:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f476:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800f478:	68f8      	ldr	r0, [r7, #12]
 800f47a:	f000 f941 	bl	800f700 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f47e:	68fb      	ldr	r3, [r7, #12]
 800f480:	2220      	movs	r2, #32
 800f482:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f486:	68fb      	ldr	r3, [r7, #12]
 800f488:	2200      	movs	r2, #0
 800f48a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800f48e:	2303      	movs	r3, #3
 800f490:	e00f      	b.n	800f4b2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f492:	68fb      	ldr	r3, [r7, #12]
 800f494:	681b      	ldr	r3, [r3, #0]
 800f496:	69da      	ldr	r2, [r3, #28]
 800f498:	68bb      	ldr	r3, [r7, #8]
 800f49a:	4013      	ands	r3, r2
 800f49c:	68ba      	ldr	r2, [r7, #8]
 800f49e:	429a      	cmp	r2, r3
 800f4a0:	bf0c      	ite	eq
 800f4a2:	2301      	moveq	r3, #1
 800f4a4:	2300      	movne	r3, #0
 800f4a6:	b2db      	uxtb	r3, r3
 800f4a8:	461a      	mov	r2, r3
 800f4aa:	79fb      	ldrb	r3, [r7, #7]
 800f4ac:	429a      	cmp	r2, r3
 800f4ae:	d0a6      	beq.n	800f3fe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f4b0:	2300      	movs	r3, #0
}
 800f4b2:	4618      	mov	r0, r3
 800f4b4:	3710      	adds	r7, #16
 800f4b6:	46bd      	mov	sp, r7
 800f4b8:	bd80      	pop	{r7, pc}
	...

0800f4bc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f4bc:	b480      	push	{r7}
 800f4be:	b0a3      	sub	sp, #140	; 0x8c
 800f4c0:	af00      	add	r7, sp, #0
 800f4c2:	60f8      	str	r0, [r7, #12]
 800f4c4:	60b9      	str	r1, [r7, #8]
 800f4c6:	4613      	mov	r3, r2
 800f4c8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800f4ca:	68fb      	ldr	r3, [r7, #12]
 800f4cc:	68ba      	ldr	r2, [r7, #8]
 800f4ce:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800f4d0:	68fb      	ldr	r3, [r7, #12]
 800f4d2:	88fa      	ldrh	r2, [r7, #6]
 800f4d4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800f4d8:	68fb      	ldr	r3, [r7, #12]
 800f4da:	88fa      	ldrh	r2, [r7, #6]
 800f4dc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800f4e0:	68fb      	ldr	r3, [r7, #12]
 800f4e2:	2200      	movs	r2, #0
 800f4e4:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800f4e6:	68fb      	ldr	r3, [r7, #12]
 800f4e8:	689b      	ldr	r3, [r3, #8]
 800f4ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f4ee:	d10e      	bne.n	800f50e <UART_Start_Receive_IT+0x52>
 800f4f0:	68fb      	ldr	r3, [r7, #12]
 800f4f2:	691b      	ldr	r3, [r3, #16]
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	d105      	bne.n	800f504 <UART_Start_Receive_IT+0x48>
 800f4f8:	68fb      	ldr	r3, [r7, #12]
 800f4fa:	f240 12ff 	movw	r2, #511	; 0x1ff
 800f4fe:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f502:	e02d      	b.n	800f560 <UART_Start_Receive_IT+0xa4>
 800f504:	68fb      	ldr	r3, [r7, #12]
 800f506:	22ff      	movs	r2, #255	; 0xff
 800f508:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f50c:	e028      	b.n	800f560 <UART_Start_Receive_IT+0xa4>
 800f50e:	68fb      	ldr	r3, [r7, #12]
 800f510:	689b      	ldr	r3, [r3, #8]
 800f512:	2b00      	cmp	r3, #0
 800f514:	d10d      	bne.n	800f532 <UART_Start_Receive_IT+0x76>
 800f516:	68fb      	ldr	r3, [r7, #12]
 800f518:	691b      	ldr	r3, [r3, #16]
 800f51a:	2b00      	cmp	r3, #0
 800f51c:	d104      	bne.n	800f528 <UART_Start_Receive_IT+0x6c>
 800f51e:	68fb      	ldr	r3, [r7, #12]
 800f520:	22ff      	movs	r2, #255	; 0xff
 800f522:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f526:	e01b      	b.n	800f560 <UART_Start_Receive_IT+0xa4>
 800f528:	68fb      	ldr	r3, [r7, #12]
 800f52a:	227f      	movs	r2, #127	; 0x7f
 800f52c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f530:	e016      	b.n	800f560 <UART_Start_Receive_IT+0xa4>
 800f532:	68fb      	ldr	r3, [r7, #12]
 800f534:	689b      	ldr	r3, [r3, #8]
 800f536:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f53a:	d10d      	bne.n	800f558 <UART_Start_Receive_IT+0x9c>
 800f53c:	68fb      	ldr	r3, [r7, #12]
 800f53e:	691b      	ldr	r3, [r3, #16]
 800f540:	2b00      	cmp	r3, #0
 800f542:	d104      	bne.n	800f54e <UART_Start_Receive_IT+0x92>
 800f544:	68fb      	ldr	r3, [r7, #12]
 800f546:	227f      	movs	r2, #127	; 0x7f
 800f548:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f54c:	e008      	b.n	800f560 <UART_Start_Receive_IT+0xa4>
 800f54e:	68fb      	ldr	r3, [r7, #12]
 800f550:	223f      	movs	r2, #63	; 0x3f
 800f552:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f556:	e003      	b.n	800f560 <UART_Start_Receive_IT+0xa4>
 800f558:	68fb      	ldr	r3, [r7, #12]
 800f55a:	2200      	movs	r2, #0
 800f55c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f560:	68fb      	ldr	r3, [r7, #12]
 800f562:	2200      	movs	r2, #0
 800f564:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800f568:	68fb      	ldr	r3, [r7, #12]
 800f56a:	2222      	movs	r2, #34	; 0x22
 800f56c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f570:	68fb      	ldr	r3, [r7, #12]
 800f572:	681b      	ldr	r3, [r3, #0]
 800f574:	3308      	adds	r3, #8
 800f576:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f578:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f57a:	e853 3f00 	ldrex	r3, [r3]
 800f57e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800f580:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f582:	f043 0301 	orr.w	r3, r3, #1
 800f586:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800f58a:	68fb      	ldr	r3, [r7, #12]
 800f58c:	681b      	ldr	r3, [r3, #0]
 800f58e:	3308      	adds	r3, #8
 800f590:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800f594:	673a      	str	r2, [r7, #112]	; 0x70
 800f596:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f598:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800f59a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800f59c:	e841 2300 	strex	r3, r2, [r1]
 800f5a0:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800f5a2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f5a4:	2b00      	cmp	r3, #0
 800f5a6:	d1e3      	bne.n	800f570 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800f5a8:	68fb      	ldr	r3, [r7, #12]
 800f5aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f5ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f5b0:	d14f      	bne.n	800f652 <UART_Start_Receive_IT+0x196>
 800f5b2:	68fb      	ldr	r3, [r7, #12]
 800f5b4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f5b8:	88fa      	ldrh	r2, [r7, #6]
 800f5ba:	429a      	cmp	r2, r3
 800f5bc:	d349      	bcc.n	800f652 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f5be:	68fb      	ldr	r3, [r7, #12]
 800f5c0:	689b      	ldr	r3, [r3, #8]
 800f5c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f5c6:	d107      	bne.n	800f5d8 <UART_Start_Receive_IT+0x11c>
 800f5c8:	68fb      	ldr	r3, [r7, #12]
 800f5ca:	691b      	ldr	r3, [r3, #16]
 800f5cc:	2b00      	cmp	r3, #0
 800f5ce:	d103      	bne.n	800f5d8 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800f5d0:	68fb      	ldr	r3, [r7, #12]
 800f5d2:	4a47      	ldr	r2, [pc, #284]	; (800f6f0 <UART_Start_Receive_IT+0x234>)
 800f5d4:	675a      	str	r2, [r3, #116]	; 0x74
 800f5d6:	e002      	b.n	800f5de <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800f5d8:	68fb      	ldr	r3, [r7, #12]
 800f5da:	4a46      	ldr	r2, [pc, #280]	; (800f6f4 <UART_Start_Receive_IT+0x238>)
 800f5dc:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800f5de:	68fb      	ldr	r3, [r7, #12]
 800f5e0:	691b      	ldr	r3, [r3, #16]
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	d01a      	beq.n	800f61c <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f5e6:	68fb      	ldr	r3, [r7, #12]
 800f5e8:	681b      	ldr	r3, [r3, #0]
 800f5ea:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f5ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f5ee:	e853 3f00 	ldrex	r3, [r3]
 800f5f2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800f5f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f5f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f5fa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800f5fe:	68fb      	ldr	r3, [r7, #12]
 800f600:	681b      	ldr	r3, [r3, #0]
 800f602:	461a      	mov	r2, r3
 800f604:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f608:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f60a:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f60c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f60e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f610:	e841 2300 	strex	r3, r2, [r1]
 800f614:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800f616:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f618:	2b00      	cmp	r3, #0
 800f61a:	d1e4      	bne.n	800f5e6 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800f61c:	68fb      	ldr	r3, [r7, #12]
 800f61e:	681b      	ldr	r3, [r3, #0]
 800f620:	3308      	adds	r3, #8
 800f622:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f624:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f626:	e853 3f00 	ldrex	r3, [r3]
 800f62a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f62c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f62e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f632:	67fb      	str	r3, [r7, #124]	; 0x7c
 800f634:	68fb      	ldr	r3, [r7, #12]
 800f636:	681b      	ldr	r3, [r3, #0]
 800f638:	3308      	adds	r3, #8
 800f63a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800f63c:	64ba      	str	r2, [r7, #72]	; 0x48
 800f63e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f640:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f642:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f644:	e841 2300 	strex	r3, r2, [r1]
 800f648:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800f64a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f64c:	2b00      	cmp	r3, #0
 800f64e:	d1e5      	bne.n	800f61c <UART_Start_Receive_IT+0x160>
 800f650:	e046      	b.n	800f6e0 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f652:	68fb      	ldr	r3, [r7, #12]
 800f654:	689b      	ldr	r3, [r3, #8]
 800f656:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f65a:	d107      	bne.n	800f66c <UART_Start_Receive_IT+0x1b0>
 800f65c:	68fb      	ldr	r3, [r7, #12]
 800f65e:	691b      	ldr	r3, [r3, #16]
 800f660:	2b00      	cmp	r3, #0
 800f662:	d103      	bne.n	800f66c <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800f664:	68fb      	ldr	r3, [r7, #12]
 800f666:	4a24      	ldr	r2, [pc, #144]	; (800f6f8 <UART_Start_Receive_IT+0x23c>)
 800f668:	675a      	str	r2, [r3, #116]	; 0x74
 800f66a:	e002      	b.n	800f672 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800f66c:	68fb      	ldr	r3, [r7, #12]
 800f66e:	4a23      	ldr	r2, [pc, #140]	; (800f6fc <UART_Start_Receive_IT+0x240>)
 800f670:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800f672:	68fb      	ldr	r3, [r7, #12]
 800f674:	691b      	ldr	r3, [r3, #16]
 800f676:	2b00      	cmp	r3, #0
 800f678:	d019      	beq.n	800f6ae <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800f67a:	68fb      	ldr	r3, [r7, #12]
 800f67c:	681b      	ldr	r3, [r3, #0]
 800f67e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f682:	e853 3f00 	ldrex	r3, [r3]
 800f686:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f68a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800f68e:	677b      	str	r3, [r7, #116]	; 0x74
 800f690:	68fb      	ldr	r3, [r7, #12]
 800f692:	681b      	ldr	r3, [r3, #0]
 800f694:	461a      	mov	r2, r3
 800f696:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f698:	637b      	str	r3, [r7, #52]	; 0x34
 800f69a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f69c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f69e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f6a0:	e841 2300 	strex	r3, r2, [r1]
 800f6a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800f6a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6a8:	2b00      	cmp	r3, #0
 800f6aa:	d1e6      	bne.n	800f67a <UART_Start_Receive_IT+0x1be>
 800f6ac:	e018      	b.n	800f6e0 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800f6ae:	68fb      	ldr	r3, [r7, #12]
 800f6b0:	681b      	ldr	r3, [r3, #0]
 800f6b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f6b4:	697b      	ldr	r3, [r7, #20]
 800f6b6:	e853 3f00 	ldrex	r3, [r3]
 800f6ba:	613b      	str	r3, [r7, #16]
   return(result);
 800f6bc:	693b      	ldr	r3, [r7, #16]
 800f6be:	f043 0320 	orr.w	r3, r3, #32
 800f6c2:	67bb      	str	r3, [r7, #120]	; 0x78
 800f6c4:	68fb      	ldr	r3, [r7, #12]
 800f6c6:	681b      	ldr	r3, [r3, #0]
 800f6c8:	461a      	mov	r2, r3
 800f6ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f6cc:	623b      	str	r3, [r7, #32]
 800f6ce:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f6d0:	69f9      	ldr	r1, [r7, #28]
 800f6d2:	6a3a      	ldr	r2, [r7, #32]
 800f6d4:	e841 2300 	strex	r3, r2, [r1]
 800f6d8:	61bb      	str	r3, [r7, #24]
   return(result);
 800f6da:	69bb      	ldr	r3, [r7, #24]
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	d1e6      	bne.n	800f6ae <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800f6e0:	2300      	movs	r3, #0
}
 800f6e2:	4618      	mov	r0, r3
 800f6e4:	378c      	adds	r7, #140	; 0x8c
 800f6e6:	46bd      	mov	sp, r7
 800f6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ec:	4770      	bx	lr
 800f6ee:	bf00      	nop
 800f6f0:	08010265 	.word	0x08010265
 800f6f4:	0800ff05 	.word	0x0800ff05
 800f6f8:	0800fd4d 	.word	0x0800fd4d
 800f6fc:	0800fb95 	.word	0x0800fb95

0800f700 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f700:	b480      	push	{r7}
 800f702:	b095      	sub	sp, #84	; 0x54
 800f704:	af00      	add	r7, sp, #0
 800f706:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	681b      	ldr	r3, [r3, #0]
 800f70c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f70e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f710:	e853 3f00 	ldrex	r3, [r3]
 800f714:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f718:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f71c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	681b      	ldr	r3, [r3, #0]
 800f722:	461a      	mov	r2, r3
 800f724:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f726:	643b      	str	r3, [r7, #64]	; 0x40
 800f728:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f72a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f72c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f72e:	e841 2300 	strex	r3, r2, [r1]
 800f732:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f736:	2b00      	cmp	r3, #0
 800f738:	d1e6      	bne.n	800f708 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	681b      	ldr	r3, [r3, #0]
 800f73e:	3308      	adds	r3, #8
 800f740:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f742:	6a3b      	ldr	r3, [r7, #32]
 800f744:	e853 3f00 	ldrex	r3, [r3]
 800f748:	61fb      	str	r3, [r7, #28]
   return(result);
 800f74a:	69fa      	ldr	r2, [r7, #28]
 800f74c:	4b1e      	ldr	r3, [pc, #120]	; (800f7c8 <UART_EndRxTransfer+0xc8>)
 800f74e:	4013      	ands	r3, r2
 800f750:	64bb      	str	r3, [r7, #72]	; 0x48
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	681b      	ldr	r3, [r3, #0]
 800f756:	3308      	adds	r3, #8
 800f758:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f75a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f75c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f75e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f760:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f762:	e841 2300 	strex	r3, r2, [r1]
 800f766:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f76a:	2b00      	cmp	r3, #0
 800f76c:	d1e5      	bne.n	800f73a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f772:	2b01      	cmp	r3, #1
 800f774:	d118      	bne.n	800f7a8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	681b      	ldr	r3, [r3, #0]
 800f77a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f77c:	68fb      	ldr	r3, [r7, #12]
 800f77e:	e853 3f00 	ldrex	r3, [r3]
 800f782:	60bb      	str	r3, [r7, #8]
   return(result);
 800f784:	68bb      	ldr	r3, [r7, #8]
 800f786:	f023 0310 	bic.w	r3, r3, #16
 800f78a:	647b      	str	r3, [r7, #68]	; 0x44
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	681b      	ldr	r3, [r3, #0]
 800f790:	461a      	mov	r2, r3
 800f792:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f794:	61bb      	str	r3, [r7, #24]
 800f796:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f798:	6979      	ldr	r1, [r7, #20]
 800f79a:	69ba      	ldr	r2, [r7, #24]
 800f79c:	e841 2300 	strex	r3, r2, [r1]
 800f7a0:	613b      	str	r3, [r7, #16]
   return(result);
 800f7a2:	693b      	ldr	r3, [r7, #16]
 800f7a4:	2b00      	cmp	r3, #0
 800f7a6:	d1e6      	bne.n	800f776 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	2220      	movs	r2, #32
 800f7ac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	2200      	movs	r2, #0
 800f7b4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	2200      	movs	r2, #0
 800f7ba:	675a      	str	r2, [r3, #116]	; 0x74
}
 800f7bc:	bf00      	nop
 800f7be:	3754      	adds	r7, #84	; 0x54
 800f7c0:	46bd      	mov	sp, r7
 800f7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7c6:	4770      	bx	lr
 800f7c8:	effffffe 	.word	0xeffffffe

0800f7cc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800f7cc:	b580      	push	{r7, lr}
 800f7ce:	b084      	sub	sp, #16
 800f7d0:	af00      	add	r7, sp, #0
 800f7d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f7d8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800f7da:	68fb      	ldr	r3, [r7, #12]
 800f7dc:	2200      	movs	r2, #0
 800f7de:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800f7e2:	68fb      	ldr	r3, [r7, #12]
 800f7e4:	2200      	movs	r2, #0
 800f7e6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f7ea:	68f8      	ldr	r0, [r7, #12]
 800f7ec:	f7fe ff34 	bl	800e658 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f7f0:	bf00      	nop
 800f7f2:	3710      	adds	r7, #16
 800f7f4:	46bd      	mov	sp, r7
 800f7f6:	bd80      	pop	{r7, pc}

0800f7f8 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800f7f8:	b480      	push	{r7}
 800f7fa:	b08f      	sub	sp, #60	; 0x3c
 800f7fc:	af00      	add	r7, sp, #0
 800f7fe:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f806:	2b21      	cmp	r3, #33	; 0x21
 800f808:	d14c      	bne.n	800f8a4 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800f810:	b29b      	uxth	r3, r3
 800f812:	2b00      	cmp	r3, #0
 800f814:	d132      	bne.n	800f87c <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	681b      	ldr	r3, [r3, #0]
 800f81a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f81c:	6a3b      	ldr	r3, [r7, #32]
 800f81e:	e853 3f00 	ldrex	r3, [r3]
 800f822:	61fb      	str	r3, [r7, #28]
   return(result);
 800f824:	69fb      	ldr	r3, [r7, #28]
 800f826:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f82a:	637b      	str	r3, [r7, #52]	; 0x34
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	681b      	ldr	r3, [r3, #0]
 800f830:	461a      	mov	r2, r3
 800f832:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f834:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f836:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f838:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f83a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f83c:	e841 2300 	strex	r3, r2, [r1]
 800f840:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f844:	2b00      	cmp	r3, #0
 800f846:	d1e6      	bne.n	800f816 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	681b      	ldr	r3, [r3, #0]
 800f84c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f84e:	68fb      	ldr	r3, [r7, #12]
 800f850:	e853 3f00 	ldrex	r3, [r3]
 800f854:	60bb      	str	r3, [r7, #8]
   return(result);
 800f856:	68bb      	ldr	r3, [r7, #8]
 800f858:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f85c:	633b      	str	r3, [r7, #48]	; 0x30
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	681b      	ldr	r3, [r3, #0]
 800f862:	461a      	mov	r2, r3
 800f864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f866:	61bb      	str	r3, [r7, #24]
 800f868:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f86a:	6979      	ldr	r1, [r7, #20]
 800f86c:	69ba      	ldr	r2, [r7, #24]
 800f86e:	e841 2300 	strex	r3, r2, [r1]
 800f872:	613b      	str	r3, [r7, #16]
   return(result);
 800f874:	693b      	ldr	r3, [r7, #16]
 800f876:	2b00      	cmp	r3, #0
 800f878:	d1e6      	bne.n	800f848 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800f87a:	e013      	b.n	800f8a4 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f880:	781a      	ldrb	r2, [r3, #0]
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	681b      	ldr	r3, [r3, #0]
 800f886:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f88c:	1c5a      	adds	r2, r3, #1
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800f898:	b29b      	uxth	r3, r3
 800f89a:	3b01      	subs	r3, #1
 800f89c:	b29a      	uxth	r2, r3
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800f8a4:	bf00      	nop
 800f8a6:	373c      	adds	r7, #60	; 0x3c
 800f8a8:	46bd      	mov	sp, r7
 800f8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8ae:	4770      	bx	lr

0800f8b0 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800f8b0:	b480      	push	{r7}
 800f8b2:	b091      	sub	sp, #68	; 0x44
 800f8b4:	af00      	add	r7, sp, #0
 800f8b6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f8be:	2b21      	cmp	r3, #33	; 0x21
 800f8c0:	d151      	bne.n	800f966 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800f8c8:	b29b      	uxth	r3, r3
 800f8ca:	2b00      	cmp	r3, #0
 800f8cc:	d132      	bne.n	800f934 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	681b      	ldr	r3, [r3, #0]
 800f8d2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f8d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8d6:	e853 3f00 	ldrex	r3, [r3]
 800f8da:	623b      	str	r3, [r7, #32]
   return(result);
 800f8dc:	6a3b      	ldr	r3, [r7, #32]
 800f8de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f8e2:	63bb      	str	r3, [r7, #56]	; 0x38
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	681b      	ldr	r3, [r3, #0]
 800f8e8:	461a      	mov	r2, r3
 800f8ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8ec:	633b      	str	r3, [r7, #48]	; 0x30
 800f8ee:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f8f0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f8f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f8f4:	e841 2300 	strex	r3, r2, [r1]
 800f8f8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f8fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8fc:	2b00      	cmp	r3, #0
 800f8fe:	d1e6      	bne.n	800f8ce <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	681b      	ldr	r3, [r3, #0]
 800f904:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f906:	693b      	ldr	r3, [r7, #16]
 800f908:	e853 3f00 	ldrex	r3, [r3]
 800f90c:	60fb      	str	r3, [r7, #12]
   return(result);
 800f90e:	68fb      	ldr	r3, [r7, #12]
 800f910:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f914:	637b      	str	r3, [r7, #52]	; 0x34
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	681b      	ldr	r3, [r3, #0]
 800f91a:	461a      	mov	r2, r3
 800f91c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f91e:	61fb      	str	r3, [r7, #28]
 800f920:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f922:	69b9      	ldr	r1, [r7, #24]
 800f924:	69fa      	ldr	r2, [r7, #28]
 800f926:	e841 2300 	strex	r3, r2, [r1]
 800f92a:	617b      	str	r3, [r7, #20]
   return(result);
 800f92c:	697b      	ldr	r3, [r7, #20]
 800f92e:	2b00      	cmp	r3, #0
 800f930:	d1e6      	bne.n	800f900 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800f932:	e018      	b.n	800f966 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f938:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800f93a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f93c:	881b      	ldrh	r3, [r3, #0]
 800f93e:	461a      	mov	r2, r3
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	681b      	ldr	r3, [r3, #0]
 800f944:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800f948:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f94e:	1c9a      	adds	r2, r3, #2
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800f95a:	b29b      	uxth	r3, r3
 800f95c:	3b01      	subs	r3, #1
 800f95e:	b29a      	uxth	r2, r3
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800f966:	bf00      	nop
 800f968:	3744      	adds	r7, #68	; 0x44
 800f96a:	46bd      	mov	sp, r7
 800f96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f970:	4770      	bx	lr

0800f972 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800f972:	b480      	push	{r7}
 800f974:	b091      	sub	sp, #68	; 0x44
 800f976:	af00      	add	r7, sp, #0
 800f978:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f980:	2b21      	cmp	r3, #33	; 0x21
 800f982:	d160      	bne.n	800fa46 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f98a:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800f98c:	e057      	b.n	800fa3e <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800f994:	b29b      	uxth	r3, r3
 800f996:	2b00      	cmp	r3, #0
 800f998:	d133      	bne.n	800fa02 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	681b      	ldr	r3, [r3, #0]
 800f99e:	3308      	adds	r3, #8
 800f9a0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f9a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9a4:	e853 3f00 	ldrex	r3, [r3]
 800f9a8:	623b      	str	r3, [r7, #32]
   return(result);
 800f9aa:	6a3b      	ldr	r3, [r7, #32]
 800f9ac:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800f9b0:	63bb      	str	r3, [r7, #56]	; 0x38
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	681b      	ldr	r3, [r3, #0]
 800f9b6:	3308      	adds	r3, #8
 800f9b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f9ba:	633a      	str	r2, [r7, #48]	; 0x30
 800f9bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f9be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f9c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f9c2:	e841 2300 	strex	r3, r2, [r1]
 800f9c6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f9c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9ca:	2b00      	cmp	r3, #0
 800f9cc:	d1e5      	bne.n	800f99a <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	681b      	ldr	r3, [r3, #0]
 800f9d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f9d4:	693b      	ldr	r3, [r7, #16]
 800f9d6:	e853 3f00 	ldrex	r3, [r3]
 800f9da:	60fb      	str	r3, [r7, #12]
   return(result);
 800f9dc:	68fb      	ldr	r3, [r7, #12]
 800f9de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f9e2:	637b      	str	r3, [r7, #52]	; 0x34
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	681b      	ldr	r3, [r3, #0]
 800f9e8:	461a      	mov	r2, r3
 800f9ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f9ec:	61fb      	str	r3, [r7, #28]
 800f9ee:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f9f0:	69b9      	ldr	r1, [r7, #24]
 800f9f2:	69fa      	ldr	r2, [r7, #28]
 800f9f4:	e841 2300 	strex	r3, r2, [r1]
 800f9f8:	617b      	str	r3, [r7, #20]
   return(result);
 800f9fa:	697b      	ldr	r3, [r7, #20]
 800f9fc:	2b00      	cmp	r3, #0
 800f9fe:	d1e6      	bne.n	800f9ce <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800fa00:	e021      	b.n	800fa46 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	681b      	ldr	r3, [r3, #0]
 800fa06:	69db      	ldr	r3, [r3, #28]
 800fa08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	d013      	beq.n	800fa38 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fa14:	781a      	ldrb	r2, [r3, #0]
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	681b      	ldr	r3, [r3, #0]
 800fa1a:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fa20:	1c5a      	adds	r2, r3, #1
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800fa2c:	b29b      	uxth	r3, r3
 800fa2e:	3b01      	subs	r3, #1
 800fa30:	b29a      	uxth	r2, r3
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800fa38:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800fa3a:	3b01      	subs	r3, #1
 800fa3c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800fa3e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800fa40:	2b00      	cmp	r3, #0
 800fa42:	d1a4      	bne.n	800f98e <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800fa44:	e7ff      	b.n	800fa46 <UART_TxISR_8BIT_FIFOEN+0xd4>
 800fa46:	bf00      	nop
 800fa48:	3744      	adds	r7, #68	; 0x44
 800fa4a:	46bd      	mov	sp, r7
 800fa4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa50:	4770      	bx	lr

0800fa52 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800fa52:	b480      	push	{r7}
 800fa54:	b091      	sub	sp, #68	; 0x44
 800fa56:	af00      	add	r7, sp, #0
 800fa58:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fa60:	2b21      	cmp	r3, #33	; 0x21
 800fa62:	d165      	bne.n	800fb30 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800fa6a:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800fa6c:	e05c      	b.n	800fb28 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800fa74:	b29b      	uxth	r3, r3
 800fa76:	2b00      	cmp	r3, #0
 800fa78:	d133      	bne.n	800fae2 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	681b      	ldr	r3, [r3, #0]
 800fa7e:	3308      	adds	r3, #8
 800fa80:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa82:	6a3b      	ldr	r3, [r7, #32]
 800fa84:	e853 3f00 	ldrex	r3, [r3]
 800fa88:	61fb      	str	r3, [r7, #28]
   return(result);
 800fa8a:	69fb      	ldr	r3, [r7, #28]
 800fa8c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800fa90:	637b      	str	r3, [r7, #52]	; 0x34
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	681b      	ldr	r3, [r3, #0]
 800fa96:	3308      	adds	r3, #8
 800fa98:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fa9a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800fa9c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa9e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800faa0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800faa2:	e841 2300 	strex	r3, r2, [r1]
 800faa6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800faa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800faaa:	2b00      	cmp	r3, #0
 800faac:	d1e5      	bne.n	800fa7a <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	681b      	ldr	r3, [r3, #0]
 800fab2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fab4:	68fb      	ldr	r3, [r7, #12]
 800fab6:	e853 3f00 	ldrex	r3, [r3]
 800faba:	60bb      	str	r3, [r7, #8]
   return(result);
 800fabc:	68bb      	ldr	r3, [r7, #8]
 800fabe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fac2:	633b      	str	r3, [r7, #48]	; 0x30
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	681b      	ldr	r3, [r3, #0]
 800fac8:	461a      	mov	r2, r3
 800faca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800facc:	61bb      	str	r3, [r7, #24]
 800face:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fad0:	6979      	ldr	r1, [r7, #20]
 800fad2:	69ba      	ldr	r2, [r7, #24]
 800fad4:	e841 2300 	strex	r3, r2, [r1]
 800fad8:	613b      	str	r3, [r7, #16]
   return(result);
 800fada:	693b      	ldr	r3, [r7, #16]
 800fadc:	2b00      	cmp	r3, #0
 800fade:	d1e6      	bne.n	800faae <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800fae0:	e026      	b.n	800fb30 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	681b      	ldr	r3, [r3, #0]
 800fae6:	69db      	ldr	r3, [r3, #28]
 800fae8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800faec:	2b00      	cmp	r3, #0
 800faee:	d018      	beq.n	800fb22 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800faf4:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800faf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800faf8:	881b      	ldrh	r3, [r3, #0]
 800fafa:	461a      	mov	r2, r3
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	681b      	ldr	r3, [r3, #0]
 800fb00:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800fb04:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fb0a:	1c9a      	adds	r2, r3, #2
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800fb16:	b29b      	uxth	r3, r3
 800fb18:	3b01      	subs	r3, #1
 800fb1a:	b29a      	uxth	r2, r3
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800fb22:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800fb24:	3b01      	subs	r3, #1
 800fb26:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800fb28:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800fb2a:	2b00      	cmp	r3, #0
 800fb2c:	d19f      	bne.n	800fa6e <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800fb2e:	e7ff      	b.n	800fb30 <UART_TxISR_16BIT_FIFOEN+0xde>
 800fb30:	bf00      	nop
 800fb32:	3744      	adds	r7, #68	; 0x44
 800fb34:	46bd      	mov	sp, r7
 800fb36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb3a:	4770      	bx	lr

0800fb3c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800fb3c:	b580      	push	{r7, lr}
 800fb3e:	b088      	sub	sp, #32
 800fb40:	af00      	add	r7, sp, #0
 800fb42:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	681b      	ldr	r3, [r3, #0]
 800fb48:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb4a:	68fb      	ldr	r3, [r7, #12]
 800fb4c:	e853 3f00 	ldrex	r3, [r3]
 800fb50:	60bb      	str	r3, [r7, #8]
   return(result);
 800fb52:	68bb      	ldr	r3, [r7, #8]
 800fb54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fb58:	61fb      	str	r3, [r7, #28]
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	681b      	ldr	r3, [r3, #0]
 800fb5e:	461a      	mov	r2, r3
 800fb60:	69fb      	ldr	r3, [r7, #28]
 800fb62:	61bb      	str	r3, [r7, #24]
 800fb64:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb66:	6979      	ldr	r1, [r7, #20]
 800fb68:	69ba      	ldr	r2, [r7, #24]
 800fb6a:	e841 2300 	strex	r3, r2, [r1]
 800fb6e:	613b      	str	r3, [r7, #16]
   return(result);
 800fb70:	693b      	ldr	r3, [r7, #16]
 800fb72:	2b00      	cmp	r3, #0
 800fb74:	d1e6      	bne.n	800fb44 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	2220      	movs	r2, #32
 800fb7a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	2200      	movs	r2, #0
 800fb82:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800fb84:	6878      	ldr	r0, [r7, #4]
 800fb86:	f7fe fd5d 	bl	800e644 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fb8a:	bf00      	nop
 800fb8c:	3720      	adds	r7, #32
 800fb8e:	46bd      	mov	sp, r7
 800fb90:	bd80      	pop	{r7, pc}
	...

0800fb94 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800fb94:	b580      	push	{r7, lr}
 800fb96:	b09c      	sub	sp, #112	; 0x70
 800fb98:	af00      	add	r7, sp, #0
 800fb9a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800fba2:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fbac:	2b22      	cmp	r3, #34	; 0x22
 800fbae:	f040 80be 	bne.w	800fd2e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	681b      	ldr	r3, [r3, #0]
 800fbb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fbb8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800fbbc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800fbc0:	b2d9      	uxtb	r1, r3
 800fbc2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800fbc6:	b2da      	uxtb	r2, r3
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fbcc:	400a      	ands	r2, r1
 800fbce:	b2d2      	uxtb	r2, r2
 800fbd0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fbd6:	1c5a      	adds	r2, r3, #1
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fbe2:	b29b      	uxth	r3, r3
 800fbe4:	3b01      	subs	r3, #1
 800fbe6:	b29a      	uxth	r2, r3
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fbf4:	b29b      	uxth	r3, r3
 800fbf6:	2b00      	cmp	r3, #0
 800fbf8:	f040 80a1 	bne.w	800fd3e <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	681b      	ldr	r3, [r3, #0]
 800fc00:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fc04:	e853 3f00 	ldrex	r3, [r3]
 800fc08:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800fc0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fc0c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800fc10:	66bb      	str	r3, [r7, #104]	; 0x68
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	681b      	ldr	r3, [r3, #0]
 800fc16:	461a      	mov	r2, r3
 800fc18:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fc1a:	65bb      	str	r3, [r7, #88]	; 0x58
 800fc1c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc1e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800fc20:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800fc22:	e841 2300 	strex	r3, r2, [r1]
 800fc26:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800fc28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fc2a:	2b00      	cmp	r3, #0
 800fc2c:	d1e6      	bne.n	800fbfc <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fc2e:	687b      	ldr	r3, [r7, #4]
 800fc30:	681b      	ldr	r3, [r3, #0]
 800fc32:	3308      	adds	r3, #8
 800fc34:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc38:	e853 3f00 	ldrex	r3, [r3]
 800fc3c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800fc3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fc40:	f023 0301 	bic.w	r3, r3, #1
 800fc44:	667b      	str	r3, [r7, #100]	; 0x64
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	681b      	ldr	r3, [r3, #0]
 800fc4a:	3308      	adds	r3, #8
 800fc4c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800fc4e:	647a      	str	r2, [r7, #68]	; 0x44
 800fc50:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc52:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800fc54:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fc56:	e841 2300 	strex	r3, r2, [r1]
 800fc5a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800fc5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fc5e:	2b00      	cmp	r3, #0
 800fc60:	d1e5      	bne.n	800fc2e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	2220      	movs	r2, #32
 800fc66:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	2200      	movs	r2, #0
 800fc6e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	2200      	movs	r2, #0
 800fc74:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	681b      	ldr	r3, [r3, #0]
 800fc7a:	4a33      	ldr	r2, [pc, #204]	; (800fd48 <UART_RxISR_8BIT+0x1b4>)
 800fc7c:	4293      	cmp	r3, r2
 800fc7e:	d01f      	beq.n	800fcc0 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	681b      	ldr	r3, [r3, #0]
 800fc84:	685b      	ldr	r3, [r3, #4]
 800fc86:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800fc8a:	2b00      	cmp	r3, #0
 800fc8c:	d018      	beq.n	800fcc0 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	681b      	ldr	r3, [r3, #0]
 800fc92:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc96:	e853 3f00 	ldrex	r3, [r3]
 800fc9a:	623b      	str	r3, [r7, #32]
   return(result);
 800fc9c:	6a3b      	ldr	r3, [r7, #32]
 800fc9e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800fca2:	663b      	str	r3, [r7, #96]	; 0x60
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	681b      	ldr	r3, [r3, #0]
 800fca8:	461a      	mov	r2, r3
 800fcaa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fcac:	633b      	str	r3, [r7, #48]	; 0x30
 800fcae:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fcb0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fcb2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fcb4:	e841 2300 	strex	r3, r2, [r1]
 800fcb8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800fcba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcbc:	2b00      	cmp	r3, #0
 800fcbe:	d1e6      	bne.n	800fc8e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fcc4:	2b01      	cmp	r3, #1
 800fcc6:	d12e      	bne.n	800fd26 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	2200      	movs	r2, #0
 800fccc:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	681b      	ldr	r3, [r3, #0]
 800fcd2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fcd4:	693b      	ldr	r3, [r7, #16]
 800fcd6:	e853 3f00 	ldrex	r3, [r3]
 800fcda:	60fb      	str	r3, [r7, #12]
   return(result);
 800fcdc:	68fb      	ldr	r3, [r7, #12]
 800fcde:	f023 0310 	bic.w	r3, r3, #16
 800fce2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	681b      	ldr	r3, [r3, #0]
 800fce8:	461a      	mov	r2, r3
 800fcea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fcec:	61fb      	str	r3, [r7, #28]
 800fcee:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fcf0:	69b9      	ldr	r1, [r7, #24]
 800fcf2:	69fa      	ldr	r2, [r7, #28]
 800fcf4:	e841 2300 	strex	r3, r2, [r1]
 800fcf8:	617b      	str	r3, [r7, #20]
   return(result);
 800fcfa:	697b      	ldr	r3, [r7, #20]
 800fcfc:	2b00      	cmp	r3, #0
 800fcfe:	d1e6      	bne.n	800fcce <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	681b      	ldr	r3, [r3, #0]
 800fd04:	69db      	ldr	r3, [r3, #28]
 800fd06:	f003 0310 	and.w	r3, r3, #16
 800fd0a:	2b10      	cmp	r3, #16
 800fd0c:	d103      	bne.n	800fd16 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	681b      	ldr	r3, [r3, #0]
 800fd12:	2210      	movs	r2, #16
 800fd14:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800fd1c:	4619      	mov	r1, r3
 800fd1e:	6878      	ldr	r0, [r7, #4]
 800fd20:	f7fe fca4 	bl	800e66c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800fd24:	e00b      	b.n	800fd3e <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800fd26:	6878      	ldr	r0, [r7, #4]
 800fd28:	f7f1 fee4 	bl	8001af4 <HAL_UART_RxCpltCallback>
}
 800fd2c:	e007      	b.n	800fd3e <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	681b      	ldr	r3, [r3, #0]
 800fd32:	699a      	ldr	r2, [r3, #24]
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	681b      	ldr	r3, [r3, #0]
 800fd38:	f042 0208 	orr.w	r2, r2, #8
 800fd3c:	619a      	str	r2, [r3, #24]
}
 800fd3e:	bf00      	nop
 800fd40:	3770      	adds	r7, #112	; 0x70
 800fd42:	46bd      	mov	sp, r7
 800fd44:	bd80      	pop	{r7, pc}
 800fd46:	bf00      	nop
 800fd48:	58000c00 	.word	0x58000c00

0800fd4c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800fd4c:	b580      	push	{r7, lr}
 800fd4e:	b09c      	sub	sp, #112	; 0x70
 800fd50:	af00      	add	r7, sp, #0
 800fd52:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800fd5a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800fd5e:	687b      	ldr	r3, [r7, #4]
 800fd60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fd64:	2b22      	cmp	r3, #34	; 0x22
 800fd66:	f040 80be 	bne.w	800fee6 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	681b      	ldr	r3, [r3, #0]
 800fd6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd70:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fd78:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800fd7a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800fd7e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800fd82:	4013      	ands	r3, r2
 800fd84:	b29a      	uxth	r2, r3
 800fd86:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fd88:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fd8e:	1c9a      	adds	r2, r3, #2
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fd9a:	b29b      	uxth	r3, r3
 800fd9c:	3b01      	subs	r3, #1
 800fd9e:	b29a      	uxth	r2, r3
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fdac:	b29b      	uxth	r3, r3
 800fdae:	2b00      	cmp	r3, #0
 800fdb0:	f040 80a1 	bne.w	800fef6 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	681b      	ldr	r3, [r3, #0]
 800fdb8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fdba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fdbc:	e853 3f00 	ldrex	r3, [r3]
 800fdc0:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800fdc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fdc4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800fdc8:	667b      	str	r3, [r7, #100]	; 0x64
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	681b      	ldr	r3, [r3, #0]
 800fdce:	461a      	mov	r2, r3
 800fdd0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fdd2:	657b      	str	r3, [r7, #84]	; 0x54
 800fdd4:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fdd6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800fdd8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800fdda:	e841 2300 	strex	r3, r2, [r1]
 800fdde:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800fde0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fde2:	2b00      	cmp	r3, #0
 800fde4:	d1e6      	bne.n	800fdb4 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	681b      	ldr	r3, [r3, #0]
 800fdea:	3308      	adds	r3, #8
 800fdec:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fdee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fdf0:	e853 3f00 	ldrex	r3, [r3]
 800fdf4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800fdf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdf8:	f023 0301 	bic.w	r3, r3, #1
 800fdfc:	663b      	str	r3, [r7, #96]	; 0x60
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	681b      	ldr	r3, [r3, #0]
 800fe02:	3308      	adds	r3, #8
 800fe04:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800fe06:	643a      	str	r2, [r7, #64]	; 0x40
 800fe08:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe0a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800fe0c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800fe0e:	e841 2300 	strex	r3, r2, [r1]
 800fe12:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800fe14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe16:	2b00      	cmp	r3, #0
 800fe18:	d1e5      	bne.n	800fde6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800fe1a:	687b      	ldr	r3, [r7, #4]
 800fe1c:	2220      	movs	r2, #32
 800fe1e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	2200      	movs	r2, #0
 800fe26:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	2200      	movs	r2, #0
 800fe2c:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	681b      	ldr	r3, [r3, #0]
 800fe32:	4a33      	ldr	r2, [pc, #204]	; (800ff00 <UART_RxISR_16BIT+0x1b4>)
 800fe34:	4293      	cmp	r3, r2
 800fe36:	d01f      	beq.n	800fe78 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	681b      	ldr	r3, [r3, #0]
 800fe3c:	685b      	ldr	r3, [r3, #4]
 800fe3e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800fe42:	2b00      	cmp	r3, #0
 800fe44:	d018      	beq.n	800fe78 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	681b      	ldr	r3, [r3, #0]
 800fe4a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe4c:	6a3b      	ldr	r3, [r7, #32]
 800fe4e:	e853 3f00 	ldrex	r3, [r3]
 800fe52:	61fb      	str	r3, [r7, #28]
   return(result);
 800fe54:	69fb      	ldr	r3, [r7, #28]
 800fe56:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800fe5a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	681b      	ldr	r3, [r3, #0]
 800fe60:	461a      	mov	r2, r3
 800fe62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fe64:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fe66:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe68:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fe6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fe6c:	e841 2300 	strex	r3, r2, [r1]
 800fe70:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800fe72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe74:	2b00      	cmp	r3, #0
 800fe76:	d1e6      	bne.n	800fe46 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fe7c:	2b01      	cmp	r3, #1
 800fe7e:	d12e      	bne.n	800fede <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	2200      	movs	r2, #0
 800fe84:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fe86:	687b      	ldr	r3, [r7, #4]
 800fe88:	681b      	ldr	r3, [r3, #0]
 800fe8a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe8c:	68fb      	ldr	r3, [r7, #12]
 800fe8e:	e853 3f00 	ldrex	r3, [r3]
 800fe92:	60bb      	str	r3, [r7, #8]
   return(result);
 800fe94:	68bb      	ldr	r3, [r7, #8]
 800fe96:	f023 0310 	bic.w	r3, r3, #16
 800fe9a:	65bb      	str	r3, [r7, #88]	; 0x58
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	681b      	ldr	r3, [r3, #0]
 800fea0:	461a      	mov	r2, r3
 800fea2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fea4:	61bb      	str	r3, [r7, #24]
 800fea6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fea8:	6979      	ldr	r1, [r7, #20]
 800feaa:	69ba      	ldr	r2, [r7, #24]
 800feac:	e841 2300 	strex	r3, r2, [r1]
 800feb0:	613b      	str	r3, [r7, #16]
   return(result);
 800feb2:	693b      	ldr	r3, [r7, #16]
 800feb4:	2b00      	cmp	r3, #0
 800feb6:	d1e6      	bne.n	800fe86 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	681b      	ldr	r3, [r3, #0]
 800febc:	69db      	ldr	r3, [r3, #28]
 800febe:	f003 0310 	and.w	r3, r3, #16
 800fec2:	2b10      	cmp	r3, #16
 800fec4:	d103      	bne.n	800fece <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	681b      	ldr	r3, [r3, #0]
 800feca:	2210      	movs	r2, #16
 800fecc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800fed4:	4619      	mov	r1, r3
 800fed6:	6878      	ldr	r0, [r7, #4]
 800fed8:	f7fe fbc8 	bl	800e66c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800fedc:	e00b      	b.n	800fef6 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800fede:	6878      	ldr	r0, [r7, #4]
 800fee0:	f7f1 fe08 	bl	8001af4 <HAL_UART_RxCpltCallback>
}
 800fee4:	e007      	b.n	800fef6 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	681b      	ldr	r3, [r3, #0]
 800feea:	699a      	ldr	r2, [r3, #24]
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	681b      	ldr	r3, [r3, #0]
 800fef0:	f042 0208 	orr.w	r2, r2, #8
 800fef4:	619a      	str	r2, [r3, #24]
}
 800fef6:	bf00      	nop
 800fef8:	3770      	adds	r7, #112	; 0x70
 800fefa:	46bd      	mov	sp, r7
 800fefc:	bd80      	pop	{r7, pc}
 800fefe:	bf00      	nop
 800ff00:	58000c00 	.word	0x58000c00

0800ff04 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800ff04:	b580      	push	{r7, lr}
 800ff06:	b0ac      	sub	sp, #176	; 0xb0
 800ff08:	af00      	add	r7, sp, #0
 800ff0a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ff12:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	681b      	ldr	r3, [r3, #0]
 800ff1a:	69db      	ldr	r3, [r3, #28]
 800ff1c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	681b      	ldr	r3, [r3, #0]
 800ff24:	681b      	ldr	r3, [r3, #0]
 800ff26:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	681b      	ldr	r3, [r3, #0]
 800ff2e:	689b      	ldr	r3, [r3, #8]
 800ff30:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ff3a:	2b22      	cmp	r3, #34	; 0x22
 800ff3c:	f040 8180 	bne.w	8010240 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800ff46:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ff4a:	e123      	b.n	8010194 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	681b      	ldr	r3, [r3, #0]
 800ff50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff52:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800ff56:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800ff5a:	b2d9      	uxtb	r1, r3
 800ff5c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800ff60:	b2da      	uxtb	r2, r3
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ff66:	400a      	ands	r2, r1
 800ff68:	b2d2      	uxtb	r2, r2
 800ff6a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ff70:	1c5a      	adds	r2, r3, #1
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800ff76:	687b      	ldr	r3, [r7, #4]
 800ff78:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ff7c:	b29b      	uxth	r3, r3
 800ff7e:	3b01      	subs	r3, #1
 800ff80:	b29a      	uxth	r2, r3
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	681b      	ldr	r3, [r3, #0]
 800ff8c:	69db      	ldr	r3, [r3, #28]
 800ff8e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800ff92:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ff96:	f003 0307 	and.w	r3, r3, #7
 800ff9a:	2b00      	cmp	r3, #0
 800ff9c:	d053      	beq.n	8010046 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ff9e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ffa2:	f003 0301 	and.w	r3, r3, #1
 800ffa6:	2b00      	cmp	r3, #0
 800ffa8:	d011      	beq.n	800ffce <UART_RxISR_8BIT_FIFOEN+0xca>
 800ffaa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800ffae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ffb2:	2b00      	cmp	r3, #0
 800ffb4:	d00b      	beq.n	800ffce <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	681b      	ldr	r3, [r3, #0]
 800ffba:	2201      	movs	r2, #1
 800ffbc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ffc4:	f043 0201 	orr.w	r2, r3, #1
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ffce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ffd2:	f003 0302 	and.w	r3, r3, #2
 800ffd6:	2b00      	cmp	r3, #0
 800ffd8:	d011      	beq.n	800fffe <UART_RxISR_8BIT_FIFOEN+0xfa>
 800ffda:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ffde:	f003 0301 	and.w	r3, r3, #1
 800ffe2:	2b00      	cmp	r3, #0
 800ffe4:	d00b      	beq.n	800fffe <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	681b      	ldr	r3, [r3, #0]
 800ffea:	2202      	movs	r2, #2
 800ffec:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fff4:	f043 0204 	orr.w	r2, r3, #4
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800fffe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010002:	f003 0304 	and.w	r3, r3, #4
 8010006:	2b00      	cmp	r3, #0
 8010008:	d011      	beq.n	801002e <UART_RxISR_8BIT_FIFOEN+0x12a>
 801000a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801000e:	f003 0301 	and.w	r3, r3, #1
 8010012:	2b00      	cmp	r3, #0
 8010014:	d00b      	beq.n	801002e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	681b      	ldr	r3, [r3, #0]
 801001a:	2204      	movs	r2, #4
 801001c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010024:	f043 0202 	orr.w	r2, r3, #2
 8010028:	687b      	ldr	r3, [r7, #4]
 801002a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010034:	2b00      	cmp	r3, #0
 8010036:	d006      	beq.n	8010046 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8010038:	6878      	ldr	r0, [r7, #4]
 801003a:	f7fe fb0d 	bl	800e658 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	2200      	movs	r2, #0
 8010042:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801004c:	b29b      	uxth	r3, r3
 801004e:	2b00      	cmp	r3, #0
 8010050:	f040 80a0 	bne.w	8010194 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	681b      	ldr	r3, [r3, #0]
 8010058:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801005a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801005c:	e853 3f00 	ldrex	r3, [r3]
 8010060:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8010062:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010064:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010068:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	681b      	ldr	r3, [r3, #0]
 8010070:	461a      	mov	r2, r3
 8010072:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010076:	67fb      	str	r3, [r7, #124]	; 0x7c
 8010078:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801007a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 801007c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801007e:	e841 2300 	strex	r3, r2, [r1]
 8010082:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8010084:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010086:	2b00      	cmp	r3, #0
 8010088:	d1e4      	bne.n	8010054 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	681b      	ldr	r3, [r3, #0]
 801008e:	3308      	adds	r3, #8
 8010090:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010092:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010094:	e853 3f00 	ldrex	r3, [r3]
 8010098:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 801009a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801009c:	4b6e      	ldr	r3, [pc, #440]	; (8010258 <UART_RxISR_8BIT_FIFOEN+0x354>)
 801009e:	4013      	ands	r3, r2
 80100a0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	681b      	ldr	r3, [r3, #0]
 80100a8:	3308      	adds	r3, #8
 80100aa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80100ae:	66ba      	str	r2, [r7, #104]	; 0x68
 80100b0:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80100b2:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80100b4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80100b6:	e841 2300 	strex	r3, r2, [r1]
 80100ba:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80100bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80100be:	2b00      	cmp	r3, #0
 80100c0:	d1e3      	bne.n	801008a <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	2220      	movs	r2, #32
 80100c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	2200      	movs	r2, #0
 80100ce:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	2200      	movs	r2, #0
 80100d4:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	681b      	ldr	r3, [r3, #0]
 80100da:	4a60      	ldr	r2, [pc, #384]	; (801025c <UART_RxISR_8BIT_FIFOEN+0x358>)
 80100dc:	4293      	cmp	r3, r2
 80100de:	d021      	beq.n	8010124 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	681b      	ldr	r3, [r3, #0]
 80100e4:	685b      	ldr	r3, [r3, #4]
 80100e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80100ea:	2b00      	cmp	r3, #0
 80100ec:	d01a      	beq.n	8010124 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80100ee:	687b      	ldr	r3, [r7, #4]
 80100f0:	681b      	ldr	r3, [r3, #0]
 80100f2:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80100f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80100f6:	e853 3f00 	ldrex	r3, [r3]
 80100fa:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80100fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80100fe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8010102:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	681b      	ldr	r3, [r3, #0]
 801010a:	461a      	mov	r2, r3
 801010c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010110:	657b      	str	r3, [r7, #84]	; 0x54
 8010112:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010114:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010116:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010118:	e841 2300 	strex	r3, r2, [r1]
 801011c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 801011e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010120:	2b00      	cmp	r3, #0
 8010122:	d1e4      	bne.n	80100ee <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010128:	2b01      	cmp	r3, #1
 801012a:	d130      	bne.n	801018e <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	2200      	movs	r2, #0
 8010130:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	681b      	ldr	r3, [r3, #0]
 8010136:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010138:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801013a:	e853 3f00 	ldrex	r3, [r3]
 801013e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8010140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010142:	f023 0310 	bic.w	r3, r3, #16
 8010146:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	681b      	ldr	r3, [r3, #0]
 801014e:	461a      	mov	r2, r3
 8010150:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010154:	643b      	str	r3, [r7, #64]	; 0x40
 8010156:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010158:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801015a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801015c:	e841 2300 	strex	r3, r2, [r1]
 8010160:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010164:	2b00      	cmp	r3, #0
 8010166:	d1e4      	bne.n	8010132 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	681b      	ldr	r3, [r3, #0]
 801016c:	69db      	ldr	r3, [r3, #28]
 801016e:	f003 0310 	and.w	r3, r3, #16
 8010172:	2b10      	cmp	r3, #16
 8010174:	d103      	bne.n	801017e <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	681b      	ldr	r3, [r3, #0]
 801017a:	2210      	movs	r2, #16
 801017c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801017e:	687b      	ldr	r3, [r7, #4]
 8010180:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010184:	4619      	mov	r1, r3
 8010186:	6878      	ldr	r0, [r7, #4]
 8010188:	f7fe fa70 	bl	800e66c <HAL_UARTEx_RxEventCallback>
 801018c:	e002      	b.n	8010194 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 801018e:	6878      	ldr	r0, [r7, #4]
 8010190:	f7f1 fcb0 	bl	8001af4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8010194:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8010198:	2b00      	cmp	r3, #0
 801019a:	d006      	beq.n	80101aa <UART_RxISR_8BIT_FIFOEN+0x2a6>
 801019c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80101a0:	f003 0320 	and.w	r3, r3, #32
 80101a4:	2b00      	cmp	r3, #0
 80101a6:	f47f aed1 	bne.w	800ff4c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80101b0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80101b4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80101b8:	2b00      	cmp	r3, #0
 80101ba:	d049      	beq.n	8010250 <UART_RxISR_8BIT_FIFOEN+0x34c>
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80101c2:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 80101c6:	429a      	cmp	r2, r3
 80101c8:	d242      	bcs.n	8010250 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	681b      	ldr	r3, [r3, #0]
 80101ce:	3308      	adds	r3, #8
 80101d0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80101d2:	6a3b      	ldr	r3, [r7, #32]
 80101d4:	e853 3f00 	ldrex	r3, [r3]
 80101d8:	61fb      	str	r3, [r7, #28]
   return(result);
 80101da:	69fb      	ldr	r3, [r7, #28]
 80101dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80101e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	681b      	ldr	r3, [r3, #0]
 80101e8:	3308      	adds	r3, #8
 80101ea:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80101ee:	62fa      	str	r2, [r7, #44]	; 0x2c
 80101f0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80101f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80101f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80101f6:	e841 2300 	strex	r3, r2, [r1]
 80101fa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80101fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101fe:	2b00      	cmp	r3, #0
 8010200:	d1e3      	bne.n	80101ca <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	4a16      	ldr	r2, [pc, #88]	; (8010260 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8010206:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	681b      	ldr	r3, [r3, #0]
 801020c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801020e:	68fb      	ldr	r3, [r7, #12]
 8010210:	e853 3f00 	ldrex	r3, [r3]
 8010214:	60bb      	str	r3, [r7, #8]
   return(result);
 8010216:	68bb      	ldr	r3, [r7, #8]
 8010218:	f043 0320 	orr.w	r3, r3, #32
 801021c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	681b      	ldr	r3, [r3, #0]
 8010224:	461a      	mov	r2, r3
 8010226:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801022a:	61bb      	str	r3, [r7, #24]
 801022c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801022e:	6979      	ldr	r1, [r7, #20]
 8010230:	69ba      	ldr	r2, [r7, #24]
 8010232:	e841 2300 	strex	r3, r2, [r1]
 8010236:	613b      	str	r3, [r7, #16]
   return(result);
 8010238:	693b      	ldr	r3, [r7, #16]
 801023a:	2b00      	cmp	r3, #0
 801023c:	d1e4      	bne.n	8010208 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801023e:	e007      	b.n	8010250 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	681b      	ldr	r3, [r3, #0]
 8010244:	699a      	ldr	r2, [r3, #24]
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	681b      	ldr	r3, [r3, #0]
 801024a:	f042 0208 	orr.w	r2, r2, #8
 801024e:	619a      	str	r2, [r3, #24]
}
 8010250:	bf00      	nop
 8010252:	37b0      	adds	r7, #176	; 0xb0
 8010254:	46bd      	mov	sp, r7
 8010256:	bd80      	pop	{r7, pc}
 8010258:	effffffe 	.word	0xeffffffe
 801025c:	58000c00 	.word	0x58000c00
 8010260:	0800fb95 	.word	0x0800fb95

08010264 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8010264:	b580      	push	{r7, lr}
 8010266:	b0ae      	sub	sp, #184	; 0xb8
 8010268:	af00      	add	r7, sp, #0
 801026a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010272:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	681b      	ldr	r3, [r3, #0]
 801027a:	69db      	ldr	r3, [r3, #28]
 801027c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	681b      	ldr	r3, [r3, #0]
 8010284:	681b      	ldr	r3, [r3, #0]
 8010286:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	681b      	ldr	r3, [r3, #0]
 801028e:	689b      	ldr	r3, [r3, #8]
 8010290:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801029a:	2b22      	cmp	r3, #34	; 0x22
 801029c:	f040 8184 	bne.w	80105a8 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80102a6:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80102aa:	e127      	b.n	80104fc <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	681b      	ldr	r3, [r3, #0]
 80102b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80102b2:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80102ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 80102be:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 80102c2:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 80102c6:	4013      	ands	r3, r2
 80102c8:	b29a      	uxth	r2, r3
 80102ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80102ce:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80102d4:	1c9a      	adds	r2, r3, #2
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80102e0:	b29b      	uxth	r3, r3
 80102e2:	3b01      	subs	r3, #1
 80102e4:	b29a      	uxth	r2, r3
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	681b      	ldr	r3, [r3, #0]
 80102f0:	69db      	ldr	r3, [r3, #28]
 80102f2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80102f6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80102fa:	f003 0307 	and.w	r3, r3, #7
 80102fe:	2b00      	cmp	r3, #0
 8010300:	d053      	beq.n	80103aa <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8010302:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8010306:	f003 0301 	and.w	r3, r3, #1
 801030a:	2b00      	cmp	r3, #0
 801030c:	d011      	beq.n	8010332 <UART_RxISR_16BIT_FIFOEN+0xce>
 801030e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010312:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010316:	2b00      	cmp	r3, #0
 8010318:	d00b      	beq.n	8010332 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	681b      	ldr	r3, [r3, #0]
 801031e:	2201      	movs	r2, #1
 8010320:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010328:	f043 0201 	orr.w	r2, r3, #1
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010332:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8010336:	f003 0302 	and.w	r3, r3, #2
 801033a:	2b00      	cmp	r3, #0
 801033c:	d011      	beq.n	8010362 <UART_RxISR_16BIT_FIFOEN+0xfe>
 801033e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010342:	f003 0301 	and.w	r3, r3, #1
 8010346:	2b00      	cmp	r3, #0
 8010348:	d00b      	beq.n	8010362 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801034a:	687b      	ldr	r3, [r7, #4]
 801034c:	681b      	ldr	r3, [r3, #0]
 801034e:	2202      	movs	r2, #2
 8010350:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010352:	687b      	ldr	r3, [r7, #4]
 8010354:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010358:	f043 0204 	orr.w	r2, r3, #4
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010362:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8010366:	f003 0304 	and.w	r3, r3, #4
 801036a:	2b00      	cmp	r3, #0
 801036c:	d011      	beq.n	8010392 <UART_RxISR_16BIT_FIFOEN+0x12e>
 801036e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010372:	f003 0301 	and.w	r3, r3, #1
 8010376:	2b00      	cmp	r3, #0
 8010378:	d00b      	beq.n	8010392 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801037a:	687b      	ldr	r3, [r7, #4]
 801037c:	681b      	ldr	r3, [r3, #0]
 801037e:	2204      	movs	r2, #4
 8010380:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010388:	f043 0202 	orr.w	r2, r3, #2
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010398:	2b00      	cmp	r3, #0
 801039a:	d006      	beq.n	80103aa <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801039c:	6878      	ldr	r0, [r7, #4]
 801039e:	f7fe f95b 	bl	800e658 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80103a2:	687b      	ldr	r3, [r7, #4]
 80103a4:	2200      	movs	r2, #0
 80103a6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80103b0:	b29b      	uxth	r3, r3
 80103b2:	2b00      	cmp	r3, #0
 80103b4:	f040 80a2 	bne.w	80104fc <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	681b      	ldr	r3, [r3, #0]
 80103bc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80103be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80103c0:	e853 3f00 	ldrex	r3, [r3]
 80103c4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80103c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80103c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80103cc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	681b      	ldr	r3, [r3, #0]
 80103d4:	461a      	mov	r2, r3
 80103d6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80103da:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80103de:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80103e0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80103e2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80103e6:	e841 2300 	strex	r3, r2, [r1]
 80103ea:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80103ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80103ee:	2b00      	cmp	r3, #0
 80103f0:	d1e2      	bne.n	80103b8 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	681b      	ldr	r3, [r3, #0]
 80103f6:	3308      	adds	r3, #8
 80103f8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80103fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80103fc:	e853 3f00 	ldrex	r3, [r3]
 8010400:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8010402:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8010404:	4b6e      	ldr	r3, [pc, #440]	; (80105c0 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 8010406:	4013      	ands	r3, r2
 8010408:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	681b      	ldr	r3, [r3, #0]
 8010410:	3308      	adds	r3, #8
 8010412:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8010416:	66fa      	str	r2, [r7, #108]	; 0x6c
 8010418:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801041a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 801041c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801041e:	e841 2300 	strex	r3, r2, [r1]
 8010422:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8010424:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010426:	2b00      	cmp	r3, #0
 8010428:	d1e3      	bne.n	80103f2 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	2220      	movs	r2, #32
 801042e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	2200      	movs	r2, #0
 8010436:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010438:	687b      	ldr	r3, [r7, #4]
 801043a:	2200      	movs	r2, #0
 801043c:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801043e:	687b      	ldr	r3, [r7, #4]
 8010440:	681b      	ldr	r3, [r3, #0]
 8010442:	4a60      	ldr	r2, [pc, #384]	; (80105c4 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8010444:	4293      	cmp	r3, r2
 8010446:	d021      	beq.n	801048c <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	681b      	ldr	r3, [r3, #0]
 801044c:	685b      	ldr	r3, [r3, #4]
 801044e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010452:	2b00      	cmp	r3, #0
 8010454:	d01a      	beq.n	801048c <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	681b      	ldr	r3, [r3, #0]
 801045a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801045c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801045e:	e853 3f00 	ldrex	r3, [r3]
 8010462:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8010464:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010466:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801046a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	681b      	ldr	r3, [r3, #0]
 8010472:	461a      	mov	r2, r3
 8010474:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010478:	65bb      	str	r3, [r7, #88]	; 0x58
 801047a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801047c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801047e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010480:	e841 2300 	strex	r3, r2, [r1]
 8010484:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8010486:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010488:	2b00      	cmp	r3, #0
 801048a:	d1e4      	bne.n	8010456 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010490:	2b01      	cmp	r3, #1
 8010492:	d130      	bne.n	80104f6 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	2200      	movs	r2, #0
 8010498:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	681b      	ldr	r3, [r3, #0]
 801049e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80104a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104a2:	e853 3f00 	ldrex	r3, [r3]
 80104a6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80104a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80104aa:	f023 0310 	bic.w	r3, r3, #16
 80104ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	681b      	ldr	r3, [r3, #0]
 80104b6:	461a      	mov	r2, r3
 80104b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80104bc:	647b      	str	r3, [r7, #68]	; 0x44
 80104be:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80104c0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80104c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80104c4:	e841 2300 	strex	r3, r2, [r1]
 80104c8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80104ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80104cc:	2b00      	cmp	r3, #0
 80104ce:	d1e4      	bne.n	801049a <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	681b      	ldr	r3, [r3, #0]
 80104d4:	69db      	ldr	r3, [r3, #28]
 80104d6:	f003 0310 	and.w	r3, r3, #16
 80104da:	2b10      	cmp	r3, #16
 80104dc:	d103      	bne.n	80104e6 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	681b      	ldr	r3, [r3, #0]
 80104e2:	2210      	movs	r2, #16
 80104e4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80104ec:	4619      	mov	r1, r3
 80104ee:	6878      	ldr	r0, [r7, #4]
 80104f0:	f7fe f8bc 	bl	800e66c <HAL_UARTEx_RxEventCallback>
 80104f4:	e002      	b.n	80104fc <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80104f6:	6878      	ldr	r0, [r7, #4]
 80104f8:	f7f1 fafc 	bl	8001af4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80104fc:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8010500:	2b00      	cmp	r3, #0
 8010502:	d006      	beq.n	8010512 <UART_RxISR_16BIT_FIFOEN+0x2ae>
 8010504:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8010508:	f003 0320 	and.w	r3, r3, #32
 801050c:	2b00      	cmp	r3, #0
 801050e:	f47f aecd 	bne.w	80102ac <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010518:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 801051c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8010520:	2b00      	cmp	r3, #0
 8010522:	d049      	beq.n	80105b8 <UART_RxISR_16BIT_FIFOEN+0x354>
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801052a:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 801052e:	429a      	cmp	r2, r3
 8010530:	d242      	bcs.n	80105b8 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	681b      	ldr	r3, [r3, #0]
 8010536:	3308      	adds	r3, #8
 8010538:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801053a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801053c:	e853 3f00 	ldrex	r3, [r3]
 8010540:	623b      	str	r3, [r7, #32]
   return(result);
 8010542:	6a3b      	ldr	r3, [r7, #32]
 8010544:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8010548:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	681b      	ldr	r3, [r3, #0]
 8010550:	3308      	adds	r3, #8
 8010552:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8010556:	633a      	str	r2, [r7, #48]	; 0x30
 8010558:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801055a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801055c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801055e:	e841 2300 	strex	r3, r2, [r1]
 8010562:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010566:	2b00      	cmp	r3, #0
 8010568:	d1e3      	bne.n	8010532 <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	4a16      	ldr	r2, [pc, #88]	; (80105c8 <UART_RxISR_16BIT_FIFOEN+0x364>)
 801056e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8010570:	687b      	ldr	r3, [r7, #4]
 8010572:	681b      	ldr	r3, [r3, #0]
 8010574:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010576:	693b      	ldr	r3, [r7, #16]
 8010578:	e853 3f00 	ldrex	r3, [r3]
 801057c:	60fb      	str	r3, [r7, #12]
   return(result);
 801057e:	68fb      	ldr	r3, [r7, #12]
 8010580:	f043 0320 	orr.w	r3, r3, #32
 8010584:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	681b      	ldr	r3, [r3, #0]
 801058c:	461a      	mov	r2, r3
 801058e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010592:	61fb      	str	r3, [r7, #28]
 8010594:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010596:	69b9      	ldr	r1, [r7, #24]
 8010598:	69fa      	ldr	r2, [r7, #28]
 801059a:	e841 2300 	strex	r3, r2, [r1]
 801059e:	617b      	str	r3, [r7, #20]
   return(result);
 80105a0:	697b      	ldr	r3, [r7, #20]
 80105a2:	2b00      	cmp	r3, #0
 80105a4:	d1e4      	bne.n	8010570 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80105a6:	e007      	b.n	80105b8 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	681b      	ldr	r3, [r3, #0]
 80105ac:	699a      	ldr	r2, [r3, #24]
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	681b      	ldr	r3, [r3, #0]
 80105b2:	f042 0208 	orr.w	r2, r2, #8
 80105b6:	619a      	str	r2, [r3, #24]
}
 80105b8:	bf00      	nop
 80105ba:	37b8      	adds	r7, #184	; 0xb8
 80105bc:	46bd      	mov	sp, r7
 80105be:	bd80      	pop	{r7, pc}
 80105c0:	effffffe 	.word	0xeffffffe
 80105c4:	58000c00 	.word	0x58000c00
 80105c8:	0800fd4d 	.word	0x0800fd4d

080105cc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80105cc:	b480      	push	{r7}
 80105ce:	b083      	sub	sp, #12
 80105d0:	af00      	add	r7, sp, #0
 80105d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80105d4:	bf00      	nop
 80105d6:	370c      	adds	r7, #12
 80105d8:	46bd      	mov	sp, r7
 80105da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105de:	4770      	bx	lr

080105e0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80105e0:	b480      	push	{r7}
 80105e2:	b083      	sub	sp, #12
 80105e4:	af00      	add	r7, sp, #0
 80105e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80105e8:	bf00      	nop
 80105ea:	370c      	adds	r7, #12
 80105ec:	46bd      	mov	sp, r7
 80105ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105f2:	4770      	bx	lr

080105f4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80105f4:	b480      	push	{r7}
 80105f6:	b083      	sub	sp, #12
 80105f8:	af00      	add	r7, sp, #0
 80105fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80105fc:	bf00      	nop
 80105fe:	370c      	adds	r7, #12
 8010600:	46bd      	mov	sp, r7
 8010602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010606:	4770      	bx	lr

08010608 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8010608:	b480      	push	{r7}
 801060a:	b085      	sub	sp, #20
 801060c:	af00      	add	r7, sp, #0
 801060e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010610:	687b      	ldr	r3, [r7, #4]
 8010612:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8010616:	2b01      	cmp	r3, #1
 8010618:	d101      	bne.n	801061e <HAL_UARTEx_DisableFifoMode+0x16>
 801061a:	2302      	movs	r3, #2
 801061c:	e027      	b.n	801066e <HAL_UARTEx_DisableFifoMode+0x66>
 801061e:	687b      	ldr	r3, [r7, #4]
 8010620:	2201      	movs	r2, #1
 8010622:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010626:	687b      	ldr	r3, [r7, #4]
 8010628:	2224      	movs	r2, #36	; 0x24
 801062a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801062e:	687b      	ldr	r3, [r7, #4]
 8010630:	681b      	ldr	r3, [r3, #0]
 8010632:	681b      	ldr	r3, [r3, #0]
 8010634:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010636:	687b      	ldr	r3, [r7, #4]
 8010638:	681b      	ldr	r3, [r3, #0]
 801063a:	681a      	ldr	r2, [r3, #0]
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	681b      	ldr	r3, [r3, #0]
 8010640:	f022 0201 	bic.w	r2, r2, #1
 8010644:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8010646:	68fb      	ldr	r3, [r7, #12]
 8010648:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 801064c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	2200      	movs	r2, #0
 8010652:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	681b      	ldr	r3, [r3, #0]
 8010658:	68fa      	ldr	r2, [r7, #12]
 801065a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	2220      	movs	r2, #32
 8010660:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	2200      	movs	r2, #0
 8010668:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801066c:	2300      	movs	r3, #0
}
 801066e:	4618      	mov	r0, r3
 8010670:	3714      	adds	r7, #20
 8010672:	46bd      	mov	sp, r7
 8010674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010678:	4770      	bx	lr

0801067a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801067a:	b580      	push	{r7, lr}
 801067c:	b084      	sub	sp, #16
 801067e:	af00      	add	r7, sp, #0
 8010680:	6078      	str	r0, [r7, #4]
 8010682:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010684:	687b      	ldr	r3, [r7, #4]
 8010686:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801068a:	2b01      	cmp	r3, #1
 801068c:	d101      	bne.n	8010692 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 801068e:	2302      	movs	r3, #2
 8010690:	e02d      	b.n	80106ee <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	2201      	movs	r2, #1
 8010696:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	2224      	movs	r2, #36	; 0x24
 801069e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	681b      	ldr	r3, [r3, #0]
 80106a6:	681b      	ldr	r3, [r3, #0]
 80106a8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	681b      	ldr	r3, [r3, #0]
 80106ae:	681a      	ldr	r2, [r3, #0]
 80106b0:	687b      	ldr	r3, [r7, #4]
 80106b2:	681b      	ldr	r3, [r3, #0]
 80106b4:	f022 0201 	bic.w	r2, r2, #1
 80106b8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	681b      	ldr	r3, [r3, #0]
 80106be:	689b      	ldr	r3, [r3, #8]
 80106c0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	681b      	ldr	r3, [r3, #0]
 80106c8:	683a      	ldr	r2, [r7, #0]
 80106ca:	430a      	orrs	r2, r1
 80106cc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80106ce:	6878      	ldr	r0, [r7, #4]
 80106d0:	f000 f850 	bl	8010774 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80106d4:	687b      	ldr	r3, [r7, #4]
 80106d6:	681b      	ldr	r3, [r3, #0]
 80106d8:	68fa      	ldr	r2, [r7, #12]
 80106da:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	2220      	movs	r2, #32
 80106e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	2200      	movs	r2, #0
 80106e8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80106ec:	2300      	movs	r3, #0
}
 80106ee:	4618      	mov	r0, r3
 80106f0:	3710      	adds	r7, #16
 80106f2:	46bd      	mov	sp, r7
 80106f4:	bd80      	pop	{r7, pc}

080106f6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80106f6:	b580      	push	{r7, lr}
 80106f8:	b084      	sub	sp, #16
 80106fa:	af00      	add	r7, sp, #0
 80106fc:	6078      	str	r0, [r7, #4]
 80106fe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010700:	687b      	ldr	r3, [r7, #4]
 8010702:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8010706:	2b01      	cmp	r3, #1
 8010708:	d101      	bne.n	801070e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801070a:	2302      	movs	r3, #2
 801070c:	e02d      	b.n	801076a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	2201      	movs	r2, #1
 8010712:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010716:	687b      	ldr	r3, [r7, #4]
 8010718:	2224      	movs	r2, #36	; 0x24
 801071a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801071e:	687b      	ldr	r3, [r7, #4]
 8010720:	681b      	ldr	r3, [r3, #0]
 8010722:	681b      	ldr	r3, [r3, #0]
 8010724:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010726:	687b      	ldr	r3, [r7, #4]
 8010728:	681b      	ldr	r3, [r3, #0]
 801072a:	681a      	ldr	r2, [r3, #0]
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	681b      	ldr	r3, [r3, #0]
 8010730:	f022 0201 	bic.w	r2, r2, #1
 8010734:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8010736:	687b      	ldr	r3, [r7, #4]
 8010738:	681b      	ldr	r3, [r3, #0]
 801073a:	689b      	ldr	r3, [r3, #8]
 801073c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8010740:	687b      	ldr	r3, [r7, #4]
 8010742:	681b      	ldr	r3, [r3, #0]
 8010744:	683a      	ldr	r2, [r7, #0]
 8010746:	430a      	orrs	r2, r1
 8010748:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801074a:	6878      	ldr	r0, [r7, #4]
 801074c:	f000 f812 	bl	8010774 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010750:	687b      	ldr	r3, [r7, #4]
 8010752:	681b      	ldr	r3, [r3, #0]
 8010754:	68fa      	ldr	r2, [r7, #12]
 8010756:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010758:	687b      	ldr	r3, [r7, #4]
 801075a:	2220      	movs	r2, #32
 801075c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010760:	687b      	ldr	r3, [r7, #4]
 8010762:	2200      	movs	r2, #0
 8010764:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8010768:	2300      	movs	r3, #0
}
 801076a:	4618      	mov	r0, r3
 801076c:	3710      	adds	r7, #16
 801076e:	46bd      	mov	sp, r7
 8010770:	bd80      	pop	{r7, pc}
	...

08010774 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8010774:	b480      	push	{r7}
 8010776:	b085      	sub	sp, #20
 8010778:	af00      	add	r7, sp, #0
 801077a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010780:	2b00      	cmp	r3, #0
 8010782:	d108      	bne.n	8010796 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8010784:	687b      	ldr	r3, [r7, #4]
 8010786:	2201      	movs	r2, #1
 8010788:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	2201      	movs	r2, #1
 8010790:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8010794:	e031      	b.n	80107fa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8010796:	2310      	movs	r3, #16
 8010798:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801079a:	2310      	movs	r3, #16
 801079c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801079e:	687b      	ldr	r3, [r7, #4]
 80107a0:	681b      	ldr	r3, [r3, #0]
 80107a2:	689b      	ldr	r3, [r3, #8]
 80107a4:	0e5b      	lsrs	r3, r3, #25
 80107a6:	b2db      	uxtb	r3, r3
 80107a8:	f003 0307 	and.w	r3, r3, #7
 80107ac:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80107ae:	687b      	ldr	r3, [r7, #4]
 80107b0:	681b      	ldr	r3, [r3, #0]
 80107b2:	689b      	ldr	r3, [r3, #8]
 80107b4:	0f5b      	lsrs	r3, r3, #29
 80107b6:	b2db      	uxtb	r3, r3
 80107b8:	f003 0307 	and.w	r3, r3, #7
 80107bc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80107be:	7bbb      	ldrb	r3, [r7, #14]
 80107c0:	7b3a      	ldrb	r2, [r7, #12]
 80107c2:	4911      	ldr	r1, [pc, #68]	; (8010808 <UARTEx_SetNbDataToProcess+0x94>)
 80107c4:	5c8a      	ldrb	r2, [r1, r2]
 80107c6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80107ca:	7b3a      	ldrb	r2, [r7, #12]
 80107cc:	490f      	ldr	r1, [pc, #60]	; (801080c <UARTEx_SetNbDataToProcess+0x98>)
 80107ce:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80107d0:	fb93 f3f2 	sdiv	r3, r3, r2
 80107d4:	b29a      	uxth	r2, r3
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80107dc:	7bfb      	ldrb	r3, [r7, #15]
 80107de:	7b7a      	ldrb	r2, [r7, #13]
 80107e0:	4909      	ldr	r1, [pc, #36]	; (8010808 <UARTEx_SetNbDataToProcess+0x94>)
 80107e2:	5c8a      	ldrb	r2, [r1, r2]
 80107e4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80107e8:	7b7a      	ldrb	r2, [r7, #13]
 80107ea:	4908      	ldr	r1, [pc, #32]	; (801080c <UARTEx_SetNbDataToProcess+0x98>)
 80107ec:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80107ee:	fb93 f3f2 	sdiv	r3, r3, r2
 80107f2:	b29a      	uxth	r2, r3
 80107f4:	687b      	ldr	r3, [r7, #4]
 80107f6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80107fa:	bf00      	nop
 80107fc:	3714      	adds	r7, #20
 80107fe:	46bd      	mov	sp, r7
 8010800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010804:	4770      	bx	lr
 8010806:	bf00      	nop
 8010808:	08020f74 	.word	0x08020f74
 801080c:	08020f7c 	.word	0x08020f7c

08010810 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8010810:	b480      	push	{r7}
 8010812:	b083      	sub	sp, #12
 8010814:	af00      	add	r7, sp, #0
 8010816:	6078      	str	r0, [r7, #4]
 8010818:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 801081a:	683b      	ldr	r3, [r7, #0]
 801081c:	681b      	ldr	r3, [r3, #0]
 801081e:	2b00      	cmp	r3, #0
 8010820:	d121      	bne.n	8010866 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8010822:	687b      	ldr	r3, [r7, #4]
 8010824:	681a      	ldr	r2, [r3, #0]
 8010826:	4b27      	ldr	r3, [pc, #156]	; (80108c4 <FMC_SDRAM_Init+0xb4>)
 8010828:	4013      	ands	r3, r2
 801082a:	683a      	ldr	r2, [r7, #0]
 801082c:	6851      	ldr	r1, [r2, #4]
 801082e:	683a      	ldr	r2, [r7, #0]
 8010830:	6892      	ldr	r2, [r2, #8]
 8010832:	4311      	orrs	r1, r2
 8010834:	683a      	ldr	r2, [r7, #0]
 8010836:	68d2      	ldr	r2, [r2, #12]
 8010838:	4311      	orrs	r1, r2
 801083a:	683a      	ldr	r2, [r7, #0]
 801083c:	6912      	ldr	r2, [r2, #16]
 801083e:	4311      	orrs	r1, r2
 8010840:	683a      	ldr	r2, [r7, #0]
 8010842:	6952      	ldr	r2, [r2, #20]
 8010844:	4311      	orrs	r1, r2
 8010846:	683a      	ldr	r2, [r7, #0]
 8010848:	6992      	ldr	r2, [r2, #24]
 801084a:	4311      	orrs	r1, r2
 801084c:	683a      	ldr	r2, [r7, #0]
 801084e:	69d2      	ldr	r2, [r2, #28]
 8010850:	4311      	orrs	r1, r2
 8010852:	683a      	ldr	r2, [r7, #0]
 8010854:	6a12      	ldr	r2, [r2, #32]
 8010856:	4311      	orrs	r1, r2
 8010858:	683a      	ldr	r2, [r7, #0]
 801085a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 801085c:	430a      	orrs	r2, r1
 801085e:	431a      	orrs	r2, r3
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	601a      	str	r2, [r3, #0]
 8010864:	e026      	b.n	80108b4 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	681b      	ldr	r3, [r3, #0]
 801086a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 801086e:	683b      	ldr	r3, [r7, #0]
 8010870:	69d9      	ldr	r1, [r3, #28]
 8010872:	683b      	ldr	r3, [r7, #0]
 8010874:	6a1b      	ldr	r3, [r3, #32]
 8010876:	4319      	orrs	r1, r3
 8010878:	683b      	ldr	r3, [r7, #0]
 801087a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801087c:	430b      	orrs	r3, r1
 801087e:	431a      	orrs	r2, r3
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	685a      	ldr	r2, [r3, #4]
 8010888:	4b0e      	ldr	r3, [pc, #56]	; (80108c4 <FMC_SDRAM_Init+0xb4>)
 801088a:	4013      	ands	r3, r2
 801088c:	683a      	ldr	r2, [r7, #0]
 801088e:	6851      	ldr	r1, [r2, #4]
 8010890:	683a      	ldr	r2, [r7, #0]
 8010892:	6892      	ldr	r2, [r2, #8]
 8010894:	4311      	orrs	r1, r2
 8010896:	683a      	ldr	r2, [r7, #0]
 8010898:	68d2      	ldr	r2, [r2, #12]
 801089a:	4311      	orrs	r1, r2
 801089c:	683a      	ldr	r2, [r7, #0]
 801089e:	6912      	ldr	r2, [r2, #16]
 80108a0:	4311      	orrs	r1, r2
 80108a2:	683a      	ldr	r2, [r7, #0]
 80108a4:	6952      	ldr	r2, [r2, #20]
 80108a6:	4311      	orrs	r1, r2
 80108a8:	683a      	ldr	r2, [r7, #0]
 80108aa:	6992      	ldr	r2, [r2, #24]
 80108ac:	430a      	orrs	r2, r1
 80108ae:	431a      	orrs	r2, r3
 80108b0:	687b      	ldr	r3, [r7, #4]
 80108b2:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 80108b4:	2300      	movs	r3, #0
}
 80108b6:	4618      	mov	r0, r3
 80108b8:	370c      	adds	r7, #12
 80108ba:	46bd      	mov	sp, r7
 80108bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108c0:	4770      	bx	lr
 80108c2:	bf00      	nop
 80108c4:	ffff8000 	.word	0xffff8000

080108c8 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80108c8:	b480      	push	{r7}
 80108ca:	b085      	sub	sp, #20
 80108cc:	af00      	add	r7, sp, #0
 80108ce:	60f8      	str	r0, [r7, #12]
 80108d0:	60b9      	str	r1, [r7, #8]
 80108d2:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	2b00      	cmp	r3, #0
 80108d8:	d128      	bne.n	801092c <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80108da:	68fb      	ldr	r3, [r7, #12]
 80108dc:	689b      	ldr	r3, [r3, #8]
 80108de:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80108e2:	68bb      	ldr	r3, [r7, #8]
 80108e4:	681b      	ldr	r3, [r3, #0]
 80108e6:	1e59      	subs	r1, r3, #1
 80108e8:	68bb      	ldr	r3, [r7, #8]
 80108ea:	685b      	ldr	r3, [r3, #4]
 80108ec:	3b01      	subs	r3, #1
 80108ee:	011b      	lsls	r3, r3, #4
 80108f0:	4319      	orrs	r1, r3
 80108f2:	68bb      	ldr	r3, [r7, #8]
 80108f4:	689b      	ldr	r3, [r3, #8]
 80108f6:	3b01      	subs	r3, #1
 80108f8:	021b      	lsls	r3, r3, #8
 80108fa:	4319      	orrs	r1, r3
 80108fc:	68bb      	ldr	r3, [r7, #8]
 80108fe:	68db      	ldr	r3, [r3, #12]
 8010900:	3b01      	subs	r3, #1
 8010902:	031b      	lsls	r3, r3, #12
 8010904:	4319      	orrs	r1, r3
 8010906:	68bb      	ldr	r3, [r7, #8]
 8010908:	691b      	ldr	r3, [r3, #16]
 801090a:	3b01      	subs	r3, #1
 801090c:	041b      	lsls	r3, r3, #16
 801090e:	4319      	orrs	r1, r3
 8010910:	68bb      	ldr	r3, [r7, #8]
 8010912:	695b      	ldr	r3, [r3, #20]
 8010914:	3b01      	subs	r3, #1
 8010916:	051b      	lsls	r3, r3, #20
 8010918:	4319      	orrs	r1, r3
 801091a:	68bb      	ldr	r3, [r7, #8]
 801091c:	699b      	ldr	r3, [r3, #24]
 801091e:	3b01      	subs	r3, #1
 8010920:	061b      	lsls	r3, r3, #24
 8010922:	430b      	orrs	r3, r1
 8010924:	431a      	orrs	r2, r3
 8010926:	68fb      	ldr	r3, [r7, #12]
 8010928:	609a      	str	r2, [r3, #8]
 801092a:	e02d      	b.n	8010988 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 801092c:	68fb      	ldr	r3, [r7, #12]
 801092e:	689a      	ldr	r2, [r3, #8]
 8010930:	4b19      	ldr	r3, [pc, #100]	; (8010998 <FMC_SDRAM_Timing_Init+0xd0>)
 8010932:	4013      	ands	r3, r2
 8010934:	68ba      	ldr	r2, [r7, #8]
 8010936:	68d2      	ldr	r2, [r2, #12]
 8010938:	3a01      	subs	r2, #1
 801093a:	0311      	lsls	r1, r2, #12
 801093c:	68ba      	ldr	r2, [r7, #8]
 801093e:	6952      	ldr	r2, [r2, #20]
 8010940:	3a01      	subs	r2, #1
 8010942:	0512      	lsls	r2, r2, #20
 8010944:	430a      	orrs	r2, r1
 8010946:	431a      	orrs	r2, r3
 8010948:	68fb      	ldr	r3, [r7, #12]
 801094a:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 801094c:	68fb      	ldr	r3, [r7, #12]
 801094e:	68db      	ldr	r3, [r3, #12]
 8010950:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8010954:	68bb      	ldr	r3, [r7, #8]
 8010956:	681b      	ldr	r3, [r3, #0]
 8010958:	1e59      	subs	r1, r3, #1
 801095a:	68bb      	ldr	r3, [r7, #8]
 801095c:	685b      	ldr	r3, [r3, #4]
 801095e:	3b01      	subs	r3, #1
 8010960:	011b      	lsls	r3, r3, #4
 8010962:	4319      	orrs	r1, r3
 8010964:	68bb      	ldr	r3, [r7, #8]
 8010966:	689b      	ldr	r3, [r3, #8]
 8010968:	3b01      	subs	r3, #1
 801096a:	021b      	lsls	r3, r3, #8
 801096c:	4319      	orrs	r1, r3
 801096e:	68bb      	ldr	r3, [r7, #8]
 8010970:	691b      	ldr	r3, [r3, #16]
 8010972:	3b01      	subs	r3, #1
 8010974:	041b      	lsls	r3, r3, #16
 8010976:	4319      	orrs	r1, r3
 8010978:	68bb      	ldr	r3, [r7, #8]
 801097a:	699b      	ldr	r3, [r3, #24]
 801097c:	3b01      	subs	r3, #1
 801097e:	061b      	lsls	r3, r3, #24
 8010980:	430b      	orrs	r3, r1
 8010982:	431a      	orrs	r2, r3
 8010984:	68fb      	ldr	r3, [r7, #12]
 8010986:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 8010988:	2300      	movs	r3, #0
}
 801098a:	4618      	mov	r0, r3
 801098c:	3714      	adds	r7, #20
 801098e:	46bd      	mov	sp, r7
 8010990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010994:	4770      	bx	lr
 8010996:	bf00      	nop
 8010998:	ff0f0fff 	.word	0xff0f0fff

0801099c <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 801099c:	b480      	push	{r7}
 801099e:	b085      	sub	sp, #20
 80109a0:	af00      	add	r7, sp, #0
 80109a2:	60f8      	str	r0, [r7, #12]
 80109a4:	60b9      	str	r1, [r7, #8]
 80109a6:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 80109a8:	68fb      	ldr	r3, [r7, #12]
 80109aa:	691a      	ldr	r2, [r3, #16]
 80109ac:	4b0c      	ldr	r3, [pc, #48]	; (80109e0 <FMC_SDRAM_SendCommand+0x44>)
 80109ae:	4013      	ands	r3, r2
 80109b0:	68ba      	ldr	r2, [r7, #8]
 80109b2:	6811      	ldr	r1, [r2, #0]
 80109b4:	68ba      	ldr	r2, [r7, #8]
 80109b6:	6852      	ldr	r2, [r2, #4]
 80109b8:	4311      	orrs	r1, r2
 80109ba:	68ba      	ldr	r2, [r7, #8]
 80109bc:	6892      	ldr	r2, [r2, #8]
 80109be:	3a01      	subs	r2, #1
 80109c0:	0152      	lsls	r2, r2, #5
 80109c2:	4311      	orrs	r1, r2
 80109c4:	68ba      	ldr	r2, [r7, #8]
 80109c6:	68d2      	ldr	r2, [r2, #12]
 80109c8:	0252      	lsls	r2, r2, #9
 80109ca:	430a      	orrs	r2, r1
 80109cc:	431a      	orrs	r2, r3
 80109ce:	68fb      	ldr	r3, [r7, #12]
 80109d0:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 80109d2:	2300      	movs	r3, #0
}
 80109d4:	4618      	mov	r0, r3
 80109d6:	3714      	adds	r7, #20
 80109d8:	46bd      	mov	sp, r7
 80109da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109de:	4770      	bx	lr
 80109e0:	ffc00000 	.word	0xffc00000

080109e4 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 80109e4:	b480      	push	{r7}
 80109e6:	b083      	sub	sp, #12
 80109e8:	af00      	add	r7, sp, #0
 80109ea:	6078      	str	r0, [r7, #4]
 80109ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 80109ee:	687b      	ldr	r3, [r7, #4]
 80109f0:	695a      	ldr	r2, [r3, #20]
 80109f2:	4b07      	ldr	r3, [pc, #28]	; (8010a10 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 80109f4:	4013      	ands	r3, r2
 80109f6:	683a      	ldr	r2, [r7, #0]
 80109f8:	0052      	lsls	r2, r2, #1
 80109fa:	431a      	orrs	r2, r3
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8010a00:	2300      	movs	r3, #0
}
 8010a02:	4618      	mov	r0, r3
 8010a04:	370c      	adds	r7, #12
 8010a06:	46bd      	mov	sp, r7
 8010a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a0c:	4770      	bx	lr
 8010a0e:	bf00      	nop
 8010a10:	ffffc001 	.word	0xffffc001

08010a14 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8010a14:	b084      	sub	sp, #16
 8010a16:	b480      	push	{r7}
 8010a18:	b085      	sub	sp, #20
 8010a1a:	af00      	add	r7, sp, #0
 8010a1c:	6078      	str	r0, [r7, #4]
 8010a1e:	f107 001c 	add.w	r0, r7, #28
 8010a22:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8010a26:	2300      	movs	r3, #0
 8010a28:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 8010a2a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8010a2c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 8010a2e:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8010a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 8010a32:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8010a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 8010a36:	431a      	orrs	r2, r3
             Init.ClockDiv
 8010a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 8010a3a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 8010a3c:	68fa      	ldr	r2, [r7, #12]
 8010a3e:	4313      	orrs	r3, r2
 8010a40:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	685a      	ldr	r2, [r3, #4]
 8010a46:	4b07      	ldr	r3, [pc, #28]	; (8010a64 <SDMMC_Init+0x50>)
 8010a48:	4013      	ands	r3, r2
 8010a4a:	68fa      	ldr	r2, [r7, #12]
 8010a4c:	431a      	orrs	r2, r3
 8010a4e:	687b      	ldr	r3, [r7, #4]
 8010a50:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8010a52:	2300      	movs	r3, #0
}
 8010a54:	4618      	mov	r0, r3
 8010a56:	3714      	adds	r7, #20
 8010a58:	46bd      	mov	sp, r7
 8010a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a5e:	b004      	add	sp, #16
 8010a60:	4770      	bx	lr
 8010a62:	bf00      	nop
 8010a64:	ffc02c00 	.word	0xffc02c00

08010a68 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8010a68:	b480      	push	{r7}
 8010a6a:	b083      	sub	sp, #12
 8010a6c:	af00      	add	r7, sp, #0
 8010a6e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8010a76:	4618      	mov	r0, r3
 8010a78:	370c      	adds	r7, #12
 8010a7a:	46bd      	mov	sp, r7
 8010a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a80:	4770      	bx	lr

08010a82 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8010a82:	b480      	push	{r7}
 8010a84:	b083      	sub	sp, #12
 8010a86:	af00      	add	r7, sp, #0
 8010a88:	6078      	str	r0, [r7, #4]
 8010a8a:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8010a8c:	683b      	ldr	r3, [r7, #0]
 8010a8e:	681a      	ldr	r2, [r3, #0]
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8010a96:	2300      	movs	r3, #0
}
 8010a98:	4618      	mov	r0, r3
 8010a9a:	370c      	adds	r7, #12
 8010a9c:	46bd      	mov	sp, r7
 8010a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aa2:	4770      	bx	lr

08010aa4 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8010aa4:	b480      	push	{r7}
 8010aa6:	b083      	sub	sp, #12
 8010aa8:	af00      	add	r7, sp, #0
 8010aaa:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	681b      	ldr	r3, [r3, #0]
 8010ab0:	f043 0203 	orr.w	r2, r3, #3
 8010ab4:	687b      	ldr	r3, [r7, #4]
 8010ab6:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8010ab8:	2300      	movs	r3, #0
}
 8010aba:	4618      	mov	r0, r3
 8010abc:	370c      	adds	r7, #12
 8010abe:	46bd      	mov	sp, r7
 8010ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ac4:	4770      	bx	lr

08010ac6 <SDMMC_PowerState_OFF>:
  * @brief  Set SDMMC Power state to OFF.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_OFF(SDMMC_TypeDef *SDMMCx)
{
 8010ac6:	b480      	push	{r7}
 8010ac8:	b083      	sub	sp, #12
 8010aca:	af00      	add	r7, sp, #0
 8010acc:	6078      	str	r0, [r7, #4]
  /* Set power state to OFF */
  SDMMCx->POWER &= ~(SDMMC_POWER_PWRCTRL);
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	681b      	ldr	r3, [r3, #0]
 8010ad2:	f023 0203 	bic.w	r2, r3, #3
 8010ad6:	687b      	ldr	r3, [r7, #4]
 8010ad8:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8010ada:	2300      	movs	r3, #0
}
 8010adc:	4618      	mov	r0, r3
 8010ade:	370c      	adds	r7, #12
 8010ae0:	46bd      	mov	sp, r7
 8010ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ae6:	4770      	bx	lr

08010ae8 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8010ae8:	b480      	push	{r7}
 8010aea:	b083      	sub	sp, #12
 8010aec:	af00      	add	r7, sp, #0
 8010aee:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8010af0:	687b      	ldr	r3, [r7, #4]
 8010af2:	681b      	ldr	r3, [r3, #0]
 8010af4:	f003 0303 	and.w	r3, r3, #3
}
 8010af8:	4618      	mov	r0, r3
 8010afa:	370c      	adds	r7, #12
 8010afc:	46bd      	mov	sp, r7
 8010afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b02:	4770      	bx	lr

08010b04 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8010b04:	b480      	push	{r7}
 8010b06:	b085      	sub	sp, #20
 8010b08:	af00      	add	r7, sp, #0
 8010b0a:	6078      	str	r0, [r7, #4]
 8010b0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8010b0e:	2300      	movs	r3, #0
 8010b10:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8010b12:	683b      	ldr	r3, [r7, #0]
 8010b14:	681a      	ldr	r2, [r3, #0]
 8010b16:	687b      	ldr	r3, [r7, #4]
 8010b18:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8010b1a:	683b      	ldr	r3, [r7, #0]
 8010b1c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 8010b1e:	683b      	ldr	r3, [r7, #0]
 8010b20:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8010b22:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8010b24:	683b      	ldr	r3, [r7, #0]
 8010b26:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8010b28:	431a      	orrs	r2, r3
                       Command->CPSM);
 8010b2a:	683b      	ldr	r3, [r7, #0]
 8010b2c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 8010b2e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8010b30:	68fa      	ldr	r2, [r7, #12]
 8010b32:	4313      	orrs	r3, r2
 8010b34:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8010b36:	687b      	ldr	r3, [r7, #4]
 8010b38:	68da      	ldr	r2, [r3, #12]
 8010b3a:	4b06      	ldr	r3, [pc, #24]	; (8010b54 <SDMMC_SendCommand+0x50>)
 8010b3c:	4013      	ands	r3, r2
 8010b3e:	68fa      	ldr	r2, [r7, #12]
 8010b40:	431a      	orrs	r2, r3
 8010b42:	687b      	ldr	r3, [r7, #4]
 8010b44:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8010b46:	2300      	movs	r3, #0
}
 8010b48:	4618      	mov	r0, r3
 8010b4a:	3714      	adds	r7, #20
 8010b4c:	46bd      	mov	sp, r7
 8010b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b52:	4770      	bx	lr
 8010b54:	fffee0c0 	.word	0xfffee0c0

08010b58 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8010b58:	b480      	push	{r7}
 8010b5a:	b083      	sub	sp, #12
 8010b5c:	af00      	add	r7, sp, #0
 8010b5e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	691b      	ldr	r3, [r3, #16]
 8010b64:	b2db      	uxtb	r3, r3
}
 8010b66:	4618      	mov	r0, r3
 8010b68:	370c      	adds	r7, #12
 8010b6a:	46bd      	mov	sp, r7
 8010b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b70:	4770      	bx	lr

08010b72 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8010b72:	b480      	push	{r7}
 8010b74:	b085      	sub	sp, #20
 8010b76:	af00      	add	r7, sp, #0
 8010b78:	6078      	str	r0, [r7, #4]
 8010b7a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	3314      	adds	r3, #20
 8010b80:	461a      	mov	r2, r3
 8010b82:	683b      	ldr	r3, [r7, #0]
 8010b84:	4413      	add	r3, r2
 8010b86:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8010b88:	68fb      	ldr	r3, [r7, #12]
 8010b8a:	681b      	ldr	r3, [r3, #0]
}
 8010b8c:	4618      	mov	r0, r3
 8010b8e:	3714      	adds	r7, #20
 8010b90:	46bd      	mov	sp, r7
 8010b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b96:	4770      	bx	lr

08010b98 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 8010b98:	b480      	push	{r7}
 8010b9a:	b085      	sub	sp, #20
 8010b9c:	af00      	add	r7, sp, #0
 8010b9e:	6078      	str	r0, [r7, #4]
 8010ba0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8010ba2:	2300      	movs	r3, #0
 8010ba4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8010ba6:	683b      	ldr	r3, [r7, #0]
 8010ba8:	681a      	ldr	r2, [r3, #0]
 8010baa:	687b      	ldr	r3, [r7, #4]
 8010bac:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8010bae:	683b      	ldr	r3, [r7, #0]
 8010bb0:	685a      	ldr	r2, [r3, #4]
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8010bb6:	683b      	ldr	r3, [r7, #0]
 8010bb8:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 8010bba:	683b      	ldr	r3, [r7, #0]
 8010bbc:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8010bbe:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 8010bc0:	683b      	ldr	r3, [r7, #0]
 8010bc2:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 8010bc4:	431a      	orrs	r2, r3
                       Data->DPSM);
 8010bc6:	683b      	ldr	r3, [r7, #0]
 8010bc8:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 8010bca:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8010bcc:	68fa      	ldr	r2, [r7, #12]
 8010bce:	4313      	orrs	r3, r2
 8010bd0:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8010bd2:	687b      	ldr	r3, [r7, #4]
 8010bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010bd6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8010bda:	68fb      	ldr	r3, [r7, #12]
 8010bdc:	431a      	orrs	r2, r3
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8010be2:	2300      	movs	r3, #0

}
 8010be4:	4618      	mov	r0, r3
 8010be6:	3714      	adds	r7, #20
 8010be8:	46bd      	mov	sp, r7
 8010bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bee:	4770      	bx	lr

08010bf0 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8010bf0:	b580      	push	{r7, lr}
 8010bf2:	b088      	sub	sp, #32
 8010bf4:	af00      	add	r7, sp, #0
 8010bf6:	6078      	str	r0, [r7, #4]
 8010bf8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8010bfa:	683b      	ldr	r3, [r7, #0]
 8010bfc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8010bfe:	2310      	movs	r3, #16
 8010c00:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010c02:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010c06:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010c08:	2300      	movs	r3, #0
 8010c0a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010c0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010c10:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010c12:	f107 0308 	add.w	r3, r7, #8
 8010c16:	4619      	mov	r1, r3
 8010c18:	6878      	ldr	r0, [r7, #4]
 8010c1a:	f7ff ff73 	bl	8010b04 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8010c1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8010c22:	2110      	movs	r1, #16
 8010c24:	6878      	ldr	r0, [r7, #4]
 8010c26:	f000 fa5f 	bl	80110e8 <SDMMC_GetCmdResp1>
 8010c2a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010c2c:	69fb      	ldr	r3, [r7, #28]
}
 8010c2e:	4618      	mov	r0, r3
 8010c30:	3720      	adds	r7, #32
 8010c32:	46bd      	mov	sp, r7
 8010c34:	bd80      	pop	{r7, pc}

08010c36 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8010c36:	b580      	push	{r7, lr}
 8010c38:	b088      	sub	sp, #32
 8010c3a:	af00      	add	r7, sp, #0
 8010c3c:	6078      	str	r0, [r7, #4]
 8010c3e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8010c40:	683b      	ldr	r3, [r7, #0]
 8010c42:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8010c44:	2311      	movs	r3, #17
 8010c46:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010c48:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010c4c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010c4e:	2300      	movs	r3, #0
 8010c50:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010c52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010c56:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010c58:	f107 0308 	add.w	r3, r7, #8
 8010c5c:	4619      	mov	r1, r3
 8010c5e:	6878      	ldr	r0, [r7, #4]
 8010c60:	f7ff ff50 	bl	8010b04 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8010c64:	f241 3288 	movw	r2, #5000	; 0x1388
 8010c68:	2111      	movs	r1, #17
 8010c6a:	6878      	ldr	r0, [r7, #4]
 8010c6c:	f000 fa3c 	bl	80110e8 <SDMMC_GetCmdResp1>
 8010c70:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010c72:	69fb      	ldr	r3, [r7, #28]
}
 8010c74:	4618      	mov	r0, r3
 8010c76:	3720      	adds	r7, #32
 8010c78:	46bd      	mov	sp, r7
 8010c7a:	bd80      	pop	{r7, pc}

08010c7c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8010c7c:	b580      	push	{r7, lr}
 8010c7e:	b088      	sub	sp, #32
 8010c80:	af00      	add	r7, sp, #0
 8010c82:	6078      	str	r0, [r7, #4]
 8010c84:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8010c86:	683b      	ldr	r3, [r7, #0]
 8010c88:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8010c8a:	2312      	movs	r3, #18
 8010c8c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010c8e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010c92:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010c94:	2300      	movs	r3, #0
 8010c96:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010c98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010c9c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010c9e:	f107 0308 	add.w	r3, r7, #8
 8010ca2:	4619      	mov	r1, r3
 8010ca4:	6878      	ldr	r0, [r7, #4]
 8010ca6:	f7ff ff2d 	bl	8010b04 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8010caa:	f241 3288 	movw	r2, #5000	; 0x1388
 8010cae:	2112      	movs	r1, #18
 8010cb0:	6878      	ldr	r0, [r7, #4]
 8010cb2:	f000 fa19 	bl	80110e8 <SDMMC_GetCmdResp1>
 8010cb6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010cb8:	69fb      	ldr	r3, [r7, #28]
}
 8010cba:	4618      	mov	r0, r3
 8010cbc:	3720      	adds	r7, #32
 8010cbe:	46bd      	mov	sp, r7
 8010cc0:	bd80      	pop	{r7, pc}

08010cc2 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8010cc2:	b580      	push	{r7, lr}
 8010cc4:	b088      	sub	sp, #32
 8010cc6:	af00      	add	r7, sp, #0
 8010cc8:	6078      	str	r0, [r7, #4]
 8010cca:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8010ccc:	683b      	ldr	r3, [r7, #0]
 8010cce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8010cd0:	2318      	movs	r3, #24
 8010cd2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010cd4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010cd8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010cda:	2300      	movs	r3, #0
 8010cdc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010cde:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010ce2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010ce4:	f107 0308 	add.w	r3, r7, #8
 8010ce8:	4619      	mov	r1, r3
 8010cea:	6878      	ldr	r0, [r7, #4]
 8010cec:	f7ff ff0a 	bl	8010b04 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8010cf0:	f241 3288 	movw	r2, #5000	; 0x1388
 8010cf4:	2118      	movs	r1, #24
 8010cf6:	6878      	ldr	r0, [r7, #4]
 8010cf8:	f000 f9f6 	bl	80110e8 <SDMMC_GetCmdResp1>
 8010cfc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010cfe:	69fb      	ldr	r3, [r7, #28]
}
 8010d00:	4618      	mov	r0, r3
 8010d02:	3720      	adds	r7, #32
 8010d04:	46bd      	mov	sp, r7
 8010d06:	bd80      	pop	{r7, pc}

08010d08 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8010d08:	b580      	push	{r7, lr}
 8010d0a:	b088      	sub	sp, #32
 8010d0c:	af00      	add	r7, sp, #0
 8010d0e:	6078      	str	r0, [r7, #4]
 8010d10:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8010d12:	683b      	ldr	r3, [r7, #0]
 8010d14:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8010d16:	2319      	movs	r3, #25
 8010d18:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010d1a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010d1e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010d20:	2300      	movs	r3, #0
 8010d22:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010d24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010d28:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010d2a:	f107 0308 	add.w	r3, r7, #8
 8010d2e:	4619      	mov	r1, r3
 8010d30:	6878      	ldr	r0, [r7, #4]
 8010d32:	f7ff fee7 	bl	8010b04 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8010d36:	f241 3288 	movw	r2, #5000	; 0x1388
 8010d3a:	2119      	movs	r1, #25
 8010d3c:	6878      	ldr	r0, [r7, #4]
 8010d3e:	f000 f9d3 	bl	80110e8 <SDMMC_GetCmdResp1>
 8010d42:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010d44:	69fb      	ldr	r3, [r7, #28]
}
 8010d46:	4618      	mov	r0, r3
 8010d48:	3720      	adds	r7, #32
 8010d4a:	46bd      	mov	sp, r7
 8010d4c:	bd80      	pop	{r7, pc}
	...

08010d50 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8010d50:	b580      	push	{r7, lr}
 8010d52:	b088      	sub	sp, #32
 8010d54:	af00      	add	r7, sp, #0
 8010d56:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8010d58:	2300      	movs	r3, #0
 8010d5a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8010d5c:	230c      	movs	r3, #12
 8010d5e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010d60:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010d64:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010d66:	2300      	movs	r3, #0
 8010d68:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010d6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010d6e:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	68db      	ldr	r3, [r3, #12]
 8010d74:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8010d78:	687b      	ldr	r3, [r7, #4]
 8010d7a:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	68db      	ldr	r3, [r3, #12]
 8010d80:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8010d84:	687b      	ldr	r3, [r7, #4]
 8010d86:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010d88:	f107 0308 	add.w	r3, r7, #8
 8010d8c:	4619      	mov	r1, r3
 8010d8e:	6878      	ldr	r0, [r7, #4]
 8010d90:	f7ff feb8 	bl	8010b04 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8010d94:	4a0b      	ldr	r2, [pc, #44]	; (8010dc4 <SDMMC_CmdStopTransfer+0x74>)
 8010d96:	210c      	movs	r1, #12
 8010d98:	6878      	ldr	r0, [r7, #4]
 8010d9a:	f000 f9a5 	bl	80110e8 <SDMMC_GetCmdResp1>
 8010d9e:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	68db      	ldr	r3, [r3, #12]
 8010da4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8010dac:	69fb      	ldr	r3, [r7, #28]
 8010dae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8010db2:	d101      	bne.n	8010db8 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 8010db4:	2300      	movs	r3, #0
 8010db6:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 8010db8:	69fb      	ldr	r3, [r7, #28]
}
 8010dba:	4618      	mov	r0, r3
 8010dbc:	3720      	adds	r7, #32
 8010dbe:	46bd      	mov	sp, r7
 8010dc0:	bd80      	pop	{r7, pc}
 8010dc2:	bf00      	nop
 8010dc4:	05f5e100 	.word	0x05f5e100

08010dc8 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 8010dc8:	b580      	push	{r7, lr}
 8010dca:	b088      	sub	sp, #32
 8010dcc:	af00      	add	r7, sp, #0
 8010dce:	6078      	str	r0, [r7, #4]
 8010dd0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8010dd2:	683b      	ldr	r3, [r7, #0]
 8010dd4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8010dd6:	2307      	movs	r3, #7
 8010dd8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010dda:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010dde:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010de0:	2300      	movs	r3, #0
 8010de2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010de4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010de8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010dea:	f107 0308 	add.w	r3, r7, #8
 8010dee:	4619      	mov	r1, r3
 8010df0:	6878      	ldr	r0, [r7, #4]
 8010df2:	f7ff fe87 	bl	8010b04 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8010df6:	f241 3288 	movw	r2, #5000	; 0x1388
 8010dfa:	2107      	movs	r1, #7
 8010dfc:	6878      	ldr	r0, [r7, #4]
 8010dfe:	f000 f973 	bl	80110e8 <SDMMC_GetCmdResp1>
 8010e02:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010e04:	69fb      	ldr	r3, [r7, #28]
}
 8010e06:	4618      	mov	r0, r3
 8010e08:	3720      	adds	r7, #32
 8010e0a:	46bd      	mov	sp, r7
 8010e0c:	bd80      	pop	{r7, pc}

08010e0e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8010e0e:	b580      	push	{r7, lr}
 8010e10:	b088      	sub	sp, #32
 8010e12:	af00      	add	r7, sp, #0
 8010e14:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8010e16:	2300      	movs	r3, #0
 8010e18:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8010e1a:	2300      	movs	r3, #0
 8010e1c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8010e1e:	2300      	movs	r3, #0
 8010e20:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010e22:	2300      	movs	r3, #0
 8010e24:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010e26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010e2a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010e2c:	f107 0308 	add.w	r3, r7, #8
 8010e30:	4619      	mov	r1, r3
 8010e32:	6878      	ldr	r0, [r7, #4]
 8010e34:	f7ff fe66 	bl	8010b04 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8010e38:	6878      	ldr	r0, [r7, #4]
 8010e3a:	f000 fb97 	bl	801156c <SDMMC_GetCmdError>
 8010e3e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010e40:	69fb      	ldr	r3, [r7, #28]
}
 8010e42:	4618      	mov	r0, r3
 8010e44:	3720      	adds	r7, #32
 8010e46:	46bd      	mov	sp, r7
 8010e48:	bd80      	pop	{r7, pc}

08010e4a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8010e4a:	b580      	push	{r7, lr}
 8010e4c:	b088      	sub	sp, #32
 8010e4e:	af00      	add	r7, sp, #0
 8010e50:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8010e52:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8010e56:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8010e58:	2308      	movs	r3, #8
 8010e5a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010e5c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010e60:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010e62:	2300      	movs	r3, #0
 8010e64:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010e66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010e6a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010e6c:	f107 0308 	add.w	r3, r7, #8
 8010e70:	4619      	mov	r1, r3
 8010e72:	6878      	ldr	r0, [r7, #4]
 8010e74:	f7ff fe46 	bl	8010b04 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8010e78:	6878      	ldr	r0, [r7, #4]
 8010e7a:	f000 fb29 	bl	80114d0 <SDMMC_GetCmdResp7>
 8010e7e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010e80:	69fb      	ldr	r3, [r7, #28]
}
 8010e82:	4618      	mov	r0, r3
 8010e84:	3720      	adds	r7, #32
 8010e86:	46bd      	mov	sp, r7
 8010e88:	bd80      	pop	{r7, pc}

08010e8a <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8010e8a:	b580      	push	{r7, lr}
 8010e8c:	b088      	sub	sp, #32
 8010e8e:	af00      	add	r7, sp, #0
 8010e90:	6078      	str	r0, [r7, #4]
 8010e92:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8010e94:	683b      	ldr	r3, [r7, #0]
 8010e96:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8010e98:	2337      	movs	r3, #55	; 0x37
 8010e9a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010e9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010ea0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010ea2:	2300      	movs	r3, #0
 8010ea4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010ea6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010eaa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010eac:	f107 0308 	add.w	r3, r7, #8
 8010eb0:	4619      	mov	r1, r3
 8010eb2:	6878      	ldr	r0, [r7, #4]
 8010eb4:	f7ff fe26 	bl	8010b04 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8010eb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8010ebc:	2137      	movs	r1, #55	; 0x37
 8010ebe:	6878      	ldr	r0, [r7, #4]
 8010ec0:	f000 f912 	bl	80110e8 <SDMMC_GetCmdResp1>
 8010ec4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010ec6:	69fb      	ldr	r3, [r7, #28]
}
 8010ec8:	4618      	mov	r0, r3
 8010eca:	3720      	adds	r7, #32
 8010ecc:	46bd      	mov	sp, r7
 8010ece:	bd80      	pop	{r7, pc}

08010ed0 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8010ed0:	b580      	push	{r7, lr}
 8010ed2:	b088      	sub	sp, #32
 8010ed4:	af00      	add	r7, sp, #0
 8010ed6:	6078      	str	r0, [r7, #4]
 8010ed8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8010eda:	683b      	ldr	r3, [r7, #0]
 8010edc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8010ede:	2329      	movs	r3, #41	; 0x29
 8010ee0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010ee2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010ee6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010ee8:	2300      	movs	r3, #0
 8010eea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010eec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010ef0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010ef2:	f107 0308 	add.w	r3, r7, #8
 8010ef6:	4619      	mov	r1, r3
 8010ef8:	6878      	ldr	r0, [r7, #4]
 8010efa:	f7ff fe03 	bl	8010b04 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8010efe:	6878      	ldr	r0, [r7, #4]
 8010f00:	f000 fa2e 	bl	8011360 <SDMMC_GetCmdResp3>
 8010f04:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010f06:	69fb      	ldr	r3, [r7, #28]
}
 8010f08:	4618      	mov	r0, r3
 8010f0a:	3720      	adds	r7, #32
 8010f0c:	46bd      	mov	sp, r7
 8010f0e:	bd80      	pop	{r7, pc}

08010f10 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8010f10:	b580      	push	{r7, lr}
 8010f12:	b088      	sub	sp, #32
 8010f14:	af00      	add	r7, sp, #0
 8010f16:	6078      	str	r0, [r7, #4]
 8010f18:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8010f1a:	683b      	ldr	r3, [r7, #0]
 8010f1c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8010f1e:	2306      	movs	r3, #6
 8010f20:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010f22:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010f26:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010f28:	2300      	movs	r3, #0
 8010f2a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010f2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010f30:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010f32:	f107 0308 	add.w	r3, r7, #8
 8010f36:	4619      	mov	r1, r3
 8010f38:	6878      	ldr	r0, [r7, #4]
 8010f3a:	f7ff fde3 	bl	8010b04 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8010f3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8010f42:	2106      	movs	r1, #6
 8010f44:	6878      	ldr	r0, [r7, #4]
 8010f46:	f000 f8cf 	bl	80110e8 <SDMMC_GetCmdResp1>
 8010f4a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010f4c:	69fb      	ldr	r3, [r7, #28]
}
 8010f4e:	4618      	mov	r0, r3
 8010f50:	3720      	adds	r7, #32
 8010f52:	46bd      	mov	sp, r7
 8010f54:	bd80      	pop	{r7, pc}

08010f56 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8010f56:	b580      	push	{r7, lr}
 8010f58:	b088      	sub	sp, #32
 8010f5a:	af00      	add	r7, sp, #0
 8010f5c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8010f5e:	2300      	movs	r3, #0
 8010f60:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8010f62:	2333      	movs	r3, #51	; 0x33
 8010f64:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010f66:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010f6a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010f6c:	2300      	movs	r3, #0
 8010f6e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010f70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010f74:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010f76:	f107 0308 	add.w	r3, r7, #8
 8010f7a:	4619      	mov	r1, r3
 8010f7c:	6878      	ldr	r0, [r7, #4]
 8010f7e:	f7ff fdc1 	bl	8010b04 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8010f82:	f241 3288 	movw	r2, #5000	; 0x1388
 8010f86:	2133      	movs	r1, #51	; 0x33
 8010f88:	6878      	ldr	r0, [r7, #4]
 8010f8a:	f000 f8ad 	bl	80110e8 <SDMMC_GetCmdResp1>
 8010f8e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010f90:	69fb      	ldr	r3, [r7, #28]
}
 8010f92:	4618      	mov	r0, r3
 8010f94:	3720      	adds	r7, #32
 8010f96:	46bd      	mov	sp, r7
 8010f98:	bd80      	pop	{r7, pc}

08010f9a <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8010f9a:	b580      	push	{r7, lr}
 8010f9c:	b088      	sub	sp, #32
 8010f9e:	af00      	add	r7, sp, #0
 8010fa0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8010fa2:	2300      	movs	r3, #0
 8010fa4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8010fa6:	2302      	movs	r3, #2
 8010fa8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8010faa:	f44f 7340 	mov.w	r3, #768	; 0x300
 8010fae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010fb0:	2300      	movs	r3, #0
 8010fb2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010fb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010fb8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010fba:	f107 0308 	add.w	r3, r7, #8
 8010fbe:	4619      	mov	r1, r3
 8010fc0:	6878      	ldr	r0, [r7, #4]
 8010fc2:	f7ff fd9f 	bl	8010b04 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8010fc6:	6878      	ldr	r0, [r7, #4]
 8010fc8:	f000 f980 	bl	80112cc <SDMMC_GetCmdResp2>
 8010fcc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010fce:	69fb      	ldr	r3, [r7, #28]
}
 8010fd0:	4618      	mov	r0, r3
 8010fd2:	3720      	adds	r7, #32
 8010fd4:	46bd      	mov	sp, r7
 8010fd6:	bd80      	pop	{r7, pc}

08010fd8 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8010fd8:	b580      	push	{r7, lr}
 8010fda:	b088      	sub	sp, #32
 8010fdc:	af00      	add	r7, sp, #0
 8010fde:	6078      	str	r0, [r7, #4]
 8010fe0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8010fe2:	683b      	ldr	r3, [r7, #0]
 8010fe4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8010fe6:	2309      	movs	r3, #9
 8010fe8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8010fea:	f44f 7340 	mov.w	r3, #768	; 0x300
 8010fee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010ff0:	2300      	movs	r3, #0
 8010ff2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010ff4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010ff8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010ffa:	f107 0308 	add.w	r3, r7, #8
 8010ffe:	4619      	mov	r1, r3
 8011000:	6878      	ldr	r0, [r7, #4]
 8011002:	f7ff fd7f 	bl	8010b04 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8011006:	6878      	ldr	r0, [r7, #4]
 8011008:	f000 f960 	bl	80112cc <SDMMC_GetCmdResp2>
 801100c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801100e:	69fb      	ldr	r3, [r7, #28]
}
 8011010:	4618      	mov	r0, r3
 8011012:	3720      	adds	r7, #32
 8011014:	46bd      	mov	sp, r7
 8011016:	bd80      	pop	{r7, pc}

08011018 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8011018:	b580      	push	{r7, lr}
 801101a:	b088      	sub	sp, #32
 801101c:	af00      	add	r7, sp, #0
 801101e:	6078      	str	r0, [r7, #4]
 8011020:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8011022:	2300      	movs	r3, #0
 8011024:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8011026:	2303      	movs	r3, #3
 8011028:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801102a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801102e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011030:	2300      	movs	r3, #0
 8011032:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011034:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011038:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801103a:	f107 0308 	add.w	r3, r7, #8
 801103e:	4619      	mov	r1, r3
 8011040:	6878      	ldr	r0, [r7, #4]
 8011042:	f7ff fd5f 	bl	8010b04 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8011046:	683a      	ldr	r2, [r7, #0]
 8011048:	2103      	movs	r1, #3
 801104a:	6878      	ldr	r0, [r7, #4]
 801104c:	f000 f9c8 	bl	80113e0 <SDMMC_GetCmdResp6>
 8011050:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011052:	69fb      	ldr	r3, [r7, #28]
}
 8011054:	4618      	mov	r0, r3
 8011056:	3720      	adds	r7, #32
 8011058:	46bd      	mov	sp, r7
 801105a:	bd80      	pop	{r7, pc}

0801105c <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 801105c:	b580      	push	{r7, lr}
 801105e:	b088      	sub	sp, #32
 8011060:	af00      	add	r7, sp, #0
 8011062:	6078      	str	r0, [r7, #4]
 8011064:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8011066:	683b      	ldr	r3, [r7, #0]
 8011068:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 801106a:	230d      	movs	r3, #13
 801106c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801106e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011072:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011074:	2300      	movs	r3, #0
 8011076:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011078:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801107c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801107e:	f107 0308 	add.w	r3, r7, #8
 8011082:	4619      	mov	r1, r3
 8011084:	6878      	ldr	r0, [r7, #4]
 8011086:	f7ff fd3d 	bl	8010b04 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 801108a:	f241 3288 	movw	r2, #5000	; 0x1388
 801108e:	210d      	movs	r1, #13
 8011090:	6878      	ldr	r0, [r7, #4]
 8011092:	f000 f829 	bl	80110e8 <SDMMC_GetCmdResp1>
 8011096:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011098:	69fb      	ldr	r3, [r7, #28]
}
 801109a:	4618      	mov	r0, r3
 801109c:	3720      	adds	r7, #32
 801109e:	46bd      	mov	sp, r7
 80110a0:	bd80      	pop	{r7, pc}

080110a2 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 80110a2:	b580      	push	{r7, lr}
 80110a4:	b088      	sub	sp, #32
 80110a6:	af00      	add	r7, sp, #0
 80110a8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80110aa:	2300      	movs	r3, #0
 80110ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 80110ae:	230d      	movs	r3, #13
 80110b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80110b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80110b6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80110b8:	2300      	movs	r3, #0
 80110ba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80110bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80110c0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80110c2:	f107 0308 	add.w	r3, r7, #8
 80110c6:	4619      	mov	r1, r3
 80110c8:	6878      	ldr	r0, [r7, #4]
 80110ca:	f7ff fd1b 	bl	8010b04 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 80110ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80110d2:	210d      	movs	r1, #13
 80110d4:	6878      	ldr	r0, [r7, #4]
 80110d6:	f000 f807 	bl	80110e8 <SDMMC_GetCmdResp1>
 80110da:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80110dc:	69fb      	ldr	r3, [r7, #28]
}
 80110de:	4618      	mov	r0, r3
 80110e0:	3720      	adds	r7, #32
 80110e2:	46bd      	mov	sp, r7
 80110e4:	bd80      	pop	{r7, pc}
	...

080110e8 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 80110e8:	b580      	push	{r7, lr}
 80110ea:	b088      	sub	sp, #32
 80110ec:	af00      	add	r7, sp, #0
 80110ee:	60f8      	str	r0, [r7, #12]
 80110f0:	460b      	mov	r3, r1
 80110f2:	607a      	str	r2, [r7, #4]
 80110f4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80110f6:	4b70      	ldr	r3, [pc, #448]	; (80112b8 <SDMMC_GetCmdResp1+0x1d0>)
 80110f8:	681b      	ldr	r3, [r3, #0]
 80110fa:	4a70      	ldr	r2, [pc, #448]	; (80112bc <SDMMC_GetCmdResp1+0x1d4>)
 80110fc:	fba2 2303 	umull	r2, r3, r2, r3
 8011100:	0a5a      	lsrs	r2, r3, #9
 8011102:	687b      	ldr	r3, [r7, #4]
 8011104:	fb02 f303 	mul.w	r3, r2, r3
 8011108:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 801110a:	69fb      	ldr	r3, [r7, #28]
 801110c:	1e5a      	subs	r2, r3, #1
 801110e:	61fa      	str	r2, [r7, #28]
 8011110:	2b00      	cmp	r3, #0
 8011112:	d102      	bne.n	801111a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011114:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011118:	e0c9      	b.n	80112ae <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 801111a:	68fb      	ldr	r3, [r7, #12]
 801111c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801111e:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8011120:	69ba      	ldr	r2, [r7, #24]
 8011122:	4b67      	ldr	r3, [pc, #412]	; (80112c0 <SDMMC_GetCmdResp1+0x1d8>)
 8011124:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8011126:	2b00      	cmp	r3, #0
 8011128:	d0ef      	beq.n	801110a <SDMMC_GetCmdResp1+0x22>
 801112a:	69bb      	ldr	r3, [r7, #24]
 801112c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8011130:	2b00      	cmp	r3, #0
 8011132:	d1ea      	bne.n	801110a <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8011134:	68fb      	ldr	r3, [r7, #12]
 8011136:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011138:	f003 0304 	and.w	r3, r3, #4
 801113c:	2b00      	cmp	r3, #0
 801113e:	d004      	beq.n	801114a <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8011140:	68fb      	ldr	r3, [r7, #12]
 8011142:	2204      	movs	r2, #4
 8011144:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011146:	2304      	movs	r3, #4
 8011148:	e0b1      	b.n	80112ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801114a:	68fb      	ldr	r3, [r7, #12]
 801114c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801114e:	f003 0301 	and.w	r3, r3, #1
 8011152:	2b00      	cmp	r3, #0
 8011154:	d004      	beq.n	8011160 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8011156:	68fb      	ldr	r3, [r7, #12]
 8011158:	2201      	movs	r2, #1
 801115a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 801115c:	2301      	movs	r3, #1
 801115e:	e0a6      	b.n	80112ae <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8011160:	68fb      	ldr	r3, [r7, #12]
 8011162:	4a58      	ldr	r2, [pc, #352]	; (80112c4 <SDMMC_GetCmdResp1+0x1dc>)
 8011164:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8011166:	68f8      	ldr	r0, [r7, #12]
 8011168:	f7ff fcf6 	bl	8010b58 <SDMMC_GetCommandResponse>
 801116c:	4603      	mov	r3, r0
 801116e:	461a      	mov	r2, r3
 8011170:	7afb      	ldrb	r3, [r7, #11]
 8011172:	4293      	cmp	r3, r2
 8011174:	d001      	beq.n	801117a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011176:	2301      	movs	r3, #1
 8011178:	e099      	b.n	80112ae <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 801117a:	2100      	movs	r1, #0
 801117c:	68f8      	ldr	r0, [r7, #12]
 801117e:	f7ff fcf8 	bl	8010b72 <SDMMC_GetResponse>
 8011182:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8011184:	697a      	ldr	r2, [r7, #20]
 8011186:	4b50      	ldr	r3, [pc, #320]	; (80112c8 <SDMMC_GetCmdResp1+0x1e0>)
 8011188:	4013      	ands	r3, r2
 801118a:	2b00      	cmp	r3, #0
 801118c:	d101      	bne.n	8011192 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 801118e:	2300      	movs	r3, #0
 8011190:	e08d      	b.n	80112ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8011192:	697b      	ldr	r3, [r7, #20]
 8011194:	2b00      	cmp	r3, #0
 8011196:	da02      	bge.n	801119e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8011198:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 801119c:	e087      	b.n	80112ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 801119e:	697b      	ldr	r3, [r7, #20]
 80111a0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80111a4:	2b00      	cmp	r3, #0
 80111a6:	d001      	beq.n	80111ac <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80111a8:	2340      	movs	r3, #64	; 0x40
 80111aa:	e080      	b.n	80112ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80111ac:	697b      	ldr	r3, [r7, #20]
 80111ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80111b2:	2b00      	cmp	r3, #0
 80111b4:	d001      	beq.n	80111ba <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80111b6:	2380      	movs	r3, #128	; 0x80
 80111b8:	e079      	b.n	80112ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80111ba:	697b      	ldr	r3, [r7, #20]
 80111bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80111c0:	2b00      	cmp	r3, #0
 80111c2:	d002      	beq.n	80111ca <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80111c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80111c8:	e071      	b.n	80112ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80111ca:	697b      	ldr	r3, [r7, #20]
 80111cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80111d0:	2b00      	cmp	r3, #0
 80111d2:	d002      	beq.n	80111da <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80111d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80111d8:	e069      	b.n	80112ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80111da:	697b      	ldr	r3, [r7, #20]
 80111dc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80111e0:	2b00      	cmp	r3, #0
 80111e2:	d002      	beq.n	80111ea <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80111e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80111e8:	e061      	b.n	80112ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80111ea:	697b      	ldr	r3, [r7, #20]
 80111ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80111f0:	2b00      	cmp	r3, #0
 80111f2:	d002      	beq.n	80111fa <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80111f4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80111f8:	e059      	b.n	80112ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80111fa:	697b      	ldr	r3, [r7, #20]
 80111fc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8011200:	2b00      	cmp	r3, #0
 8011202:	d002      	beq.n	801120a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8011204:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011208:	e051      	b.n	80112ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 801120a:	697b      	ldr	r3, [r7, #20]
 801120c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8011210:	2b00      	cmp	r3, #0
 8011212:	d002      	beq.n	801121a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8011214:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8011218:	e049      	b.n	80112ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 801121a:	697b      	ldr	r3, [r7, #20]
 801121c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8011220:	2b00      	cmp	r3, #0
 8011222:	d002      	beq.n	801122a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8011224:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8011228:	e041      	b.n	80112ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 801122a:	697b      	ldr	r3, [r7, #20]
 801122c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8011230:	2b00      	cmp	r3, #0
 8011232:	d002      	beq.n	801123a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8011234:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011238:	e039      	b.n	80112ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 801123a:	697b      	ldr	r3, [r7, #20]
 801123c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8011240:	2b00      	cmp	r3, #0
 8011242:	d002      	beq.n	801124a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8011244:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8011248:	e031      	b.n	80112ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 801124a:	697b      	ldr	r3, [r7, #20]
 801124c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011250:	2b00      	cmp	r3, #0
 8011252:	d002      	beq.n	801125a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8011254:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8011258:	e029      	b.n	80112ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 801125a:	697b      	ldr	r3, [r7, #20]
 801125c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011260:	2b00      	cmp	r3, #0
 8011262:	d002      	beq.n	801126a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8011264:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8011268:	e021      	b.n	80112ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 801126a:	697b      	ldr	r3, [r7, #20]
 801126c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011270:	2b00      	cmp	r3, #0
 8011272:	d002      	beq.n	801127a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8011274:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8011278:	e019      	b.n	80112ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 801127a:	697b      	ldr	r3, [r7, #20]
 801127c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011280:	2b00      	cmp	r3, #0
 8011282:	d002      	beq.n	801128a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8011284:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8011288:	e011      	b.n	80112ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 801128a:	697b      	ldr	r3, [r7, #20]
 801128c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8011290:	2b00      	cmp	r3, #0
 8011292:	d002      	beq.n	801129a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8011294:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8011298:	e009      	b.n	80112ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 801129a:	697b      	ldr	r3, [r7, #20]
 801129c:	f003 0308 	and.w	r3, r3, #8
 80112a0:	2b00      	cmp	r3, #0
 80112a2:	d002      	beq.n	80112aa <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80112a4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80112a8:	e001      	b.n	80112ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80112aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80112ae:	4618      	mov	r0, r3
 80112b0:	3720      	adds	r7, #32
 80112b2:	46bd      	mov	sp, r7
 80112b4:	bd80      	pop	{r7, pc}
 80112b6:	bf00      	nop
 80112b8:	24000000 	.word	0x24000000
 80112bc:	10624dd3 	.word	0x10624dd3
 80112c0:	00200045 	.word	0x00200045
 80112c4:	002000c5 	.word	0x002000c5
 80112c8:	fdffe008 	.word	0xfdffe008

080112cc <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 80112cc:	b480      	push	{r7}
 80112ce:	b085      	sub	sp, #20
 80112d0:	af00      	add	r7, sp, #0
 80112d2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80112d4:	4b1f      	ldr	r3, [pc, #124]	; (8011354 <SDMMC_GetCmdResp2+0x88>)
 80112d6:	681b      	ldr	r3, [r3, #0]
 80112d8:	4a1f      	ldr	r2, [pc, #124]	; (8011358 <SDMMC_GetCmdResp2+0x8c>)
 80112da:	fba2 2303 	umull	r2, r3, r2, r3
 80112de:	0a5b      	lsrs	r3, r3, #9
 80112e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80112e4:	fb02 f303 	mul.w	r3, r2, r3
 80112e8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80112ea:	68fb      	ldr	r3, [r7, #12]
 80112ec:	1e5a      	subs	r2, r3, #1
 80112ee:	60fa      	str	r2, [r7, #12]
 80112f0:	2b00      	cmp	r3, #0
 80112f2:	d102      	bne.n	80112fa <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80112f4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80112f8:	e026      	b.n	8011348 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 80112fa:	687b      	ldr	r3, [r7, #4]
 80112fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80112fe:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011300:	68bb      	ldr	r3, [r7, #8]
 8011302:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8011306:	2b00      	cmp	r3, #0
 8011308:	d0ef      	beq.n	80112ea <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 801130a:	68bb      	ldr	r3, [r7, #8]
 801130c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011310:	2b00      	cmp	r3, #0
 8011312:	d1ea      	bne.n	80112ea <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8011314:	687b      	ldr	r3, [r7, #4]
 8011316:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011318:	f003 0304 	and.w	r3, r3, #4
 801131c:	2b00      	cmp	r3, #0
 801131e:	d004      	beq.n	801132a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8011320:	687b      	ldr	r3, [r7, #4]
 8011322:	2204      	movs	r2, #4
 8011324:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011326:	2304      	movs	r3, #4
 8011328:	e00e      	b.n	8011348 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801132a:	687b      	ldr	r3, [r7, #4]
 801132c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801132e:	f003 0301 	and.w	r3, r3, #1
 8011332:	2b00      	cmp	r3, #0
 8011334:	d004      	beq.n	8011340 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	2201      	movs	r2, #1
 801133a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 801133c:	2301      	movs	r3, #1
 801133e:	e003      	b.n	8011348 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8011340:	687b      	ldr	r3, [r7, #4]
 8011342:	4a06      	ldr	r2, [pc, #24]	; (801135c <SDMMC_GetCmdResp2+0x90>)
 8011344:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8011346:	2300      	movs	r3, #0
}
 8011348:	4618      	mov	r0, r3
 801134a:	3714      	adds	r7, #20
 801134c:	46bd      	mov	sp, r7
 801134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011352:	4770      	bx	lr
 8011354:	24000000 	.word	0x24000000
 8011358:	10624dd3 	.word	0x10624dd3
 801135c:	002000c5 	.word	0x002000c5

08011360 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8011360:	b480      	push	{r7}
 8011362:	b085      	sub	sp, #20
 8011364:	af00      	add	r7, sp, #0
 8011366:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8011368:	4b1a      	ldr	r3, [pc, #104]	; (80113d4 <SDMMC_GetCmdResp3+0x74>)
 801136a:	681b      	ldr	r3, [r3, #0]
 801136c:	4a1a      	ldr	r2, [pc, #104]	; (80113d8 <SDMMC_GetCmdResp3+0x78>)
 801136e:	fba2 2303 	umull	r2, r3, r2, r3
 8011372:	0a5b      	lsrs	r3, r3, #9
 8011374:	f241 3288 	movw	r2, #5000	; 0x1388
 8011378:	fb02 f303 	mul.w	r3, r2, r3
 801137c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 801137e:	68fb      	ldr	r3, [r7, #12]
 8011380:	1e5a      	subs	r2, r3, #1
 8011382:	60fa      	str	r2, [r7, #12]
 8011384:	2b00      	cmp	r3, #0
 8011386:	d102      	bne.n	801138e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011388:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801138c:	e01b      	b.n	80113c6 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 801138e:	687b      	ldr	r3, [r7, #4]
 8011390:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011392:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011394:	68bb      	ldr	r3, [r7, #8]
 8011396:	f003 0345 	and.w	r3, r3, #69	; 0x45
 801139a:	2b00      	cmp	r3, #0
 801139c:	d0ef      	beq.n	801137e <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 801139e:	68bb      	ldr	r3, [r7, #8]
 80113a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80113a4:	2b00      	cmp	r3, #0
 80113a6:	d1ea      	bne.n	801137e <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80113a8:	687b      	ldr	r3, [r7, #4]
 80113aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80113ac:	f003 0304 	and.w	r3, r3, #4
 80113b0:	2b00      	cmp	r3, #0
 80113b2:	d004      	beq.n	80113be <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80113b4:	687b      	ldr	r3, [r7, #4]
 80113b6:	2204      	movs	r2, #4
 80113b8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80113ba:	2304      	movs	r3, #4
 80113bc:	e003      	b.n	80113c6 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80113be:	687b      	ldr	r3, [r7, #4]
 80113c0:	4a06      	ldr	r2, [pc, #24]	; (80113dc <SDMMC_GetCmdResp3+0x7c>)
 80113c2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80113c4:	2300      	movs	r3, #0
}
 80113c6:	4618      	mov	r0, r3
 80113c8:	3714      	adds	r7, #20
 80113ca:	46bd      	mov	sp, r7
 80113cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113d0:	4770      	bx	lr
 80113d2:	bf00      	nop
 80113d4:	24000000 	.word	0x24000000
 80113d8:	10624dd3 	.word	0x10624dd3
 80113dc:	002000c5 	.word	0x002000c5

080113e0 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80113e0:	b580      	push	{r7, lr}
 80113e2:	b088      	sub	sp, #32
 80113e4:	af00      	add	r7, sp, #0
 80113e6:	60f8      	str	r0, [r7, #12]
 80113e8:	460b      	mov	r3, r1
 80113ea:	607a      	str	r2, [r7, #4]
 80113ec:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80113ee:	4b35      	ldr	r3, [pc, #212]	; (80114c4 <SDMMC_GetCmdResp6+0xe4>)
 80113f0:	681b      	ldr	r3, [r3, #0]
 80113f2:	4a35      	ldr	r2, [pc, #212]	; (80114c8 <SDMMC_GetCmdResp6+0xe8>)
 80113f4:	fba2 2303 	umull	r2, r3, r2, r3
 80113f8:	0a5b      	lsrs	r3, r3, #9
 80113fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80113fe:	fb02 f303 	mul.w	r3, r2, r3
 8011402:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8011404:	69fb      	ldr	r3, [r7, #28]
 8011406:	1e5a      	subs	r2, r3, #1
 8011408:	61fa      	str	r2, [r7, #28]
 801140a:	2b00      	cmp	r3, #0
 801140c:	d102      	bne.n	8011414 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 801140e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011412:	e052      	b.n	80114ba <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8011414:	68fb      	ldr	r3, [r7, #12]
 8011416:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011418:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801141a:	69bb      	ldr	r3, [r7, #24]
 801141c:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8011420:	2b00      	cmp	r3, #0
 8011422:	d0ef      	beq.n	8011404 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8011424:	69bb      	ldr	r3, [r7, #24]
 8011426:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801142a:	2b00      	cmp	r3, #0
 801142c:	d1ea      	bne.n	8011404 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801142e:	68fb      	ldr	r3, [r7, #12]
 8011430:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011432:	f003 0304 	and.w	r3, r3, #4
 8011436:	2b00      	cmp	r3, #0
 8011438:	d004      	beq.n	8011444 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801143a:	68fb      	ldr	r3, [r7, #12]
 801143c:	2204      	movs	r2, #4
 801143e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011440:	2304      	movs	r3, #4
 8011442:	e03a      	b.n	80114ba <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8011444:	68fb      	ldr	r3, [r7, #12]
 8011446:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011448:	f003 0301 	and.w	r3, r3, #1
 801144c:	2b00      	cmp	r3, #0
 801144e:	d004      	beq.n	801145a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8011450:	68fb      	ldr	r3, [r7, #12]
 8011452:	2201      	movs	r2, #1
 8011454:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011456:	2301      	movs	r3, #1
 8011458:	e02f      	b.n	80114ba <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 801145a:	68f8      	ldr	r0, [r7, #12]
 801145c:	f7ff fb7c 	bl	8010b58 <SDMMC_GetCommandResponse>
 8011460:	4603      	mov	r3, r0
 8011462:	461a      	mov	r2, r3
 8011464:	7afb      	ldrb	r3, [r7, #11]
 8011466:	4293      	cmp	r3, r2
 8011468:	d001      	beq.n	801146e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801146a:	2301      	movs	r3, #1
 801146c:	e025      	b.n	80114ba <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801146e:	68fb      	ldr	r3, [r7, #12]
 8011470:	4a16      	ldr	r2, [pc, #88]	; (80114cc <SDMMC_GetCmdResp6+0xec>)
 8011472:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8011474:	2100      	movs	r1, #0
 8011476:	68f8      	ldr	r0, [r7, #12]
 8011478:	f7ff fb7b 	bl	8010b72 <SDMMC_GetResponse>
 801147c:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 801147e:	697b      	ldr	r3, [r7, #20]
 8011480:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8011484:	2b00      	cmp	r3, #0
 8011486:	d106      	bne.n	8011496 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 8011488:	697b      	ldr	r3, [r7, #20]
 801148a:	0c1b      	lsrs	r3, r3, #16
 801148c:	b29a      	uxth	r2, r3
 801148e:	687b      	ldr	r3, [r7, #4]
 8011490:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8011492:	2300      	movs	r3, #0
 8011494:	e011      	b.n	80114ba <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8011496:	697b      	ldr	r3, [r7, #20]
 8011498:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801149c:	2b00      	cmp	r3, #0
 801149e:	d002      	beq.n	80114a6 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80114a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80114a4:	e009      	b.n	80114ba <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80114a6:	697b      	ldr	r3, [r7, #20]
 80114a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80114ac:	2b00      	cmp	r3, #0
 80114ae:	d002      	beq.n	80114b6 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80114b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80114b4:	e001      	b.n	80114ba <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80114b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80114ba:	4618      	mov	r0, r3
 80114bc:	3720      	adds	r7, #32
 80114be:	46bd      	mov	sp, r7
 80114c0:	bd80      	pop	{r7, pc}
 80114c2:	bf00      	nop
 80114c4:	24000000 	.word	0x24000000
 80114c8:	10624dd3 	.word	0x10624dd3
 80114cc:	002000c5 	.word	0x002000c5

080114d0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 80114d0:	b480      	push	{r7}
 80114d2:	b085      	sub	sp, #20
 80114d4:	af00      	add	r7, sp, #0
 80114d6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80114d8:	4b22      	ldr	r3, [pc, #136]	; (8011564 <SDMMC_GetCmdResp7+0x94>)
 80114da:	681b      	ldr	r3, [r3, #0]
 80114dc:	4a22      	ldr	r2, [pc, #136]	; (8011568 <SDMMC_GetCmdResp7+0x98>)
 80114de:	fba2 2303 	umull	r2, r3, r2, r3
 80114e2:	0a5b      	lsrs	r3, r3, #9
 80114e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80114e8:	fb02 f303 	mul.w	r3, r2, r3
 80114ec:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80114ee:	68fb      	ldr	r3, [r7, #12]
 80114f0:	1e5a      	subs	r2, r3, #1
 80114f2:	60fa      	str	r2, [r7, #12]
 80114f4:	2b00      	cmp	r3, #0
 80114f6:	d102      	bne.n	80114fe <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80114f8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80114fc:	e02c      	b.n	8011558 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 80114fe:	687b      	ldr	r3, [r7, #4]
 8011500:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011502:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011504:	68bb      	ldr	r3, [r7, #8]
 8011506:	f003 0345 	and.w	r3, r3, #69	; 0x45
 801150a:	2b00      	cmp	r3, #0
 801150c:	d0ef      	beq.n	80114ee <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 801150e:	68bb      	ldr	r3, [r7, #8]
 8011510:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011514:	2b00      	cmp	r3, #0
 8011516:	d1ea      	bne.n	80114ee <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8011518:	687b      	ldr	r3, [r7, #4]
 801151a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801151c:	f003 0304 	and.w	r3, r3, #4
 8011520:	2b00      	cmp	r3, #0
 8011522:	d004      	beq.n	801152e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8011524:	687b      	ldr	r3, [r7, #4]
 8011526:	2204      	movs	r2, #4
 8011528:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801152a:	2304      	movs	r3, #4
 801152c:	e014      	b.n	8011558 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801152e:	687b      	ldr	r3, [r7, #4]
 8011530:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011532:	f003 0301 	and.w	r3, r3, #1
 8011536:	2b00      	cmp	r3, #0
 8011538:	d004      	beq.n	8011544 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801153a:	687b      	ldr	r3, [r7, #4]
 801153c:	2201      	movs	r2, #1
 801153e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011540:	2301      	movs	r3, #1
 8011542:	e009      	b.n	8011558 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8011544:	687b      	ldr	r3, [r7, #4]
 8011546:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011548:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801154c:	2b00      	cmp	r3, #0
 801154e:	d002      	beq.n	8011556 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8011550:	687b      	ldr	r3, [r7, #4]
 8011552:	2240      	movs	r2, #64	; 0x40
 8011554:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8011556:	2300      	movs	r3, #0

}
 8011558:	4618      	mov	r0, r3
 801155a:	3714      	adds	r7, #20
 801155c:	46bd      	mov	sp, r7
 801155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011562:	4770      	bx	lr
 8011564:	24000000 	.word	0x24000000
 8011568:	10624dd3 	.word	0x10624dd3

0801156c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 801156c:	b480      	push	{r7}
 801156e:	b085      	sub	sp, #20
 8011570:	af00      	add	r7, sp, #0
 8011572:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8011574:	4b11      	ldr	r3, [pc, #68]	; (80115bc <SDMMC_GetCmdError+0x50>)
 8011576:	681b      	ldr	r3, [r3, #0]
 8011578:	4a11      	ldr	r2, [pc, #68]	; (80115c0 <SDMMC_GetCmdError+0x54>)
 801157a:	fba2 2303 	umull	r2, r3, r2, r3
 801157e:	0a5b      	lsrs	r3, r3, #9
 8011580:	f241 3288 	movw	r2, #5000	; 0x1388
 8011584:	fb02 f303 	mul.w	r3, r2, r3
 8011588:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 801158a:	68fb      	ldr	r3, [r7, #12]
 801158c:	1e5a      	subs	r2, r3, #1
 801158e:	60fa      	str	r2, [r7, #12]
 8011590:	2b00      	cmp	r3, #0
 8011592:	d102      	bne.n	801159a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011594:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011598:	e009      	b.n	80115ae <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 801159a:	687b      	ldr	r3, [r7, #4]
 801159c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801159e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80115a2:	2b00      	cmp	r3, #0
 80115a4:	d0f1      	beq.n	801158a <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80115a6:	687b      	ldr	r3, [r7, #4]
 80115a8:	4a06      	ldr	r2, [pc, #24]	; (80115c4 <SDMMC_GetCmdError+0x58>)
 80115aa:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 80115ac:	2300      	movs	r3, #0
}
 80115ae:	4618      	mov	r0, r3
 80115b0:	3714      	adds	r7, #20
 80115b2:	46bd      	mov	sp, r7
 80115b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115b8:	4770      	bx	lr
 80115ba:	bf00      	nop
 80115bc:	24000000 	.word	0x24000000
 80115c0:	10624dd3 	.word	0x10624dd3
 80115c4:	002000c5 	.word	0x002000c5

080115c8 <MX_FileX_Init>:
 * @brief  Application FileX Initialization.
 * @param memory_ptr: memory pointer
 * @retval int
 */
UINT MX_FileX_Init(VOID *memory_ptr)
{
 80115c8:	b580      	push	{r7, lr}
 80115ca:	b08e      	sub	sp, #56	; 0x38
 80115cc:	af08      	add	r7, sp, #32
 80115ce:	6078      	str	r0, [r7, #4]
	UINT ret = FX_SUCCESS;
 80115d0:	2300      	movs	r3, #0
 80115d2:	617b      	str	r3, [r7, #20]

	TX_BYTE_POOL *byte_pool = (TX_BYTE_POOL*)memory_ptr;
 80115d4:	687b      	ldr	r3, [r7, #4]
 80115d6:	613b      	str	r3, [r7, #16]
	/* USER CODE BEGIN 0 */

	/* USER CODE END 0 */

	/*Allocate memory for the main thread's stack*/
	ret = tx_byte_allocate(byte_pool, &pointer, FX_APP_THREAD_STACK_SIZE, TX_NO_WAIT);
 80115d8:	f107 010c 	add.w	r1, r7, #12
 80115dc:	2300      	movs	r3, #0
 80115de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80115e2:	6938      	ldr	r0, [r7, #16]
 80115e4:	f00c ffc4 	bl	801e570 <_txe_byte_allocate>
 80115e8:	6178      	str	r0, [r7, #20]

	/* Check FX_APP_THREAD_STACK_SIZE allocation*/
	if (ret != FX_SUCCESS)
 80115ea:	697b      	ldr	r3, [r7, #20]
 80115ec:	2b00      	cmp	r3, #0
 80115ee:	d001      	beq.n	80115f4 <MX_FileX_Init+0x2c>
	{
		return TX_POOL_ERROR;
 80115f0:	2302      	movs	r3, #2
 80115f2:	e01d      	b.n	8011630 <MX_FileX_Init+0x68>
	}

	/* Create the main thread.  */
	ret = tx_thread_create(&fx_app_thread, FX_APP_THREAD_NAME, fx_app_thread_entry, 0, pointer, FX_APP_THREAD_STACK_SIZE,
 80115f4:	68fb      	ldr	r3, [r7, #12]
 80115f6:	22b0      	movs	r2, #176	; 0xb0
 80115f8:	9206      	str	r2, [sp, #24]
 80115fa:	2201      	movs	r2, #1
 80115fc:	9205      	str	r2, [sp, #20]
 80115fe:	2200      	movs	r2, #0
 8011600:	9204      	str	r2, [sp, #16]
 8011602:	220a      	movs	r2, #10
 8011604:	9203      	str	r2, [sp, #12]
 8011606:	220a      	movs	r2, #10
 8011608:	9202      	str	r2, [sp, #8]
 801160a:	f44f 7200 	mov.w	r2, #512	; 0x200
 801160e:	9201      	str	r2, [sp, #4]
 8011610:	9300      	str	r3, [sp, #0]
 8011612:	2300      	movs	r3, #0
 8011614:	4a08      	ldr	r2, [pc, #32]	; (8011638 <MX_FileX_Init+0x70>)
 8011616:	4909      	ldr	r1, [pc, #36]	; (801163c <MX_FileX_Init+0x74>)
 8011618:	4809      	ldr	r0, [pc, #36]	; (8011640 <MX_FileX_Init+0x78>)
 801161a:	f00d f9f1 	bl	801ea00 <_txe_thread_create>
 801161e:	6178      	str	r0, [r7, #20]
			FX_APP_THREAD_PRIO, FX_APP_PREEMPTION_THRESHOLD, FX_APP_THREAD_TIME_SLICE, FX_APP_THREAD_AUTO_START);

	/* Check main thread creation */
	if (ret != FX_SUCCESS)
 8011620:	697b      	ldr	r3, [r7, #20]
 8011622:	2b00      	cmp	r3, #0
 8011624:	d001      	beq.n	801162a <MX_FileX_Init+0x62>
	{
		return TX_THREAD_ERROR;
 8011626:	230e      	movs	r3, #14
 8011628:	e002      	b.n	8011630 <MX_FileX_Init+0x68>
	/* USER CODE BEGIN MX_FileX_Init */

	/* USER CODE END MX_FileX_Init */

	/* Initialize FileX.  */
	fx_system_initialize();
 801162a:	f007 fe81 	bl	8019330 <_fx_system_initialize>

	/* USER CODE BEGIN MX_FileX_Init 1*/

	/* USER CODE END MX_FileX_Init 1*/

	return ret;
 801162e:	697b      	ldr	r3, [r7, #20]
}
 8011630:	4618      	mov	r0, r3
 8011632:	3718      	adds	r7, #24
 8011634:	46bd      	mov	sp, r7
 8011636:	bd80      	pop	{r7, pc}
 8011638:	08011645 	.word	0x08011645
 801163c:	08020ce8 	.word	0x08020ce8
 8011640:	24002494 	.word	0x24002494

08011644 <fx_app_thread_entry>:
 * @brief  Main thread entry.
 * @param thread_input: ULONG user argument used by the thread entry
 * @retval none
 */
void fx_app_thread_entry(ULONG thread_input)
{
 8011644:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011646:	b08b      	sub	sp, #44	; 0x2c
 8011648:	af04      	add	r7, sp, #16
 801164a:	6078      	str	r0, [r7, #4]
	UINT sd_status = FX_SUCCESS;
 801164c:	2300      	movs	r3, #0
 801164e:	617b      	str	r3, [r7, #20]
	/* USER CODE BEGIN fx_app_thread_entry 0 */

	// CHAR* place = SRAM2_ADDR;
	// CHAR data[] = "69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 ";
	Address = FLASH_USER_START_ADDR;
 8011650:	4b95      	ldr	r3, [pc, #596]	; (80118a8 <fx_app_thread_entry+0x264>)
 8011652:	f04f 6201 	mov.w	r2, #135266304	; 0x8100000
 8011656:	601a      	str	r2, [r3, #0]
	// ram_adrr =place ;

	/* USER CODE END fx_app_thread_entry 0 */

	/* Open the SD disk driver */
	sd_status =  fx_media_open(&sdio_disk, FX_SD_VOLUME_NAME, fx_stm32_sd_driver, (VOID *)FX_NULL, (VOID *) fx_sd_media_memory, sizeof(fx_sd_media_memory));
 8011658:	f242 43b8 	movw	r3, #9400	; 0x24b8
 801165c:	9302      	str	r3, [sp, #8]
 801165e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011662:	9301      	str	r3, [sp, #4]
 8011664:	4b91      	ldr	r3, [pc, #580]	; (80118ac <fx_app_thread_entry+0x268>)
 8011666:	9300      	str	r3, [sp, #0]
 8011668:	2300      	movs	r3, #0
 801166a:	4a91      	ldr	r2, [pc, #580]	; (80118b0 <fx_app_thread_entry+0x26c>)
 801166c:	4991      	ldr	r1, [pc, #580]	; (80118b4 <fx_app_thread_entry+0x270>)
 801166e:	4892      	ldr	r0, [pc, #584]	; (80118b8 <fx_app_thread_entry+0x274>)
 8011670:	f00a fabc 	bl	801bbec <_fxe_media_open>
 8011674:	6178      	str	r0, [r7, #20]

	/* Check the media open sd_status */
	if (sd_status != FX_SUCCESS)
 8011676:	697b      	ldr	r3, [r7, #20]
 8011678:	2b00      	cmp	r3, #0
 801167a:	d000      	beq.n	801167e <fx_app_thread_entry+0x3a>
	{
		/* USER CODE BEGIN SD open error */
		while(1);
 801167c:	e7fe      	b.n	801167c <fx_app_thread_entry+0x38>




	/* Create a file called STM32.TXT in the root directory.  */
	int i =0;
 801167e:	2300      	movs	r3, #0
 8011680:	613b      	str	r3, [r7, #16]
	while(f!=0)
 8011682:	e25d      	b.n	8011b40 <fx_app_thread_entry+0x4fc>
	{
		if (SIM800.mqttServer.connect == 0)
 8011684:	4b8d      	ldr	r3, [pc, #564]	; (80118bc <fx_app_thread_entry+0x278>)
 8011686:	7c9b      	ldrb	r3, [r3, #18]
 8011688:	2b00      	cmp	r3, #0
 801168a:	d113      	bne.n	80116b4 <fx_app_thread_entry+0x70>
		{
			UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_RED);
 801168c:	488c      	ldr	r0, [pc, #560]	; (80118c0 <fx_app_thread_entry+0x27c>)
 801168e:	f00d faff 	bl	801ec90 <UTIL_LCD_SetTextColor>
			UTIL_LCD_DisplayStringAt(0, 150, (uint8_t *)"try to connect ", RIGHT_MODE);
 8011692:	2302      	movs	r3, #2
 8011694:	4a8b      	ldr	r2, [pc, #556]	; (80118c4 <fx_app_thread_entry+0x280>)
 8011696:	2196      	movs	r1, #150	; 0x96
 8011698:	2000      	movs	r0, #0
 801169a:	f00d fc3d 	bl	801ef18 <UTIL_LCD_DisplayStringAt>
			UTIL_LCD_FillCircle(200, 160, 14,UTIL_LCD_COLOR_RED);
 801169e:	4b88      	ldr	r3, [pc, #544]	; (80118c0 <fx_app_thread_entry+0x27c>)
 80116a0:	220e      	movs	r2, #14
 80116a2:	21a0      	movs	r1, #160	; 0xa0
 80116a4:	20c8      	movs	r0, #200	; 0xc8
 80116a6:	f00d fe53 	bl	801f350 <UTIL_LCD_FillCircle>
			MQTT_Init();
 80116aa:	f7ef fe93 	bl	80013d4 <MQTT_Init>
			sub = 0;
 80116ae:	4b86      	ldr	r3, [pc, #536]	; (80118c8 <fx_app_thread_entry+0x284>)
 80116b0:	2200      	movs	r2, #0
 80116b2:	701a      	strb	r2, [r3, #0]
		}
		if (SIM800.mqttServer.connect == 1)
 80116b4:	4b81      	ldr	r3, [pc, #516]	; (80118bc <fx_app_thread_entry+0x278>)
 80116b6:	7c9b      	ldrb	r3, [r3, #18]
 80116b8:	2b01      	cmp	r3, #1
 80116ba:	f040 8241 	bne.w	8011b40 <fx_app_thread_entry+0x4fc>
		{
			if(sub == 0)
 80116be:	4b82      	ldr	r3, [pc, #520]	; (80118c8 <fx_app_thread_entry+0x284>)
 80116c0:	781b      	ldrb	r3, [r3, #0]
 80116c2:	2b00      	cmp	r3, #0
 80116c4:	f040 81b8 	bne.w	8011a38 <fx_app_thread_entry+0x3f4>
			{
				UTIL_LCD_DisplayStringAt(0, 150, (uint8_t *)"                        ", RIGHT_MODE);
 80116c8:	2302      	movs	r3, #2
 80116ca:	4a80      	ldr	r2, [pc, #512]	; (80118cc <fx_app_thread_entry+0x288>)
 80116cc:	2196      	movs	r1, #150	; 0x96
 80116ce:	2000      	movs	r0, #0
 80116d0:	f00d fc22 	bl	801ef18 <UTIL_LCD_DisplayStringAt>
				UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_GREEN);
 80116d4:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 80116d8:	f00d fada 	bl	801ec90 <UTIL_LCD_SetTextColor>
				UTIL_LCD_DisplayStringAt(0, 150, (uint8_t *)"connected ", LEFT_MODE);
 80116dc:	2303      	movs	r3, #3
 80116de:	4a7c      	ldr	r2, [pc, #496]	; (80118d0 <fx_app_thread_entry+0x28c>)
 80116e0:	2196      	movs	r1, #150	; 0x96
 80116e2:	2000      	movs	r0, #0
 80116e4:	f00d fc18 	bl	801ef18 <UTIL_LCD_DisplayStringAt>
				UTIL_LCD_FillCircle(200, 160, 14,UTIL_LCD_COLOR_GREEN);
 80116e8:	f04f 23ff 	mov.w	r3, #4278255360	; 0xff00ff00
 80116ec:	220e      	movs	r2, #14
 80116ee:	21a0      	movs	r1, #160	; 0xa0
 80116f0:	20c8      	movs	r0, #200	; 0xc8
 80116f2:	f00d fe2d 	bl	801f350 <UTIL_LCD_FillCircle>
				MQTT_Sub("123456");
 80116f6:	4877      	ldr	r0, [pc, #476]	; (80118d4 <fx_app_thread_entry+0x290>)
 80116f8:	f7ef fffa 	bl	80016f0 <MQTT_Sub>
				sub = 1;
 80116fc:	4b72      	ldr	r3, [pc, #456]	; (80118c8 <fx_app_thread_entry+0x284>)
 80116fe:	2201      	movs	r2, #1
 8011700:	701a      	strb	r2, [r3, #0]
				//MQTT_Pub("123456", "connect");
				int status =1;
 8011702:	2301      	movs	r3, #1
 8011704:	60fb      	str	r3, [r7, #12]
				while(status==1)
 8011706:	e193      	b.n	8011a30 <fx_app_thread_entry+0x3ec>
				{
					if(SIM800.mqttReceive.newEvent)
 8011708:	4b6c      	ldr	r3, [pc, #432]	; (80118bc <fx_app_thread_entry+0x278>)
 801170a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801170e:	2b00      	cmp	r3, #0
 8011710:	f000 8102 	beq.w	8011918 <fx_app_thread_entry+0x2d4>
					{
						memcpy(rec,SIM800.mqttReceive.payload,64);
 8011714:	4a70      	ldr	r2, [pc, #448]	; (80118d8 <fx_app_thread_entry+0x294>)
 8011716:	4b69      	ldr	r3, [pc, #420]	; (80118bc <fx_app_thread_entry+0x278>)
 8011718:	f103 0430 	add.w	r4, r3, #48	; 0x30
 801171c:	4694      	mov	ip, r2
 801171e:	f104 0e40 	add.w	lr, r4, #64	; 0x40
 8011722:	4665      	mov	r5, ip
 8011724:	4626      	mov	r6, r4
 8011726:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8011728:	6028      	str	r0, [r5, #0]
 801172a:	6069      	str	r1, [r5, #4]
 801172c:	60aa      	str	r2, [r5, #8]
 801172e:	60eb      	str	r3, [r5, #12]
 8011730:	3410      	adds	r4, #16
 8011732:	f10c 0c10 	add.w	ip, ip, #16
 8011736:	4574      	cmp	r4, lr
 8011738:	d1f3      	bne.n	8011722 <fx_app_thread_entry+0xde>
						strncpy(newf, rec, 12);
 801173a:	220c      	movs	r2, #12
 801173c:	4966      	ldr	r1, [pc, #408]	; (80118d8 <fx_app_thread_entry+0x294>)
 801173e:	4867      	ldr	r0, [pc, #412]	; (80118dc <fx_app_thread_entry+0x298>)
 8011740:	f00e f896 	bl	801f870 <strncpy>
						newf[12] = '\0';
 8011744:	4b65      	ldr	r3, [pc, #404]	; (80118dc <fx_app_thread_entry+0x298>)
 8011746:	2200      	movs	r2, #0
 8011748:	731a      	strb	r2, [r3, #12]
						sscanf(rec, "new firmware %d", &number);
 801174a:	4a65      	ldr	r2, [pc, #404]	; (80118e0 <fx_app_thread_entry+0x29c>)
 801174c:	4965      	ldr	r1, [pc, #404]	; (80118e4 <fx_app_thread_entry+0x2a0>)
 801174e:	4862      	ldr	r0, [pc, #392]	; (80118d8 <fx_app_thread_entry+0x294>)
 8011750:	f00e f858 	bl	801f804 <siscanf>
						sprintf(str, "%d", number);
 8011754:	4b62      	ldr	r3, [pc, #392]	; (80118e0 <fx_app_thread_entry+0x29c>)
 8011756:	681b      	ldr	r3, [r3, #0]
 8011758:	461a      	mov	r2, r3
 801175a:	4963      	ldr	r1, [pc, #396]	; (80118e8 <fx_app_thread_entry+0x2a4>)
 801175c:	4863      	ldr	r0, [pc, #396]	; (80118ec <fx_app_thread_entry+0x2a8>)
 801175e:	f00e f831 	bl	801f7c4 <siprintf>
						cof=(number/25600)+1;
 8011762:	4b5f      	ldr	r3, [pc, #380]	; (80118e0 <fx_app_thread_entry+0x29c>)
 8011764:	681b      	ldr	r3, [r3, #0]
 8011766:	4a62      	ldr	r2, [pc, #392]	; (80118f0 <fx_app_thread_entry+0x2ac>)
 8011768:	fb82 1203 	smull	r1, r2, r2, r3
 801176c:	1352      	asrs	r2, r2, #13
 801176e:	17db      	asrs	r3, r3, #31
 8011770:	1ad3      	subs	r3, r2, r3
 8011772:	3301      	adds	r3, #1
 8011774:	4a5f      	ldr	r2, [pc, #380]	; (80118f4 <fx_app_thread_entry+0x2b0>)
 8011776:	6013      	str	r3, [r2, #0]
						UTIL_LCD_DrawRect(170, 400,(number/128)+6, 40, UTIL_LCD_COLOR_BLACK);
 8011778:	4b59      	ldr	r3, [pc, #356]	; (80118e0 <fx_app_thread_entry+0x29c>)
 801177a:	681b      	ldr	r3, [r3, #0]
 801177c:	2b00      	cmp	r3, #0
 801177e:	da00      	bge.n	8011782 <fx_app_thread_entry+0x13e>
 8011780:	337f      	adds	r3, #127	; 0x7f
 8011782:	11db      	asrs	r3, r3, #7
 8011784:	3306      	adds	r3, #6
 8011786:	461a      	mov	r2, r3
 8011788:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 801178c:	9300      	str	r3, [sp, #0]
 801178e:	2328      	movs	r3, #40	; 0x28
 8011790:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8011794:	20aa      	movs	r0, #170	; 0xaa
 8011796:	f00d fc6d 	bl	801f074 <UTIL_LCD_DrawRect>
						UTIL_LCD_DrawRect(169, 399,(number/128)+8, 42, UTIL_LCD_COLOR_BLACK);
 801179a:	4b51      	ldr	r3, [pc, #324]	; (80118e0 <fx_app_thread_entry+0x29c>)
 801179c:	681b      	ldr	r3, [r3, #0]
 801179e:	2b00      	cmp	r3, #0
 80117a0:	da00      	bge.n	80117a4 <fx_app_thread_entry+0x160>
 80117a2:	337f      	adds	r3, #127	; 0x7f
 80117a4:	11db      	asrs	r3, r3, #7
 80117a6:	3308      	adds	r3, #8
 80117a8:	461a      	mov	r2, r3
 80117aa:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 80117ae:	9300      	str	r3, [sp, #0]
 80117b0:	232a      	movs	r3, #42	; 0x2a
 80117b2:	f240 118f 	movw	r1, #399	; 0x18f
 80117b6:	20a9      	movs	r0, #169	; 0xa9
 80117b8:	f00d fc5c 	bl	801f074 <UTIL_LCD_DrawRect>
						UTIL_LCD_DrawRect(170, 300,(number/128)+6, 40, UTIL_LCD_COLOR_BLACK);
 80117bc:	4b48      	ldr	r3, [pc, #288]	; (80118e0 <fx_app_thread_entry+0x29c>)
 80117be:	681b      	ldr	r3, [r3, #0]
 80117c0:	2b00      	cmp	r3, #0
 80117c2:	da00      	bge.n	80117c6 <fx_app_thread_entry+0x182>
 80117c4:	337f      	adds	r3, #127	; 0x7f
 80117c6:	11db      	asrs	r3, r3, #7
 80117c8:	3306      	adds	r3, #6
 80117ca:	461a      	mov	r2, r3
 80117cc:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 80117d0:	9300      	str	r3, [sp, #0]
 80117d2:	2328      	movs	r3, #40	; 0x28
 80117d4:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80117d8:	20aa      	movs	r0, #170	; 0xaa
 80117da:	f00d fc4b 	bl	801f074 <UTIL_LCD_DrawRect>
						UTIL_LCD_DrawRect(169, 299,(number/128)+8, 42, UTIL_LCD_COLOR_BLACK);
 80117de:	4b40      	ldr	r3, [pc, #256]	; (80118e0 <fx_app_thread_entry+0x29c>)
 80117e0:	681b      	ldr	r3, [r3, #0]
 80117e2:	2b00      	cmp	r3, #0
 80117e4:	da00      	bge.n	80117e8 <fx_app_thread_entry+0x1a4>
 80117e6:	337f      	adds	r3, #127	; 0x7f
 80117e8:	11db      	asrs	r3, r3, #7
 80117ea:	3308      	adds	r3, #8
 80117ec:	461a      	mov	r2, r3
 80117ee:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 80117f2:	9300      	str	r3, [sp, #0]
 80117f4:	232a      	movs	r3, #42	; 0x2a
 80117f6:	f240 112b 	movw	r1, #299	; 0x12b
 80117fa:	20a9      	movs	r0, #169	; 0xa9
 80117fc:	f00d fc3a 	bl	801f074 <UTIL_LCD_DrawRect>
						UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_CYAN);
 8011800:	f46f 007f 	mvn.w	r0, #16711680	; 0xff0000
 8011804:	f00d fa44 	bl	801ec90 <UTIL_LCD_SetTextColor>
						UTIL_LCD_DisplayStringAt(0, 220, (uint8_t *)str, RIGHT_MODE);
 8011808:	2302      	movs	r3, #2
 801180a:	4a38      	ldr	r2, [pc, #224]	; (80118ec <fx_app_thread_entry+0x2a8>)
 801180c:	21dc      	movs	r1, #220	; 0xdc
 801180e:	2000      	movs	r0, #0
 8011810:	f00d fb82 	bl	801ef18 <UTIL_LCD_DisplayStringAt>
						UTIL_LCD_DisplayStringAt(0, 220, (uint8_t *)"size of file ", CENTER_MODE);
 8011814:	2301      	movs	r3, #1
 8011816:	4a38      	ldr	r2, [pc, #224]	; (80118f8 <fx_app_thread_entry+0x2b4>)
 8011818:	21dc      	movs	r1, #220	; 0xdc
 801181a:	2000      	movs	r0, #0
 801181c:	f00d fb7c 	bl	801ef18 <UTIL_LCD_DisplayStringAt>
						if(strcmp(newf,"new firmware")==0)
 8011820:	4936      	ldr	r1, [pc, #216]	; (80118fc <fx_app_thread_entry+0x2b8>)
 8011822:	482e      	ldr	r0, [pc, #184]	; (80118dc <fx_app_thread_entry+0x298>)
 8011824:	f7ee fe78 	bl	8000518 <strcmp>
 8011828:	4603      	mov	r3, r0
 801182a:	2b00      	cmp	r3, #0
 801182c:	f040 8100 	bne.w	8011a30 <fx_app_thread_entry+0x3ec>
						{
							fx_file_delete(&sdio_disk,"backup");
 8011830:	4933      	ldr	r1, [pc, #204]	; (8011900 <fx_app_thread_entry+0x2bc>)
 8011832:	4821      	ldr	r0, [pc, #132]	; (80118b8 <fx_app_thread_entry+0x274>)
 8011834:	f00a f808 	bl	801b848 <_fxe_file_delete>
							fx_file_rename(&sdio_disk,"current firmware","backup");
 8011838:	4a31      	ldr	r2, [pc, #196]	; (8011900 <fx_app_thread_entry+0x2bc>)
 801183a:	4932      	ldr	r1, [pc, #200]	; (8011904 <fx_app_thread_entry+0x2c0>)
 801183c:	481e      	ldr	r0, [pc, #120]	; (80118b8 <fx_app_thread_entry+0x274>)
 801183e:	f00a f8eb 	bl	801ba18 <_fxe_file_rename>
							sd_status =  fx_file_create(&sdio_disk,"current firmware");
 8011842:	4930      	ldr	r1, [pc, #192]	; (8011904 <fx_app_thread_entry+0x2c0>)
 8011844:	481c      	ldr	r0, [pc, #112]	; (80118b8 <fx_app_thread_entry+0x274>)
 8011846:	f009 ffd1 	bl	801b7ec <_fxe_file_create>
 801184a:	6178      	str	r0, [r7, #20]

							if (sd_status != FX_SUCCESS)
 801184c:	697b      	ldr	r3, [r7, #20]
 801184e:	2b00      	cmp	r3, #0
 8011850:	d004      	beq.n	801185c <fx_app_thread_entry+0x218>
							{
								if (sd_status != FX_ALREADY_CREATED)
 8011852:	697b      	ldr	r3, [r7, #20]
 8011854:	2b0b      	cmp	r3, #11
 8011856:	d001      	beq.n	801185c <fx_app_thread_entry+0x218>
								{
									Error_Handler();
 8011858:	f7f0 fc66 	bl	8002128 <Error_Handler>
								}
							}
							sd_status =  fx_file_open(&sdio_disk, &fx_file,"current firmware", FX_OPEN_FOR_WRITE);
 801185c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8011860:	9300      	str	r3, [sp, #0]
 8011862:	2301      	movs	r3, #1
 8011864:	4a27      	ldr	r2, [pc, #156]	; (8011904 <fx_app_thread_entry+0x2c0>)
 8011866:	4928      	ldr	r1, [pc, #160]	; (8011908 <fx_app_thread_entry+0x2c4>)
 8011868:	4813      	ldr	r0, [pc, #76]	; (80118b8 <fx_app_thread_entry+0x274>)
 801186a:	f00a f81b 	bl	801b8a4 <_fxe_file_open>
 801186e:	6178      	str	r0, [r7, #20]

							if (sd_status != FX_SUCCESS)
 8011870:	697b      	ldr	r3, [r7, #20]
 8011872:	2b00      	cmp	r3, #0
 8011874:	d001      	beq.n	801187a <fx_app_thread_entry+0x236>
							{
								Error_Handler();
 8011876:	f7f0 fc57 	bl	8002128 <Error_Handler>
							}
							UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_WHITE);
 801187a:	f04f 30ff 	mov.w	r0, #4294967295
 801187e:	f00d fa07 	bl	801ec90 <UTIL_LCD_SetTextColor>
							UTIL_LCD_DisplayStringAt(0, 150, (uint8_t *)"Download new firmware ", RIGHT_MODE);
 8011882:	2302      	movs	r3, #2
 8011884:	4a21      	ldr	r2, [pc, #132]	; (801190c <fx_app_thread_entry+0x2c8>)
 8011886:	2196      	movs	r1, #150	; 0x96
 8011888:	2000      	movs	r0, #0
 801188a:	f00d fb45 	bl	801ef18 <UTIL_LCD_DisplayStringAt>
							MQTT_Pub("123456", "ready");
 801188e:	4920      	ldr	r1, [pc, #128]	; (8011910 <fx_app_thread_entry+0x2cc>)
 8011890:	4810      	ldr	r0, [pc, #64]	; (80118d4 <fx_app_thread_entry+0x290>)
 8011892:	f7ef febf 	bl	8001614 <MQTT_Pub>
							HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8011896:	2200      	movs	r2, #0
 8011898:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801189c:	481d      	ldr	r0, [pc, #116]	; (8011914 <fx_app_thread_entry+0x2d0>)
 801189e:	f7f5 fb81 	bl	8006fa4 <HAL_GPIO_WritePin>
							status = 0;
 80118a2:	2300      	movs	r3, #0
 80118a4:	60fb      	str	r3, [r7, #12]
 80118a6:	e0c3      	b.n	8011a30 <fx_app_thread_entry+0x3ec>
 80118a8:	240023f8 	.word	0x240023f8
 80118ac:	24002560 	.word	0x24002560
 80118b0:	08011fe5 	.word	0x08011fe5
 80118b4:	08020cfc 	.word	0x08020cfc
 80118b8:	24002760 	.word	0x24002760
 80118bc:	240014dc 	.word	0x240014dc
 80118c0:	ffff0000 	.word	0xffff0000
 80118c4:	08020d0c 	.word	0x08020d0c
 80118c8:	24002400 	.word	0x24002400
 80118cc:	08020d1c 	.word	0x08020d1c
 80118d0:	08020d38 	.word	0x08020d38
 80118d4:	08020d44 	.word	0x08020d44
 80118d8:	24001594 	.word	0x24001594
 80118dc:	240015d4 	.word	0x240015d4
 80118e0:	24002424 	.word	0x24002424
 80118e4:	08020d4c 	.word	0x08020d4c
 80118e8:	08020d5c 	.word	0x08020d5c
 80118ec:	24002404 	.word	0x24002404
 80118f0:	51eb851f 	.word	0x51eb851f
 80118f4:	2400242c 	.word	0x2400242c
 80118f8:	08020d60 	.word	0x08020d60
 80118fc:	08020d70 	.word	0x08020d70
 8011900:	08020d80 	.word	0x08020d80
 8011904:	08020d88 	.word	0x08020d88
 8011908:	24004c18 	.word	0x24004c18
 801190c:	08020d9c 	.word	0x08020d9c
 8011910:	08020db4 	.word	0x08020db4
 8011914:	58021400 	.word	0x58021400
						}

					}
					else
					{
						err++;
 8011918:	4ba6      	ldr	r3, [pc, #664]	; (8011bb4 <fx_app_thread_entry+0x570>)
 801191a:	681b      	ldr	r3, [r3, #0]
 801191c:	3301      	adds	r3, #1
 801191e:	4aa5      	ldr	r2, [pc, #660]	; (8011bb4 <fx_app_thread_entry+0x570>)
 8011920:	6013      	str	r3, [r2, #0]
						if(err > 50000000)
 8011922:	4ba4      	ldr	r3, [pc, #656]	; (8011bb4 <fx_app_thread_entry+0x570>)
 8011924:	681b      	ldr	r3, [r3, #0]
 8011926:	4aa4      	ldr	r2, [pc, #656]	; (8011bb8 <fx_app_thread_entry+0x574>)
 8011928:	4293      	cmp	r3, r2
 801192a:	f340 8081 	ble.w	8011a30 <fx_app_thread_entry+0x3ec>
						{
							MQTT_Pub("123456", "load backup");
 801192e:	49a3      	ldr	r1, [pc, #652]	; (8011bbc <fx_app_thread_entry+0x578>)
 8011930:	48a3      	ldr	r0, [pc, #652]	; (8011bc0 <fx_app_thread_entry+0x57c>)
 8011932:	f7ef fe6f 	bl	8001614 <MQTT_Pub>
							sd_status =  fx_file_create(&sdio_disk,"backup");
 8011936:	49a3      	ldr	r1, [pc, #652]	; (8011bc4 <fx_app_thread_entry+0x580>)
 8011938:	48a3      	ldr	r0, [pc, #652]	; (8011bc8 <fx_app_thread_entry+0x584>)
 801193a:	f009 ff57 	bl	801b7ec <_fxe_file_create>
 801193e:	6178      	str	r0, [r7, #20]

							if (sd_status != FX_SUCCESS)
 8011940:	697b      	ldr	r3, [r7, #20]
 8011942:	2b00      	cmp	r3, #0
 8011944:	d004      	beq.n	8011950 <fx_app_thread_entry+0x30c>
							{
								if (sd_status != FX_ALREADY_CREATED)
 8011946:	697b      	ldr	r3, [r7, #20]
 8011948:	2b0b      	cmp	r3, #11
 801194a:	d001      	beq.n	8011950 <fx_app_thread_entry+0x30c>
								{
									Error_Handler();
 801194c:	f7f0 fbec 	bl	8002128 <Error_Handler>
								}
							}

							UTIL_LCD_DisplayStringAt(0, 150, (uint8_t *)"                  ", RIGHT_MODE);
 8011950:	2302      	movs	r3, #2
 8011952:	4a9e      	ldr	r2, [pc, #632]	; (8011bcc <fx_app_thread_entry+0x588>)
 8011954:	2196      	movs	r1, #150	; 0x96
 8011956:	2000      	movs	r0, #0
 8011958:	f00d fade 	bl	801ef18 <UTIL_LCD_DisplayStringAt>
							UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_WHITE);
 801195c:	f04f 30ff 	mov.w	r0, #4294967295
 8011960:	f00d f996 	bl	801ec90 <UTIL_LCD_SetTextColor>
							UTIL_LCD_DisplayStringAt(0, 150, (uint8_t *)"load backup ", RIGHT_MODE);
 8011964:	2302      	movs	r3, #2
 8011966:	4a9a      	ldr	r2, [pc, #616]	; (8011bd0 <fx_app_thread_entry+0x58c>)
 8011968:	2196      	movs	r1, #150	; 0x96
 801196a:	2000      	movs	r0, #0
 801196c:	f00d fad4 	bl	801ef18 <UTIL_LCD_DisplayStringAt>

							sd_status = load("backup");
 8011970:	4894      	ldr	r0, [pc, #592]	; (8011bc4 <fx_app_thread_entry+0x580>)
 8011972:	f000 f9cb 	bl	8011d0c <load>
 8011976:	6178      	str	r0, [r7, #20]
							if (sd_status != FX_SUCCESS)
 8011978:	697b      	ldr	r3, [r7, #20]
 801197a:	2b00      	cmp	r3, #0
 801197c:	d001      	beq.n	8011982 <fx_app_thread_entry+0x33e>
							{
								Error_Handler();
 801197e:	f7f0 fbd3 	bl	8002128 <Error_Handler>
							}

							HAL_FLASH_Unlock();
 8011982:	f7f4 f93f 	bl	8005c04 <HAL_FLASH_Unlock>

							HAL_FLASH_OB_Unlock();
 8011986:	f7f4 f977 	bl	8005c78 <HAL_FLASH_OB_Unlock>
							HAL_FLASHEx_OBGetConfig(&OBInit);
 801198a:	4892      	ldr	r0, [pc, #584]	; (8011bd4 <fx_app_thread_entry+0x590>)
 801198c:	f7f4 fc88 	bl	80062a0 <HAL_FLASHEx_OBGetConfig>

							OBInit.Banks     = FLASH_BANK_1;
 8011990:	4b90      	ldr	r3, [pc, #576]	; (8011bd4 <fx_app_thread_entry+0x590>)
 8011992:	2201      	movs	r2, #1
 8011994:	61da      	str	r2, [r3, #28]
							HAL_FLASHEx_OBGetConfig(&OBInit);
 8011996:	488f      	ldr	r0, [pc, #572]	; (8011bd4 <fx_app_thread_entry+0x590>)
 8011998:	f7f4 fc82 	bl	80062a0 <HAL_FLASHEx_OBGetConfig>

							if ((OBInit.USERConfig & OB_SWAP_BANK_ENABLE) == OB_SWAP_BANK_DISABLE)
 801199c:	4b8d      	ldr	r3, [pc, #564]	; (8011bd4 <fx_app_thread_entry+0x590>)
 801199e:	699b      	ldr	r3, [r3, #24]
 80119a0:	2b00      	cmp	r3, #0
 80119a2:	db23      	blt.n	80119ec <fx_app_thread_entry+0x3a8>
							{
								OBInit.OptionType = OPTIONBYTE_USER;
 80119a4:	4b8b      	ldr	r3, [pc, #556]	; (8011bd4 <fx_app_thread_entry+0x590>)
 80119a6:	2204      	movs	r2, #4
 80119a8:	601a      	str	r2, [r3, #0]
								OBInit.USERType   = OB_USER_SWAP_BANK;
 80119aa:	4b8a      	ldr	r3, [pc, #552]	; (8011bd4 <fx_app_thread_entry+0x590>)
 80119ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80119b0:	615a      	str	r2, [r3, #20]
								OBInit.USERConfig = OB_SWAP_BANK_ENABLE;
 80119b2:	4b88      	ldr	r3, [pc, #544]	; (8011bd4 <fx_app_thread_entry+0x590>)
 80119b4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80119b8:	619a      	str	r2, [r3, #24]
								HAL_FLASHEx_OBProgram(&OBInit);
 80119ba:	4886      	ldr	r0, [pc, #536]	; (8011bd4 <fx_app_thread_entry+0x590>)
 80119bc:	f7f4 fbcc 	bl	8006158 <HAL_FLASHEx_OBProgram>

								HAL_FLASH_OB_Launch();
 80119c0:	f7f4 f97c 	bl	8005cbc <HAL_FLASH_OB_Launch>

								HAL_NVIC_SystemReset();
 80119c4:	f7f3 f84d 	bl	8004a62 <HAL_NVIC_SystemReset>
  __ASM volatile ("dsb 0xF":::"memory");
 80119c8:	f3bf 8f4f 	dsb	sy
}
 80119cc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80119ce:	f3bf 8f6f 	isb	sy
}
 80119d2:	bf00      	nop
    SCB->ICIALLU = 0UL;
 80119d4:	4b80      	ldr	r3, [pc, #512]	; (8011bd8 <fx_app_thread_entry+0x594>)
 80119d6:	2200      	movs	r2, #0
 80119d8:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80119dc:	f3bf 8f4f 	dsb	sy
}
 80119e0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80119e2:	f3bf 8f6f 	isb	sy
}
 80119e6:	bf00      	nop
}
 80119e8:	bf00      	nop
 80119ea:	e021      	b.n	8011a30 <fx_app_thread_entry+0x3ec>
								SCB_InvalidateICache();
							}
							else
							{

								OBInit.OptionType = OPTIONBYTE_USER;
 80119ec:	4b79      	ldr	r3, [pc, #484]	; (8011bd4 <fx_app_thread_entry+0x590>)
 80119ee:	2204      	movs	r2, #4
 80119f0:	601a      	str	r2, [r3, #0]
								OBInit.USERType = OB_USER_SWAP_BANK;
 80119f2:	4b78      	ldr	r3, [pc, #480]	; (8011bd4 <fx_app_thread_entry+0x590>)
 80119f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80119f8:	615a      	str	r2, [r3, #20]
								OBInit.USERConfig = OB_SWAP_BANK_DISABLE;
 80119fa:	4b76      	ldr	r3, [pc, #472]	; (8011bd4 <fx_app_thread_entry+0x590>)
 80119fc:	2200      	movs	r2, #0
 80119fe:	619a      	str	r2, [r3, #24]
								HAL_FLASHEx_OBProgram(&OBInit);
 8011a00:	4874      	ldr	r0, [pc, #464]	; (8011bd4 <fx_app_thread_entry+0x590>)
 8011a02:	f7f4 fba9 	bl	8006158 <HAL_FLASHEx_OBProgram>

								HAL_FLASH_OB_Launch();
 8011a06:	f7f4 f959 	bl	8005cbc <HAL_FLASH_OB_Launch>

								HAL_NVIC_SystemReset();
 8011a0a:	f7f3 f82a 	bl	8004a62 <HAL_NVIC_SystemReset>
  __ASM volatile ("dsb 0xF":::"memory");
 8011a0e:	f3bf 8f4f 	dsb	sy
}
 8011a12:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8011a14:	f3bf 8f6f 	isb	sy
}
 8011a18:	bf00      	nop
    SCB->ICIALLU = 0UL;
 8011a1a:	4b6f      	ldr	r3, [pc, #444]	; (8011bd8 <fx_app_thread_entry+0x594>)
 8011a1c:	2200      	movs	r2, #0
 8011a1e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8011a22:	f3bf 8f4f 	dsb	sy
}
 8011a26:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8011a28:	f3bf 8f6f 	isb	sy
}
 8011a2c:	bf00      	nop
}
 8011a2e:	bf00      	nop
				while(status==1)
 8011a30:	68fb      	ldr	r3, [r7, #12]
 8011a32:	2b01      	cmp	r3, #1
 8011a34:	f43f ae68 	beq.w	8011708 <fx_app_thread_entry+0xc4>
						}
					}
				}
			}

			if(SIM800.mqttReceive.newEvent)
 8011a38:	4b68      	ldr	r3, [pc, #416]	; (8011bdc <fx_app_thread_entry+0x598>)
 8011a3a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8011a3e:	2b00      	cmp	r3, #0
 8011a40:	d07e      	beq.n	8011b40 <fx_app_thread_entry+0x4fc>
			{


				memcpy(rec,SIM800.mqttReceive.payload,64);
 8011a42:	4a67      	ldr	r2, [pc, #412]	; (8011be0 <fx_app_thread_entry+0x59c>)
 8011a44:	4b65      	ldr	r3, [pc, #404]	; (8011bdc <fx_app_thread_entry+0x598>)
 8011a46:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8011a4a:	4694      	mov	ip, r2
 8011a4c:	f104 0e40 	add.w	lr, r4, #64	; 0x40
 8011a50:	4665      	mov	r5, ip
 8011a52:	4626      	mov	r6, r4
 8011a54:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8011a56:	6028      	str	r0, [r5, #0]
 8011a58:	6069      	str	r1, [r5, #4]
 8011a5a:	60aa      	str	r2, [r5, #8]
 8011a5c:	60eb      	str	r3, [r5, #12]
 8011a5e:	3410      	adds	r4, #16
 8011a60:	f10c 0c10 	add.w	ip, ip, #16
 8011a64:	4574      	cmp	r4, lr
 8011a66:	d1f3      	bne.n	8011a50 <fx_app_thread_entry+0x40c>
				strncpy(newf, rec, 12);
 8011a68:	220c      	movs	r2, #12
 8011a6a:	495d      	ldr	r1, [pc, #372]	; (8011be0 <fx_app_thread_entry+0x59c>)
 8011a6c:	485d      	ldr	r0, [pc, #372]	; (8011be4 <fx_app_thread_entry+0x5a0>)
 8011a6e:	f00d feff 	bl	801f870 <strncpy>
				newf[12] = '\0';
 8011a72:	4b5c      	ldr	r3, [pc, #368]	; (8011be4 <fx_app_thread_entry+0x5a0>)
 8011a74:	2200      	movs	r2, #0
 8011a76:	731a      	strb	r2, [r3, #12]
				sd_status =  fx_file_seek(&fx_file,64*j);
 8011a78:	4b5b      	ldr	r3, [pc, #364]	; (8011be8 <fx_app_thread_entry+0x5a4>)
 8011a7a:	681b      	ldr	r3, [r3, #0]
 8011a7c:	019b      	lsls	r3, r3, #6
 8011a7e:	4619      	mov	r1, r3
 8011a80:	485a      	ldr	r0, [pc, #360]	; (8011bec <fx_app_thread_entry+0x5a8>)
 8011a82:	f009 fff9 	bl	801ba78 <_fxe_file_seek>
 8011a86:	6178      	str	r0, [r7, #20]

				if (sd_status != FX_SUCCESS)
 8011a88:	697b      	ldr	r3, [r7, #20]
 8011a8a:	2b00      	cmp	r3, #0
 8011a8c:	d001      	beq.n	8011a92 <fx_app_thread_entry+0x44e>
				{
					Error_Handler();
 8011a8e:	f7f0 fb4b 	bl	8002128 <Error_Handler>
				}
				f=strcmp(rec,"fin");
 8011a92:	4957      	ldr	r1, [pc, #348]	; (8011bf0 <fx_app_thread_entry+0x5ac>)
 8011a94:	4852      	ldr	r0, [pc, #328]	; (8011be0 <fx_app_thread_entry+0x59c>)
 8011a96:	f7ee fd3f 	bl	8000518 <strcmp>
 8011a9a:	4603      	mov	r3, r0
 8011a9c:	4a55      	ldr	r2, [pc, #340]	; (8011bf4 <fx_app_thread_entry+0x5b0>)
 8011a9e:	6013      	str	r3, [r2, #0]
				f1=strcmp(rec,"ready");
 8011aa0:	4955      	ldr	r1, [pc, #340]	; (8011bf8 <fx_app_thread_entry+0x5b4>)
 8011aa2:	484f      	ldr	r0, [pc, #316]	; (8011be0 <fx_app_thread_entry+0x59c>)
 8011aa4:	f7ee fd38 	bl	8000518 <strcmp>
 8011aa8:	4603      	mov	r3, r0
 8011aaa:	4a54      	ldr	r2, [pc, #336]	; (8011bfc <fx_app_thread_entry+0x5b8>)
 8011aac:	6013      	str	r3, [r2, #0]
				f2=strcmp(newf,"new firmware");
 8011aae:	4954      	ldr	r1, [pc, #336]	; (8011c00 <fx_app_thread_entry+0x5bc>)
 8011ab0:	484c      	ldr	r0, [pc, #304]	; (8011be4 <fx_app_thread_entry+0x5a0>)
 8011ab2:	f7ee fd31 	bl	8000518 <strcmp>
 8011ab6:	4603      	mov	r3, r0
 8011ab8:	4a52      	ldr	r2, [pc, #328]	; (8011c04 <fx_app_thread_entry+0x5c0>)
 8011aba:	6013      	str	r3, [r2, #0]
				if((f!=0)&(f1!=0)&(f2!=0))
 8011abc:	4b4d      	ldr	r3, [pc, #308]	; (8011bf4 <fx_app_thread_entry+0x5b0>)
 8011abe:	681b      	ldr	r3, [r3, #0]
 8011ac0:	2b00      	cmp	r3, #0
 8011ac2:	bf14      	ite	ne
 8011ac4:	2301      	movne	r3, #1
 8011ac6:	2300      	moveq	r3, #0
 8011ac8:	b2da      	uxtb	r2, r3
 8011aca:	4b4c      	ldr	r3, [pc, #304]	; (8011bfc <fx_app_thread_entry+0x5b8>)
 8011acc:	681b      	ldr	r3, [r3, #0]
 8011ace:	2b00      	cmp	r3, #0
 8011ad0:	bf14      	ite	ne
 8011ad2:	2301      	movne	r3, #1
 8011ad4:	2300      	moveq	r3, #0
 8011ad6:	b2db      	uxtb	r3, r3
 8011ad8:	4013      	ands	r3, r2
 8011ada:	b2db      	uxtb	r3, r3
 8011adc:	461a      	mov	r2, r3
 8011ade:	4b49      	ldr	r3, [pc, #292]	; (8011c04 <fx_app_thread_entry+0x5c0>)
 8011ae0:	681b      	ldr	r3, [r3, #0]
 8011ae2:	2b00      	cmp	r3, #0
 8011ae4:	bf14      	ite	ne
 8011ae6:	2301      	movne	r3, #1
 8011ae8:	2300      	moveq	r3, #0
 8011aea:	b2db      	uxtb	r3, r3
 8011aec:	4013      	ands	r3, r2
 8011aee:	2b00      	cmp	r3, #0
 8011af0:	d00a      	beq.n	8011b08 <fx_app_thread_entry+0x4c4>
				{
					sd_status =  fx_file_write(&fx_file, rec, sizeof(rec));
 8011af2:	2240      	movs	r2, #64	; 0x40
 8011af4:	493a      	ldr	r1, [pc, #232]	; (8011be0 <fx_app_thread_entry+0x59c>)
 8011af6:	483d      	ldr	r0, [pc, #244]	; (8011bec <fx_app_thread_entry+0x5a8>)
 8011af8:	f009 ffec 	bl	801bad4 <_fxe_file_write>
 8011afc:	6178      	str	r0, [r7, #20]
					j++;
 8011afe:	4b3a      	ldr	r3, [pc, #232]	; (8011be8 <fx_app_thread_entry+0x5a4>)
 8011b00:	681b      	ldr	r3, [r3, #0]
 8011b02:	3301      	adds	r3, #1
 8011b04:	4a38      	ldr	r2, [pc, #224]	; (8011be8 <fx_app_thread_entry+0x5a4>)
 8011b06:	6013      	str	r3, [r2, #0]
				}

				if (sd_status != FX_SUCCESS)
 8011b08:	697b      	ldr	r3, [r7, #20]
 8011b0a:	2b00      	cmp	r3, #0
 8011b0c:	d001      	beq.n	8011b12 <fx_app_thread_entry+0x4ce>
				{
					Error_Handler();
 8011b0e:	f7f0 fb0b 	bl	8002128 <Error_Handler>
				}
				if(j%2 == 0)
 8011b12:	4b35      	ldr	r3, [pc, #212]	; (8011be8 <fx_app_thread_entry+0x5a4>)
 8011b14:	681b      	ldr	r3, [r3, #0]
 8011b16:	f003 0301 	and.w	r3, r3, #1
 8011b1a:	2b00      	cmp	r3, #0
 8011b1c:	d10c      	bne.n	8011b38 <fx_app_thread_entry+0x4f4>
				{
					UTIL_LCD_DrawVLine(171+i, 301, 38, UTIL_LCD_COLOR_CYAN);
 8011b1e:	693b      	ldr	r3, [r7, #16]
 8011b20:	33ab      	adds	r3, #171	; 0xab
 8011b22:	4618      	mov	r0, r3
 8011b24:	f46f 037f 	mvn.w	r3, #16711680	; 0xff0000
 8011b28:	2226      	movs	r2, #38	; 0x26
 8011b2a:	f240 112d 	movw	r1, #301	; 0x12d
 8011b2e:	f00d f93d 	bl	801edac <UTIL_LCD_DrawVLine>
//					sprintf(k, "%d", j*64);//(((number/64)/400)+1)
//					UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_CYAN);
//					UTIL_LCD_DisplayStringAt(440, 220, (uint8_t *)k, LEFT_MODE);
					i++;
 8011b32:	693b      	ldr	r3, [r7, #16]
 8011b34:	3301      	adds	r3, #1
 8011b36:	613b      	str	r3, [r7, #16]
				}
				SIM800.mqttReceive.newEvent = 0;
 8011b38:	4b28      	ldr	r3, [pc, #160]	; (8011bdc <fx_app_thread_entry+0x598>)
 8011b3a:	2200      	movs	r2, #0
 8011b3c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	while(f!=0)
 8011b40:	4b2c      	ldr	r3, [pc, #176]	; (8011bf4 <fx_app_thread_entry+0x5b0>)
 8011b42:	681b      	ldr	r3, [r3, #0]
 8011b44:	2b00      	cmp	r3, #0
 8011b46:	f47f ad9d 	bne.w	8011684 <fx_app_thread_entry+0x40>
		}
	}



	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8011b4a:	2201      	movs	r2, #1
 8011b4c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8011b50:	482d      	ldr	r0, [pc, #180]	; (8011c08 <fx_app_thread_entry+0x5c4>)
 8011b52:	f7f5 fa27 	bl	8006fa4 <HAL_GPIO_WritePin>

	sd_status =  fx_file_close(&fx_file);
 8011b56:	4825      	ldr	r0, [pc, #148]	; (8011bec <fx_app_thread_entry+0x5a8>)
 8011b58:	f009 fe1c 	bl	801b794 <_fxe_file_close>
 8011b5c:	6178      	str	r0, [r7, #20]

	if (sd_status != FX_SUCCESS)
 8011b5e:	697b      	ldr	r3, [r7, #20]
 8011b60:	2b00      	cmp	r3, #0
 8011b62:	d001      	beq.n	8011b68 <fx_app_thread_entry+0x524>
	{
		Error_Handler();
 8011b64:	f7f0 fae0 	bl	8002128 <Error_Handler>
	}

	sd_status = fx_media_flush(&sdio_disk);
 8011b68:	4817      	ldr	r0, [pc, #92]	; (8011bc8 <fx_app_thread_entry+0x584>)
 8011b6a:	f00a f813 	bl	801bb94 <_fxe_media_flush>
 8011b6e:	6178      	str	r0, [r7, #20]

	if (sd_status != FX_SUCCESS)
 8011b70:	697b      	ldr	r3, [r7, #20]
 8011b72:	2b00      	cmp	r3, #0
 8011b74:	d001      	beq.n	8011b7a <fx_app_thread_entry+0x536>
	{
		Error_Handler();
 8011b76:	f7f0 fad7 	bl	8002128 <Error_Handler>
	}



	UTIL_LCD_DisplayStringAt(0, 150, (uint8_t *)"                      ", RIGHT_MODE);
 8011b7a:	2302      	movs	r3, #2
 8011b7c:	4a23      	ldr	r2, [pc, #140]	; (8011c0c <fx_app_thread_entry+0x5c8>)
 8011b7e:	2196      	movs	r1, #150	; 0x96
 8011b80:	2000      	movs	r0, #0
 8011b82:	f00d f9c9 	bl	801ef18 <UTIL_LCD_DisplayStringAt>
	UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_WHITE);
 8011b86:	f04f 30ff 	mov.w	r0, #4294967295
 8011b8a:	f00d f881 	bl	801ec90 <UTIL_LCD_SetTextColor>
	UTIL_LCD_DisplayStringAt(0, 150, (uint8_t *)"load new firmware ", RIGHT_MODE);
 8011b8e:	2302      	movs	r3, #2
 8011b90:	4a1f      	ldr	r2, [pc, #124]	; (8011c10 <fx_app_thread_entry+0x5cc>)
 8011b92:	2196      	movs	r1, #150	; 0x96
 8011b94:	2000      	movs	r0, #0
 8011b96:	f00d f9bf 	bl	801ef18 <UTIL_LCD_DisplayStringAt>

	sd_status = load("current firmware");
 8011b9a:	481e      	ldr	r0, [pc, #120]	; (8011c14 <fx_app_thread_entry+0x5d0>)
 8011b9c:	f000 f8b6 	bl	8011d0c <load>
 8011ba0:	6178      	str	r0, [r7, #20]
	if (sd_status != FX_SUCCESS)
 8011ba2:	697b      	ldr	r3, [r7, #20]
 8011ba4:	2b00      	cmp	r3, #0
 8011ba6:	d001      	beq.n	8011bac <fx_app_thread_entry+0x568>
	{
		Error_Handler();
 8011ba8:	f7f0 fabe 	bl	8002128 <Error_Handler>
	}
	for(int i=0;i<(number/128);i++){
 8011bac:	2300      	movs	r3, #0
 8011bae:	60bb      	str	r3, [r7, #8]
 8011bb0:	e03e      	b.n	8011c30 <fx_app_thread_entry+0x5ec>
 8011bb2:	bf00      	nop
 8011bb4:	24002428 	.word	0x24002428
 8011bb8:	02faf080 	.word	0x02faf080
 8011bbc:	08020dbc 	.word	0x08020dbc
 8011bc0:	08020d44 	.word	0x08020d44
 8011bc4:	08020d80 	.word	0x08020d80
 8011bc8:	24002760 	.word	0x24002760
 8011bcc:	08020dc8 	.word	0x08020dc8
 8011bd0:	08020ddc 	.word	0x08020ddc
 8011bd4:	24002450 	.word	0x24002450
 8011bd8:	e000ed00 	.word	0xe000ed00
 8011bdc:	240014dc 	.word	0x240014dc
 8011be0:	24001594 	.word	0x24001594
 8011be4:	240015d4 	.word	0x240015d4
 8011be8:	24002430 	.word	0x24002430
 8011bec:	24004c18 	.word	0x24004c18
 8011bf0:	08020dec 	.word	0x08020dec
 8011bf4:	24000010 	.word	0x24000010
 8011bf8:	08020db4 	.word	0x08020db4
 8011bfc:	24002434 	.word	0x24002434
 8011c00:	08020d70 	.word	0x08020d70
 8011c04:	24002438 	.word	0x24002438
 8011c08:	58021400 	.word	0x58021400
 8011c0c:	08020df0 	.word	0x08020df0
 8011c10:	08020e08 	.word	0x08020e08
 8011c14:	08020d88 	.word	0x08020d88
		UTIL_LCD_DrawVLine(171+i, 401, 38, UTIL_LCD_COLOR_ORANGE);
 8011c18:	68bb      	ldr	r3, [r7, #8]
 8011c1a:	33ab      	adds	r3, #171	; 0xab
 8011c1c:	4618      	mov	r0, r3
 8011c1e:	4b37      	ldr	r3, [pc, #220]	; (8011cfc <fx_app_thread_entry+0x6b8>)
 8011c20:	2226      	movs	r2, #38	; 0x26
 8011c22:	f240 1191 	movw	r1, #401	; 0x191
 8011c26:	f00d f8c1 	bl	801edac <UTIL_LCD_DrawVLine>
	for(int i=0;i<(number/128);i++){
 8011c2a:	68bb      	ldr	r3, [r7, #8]
 8011c2c:	3301      	adds	r3, #1
 8011c2e:	60bb      	str	r3, [r7, #8]
 8011c30:	4b33      	ldr	r3, [pc, #204]	; (8011d00 <fx_app_thread_entry+0x6bc>)
 8011c32:	681b      	ldr	r3, [r3, #0]
 8011c34:	2b00      	cmp	r3, #0
 8011c36:	da00      	bge.n	8011c3a <fx_app_thread_entry+0x5f6>
 8011c38:	337f      	adds	r3, #127	; 0x7f
 8011c3a:	11db      	asrs	r3, r3, #7
 8011c3c:	461a      	mov	r2, r3
 8011c3e:	68bb      	ldr	r3, [r7, #8]
 8011c40:	4293      	cmp	r3, r2
 8011c42:	dbe9      	blt.n	8011c18 <fx_app_thread_entry+0x5d4>
	}
	//HAL_FLASH_Unlock();

	HAL_FLASH_OB_Unlock();
 8011c44:	f7f4 f818 	bl	8005c78 <HAL_FLASH_OB_Unlock>
	HAL_FLASHEx_OBGetConfig(&OBInit);
 8011c48:	482e      	ldr	r0, [pc, #184]	; (8011d04 <fx_app_thread_entry+0x6c0>)
 8011c4a:	f7f4 fb29 	bl	80062a0 <HAL_FLASHEx_OBGetConfig>

	OBInit.Banks     = FLASH_BANK_1;
 8011c4e:	4b2d      	ldr	r3, [pc, #180]	; (8011d04 <fx_app_thread_entry+0x6c0>)
 8011c50:	2201      	movs	r2, #1
 8011c52:	61da      	str	r2, [r3, #28]
	HAL_FLASHEx_OBGetConfig(&OBInit);
 8011c54:	482b      	ldr	r0, [pc, #172]	; (8011d04 <fx_app_thread_entry+0x6c0>)
 8011c56:	f7f4 fb23 	bl	80062a0 <HAL_FLASHEx_OBGetConfig>

	if ((OBInit.USERConfig & OB_SWAP_BANK_ENABLE) == OB_SWAP_BANK_DISABLE)
 8011c5a:	4b2a      	ldr	r3, [pc, #168]	; (8011d04 <fx_app_thread_entry+0x6c0>)
 8011c5c:	699b      	ldr	r3, [r3, #24]
 8011c5e:	2b00      	cmp	r3, #0
 8011c60:	db22      	blt.n	8011ca8 <fx_app_thread_entry+0x664>
	{
		OBInit.OptionType = OPTIONBYTE_USER;
 8011c62:	4b28      	ldr	r3, [pc, #160]	; (8011d04 <fx_app_thread_entry+0x6c0>)
 8011c64:	2204      	movs	r2, #4
 8011c66:	601a      	str	r2, [r3, #0]
		OBInit.USERType   = OB_USER_SWAP_BANK;
 8011c68:	4b26      	ldr	r3, [pc, #152]	; (8011d04 <fx_app_thread_entry+0x6c0>)
 8011c6a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8011c6e:	615a      	str	r2, [r3, #20]
		OBInit.USERConfig = OB_SWAP_BANK_ENABLE;
 8011c70:	4b24      	ldr	r3, [pc, #144]	; (8011d04 <fx_app_thread_entry+0x6c0>)
 8011c72:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8011c76:	619a      	str	r2, [r3, #24]
		HAL_FLASHEx_OBProgram(&OBInit);
 8011c78:	4822      	ldr	r0, [pc, #136]	; (8011d04 <fx_app_thread_entry+0x6c0>)
 8011c7a:	f7f4 fa6d 	bl	8006158 <HAL_FLASHEx_OBProgram>

		HAL_FLASH_OB_Launch();
 8011c7e:	f7f4 f81d 	bl	8005cbc <HAL_FLASH_OB_Launch>

		HAL_NVIC_SystemReset();
 8011c82:	f7f2 feee 	bl	8004a62 <HAL_NVIC_SystemReset>
  __ASM volatile ("dsb 0xF":::"memory");
 8011c86:	f3bf 8f4f 	dsb	sy
}
 8011c8a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8011c8c:	f3bf 8f6f 	isb	sy
}
 8011c90:	bf00      	nop
    SCB->ICIALLU = 0UL;
 8011c92:	4b1d      	ldr	r3, [pc, #116]	; (8011d08 <fx_app_thread_entry+0x6c4>)
 8011c94:	2200      	movs	r2, #0
 8011c96:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8011c9a:	f3bf 8f4f 	dsb	sy
}
 8011c9e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8011ca0:	f3bf 8f6f 	isb	sy
}
 8011ca4:	bf00      	nop
}
 8011ca6:	e021      	b.n	8011cec <fx_app_thread_entry+0x6a8>
		SCB_InvalidateICache();
	}
	else
	{

		OBInit.OptionType = OPTIONBYTE_USER;
 8011ca8:	4b16      	ldr	r3, [pc, #88]	; (8011d04 <fx_app_thread_entry+0x6c0>)
 8011caa:	2204      	movs	r2, #4
 8011cac:	601a      	str	r2, [r3, #0]
		OBInit.USERType = OB_USER_SWAP_BANK;
 8011cae:	4b15      	ldr	r3, [pc, #84]	; (8011d04 <fx_app_thread_entry+0x6c0>)
 8011cb0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8011cb4:	615a      	str	r2, [r3, #20]
		OBInit.USERConfig = OB_SWAP_BANK_DISABLE;
 8011cb6:	4b13      	ldr	r3, [pc, #76]	; (8011d04 <fx_app_thread_entry+0x6c0>)
 8011cb8:	2200      	movs	r2, #0
 8011cba:	619a      	str	r2, [r3, #24]
		HAL_FLASHEx_OBProgram(&OBInit);
 8011cbc:	4811      	ldr	r0, [pc, #68]	; (8011d04 <fx_app_thread_entry+0x6c0>)
 8011cbe:	f7f4 fa4b 	bl	8006158 <HAL_FLASHEx_OBProgram>

		HAL_FLASH_OB_Launch();
 8011cc2:	f7f3 fffb 	bl	8005cbc <HAL_FLASH_OB_Launch>

		HAL_NVIC_SystemReset();
 8011cc6:	f7f2 fecc 	bl	8004a62 <HAL_NVIC_SystemReset>
  __ASM volatile ("dsb 0xF":::"memory");
 8011cca:	f3bf 8f4f 	dsb	sy
}
 8011cce:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8011cd0:	f3bf 8f6f 	isb	sy
}
 8011cd4:	bf00      	nop
    SCB->ICIALLU = 0UL;
 8011cd6:	4b0c      	ldr	r3, [pc, #48]	; (8011d08 <fx_app_thread_entry+0x6c4>)
 8011cd8:	2200      	movs	r2, #0
 8011cda:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8011cde:	f3bf 8f4f 	dsb	sy
}
 8011ce2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8011ce4:	f3bf 8f6f 	isb	sy
}
 8011ce8:	bf00      	nop
}
 8011cea:	bf00      	nop

		SCB_InvalidateICache();
	}
	tx_thread_sleep(40);
 8011cec:	2028      	movs	r0, #40	; 0x28
 8011cee:	f00b fe27 	bl	801d940 <_tx_thread_sleep>


	/* USER CODE END fx_app_thread_entry 1 */
}
 8011cf2:	bf00      	nop
 8011cf4:	371c      	adds	r7, #28
 8011cf6:	46bd      	mov	sp, r7
 8011cf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011cfa:	bf00      	nop
 8011cfc:	ffffa500 	.word	0xffffa500
 8011d00:	24002424 	.word	0x24002424
 8011d04:	24002450 	.word	0x24002450
 8011d08:	e000ed00 	.word	0xe000ed00

08011d0c <load>:
/* USER CODE BEGIN 1 */



UINT load(CHAR * file_name)
{
 8011d0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011d10:	b08b      	sub	sp, #44	; 0x2c
 8011d12:	af02      	add	r7, sp, #8
 8011d14:	6078      	str	r0, [r7, #4]
 8011d16:	466b      	mov	r3, sp
 8011d18:	461e      	mov	r6, r3
	int k =0;
 8011d1a:	2300      	movs	r3, #0
 8011d1c:	61fb      	str	r3, [r7, #28]
	//int i =0;
	ULONG bytes_read;
	ULONG offset=32;
 8011d1e:	2320      	movs	r3, #32
 8011d20:	617b      	str	r3, [r7, #20]
	// int j=0;

	CHAR read_buffer[offset];
 8011d22:	6979      	ldr	r1, [r7, #20]
 8011d24:	460b      	mov	r3, r1
 8011d26:	3b01      	subs	r3, #1
 8011d28:	613b      	str	r3, [r7, #16]
 8011d2a:	2300      	movs	r3, #0
 8011d2c:	4688      	mov	r8, r1
 8011d2e:	4699      	mov	r9, r3
 8011d30:	f04f 0200 	mov.w	r2, #0
 8011d34:	f04f 0300 	mov.w	r3, #0
 8011d38:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8011d3c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8011d40:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8011d44:	2300      	movs	r3, #0
 8011d46:	460c      	mov	r4, r1
 8011d48:	461d      	mov	r5, r3
 8011d4a:	f04f 0200 	mov.w	r2, #0
 8011d4e:	f04f 0300 	mov.w	r3, #0
 8011d52:	00eb      	lsls	r3, r5, #3
 8011d54:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8011d58:	00e2      	lsls	r2, r4, #3
 8011d5a:	1dcb      	adds	r3, r1, #7
 8011d5c:	08db      	lsrs	r3, r3, #3
 8011d5e:	00db      	lsls	r3, r3, #3
 8011d60:	ebad 0d03 	sub.w	sp, sp, r3
 8011d64:	ab02      	add	r3, sp, #8
 8011d66:	3300      	adds	r3, #0
 8011d68:	60fb      	str	r3, [r7, #12]
	UINT sd_status;
	sd_status =  fx_file_open(&sdio_disk, &fx_file, file_name, FX_OPEN_FOR_READ);
 8011d6a:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8011d6e:	9300      	str	r3, [sp, #0]
 8011d70:	2300      	movs	r3, #0
 8011d72:	687a      	ldr	r2, [r7, #4]
 8011d74:	493d      	ldr	r1, [pc, #244]	; (8011e6c <load+0x160>)
 8011d76:	483e      	ldr	r0, [pc, #248]	; (8011e70 <load+0x164>)
 8011d78:	f009 fd94 	bl	801b8a4 <_fxe_file_open>
 8011d7c:	61b8      	str	r0, [r7, #24]

	if (sd_status != FX_SUCCESS)
 8011d7e:	69bb      	ldr	r3, [r7, #24]
 8011d80:	2b00      	cmp	r3, #0
 8011d82:	d001      	beq.n	8011d88 <load+0x7c>
	{
		Error_Handler();
 8011d84:	f7f0 f9d0 	bl	8002128 <Error_Handler>
	}
	HAL_FLASH_Unlock();
 8011d88:	f7f3 ff3c 	bl	8005c04 <HAL_FLASH_Unlock>


	FirstSector = GetSector(FLASH_USER_START_ADDR);
 8011d8c:	f04f 6001 	mov.w	r0, #135266304	; 0x8100000
 8011d90:	f7f0 f8f2 	bl	8001f78 <GetSector>
 8011d94:	4603      	mov	r3, r0
 8011d96:	4a37      	ldr	r2, [pc, #220]	; (8011e74 <load+0x168>)
 8011d98:	6013      	str	r3, [r2, #0]
	NbOfSectors = GetSector(FLASH_USER_END_ADDR) - FirstSector + 1;
 8011d9a:	4837      	ldr	r0, [pc, #220]	; (8011e78 <load+0x16c>)
 8011d9c:	f7f0 f8ec 	bl	8001f78 <GetSector>
 8011da0:	4602      	mov	r2, r0
 8011da2:	4b34      	ldr	r3, [pc, #208]	; (8011e74 <load+0x168>)
 8011da4:	681b      	ldr	r3, [r3, #0]
 8011da6:	1ad3      	subs	r3, r2, r3
 8011da8:	3301      	adds	r3, #1
 8011daa:	4a34      	ldr	r2, [pc, #208]	; (8011e7c <load+0x170>)
 8011dac:	6013      	str	r3, [r2, #0]

	EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 8011dae:	4b34      	ldr	r3, [pc, #208]	; (8011e80 <load+0x174>)
 8011db0:	2200      	movs	r2, #0
 8011db2:	601a      	str	r2, [r3, #0]
	EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 8011db4:	4b32      	ldr	r3, [pc, #200]	; (8011e80 <load+0x174>)
 8011db6:	2220      	movs	r2, #32
 8011db8:	611a      	str	r2, [r3, #16]
	EraseInitStruct.Banks         = FLASH_BANK_2;
 8011dba:	4b31      	ldr	r3, [pc, #196]	; (8011e80 <load+0x174>)
 8011dbc:	2202      	movs	r2, #2
 8011dbe:	605a      	str	r2, [r3, #4]
	EraseInitStruct.Sector        = FirstSector;
 8011dc0:	4b2c      	ldr	r3, [pc, #176]	; (8011e74 <load+0x168>)
 8011dc2:	681b      	ldr	r3, [r3, #0]
 8011dc4:	4a2e      	ldr	r2, [pc, #184]	; (8011e80 <load+0x174>)
 8011dc6:	6093      	str	r3, [r2, #8]
	EraseInitStruct.NbSectors     = NbOfSectors;
 8011dc8:	4b2c      	ldr	r3, [pc, #176]	; (8011e7c <load+0x170>)
 8011dca:	681b      	ldr	r3, [r3, #0]
 8011dcc:	4a2c      	ldr	r2, [pc, #176]	; (8011e80 <load+0x174>)
 8011dce:	60d3      	str	r3, [r2, #12]

	if (HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError) != HAL_OK)
 8011dd0:	492c      	ldr	r1, [pc, #176]	; (8011e84 <load+0x178>)
 8011dd2:	482b      	ldr	r0, [pc, #172]	; (8011e80 <load+0x174>)
 8011dd4:	f7f4 f8f6 	bl	8005fc4 <HAL_FLASHEx_Erase>
 8011dd8:	4603      	mov	r3, r0
 8011dda:	2b00      	cmp	r3, #0
 8011ddc:	d02a      	beq.n	8011e34 <load+0x128>
	{

		while (1)
 8011dde:	e7fe      	b.n	8011dde <load+0xd2>
		}
	}
	while(sd_status != FX_END_OF_FILE)
	{

		sd_status =  fx_file_seek(&fx_file,k*offset);
 8011de0:	69fb      	ldr	r3, [r7, #28]
 8011de2:	697a      	ldr	r2, [r7, #20]
 8011de4:	fb02 f303 	mul.w	r3, r2, r3
 8011de8:	4619      	mov	r1, r3
 8011dea:	4820      	ldr	r0, [pc, #128]	; (8011e6c <load+0x160>)
 8011dec:	f009 fe44 	bl	801ba78 <_fxe_file_seek>
 8011df0:	61b8      	str	r0, [r7, #24]
		if (sd_status != FX_SUCCESS)
 8011df2:	69bb      	ldr	r3, [r7, #24]
 8011df4:	2b00      	cmp	r3, #0
 8011df6:	d001      	beq.n	8011dfc <load+0xf0>
		{
			Error_Handler();
 8011df8:	f7f0 f996 	bl	8002128 <Error_Handler>
		}


		sd_status =  fx_file_read(&fx_file, read_buffer,32, &bytes_read);
 8011dfc:	f107 0308 	add.w	r3, r7, #8
 8011e00:	2220      	movs	r2, #32
 8011e02:	68f9      	ldr	r1, [r7, #12]
 8011e04:	4819      	ldr	r0, [pc, #100]	; (8011e6c <load+0x160>)
 8011e06:	f009 fdcf 	bl	801b9a8 <_fxe_file_read>
 8011e0a:	61b8      	str	r0, [r7, #24]




		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, Address, ((uint32_t)read_buffer)) == HAL_OK)
 8011e0c:	4b1e      	ldr	r3, [pc, #120]	; (8011e88 <load+0x17c>)
 8011e0e:	681b      	ldr	r3, [r3, #0]
 8011e10:	68fa      	ldr	r2, [r7, #12]
 8011e12:	4619      	mov	r1, r3
 8011e14:	2001      	movs	r0, #1
 8011e16:	f7f3 fe63 	bl	8005ae0 <HAL_FLASH_Program>
 8011e1a:	4603      	mov	r3, r0
 8011e1c:	2b00      	cmp	r3, #0
 8011e1e:	d105      	bne.n	8011e2c <load+0x120>
		{
			Address = Address + 32; // increment for the next Flash word
 8011e20:	4b19      	ldr	r3, [pc, #100]	; (8011e88 <load+0x17c>)
 8011e22:	681b      	ldr	r3, [r3, #0]
 8011e24:	3320      	adds	r3, #32
 8011e26:	4a18      	ldr	r2, [pc, #96]	; (8011e88 <load+0x17c>)
 8011e28:	6013      	str	r3, [r2, #0]
 8011e2a:	e000      	b.n	8011e2e <load+0x122>
			//							}
		}

		else
		{
			while (1)
 8011e2c:	e7fe      	b.n	8011e2c <load+0x120>
			{
				//BSP_LED_On(LED3);
			}
		}

		k++;
 8011e2e:	69fb      	ldr	r3, [r7, #28]
 8011e30:	3301      	adds	r3, #1
 8011e32:	61fb      	str	r3, [r7, #28]
	while(sd_status != FX_END_OF_FILE)
 8011e34:	69bb      	ldr	r3, [r7, #24]
 8011e36:	2b09      	cmp	r3, #9
 8011e38:	d1d2      	bne.n	8011de0 <load+0xd4>
	}
	//HAL_FLASH_Lock();



	sd_status =  fx_file_close(&fx_file);
 8011e3a:	480c      	ldr	r0, [pc, #48]	; (8011e6c <load+0x160>)
 8011e3c:	f009 fcaa 	bl	801b794 <_fxe_file_close>
 8011e40:	61b8      	str	r0, [r7, #24]

	if (sd_status != FX_SUCCESS)
 8011e42:	69bb      	ldr	r3, [r7, #24]
 8011e44:	2b00      	cmp	r3, #0
 8011e46:	d001      	beq.n	8011e4c <load+0x140>
	{
		Error_Handler();
 8011e48:	f7f0 f96e 	bl	8002128 <Error_Handler>
	}

	sd_status =  fx_media_close(&sdio_disk);
 8011e4c:	4808      	ldr	r0, [pc, #32]	; (8011e70 <load+0x164>)
 8011e4e:	f009 fe75 	bl	801bb3c <_fxe_media_close>
 8011e52:	61b8      	str	r0, [r7, #24]

	if (sd_status != FX_SUCCESS)
 8011e54:	69bb      	ldr	r3, [r7, #24]
 8011e56:	2b00      	cmp	r3, #0
 8011e58:	d001      	beq.n	8011e5e <load+0x152>
	{
		Error_Handler();
 8011e5a:	f7f0 f965 	bl	8002128 <Error_Handler>
	}
	return(sd_status);
 8011e5e:	69bb      	ldr	r3, [r7, #24]
 8011e60:	46b5      	mov	sp, r6
}
 8011e62:	4618      	mov	r0, r3
 8011e64:	3724      	adds	r7, #36	; 0x24
 8011e66:	46bd      	mov	sp, r7
 8011e68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011e6c:	24004c18 	.word	0x24004c18
 8011e70:	24002760 	.word	0x24002760
 8011e74:	240023f0 	.word	0x240023f0
 8011e78:	0811ffff 	.word	0x0811ffff
 8011e7c:	240023f4 	.word	0x240023f4
 8011e80:	2400243c 	.word	0x2400243c
 8011e84:	240023fc 	.word	0x240023fc
 8011e88:	240023f8 	.word	0x240023f8

08011e8c <fx_stm32_sd_init>:
* @brief Initializes the SD IP instance
* @param UINT instance SD instance to initialize
* @retval 0 on success error value otherwise
*/
INT fx_stm32_sd_init(UINT instance)
{
 8011e8c:	b580      	push	{r7, lr}
 8011e8e:	b084      	sub	sp, #16
 8011e90:	af00      	add	r7, sp, #0
 8011e92:	6078      	str	r0, [r7, #4]
  INT ret = 0;
 8011e94:	2300      	movs	r3, #0
 8011e96:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN PRE_FX_SD_INIT */
  UNUSED(instance);
  /* USER CODE END PRE_FX_SD_INIT */

#if (FX_STM32_SD_INIT == 1)
  MX_SDMMC1_SD_Init();
 8011e98:	f7f0 f94c 	bl	8002134 <MX_SDMMC1_SD_Init>

  /* USER CODE BEGIN POST_FX_SD_INIT */

  /* USER CODE END POST_FX_SD_INIT */

  return ret;
 8011e9c:	68fb      	ldr	r3, [r7, #12]
}
 8011e9e:	4618      	mov	r0, r3
 8011ea0:	3710      	adds	r7, #16
 8011ea2:	46bd      	mov	sp, r7
 8011ea4:	bd80      	pop	{r7, pc}
	...

08011ea8 <fx_stm32_sd_deinit>:
* @brief Deinitializes the SD IP instance
* @param UINT instance SD instance to deinitialize
* @retval 0 on success error value otherwise
*/
INT fx_stm32_sd_deinit(UINT instance)
{
 8011ea8:	b580      	push	{r7, lr}
 8011eaa:	b084      	sub	sp, #16
 8011eac:	af00      	add	r7, sp, #0
 8011eae:	6078      	str	r0, [r7, #4]
  INT ret = 0;
 8011eb0:	2300      	movs	r3, #0
 8011eb2:	60fb      	str	r3, [r7, #12]

  /* USER CODE BEGIN PRE_FX_SD_DEINIT */
  UNUSED(instance);
  /* USER CODE END PRE_FX_SD_DEINIT */
#if (FX_STM32_SD_INIT == 1)
  if(HAL_SD_DeInit(&hsd1) != HAL_OK)
 8011eb4:	4806      	ldr	r0, [pc, #24]	; (8011ed0 <fx_stm32_sd_deinit+0x28>)
 8011eb6:	f7f9 ffff 	bl	800beb8 <HAL_SD_DeInit>
 8011eba:	4603      	mov	r3, r0
 8011ebc:	2b00      	cmp	r3, #0
 8011ebe:	d001      	beq.n	8011ec4 <fx_stm32_sd_deinit+0x1c>
  {
    ret = 1;
 8011ec0:	2301      	movs	r3, #1
 8011ec2:	60fb      	str	r3, [r7, #12]
#endif
  /* USER CODE BEGIN POST_FX_SD_DEINIT */

  /* USER CODE END POST_FX_SD_DEINIT */

  return ret;
 8011ec4:	68fb      	ldr	r3, [r7, #12]
}
 8011ec6:	4618      	mov	r0, r3
 8011ec8:	3710      	adds	r7, #16
 8011eca:	46bd      	mov	sp, r7
 8011ecc:	bd80      	pop	{r7, pc}
 8011ece:	bf00      	nop
 8011ed0:	24001614 	.word	0x24001614

08011ed4 <fx_stm32_sd_get_status>:
* @brief Check the SD IP status.
* @param UINT instance SD instance to check
* @retval 0 when ready 1 when busy
*/
INT fx_stm32_sd_get_status(UINT instance)
{
 8011ed4:	b580      	push	{r7, lr}
 8011ed6:	b084      	sub	sp, #16
 8011ed8:	af00      	add	r7, sp, #0
 8011eda:	6078      	str	r0, [r7, #4]
  INT ret = 0;
 8011edc:	2300      	movs	r3, #0
 8011ede:	60fb      	str	r3, [r7, #12]

  /* USER CODE BEGIN PRE_GET_STATUS */
  UNUSED(instance);
  /* USER CODE END PRE_GET_STATUS */

  if(HAL_SD_GetCardState(&hsd1) != HAL_SD_CARD_TRANSFER)
 8011ee0:	4806      	ldr	r0, [pc, #24]	; (8011efc <fx_stm32_sd_get_status+0x28>)
 8011ee2:	f7fa fea5 	bl	800cc30 <HAL_SD_GetCardState>
 8011ee6:	4603      	mov	r3, r0
 8011ee8:	2b04      	cmp	r3, #4
 8011eea:	d001      	beq.n	8011ef0 <fx_stm32_sd_get_status+0x1c>
  {
    ret = 1;
 8011eec:	2301      	movs	r3, #1
 8011eee:	60fb      	str	r3, [r7, #12]

  /* USER CODE BEGIN POST_GET_STATUS */

  /* USER CODE END POST_GET_STATUS */

  return ret;
 8011ef0:	68fb      	ldr	r3, [r7, #12]
}
 8011ef2:	4618      	mov	r0, r3
 8011ef4:	3710      	adds	r7, #16
 8011ef6:	46bd      	mov	sp, r7
 8011ef8:	bd80      	pop	{r7, pc}
 8011efa:	bf00      	nop
 8011efc:	24001614 	.word	0x24001614

08011f00 <fx_stm32_sd_read_blocks>:
* @param UINT start_block the first block to start reading from.
* @param UINT total_blocks total number of blocks to read.
* @retval 0 on success error code otherwise
*/
INT fx_stm32_sd_read_blocks(UINT instance, UINT *buffer, UINT start_block, UINT total_blocks)
{
 8011f00:	b580      	push	{r7, lr}
 8011f02:	b086      	sub	sp, #24
 8011f04:	af00      	add	r7, sp, #0
 8011f06:	60f8      	str	r0, [r7, #12]
 8011f08:	60b9      	str	r1, [r7, #8]
 8011f0a:	607a      	str	r2, [r7, #4]
 8011f0c:	603b      	str	r3, [r7, #0]
  INT ret = 0;
 8011f0e:	2300      	movs	r3, #0
 8011f10:	617b      	str	r3, [r7, #20]
  /* USER CODE BEGIN PRE_READ_BLOCKS */
  UNUSED(instance);
  /* USER CODE END PRE_READ_BLOCKS */

  if(HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)buffer, start_block, total_blocks) != HAL_OK)
 8011f12:	683b      	ldr	r3, [r7, #0]
 8011f14:	687a      	ldr	r2, [r7, #4]
 8011f16:	68b9      	ldr	r1, [r7, #8]
 8011f18:	4806      	ldr	r0, [pc, #24]	; (8011f34 <fx_stm32_sd_read_blocks+0x34>)
 8011f1a:	f7f9 fff3 	bl	800bf04 <HAL_SD_ReadBlocks_DMA>
 8011f1e:	4603      	mov	r3, r0
 8011f20:	2b00      	cmp	r3, #0
 8011f22:	d001      	beq.n	8011f28 <fx_stm32_sd_read_blocks+0x28>
  {
    ret = 1;
 8011f24:	2301      	movs	r3, #1
 8011f26:	617b      	str	r3, [r7, #20]

  /* USER CODE BEGIN POST_READ_BLOCKS */

  /* USER CODE END POST_READ_BLOCKS */

  return ret;
 8011f28:	697b      	ldr	r3, [r7, #20]
}
 8011f2a:	4618      	mov	r0, r3
 8011f2c:	3718      	adds	r7, #24
 8011f2e:	46bd      	mov	sp, r7
 8011f30:	bd80      	pop	{r7, pc}
 8011f32:	bf00      	nop
 8011f34:	24001614 	.word	0x24001614

08011f38 <fx_stm32_sd_write_blocks>:
* @param UINT start_block the first block to start writing into.
* @param UINT total_blocks total number of blocks to write.
* @retval 0 on success error code otherwise
*/
INT fx_stm32_sd_write_blocks(UINT instance, UINT *buffer, UINT start_block, UINT total_blocks)
{
 8011f38:	b580      	push	{r7, lr}
 8011f3a:	b086      	sub	sp, #24
 8011f3c:	af00      	add	r7, sp, #0
 8011f3e:	60f8      	str	r0, [r7, #12]
 8011f40:	60b9      	str	r1, [r7, #8]
 8011f42:	607a      	str	r2, [r7, #4]
 8011f44:	603b      	str	r3, [r7, #0]
  INT ret = 0;
 8011f46:	2300      	movs	r3, #0
 8011f48:	617b      	str	r3, [r7, #20]
  /* USER CODE BEGIN PRE_WRITE_BLOCKS */
  UNUSED(instance);
  /* USER CODE END PRE_WRITE_BLOCKS */

  if(HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)buffer, start_block, total_blocks) != HAL_OK)
 8011f4a:	683b      	ldr	r3, [r7, #0]
 8011f4c:	687a      	ldr	r2, [r7, #4]
 8011f4e:	68b9      	ldr	r1, [r7, #8]
 8011f50:	4806      	ldr	r0, [pc, #24]	; (8011f6c <fx_stm32_sd_write_blocks+0x34>)
 8011f52:	f7fa f87f 	bl	800c054 <HAL_SD_WriteBlocks_DMA>
 8011f56:	4603      	mov	r3, r0
 8011f58:	2b00      	cmp	r3, #0
 8011f5a:	d001      	beq.n	8011f60 <fx_stm32_sd_write_blocks+0x28>
  {
    ret = 1;
 8011f5c:	2301      	movs	r3, #1
 8011f5e:	617b      	str	r3, [r7, #20]

  /* USER CODE BEGIN POST_WRITE_BLOCKS */

  /* USER CODE END POST_WRITE_BLOCKS */

  return ret;
 8011f60:	697b      	ldr	r3, [r7, #20]
}
 8011f62:	4618      	mov	r0, r3
 8011f64:	3718      	adds	r7, #24
 8011f66:	46bd      	mov	sp, r7
 8011f68:	bd80      	pop	{r7, pc}
 8011f6a:	bf00      	nop
 8011f6c:	24001614 	.word	0x24001614

08011f70 <HAL_SD_TxCpltCallback>:
* @brief SD DMA Tx Transfer completed callbacks
* @param Instance the sd instance
* @retval None
*/
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8011f70:	b580      	push	{r7, lr}
 8011f72:	b082      	sub	sp, #8
 8011f74:	af00      	add	r7, sp, #0
 8011f76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PRE_TX_CMPLT */

  /* USER CODE END PRE_TX_CMPLT */

  tx_semaphore_put(&sd_tx_semaphore);
 8011f78:	4803      	ldr	r0, [pc, #12]	; (8011f88 <HAL_SD_TxCpltCallback+0x18>)
 8011f7a:	f00c fd23 	bl	801e9c4 <_txe_semaphore_put>

  /* USER CODE BEGIN POST_TX_CMPLT */

  /* USER CODE END POST_TX_CMPLT */
}
 8011f7e:	bf00      	nop
 8011f80:	3708      	adds	r7, #8
 8011f82:	46bd      	mov	sp, r7
 8011f84:	bd80      	pop	{r7, pc}
 8011f86:	bf00      	nop
 8011f88:	24004df8 	.word	0x24004df8

08011f8c <HAL_SD_RxCpltCallback>:
* @brief SD DMA Rx Transfer completed callbacks
* @param Instance the sd instance
* @retval None
*/
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8011f8c:	b580      	push	{r7, lr}
 8011f8e:	b082      	sub	sp, #8
 8011f90:	af00      	add	r7, sp, #0
 8011f92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PRE_RX_CMPLT */

  /* USER CODE END PRE_RX_CMPLT */

  tx_semaphore_put(&sd_rx_semaphore);
 8011f94:	4803      	ldr	r0, [pc, #12]	; (8011fa4 <HAL_SD_RxCpltCallback+0x18>)
 8011f96:	f00c fd15 	bl	801e9c4 <_txe_semaphore_put>

  /* USER CODE BEGIN POST_RX_CMPLT */

  /* USER CODE END POST_RX_CMPLT */
}
 8011f9a:	bf00      	nop
 8011f9c:	3708      	adds	r7, #8
 8011f9e:	46bd      	mov	sp, r7
 8011fa0:	bd80      	pop	{r7, pc}
 8011fa2:	bf00      	nop
 8011fa4:	24004e14 	.word	0x24004e14

08011fa8 <check_sd_status>:

static UINT is_initialized = 0;


static INT check_sd_status(uint32_t instance)
{
 8011fa8:	b580      	push	{r7, lr}
 8011faa:	b084      	sub	sp, #16
 8011fac:	af00      	add	r7, sp, #0
 8011fae:	6078      	str	r0, [r7, #4]
  uint32_t start = FX_STM32_SD_CURRENT_TIME();
 8011fb0:	f00c f826 	bl	801e000 <_tx_time_get>
 8011fb4:	60f8      	str	r0, [r7, #12]

  while (FX_STM32_SD_CURRENT_TIME() - start < FX_STM32_SD_DEFAULT_TIMEOUT)
 8011fb6:	e007      	b.n	8011fc8 <check_sd_status+0x20>
  {
    if (fx_stm32_sd_get_status(instance) == 0)
 8011fb8:	6878      	ldr	r0, [r7, #4]
 8011fba:	f7ff ff8b 	bl	8011ed4 <fx_stm32_sd_get_status>
 8011fbe:	4603      	mov	r3, r0
 8011fc0:	2b00      	cmp	r3, #0
 8011fc2:	d101      	bne.n	8011fc8 <check_sd_status+0x20>
    {
      return 0;
 8011fc4:	2300      	movs	r3, #0
 8011fc6:	e008      	b.n	8011fda <check_sd_status+0x32>
  while (FX_STM32_SD_CURRENT_TIME() - start < FX_STM32_SD_DEFAULT_TIMEOUT)
 8011fc8:	f00c f81a 	bl	801e000 <_tx_time_get>
 8011fcc:	4602      	mov	r2, r0
 8011fce:	68fb      	ldr	r3, [r7, #12]
 8011fd0:	1ad3      	subs	r3, r2, r3
 8011fd2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8011fd6:	d3ef      	bcc.n	8011fb8 <check_sd_status+0x10>
    }
  }

  return 1;
 8011fd8:	2301      	movs	r3, #1
}
 8011fda:	4618      	mov	r0, r3
 8011fdc:	3710      	adds	r7, #16
 8011fde:	46bd      	mov	sp, r7
 8011fe0:	bd80      	pop	{r7, pc}
	...

08011fe4 <fx_stm32_sd_driver>:
* It relies on the STM32 peripheral library from ST.
* @param media_ptr: FileX's Media Config Block
* @retval None
*/
VOID  fx_stm32_sd_driver(FX_MEDIA *media_ptr)
{
 8011fe4:	b580      	push	{r7, lr}
 8011fe6:	b086      	sub	sp, #24
 8011fe8:	af00      	add	r7, sp, #0
 8011fea:	6078      	str	r0, [r7, #4]
#if (FX_STM32_SD_INIT == 0)
 /* the SD was initialized by the application */
  is_initialized = 1;
#endif
  /* before performing any operation, check the status of the SD IP */
  if (is_initialized == 1)
 8011fec:	4b8e      	ldr	r3, [pc, #568]	; (8012228 <fx_stm32_sd_driver+0x244>)
 8011fee:	681b      	ldr	r3, [r3, #0]
 8011ff0:	2b01      	cmp	r3, #1
 8011ff2:	d10a      	bne.n	801200a <fx_stm32_sd_driver+0x26>
  {
    if (check_sd_status(FX_STM32_SD_INSTANCE) != 0)
 8011ff4:	2000      	movs	r0, #0
 8011ff6:	f7ff ffd7 	bl	8011fa8 <check_sd_status>
 8011ffa:	4603      	mov	r3, r0
 8011ffc:	2b00      	cmp	r3, #0
 8011ffe:	d004      	beq.n	801200a <fx_stm32_sd_driver+0x26>
    {
      media_ptr->fx_media_driver_status =  FX_IO_ERROR;
 8012000:	687b      	ldr	r3, [r7, #4]
 8012002:	2290      	movs	r2, #144	; 0x90
 8012004:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8012008:	e10a      	b.n	8012220 <fx_stm32_sd_driver+0x23c>
    }
  }

#if (FX_STM32_SD_DMA_API == 1)
  /* the SD DMA requires a 4-byte aligned buffers */
  unaligned_buffer = (UINT)(media_ptr->fx_media_driver_buffer) & 0x3;
 801200a:	687b      	ldr	r3, [r7, #4]
 801200c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012010:	f003 0303 	and.w	r3, r3, #3
 8012014:	617b      	str	r3, [r7, #20]
#else
  /* if the DMA is not used there isn't any constraint on buffer alignment */
  unaligned_buffer = 0;
#endif
  /* Process the driver request specified in the media control block.  */
  switch(media_ptr->fx_media_driver_request)
 8012016:	687b      	ldr	r3, [r7, #4]
 8012018:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801201c:	2b08      	cmp	r3, #8
 801201e:	f200 80f5 	bhi.w	801220c <fx_stm32_sd_driver+0x228>
 8012022:	a201      	add	r2, pc, #4	; (adr r2, 8012028 <fx_stm32_sd_driver+0x44>)
 8012024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012028:	080120e3 	.word	0x080120e3
 801202c:	08012117 	.word	0x08012117
 8012030:	08012149 	.word	0x08012149
 8012034:	08012153 	.word	0x08012153
 8012038:	0801204d 	.word	0x0801204d
 801203c:	0801215d 	.word	0x0801215d
 8012040:	0801220d 	.word	0x0801220d
 8012044:	080121f1 	.word	0x080121f1
 8012048:	080120ad 	.word	0x080120ad
  {
  case FX_DRIVER_INIT:
    {
      media_ptr->fx_media_driver_status = FX_SUCCESS;
 801204c:	687b      	ldr	r3, [r7, #4]
 801204e:	2200      	movs	r2, #0
 8012050:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      FX_STM32_SD_PRE_INIT(media_ptr);
 8012054:	231c      	movs	r3, #28
 8012056:	2200      	movs	r2, #0
 8012058:	4974      	ldr	r1, [pc, #464]	; (801222c <fx_stm32_sd_driver+0x248>)
 801205a:	4875      	ldr	r0, [pc, #468]	; (8012230 <fx_stm32_sd_driver+0x24c>)
 801205c:	f00c fb9c 	bl	801e798 <_txe_semaphore_create>
 8012060:	4603      	mov	r3, r0
 8012062:	2b00      	cmp	r3, #0
 8012064:	d108      	bne.n	8012078 <fx_stm32_sd_driver+0x94>
 8012066:	231c      	movs	r3, #28
 8012068:	2200      	movs	r2, #0
 801206a:	4972      	ldr	r1, [pc, #456]	; (8012234 <fx_stm32_sd_driver+0x250>)
 801206c:	4872      	ldr	r0, [pc, #456]	; (8012238 <fx_stm32_sd_driver+0x254>)
 801206e:	f00c fb93 	bl	801e798 <_txe_semaphore_create>
 8012072:	4603      	mov	r3, r0
 8012074:	2b00      	cmp	r3, #0
 8012076:	d003      	beq.n	8012080 <fx_stm32_sd_driver+0x9c>
 8012078:	687b      	ldr	r3, [r7, #4]
 801207a:	2290      	movs	r2, #144	; 0x90
 801207c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

#if (FX_STM32_SD_INIT == 1)
      /* Initialize the SD instance */
      if (is_initialized == 0)
 8012080:	4b69      	ldr	r3, [pc, #420]	; (8012228 <fx_stm32_sd_driver+0x244>)
 8012082:	681b      	ldr	r3, [r3, #0]
 8012084:	2b00      	cmp	r3, #0
 8012086:	f040 80c6 	bne.w	8012216 <fx_stm32_sd_driver+0x232>
      {
        status = fx_stm32_sd_init(FX_STM32_SD_INSTANCE);
 801208a:	2000      	movs	r0, #0
 801208c:	f7ff fefe 	bl	8011e8c <fx_stm32_sd_init>
 8012090:	4603      	mov	r3, r0
 8012092:	613b      	str	r3, [r7, #16]

        if (status == 0)
 8012094:	693b      	ldr	r3, [r7, #16]
 8012096:	2b00      	cmp	r3, #0
 8012098:	d103      	bne.n	80120a2 <fx_stm32_sd_driver+0xbe>
        {
          is_initialized = 1;
 801209a:	4b63      	ldr	r3, [pc, #396]	; (8012228 <fx_stm32_sd_driver+0x244>)
 801209c:	2201      	movs	r2, #1
 801209e:	601a      	str	r2, [r3, #0]
        }
      }
#endif
      /* call post init user macro */
      FX_STM32_SD_POST_INIT(media_ptr);
      break;
 80120a0:	e0b9      	b.n	8012216 <fx_stm32_sd_driver+0x232>
          media_ptr->fx_media_driver_status =  FX_IO_ERROR;
 80120a2:	687b      	ldr	r3, [r7, #4]
 80120a4:	2290      	movs	r2, #144	; 0x90
 80120a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      break;
 80120aa:	e0b4      	b.n	8012216 <fx_stm32_sd_driver+0x232>
    }

  case FX_DRIVER_UNINIT:
    {
      media_ptr->fx_media_driver_status = FX_SUCCESS;
 80120ac:	687b      	ldr	r3, [r7, #4]
 80120ae:	2200      	movs	r2, #0
 80120b0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

#if (FX_STM32_SD_INIT == 1)
      status = fx_stm32_sd_deinit(FX_STM32_SD_INSTANCE);
 80120b4:	2000      	movs	r0, #0
 80120b6:	f7ff fef7 	bl	8011ea8 <fx_stm32_sd_deinit>
 80120ba:	4603      	mov	r3, r0
 80120bc:	613b      	str	r3, [r7, #16]

      if (status != 0)
 80120be:	693b      	ldr	r3, [r7, #16]
 80120c0:	2b00      	cmp	r3, #0
 80120c2:	d004      	beq.n	80120ce <fx_stm32_sd_driver+0xea>
      {
        media_ptr->fx_media_driver_status = FX_IO_ERROR;
 80120c4:	687b      	ldr	r3, [r7, #4]
 80120c6:	2290      	movs	r2, #144	; 0x90
 80120c8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 80120cc:	e002      	b.n	80120d4 <fx_stm32_sd_driver+0xf0>
      }
      else
      {
        is_initialized = 0;
 80120ce:	4b56      	ldr	r3, [pc, #344]	; (8012228 <fx_stm32_sd_driver+0x244>)
 80120d0:	2200      	movs	r2, #0
 80120d2:	601a      	str	r2, [r3, #0]
      }
#endif
      /* call post deinit processing  */
      FX_STM32_SD_POST_DEINIT(media_ptr);
 80120d4:	4856      	ldr	r0, [pc, #344]	; (8012230 <fx_stm32_sd_driver+0x24c>)
 80120d6:	f00c fbf5 	bl	801e8c4 <_txe_semaphore_delete>
 80120da:	4857      	ldr	r0, [pc, #348]	; (8012238 <fx_stm32_sd_driver+0x254>)
 80120dc:	f00c fbf2 	bl	801e8c4 <_txe_semaphore_delete>

      break;
 80120e0:	e09e      	b.n	8012220 <fx_stm32_sd_driver+0x23c>
    }

  case FX_DRIVER_READ:
    {
      media_ptr->fx_media_driver_status = FX_IO_ERROR;
 80120e2:	687b      	ldr	r3, [r7, #4]
 80120e4:	2290      	movs	r2, #144	; 0x90
 80120e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      if (sd_read_data(media_ptr, media_ptr->fx_media_driver_logical_sector + media_ptr->fx_media_hidden_sectors,
 80120ea:	687b      	ldr	r3, [r7, #4]
 80120ec:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 80120f0:	687b      	ldr	r3, [r7, #4]
 80120f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80120f4:	18d1      	adds	r1, r2, r3
                       media_ptr->fx_media_driver_sectors, unaligned_buffer) == FX_SUCCESS)
 80120f6:	687b      	ldr	r3, [r7, #4]
 80120f8:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
      if (sd_read_data(media_ptr, media_ptr->fx_media_driver_logical_sector + media_ptr->fx_media_hidden_sectors,
 80120fc:	697b      	ldr	r3, [r7, #20]
 80120fe:	6878      	ldr	r0, [r7, #4]
 8012100:	f000 f89c 	bl	801223c <sd_read_data>
 8012104:	4603      	mov	r3, r0
 8012106:	2b00      	cmp	r3, #0
 8012108:	f040 8087 	bne.w	801221a <fx_stm32_sd_driver+0x236>
      {
        media_ptr->fx_media_driver_status = FX_SUCCESS;
 801210c:	687b      	ldr	r3, [r7, #4]
 801210e:	2200      	movs	r2, #0
 8012110:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }

      break;
 8012114:	e081      	b.n	801221a <fx_stm32_sd_driver+0x236>
    }

  case FX_DRIVER_WRITE:
    {
      media_ptr->fx_media_driver_status = FX_IO_ERROR;
 8012116:	687b      	ldr	r3, [r7, #4]
 8012118:	2290      	movs	r2, #144	; 0x90
 801211a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      if (sd_write_data(media_ptr, media_ptr->fx_media_driver_logical_sector + media_ptr->fx_media_hidden_sectors,
 801211e:	687b      	ldr	r3, [r7, #4]
 8012120:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8012124:	687b      	ldr	r3, [r7, #4]
 8012126:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012128:	18d1      	adds	r1, r2, r3
                        media_ptr->fx_media_driver_sectors, unaligned_buffer) == FX_SUCCESS)
 801212a:	687b      	ldr	r3, [r7, #4]
 801212c:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
      if (sd_write_data(media_ptr, media_ptr->fx_media_driver_logical_sector + media_ptr->fx_media_hidden_sectors,
 8012130:	697b      	ldr	r3, [r7, #20]
 8012132:	6878      	ldr	r0, [r7, #4]
 8012134:	f000 f940 	bl	80123b8 <sd_write_data>
 8012138:	4603      	mov	r3, r0
 801213a:	2b00      	cmp	r3, #0
 801213c:	d16f      	bne.n	801221e <fx_stm32_sd_driver+0x23a>
      {
        media_ptr->fx_media_driver_status = FX_SUCCESS;
 801213e:	687b      	ldr	r3, [r7, #4]
 8012140:	2200      	movs	r2, #0
 8012142:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }

      break;
 8012146:	e06a      	b.n	801221e <fx_stm32_sd_driver+0x23a>
    }

  case FX_DRIVER_FLUSH:
    {
      /* Return driver success.  */
      media_ptr->fx_media_driver_status =  FX_SUCCESS;
 8012148:	687b      	ldr	r3, [r7, #4]
 801214a:	2200      	movs	r2, #0
 801214c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      break;
 8012150:	e066      	b.n	8012220 <fx_stm32_sd_driver+0x23c>
    }

  case FX_DRIVER_ABORT:
    {
      /* Return driver success.  */
      media_ptr->fx_media_driver_status =  FX_SUCCESS;
 8012152:	687b      	ldr	r3, [r7, #4]
 8012154:	2200      	movs	r2, #0
 8012156:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      FX_STM32_SD_POST_ABORT(media_ptr);
      break;
 801215a:	e061      	b.n	8012220 <fx_stm32_sd_driver+0x23c>
    }

  case FX_DRIVER_BOOT_READ:
    {
      /* the boot sector is the sector zero */
      status = sd_read_data(media_ptr, 0, media_ptr->fx_media_driver_sectors, unaligned_buffer);
 801215c:	687b      	ldr	r3, [r7, #4]
 801215e:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8012162:	697b      	ldr	r3, [r7, #20]
 8012164:	2100      	movs	r1, #0
 8012166:	6878      	ldr	r0, [r7, #4]
 8012168:	f000 f868 	bl	801223c <sd_read_data>
 801216c:	6138      	str	r0, [r7, #16]

      if (status != FX_SUCCESS)
 801216e:	693b      	ldr	r3, [r7, #16]
 8012170:	2b00      	cmp	r3, #0
 8012172:	d004      	beq.n	801217e <fx_stm32_sd_driver+0x19a>
      {
        media_ptr->fx_media_driver_status = status;
 8012174:	687b      	ldr	r3, [r7, #4]
 8012176:	693a      	ldr	r2, [r7, #16]
 8012178:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        break;
 801217c:	e050      	b.n	8012220 <fx_stm32_sd_driver+0x23c>

      /* Check if the sector 0 is the actual boot sector, otherwise calculate the offset into it.
      Please note that this should belong to higher level of MW to do this check and it is here
      as a temporary work solution */

      partition_start =  0;
 801217e:	2300      	movs	r3, #0
 8012180:	60fb      	str	r3, [r7, #12]

      status =  _fx_partition_offset_calculate(media_ptr -> fx_media_driver_buffer, 0,
 8012182:	687b      	ldr	r3, [r7, #4]
 8012184:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 8012188:	f107 0308 	add.w	r3, r7, #8
 801218c:	f107 020c 	add.w	r2, r7, #12
 8012190:	2100      	movs	r1, #0
 8012192:	f006 ff7b 	bl	801908c <_fx_partition_offset_calculate>
 8012196:	6138      	str	r0, [r7, #16]
                                               &partition_start, &partition_size);

      /* Check partition read error.  */
      if (status)
 8012198:	693b      	ldr	r3, [r7, #16]
 801219a:	2b00      	cmp	r3, #0
 801219c:	d004      	beq.n	80121a8 <fx_stm32_sd_driver+0x1c4>
      {
        /* Unsuccessful driver request.  */
        media_ptr -> fx_media_driver_status =  FX_IO_ERROR;
 801219e:	687b      	ldr	r3, [r7, #4]
 80121a0:	2290      	movs	r2, #144	; 0x90
 80121a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        break;
 80121a6:	e03b      	b.n	8012220 <fx_stm32_sd_driver+0x23c>
      }

      /* Now determine if there is a partition...   */
      if (partition_start)
 80121a8:	68fb      	ldr	r3, [r7, #12]
 80121aa:	2b00      	cmp	r3, #0
 80121ac:	d01b      	beq.n	80121e6 <fx_stm32_sd_driver+0x202>
      {

        if (check_sd_status(FX_STM32_SD_INSTANCE) != 0)
 80121ae:	2000      	movs	r0, #0
 80121b0:	f7ff fefa 	bl	8011fa8 <check_sd_status>
 80121b4:	4603      	mov	r3, r0
 80121b6:	2b00      	cmp	r3, #0
 80121b8:	d004      	beq.n	80121c4 <fx_stm32_sd_driver+0x1e0>
        {
          media_ptr->fx_media_driver_status =  FX_IO_ERROR;
 80121ba:	687b      	ldr	r3, [r7, #4]
 80121bc:	2290      	movs	r2, #144	; 0x90
 80121be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          break;
 80121c2:	e02d      	b.n	8012220 <fx_stm32_sd_driver+0x23c>
        }

        /* Yes, now lets read the actual boot record.  */
        status = sd_read_data(media_ptr, partition_start, media_ptr->fx_media_driver_sectors, unaligned_buffer);
 80121c4:	68f9      	ldr	r1, [r7, #12]
 80121c6:	687b      	ldr	r3, [r7, #4]
 80121c8:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80121cc:	697b      	ldr	r3, [r7, #20]
 80121ce:	6878      	ldr	r0, [r7, #4]
 80121d0:	f000 f834 	bl	801223c <sd_read_data>
 80121d4:	6138      	str	r0, [r7, #16]

        if (status != FX_SUCCESS)
 80121d6:	693b      	ldr	r3, [r7, #16]
 80121d8:	2b00      	cmp	r3, #0
 80121da:	d004      	beq.n	80121e6 <fx_stm32_sd_driver+0x202>
        {
          media_ptr->fx_media_driver_status = status;
 80121dc:	687b      	ldr	r3, [r7, #4]
 80121de:	693a      	ldr	r2, [r7, #16]
 80121e0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          break;
 80121e4:	e01c      	b.n	8012220 <fx_stm32_sd_driver+0x23c>
        }
      }

      /* Successful driver request.  */
      media_ptr -> fx_media_driver_status =  FX_SUCCESS;
 80121e6:	687b      	ldr	r3, [r7, #4]
 80121e8:	2200      	movs	r2, #0
 80121ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      break;
 80121ee:	e017      	b.n	8012220 <fx_stm32_sd_driver+0x23c>
    }

  case FX_DRIVER_BOOT_WRITE:
    {
      status = sd_write_data(media_ptr, 0, media_ptr->fx_media_driver_sectors, unaligned_buffer);
 80121f0:	687b      	ldr	r3, [r7, #4]
 80121f2:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80121f6:	697b      	ldr	r3, [r7, #20]
 80121f8:	2100      	movs	r1, #0
 80121fa:	6878      	ldr	r0, [r7, #4]
 80121fc:	f000 f8dc 	bl	80123b8 <sd_write_data>
 8012200:	6138      	str	r0, [r7, #16]

      media_ptr->fx_media_driver_status = status;
 8012202:	687b      	ldr	r3, [r7, #4]
 8012204:	693a      	ldr	r2, [r7, #16]
 8012206:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      break;
 801220a:	e009      	b.n	8012220 <fx_stm32_sd_driver+0x23c>
    }

  default:
    {
      media_ptr->fx_media_driver_status =  FX_IO_ERROR;
 801220c:	687b      	ldr	r3, [r7, #4]
 801220e:	2290      	movs	r2, #144	; 0x90
 8012210:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      break;
 8012214:	e004      	b.n	8012220 <fx_stm32_sd_driver+0x23c>
      break;
 8012216:	bf00      	nop
 8012218:	e002      	b.n	8012220 <fx_stm32_sd_driver+0x23c>
      break;
 801221a:	bf00      	nop
 801221c:	e000      	b.n	8012220 <fx_stm32_sd_driver+0x23c>
      break;
 801221e:	bf00      	nop
    }
  }
}
 8012220:	3718      	adds	r7, #24
 8012222:	46bd      	mov	sp, r7
 8012224:	bd80      	pop	{r7, pc}
 8012226:	bf00      	nop
 8012228:	24005040 	.word	0x24005040
 801222c:	08020e1c 	.word	0x08020e1c
 8012230:	24004e14 	.word	0x24004e14
 8012234:	08020e38 	.word	0x08020e38
 8012238:	24004df8 	.word	0x24004df8

0801223c <sd_read_data>:
* @param UINT use_scratch_buffer to enable scratch buffer usage or not.
* @retval FX_SUCCESS on success FX_BUFFER_ERROR / FX_ACCESS_ERROR / FX_IO_ERROR otherwise
*/

static UINT sd_read_data(FX_MEDIA *media_ptr, ULONG start_sector, UINT num_sectors, UINT use_scratch_buffer)
{
 801223c:	b580      	push	{r7, lr}
 801223e:	b090      	sub	sp, #64	; 0x40
 8012240:	af00      	add	r7, sp, #0
 8012242:	60f8      	str	r0, [r7, #12]
 8012244:	60b9      	str	r1, [r7, #8]
 8012246:	607a      	str	r2, [r7, #4]
 8012248:	603b      	str	r3, [r7, #0]
  INT i = 0;
 801224a:	2300      	movs	r3, #0
 801224c:	63fb      	str	r3, [r7, #60]	; 0x3c
  UCHAR *read_addr;

 /* perform the Pre read operations */
  FX_STM32_SD_PRE_READ_TRANSFER(media_ptr);

  if (use_scratch_buffer)
 801224e:	683b      	ldr	r3, [r7, #0]
 8012250:	2b00      	cmp	r3, #0
 8012252:	d061      	beq.n	8012318 <sd_read_data+0xdc>
  {
    read_addr = media_ptr->fx_media_driver_buffer;
 8012254:	68fb      	ldr	r3, [r7, #12]
 8012256:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801225a:	637b      	str	r3, [r7, #52]	; 0x34

    for (i = 0; i < num_sectors; i++)
 801225c:	2300      	movs	r3, #0
 801225e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012260:	e04c      	b.n	80122fc <sd_read_data+0xc0>
    {
      /* Start reading into the scratch buffer */
      status = fx_stm32_sd_read_blocks(FX_STM32_SD_INSTANCE, (UINT *)scratch, (UINT)start_sector++, 1);
 8012262:	68ba      	ldr	r2, [r7, #8]
 8012264:	1c53      	adds	r3, r2, #1
 8012266:	60bb      	str	r3, [r7, #8]
 8012268:	2301      	movs	r3, #1
 801226a:	4950      	ldr	r1, [pc, #320]	; (80123ac <sd_read_data+0x170>)
 801226c:	2000      	movs	r0, #0
 801226e:	f7ff fe47 	bl	8011f00 <fx_stm32_sd_read_blocks>
 8012272:	4603      	mov	r3, r0
 8012274:	63bb      	str	r3, [r7, #56]	; 0x38

      if (status != 0)
 8012276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012278:	2b00      	cmp	r3, #0
 801227a:	d001      	beq.n	8012280 <sd_read_data+0x44>
      {
        /* read error occurred, call the error handler code then return immediately */
        FX_STM32_SD_READ_TRANSFER_ERROR(status);
        return FX_IO_ERROR;
 801227c:	2390      	movs	r3, #144	; 0x90
 801227e:	e090      	b.n	80123a2 <sd_read_data+0x166>
      }

    /* wait for read transfer notification */
       FX_STM32_SD_READ_CPLT_NOTIFY();
 8012280:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8012284:	484a      	ldr	r0, [pc, #296]	; (80123b0 <sd_read_data+0x174>)
 8012286:	f00c fb5b 	bl	801e940 <_txe_semaphore_get>
 801228a:	4603      	mov	r3, r0
 801228c:	2b00      	cmp	r3, #0
 801228e:	d001      	beq.n	8012294 <sd_read_data+0x58>
 8012290:	2390      	movs	r3, #144	; 0x90
 8012292:	e086      	b.n	80123a2 <sd_read_data+0x166>
 8012294:	4b45      	ldr	r3, [pc, #276]	; (80123ac <sd_read_data+0x170>)
 8012296:	633b      	str	r3, [r7, #48]	; 0x30
 8012298:	f44f 7300 	mov.w	r3, #512	; 0x200
 801229c:	62fb      	str	r3, [r7, #44]	; 0x2c
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 801229e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80122a0:	2b00      	cmp	r3, #0
 80122a2:	dd1d      	ble.n	80122e0 <sd_read_data+0xa4>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 80122a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122a6:	f003 021f 	and.w	r2, r3, #31
 80122aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80122ac:	4413      	add	r3, r2
 80122ae:	62bb      	str	r3, [r7, #40]	; 0x28
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 80122b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122b2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80122b4:	f3bf 8f4f 	dsb	sy
}
 80122b8:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 80122ba:	4a3e      	ldr	r2, [pc, #248]	; (80123b4 <sd_read_data+0x178>)
 80122bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122be:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 80122c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122c4:	3320      	adds	r3, #32
 80122c6:	627b      	str	r3, [r7, #36]	; 0x24
        op_size -= __SCB_DCACHE_LINE_SIZE;
 80122c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122ca:	3b20      	subs	r3, #32
 80122cc:	62bb      	str	r3, [r7, #40]	; 0x28
      } while ( op_size > 0 );
 80122ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122d0:	2b00      	cmp	r3, #0
 80122d2:	dcf2      	bgt.n	80122ba <sd_read_data+0x7e>
  __ASM volatile ("dsb 0xF":::"memory");
 80122d4:	f3bf 8f4f 	dsb	sy
}
 80122d8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80122da:	f3bf 8f6f 	isb	sy
}
 80122de:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 80122e0:	bf00      	nop

#if (FX_STM32_SD_CACHE_MAINTENANCE == 1)
      invalidate_cache_by_addr((uint32_t*)scratch, FX_STM32_SD_DEFAULT_SECTOR_SIZE);
#endif

      _fx_utility_memory_copy(scratch, read_addr, FX_STM32_SD_DEFAULT_SECTOR_SIZE);
 80122e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80122e6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80122e8:	4830      	ldr	r0, [pc, #192]	; (80123ac <sd_read_data+0x170>)
 80122ea:	f009 fa43 	bl	801b774 <_fx_utility_memory_copy>
      read_addr += FX_STM32_SD_DEFAULT_SECTOR_SIZE;
 80122ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80122f0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80122f4:	637b      	str	r3, [r7, #52]	; 0x34
    for (i = 0; i < num_sectors; i++)
 80122f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80122f8:	3301      	adds	r3, #1
 80122fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80122fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80122fe:	687a      	ldr	r2, [r7, #4]
 8012300:	429a      	cmp	r2, r3
 8012302:	d8ae      	bhi.n	8012262 <sd_read_data+0x26>
    }

    /* Check if all sectors were read */
    if (i == num_sectors)
 8012304:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012306:	687a      	ldr	r2, [r7, #4]
 8012308:	429a      	cmp	r2, r3
 801230a:	d102      	bne.n	8012312 <sd_read_data+0xd6>
    {
      status = FX_SUCCESS;
 801230c:	2300      	movs	r3, #0
 801230e:	63bb      	str	r3, [r7, #56]	; 0x38
 8012310:	e046      	b.n	80123a0 <sd_read_data+0x164>
    }
    else
    {
      status = FX_BUFFER_ERROR;
 8012312:	2321      	movs	r3, #33	; 0x21
 8012314:	63bb      	str	r3, [r7, #56]	; 0x38
 8012316:	e043      	b.n	80123a0 <sd_read_data+0x164>
    }
  }
  else
  {

    status = fx_stm32_sd_read_blocks(FX_STM32_SD_INSTANCE, (UINT *)media_ptr->fx_media_driver_buffer, (UINT)start_sector, num_sectors);
 8012318:	68fb      	ldr	r3, [r7, #12]
 801231a:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 801231e:	687b      	ldr	r3, [r7, #4]
 8012320:	68ba      	ldr	r2, [r7, #8]
 8012322:	2000      	movs	r0, #0
 8012324:	f7ff fdec 	bl	8011f00 <fx_stm32_sd_read_blocks>
 8012328:	4603      	mov	r3, r0
 801232a:	63bb      	str	r3, [r7, #56]	; 0x38

    if (status != 0)
 801232c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801232e:	2b00      	cmp	r3, #0
 8012330:	d001      	beq.n	8012336 <sd_read_data+0xfa>
    {
      /* read error occurred, call the error handler code then return immediately */
      FX_STM32_SD_READ_TRANSFER_ERROR(status);

      return FX_IO_ERROR;
 8012332:	2390      	movs	r3, #144	; 0x90
 8012334:	e035      	b.n	80123a2 <sd_read_data+0x166>
    }

    /* wait for read transfer notification */
       FX_STM32_SD_READ_CPLT_NOTIFY();
 8012336:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801233a:	481d      	ldr	r0, [pc, #116]	; (80123b0 <sd_read_data+0x174>)
 801233c:	f00c fb00 	bl	801e940 <_txe_semaphore_get>
 8012340:	4603      	mov	r3, r0
 8012342:	2b00      	cmp	r3, #0
 8012344:	d001      	beq.n	801234a <sd_read_data+0x10e>
 8012346:	2390      	movs	r3, #144	; 0x90
 8012348:	e02b      	b.n	80123a2 <sd_read_data+0x166>

#if (FX_STM32_SD_CACHE_MAINTENANCE == 1)
    invalidate_cache_by_addr((uint32_t*)media_ptr->fx_media_driver_buffer, num_sectors * FX_STM32_SD_DEFAULT_SECTOR_SIZE);
 801234a:	68fb      	ldr	r3, [r7, #12]
 801234c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8012350:	687b      	ldr	r3, [r7, #4]
 8012352:	025b      	lsls	r3, r3, #9
 8012354:	623a      	str	r2, [r7, #32]
 8012356:	61fb      	str	r3, [r7, #28]
    if ( dsize > 0 ) { 
 8012358:	69fb      	ldr	r3, [r7, #28]
 801235a:	2b00      	cmp	r3, #0
 801235c:	dd1d      	ble.n	801239a <sd_read_data+0x15e>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 801235e:	6a3b      	ldr	r3, [r7, #32]
 8012360:	f003 021f 	and.w	r2, r3, #31
 8012364:	69fb      	ldr	r3, [r7, #28]
 8012366:	4413      	add	r3, r2
 8012368:	61bb      	str	r3, [r7, #24]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 801236a:	6a3b      	ldr	r3, [r7, #32]
 801236c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 801236e:	f3bf 8f4f 	dsb	sy
}
 8012372:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8012374:	4a0f      	ldr	r2, [pc, #60]	; (80123b4 <sd_read_data+0x178>)
 8012376:	697b      	ldr	r3, [r7, #20]
 8012378:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 801237c:	697b      	ldr	r3, [r7, #20]
 801237e:	3320      	adds	r3, #32
 8012380:	617b      	str	r3, [r7, #20]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8012382:	69bb      	ldr	r3, [r7, #24]
 8012384:	3b20      	subs	r3, #32
 8012386:	61bb      	str	r3, [r7, #24]
      } while ( op_size > 0 );
 8012388:	69bb      	ldr	r3, [r7, #24]
 801238a:	2b00      	cmp	r3, #0
 801238c:	dcf2      	bgt.n	8012374 <sd_read_data+0x138>
  __ASM volatile ("dsb 0xF":::"memory");
 801238e:	f3bf 8f4f 	dsb	sy
}
 8012392:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8012394:	f3bf 8f6f 	isb	sy
}
 8012398:	bf00      	nop
}
 801239a:	bf00      	nop
#endif

    status = FX_SUCCESS;
 801239c:	2300      	movs	r3, #0
 801239e:	63bb      	str	r3, [r7, #56]	; 0x38
  }

  /* Operation finished, call the post read macro if defined */

  FX_STM32_SD_POST_READ_TRANSFER(media_ptr);
  return status;
 80123a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80123a2:	4618      	mov	r0, r3
 80123a4:	3740      	adds	r7, #64	; 0x40
 80123a6:	46bd      	mov	sp, r7
 80123a8:	bd80      	pop	{r7, pc}
 80123aa:	bf00      	nop
 80123ac:	24004e40 	.word	0x24004e40
 80123b0:	24004e14 	.word	0x24004e14
 80123b4:	e000ed00 	.word	0xe000ed00

080123b8 <sd_write_data>:
* @param UINT use_scratch_buffer to enable scratch buffer usage or not.
* @retval FX_SUCCESS on success FX_BUFFER_ERROR / FX_ACCESS_ERROR / FX_IO_ERROR otherwise
*/

static UINT sd_write_data(FX_MEDIA *media_ptr, ULONG start_sector, UINT num_sectors, UINT use_scratch_buffer)
{
 80123b8:	b580      	push	{r7, lr}
 80123ba:	b090      	sub	sp, #64	; 0x40
 80123bc:	af00      	add	r7, sp, #0
 80123be:	60f8      	str	r0, [r7, #12]
 80123c0:	60b9      	str	r1, [r7, #8]
 80123c2:	607a      	str	r2, [r7, #4]
 80123c4:	603b      	str	r3, [r7, #0]
  INT i = 0;
 80123c6:	2300      	movs	r3, #0
 80123c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  UCHAR *write_addr;

  /* call Pre write operation macro */
  FX_STM32_SD_PRE_WRITE_TRANSFER(media_ptr);

  if (use_scratch_buffer)
 80123ca:	683b      	ldr	r3, [r7, #0]
 80123cc:	2b00      	cmp	r3, #0
 80123ce:	d061      	beq.n	8012494 <sd_write_data+0xdc>
  {
    write_addr = media_ptr->fx_media_driver_buffer;
 80123d0:	68fb      	ldr	r3, [r7, #12]
 80123d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80123d6:	637b      	str	r3, [r7, #52]	; 0x34

    for (i = 0; i < num_sectors; i++)
 80123d8:	2300      	movs	r3, #0
 80123da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80123dc:	e04c      	b.n	8012478 <sd_write_data+0xc0>
    {
      _fx_utility_memory_copy(write_addr, scratch, FX_STM32_SD_DEFAULT_SECTOR_SIZE);
 80123de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80123e2:	4951      	ldr	r1, [pc, #324]	; (8012528 <sd_write_data+0x170>)
 80123e4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80123e6:	f009 f9c5 	bl	801b774 <_fx_utility_memory_copy>
      write_addr += FX_STM32_SD_DEFAULT_SECTOR_SIZE;
 80123ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80123ec:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80123f0:	637b      	str	r3, [r7, #52]	; 0x34
 80123f2:	4b4d      	ldr	r3, [pc, #308]	; (8012528 <sd_write_data+0x170>)
 80123f4:	633b      	str	r3, [r7, #48]	; 0x30
 80123f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80123fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 80123fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80123fe:	2b00      	cmp	r3, #0
 8012400:	dd1d      	ble.n	801243e <sd_write_data+0x86>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8012402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012404:	f003 021f 	and.w	r2, r3, #31
 8012408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801240a:	4413      	add	r3, r2
 801240c:	62bb      	str	r3, [r7, #40]	; 0x28
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 801240e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012410:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8012412:	f3bf 8f4f 	dsb	sy
}
 8012416:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8012418:	4a44      	ldr	r2, [pc, #272]	; (801252c <sd_write_data+0x174>)
 801241a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801241c:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8012420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012422:	3320      	adds	r3, #32
 8012424:	627b      	str	r3, [r7, #36]	; 0x24
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8012426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012428:	3b20      	subs	r3, #32
 801242a:	62bb      	str	r3, [r7, #40]	; 0x28
      } while ( op_size > 0 );
 801242c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801242e:	2b00      	cmp	r3, #0
 8012430:	dcf2      	bgt.n	8012418 <sd_write_data+0x60>
  __ASM volatile ("dsb 0xF":::"memory");
 8012432:	f3bf 8f4f 	dsb	sy
}
 8012436:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8012438:	f3bf 8f6f 	isb	sy
}
 801243c:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 801243e:	bf00      	nop
#if (FX_STM32_SD_CACHE_MAINTENANCE == 1)
      /* Clean the DCache to make the SD DMA see the actual content of the scratch buffer */
      clean_cache_by_addr((uint32_t*)scratch, FX_STM32_SD_DEFAULT_SECTOR_SIZE);
#endif

      status = fx_stm32_sd_write_blocks(FX_STM32_SD_INSTANCE, (UINT *)scratch, (UINT)start_sector++, 1);
 8012440:	68ba      	ldr	r2, [r7, #8]
 8012442:	1c53      	adds	r3, r2, #1
 8012444:	60bb      	str	r3, [r7, #8]
 8012446:	2301      	movs	r3, #1
 8012448:	4937      	ldr	r1, [pc, #220]	; (8012528 <sd_write_data+0x170>)
 801244a:	2000      	movs	r0, #0
 801244c:	f7ff fd74 	bl	8011f38 <fx_stm32_sd_write_blocks>
 8012450:	4603      	mov	r3, r0
 8012452:	63bb      	str	r3, [r7, #56]	; 0x38

      if (status != 0)
 8012454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012456:	2b00      	cmp	r3, #0
 8012458:	d001      	beq.n	801245e <sd_write_data+0xa6>
      {
        /* in case of error call the error handling macro */
        FX_STM32_SD_WRITE_TRANSFER_ERROR(status);
        return FX_IO_ERROR;
 801245a:	2390      	movs	r3, #144	; 0x90
 801245c:	e05f      	b.n	801251e <sd_write_data+0x166>
      }

      /*  */
       FX_STM32_SD_WRITE_CPLT_NOTIFY();
 801245e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8012462:	4833      	ldr	r0, [pc, #204]	; (8012530 <sd_write_data+0x178>)
 8012464:	f00c fa6c 	bl	801e940 <_txe_semaphore_get>
 8012468:	4603      	mov	r3, r0
 801246a:	2b00      	cmp	r3, #0
 801246c:	d001      	beq.n	8012472 <sd_write_data+0xba>
 801246e:	2390      	movs	r3, #144	; 0x90
 8012470:	e055      	b.n	801251e <sd_write_data+0x166>
    for (i = 0; i < num_sectors; i++)
 8012472:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012474:	3301      	adds	r3, #1
 8012476:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012478:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801247a:	687a      	ldr	r2, [r7, #4]
 801247c:	429a      	cmp	r2, r3
 801247e:	d8ae      	bhi.n	80123de <sd_write_data+0x26>
    }

    if (i == num_sectors)
 8012480:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012482:	687a      	ldr	r2, [r7, #4]
 8012484:	429a      	cmp	r2, r3
 8012486:	d102      	bne.n	801248e <sd_write_data+0xd6>
    {
      status = FX_SUCCESS;
 8012488:	2300      	movs	r3, #0
 801248a:	63bb      	str	r3, [r7, #56]	; 0x38
 801248c:	e046      	b.n	801251c <sd_write_data+0x164>
    }
    else
    {
      status = FX_BUFFER_ERROR;
 801248e:	2321      	movs	r3, #33	; 0x21
 8012490:	63bb      	str	r3, [r7, #56]	; 0x38
 8012492:	e043      	b.n	801251c <sd_write_data+0x164>
    }
  }
  else
  {
#if (FX_STM32_SD_CACHE_MAINTENANCE == 1)
    clean_cache_by_addr((uint32_t*)media_ptr->fx_media_driver_buffer, num_sectors * FX_STM32_SD_DEFAULT_SECTOR_SIZE);
 8012494:	68fb      	ldr	r3, [r7, #12]
 8012496:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 801249a:	687b      	ldr	r3, [r7, #4]
 801249c:	025b      	lsls	r3, r3, #9
 801249e:	623a      	str	r2, [r7, #32]
 80124a0:	61fb      	str	r3, [r7, #28]
    if ( dsize > 0 ) { 
 80124a2:	69fb      	ldr	r3, [r7, #28]
 80124a4:	2b00      	cmp	r3, #0
 80124a6:	dd1d      	ble.n	80124e4 <sd_write_data+0x12c>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 80124a8:	6a3b      	ldr	r3, [r7, #32]
 80124aa:	f003 021f 	and.w	r2, r3, #31
 80124ae:	69fb      	ldr	r3, [r7, #28]
 80124b0:	4413      	add	r3, r2
 80124b2:	61bb      	str	r3, [r7, #24]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 80124b4:	6a3b      	ldr	r3, [r7, #32]
 80124b6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80124b8:	f3bf 8f4f 	dsb	sy
}
 80124bc:	bf00      	nop
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 80124be:	4a1b      	ldr	r2, [pc, #108]	; (801252c <sd_write_data+0x174>)
 80124c0:	697b      	ldr	r3, [r7, #20]
 80124c2:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 80124c6:	697b      	ldr	r3, [r7, #20]
 80124c8:	3320      	adds	r3, #32
 80124ca:	617b      	str	r3, [r7, #20]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 80124cc:	69bb      	ldr	r3, [r7, #24]
 80124ce:	3b20      	subs	r3, #32
 80124d0:	61bb      	str	r3, [r7, #24]
      } while ( op_size > 0 );
 80124d2:	69bb      	ldr	r3, [r7, #24]
 80124d4:	2b00      	cmp	r3, #0
 80124d6:	dcf2      	bgt.n	80124be <sd_write_data+0x106>
  __ASM volatile ("dsb 0xF":::"memory");
 80124d8:	f3bf 8f4f 	dsb	sy
}
 80124dc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80124de:	f3bf 8f6f 	isb	sy
}
 80124e2:	bf00      	nop
}
 80124e4:	bf00      	nop
#endif
    status = fx_stm32_sd_write_blocks(FX_STM32_SD_INSTANCE, (UINT *)media_ptr->fx_media_driver_buffer, (UINT)start_sector, num_sectors);
 80124e6:	68fb      	ldr	r3, [r7, #12]
 80124e8:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 80124ec:	687b      	ldr	r3, [r7, #4]
 80124ee:	68ba      	ldr	r2, [r7, #8]
 80124f0:	2000      	movs	r0, #0
 80124f2:	f7ff fd21 	bl	8011f38 <fx_stm32_sd_write_blocks>
 80124f6:	4603      	mov	r3, r0
 80124f8:	63bb      	str	r3, [r7, #56]	; 0x38

    if (status != 0)
 80124fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124fc:	2b00      	cmp	r3, #0
 80124fe:	d001      	beq.n	8012504 <sd_write_data+0x14c>
    {
      FX_STM32_SD_WRITE_TRANSFER_ERROR(status);
      return FX_IO_ERROR;
 8012500:	2390      	movs	r3, #144	; 0x90
 8012502:	e00c      	b.n	801251e <sd_write_data+0x166>
    }

    /* when defined, wait for the write notification */
     FX_STM32_SD_WRITE_CPLT_NOTIFY();
 8012504:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8012508:	4809      	ldr	r0, [pc, #36]	; (8012530 <sd_write_data+0x178>)
 801250a:	f00c fa19 	bl	801e940 <_txe_semaphore_get>
 801250e:	4603      	mov	r3, r0
 8012510:	2b00      	cmp	r3, #0
 8012512:	d001      	beq.n	8012518 <sd_write_data+0x160>
 8012514:	2390      	movs	r3, #144	; 0x90
 8012516:	e002      	b.n	801251e <sd_write_data+0x166>

    status = FX_SUCCESS;
 8012518:	2300      	movs	r3, #0
 801251a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* perform post write operations */
  FX_STM32_SD_POST_WRITE_TRANSFER(media_ptr);


  return status;
 801251c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 801251e:	4618      	mov	r0, r3
 8012520:	3740      	adds	r7, #64	; 0x40
 8012522:	46bd      	mov	sp, r7
 8012524:	bd80      	pop	{r7, pc}
 8012526:	bf00      	nop
 8012528:	24004e40 	.word	0x24004e40
 801252c:	e000ed00 	.word	0xe000ed00
 8012530:	24004df8 	.word	0x24004df8

08012534 <_fx_directory_entry_read>:
                                   ULONG *entry_ptr, FX_DIR_ENTRY *destination_ptr)
#else
UINT  _fx_directory_entry_read(FX_MEDIA *media_ptr, FX_DIR_ENTRY *source_dir,
                               ULONG *entry_ptr, FX_DIR_ENTRY *destination_ptr)
#endif /* FX_ENABLE_EXFAT */
{
 8012534:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8012538:	b09e      	sub	sp, #120	; 0x78
 801253a:	af04      	add	r7, sp, #16
 801253c:	61f8      	str	r0, [r7, #28]
 801253e:	61b9      	str	r1, [r7, #24]
 8012540:	617a      	str	r2, [r7, #20]
 8012542:	613b      	str	r3, [r7, #16]

UINT   i, j, card, dotflag, get_short_name;
UINT   number_of_lfns;
UINT   status;
ULONG  cluster, next_cluster = 0;
 8012544:	2300      	movs	r3, #0
 8012546:	627b      	str	r3, [r7, #36]	; 0x24
ULONG  logical_sector;
ULONG  byte_offset;
ULONG  bytes_per_cluster;
UCHAR *read_ptr;
CHAR  *short_name_ptr;
ULONG  entry = *entry_ptr;
 8012548:	697b      	ldr	r3, [r7, #20]
 801254a:	681b      	ldr	r3, [r3, #0]
 801254c:	63bb      	str	r3, [r7, #56]	; 0x38


#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of directory entry read requests.  */
    media_ptr -> fx_media_directory_entry_reads++;
 801254e:	69fb      	ldr	r3, [r7, #28]
 8012550:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 8012554:	1c5a      	adds	r2, r3, #1
 8012556:	69fb      	ldr	r3, [r7, #28]
 8012558:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_DIR_ENTRY_READ, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

    /* Calculate the byte offset of this directory entry.  */
    byte_offset =  entry * FX_DIR_ENTRY_SIZE;
 801255c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801255e:	015b      	lsls	r3, r3, #5
 8012560:	647b      	str	r3, [r7, #68]	; 0x44

    /* Determine if a sub-directory or FAT32 root directory is specified.  */
#ifdef FX_ENABLE_EXFAT
    if ((source_dir) || (media_ptr -> fx_media_FAT_type == FX_FAT32))
#else
    if ((source_dir) || (media_ptr -> fx_media_32_bit_FAT))
 8012562:	69bb      	ldr	r3, [r7, #24]
 8012564:	2b00      	cmp	r3, #0
 8012566:	d104      	bne.n	8012572 <_fx_directory_entry_read+0x3e>
 8012568:	69fb      	ldr	r3, [r7, #28]
 801256a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801256c:	2b00      	cmp	r3, #0
 801256e:	f000 80a1 	beq.w	80126b4 <_fx_directory_entry_read+0x180>
    {

        /* Yes, a sub-directory is present.  */

        /* Calculate the number of bytes per cluster.  */
        bytes_per_cluster =  ((ULONG)media_ptr -> fx_media_bytes_per_sector) *
 8012572:	69fb      	ldr	r3, [r7, #28]
 8012574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
            ((ULONG)media_ptr -> fx_media_sectors_per_cluster);
 8012576:	69fa      	ldr	r2, [r7, #28]
 8012578:	6d52      	ldr	r2, [r2, #84]	; 0x54
        bytes_per_cluster =  ((ULONG)media_ptr -> fx_media_bytes_per_sector) *
 801257a:	fb02 f303 	mul.w	r3, r2, r3
 801257e:	633b      	str	r3, [r7, #48]	; 0x30

        /* Check for invalid value.  */
        if (bytes_per_cluster == 0)
 8012580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012582:	2b00      	cmp	r3, #0
 8012584:	d101      	bne.n	801258a <_fx_directory_entry_read+0x56>
        {

            /* Invalid media, return error.  */
            return(FX_MEDIA_INVALID);
 8012586:	2302      	movs	r3, #2
 8012588:	e355      	b.n	8012c36 <_fx_directory_entry_read+0x702>
        }

        /* Now determine the relative cluster in the sub-directory file.  */
        relative_cluster =   (UINT)(byte_offset / bytes_per_cluster);
 801258a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801258c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801258e:	fbb2 f3f3 	udiv	r3, r2, r3
 8012592:	653b      	str	r3, [r7, #80]	; 0x50

        /* Calculate the byte offset within the cluster.  */
        byte_offset =  byte_offset % bytes_per_cluster;
 8012594:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012596:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012598:	fbb3 f2f2 	udiv	r2, r3, r2
 801259c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801259e:	fb01 f202 	mul.w	r2, r1, r2
 80125a2:	1a9b      	subs	r3, r3, r2
 80125a4:	647b      	str	r3, [r7, #68]	; 0x44

        /* Now figure out the relative sector within the cluster.  */
        relative_sector =    (UINT)(byte_offset / ((ULONG)media_ptr -> fx_media_bytes_per_sector));
 80125a6:	69fb      	ldr	r3, [r7, #28]
 80125a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80125aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80125ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80125b0:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Read the directory sector into the internal memory buffer.  */

        /* Determine if there is a sub-directory.  */
        if (source_dir)
 80125b2:	69bb      	ldr	r3, [r7, #24]
 80125b4:	2b00      	cmp	r3, #0
 80125b6:	d028      	beq.n	801260a <_fx_directory_entry_read+0xd6>
        {

            /* Determine if this source directory has valid information from the previous call.  */
            if ((source_dir -> fx_dir_entry_last_search_cluster) &&
 80125b8:	69bb      	ldr	r3, [r7, #24]
 80125ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80125bc:	2b00      	cmp	r3, #0
 80125be:	d01e      	beq.n	80125fe <_fx_directory_entry_read+0xca>
                (source_dir -> fx_dir_entry_last_search_relative_cluster <= relative_cluster) &&
 80125c0:	69bb      	ldr	r3, [r7, #24]
 80125c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
            if ((source_dir -> fx_dir_entry_last_search_cluster) &&
 80125c4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80125c6:	429a      	cmp	r2, r3
 80125c8:	d319      	bcc.n	80125fe <_fx_directory_entry_read+0xca>
                (source_dir -> fx_dir_entry_last_search_log_sector == source_dir -> fx_dir_entry_log_sector) &&
 80125ca:	69bb      	ldr	r3, [r7, #24]
 80125cc:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 80125d0:	69bb      	ldr	r3, [r7, #24]
 80125d2:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
                (source_dir -> fx_dir_entry_last_search_relative_cluster <= relative_cluster) &&
 80125d6:	4299      	cmp	r1, r3
 80125d8:	bf08      	it	eq
 80125da:	4290      	cmpeq	r0, r2
 80125dc:	d10f      	bne.n	80125fe <_fx_directory_entry_read+0xca>
                (source_dir -> fx_dir_entry_last_search_byte_offset == source_dir -> fx_dir_entry_byte_offset))
 80125de:	69bb      	ldr	r3, [r7, #24]
 80125e0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80125e2:	69bb      	ldr	r3, [r7, #24]
 80125e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                (source_dir -> fx_dir_entry_last_search_log_sector == source_dir -> fx_dir_entry_log_sector) &&
 80125e6:	429a      	cmp	r2, r3
 80125e8:	d109      	bne.n	80125fe <_fx_directory_entry_read+0xca>
            {

                /* Use the previous information to start the search.  */
                cluster =  source_dir -> fx_dir_entry_last_search_cluster;
 80125ea:	69bb      	ldr	r3, [r7, #24]
 80125ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80125ee:	657b      	str	r3, [r7, #84]	; 0x54

                /* Setup the relative cluster index to the saved relative cluster.  */
                i =  source_dir -> fx_dir_entry_last_search_relative_cluster;
 80125f0:	69bb      	ldr	r3, [r7, #24]
 80125f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80125f4:	667b      	str	r3, [r7, #100]	; 0x64

                /* Clear the search cluster.  It will be updated prior to successful return.  */
                source_dir -> fx_dir_entry_last_search_cluster =  0;
 80125f6:	69bb      	ldr	r3, [r7, #24]
 80125f8:	2200      	movs	r2, #0
 80125fa:	651a      	str	r2, [r3, #80]	; 0x50
 80125fc:	e00a      	b.n	8012614 <_fx_directory_entry_read+0xe0>
            else
            {

                /* Nothing from the previous directory read, just setup the starting cluster to the
                   beginning of the sub-directory.  */
                cluster =  source_dir -> fx_dir_entry_cluster;
 80125fe:	69bb      	ldr	r3, [r7, #24]
 8012600:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012602:	657b      	str	r3, [r7, #84]	; 0x54

                /* Setup the relative cluster index to zero.  */
                i =  0;
 8012604:	2300      	movs	r3, #0
 8012606:	667b      	str	r3, [r7, #100]	; 0x64
 8012608:	e024      	b.n	8012654 <_fx_directory_entry_read+0x120>
        }
        else
        {

            /* No, setup the starting cluster to the FAT32 root cluster.  */
            cluster =  media_ptr -> fx_media_root_cluster_32;
 801260a:	69fb      	ldr	r3, [r7, #28]
 801260c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801260e:	657b      	str	r3, [r7, #84]	; 0x54

            /* Setup the relative cluster index to zero.  */
            i =  0;
 8012610:	2300      	movs	r3, #0
 8012612:	667b      	str	r3, [r7, #100]	; 0x64
        }

        /* Loop to position to the appropriate cluster.  */
        while (i < relative_cluster)
 8012614:	e01e      	b.n	8012654 <_fx_directory_entry_read+0x120>
        {

            /* Check the value of the new cluster - it must be a valid cluster number
               or something is really wrong!  */
            if ((cluster < FX_FAT_ENTRY_START) || (cluster >= media_ptr -> fx_media_fat_reserved))
 8012616:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012618:	2b01      	cmp	r3, #1
 801261a:	d907      	bls.n	801262c <_fx_directory_entry_read+0xf8>
 801261c:	69fb      	ldr	r3, [r7, #28]
 801261e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8012622:	f8d3 34a8 	ldr.w	r3, [r3, #1192]	; 0x4a8
 8012626:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8012628:	429a      	cmp	r2, r3
 801262a:	d301      	bcc.n	8012630 <_fx_directory_entry_read+0xfc>
            {

                /* Send error message back to caller.  */
                return(FX_FILE_CORRUPT);
 801262c:	2308      	movs	r3, #8
 801262e:	e302      	b.n	8012c36 <_fx_directory_entry_read+0x702>
            }

            /* Read the next cluster.  */
            status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &next_cluster);
 8012630:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012634:	461a      	mov	r2, r3
 8012636:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8012638:	69f8      	ldr	r0, [r7, #28]
 801263a:	f007 f891 	bl	8019760 <_fx_utility_FAT_entry_read>
 801263e:	6378      	str	r0, [r7, #52]	; 0x34

            /* There is a potential for loop, but hardly anything can be done */

            /* Check for I/O error.  */
            if (status != FX_SUCCESS)
 8012640:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012642:	2b00      	cmp	r3, #0
 8012644:	d001      	beq.n	801264a <_fx_directory_entry_read+0x116>
            {

                /* Return error code.  */
                return(status);
 8012646:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012648:	e2f5      	b.n	8012c36 <_fx_directory_entry_read+0x702>
            }

            /* Setup the actual cluster.  */
            cluster = next_cluster;
 801264a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801264c:	657b      	str	r3, [r7, #84]	; 0x54

            /* Increment the relative cluster number.  */
            i++;
 801264e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012650:	3301      	adds	r3, #1
 8012652:	667b      	str	r3, [r7, #100]	; 0x64
        while (i < relative_cluster)
 8012654:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8012656:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012658:	429a      	cmp	r2, r3
 801265a:	d3dc      	bcc.n	8012616 <_fx_directory_entry_read+0xe2>
        }

        /* At this point, the directory data sector needs to be read.  */
        logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 801265c:	69fb      	ldr	r3, [r7, #28]
 801265e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
            (((ULONG)cluster - FX_FAT_ENTRY_START) *
 8012660:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012662:	3b02      	subs	r3, #2
             ((ULONG)media_ptr -> fx_media_sectors_per_cluster)) +
 8012664:	69f9      	ldr	r1, [r7, #28]
 8012666:	6d49      	ldr	r1, [r1, #84]	; 0x54
            (((ULONG)cluster - FX_FAT_ENTRY_START) *
 8012668:	fb01 f303 	mul.w	r3, r1, r3
        logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 801266c:	4413      	add	r3, r2
 801266e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012670:	4413      	add	r3, r2
 8012672:	64bb      	str	r3, [r7, #72]	; 0x48
            relative_sector;

        /* Read the logical directory sector.  */
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 8012674:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012676:	2200      	movs	r2, #0
 8012678:	60bb      	str	r3, [r7, #8]
 801267a:	60fa      	str	r2, [r7, #12]
                                                  media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_DIRECTORY_SECTOR);
 801267c:	69fb      	ldr	r3, [r7, #28]
 801267e:	689b      	ldr	r3, [r3, #8]
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 8012680:	2203      	movs	r2, #3
 8012682:	9202      	str	r2, [sp, #8]
 8012684:	2201      	movs	r2, #1
 8012686:	9201      	str	r2, [sp, #4]
 8012688:	9300      	str	r3, [sp, #0]
 801268a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801268e:	69f8      	ldr	r0, [r7, #28]
 8012690:	f008 fc74 	bl	801af7c <_fx_utility_logical_sector_read>
 8012694:	6378      	str	r0, [r7, #52]	; 0x34

        /* Determine if an error occurred.  */
        if (status != FX_SUCCESS)
 8012696:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012698:	2b00      	cmp	r3, #0
 801269a:	d001      	beq.n	80126a0 <_fx_directory_entry_read+0x16c>
        {

            /* Return error code.  */
            return(status);
 801269c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801269e:	e2ca      	b.n	8012c36 <_fx_directory_entry_read+0x702>
        }

        /* Calculate the byte offset within this sector.  */
        byte_offset =  byte_offset % media_ptr -> fx_media_bytes_per_sector;
 80126a0:	69fb      	ldr	r3, [r7, #28]
 80126a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80126a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80126a6:	fbb3 f1f2 	udiv	r1, r3, r2
 80126aa:	fb01 f202 	mul.w	r2, r1, r2
 80126ae:	1a9b      	subs	r3, r3, r2
 80126b0:	647b      	str	r3, [r7, #68]	; 0x44
 80126b2:	e02f      	b.n	8012714 <_fx_directory_entry_read+0x1e0>
    {

        /* Read the entry from the root directory.  */

        /* Determine which sector the requested root directory entry is in.  */
        logical_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 80126b4:	69fb      	ldr	r3, [r7, #28]
 80126b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80126b8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80126ba:	fbb2 f2f3 	udiv	r2, r2, r3
            (ULONG)media_ptr -> fx_media_root_sector_start;
 80126be:	69fb      	ldr	r3, [r7, #28]
 80126c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
        logical_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 80126c2:	4413      	add	r3, r2
 80126c4:	64bb      	str	r3, [r7, #72]	; 0x48

        /* Read the logical directory sector.  */
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 80126c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80126c8:	2200      	movs	r2, #0
 80126ca:	603b      	str	r3, [r7, #0]
 80126cc:	607a      	str	r2, [r7, #4]
                                                  media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_DIRECTORY_SECTOR);
 80126ce:	69fb      	ldr	r3, [r7, #28]
 80126d0:	689b      	ldr	r3, [r3, #8]
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 80126d2:	2203      	movs	r2, #3
 80126d4:	9202      	str	r2, [sp, #8]
 80126d6:	2201      	movs	r2, #1
 80126d8:	9201      	str	r2, [sp, #4]
 80126da:	9300      	str	r3, [sp, #0]
 80126dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80126e0:	69f8      	ldr	r0, [r7, #28]
 80126e2:	f008 fc4b 	bl	801af7c <_fx_utility_logical_sector_read>
 80126e6:	6378      	str	r0, [r7, #52]	; 0x34

        /* Determine if an error occurred.  */
        if (status != FX_SUCCESS)
 80126e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80126ea:	2b00      	cmp	r3, #0
 80126ec:	d001      	beq.n	80126f2 <_fx_directory_entry_read+0x1be>
        {

            /* Return error code.  */
            return(status);
 80126ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80126f0:	e2a1      	b.n	8012c36 <_fx_directory_entry_read+0x702>
        }

        /* Set the cluster and relative variables (not used in this case) to avoid any compiler
           warnings.  */
        relative_cluster =  relative_sector =  cluster =  0;
 80126f2:	2300      	movs	r3, #0
 80126f4:	657b      	str	r3, [r7, #84]	; 0x54
 80126f6:	2300      	movs	r3, #0
 80126f8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80126fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80126fc:	653b      	str	r3, [r7, #80]	; 0x50

        /* Now calculate the byte offset into this sector.  */
        byte_offset =  byte_offset -
            ((logical_sector - (ULONG)media_ptr -> fx_media_root_sector_start) *
 80126fe:	69fb      	ldr	r3, [r7, #28]
 8012700:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012702:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012704:	1ad3      	subs	r3, r2, r3
             media_ptr -> fx_media_bytes_per_sector);
 8012706:	69fa      	ldr	r2, [r7, #28]
 8012708:	6a92      	ldr	r2, [r2, #40]	; 0x28
            ((logical_sector - (ULONG)media_ptr -> fx_media_root_sector_start) *
 801270a:	fb02 f303 	mul.w	r3, r2, r3
        byte_offset =  byte_offset -
 801270e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012710:	1ad3      	subs	r3, r2, r3
 8012712:	647b      	str	r3, [r7, #68]	; 0x44
    }

    /* Setup a pointer into the buffer.  */
    read_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer + (UINT)byte_offset;
 8012714:	69fb      	ldr	r3, [r7, #28]
 8012716:	689a      	ldr	r2, [r3, #8]
 8012718:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801271a:	4413      	add	r3, r2
 801271c:	643b      	str	r3, [r7, #64]	; 0x40

    /* Save the logical sector and byte offset in the returned directory entry.  */
    destination_ptr -> fx_dir_entry_log_sector =       logical_sector;
 801271e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012720:	2200      	movs	r2, #0
 8012722:	4698      	mov	r8, r3
 8012724:	4691      	mov	r9, r2
 8012726:	693b      	ldr	r3, [r7, #16]
 8012728:	e9c3 8910 	strd	r8, r9, [r3, #64]	; 0x40
    destination_ptr -> fx_dir_entry_byte_offset =      byte_offset;
 801272c:	693b      	ldr	r3, [r7, #16]
 801272e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012730:	649a      	str	r2, [r3, #72]	; 0x48

    /* Clear the short file name information.  */
    destination_ptr -> fx_dir_entry_long_name_shorted =  0;
 8012732:	693b      	ldr	r3, [r7, #16]
 8012734:	2200      	movs	r2, #0
 8012736:	619a      	str	r2, [r3, #24]
    destination_ptr -> fx_dir_entry_short_name[0]     =  0;
 8012738:	693b      	ldr	r3, [r7, #16]
 801273a:	2200      	movs	r2, #0
 801273c:	711a      	strb	r2, [r3, #4]

    /* Setup short name pointer.  */
    short_name_ptr =  destination_ptr -> fx_dir_entry_name;
 801273e:	693b      	ldr	r3, [r7, #16]
 8012740:	681b      	ldr	r3, [r3, #0]
 8012742:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Check if long file name exists.  */
    get_short_name =  0;
 8012744:	2300      	movs	r3, #0
 8012746:	65bb      	str	r3, [r7, #88]	; 0x58
    if ((*(read_ptr + 11) == (UCHAR)FX_LONG_NAME) && (*read_ptr != (UCHAR)FX_DIR_ENTRY_FREE))
 8012748:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801274a:	330b      	adds	r3, #11
 801274c:	781b      	ldrb	r3, [r3, #0]
 801274e:	2b0f      	cmp	r3, #15
 8012750:	f040 8129 	bne.w	80129a6 <_fx_directory_entry_read+0x472>
 8012754:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012756:	781b      	ldrb	r3, [r3, #0]
 8012758:	2be5      	cmp	r3, #229	; 0xe5
 801275a:	f000 8124 	beq.w	80129a6 <_fx_directory_entry_read+0x472>
    {

        /* Collate the long name. */

        /* Pickup the file name length.  */
        i = (((UINT)(*read_ptr & (UCHAR)0x1f) - 1) * FX_LONG_NAME_ENTRY_LEN) & 0xFFFFFFFF;
 801275e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012760:	781b      	ldrb	r3, [r3, #0]
 8012762:	f003 021f 	and.w	r2, r3, #31
 8012766:	4613      	mov	r3, r2
 8012768:	005b      	lsls	r3, r3, #1
 801276a:	4413      	add	r3, r2
 801276c:	009b      	lsls	r3, r3, #2
 801276e:	4413      	add	r3, r2
 8012770:	3b0d      	subs	r3, #13
 8012772:	667b      	str	r3, [r7, #100]	; 0x64

        /* Save the number of LFN entries.  */
        number_of_lfns =  (UINT)(*read_ptr & (UCHAR)0x1f);
 8012774:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012776:	781b      	ldrb	r3, [r3, #0]
 8012778:	f003 031f 	and.w	r3, r3, #31
 801277c:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Check the file name size.  */
        if (i >= (FX_MAX_LONG_NAME_LEN - 1))
 801277e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012780:	2bfe      	cmp	r3, #254	; 0xfe
 8012782:	d908      	bls.n	8012796 <_fx_directory_entry_read+0x262>
        {

            /* Name is too big, shorten it.  */
            get_short_name = 1;
 8012784:	2301      	movs	r3, #1
 8012786:	65bb      	str	r3, [r7, #88]	; 0x58
            destination_ptr -> fx_dir_entry_long_name_shorted =  (UINT)(*read_ptr & (UCHAR)0x1f);
 8012788:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801278a:	781b      	ldrb	r3, [r3, #0]
 801278c:	f003 021f 	and.w	r2, r3, #31
 8012790:	693b      	ldr	r3, [r7, #16]
 8012792:	619a      	str	r2, [r3, #24]
 8012794:	e015      	b.n	80127c2 <_fx_directory_entry_read+0x28e>
        }
        else
        {

            /* Size of name is fine, save pointer to short file name.  */
            short_name_ptr = destination_ptr -> fx_dir_entry_short_name;
 8012796:	693b      	ldr	r3, [r7, #16]
 8012798:	3304      	adds	r3, #4
 801279a:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Loop to make sure the long file name is NULL terminated.  */
            j = i + FX_LONG_NAME_ENTRY_LEN + 1;
 801279c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801279e:	330e      	adds	r3, #14
 80127a0:	663b      	str	r3, [r7, #96]	; 0x60
            do
            {
                /* Place a NULL in the long name.  */
                destination_ptr -> fx_dir_entry_name[i] =  0;
 80127a2:	693b      	ldr	r3, [r7, #16]
 80127a4:	681a      	ldr	r2, [r3, #0]
 80127a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80127a8:	4413      	add	r3, r2
 80127aa:	2200      	movs	r2, #0
 80127ac:	701a      	strb	r2, [r3, #0]

                /* Position to the next entry.  */
                i++;
 80127ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80127b0:	3301      	adds	r3, #1
 80127b2:	667b      	str	r3, [r7, #100]	; 0x64
            } while ((i < j) && (i < FX_MAX_LONG_NAME_LEN));
 80127b4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80127b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80127b8:	429a      	cmp	r2, r3
 80127ba:	d202      	bcs.n	80127c2 <_fx_directory_entry_read+0x28e>
 80127bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80127be:	2bff      	cmp	r3, #255	; 0xff
 80127c0:	d9ef      	bls.n	80127a2 <_fx_directory_entry_read+0x26e>
        /* Loop to pickup the rest of the name.  */
        do
        {

            /* Get the lower 5 bit containing the cardinality.  */
            card = (UINT)(*read_ptr & (UCHAR)0x1f) - 1;
 80127c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80127c4:	781b      	ldrb	r3, [r3, #0]
 80127c6:	f003 031f 	and.w	r3, r3, #31
 80127ca:	3b01      	subs	r3, #1
 80127cc:	62bb      	str	r3, [r7, #40]	; 0x28

            /* For simplicity no checksum or cardinality checking is done */
            if (get_short_name == 0)
 80127ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80127d0:	2b00      	cmp	r3, #0
 80127d2:	d168      	bne.n	80128a6 <_fx_directory_entry_read+0x372>
            {

                /* Loop to pickup name.  */
                for (i = 1, j = 0; i < FX_DIR_ENTRY_SIZE; i += 2)
 80127d4:	2301      	movs	r3, #1
 80127d6:	667b      	str	r3, [r7, #100]	; 0x64
 80127d8:	2300      	movs	r3, #0
 80127da:	663b      	str	r3, [r7, #96]	; 0x60
 80127dc:	e060      	b.n	80128a0 <_fx_directory_entry_read+0x36c>
                {

                    if ((i == 11) || (i == 26))
 80127de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80127e0:	2b0b      	cmp	r3, #11
 80127e2:	d057      	beq.n	8012894 <_fx_directory_entry_read+0x360>
 80127e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80127e6:	2b1a      	cmp	r3, #26
 80127e8:	d054      	beq.n	8012894 <_fx_directory_entry_read+0x360>
                    {
                        continue;
                    }

                    /* i = 12, 27 is not generated due to +=2 */
                    if (i == 13)
 80127ea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80127ec:	2b0d      	cmp	r3, #13
 80127ee:	d102      	bne.n	80127f6 <_fx_directory_entry_read+0x2c2>
                    {
                        i = 12;
 80127f0:	230c      	movs	r3, #12
 80127f2:	667b      	str	r3, [r7, #100]	; 0x64
                        continue; /* this time next unicode is byte offset 14*/
 80127f4:	e051      	b.n	801289a <_fx_directory_entry_read+0x366>
                    }

                    /* Determine if there is an actual unicode character present.  */
                    if (read_ptr[i + 1])
 80127f6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80127f8:	3301      	adds	r3, #1
 80127fa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80127fc:	4413      	add	r3, r2
 80127fe:	781b      	ldrb	r3, [r3, #0]
 8012800:	2b00      	cmp	r3, #0
 8012802:	d014      	beq.n	801282e <_fx_directory_entry_read+0x2fa>
                    {

                        /* Extended byte is non-zero, make sure both bytes of the unicode entry are not
                           all ones, since this is a normal case.  */
                        if ((read_ptr[i + 1] != (UCHAR)0xFF) || (read_ptr[i] != (UCHAR)0xFF))
 8012804:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012806:	3301      	adds	r3, #1
 8012808:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801280a:	4413      	add	r3, r2
 801280c:	781b      	ldrb	r3, [r3, #0]
 801280e:	2bff      	cmp	r3, #255	; 0xff
 8012810:	d105      	bne.n	801281e <_fx_directory_entry_read+0x2ea>
 8012812:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012814:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012816:	4413      	add	r3, r2
 8012818:	781b      	ldrb	r3, [r3, #0]
 801281a:	2bff      	cmp	r3, #255	; 0xff
 801281c:	d007      	beq.n	801282e <_fx_directory_entry_read+0x2fa>
                        {

                            /* Name is an actual unicode name, shorten it.  */
                            get_short_name = 1;
 801281e:	2301      	movs	r3, #1
 8012820:	65bb      	str	r3, [r7, #88]	; 0x58

                            /* Save the number of directory entries the LFN has.  This will be
                               used later when updating the 8.3 portion of the LFN.  */
                            destination_ptr -> fx_dir_entry_long_name_shorted =  number_of_lfns;
 8012822:	693b      	ldr	r3, [r7, #16]
 8012824:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012826:	619a      	str	r2, [r3, #24]

                            /* Setup short name pointer.  */
                            short_name_ptr =  destination_ptr -> fx_dir_entry_name;
 8012828:	693b      	ldr	r3, [r7, #16]
 801282a:	681b      	ldr	r3, [r3, #0]
 801282c:	63fb      	str	r3, [r7, #60]	; 0x3c
                        }
                    }

                    /* Determine if the character is NULL.  */
                    if ((read_ptr[i] == FX_NULL) || (read_ptr[i] == (UCHAR)0xFF))
 801282e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012830:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012832:	4413      	add	r3, r2
 8012834:	781b      	ldrb	r3, [r3, #0]
 8012836:	2b00      	cmp	r3, #0
 8012838:	d02e      	beq.n	8012898 <_fx_directory_entry_read+0x364>
 801283a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801283c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801283e:	4413      	add	r3, r2
 8012840:	781b      	ldrb	r3, [r3, #0]
 8012842:	2bff      	cmp	r3, #255	; 0xff
 8012844:	d028      	beq.n	8012898 <_fx_directory_entry_read+0x364>
                    {
                        continue;
                    }

                    /* Determine if the name is too big.  */
                    if ((card * 13 + j) >= (FX_MAX_LONG_NAME_LEN - 1))
 8012846:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012848:	4613      	mov	r3, r2
 801284a:	005b      	lsls	r3, r3, #1
 801284c:	4413      	add	r3, r2
 801284e:	009b      	lsls	r3, r3, #2
 8012850:	441a      	add	r2, r3
 8012852:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012854:	4413      	add	r3, r2
 8012856:	2bfe      	cmp	r3, #254	; 0xfe
 8012858:	d908      	bls.n	801286c <_fx_directory_entry_read+0x338>
                    {

                        /* Name is actually too big, shorten it.  */
                        get_short_name =  1;
 801285a:	2301      	movs	r3, #1
 801285c:	65bb      	str	r3, [r7, #88]	; 0x58

                        /* Save the number of directory entries the LFN has.  This will be
                           used later when updating the 8.3 portion of the LFN.  */
                        destination_ptr -> fx_dir_entry_long_name_shorted =  number_of_lfns;
 801285e:	693b      	ldr	r3, [r7, #16]
 8012860:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012862:	619a      	str	r2, [r3, #24]

                        /* Also reposition the short name pointer.  */
                        short_name_ptr =  destination_ptr -> fx_dir_entry_name;
 8012864:	693b      	ldr	r3, [r7, #16]
 8012866:	681b      	ldr	r3, [r3, #0]
 8012868:	63fb      	str	r3, [r7, #60]	; 0x3c

                        break;
 801286a:	e01c      	b.n	80128a6 <_fx_directory_entry_read+0x372>
                    }

                    /* Each entry contains 13 unicode and first byte ASCII, second byte is extended. */
                    destination_ptr -> fx_dir_entry_name[13 * card + j] = (CHAR)read_ptr[i];
 801286c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801286e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012870:	18d1      	adds	r1, r2, r3
 8012872:	693b      	ldr	r3, [r7, #16]
 8012874:	6818      	ldr	r0, [r3, #0]
 8012876:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012878:	4613      	mov	r3, r2
 801287a:	005b      	lsls	r3, r3, #1
 801287c:	4413      	add	r3, r2
 801287e:	009b      	lsls	r3, r3, #2
 8012880:	441a      	add	r2, r3
 8012882:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012884:	4413      	add	r3, r2
 8012886:	4403      	add	r3, r0
 8012888:	780a      	ldrb	r2, [r1, #0]
 801288a:	701a      	strb	r2, [r3, #0]

                    j++;
 801288c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801288e:	3301      	adds	r3, #1
 8012890:	663b      	str	r3, [r7, #96]	; 0x60
 8012892:	e002      	b.n	801289a <_fx_directory_entry_read+0x366>
                        continue;
 8012894:	bf00      	nop
 8012896:	e000      	b.n	801289a <_fx_directory_entry_read+0x366>
                        continue;
 8012898:	bf00      	nop
                for (i = 1, j = 0; i < FX_DIR_ENTRY_SIZE; i += 2)
 801289a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801289c:	3302      	adds	r3, #2
 801289e:	667b      	str	r3, [r7, #100]	; 0x64
 80128a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80128a2:	2b1f      	cmp	r3, #31
 80128a4:	d99b      	bls.n	80127de <_fx_directory_entry_read+0x2aa>
                }
            }

            /* Determine if a new sector needs to be read.  */
            if (byte_offset + FX_DIR_ENTRY_SIZE >= media_ptr -> fx_media_bytes_per_sector)
 80128a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80128a8:	f103 0220 	add.w	r2, r3, #32
 80128ac:	69fb      	ldr	r3, [r7, #28]
 80128ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80128b0:	429a      	cmp	r2, r3
 80128b2:	d365      	bcc.n	8012980 <_fx_directory_entry_read+0x44c>
            {

                /* Determine if a sub-directory or FAT32 root directory is specified.  */
                if ((source_dir) || (media_ptr -> fx_media_32_bit_FAT))
 80128b4:	69bb      	ldr	r3, [r7, #24]
 80128b6:	2b00      	cmp	r3, #0
 80128b8:	d103      	bne.n	80128c2 <_fx_directory_entry_read+0x38e>
 80128ba:	69fb      	ldr	r3, [r7, #28]
 80128bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80128be:	2b00      	cmp	r3, #0
 80128c0:	d038      	beq.n	8012934 <_fx_directory_entry_read+0x400>
                {

                    /* Determine the next sector of the directory entry.  */
                    if (relative_sector < (media_ptr -> fx_media_sectors_per_cluster - 1))
 80128c2:	69fb      	ldr	r3, [r7, #28]
 80128c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80128c6:	3b01      	subs	r3, #1
 80128c8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80128ca:	429a      	cmp	r2, r3
 80128cc:	d206      	bcs.n	80128dc <_fx_directory_entry_read+0x3a8>
                    {

                        /* More sectors in this cluster.  */

                        /* Simply increment the logical sector.  */
                        logical_sector++;
 80128ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80128d0:	3301      	adds	r3, #1
 80128d2:	64bb      	str	r3, [r7, #72]	; 0x48

                        /* Increment the relative sector.  */
                        relative_sector++;
 80128d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80128d6:	3301      	adds	r3, #1
 80128d8:	64fb      	str	r3, [r7, #76]	; 0x4c
                    if (relative_sector < (media_ptr -> fx_media_sectors_per_cluster - 1))
 80128da:	e038      	b.n	801294e <_fx_directory_entry_read+0x41a>
                    {

                        /* We need to move to the next cluster.  */

                        /* Pickup the next cluster.  */
                        status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &next_cluster);
 80128dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80128e0:	461a      	mov	r2, r3
 80128e2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80128e4:	69f8      	ldr	r0, [r7, #28]
 80128e6:	f006 ff3b 	bl	8019760 <_fx_utility_FAT_entry_read>
 80128ea:	6378      	str	r0, [r7, #52]	; 0x34

                        /* Check for I/O error.  */
                        if (status != FX_SUCCESS)
 80128ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80128ee:	2b00      	cmp	r3, #0
 80128f0:	d001      	beq.n	80128f6 <_fx_directory_entry_read+0x3c2>
                        {

                            /* Return error code.  */
                            return(status);
 80128f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80128f4:	e19f      	b.n	8012c36 <_fx_directory_entry_read+0x702>
                        }

                        /* Copy next cluster to the current cluster.  */
                        cluster =  next_cluster;
 80128f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128f8:	657b      	str	r3, [r7, #84]	; 0x54

                        /* Check the value of the new cluster - it must be a valid cluster number
                           or something is really wrong!  */
                        if ((cluster < FX_FAT_ENTRY_START) || (cluster >= media_ptr -> fx_media_fat_reserved))
 80128fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80128fc:	2b01      	cmp	r3, #1
 80128fe:	d907      	bls.n	8012910 <_fx_directory_entry_read+0x3dc>
 8012900:	69fb      	ldr	r3, [r7, #28]
 8012902:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8012906:	f8d3 34a8 	ldr.w	r3, [r3, #1192]	; 0x4a8
 801290a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801290c:	429a      	cmp	r2, r3
 801290e:	d301      	bcc.n	8012914 <_fx_directory_entry_read+0x3e0>
                        {

                            /* Send error message back to caller.  */
                            return(FX_FILE_CORRUPT);
 8012910:	2308      	movs	r3, #8
 8012912:	e190      	b.n	8012c36 <_fx_directory_entry_read+0x702>
                        }

                        /* Now increment the relative cluster.  */
                        relative_cluster++;
 8012914:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012916:	3301      	adds	r3, #1
 8012918:	653b      	str	r3, [r7, #80]	; 0x50

                        /* Setup the relative sector (this is zero for subsequent cluster.  */
                        relative_sector =  0;
 801291a:	2300      	movs	r3, #0
 801291c:	64fb      	str	r3, [r7, #76]	; 0x4c

                        /* Calculate the next logical sector.  */
                        logical_sector =   ((ULONG)media_ptr -> fx_media_data_sector_start) +
 801291e:	69fb      	ldr	r3, [r7, #28]
 8012920:	6d1a      	ldr	r2, [r3, #80]	; 0x50
                            (((ULONG)cluster - FX_FAT_ENTRY_START) *
 8012922:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012924:	3b02      	subs	r3, #2
                             ((ULONG)media_ptr -> fx_media_sectors_per_cluster));
 8012926:	69f9      	ldr	r1, [r7, #28]
 8012928:	6d49      	ldr	r1, [r1, #84]	; 0x54
                            (((ULONG)cluster - FX_FAT_ENTRY_START) *
 801292a:	fb01 f303 	mul.w	r3, r1, r3
                        logical_sector =   ((ULONG)media_ptr -> fx_media_data_sector_start) +
 801292e:	4413      	add	r3, r2
 8012930:	64bb      	str	r3, [r7, #72]	; 0x48
                    if (relative_sector < (media_ptr -> fx_media_sectors_per_cluster - 1))
 8012932:	e00c      	b.n	801294e <_fx_directory_entry_read+0x41a>
                {

                    /* Non-FAT 32 root directory.  */

                    /* Advance to the next sector.  */
                    logical_sector++;
 8012934:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012936:	3301      	adds	r3, #1
 8012938:	64bb      	str	r3, [r7, #72]	; 0x48

                    /* Determine if the logical sector is valid.  */
                    if (logical_sector >= (ULONG)(media_ptr -> fx_media_root_sector_start + media_ptr -> fx_media_root_sectors))
 801293a:	69fb      	ldr	r3, [r7, #28]
 801293c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801293e:	69fb      	ldr	r3, [r7, #28]
 8012940:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012942:	4413      	add	r3, r2
 8012944:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012946:	429a      	cmp	r2, r3
 8012948:	d301      	bcc.n	801294e <_fx_directory_entry_read+0x41a>
                    {

                        /* Trying to read past root directory - send error message back to caller.  */
                        return(FX_FILE_CORRUPT);
 801294a:	2308      	movs	r3, #8
 801294c:	e173      	b.n	8012c36 <_fx_directory_entry_read+0x702>
                    }
                }

                /* Read the new sector.  */
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 801294e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012950:	2200      	movs	r2, #0
 8012952:	469a      	mov	sl, r3
 8012954:	4693      	mov	fp, r2
                                                          media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_DIRECTORY_SECTOR);
 8012956:	69fb      	ldr	r3, [r7, #28]
 8012958:	689b      	ldr	r3, [r3, #8]
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 801295a:	2203      	movs	r2, #3
 801295c:	9202      	str	r2, [sp, #8]
 801295e:	2201      	movs	r2, #1
 8012960:	9201      	str	r2, [sp, #4]
 8012962:	9300      	str	r3, [sp, #0]
 8012964:	4652      	mov	r2, sl
 8012966:	465b      	mov	r3, fp
 8012968:	69f8      	ldr	r0, [r7, #28]
 801296a:	f008 fb07 	bl	801af7c <_fx_utility_logical_sector_read>
 801296e:	6378      	str	r0, [r7, #52]	; 0x34

                /* Check I/O status.  */
                if (status != FX_SUCCESS)
 8012970:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012972:	2b00      	cmp	r3, #0
 8012974:	d001      	beq.n	801297a <_fx_directory_entry_read+0x446>
                {
                    return(status);
 8012976:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012978:	e15d      	b.n	8012c36 <_fx_directory_entry_read+0x702>
                }

                /* Set the byte offset to 0 for new sector.  */
                byte_offset = 0;
 801297a:	2300      	movs	r3, #0
 801297c:	647b      	str	r3, [r7, #68]	; 0x44
 801297e:	e002      	b.n	8012986 <_fx_directory_entry_read+0x452>
            }
            else
            {

                /* Calculate the new byte offset.  */
                byte_offset += FX_DIR_ENTRY_SIZE;
 8012980:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012982:	3320      	adds	r3, #32
 8012984:	647b      	str	r3, [r7, #68]	; 0x44
            }

            /* Calculate the next read pointer.  */
            read_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer + (UINT) byte_offset;
 8012986:	69fb      	ldr	r3, [r7, #28]
 8012988:	689a      	ldr	r2, [r3, #8]
 801298a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801298c:	4413      	add	r3, r2
 801298e:	643b      	str	r3, [r7, #64]	; 0x40

            /* Move to the next entry.  */
            entry++;
 8012990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012992:	3301      	adds	r3, #1
 8012994:	63bb      	str	r3, [r7, #56]	; 0x38
        } while (card > 0);
 8012996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012998:	2b00      	cmp	r3, #0
 801299a:	f47f af12 	bne.w	80127c2 <_fx_directory_entry_read+0x28e>

        /* Set flag indicating long file name is present.  */
        destination_ptr -> fx_dir_entry_long_name_present = 1;
 801299e:	693b      	ldr	r3, [r7, #16]
 80129a0:	2201      	movs	r2, #1
 80129a2:	615a      	str	r2, [r3, #20]
 80129a4:	e001      	b.n	80129aa <_fx_directory_entry_read+0x476>
    }
    else
    {
        /* No long file name is present.  */
        get_short_name = 1;
 80129a6:	2301      	movs	r3, #1
 80129a8:	65bb      	str	r3, [r7, #88]	; 0x58
    }

    /* Determine if we need to clear the long name flag.  */
    if (get_short_name == 1)
 80129aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80129ac:	2b01      	cmp	r3, #1
 80129ae:	d102      	bne.n	80129b6 <_fx_directory_entry_read+0x482>
    {

        /* Clear the long name flag.  */
        destination_ptr -> fx_dir_entry_long_name_present =  0;
 80129b0:	693b      	ldr	r3, [r7, #16]
 80129b2:	2200      	movs	r2, #0
 80129b4:	615a      	str	r2, [r3, #20]
    }

    /* Pickup the short file name.  */
    short_name_ptr[0] =  0;
 80129b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80129b8:	2200      	movs	r2, #0
 80129ba:	701a      	strb	r2, [r3, #0]
    dotflag =  0;
 80129bc:	2300      	movs	r3, #0
 80129be:	65fb      	str	r3, [r7, #92]	; 0x5c
    for (i = 0, j = 0; i < (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE); i++)
 80129c0:	2300      	movs	r3, #0
 80129c2:	667b      	str	r3, [r7, #100]	; 0x64
 80129c4:	2300      	movs	r3, #0
 80129c6:	663b      	str	r3, [r7, #96]	; 0x60
 80129c8:	e03d      	b.n	8012a46 <_fx_directory_entry_read+0x512>
    {

        /* Check for a NULL.  */
        if ((CHAR)read_ptr[i] == 0)
 80129ca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80129cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80129ce:	4413      	add	r3, r2
 80129d0:	781b      	ldrb	r3, [r3, #0]
 80129d2:	2b00      	cmp	r3, #0
 80129d4:	d03b      	beq.n	8012a4e <_fx_directory_entry_read+0x51a>
            break;
        }

        /* Check for a dot.  This happens for the first two directory entries, no
           extra dot is needed.  */
        if ((CHAR)read_ptr[i] == '.')
 80129d6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80129d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80129da:	4413      	add	r3, r2
 80129dc:	781b      	ldrb	r3, [r3, #0]
 80129de:	2b2e      	cmp	r3, #46	; 0x2e
 80129e0:	d101      	bne.n	80129e6 <_fx_directory_entry_read+0x4b2>
        {
            dotflag =  2;
 80129e2:	2302      	movs	r3, #2
 80129e4:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        /* Check for a space.  */
        if ((CHAR)read_ptr[i] == ' ')
 80129e6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80129e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80129ea:	4413      	add	r3, r2
 80129ec:	781b      	ldrb	r3, [r3, #0]
 80129ee:	2b20      	cmp	r3, #32
 80129f0:	d105      	bne.n	80129fe <_fx_directory_entry_read+0x4ca>
        {
            /* Put a dot if a character comes after space.  */
            if (dotflag == 0)
 80129f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80129f4:	2b00      	cmp	r3, #0
 80129f6:	d122      	bne.n	8012a3e <_fx_directory_entry_read+0x50a>
            {
                dotflag =  1;
 80129f8:	2301      	movs	r3, #1
 80129fa:	65fb      	str	r3, [r7, #92]	; 0x5c
            }
            continue;
 80129fc:	e01f      	b.n	8012a3e <_fx_directory_entry_read+0x50a>
        }

        /* Check for the main short file name size.  */
        if (i == FX_DIR_NAME_SIZE)
 80129fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012a00:	2b08      	cmp	r3, #8
 8012a02:	d104      	bne.n	8012a0e <_fx_directory_entry_read+0x4da>
        {
            /* Check to see if we need to insert a dot.  */
            if (dotflag == 0)
 8012a04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012a06:	2b00      	cmp	r3, #0
 8012a08:	d101      	bne.n	8012a0e <_fx_directory_entry_read+0x4da>
            {
                dotflag =  1;
 8012a0a:	2301      	movs	r3, #1
 8012a0c:	65fb      	str	r3, [r7, #92]	; 0x5c
            }
        }

        /* Check to see if we need to add a dot.  */
        if (dotflag == 1)
 8012a0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012a10:	2b01      	cmp	r3, #1
 8012a12:	d108      	bne.n	8012a26 <_fx_directory_entry_read+0x4f2>
        {
            /* Add dot to short file name.  */
            short_name_ptr[j++] =  '.';
 8012a14:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012a16:	1c5a      	adds	r2, r3, #1
 8012a18:	663a      	str	r2, [r7, #96]	; 0x60
 8012a1a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012a1c:	4413      	add	r3, r2
 8012a1e:	222e      	movs	r2, #46	; 0x2e
 8012a20:	701a      	strb	r2, [r3, #0]
            dotflag =  2;    /* no more dot for spaces */
 8012a22:	2302      	movs	r3, #2
 8012a24:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        /* Copy a character.  */
        short_name_ptr[j] =  (CHAR)read_ptr[i];
 8012a26:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012a28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012a2a:	441a      	add	r2, r3
 8012a2c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012a2e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012a30:	440b      	add	r3, r1
 8012a32:	7812      	ldrb	r2, [r2, #0]
 8012a34:	701a      	strb	r2, [r3, #0]

        /* Increment size.  */
        j++;
 8012a36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012a38:	3301      	adds	r3, #1
 8012a3a:	663b      	str	r3, [r7, #96]	; 0x60
 8012a3c:	e000      	b.n	8012a40 <_fx_directory_entry_read+0x50c>
            continue;
 8012a3e:	bf00      	nop
    for (i = 0, j = 0; i < (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE); i++)
 8012a40:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012a42:	3301      	adds	r3, #1
 8012a44:	667b      	str	r3, [r7, #100]	; 0x64
 8012a46:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012a48:	2b0a      	cmp	r3, #10
 8012a4a:	d9be      	bls.n	80129ca <_fx_directory_entry_read+0x496>
 8012a4c:	e000      	b.n	8012a50 <_fx_directory_entry_read+0x51c>
            break;
 8012a4e:	bf00      	nop
    }

    /* Determine if a long file name is present and its associated short file
       name is actually free.  */
    if ((destination_ptr -> fx_dir_entry_long_name_present) && (((UCHAR)short_name_ptr[0]) == (UCHAR)FX_DIR_ENTRY_FREE))
 8012a50:	693b      	ldr	r3, [r7, #16]
 8012a52:	695b      	ldr	r3, [r3, #20]
 8012a54:	2b00      	cmp	r3, #0
 8012a56:	d00a      	beq.n	8012a6e <_fx_directory_entry_read+0x53a>
 8012a58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012a5a:	781b      	ldrb	r3, [r3, #0]
 8012a5c:	2be5      	cmp	r3, #229	; 0xe5
 8012a5e:	d106      	bne.n	8012a6e <_fx_directory_entry_read+0x53a>
    {

        /* Yes, the short file name is really free even though long file name entries directly precede it.
           In this case, simply place the free directory marker at the front of the long file name.  */
        destination_ptr -> fx_dir_entry_name[0] =  (CHAR)FX_DIR_ENTRY_FREE;
 8012a60:	693b      	ldr	r3, [r7, #16]
 8012a62:	681b      	ldr	r3, [r3, #0]
 8012a64:	22e5      	movs	r2, #229	; 0xe5
 8012a66:	701a      	strb	r2, [r3, #0]
        short_name_ptr[0] =  (CHAR)0;
 8012a68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012a6a:	2200      	movs	r2, #0
 8012a6c:	701a      	strb	r2, [r3, #0]
    }

    /* Determine if the short name pointer is NULL while the read pointer is
       non-NULL.  */
    if ((short_name_ptr[0] == 0) && (read_ptr[0] == ' '))
 8012a6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012a70:	781b      	ldrb	r3, [r3, #0]
 8012a72:	2b00      	cmp	r3, #0
 8012a74:	d114      	bne.n	8012aa0 <_fx_directory_entry_read+0x56c>
 8012a76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012a78:	781b      	ldrb	r3, [r3, #0]
 8012a7a:	2b20      	cmp	r3, #32
 8012a7c:	d110      	bne.n	8012aa0 <_fx_directory_entry_read+0x56c>
    {

        /* This condition can occur with an all blank volume name.  Simply
           copy the volume name to the short name in this case.  */
        for (j = 0; j < (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE); j++)
 8012a7e:	2300      	movs	r3, #0
 8012a80:	663b      	str	r3, [r7, #96]	; 0x60
 8012a82:	e00a      	b.n	8012a9a <_fx_directory_entry_read+0x566>
        {

            /* Copy a byte of the volume name.  */
            short_name_ptr[j] =  (CHAR)read_ptr[j];
 8012a84:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012a86:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012a88:	441a      	add	r2, r3
 8012a8a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012a8c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012a8e:	440b      	add	r3, r1
 8012a90:	7812      	ldrb	r2, [r2, #0]
 8012a92:	701a      	strb	r2, [r3, #0]
        for (j = 0; j < (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE); j++)
 8012a94:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012a96:	3301      	adds	r3, #1
 8012a98:	663b      	str	r3, [r7, #96]	; 0x60
 8012a9a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012a9c:	2b0a      	cmp	r3, #10
 8012a9e:	d9f1      	bls.n	8012a84 <_fx_directory_entry_read+0x550>
        }
    }

    /* Set end of string to null.  */
    short_name_ptr[j] = 0;
 8012aa0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012aa2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012aa4:	4413      	add	r3, r2
 8012aa6:	2200      	movs	r2, #0
 8012aa8:	701a      	strb	r2, [r3, #0]

    /* Load up the destination directory entry.  */
    read_ptr += (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE);
 8012aaa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012aac:	330b      	adds	r3, #11
 8012aae:	643b      	str	r3, [r7, #64]	; 0x40

    /* Copy the attribute into the destination.  */
    destination_ptr -> fx_dir_entry_attributes =  *read_ptr++;
 8012ab0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012ab2:	1c5a      	adds	r2, r3, #1
 8012ab4:	643a      	str	r2, [r7, #64]	; 0x40
 8012ab6:	781a      	ldrb	r2, [r3, #0]
 8012ab8:	693b      	ldr	r3, [r7, #16]
 8012aba:	771a      	strb	r2, [r3, #28]

    /* Pickup the reserved byte.  */
    destination_ptr -> fx_dir_entry_reserved =  *read_ptr++;
 8012abc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012abe:	1c5a      	adds	r2, r3, #1
 8012ac0:	643a      	str	r2, [r7, #64]	; 0x40
 8012ac2:	781a      	ldrb	r2, [r3, #0]
 8012ac4:	693b      	ldr	r3, [r7, #16]
 8012ac6:	775a      	strb	r2, [r3, #29]
         BIT3 - set if 8.3 is all in lower case and no extended filename.
         BIT4 - set for file, clear for directory entry if no extended filename.

       This is true for all NT systems. Prior to NT follows MSDOS FAT documentation and
       is set to 0x00, all bits cleared. Therefore if BIT3 is set force lowercase.  */
    if ((get_short_name) && (destination_ptr -> fx_dir_entry_reserved & 0x08))
 8012ac8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012aca:	2b00      	cmp	r3, #0
 8012acc:	d02a      	beq.n	8012b24 <_fx_directory_entry_read+0x5f0>
 8012ace:	693b      	ldr	r3, [r7, #16]
 8012ad0:	7f5b      	ldrb	r3, [r3, #29]
 8012ad2:	f003 0308 	and.w	r3, r3, #8
 8012ad6:	2b00      	cmp	r3, #0
 8012ad8:	d024      	beq.n	8012b24 <_fx_directory_entry_read+0x5f0>
    {

        /* Microsoft undocumented NT file name feature... convert short name to lower
           case.  */
        for (j = 0; j <= (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE) && (short_name_ptr[j] != 0x00); j++)
 8012ada:	2300      	movs	r3, #0
 8012adc:	663b      	str	r3, [r7, #96]	; 0x60
 8012ade:	e018      	b.n	8012b12 <_fx_directory_entry_read+0x5de>
        {

            /* Determine if an upper case character is present.  */
            if ((short_name_ptr[j] >= 'A') && (short_name_ptr[j] <= 'Z'))
 8012ae0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012ae2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012ae4:	4413      	add	r3, r2
 8012ae6:	781b      	ldrb	r3, [r3, #0]
 8012ae8:	2b40      	cmp	r3, #64	; 0x40
 8012aea:	d90f      	bls.n	8012b0c <_fx_directory_entry_read+0x5d8>
 8012aec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012aee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012af0:	4413      	add	r3, r2
 8012af2:	781b      	ldrb	r3, [r3, #0]
 8012af4:	2b5a      	cmp	r3, #90	; 0x5a
 8012af6:	d809      	bhi.n	8012b0c <_fx_directory_entry_read+0x5d8>
            {

                /* Yes, an upper case character is present. Force it to lower case.  */
                short_name_ptr[j] =  (CHAR)(short_name_ptr[j] + 32);
 8012af8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012afa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012afc:	4413      	add	r3, r2
 8012afe:	781a      	ldrb	r2, [r3, #0]
 8012b00:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012b02:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012b04:	440b      	add	r3, r1
 8012b06:	3220      	adds	r2, #32
 8012b08:	b2d2      	uxtb	r2, r2
 8012b0a:	701a      	strb	r2, [r3, #0]
        for (j = 0; j <= (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE) && (short_name_ptr[j] != 0x00); j++)
 8012b0c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012b0e:	3301      	adds	r3, #1
 8012b10:	663b      	str	r3, [r7, #96]	; 0x60
 8012b12:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012b14:	2b0b      	cmp	r3, #11
 8012b16:	d805      	bhi.n	8012b24 <_fx_directory_entry_read+0x5f0>
 8012b18:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012b1a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012b1c:	4413      	add	r3, r2
 8012b1e:	781b      	ldrb	r3, [r3, #0]
 8012b20:	2b00      	cmp	r3, #0
 8012b22:	d1dd      	bne.n	8012ae0 <_fx_directory_entry_read+0x5ac>
            }
        }
    }

    /* Pickup the created time in milliseconds.  */
    destination_ptr -> fx_dir_entry_created_time_ms =  *read_ptr++;
 8012b24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012b26:	1c5a      	adds	r2, r3, #1
 8012b28:	643a      	str	r2, [r7, #64]	; 0x40
 8012b2a:	781a      	ldrb	r2, [r3, #0]
 8012b2c:	693b      	ldr	r3, [r7, #16]
 8012b2e:	779a      	strb	r2, [r3, #30]

    /* Pickup the created time.  */
    destination_ptr -> fx_dir_entry_created_time =  _fx_utility_16_unsigned_read(read_ptr);
 8012b30:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8012b32:	f006 fdaf 	bl	8019694 <_fx_utility_16_unsigned_read>
 8012b36:	4602      	mov	r2, r0
 8012b38:	693b      	ldr	r3, [r7, #16]
 8012b3a:	621a      	str	r2, [r3, #32]
    read_ptr =  read_ptr + 2;  /* Always 2 bytes */
 8012b3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012b3e:	3302      	adds	r3, #2
 8012b40:	643b      	str	r3, [r7, #64]	; 0x40

    /* Pickup the created date.  */
    destination_ptr -> fx_dir_entry_created_date =  _fx_utility_16_unsigned_read(read_ptr);
 8012b42:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8012b44:	f006 fda6 	bl	8019694 <_fx_utility_16_unsigned_read>
 8012b48:	4602      	mov	r2, r0
 8012b4a:	693b      	ldr	r3, [r7, #16]
 8012b4c:	625a      	str	r2, [r3, #36]	; 0x24
    read_ptr =  read_ptr + 2;  /* Always 2 bytes */
 8012b4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012b50:	3302      	adds	r3, #2
 8012b52:	643b      	str	r3, [r7, #64]	; 0x40

    /* Pickup the last accessed date.  */
    destination_ptr -> fx_dir_entry_last_accessed_date =  _fx_utility_16_unsigned_read(read_ptr);
 8012b54:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8012b56:	f006 fd9d 	bl	8019694 <_fx_utility_16_unsigned_read>
 8012b5a:	4602      	mov	r2, r0
 8012b5c:	693b      	ldr	r3, [r7, #16]
 8012b5e:	629a      	str	r2, [r3, #40]	; 0x28
    read_ptr =  read_ptr + 2;  /* Always 2 bytes */
 8012b60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012b62:	3302      	adds	r3, #2
 8012b64:	643b      	str	r3, [r7, #64]	; 0x40

    /* read the upper 2 bytes of starting cluster - required only for 32 bit FAT */
    if (media_ptr -> fx_media_32_bit_FAT)
 8012b66:	69fb      	ldr	r3, [r7, #28]
 8012b68:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012b6a:	2b00      	cmp	r3, #0
 8012b6c:	d00b      	beq.n	8012b86 <_fx_directory_entry_read+0x652>
    {

        /* FAT32 only.  */
        destination_ptr -> fx_dir_entry_cluster =  _fx_utility_16_unsigned_read(read_ptr);
 8012b6e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8012b70:	f006 fd90 	bl	8019694 <_fx_utility_16_unsigned_read>
 8012b74:	4602      	mov	r2, r0
 8012b76:	693b      	ldr	r3, [r7, #16]
 8012b78:	635a      	str	r2, [r3, #52]	; 0x34
        destination_ptr -> fx_dir_entry_cluster <<= 16;
 8012b7a:	693b      	ldr	r3, [r7, #16]
 8012b7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012b7e:	041a      	lsls	r2, r3, #16
 8012b80:	693b      	ldr	r3, [r7, #16]
 8012b82:	635a      	str	r2, [r3, #52]	; 0x34
 8012b84:	e002      	b.n	8012b8c <_fx_directory_entry_read+0x658>
    }
    else
    {
        /* Not required for non FAT32.  */
        destination_ptr -> fx_dir_entry_cluster =  0;
 8012b86:	693b      	ldr	r3, [r7, #16]
 8012b88:	2200      	movs	r2, #0
 8012b8a:	635a      	str	r2, [r3, #52]	; 0x34
    }

    /* Advance the read pointer.  */
    read_ptr =  read_ptr + 2;  /* Always 2 bytes */
 8012b8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012b8e:	3302      	adds	r3, #2
 8012b90:	643b      	str	r3, [r7, #64]	; 0x40

    /* Copy the time into the destination.  */
    destination_ptr -> fx_dir_entry_time =  _fx_utility_16_unsigned_read(read_ptr);
 8012b92:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8012b94:	f006 fd7e 	bl	8019694 <_fx_utility_16_unsigned_read>
 8012b98:	4602      	mov	r2, r0
 8012b9a:	693b      	ldr	r3, [r7, #16]
 8012b9c:	62da      	str	r2, [r3, #44]	; 0x2c
    read_ptr =  read_ptr + 2;  /* Always 2 bytes */
 8012b9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012ba0:	3302      	adds	r3, #2
 8012ba2:	643b      	str	r3, [r7, #64]	; 0x40

    /* Copy the date into the destination.  */
    destination_ptr -> fx_dir_entry_date =  _fx_utility_16_unsigned_read(read_ptr);
 8012ba4:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8012ba6:	f006 fd75 	bl	8019694 <_fx_utility_16_unsigned_read>
 8012baa:	4602      	mov	r2, r0
 8012bac:	693b      	ldr	r3, [r7, #16]
 8012bae:	631a      	str	r2, [r3, #48]	; 0x30
    read_ptr =  read_ptr + 2;  /* Always 2 bytes */
 8012bb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012bb2:	3302      	adds	r3, #2
 8012bb4:	643b      	str	r3, [r7, #64]	; 0x40

    /* Copy the starting cluster into the destination.  */
    destination_ptr -> fx_dir_entry_cluster +=  _fx_utility_16_unsigned_read(read_ptr);
 8012bb6:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8012bb8:	f006 fd6c 	bl	8019694 <_fx_utility_16_unsigned_read>
 8012bbc:	4602      	mov	r2, r0
 8012bbe:	693b      	ldr	r3, [r7, #16]
 8012bc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012bc2:	441a      	add	r2, r3
 8012bc4:	693b      	ldr	r3, [r7, #16]
 8012bc6:	635a      	str	r2, [r3, #52]	; 0x34
    read_ptr =  read_ptr + 2;  /* Always 2 bytes */
 8012bc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012bca:	3302      	adds	r3, #2
 8012bcc:	643b      	str	r3, [r7, #64]	; 0x40

    /* Copy the file size into the destination.  */
    destination_ptr -> fx_dir_entry_file_size =  _fx_utility_32_unsigned_read(read_ptr);
 8012bce:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8012bd0:	f006 fd88 	bl	80196e4 <_fx_utility_32_unsigned_read>
 8012bd4:	4603      	mov	r3, r0
 8012bd6:	2200      	movs	r2, #0
 8012bd8:	461c      	mov	r4, r3
 8012bda:	4615      	mov	r5, r2
 8012bdc:	693b      	ldr	r3, [r7, #16]
 8012bde:	e9c3 450e 	strd	r4, r5, [r3, #56]	; 0x38

    /* Clear the destination search specific fields.  */
    destination_ptr -> fx_dir_entry_last_search_cluster =           0;
 8012be2:	693b      	ldr	r3, [r7, #16]
 8012be4:	2200      	movs	r2, #0
 8012be6:	651a      	str	r2, [r3, #80]	; 0x50
    destination_ptr -> fx_dir_entry_last_search_relative_cluster =  0;
 8012be8:	693b      	ldr	r3, [r7, #16]
 8012bea:	2200      	movs	r2, #0
 8012bec:	655a      	str	r2, [r3, #84]	; 0x54
    destination_ptr -> fx_dir_entry_last_search_log_sector =        0;
 8012bee:	6939      	ldr	r1, [r7, #16]
 8012bf0:	f04f 0200 	mov.w	r2, #0
 8012bf4:	f04f 0300 	mov.w	r3, #0
 8012bf8:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
    destination_ptr -> fx_dir_entry_last_search_byte_offset =       0;
 8012bfc:	693b      	ldr	r3, [r7, #16]
 8012bfe:	2200      	movs	r2, #0
 8012c00:	661a      	str	r2, [r3, #96]	; 0x60

    /* Remember the entry number.  */
    destination_ptr -> fx_dir_entry_number =  entry;
 8012c02:	693b      	ldr	r3, [r7, #16]
 8012c04:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012c06:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Return entry number.  */
    *entry_ptr =  entry;
 8012c08:	697b      	ldr	r3, [r7, #20]
 8012c0a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012c0c:	601a      	str	r2, [r3, #0]

    /* Determine if we should remember the last cluster and relative cluster.  */
    if (source_dir)
 8012c0e:	69bb      	ldr	r3, [r7, #24]
 8012c10:	2b00      	cmp	r3, #0
 8012c12:	d00f      	beq.n	8012c34 <_fx_directory_entry_read+0x700>
    {

        /* Yes, remember the last cluster and relative cluster for a subsequent call
           to read a directory entry.  */
        source_dir -> fx_dir_entry_last_search_cluster =           cluster;
 8012c14:	69bb      	ldr	r3, [r7, #24]
 8012c16:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8012c18:	651a      	str	r2, [r3, #80]	; 0x50
        source_dir -> fx_dir_entry_last_search_relative_cluster =  relative_cluster;
 8012c1a:	69bb      	ldr	r3, [r7, #24]
 8012c1c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012c1e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Also remember several other items that are unique to the directory... just to verify that the
           search information can be used.  */
        source_dir -> fx_dir_entry_last_search_log_sector =        source_dir -> fx_dir_entry_log_sector;
 8012c20:	69bb      	ldr	r3, [r7, #24]
 8012c22:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8012c26:	69b9      	ldr	r1, [r7, #24]
 8012c28:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
        source_dir -> fx_dir_entry_last_search_byte_offset =       source_dir -> fx_dir_entry_byte_offset;
 8012c2c:	69bb      	ldr	r3, [r7, #24]
 8012c2e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8012c30:	69bb      	ldr	r3, [r7, #24]
 8012c32:	661a      	str	r2, [r3, #96]	; 0x60
        destination_ptr -> fx_dir_entry_type = FX_EXFAT_DIR_ENTRY_TYPE_FILE_DIRECTORY;
    }
#endif /* FX_ENABLE_EXFAT */

    /* Return success to the caller.  */
    return(FX_SUCCESS);
 8012c34:	2300      	movs	r3, #0
}
 8012c36:	4618      	mov	r0, r3
 8012c38:	3768      	adds	r7, #104	; 0x68
 8012c3a:	46bd      	mov	sp, r7
 8012c3c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08012c40 <_fx_directory_entry_write>:
/*  03-02-2021     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1.5  */
/*                                                                        */
/**************************************************************************/
UINT  _fx_directory_entry_write(FX_MEDIA *media_ptr, FX_DIR_ENTRY *entry_ptr)
{
 8012c40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8012c44:	b0a2      	sub	sp, #136	; 0x88
 8012c46:	af04      	add	r7, sp, #16
 8012c48:	6178      	str	r0, [r7, #20]
 8012c4a:	6139      	str	r1, [r7, #16]


#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of directory entry write requests.  */
    media_ptr -> fx_media_directory_entry_writes++;
 8012c4c:	697b      	ldr	r3, [r7, #20]
 8012c4e:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 8012c52:	1c5a      	adds	r2, r3, #1
 8012c54:	697b      	ldr	r3, [r7, #20]
 8012c56:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_DIR_ENTRY_WRITE, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

    /* Determine if this is entry is being deleted.  */
    if (((UCHAR)entry_ptr -> fx_dir_entry_name[0] == (UCHAR)FX_DIR_ENTRY_FREE) &&
 8012c5a:	693b      	ldr	r3, [r7, #16]
 8012c5c:	681b      	ldr	r3, [r3, #0]
 8012c5e:	781b      	ldrb	r3, [r3, #0]
 8012c60:	2be5      	cmp	r3, #229	; 0xe5
 8012c62:	d109      	bne.n	8012c78 <_fx_directory_entry_write+0x38>
        ((UCHAR)entry_ptr -> fx_dir_entry_short_name[0] == (UCHAR)FX_DIR_ENTRY_FREE))
 8012c64:	693b      	ldr	r3, [r7, #16]
 8012c66:	791b      	ldrb	r3, [r3, #4]
    if (((UCHAR)entry_ptr -> fx_dir_entry_name[0] == (UCHAR)FX_DIR_ENTRY_FREE) &&
 8012c68:	2be5      	cmp	r3, #229	; 0xe5
 8012c6a:	d105      	bne.n	8012c78 <_fx_directory_entry_write+0x38>
    {

        /* Yes, this is a request to delete the entry. Set the flag to remember this.  */
        delete_flag =  FX_TRUE;
 8012c6c:	2301      	movs	r3, #1
 8012c6e:	66bb      	str	r3, [r7, #104]	; 0x68

        /* Null the short file name.  */
        entry_ptr -> fx_dir_entry_short_name[0] =  0;
 8012c70:	693b      	ldr	r3, [r7, #16]
 8012c72:	2200      	movs	r2, #0
 8012c74:	711a      	strb	r2, [r3, #4]
 8012c76:	e001      	b.n	8012c7c <_fx_directory_entry_write+0x3c>
    }
    else
    {

        /* Not a deleted entry. Set the flag to false.  */
        delete_flag =  FX_FALSE;
 8012c78:	2300      	movs	r3, #0
 8012c7a:	66bb      	str	r3, [r7, #104]	; 0x68
    }

    /* Pickup the byte offset of the entry.  */
    byte_offset = entry_ptr -> fx_dir_entry_byte_offset;
 8012c7c:	693b      	ldr	r3, [r7, #16]
 8012c7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012c80:	637b      	str	r3, [r7, #52]	; 0x34

    /* Pickup the logical sector of the entry.  */
    logical_sector = (ULONG)entry_ptr -> fx_dir_entry_log_sector;
 8012c82:	693b      	ldr	r3, [r7, #16]
 8012c84:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8012c88:	4613      	mov	r3, r2
 8012c8a:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Figure out where what cluster we are in.  */
    if (logical_sector >= (ULONG)(media_ptr -> fx_media_data_sector_start))
 8012c8c:	697b      	ldr	r3, [r7, #20]
 8012c8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012c90:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012c92:	429a      	cmp	r2, r3
 8012c94:	d316      	bcc.n	8012cc4 <_fx_directory_entry_write+0x84>
    {

        /* Calculate the cluster that this logical sector is in.  */
        cluster =  (logical_sector - media_ptr -> fx_media_data_sector_start) / (media_ptr -> fx_media_sectors_per_cluster) + FX_FAT_ENTRY_START;
 8012c96:	697b      	ldr	r3, [r7, #20]
 8012c98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012c9a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012c9c:	1ad2      	subs	r2, r2, r3
 8012c9e:	697b      	ldr	r3, [r7, #20]
 8012ca0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012ca2:	fbb2 f3f3 	udiv	r3, r2, r3
 8012ca6:	3302      	adds	r3, #2
 8012ca8:	633b      	str	r3, [r7, #48]	; 0x30

        /* Calculate the relative cluster.  */
        relative_sector =  logical_sector -  (((ULONG)media_ptr -> fx_media_data_sector_start) +
 8012caa:	697b      	ldr	r3, [r7, #20]
 8012cac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
                                              (((ULONG)cluster - FX_FAT_ENTRY_START) *
 8012cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012cb0:	3b02      	subs	r3, #2
                                               ((ULONG)media_ptr -> fx_media_sectors_per_cluster)));
 8012cb2:	6979      	ldr	r1, [r7, #20]
 8012cb4:	6d49      	ldr	r1, [r1, #84]	; 0x54
                                              (((ULONG)cluster - FX_FAT_ENTRY_START) *
 8012cb6:	fb01 f303 	mul.w	r3, r1, r3
        relative_sector =  logical_sector -  (((ULONG)media_ptr -> fx_media_data_sector_start) +
 8012cba:	4413      	add	r3, r2
 8012cbc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012cbe:	1ad3      	subs	r3, r2, r3
 8012cc0:	63bb      	str	r3, [r7, #56]	; 0x38
 8012cc2:	e003      	b.n	8012ccc <_fx_directory_entry_write+0x8c>
    }
    else
    {

        /* Clear the cluster and the relative sector.  */
        cluster =  0;
 8012cc4:	2300      	movs	r3, #0
 8012cc6:	633b      	str	r3, [r7, #48]	; 0x30
        relative_sector =  0;
 8012cc8:	2300      	movs	r3, #0
 8012cca:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Read the logical directory sector.  */
    status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) entry_ptr -> fx_dir_entry_log_sector,
 8012ccc:	693b      	ldr	r3, [r7, #16]
 8012cce:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
                                              media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_DIRECTORY_SECTOR);
 8012cd2:	697b      	ldr	r3, [r7, #20]
 8012cd4:	689a      	ldr	r2, [r3, #8]
    status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) entry_ptr -> fx_dir_entry_log_sector,
 8012cd6:	2303      	movs	r3, #3
 8012cd8:	9302      	str	r3, [sp, #8]
 8012cda:	2301      	movs	r3, #1
 8012cdc:	9301      	str	r3, [sp, #4]
 8012cde:	9200      	str	r2, [sp, #0]
 8012ce0:	4602      	mov	r2, r0
 8012ce2:	460b      	mov	r3, r1
 8012ce4:	6978      	ldr	r0, [r7, #20]
 8012ce6:	f008 f949 	bl	801af7c <_fx_utility_logical_sector_read>
 8012cea:	62f8      	str	r0, [r7, #44]	; 0x2c

    /* Determine if an error occurred.  */
    if (status != FX_SUCCESS)
 8012cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012cee:	2b00      	cmp	r3, #0
 8012cf0:	d002      	beq.n	8012cf8 <_fx_directory_entry_write+0xb8>
    {

        /* Return the error status.  */
        return(status);
 8012cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012cf4:	f000 bdda 	b.w	80138ac <_fx_directory_entry_write+0xc6c>
    }

    /* Setup a pointer into the buffer.  */
    sector_base_ptr = (UCHAR *)media_ptr -> fx_media_memory_buffer;
 8012cf8:	697b      	ldr	r3, [r7, #20]
 8012cfa:	689b      	ldr	r3, [r3, #8]
 8012cfc:	673b      	str	r3, [r7, #112]	; 0x70
    work_ptr =  sector_base_ptr + (UINT)entry_ptr -> fx_dir_entry_byte_offset;
 8012cfe:	693b      	ldr	r3, [r7, #16]
 8012d00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012d02:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8012d04:	4413      	add	r3, r2
 8012d06:	677b      	str	r3, [r7, #116]	; 0x74
    changed_size = 0;
    changed_offset = entry_ptr -> fx_dir_entry_byte_offset;
#endif /* FX_ENABLE_FAULT_TOLERANT */

    /* Determine if a long file name is present.  */
    if (entry_ptr -> fx_dir_entry_long_name_present)
 8012d08:	693b      	ldr	r3, [r7, #16]
 8012d0a:	695b      	ldr	r3, [r3, #20]
 8012d0c:	2b00      	cmp	r3, #0
 8012d0e:	f000 83cc 	beq.w	80134aa <_fx_directory_entry_write+0x86a>
    {

        /* Yes, long name is present - prepare short name and write out this name.  */
        for (len = 0, i = 0, dotpos = 0, dotfound = 0; entry_ptr -> fx_dir_entry_name[len]; len++)
 8012d12:	2300      	movs	r3, #0
 8012d14:	653b      	str	r3, [r7, #80]	; 0x50
 8012d16:	2300      	movs	r3, #0
 8012d18:	667b      	str	r3, [r7, #100]	; 0x64
 8012d1a:	2300      	movs	r3, #0
 8012d1c:	64bb      	str	r3, [r7, #72]	; 0x48
 8012d1e:	2300      	movs	r3, #0
 8012d20:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012d22:	e02c      	b.n	8012d7e <_fx_directory_entry_write+0x13e>
        {

            /* Check for a dot.  */
            if (entry_ptr -> fx_dir_entry_name[len] == '.')
 8012d24:	693b      	ldr	r3, [r7, #16]
 8012d26:	681a      	ldr	r2, [r3, #0]
 8012d28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012d2a:	4413      	add	r3, r2
 8012d2c:	781b      	ldrb	r3, [r3, #0]
 8012d2e:	2b2e      	cmp	r3, #46	; 0x2e
 8012d30:	d108      	bne.n	8012d44 <_fx_directory_entry_write+0x104>
            {

                /* Check for leading dot. */
                if (len == 0)
 8012d32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012d34:	2b00      	cmp	r3, #0
 8012d36:	d01e      	beq.n	8012d76 <_fx_directory_entry_write+0x136>
                    continue;
                }

                /* Yes, a dot is present.  From this position the extension will
                   be written.  */
                dotfound = i;
 8012d38:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012d3a:	64fb      	str	r3, [r7, #76]	; 0x4c
                dotpos   = len + 1;
 8012d3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012d3e:	3301      	adds	r3, #1
 8012d40:	64bb      	str	r3, [r7, #72]	; 0x48
                continue;
 8012d42:	e019      	b.n	8012d78 <_fx_directory_entry_write+0x138>
            }

            /* Check for non-space and within the short file name length.  */
            if ((entry_ptr -> fx_dir_entry_name[len] != ' ') && (i < 8))
 8012d44:	693b      	ldr	r3, [r7, #16]
 8012d46:	681a      	ldr	r2, [r3, #0]
 8012d48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012d4a:	4413      	add	r3, r2
 8012d4c:	781b      	ldrb	r3, [r3, #0]
 8012d4e:	2b20      	cmp	r3, #32
 8012d50:	d012      	beq.n	8012d78 <_fx_directory_entry_write+0x138>
 8012d52:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012d54:	2b07      	cmp	r3, #7
 8012d56:	d80f      	bhi.n	8012d78 <_fx_directory_entry_write+0x138>
            {

                /* Copy characters into the short file name area.  */
                shortname[i] = entry_ptr -> fx_dir_entry_name[len];
 8012d58:	693b      	ldr	r3, [r7, #16]
 8012d5a:	681a      	ldr	r2, [r3, #0]
 8012d5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012d5e:	4413      	add	r3, r2
 8012d60:	7819      	ldrb	r1, [r3, #0]
 8012d62:	f107 021c 	add.w	r2, r7, #28
 8012d66:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012d68:	4413      	add	r3, r2
 8012d6a:	460a      	mov	r2, r1
 8012d6c:	701a      	strb	r2, [r3, #0]
                i++;
 8012d6e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012d70:	3301      	adds	r3, #1
 8012d72:	667b      	str	r3, [r7, #100]	; 0x64
 8012d74:	e000      	b.n	8012d78 <_fx_directory_entry_write+0x138>
                    continue;
 8012d76:	bf00      	nop
        for (len = 0, i = 0, dotpos = 0, dotfound = 0; entry_ptr -> fx_dir_entry_name[len]; len++)
 8012d78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012d7a:	3301      	adds	r3, #1
 8012d7c:	653b      	str	r3, [r7, #80]	; 0x50
 8012d7e:	693b      	ldr	r3, [r7, #16]
 8012d80:	681a      	ldr	r2, [r3, #0]
 8012d82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012d84:	4413      	add	r3, r2
 8012d86:	781b      	ldrb	r3, [r3, #0]
 8012d88:	2b00      	cmp	r3, #0
 8012d8a:	d1cb      	bne.n	8012d24 <_fx_directory_entry_write+0xe4>
            }
        }

        /* Fill remaining short file name with spaces.  */
        for (j = i; j < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; j++)
 8012d8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012d8e:	663b      	str	r3, [r7, #96]	; 0x60
 8012d90:	e008      	b.n	8012da4 <_fx_directory_entry_write+0x164>
        {
            shortname[j] =  ' ';
 8012d92:	f107 021c 	add.w	r2, r7, #28
 8012d96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012d98:	4413      	add	r3, r2
 8012d9a:	2220      	movs	r2, #32
 8012d9c:	701a      	strb	r2, [r3, #0]
        for (j = i; j < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; j++)
 8012d9e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012da0:	3301      	adds	r3, #1
 8012da2:	663b      	str	r3, [r7, #96]	; 0x60
 8012da4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012da6:	2b0a      	cmp	r3, #10
 8012da8:	d9f3      	bls.n	8012d92 <_fx_directory_entry_write+0x152>
        }

        /* Determine if a dot was encountered.  */
        if (dotpos)
 8012daa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012dac:	2b00      	cmp	r3, #0
 8012dae:	d03e      	beq.n	8012e2e <_fx_directory_entry_write+0x1ee>
        {

            /* Process relative to the dot position.  */
            if (entry_ptr -> fx_dir_entry_name[dotpos])
 8012db0:	693b      	ldr	r3, [r7, #16]
 8012db2:	681a      	ldr	r2, [r3, #0]
 8012db4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012db6:	4413      	add	r3, r2
 8012db8:	781b      	ldrb	r3, [r3, #0]
 8012dba:	2b00      	cmp	r3, #0
 8012dbc:	d008      	beq.n	8012dd0 <_fx_directory_entry_write+0x190>
            {
                shortname[8] = entry_ptr -> fx_dir_entry_name[dotpos++];
 8012dbe:	693b      	ldr	r3, [r7, #16]
 8012dc0:	681a      	ldr	r2, [r3, #0]
 8012dc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012dc4:	1c59      	adds	r1, r3, #1
 8012dc6:	64b9      	str	r1, [r7, #72]	; 0x48
 8012dc8:	4413      	add	r3, r2
 8012dca:	781b      	ldrb	r3, [r3, #0]
 8012dcc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            }
            if (entry_ptr -> fx_dir_entry_name[dotpos])
 8012dd0:	693b      	ldr	r3, [r7, #16]
 8012dd2:	681a      	ldr	r2, [r3, #0]
 8012dd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012dd6:	4413      	add	r3, r2
 8012dd8:	781b      	ldrb	r3, [r3, #0]
 8012dda:	2b00      	cmp	r3, #0
 8012ddc:	d008      	beq.n	8012df0 <_fx_directory_entry_write+0x1b0>
            {
                shortname[9] = entry_ptr -> fx_dir_entry_name[dotpos++];
 8012dde:	693b      	ldr	r3, [r7, #16]
 8012de0:	681a      	ldr	r2, [r3, #0]
 8012de2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012de4:	1c59      	adds	r1, r3, #1
 8012de6:	64b9      	str	r1, [r7, #72]	; 0x48
 8012de8:	4413      	add	r3, r2
 8012dea:	781b      	ldrb	r3, [r3, #0]
 8012dec:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
            }
            if (entry_ptr -> fx_dir_entry_name[dotpos])
 8012df0:	693b      	ldr	r3, [r7, #16]
 8012df2:	681a      	ldr	r2, [r3, #0]
 8012df4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012df6:	4413      	add	r3, r2
 8012df8:	781b      	ldrb	r3, [r3, #0]
 8012dfa:	2b00      	cmp	r3, #0
 8012dfc:	d008      	beq.n	8012e10 <_fx_directory_entry_write+0x1d0>
            {
                shortname[10] = entry_ptr -> fx_dir_entry_name[dotpos++];
 8012dfe:	693b      	ldr	r3, [r7, #16]
 8012e00:	681a      	ldr	r2, [r3, #0]
 8012e02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012e04:	1c59      	adds	r1, r3, #1
 8012e06:	64b9      	str	r1, [r7, #72]	; 0x48
 8012e08:	4413      	add	r3, r2
 8012e0a:	781b      	ldrb	r3, [r3, #0]
 8012e0c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            }

            /* Determine if additional spaces are needed.  */
            i = dotfound;
 8012e10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012e12:	667b      	str	r3, [r7, #100]	; 0x64

            for (; dotfound <= 7; dotfound++)
 8012e14:	e008      	b.n	8012e28 <_fx_directory_entry_write+0x1e8>
            {
                /* Add space...  */
                shortname[dotfound] = ' ';
 8012e16:	f107 021c 	add.w	r2, r7, #28
 8012e1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012e1c:	4413      	add	r3, r2
 8012e1e:	2220      	movs	r2, #32
 8012e20:	701a      	strb	r2, [r3, #0]
            for (; dotfound <= 7; dotfound++)
 8012e22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012e24:	3301      	adds	r3, #1
 8012e26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012e28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012e2a:	2b07      	cmp	r3, #7
 8012e2c:	d9f3      	bls.n	8012e16 <_fx_directory_entry_write+0x1d6>
            }
        }

        /* Each entry contains 13 unicode entries.  Calculate the remainder.  */
        if (len % 13 == 0)
 8012e2e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012e30:	4b8e      	ldr	r3, [pc, #568]	; (801306c <_fx_directory_entry_write+0x42c>)
 8012e32:	fba3 2301 	umull	r2, r3, r3, r1
 8012e36:	089a      	lsrs	r2, r3, #2
 8012e38:	4613      	mov	r3, r2
 8012e3a:	005b      	lsls	r3, r3, #1
 8012e3c:	4413      	add	r3, r2
 8012e3e:	009b      	lsls	r3, r3, #2
 8012e40:	4413      	add	r3, r2
 8012e42:	1aca      	subs	r2, r1, r3
 8012e44:	2a00      	cmp	r2, #0
 8012e46:	d106      	bne.n	8012e56 <_fx_directory_entry_write+0x216>
        {
            card =  len / 13;
 8012e48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012e4a:	4a88      	ldr	r2, [pc, #544]	; (801306c <_fx_directory_entry_write+0x42c>)
 8012e4c:	fba2 2303 	umull	r2, r3, r2, r3
 8012e50:	089b      	lsrs	r3, r3, #2
 8012e52:	657b      	str	r3, [r7, #84]	; 0x54
 8012e54:	e006      	b.n	8012e64 <_fx_directory_entry_write+0x224>
        }
        else
        {
            card =  len / 13 + 1;
 8012e56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012e58:	4a84      	ldr	r2, [pc, #528]	; (801306c <_fx_directory_entry_write+0x42c>)
 8012e5a:	fba2 2303 	umull	r2, r3, r2, r3
 8012e5e:	089b      	lsrs	r3, r3, #2
 8012e60:	3301      	adds	r3, #1
 8012e62:	657b      	str	r3, [r7, #84]	; 0x54
        }

        /* Default the name match to true.  */
        match =  FX_TRUE;
 8012e64:	2301      	movs	r3, #1
 8012e66:	647b      	str	r3, [r7, #68]	; 0x44

        /* Loop through the newly derived short name and the original name and look
           for a non-matching character.  */
        l =  0;
 8012e68:	2300      	movs	r3, #0
 8012e6a:	65bb      	str	r3, [r7, #88]	; 0x58
        k =  0;
 8012e6c:	2300      	movs	r3, #0
 8012e6e:	65fb      	str	r3, [r7, #92]	; 0x5c
        while (k < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE)
 8012e70:	e03f      	b.n	8012ef2 <_fx_directory_entry_write+0x2b2>
        {

            /* Determine if a space is detected in the short name. If so,
               advance to the extension index.  */
            if (shortname[k] == ' ')
 8012e72:	f107 021c 	add.w	r2, r7, #28
 8012e76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012e78:	4413      	add	r3, r2
 8012e7a:	781b      	ldrb	r3, [r3, #0]
 8012e7c:	2b20      	cmp	r3, #32
 8012e7e:	d116      	bne.n	8012eae <_fx_directory_entry_write+0x26e>
            {

                /* The first pad space was detected. First, check for a name
                   without an extension.  */
                if (entry_ptr -> fx_dir_entry_name[l] == FX_NULL)
 8012e80:	693b      	ldr	r3, [r7, #16]
 8012e82:	681a      	ldr	r2, [r3, #0]
 8012e84:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012e86:	4413      	add	r3, r2
 8012e88:	781b      	ldrb	r3, [r3, #0]
 8012e8a:	2b00      	cmp	r3, #0
 8012e8c:	d035      	beq.n	8012efa <_fx_directory_entry_write+0x2ba>
                    /* All is okay, get out of the loop!  */
                    break;
                }

                /* Now check for a period in the long name... if not, there is a non-match!  */
                if (entry_ptr -> fx_dir_entry_name[l] != '.')
 8012e8e:	693b      	ldr	r3, [r7, #16]
 8012e90:	681a      	ldr	r2, [r3, #0]
 8012e92:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012e94:	4413      	add	r3, r2
 8012e96:	781b      	ldrb	r3, [r3, #0]
 8012e98:	2b2e      	cmp	r3, #46	; 0x2e
 8012e9a:	d002      	beq.n	8012ea2 <_fx_directory_entry_write+0x262>
                {

                    /* Set the match flag to false and exit the loop.  */
                    match =  FX_FALSE;
 8012e9c:	2300      	movs	r3, #0
 8012e9e:	647b      	str	r3, [r7, #68]	; 0x44
                    break;
 8012ea0:	e02c      	b.n	8012efc <_fx_directory_entry_write+0x2bc>
                }

                /* Otherwise move short file name index to the extension area and
                   increment the long file name index.  */
                k =  8;
 8012ea2:	2308      	movs	r3, #8
 8012ea4:	65fb      	str	r3, [r7, #92]	; 0x5c
                l++;
 8012ea6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012ea8:	3301      	adds	r3, #1
 8012eaa:	65bb      	str	r3, [r7, #88]	; 0x58

                /* Restart the loop at the top.  */
                continue;
 8012eac:	e021      	b.n	8012ef2 <_fx_directory_entry_write+0x2b2>
            }

            /* Check for the dot for the 8.3 match... it is no longer in the
               shortname but possibly still present in the long name.  */
            if ((k == 8) && (entry_ptr -> fx_dir_entry_name[l] == '.'))
 8012eae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012eb0:	2b08      	cmp	r3, #8
 8012eb2:	d109      	bne.n	8012ec8 <_fx_directory_entry_write+0x288>
 8012eb4:	693b      	ldr	r3, [r7, #16]
 8012eb6:	681a      	ldr	r2, [r3, #0]
 8012eb8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012eba:	4413      	add	r3, r2
 8012ebc:	781b      	ldrb	r3, [r3, #0]
 8012ebe:	2b2e      	cmp	r3, #46	; 0x2e
 8012ec0:	d102      	bne.n	8012ec8 <_fx_directory_entry_write+0x288>
            {

                /* Yes, handle the implicit dot in the shortname by
                   positioning past it in the long name.  */
                l++;
 8012ec2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012ec4:	3301      	adds	r3, #1
 8012ec6:	65bb      	str	r3, [r7, #88]	; 0x58
            }

            /* Do the names match?  */
            if (shortname[k] != entry_ptr -> fx_dir_entry_name[l])
 8012ec8:	f107 021c 	add.w	r2, r7, #28
 8012ecc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012ece:	4413      	add	r3, r2
 8012ed0:	781a      	ldrb	r2, [r3, #0]
 8012ed2:	693b      	ldr	r3, [r7, #16]
 8012ed4:	6819      	ldr	r1, [r3, #0]
 8012ed6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012ed8:	440b      	add	r3, r1
 8012eda:	781b      	ldrb	r3, [r3, #0]
 8012edc:	429a      	cmp	r2, r3
 8012ede:	d002      	beq.n	8012ee6 <_fx_directory_entry_write+0x2a6>
            {

                /* No, the names do not match, set the match flag to false and
                   exit the loop.  */
                match =  FX_FALSE;
 8012ee0:	2300      	movs	r3, #0
 8012ee2:	647b      	str	r3, [r7, #68]	; 0x44
                break;
 8012ee4:	e00a      	b.n	8012efc <_fx_directory_entry_write+0x2bc>
            }

            /* Move the indices forward.  */
            k++;
 8012ee6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012ee8:	3301      	adds	r3, #1
 8012eea:	65fb      	str	r3, [r7, #92]	; 0x5c
            l++;
 8012eec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012eee:	3301      	adds	r3, #1
 8012ef0:	65bb      	str	r3, [r7, #88]	; 0x58
        while (k < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE)
 8012ef2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012ef4:	2b0a      	cmp	r3, #10
 8012ef6:	d9bc      	bls.n	8012e72 <_fx_directory_entry_write+0x232>
 8012ef8:	e000      	b.n	8012efc <_fx_directory_entry_write+0x2bc>
                    break;
 8012efa:	bf00      	nop
        }

        /* Check if there is a dot in the name, but no extension in the short name.  In this case, 
           we should create a mangled short name.  */
        if ((dotpos) && (shortname[8] == ' '))
 8012efc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012efe:	2b00      	cmp	r3, #0
 8012f00:	d005      	beq.n	8012f0e <_fx_directory_entry_write+0x2ce>
 8012f02:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8012f06:	2b20      	cmp	r3, #32
 8012f08:	d101      	bne.n	8012f0e <_fx_directory_entry_write+0x2ce>
        {
        
            /* Something left.. the names do not match!  */
            match =  FX_FALSE;
 8012f0a:	2300      	movs	r3, #0
 8012f0c:	647b      	str	r3, [r7, #68]	; 0x44
        }

        /* One final check to make sure there is nothing left on the long file name.  */
        if (entry_ptr -> fx_dir_entry_name[l])
 8012f0e:	693b      	ldr	r3, [r7, #16]
 8012f10:	681a      	ldr	r2, [r3, #0]
 8012f12:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012f14:	4413      	add	r3, r2
 8012f16:	781b      	ldrb	r3, [r3, #0]
 8012f18:	2b00      	cmp	r3, #0
 8012f1a:	d001      	beq.n	8012f20 <_fx_directory_entry_write+0x2e0>
        {

            /* Something left.. the names do not match!  */
            match =  FX_FALSE;
 8012f1c:	2300      	movs	r3, #0
 8012f1e:	647b      	str	r3, [r7, #68]	; 0x44
        }

        /* Determine if the derived short name matches exactly the long file name. If so
           we don't need to mangle the name with a numeric value based on its entry.  */
        if (match == FX_FALSE)
 8012f20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012f22:	2b00      	cmp	r3, #0
 8012f24:	d15a      	bne.n	8012fdc <_fx_directory_entry_write+0x39c>
        {

            /* Name does not match, create a mangled name.  */

            /* Generate short file name from LFN.  */
            entry = entry_ptr -> fx_dir_entry_number;
 8012f26:	693b      	ldr	r3, [r7, #16]
 8012f28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012f2a:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Name suffice is between 000 and FFFF in hex, calculate this short file
               name's numeric component.  */
            entry = entry % 0x10000;
 8012f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f2e:	b29b      	uxth	r3, r3
 8012f30:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Build short name of the format xxx~NNNN.ext.  */
            if (i > 3)
 8012f32:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012f34:	2b03      	cmp	r3, #3
 8012f36:	d901      	bls.n	8012f3c <_fx_directory_entry_write+0x2fc>
            {
                i = 3;
 8012f38:	2303      	movs	r3, #3
 8012f3a:	667b      	str	r3, [r7, #100]	; 0x64
            }
            shortname[i++] = '~';
 8012f3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012f3e:	1c5a      	adds	r2, r3, #1
 8012f40:	667a      	str	r2, [r7, #100]	; 0x64
 8012f42:	3368      	adds	r3, #104	; 0x68
 8012f44:	f107 0210 	add.w	r2, r7, #16
 8012f48:	4413      	add	r3, r2
 8012f4a:	227e      	movs	r2, #126	; 0x7e
 8012f4c:	f803 2c5c 	strb.w	r2, [r3, #-92]

            /* Loop to build the numeric part of the name.  */
            for (l = 0; l < 4; l++)
 8012f50:	2300      	movs	r3, #0
 8012f52:	65bb      	str	r3, [r7, #88]	; 0x58
 8012f54:	e03f      	b.n	8012fd6 <_fx_directory_entry_write+0x396>
            {
                
                /* Shift down the entry number based on the numeric position.  */
                if (l == 0)
 8012f56:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012f58:	2b00      	cmp	r3, #0
 8012f5a:	d105      	bne.n	8012f68 <_fx_directory_entry_write+0x328>
                {
                    temp =  ((entry >> 12) & 0xf);
 8012f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f5e:	0b1b      	lsrs	r3, r3, #12
 8012f60:	f003 030f 	and.w	r3, r3, #15
 8012f64:	66fb      	str	r3, [r7, #108]	; 0x6c
 8012f66:	e015      	b.n	8012f94 <_fx_directory_entry_write+0x354>
                }
                else if (l == 1)
 8012f68:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012f6a:	2b01      	cmp	r3, #1
 8012f6c:	d105      	bne.n	8012f7a <_fx_directory_entry_write+0x33a>
                {
                     temp = ((entry >> 8) & 0xf);
 8012f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f70:	0a1b      	lsrs	r3, r3, #8
 8012f72:	f003 030f 	and.w	r3, r3, #15
 8012f76:	66fb      	str	r3, [r7, #108]	; 0x6c
 8012f78:	e00c      	b.n	8012f94 <_fx_directory_entry_write+0x354>
                }
                else if (l == 2)
 8012f7a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012f7c:	2b02      	cmp	r3, #2
 8012f7e:	d105      	bne.n	8012f8c <_fx_directory_entry_write+0x34c>
                {
                     temp = ((entry >> 4) & 0xf);
 8012f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f82:	091b      	lsrs	r3, r3, #4
 8012f84:	f003 030f 	and.w	r3, r3, #15
 8012f88:	66fb      	str	r3, [r7, #108]	; 0x6c
 8012f8a:	e003      	b.n	8012f94 <_fx_directory_entry_write+0x354>
                }
                else
                {
                     temp = ((entry) & 0xf);
 8012f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f8e:	f003 030f 	and.w	r3, r3, #15
 8012f92:	66fb      	str	r3, [r7, #108]	; 0x6c
                }
                
                /* Now build hex value.  */
                if (temp > 9)
 8012f94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012f96:	2b09      	cmp	r3, #9
 8012f98:	d90d      	bls.n	8012fb6 <_fx_directory_entry_write+0x376>
                    shortname[i++] =  (CHAR)('A' + (temp - 10));
 8012f9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012f9c:	b2da      	uxtb	r2, r3
 8012f9e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012fa0:	1c59      	adds	r1, r3, #1
 8012fa2:	6679      	str	r1, [r7, #100]	; 0x64
 8012fa4:	3237      	adds	r2, #55	; 0x37
 8012fa6:	b2d2      	uxtb	r2, r2
 8012fa8:	3368      	adds	r3, #104	; 0x68
 8012faa:	f107 0110 	add.w	r1, r7, #16
 8012fae:	440b      	add	r3, r1
 8012fb0:	f803 2c5c 	strb.w	r2, [r3, #-92]
 8012fb4:	e00c      	b.n	8012fd0 <_fx_directory_entry_write+0x390>
                else
                    shortname[i++] =  (CHAR)('0' + temp);
 8012fb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012fb8:	b2da      	uxtb	r2, r3
 8012fba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012fbc:	1c59      	adds	r1, r3, #1
 8012fbe:	6679      	str	r1, [r7, #100]	; 0x64
 8012fc0:	3230      	adds	r2, #48	; 0x30
 8012fc2:	b2d2      	uxtb	r2, r2
 8012fc4:	3368      	adds	r3, #104	; 0x68
 8012fc6:	f107 0110 	add.w	r1, r7, #16
 8012fca:	440b      	add	r3, r1
 8012fcc:	f803 2c5c 	strb.w	r2, [r3, #-92]
            for (l = 0; l < 4; l++)
 8012fd0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012fd2:	3301      	adds	r3, #1
 8012fd4:	65bb      	str	r3, [r7, #88]	; 0x58
 8012fd6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012fd8:	2b03      	cmp	r3, #3
 8012fda:	d9bc      	bls.n	8012f56 <_fx_directory_entry_write+0x316>
            }
        }

        /* Set end of short string to NULL.   */
        shortname[11] = 0;
 8012fdc:	2300      	movs	r3, #0
 8012fde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        /* Determine if the first character of the short file name is the directory free
           value. If so, it must be changed.  */
        if (((UCHAR)shortname[0] == (UCHAR)FX_DIR_ENTRY_FREE) && (delete_flag == FX_FALSE))
 8012fe2:	7f3b      	ldrb	r3, [r7, #28]
 8012fe4:	2be5      	cmp	r3, #229	; 0xe5
 8012fe6:	d104      	bne.n	8012ff2 <_fx_directory_entry_write+0x3b2>
 8012fe8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012fea:	2b00      	cmp	r3, #0
 8012fec:	d101      	bne.n	8012ff2 <_fx_directory_entry_write+0x3b2>
        {

            /* Change to 0x8F to be compatible with what DOS does.  */
            shortname[0] =  (CHAR)0x8F;
 8012fee:	238f      	movs	r3, #143	; 0x8f
 8012ff0:	773b      	strb	r3, [r7, #28]
        }

        /* Loop to convert the new short file name to upper case.  */
        for (i = 0; i < (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE); i++)
 8012ff2:	2300      	movs	r3, #0
 8012ff4:	667b      	str	r3, [r7, #100]	; 0x64
 8012ff6:	e01d      	b.n	8013034 <_fx_directory_entry_write+0x3f4>
        {

            /* Pickup shortname character.  */
            alpha = shortname[i];
 8012ff8:	f107 021c 	add.w	r2, r7, #28
 8012ffc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012ffe:	4413      	add	r3, r2
 8013000:	781b      	ldrb	r3, [r3, #0]
 8013002:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41

            /* Determine if character is lower case.  */
            if ((alpha >= 'a') && (alpha <= 'z'))
 8013006:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 801300a:	2b60      	cmp	r3, #96	; 0x60
 801300c:	d908      	bls.n	8013020 <_fx_directory_entry_write+0x3e0>
 801300e:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8013012:	2b7a      	cmp	r3, #122	; 0x7a
 8013014:	d804      	bhi.n	8013020 <_fx_directory_entry_write+0x3e0>
            {

                /* Store the character - converted to upper case.  */
                alpha =  (CHAR)(alpha - ((CHAR)0x20));
 8013016:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 801301a:	3b20      	subs	r3, #32
 801301c:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
            }

            /* Now store the short name character.  */
            shortname[i] =  alpha;
 8013020:	f107 021c 	add.w	r2, r7, #28
 8013024:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013026:	4413      	add	r3, r2
 8013028:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 801302c:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE); i++)
 801302e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013030:	3301      	adds	r3, #1
 8013032:	667b      	str	r3, [r7, #100]	; 0x64
 8013034:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013036:	2b0a      	cmp	r3, #10
 8013038:	d9de      	bls.n	8012ff8 <_fx_directory_entry_write+0x3b8>
        }

        /* Determine if there already is a short name and we are not deleting the entry.  */
        if (entry_ptr -> fx_dir_entry_short_name[0] != 0)
 801303a:	693b      	ldr	r3, [r7, #16]
 801303c:	791b      	ldrb	r3, [r3, #4]
 801303e:	2b00      	cmp	r3, #0
 8013040:	f000 8095 	beq.w	801316e <_fx_directory_entry_write+0x52e>
        {

            /* Yes, override the calculated shortname with the original 8.3 name.  */

            /* Clear the short file name area.  */
            for (i = 0; i < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++)
 8013044:	2300      	movs	r3, #0
 8013046:	667b      	str	r3, [r7, #100]	; 0x64
 8013048:	e008      	b.n	801305c <_fx_directory_entry_write+0x41c>
            {
                shortname[i] = ' ';
 801304a:	f107 021c 	add.w	r2, r7, #28
 801304e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013050:	4413      	add	r3, r2
 8013052:	2220      	movs	r2, #32
 8013054:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++)
 8013056:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013058:	3301      	adds	r3, #1
 801305a:	667b      	str	r3, [r7, #100]	; 0x64
 801305c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801305e:	2b0a      	cmp	r3, #10
 8013060:	d9f3      	bls.n	801304a <_fx_directory_entry_write+0x40a>
            }

            /* Loop to copy the original short file name.  */
            for (i = 0, j = 0; j < FX_DIR_NAME_SIZE; i++, j++)
 8013062:	2300      	movs	r3, #0
 8013064:	667b      	str	r3, [r7, #100]	; 0x64
 8013066:	2300      	movs	r3, #0
 8013068:	663b      	str	r3, [r7, #96]	; 0x60
 801306a:	e023      	b.n	80130b4 <_fx_directory_entry_write+0x474>
 801306c:	4ec4ec4f 	.word	0x4ec4ec4f
            {

                /* Check for end of copy conditions.  */
                if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == '.')
 8013070:	693a      	ldr	r2, [r7, #16]
 8013072:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013074:	4413      	add	r3, r2
 8013076:	3304      	adds	r3, #4
 8013078:	781b      	ldrb	r3, [r3, #0]
 801307a:	2b2e      	cmp	r3, #46	; 0x2e
 801307c:	d01e      	beq.n	80130bc <_fx_directory_entry_write+0x47c>
                {
                    break;
                }
                if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == 0)
 801307e:	693a      	ldr	r2, [r7, #16]
 8013080:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013082:	4413      	add	r3, r2
 8013084:	3304      	adds	r3, #4
 8013086:	781b      	ldrb	r3, [r3, #0]
 8013088:	2b00      	cmp	r3, #0
 801308a:	d019      	beq.n	80130c0 <_fx_directory_entry_write+0x480>
                {
                    break;
                }

                /* Pickup the character.  */
                alpha =  entry_ptr -> fx_dir_entry_short_name[i];
 801308c:	693a      	ldr	r2, [r7, #16]
 801308e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013090:	4413      	add	r3, r2
 8013092:	3304      	adds	r3, #4
 8013094:	781b      	ldrb	r3, [r3, #0]
 8013096:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41

                /* Copy file name character.  */
                shortname[j] =  alpha;
 801309a:	f107 021c 	add.w	r2, r7, #28
 801309e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80130a0:	4413      	add	r3, r2
 80130a2:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 80130a6:	701a      	strb	r2, [r3, #0]
            for (i = 0, j = 0; j < FX_DIR_NAME_SIZE; i++, j++)
 80130a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80130aa:	3301      	adds	r3, #1
 80130ac:	667b      	str	r3, [r7, #100]	; 0x64
 80130ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80130b0:	3301      	adds	r3, #1
 80130b2:	663b      	str	r3, [r7, #96]	; 0x60
 80130b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80130b6:	2b07      	cmp	r3, #7
 80130b8:	d9da      	bls.n	8013070 <_fx_directory_entry_write+0x430>
 80130ba:	e002      	b.n	80130c2 <_fx_directory_entry_write+0x482>
                    break;
 80130bc:	bf00      	nop
 80130be:	e000      	b.n	80130c2 <_fx_directory_entry_write+0x482>
                    break;
 80130c0:	bf00      	nop
            }

            /* Determine if there is anything left in the short file name.  */
            if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] != 0)
 80130c2:	693a      	ldr	r2, [r7, #16]
 80130c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80130c6:	4413      	add	r3, r2
 80130c8:	3304      	adds	r3, #4
 80130ca:	781b      	ldrb	r3, [r3, #0]
 80130cc:	2b00      	cmp	r3, #0
 80130ce:	d025      	beq.n	801311c <_fx_directory_entry_write+0x4dc>
            {

                /* Pickup remaining characters.  */
                for (i++, j = FX_DIR_NAME_SIZE; j < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++, j++)
 80130d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80130d2:	3301      	adds	r3, #1
 80130d4:	667b      	str	r3, [r7, #100]	; 0x64
 80130d6:	2308      	movs	r3, #8
 80130d8:	663b      	str	r3, [r7, #96]	; 0x60
 80130da:	e01a      	b.n	8013112 <_fx_directory_entry_write+0x4d2>
                {

                    /* If NULL is encountered, stop the copying.  */
                    if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == 0)
 80130dc:	693a      	ldr	r2, [r7, #16]
 80130de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80130e0:	4413      	add	r3, r2
 80130e2:	3304      	adds	r3, #4
 80130e4:	781b      	ldrb	r3, [r3, #0]
 80130e6:	2b00      	cmp	r3, #0
 80130e8:	d017      	beq.n	801311a <_fx_directory_entry_write+0x4da>
                    {
                        break;
                    }

                    /* Pickup the character.  */
                    alpha =  entry_ptr -> fx_dir_entry_short_name[i];
 80130ea:	693a      	ldr	r2, [r7, #16]
 80130ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80130ee:	4413      	add	r3, r2
 80130f0:	3304      	adds	r3, #4
 80130f2:	781b      	ldrb	r3, [r3, #0]
 80130f4:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41

                    /* Copy file name character.  */
                    shortname[j] =  alpha;
 80130f8:	f107 021c 	add.w	r2, r7, #28
 80130fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80130fe:	4413      	add	r3, r2
 8013100:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 8013104:	701a      	strb	r2, [r3, #0]
                for (i++, j = FX_DIR_NAME_SIZE; j < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++, j++)
 8013106:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013108:	3301      	adds	r3, #1
 801310a:	667b      	str	r3, [r7, #100]	; 0x64
 801310c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801310e:	3301      	adds	r3, #1
 8013110:	663b      	str	r3, [r7, #96]	; 0x60
 8013112:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013114:	2b0a      	cmp	r3, #10
 8013116:	d9e1      	bls.n	80130dc <_fx_directory_entry_write+0x49c>
 8013118:	e000      	b.n	801311c <_fx_directory_entry_write+0x4dc>
                        break;
 801311a:	bf00      	nop
                }
            }

            /* Loop to make sure the short name is upper case.  */
            for (j = 0; j < (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE); j++)
 801311c:	2300      	movs	r3, #0
 801311e:	663b      	str	r3, [r7, #96]	; 0x60
 8013120:	e01d      	b.n	801315e <_fx_directory_entry_write+0x51e>
            {

                /* Pickup the character.  */
                alpha =  shortname[j];
 8013122:	f107 021c 	add.w	r2, r7, #28
 8013126:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013128:	4413      	add	r3, r2
 801312a:	781b      	ldrb	r3, [r3, #0]
 801312c:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41

                /* Determine if character is lower case.  */
                if ((alpha >= 'a') && (alpha <= 'z'))
 8013130:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8013134:	2b60      	cmp	r3, #96	; 0x60
 8013136:	d908      	bls.n	801314a <_fx_directory_entry_write+0x50a>
 8013138:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 801313c:	2b7a      	cmp	r3, #122	; 0x7a
 801313e:	d804      	bhi.n	801314a <_fx_directory_entry_write+0x50a>
                {

                    /* Store the character - converted to upper case.  */
                    alpha =  (CHAR)(alpha - ((CHAR)0x20));
 8013140:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8013144:	3b20      	subs	r3, #32
 8013146:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
                }

                /* Copy file name character.  */
                shortname[j] =  alpha;
 801314a:	f107 021c 	add.w	r2, r7, #28
 801314e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013150:	4413      	add	r3, r2
 8013152:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 8013156:	701a      	strb	r2, [r3, #0]
            for (j = 0; j < (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE); j++)
 8013158:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801315a:	3301      	adds	r3, #1
 801315c:	663b      	str	r3, [r7, #96]	; 0x60
 801315e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013160:	2b0a      	cmp	r3, #10
 8013162:	d9de      	bls.n	8013122 <_fx_directory_entry_write+0x4e2>
            }

            /* Determine if the first character of the short file name is the directory free
               value. If so, it must be changed.  */
            if (((UCHAR)shortname[0]) == ((UCHAR)FX_DIR_ENTRY_FREE))
 8013164:	7f3b      	ldrb	r3, [r7, #28]
 8013166:	2be5      	cmp	r3, #229	; 0xe5
 8013168:	d101      	bne.n	801316e <_fx_directory_entry_write+0x52e>
            {

                /* Change to 0x8F to be compatible with what DOS does.  */
                shortname[0] =  (CHAR)0x8F;
 801316a:	238f      	movs	r3, #143	; 0x8f
 801316c:	773b      	strb	r3, [r7, #28]
            }
        }

        /* Loop to calculate the checksum.  */
        for (i = checksum = 0; i < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++)
 801316e:	2300      	movs	r3, #0
 8013170:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013174:	2300      	movs	r3, #0
 8013176:	667b      	str	r3, [r7, #100]	; 0x64
 8013178:	e016      	b.n	80131a8 <_fx_directory_entry_write+0x568>
        {

            /* Calculate the checksum.  */
            checksum = (UCHAR)((UCHAR)(((checksum & 1) << 7) | ((checksum & (UCHAR)0xfe) >> 1)) + shortname[i]);
 801317a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801317e:	01db      	lsls	r3, r3, #7
 8013180:	b25a      	sxtb	r2, r3
 8013182:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8013186:	085b      	lsrs	r3, r3, #1
 8013188:	b2db      	uxtb	r3, r3
 801318a:	b25b      	sxtb	r3, r3
 801318c:	4313      	orrs	r3, r2
 801318e:	b25b      	sxtb	r3, r3
 8013190:	b2da      	uxtb	r2, r3
 8013192:	f107 011c 	add.w	r1, r7, #28
 8013196:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013198:	440b      	add	r3, r1
 801319a:	781b      	ldrb	r3, [r3, #0]
 801319c:	4413      	add	r3, r2
 801319e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
        for (i = checksum = 0; i < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++)
 80131a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80131a4:	3301      	adds	r3, #1
 80131a6:	667b      	str	r3, [r7, #100]	; 0x64
 80131a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80131aa:	2b0a      	cmp	r3, #10
 80131ac:	d9e5      	bls.n	801317a <_fx_directory_entry_write+0x53a>
        }

        /* Set the last entry mark.  */
        work_ptr[0] =  (UCHAR)(0x40 | card);
 80131ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80131b0:	b2db      	uxtb	r3, r3
 80131b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80131b6:	b2da      	uxtb	r2, r3
 80131b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80131ba:	701a      	strb	r2, [r3, #0]

        /* Loop to process remainder of long file name entry.  */
        while (card > 0)
 80131bc:	e0f3      	b.n	80133a6 <_fx_directory_entry_write+0x766>
        {

            /* Clear eof marker.  */
            eof_marker = 0;
 80131be:	2300      	movs	r3, #0
 80131c0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42

            /* Determine if the entry is free.  */
            if ((UCHAR)shortname[0] == (UCHAR)FX_DIR_ENTRY_FREE)
 80131c4:	7f3b      	ldrb	r3, [r7, #28]
 80131c6:	2be5      	cmp	r3, #229	; 0xe5
 80131c8:	d102      	bne.n	80131d0 <_fx_directory_entry_write+0x590>
            {
                /* Yes, place delete marker.  */
                work_ptr[0] =  (UCHAR)FX_DIR_ENTRY_FREE;
 80131ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80131cc:	22e5      	movs	r2, #229	; 0xe5
 80131ce:	701a      	strb	r2, [r3, #0]
            }

            /* Setup various long file name fields.  */
            work_ptr[11] = FX_LONG_NAME;
 80131d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80131d2:	330b      	adds	r3, #11
 80131d4:	220f      	movs	r2, #15
 80131d6:	701a      	strb	r2, [r3, #0]
            work_ptr[12] = 0;
 80131d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80131da:	330c      	adds	r3, #12
 80131dc:	2200      	movs	r2, #0
 80131de:	701a      	strb	r2, [r3, #0]
            work_ptr[13] = checksum;
 80131e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80131e2:	330d      	adds	r3, #13
 80131e4:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 80131e8:	701a      	strb	r2, [r3, #0]
            work_ptr[26] = 0;
 80131ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80131ec:	331a      	adds	r3, #26
 80131ee:	2200      	movs	r2, #0
 80131f0:	701a      	strb	r2, [r3, #0]
            work_ptr[27] = 0;
 80131f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80131f4:	331b      	adds	r3, #27
 80131f6:	2200      	movs	r2, #0
 80131f8:	701a      	strb	r2, [r3, #0]

            /* Loop through file name fields.  */
            for (i = 1, j = 13 * (card - 1); i < FX_DIR_ENTRY_SIZE; i += 2)
 80131fa:	2301      	movs	r3, #1
 80131fc:	667b      	str	r3, [r7, #100]	; 0x64
 80131fe:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013200:	4613      	mov	r3, r2
 8013202:	005b      	lsls	r3, r3, #1
 8013204:	4413      	add	r3, r2
 8013206:	009b      	lsls	r3, r3, #2
 8013208:	4413      	add	r3, r2
 801320a:	3b0d      	subs	r3, #13
 801320c:	663b      	str	r3, [r7, #96]	; 0x60
 801320e:	e03e      	b.n	801328e <_fx_directory_entry_write+0x64e>
            {

                /* Process relative to specific fields.  */
                if ((i == 11) || (i == 26))
 8013210:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013212:	2b0b      	cmp	r3, #11
 8013214:	d037      	beq.n	8013286 <_fx_directory_entry_write+0x646>
 8013216:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013218:	2b1a      	cmp	r3, #26
 801321a:	d034      	beq.n	8013286 <_fx_directory_entry_write+0x646>
                {
                    continue;
                }

                if (i == 13)
 801321c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801321e:	2b0d      	cmp	r3, #13
 8013220:	d102      	bne.n	8013228 <_fx_directory_entry_write+0x5e8>
                {
                    i = 12;
 8013222:	230c      	movs	r3, #12
 8013224:	667b      	str	r3, [r7, #100]	; 0x64
                    continue;
 8013226:	e02f      	b.n	8013288 <_fx_directory_entry_write+0x648>
                }

                /* Determine if the EOF marker is present.  */
                if (eof_marker)
 8013228:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 801322c:	2b00      	cmp	r3, #0
 801322e:	d00d      	beq.n	801324c <_fx_directory_entry_write+0x60c>
                {

                    work_ptr[i] = eof_marker;
 8013230:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8013232:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013234:	4413      	add	r3, r2
 8013236:	f897 2042 	ldrb.w	r2, [r7, #66]	; 0x42
 801323a:	701a      	strb	r2, [r3, #0]
                    work_ptr[i + 1] = eof_marker;
 801323c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801323e:	3301      	adds	r3, #1
 8013240:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8013242:	4413      	add	r3, r2
 8013244:	f897 2042 	ldrb.w	r2, [r7, #66]	; 0x42
 8013248:	701a      	strb	r2, [r3, #0]
 801324a:	e00e      	b.n	801326a <_fx_directory_entry_write+0x62a>
                }
                else
                {
                    work_ptr[i] = (UCHAR)entry_ptr -> fx_dir_entry_name[j];
 801324c:	693b      	ldr	r3, [r7, #16]
 801324e:	681a      	ldr	r2, [r3, #0]
 8013250:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013252:	441a      	add	r2, r3
 8013254:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8013256:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013258:	440b      	add	r3, r1
 801325a:	7812      	ldrb	r2, [r2, #0]
 801325c:	701a      	strb	r2, [r3, #0]
                    work_ptr[i + 1] = 0;
 801325e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013260:	3301      	adds	r3, #1
 8013262:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8013264:	4413      	add	r3, r2
 8013266:	2200      	movs	r2, #0
 8013268:	701a      	strb	r2, [r3, #0]
                }

                if (entry_ptr -> fx_dir_entry_name[j] == 0)
 801326a:	693b      	ldr	r3, [r7, #16]
 801326c:	681a      	ldr	r2, [r3, #0]
 801326e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013270:	4413      	add	r3, r2
 8013272:	781b      	ldrb	r3, [r3, #0]
 8013274:	2b00      	cmp	r3, #0
 8013276:	d102      	bne.n	801327e <_fx_directory_entry_write+0x63e>
                {

                    /* end of name, pad with 0xff.  */
                    eof_marker =  (UCHAR)0xff;
 8013278:	23ff      	movs	r3, #255	; 0xff
 801327a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
                }

                j++;
 801327e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013280:	3301      	adds	r3, #1
 8013282:	663b      	str	r3, [r7, #96]	; 0x60
 8013284:	e000      	b.n	8013288 <_fx_directory_entry_write+0x648>
                    continue;
 8013286:	bf00      	nop
            for (i = 1, j = 13 * (card - 1); i < FX_DIR_ENTRY_SIZE; i += 2)
 8013288:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801328a:	3302      	adds	r3, #2
 801328c:	667b      	str	r3, [r7, #100]	; 0x64
 801328e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013290:	2b1f      	cmp	r3, #31
 8013292:	d9bd      	bls.n	8013210 <_fx_directory_entry_write+0x5d0>
            }

            /* Move to the next directory entry.  */
            work_ptr += FX_DIR_ENTRY_SIZE;
 8013294:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8013296:	3320      	adds	r3, #32
 8013298:	677b      	str	r3, [r7, #116]	; 0x74
            byte_offset += FX_DIR_ENTRY_SIZE;
 801329a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801329c:	3320      	adds	r3, #32
 801329e:	637b      	str	r3, [r7, #52]	; 0x34
            /* Update changed_size. */
            changed_size += FX_DIR_ENTRY_SIZE;
#endif /* FX_ENABLE_FAULT_TOLERANT */

            /* Determine if the entry overlaps into the next sector.  */
            if (byte_offset >= media_ptr -> fx_media_bytes_per_sector)
 80132a0:	697b      	ldr	r3, [r7, #20]
 80132a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80132a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80132a6:	429a      	cmp	r2, r3
 80132a8:	d376      	bcc.n	8013398 <_fx_directory_entry_write+0x758>
                else
                {
#endif /* FX_ENABLE_FAULT_TOLERANT */

                    /* Write current logical sector out.  */
                    status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) logical_sector,
 80132aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80132ac:	2200      	movs	r2, #0
 80132ae:	60bb      	str	r3, [r7, #8]
 80132b0:	60fa      	str	r2, [r7, #12]
 80132b2:	2303      	movs	r3, #3
 80132b4:	9302      	str	r3, [sp, #8]
 80132b6:	2301      	movs	r3, #1
 80132b8:	9301      	str	r3, [sp, #4]
 80132ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80132bc:	9300      	str	r3, [sp, #0]
 80132be:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80132c2:	6978      	ldr	r0, [r7, #20]
 80132c4:	f008 f8ee 	bl	801b4a4 <_fx_utility_logical_sector_write>
 80132c8:	62f8      	str	r0, [r7, #44]	; 0x2c
#ifdef FX_ENABLE_FAULT_TOLERANT
                }
#endif /* FX_ENABLE_FAULT_TOLERANT */

                /* Determine if an error occurred.  */
                if (status != FX_SUCCESS)
 80132ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132cc:	2b00      	cmp	r3, #0
 80132ce:	d001      	beq.n	80132d4 <_fx_directory_entry_write+0x694>
                {

                    /* Return the error status.  */
                    return(status);
 80132d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132d2:	e2eb      	b.n	80138ac <_fx_directory_entry_write+0xc6c>
                }

                /* Determine if we are in the root directory.  */
                if (logical_sector >= (ULONG)(media_ptr -> fx_media_data_sector_start))
 80132d4:	697b      	ldr	r3, [r7, #20]
 80132d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80132d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80132da:	429a      	cmp	r2, r3
 80132dc:	d335      	bcc.n	801334a <_fx_directory_entry_write+0x70a>
                {

                    /* Determine the next sector of the directory entry.  */
                    if (relative_sector < (media_ptr -> fx_media_sectors_per_cluster - 1))
 80132de:	697b      	ldr	r3, [r7, #20]
 80132e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80132e2:	3b01      	subs	r3, #1
 80132e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80132e6:	429a      	cmp	r2, r3
 80132e8:	d206      	bcs.n	80132f8 <_fx_directory_entry_write+0x6b8>
                    {

                        /* More sectors in this cluster.  */

                        /* Simply increment the logical sector.  */
                        logical_sector++;
 80132ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80132ec:	3301      	adds	r3, #1
 80132ee:	63fb      	str	r3, [r7, #60]	; 0x3c

                        /* Increment the relative sector.  */
                        relative_sector++;
 80132f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80132f2:	3301      	adds	r3, #1
 80132f4:	63bb      	str	r3, [r7, #56]	; 0x38
 80132f6:	e032      	b.n	801335e <_fx_directory_entry_write+0x71e>
                    {

                        /* We need to move to the next cluster.  */

                        /* Pickup the next cluster.  */
                        status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &next_cluster);
 80132f8:	f107 0318 	add.w	r3, r7, #24
 80132fc:	461a      	mov	r2, r3
 80132fe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8013300:	6978      	ldr	r0, [r7, #20]
 8013302:	f006 fa2d 	bl	8019760 <_fx_utility_FAT_entry_read>
 8013306:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* Check for I/O error.  */
                        if (status != FX_SUCCESS)
 8013308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801330a:	2b00      	cmp	r3, #0
 801330c:	d001      	beq.n	8013312 <_fx_directory_entry_write+0x6d2>
                        {

                            /* Return error code.  */
                            return(status);
 801330e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013310:	e2cc      	b.n	80138ac <_fx_directory_entry_write+0xc6c>
                        }

                        /* Copy next cluster to the current cluster.  */
                        cluster =  next_cluster;
 8013312:	69bb      	ldr	r3, [r7, #24]
 8013314:	633b      	str	r3, [r7, #48]	; 0x30

                        /* Check the value of the new cluster - it must be a valid cluster number
                           or something is really wrong!  */
                        if ((cluster < FX_FAT_ENTRY_START) || (cluster >= media_ptr -> fx_media_fat_reserved))
 8013316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013318:	2b01      	cmp	r3, #1
 801331a:	d907      	bls.n	801332c <_fx_directory_entry_write+0x6ec>
 801331c:	697b      	ldr	r3, [r7, #20]
 801331e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8013322:	f8d3 34a8 	ldr.w	r3, [r3, #1192]	; 0x4a8
 8013326:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013328:	429a      	cmp	r2, r3
 801332a:	d301      	bcc.n	8013330 <_fx_directory_entry_write+0x6f0>
                        {

                            /* Send error message back to caller.  */
                            return(FX_FILE_CORRUPT);
 801332c:	2308      	movs	r3, #8
 801332e:	e2bd      	b.n	80138ac <_fx_directory_entry_write+0xc6c>
                        }

                        /* Setup the relative sector (this is zero for subsequent cluster.  */
                        relative_sector =  0;
 8013330:	2300      	movs	r3, #0
 8013332:	63bb      	str	r3, [r7, #56]	; 0x38

                        /* Calculate the next logical sector.  */
                        logical_sector =   ((ULONG)media_ptr -> fx_media_data_sector_start) +
 8013334:	697b      	ldr	r3, [r7, #20]
 8013336:	6d1a      	ldr	r2, [r3, #80]	; 0x50
                            (((ULONG)cluster - FX_FAT_ENTRY_START) *
 8013338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801333a:	3b02      	subs	r3, #2
                             ((ULONG)media_ptr -> fx_media_sectors_per_cluster));
 801333c:	6979      	ldr	r1, [r7, #20]
 801333e:	6d49      	ldr	r1, [r1, #84]	; 0x54
                            (((ULONG)cluster - FX_FAT_ENTRY_START) *
 8013340:	fb01 f303 	mul.w	r3, r1, r3
                        logical_sector =   ((ULONG)media_ptr -> fx_media_data_sector_start) +
 8013344:	4413      	add	r3, r2
 8013346:	63fb      	str	r3, [r7, #60]	; 0x3c
 8013348:	e009      	b.n	801335e <_fx_directory_entry_write+0x71e>
                }
                else
                {

                    /* Increment the logical sector.  */
                    logical_sector++;
 801334a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801334c:	3301      	adds	r3, #1
 801334e:	63fb      	str	r3, [r7, #60]	; 0x3c

                    /* Determine if the logical sector is valid.  */
                    if (logical_sector >= (ULONG)(media_ptr -> fx_media_data_sector_start))
 8013350:	697b      	ldr	r3, [r7, #20]
 8013352:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013354:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013356:	429a      	cmp	r2, r3
 8013358:	d301      	bcc.n	801335e <_fx_directory_entry_write+0x71e>
                    {

                        /* We have exceeded the root directory.  */

                        /* Send error message back to caller.  */
                        return(FX_FILE_CORRUPT);
 801335a:	2308      	movs	r3, #8
 801335c:	e2a6      	b.n	80138ac <_fx_directory_entry_write+0xc6c>
                    }
                }

                /* Read the sector.  */
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 801335e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013360:	2200      	movs	r2, #0
 8013362:	603b      	str	r3, [r7, #0]
 8013364:	607a      	str	r2, [r7, #4]
                                                          media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_DIRECTORY_SECTOR);
 8013366:	697b      	ldr	r3, [r7, #20]
 8013368:	689b      	ldr	r3, [r3, #8]
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 801336a:	2203      	movs	r2, #3
 801336c:	9202      	str	r2, [sp, #8]
 801336e:	2201      	movs	r2, #1
 8013370:	9201      	str	r2, [sp, #4]
 8013372:	9300      	str	r3, [sp, #0]
 8013374:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013378:	6978      	ldr	r0, [r7, #20]
 801337a:	f007 fdff 	bl	801af7c <_fx_utility_logical_sector_read>
 801337e:	62f8      	str	r0, [r7, #44]	; 0x2c

                /* Determine if an error occurred.  */
                if (status != FX_SUCCESS)
 8013380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013382:	2b00      	cmp	r3, #0
 8013384:	d001      	beq.n	801338a <_fx_directory_entry_write+0x74a>
                {

                    /* Return the error status.  */
                    return(status);
 8013386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013388:	e290      	b.n	80138ac <_fx_directory_entry_write+0xc6c>
                }

                /* Setup logical sector.  */
                sector_base_ptr = media_ptr -> fx_media_memory_buffer;
 801338a:	697b      	ldr	r3, [r7, #20]
 801338c:	689b      	ldr	r3, [r3, #8]
 801338e:	673b      	str	r3, [r7, #112]	; 0x70

                /* Setup a fresh byte offset.  */
                byte_offset = 0;
 8013390:	2300      	movs	r3, #0
 8013392:	637b      	str	r3, [r7, #52]	; 0x34

                /* Setup a new pointer into the buffer.  */
                work_ptr = sector_base_ptr;
 8013394:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8013396:	677b      	str	r3, [r7, #116]	; 0x74
                changed_offset = 0;
#endif /* FX_ENABLE_FAULT_TOLERANT */
            }

            /* Decrement loop control.  */
            card--;
 8013398:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801339a:	3b01      	subs	r3, #1
 801339c:	657b      	str	r3, [r7, #84]	; 0x54
            work_ptr[0] = (UCHAR)card;
 801339e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80133a0:	b2da      	uxtb	r2, r3
 80133a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80133a4:	701a      	strb	r2, [r3, #0]
        while (card > 0)
 80133a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80133a8:	2b00      	cmp	r3, #0
 80133aa:	f47f af08 	bne.w	80131be <_fx_directory_entry_write+0x57e>
        }

        /* Determine if there is a short name.  */
        if (entry_ptr -> fx_dir_entry_short_name[0] == 0)
 80133ae:	693b      	ldr	r3, [r7, #16]
 80133b0:	791b      	ldrb	r3, [r3, #4]
 80133b2:	2b00      	cmp	r3, #0
 80133b4:	d116      	bne.n	80133e4 <_fx_directory_entry_write+0x7a4>
        {

            /* Loop to copy the new short file name.  */
            for (i = 0; i < (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE); i++)
 80133b6:	2300      	movs	r3, #0
 80133b8:	667b      	str	r3, [r7, #100]	; 0x64
 80133ba:	e00f      	b.n	80133dc <_fx_directory_entry_write+0x79c>
            {

                /* Pickup shortname character.  */
                alpha = shortname[i];
 80133bc:	f107 021c 	add.w	r2, r7, #28
 80133c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80133c2:	4413      	add	r3, r2
 80133c4:	781b      	ldrb	r3, [r3, #0]
 80133c6:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41

                /* Now store the short name character.  */
                *work_ptr++ =  (UCHAR)alpha;
 80133ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80133cc:	1c5a      	adds	r2, r3, #1
 80133ce:	677a      	str	r2, [r7, #116]	; 0x74
 80133d0:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 80133d4:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE); i++)
 80133d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80133d8:	3301      	adds	r3, #1
 80133da:	667b      	str	r3, [r7, #100]	; 0x64
 80133dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80133de:	2b0a      	cmp	r3, #10
 80133e0:	d9ec      	bls.n	80133bc <_fx_directory_entry_write+0x77c>
 80133e2:	e1a5      	b.n	8013730 <_fx_directory_entry_write+0xaf0>
        }
        else
        {

            /* Clear the short file name area.  */
            for (i = 0; i < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++)
 80133e4:	2300      	movs	r3, #0
 80133e6:	667b      	str	r3, [r7, #100]	; 0x64
 80133e8:	e007      	b.n	80133fa <_fx_directory_entry_write+0x7ba>
            {
                work_ptr[i] = ' ';
 80133ea:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80133ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80133ee:	4413      	add	r3, r2
 80133f0:	2220      	movs	r2, #32
 80133f2:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++)
 80133f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80133f6:	3301      	adds	r3, #1
 80133f8:	667b      	str	r3, [r7, #100]	; 0x64
 80133fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80133fc:	2b0a      	cmp	r3, #10
 80133fe:	d9f4      	bls.n	80133ea <_fx_directory_entry_write+0x7aa>
            }

            /* Loop to copy the old short file name.  */
            for (i = 0, j = 0; j < FX_DIR_NAME_SIZE; i++, j++)
 8013400:	2300      	movs	r3, #0
 8013402:	667b      	str	r3, [r7, #100]	; 0x64
 8013404:	2300      	movs	r3, #0
 8013406:	663b      	str	r3, [r7, #96]	; 0x60
 8013408:	e01c      	b.n	8013444 <_fx_directory_entry_write+0x804>
            {

                /* Check for end of copy conditions.  */
                if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == '.')
 801340a:	693a      	ldr	r2, [r7, #16]
 801340c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801340e:	4413      	add	r3, r2
 8013410:	3304      	adds	r3, #4
 8013412:	781b      	ldrb	r3, [r3, #0]
 8013414:	2b2e      	cmp	r3, #46	; 0x2e
 8013416:	d019      	beq.n	801344c <_fx_directory_entry_write+0x80c>
                {
                    break;
                }
                if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == 0)
 8013418:	693a      	ldr	r2, [r7, #16]
 801341a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801341c:	4413      	add	r3, r2
 801341e:	3304      	adds	r3, #4
 8013420:	781b      	ldrb	r3, [r3, #0]
 8013422:	2b00      	cmp	r3, #0
 8013424:	d014      	beq.n	8013450 <_fx_directory_entry_write+0x810>
                {
                    break;
                }

                /* Copy file name character.  */
                work_ptr[j] =  (UCHAR)entry_ptr -> fx_dir_entry_short_name[i];
 8013426:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8013428:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801342a:	4413      	add	r3, r2
 801342c:	6939      	ldr	r1, [r7, #16]
 801342e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8013430:	440a      	add	r2, r1
 8013432:	3204      	adds	r2, #4
 8013434:	7812      	ldrb	r2, [r2, #0]
 8013436:	701a      	strb	r2, [r3, #0]
            for (i = 0, j = 0; j < FX_DIR_NAME_SIZE; i++, j++)
 8013438:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801343a:	3301      	adds	r3, #1
 801343c:	667b      	str	r3, [r7, #100]	; 0x64
 801343e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013440:	3301      	adds	r3, #1
 8013442:	663b      	str	r3, [r7, #96]	; 0x60
 8013444:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013446:	2b07      	cmp	r3, #7
 8013448:	d9df      	bls.n	801340a <_fx_directory_entry_write+0x7ca>
 801344a:	e002      	b.n	8013452 <_fx_directory_entry_write+0x812>
                    break;
 801344c:	bf00      	nop
 801344e:	e000      	b.n	8013452 <_fx_directory_entry_write+0x812>
                    break;
 8013450:	bf00      	nop
            }

            /* Determine if there is anything left in the short file name.  */
            if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] != 0)
 8013452:	693a      	ldr	r2, [r7, #16]
 8013454:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013456:	4413      	add	r3, r2
 8013458:	3304      	adds	r3, #4
 801345a:	781b      	ldrb	r3, [r3, #0]
 801345c:	2b00      	cmp	r3, #0
 801345e:	d020      	beq.n	80134a2 <_fx_directory_entry_write+0x862>
            {

                /* Pickup remaining characters.  */
                for (i++, j = FX_DIR_NAME_SIZE; j < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++, j++)
 8013460:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013462:	3301      	adds	r3, #1
 8013464:	667b      	str	r3, [r7, #100]	; 0x64
 8013466:	2308      	movs	r3, #8
 8013468:	663b      	str	r3, [r7, #96]	; 0x60
 801346a:	e015      	b.n	8013498 <_fx_directory_entry_write+0x858>
                {

                    /* If NULL is encountered, stop the copying.  */
                    if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == 0)
 801346c:	693a      	ldr	r2, [r7, #16]
 801346e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013470:	4413      	add	r3, r2
 8013472:	3304      	adds	r3, #4
 8013474:	781b      	ldrb	r3, [r3, #0]
 8013476:	2b00      	cmp	r3, #0
 8013478:	d012      	beq.n	80134a0 <_fx_directory_entry_write+0x860>
                    {
                        break;
                    }

                    /* Copy file name character.  */
                    work_ptr[j] =  (UCHAR)entry_ptr -> fx_dir_entry_short_name[i];
 801347a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801347c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801347e:	4413      	add	r3, r2
 8013480:	6939      	ldr	r1, [r7, #16]
 8013482:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8013484:	440a      	add	r2, r1
 8013486:	3204      	adds	r2, #4
 8013488:	7812      	ldrb	r2, [r2, #0]
 801348a:	701a      	strb	r2, [r3, #0]
                for (i++, j = FX_DIR_NAME_SIZE; j < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++, j++)
 801348c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801348e:	3301      	adds	r3, #1
 8013490:	667b      	str	r3, [r7, #100]	; 0x64
 8013492:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013494:	3301      	adds	r3, #1
 8013496:	663b      	str	r3, [r7, #96]	; 0x60
 8013498:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801349a:	2b0a      	cmp	r3, #10
 801349c:	d9e6      	bls.n	801346c <_fx_directory_entry_write+0x82c>
 801349e:	e000      	b.n	80134a2 <_fx_directory_entry_write+0x862>
                        break;
 80134a0:	bf00      	nop
                }
            }

            /* Adjust the work pointer accordingly.  */
            work_ptr += (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE);
 80134a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80134a4:	330b      	adds	r3, #11
 80134a6:	677b      	str	r3, [r7, #116]	; 0x74
 80134a8:	e142      	b.n	8013730 <_fx_directory_entry_write+0xaf0>
    }
    else
    {

        /* Determine if long name was shorted.  */
        if (entry_ptr -> fx_dir_entry_long_name_shorted > 0)
 80134aa:	693b      	ldr	r3, [r7, #16]
 80134ac:	699b      	ldr	r3, [r3, #24]
 80134ae:	2b00      	cmp	r3, #0
 80134b0:	f000 80a1 	beq.w	80135f6 <_fx_directory_entry_write+0x9b6>
        {

            /* Check for a valid short name.  */
            if ((UCHAR)(0x40 | entry_ptr -> fx_dir_entry_long_name_shorted) == (UCHAR)(*work_ptr))
 80134b4:	693b      	ldr	r3, [r7, #16]
 80134b6:	699b      	ldr	r3, [r3, #24]
 80134b8:	b2db      	uxtb	r3, r3
 80134ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80134be:	b2da      	uxtb	r2, r3
 80134c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80134c2:	781b      	ldrb	r3, [r3, #0]
 80134c4:	429a      	cmp	r2, r3
 80134c6:	f040 8096 	bne.w	80135f6 <_fx_directory_entry_write+0x9b6>
            {

                /* Loop through the file name.  */
                for (j = 0; j < entry_ptr -> fx_dir_entry_long_name_shorted; j++)
 80134ca:	2300      	movs	r3, #0
 80134cc:	663b      	str	r3, [r7, #96]	; 0x60
 80134ce:	e08c      	b.n	80135ea <_fx_directory_entry_write+0x9aa>
                {

                    /* Check for a free entry to be written.  */
                    if ((UCHAR)entry_ptr -> fx_dir_entry_name[0] == (UCHAR)FX_DIR_ENTRY_FREE)
 80134d0:	693b      	ldr	r3, [r7, #16]
 80134d2:	681b      	ldr	r3, [r3, #0]
 80134d4:	781b      	ldrb	r3, [r3, #0]
 80134d6:	2be5      	cmp	r3, #229	; 0xe5
 80134d8:	d102      	bne.n	80134e0 <_fx_directory_entry_write+0x8a0>
                    {
                        /* Delete long parts.  */
                        work_ptr[0] =  (UCHAR)FX_DIR_ENTRY_FREE;
 80134da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80134dc:	22e5      	movs	r2, #229	; 0xe5
 80134de:	701a      	strb	r2, [r3, #0]
                    }

                    /* Setup pointers for the name write.  */
                    work_ptr += FX_DIR_ENTRY_SIZE;
 80134e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80134e2:	3320      	adds	r3, #32
 80134e4:	677b      	str	r3, [r7, #116]	; 0x74
                    byte_offset += FX_DIR_ENTRY_SIZE;
 80134e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80134e8:	3320      	adds	r3, #32
 80134ea:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Update changed_size. */
                    changed_size += FX_DIR_ENTRY_SIZE;
#endif /* FX_ENABLE_FAULT_TOLERANT */

                    /* Determine if the write is within the current sector.   */
                    if (byte_offset >= media_ptr -> fx_media_bytes_per_sector)
 80134ec:	697b      	ldr	r3, [r7, #20]
 80134ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80134f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80134f2:	429a      	cmp	r2, r3
 80134f4:	d376      	bcc.n	80135e4 <_fx_directory_entry_write+0x9a4>
                        else
                        {
#endif /* FX_ENABLE_FAULT_TOLERANT */

                            /* Write the current sector out.  */
                            status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) logical_sector,
 80134f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80134f8:	2200      	movs	r2, #0
 80134fa:	4698      	mov	r8, r3
 80134fc:	4691      	mov	r9, r2
 80134fe:	2303      	movs	r3, #3
 8013500:	9302      	str	r3, [sp, #8]
 8013502:	2301      	movs	r3, #1
 8013504:	9301      	str	r3, [sp, #4]
 8013506:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8013508:	9300      	str	r3, [sp, #0]
 801350a:	4642      	mov	r2, r8
 801350c:	464b      	mov	r3, r9
 801350e:	6978      	ldr	r0, [r7, #20]
 8013510:	f007 ffc8 	bl	801b4a4 <_fx_utility_logical_sector_write>
 8013514:	62f8      	str	r0, [r7, #44]	; 0x2c
#ifdef FX_ENABLE_FAULT_TOLERANT
                        }
#endif /* FX_ENABLE_FAULT_TOLERANT */

                        /* Determine if an error occurred.  */
                        if (status != FX_SUCCESS)
 8013516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013518:	2b00      	cmp	r3, #0
 801351a:	d001      	beq.n	8013520 <_fx_directory_entry_write+0x8e0>
                        {

                            /* Return the error status.  */
                            return(status);
 801351c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801351e:	e1c5      	b.n	80138ac <_fx_directory_entry_write+0xc6c>
                        }

                        /* Determine if we are in the root directory.  */
                        if (logical_sector >= (ULONG)(media_ptr -> fx_media_data_sector_start))
 8013520:	697b      	ldr	r3, [r7, #20]
 8013522:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013524:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013526:	429a      	cmp	r2, r3
 8013528:	d335      	bcc.n	8013596 <_fx_directory_entry_write+0x956>
                        {

                            /* Determine the next sector of the directory entry.  */
                            if (relative_sector < (media_ptr -> fx_media_sectors_per_cluster - 1))
 801352a:	697b      	ldr	r3, [r7, #20]
 801352c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801352e:	3b01      	subs	r3, #1
 8013530:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013532:	429a      	cmp	r2, r3
 8013534:	d206      	bcs.n	8013544 <_fx_directory_entry_write+0x904>
                            {

                                /* More sectors in this cluster.  */

                                /* Simply increment the logical sector.  */
                                logical_sector++;
 8013536:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013538:	3301      	adds	r3, #1
 801353a:	63fb      	str	r3, [r7, #60]	; 0x3c

                                /* Increment the relative sector.  */
                                relative_sector++;
 801353c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801353e:	3301      	adds	r3, #1
 8013540:	63bb      	str	r3, [r7, #56]	; 0x38
 8013542:	e032      	b.n	80135aa <_fx_directory_entry_write+0x96a>
                            {

                                /* We need to move to the next cluster.  */

                                /* Pickup the next cluster.  */
                                status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &next_cluster);
 8013544:	f107 0318 	add.w	r3, r7, #24
 8013548:	461a      	mov	r2, r3
 801354a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801354c:	6978      	ldr	r0, [r7, #20]
 801354e:	f006 f907 	bl	8019760 <_fx_utility_FAT_entry_read>
 8013552:	62f8      	str	r0, [r7, #44]	; 0x2c

                                /* Check for I/O error.  */
                                if (status != FX_SUCCESS)
 8013554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013556:	2b00      	cmp	r3, #0
 8013558:	d001      	beq.n	801355e <_fx_directory_entry_write+0x91e>
                                {

                                    /* Return error code.  */
                                    return(status);
 801355a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801355c:	e1a6      	b.n	80138ac <_fx_directory_entry_write+0xc6c>
                                }

                                /* Copy next cluster to the current cluster.  */
                                cluster =  next_cluster;
 801355e:	69bb      	ldr	r3, [r7, #24]
 8013560:	633b      	str	r3, [r7, #48]	; 0x30

                                /* Check the value of the new cluster - it must be a valid cluster number
                                   or something is really wrong!  */
                                if ((cluster < FX_FAT_ENTRY_START) || (cluster >= media_ptr -> fx_media_fat_reserved))
 8013562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013564:	2b01      	cmp	r3, #1
 8013566:	d907      	bls.n	8013578 <_fx_directory_entry_write+0x938>
 8013568:	697b      	ldr	r3, [r7, #20]
 801356a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 801356e:	f8d3 34a8 	ldr.w	r3, [r3, #1192]	; 0x4a8
 8013572:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013574:	429a      	cmp	r2, r3
 8013576:	d301      	bcc.n	801357c <_fx_directory_entry_write+0x93c>
                                {

                                    /* Send error message back to caller.  */
                                    return(FX_FILE_CORRUPT);
 8013578:	2308      	movs	r3, #8
 801357a:	e197      	b.n	80138ac <_fx_directory_entry_write+0xc6c>
                                }

                                /* Setup the relative sector (this is zero for subsequent cluster.  */
                                relative_sector =  0;
 801357c:	2300      	movs	r3, #0
 801357e:	63bb      	str	r3, [r7, #56]	; 0x38

                                /* Calculate the next logical sector.  */
                                logical_sector =   ((ULONG)media_ptr -> fx_media_data_sector_start) +
 8013580:	697b      	ldr	r3, [r7, #20]
 8013582:	6d1a      	ldr	r2, [r3, #80]	; 0x50
                                    (((ULONG)cluster - FX_FAT_ENTRY_START) *
 8013584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013586:	3b02      	subs	r3, #2
                                     ((ULONG)media_ptr -> fx_media_sectors_per_cluster));
 8013588:	6979      	ldr	r1, [r7, #20]
 801358a:	6d49      	ldr	r1, [r1, #84]	; 0x54
                                    (((ULONG)cluster - FX_FAT_ENTRY_START) *
 801358c:	fb01 f303 	mul.w	r3, r1, r3
                                logical_sector =   ((ULONG)media_ptr -> fx_media_data_sector_start) +
 8013590:	4413      	add	r3, r2
 8013592:	63fb      	str	r3, [r7, #60]	; 0x3c
 8013594:	e009      	b.n	80135aa <_fx_directory_entry_write+0x96a>
                        }
                        else
                        {

                            /* Increment the logical sector.  */
                            logical_sector++;
 8013596:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013598:	3301      	adds	r3, #1
 801359a:	63fb      	str	r3, [r7, #60]	; 0x3c

                            /* Determine if the logical sector is valid.  */
                            if (logical_sector >= (ULONG)(media_ptr -> fx_media_data_sector_start))
 801359c:	697b      	ldr	r3, [r7, #20]
 801359e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80135a0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80135a2:	429a      	cmp	r2, r3
 80135a4:	d301      	bcc.n	80135aa <_fx_directory_entry_write+0x96a>
                            {

                                /* We have exceeded the root directory.  */

                                /* Send error message back to caller.  */
                                return(FX_FILE_CORRUPT);
 80135a6:	2308      	movs	r3, #8
 80135a8:	e180      	b.n	80138ac <_fx_directory_entry_write+0xc6c>
                            }
                        }

                        /* Read the next logical sector.  */
                        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 80135aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80135ac:	2200      	movs	r2, #0
 80135ae:	469a      	mov	sl, r3
 80135b0:	4693      	mov	fp, r2
                                                                  media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_DIRECTORY_SECTOR);
 80135b2:	697b      	ldr	r3, [r7, #20]
 80135b4:	689b      	ldr	r3, [r3, #8]
                        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 80135b6:	2203      	movs	r2, #3
 80135b8:	9202      	str	r2, [sp, #8]
 80135ba:	2201      	movs	r2, #1
 80135bc:	9201      	str	r2, [sp, #4]
 80135be:	9300      	str	r3, [sp, #0]
 80135c0:	4652      	mov	r2, sl
 80135c2:	465b      	mov	r3, fp
 80135c4:	6978      	ldr	r0, [r7, #20]
 80135c6:	f007 fcd9 	bl	801af7c <_fx_utility_logical_sector_read>
 80135ca:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* Determine if an error occurred.  */
                        if (status != FX_SUCCESS)
 80135cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80135ce:	2b00      	cmp	r3, #0
 80135d0:	d001      	beq.n	80135d6 <_fx_directory_entry_write+0x996>
                        {

                            /* Return the error status.  */
                            return(status);
 80135d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80135d4:	e16a      	b.n	80138ac <_fx_directory_entry_write+0xc6c>
                        }

                        /* Move to the next sector buffer.  */
                        sector_base_ptr = media_ptr -> fx_media_memory_buffer;
 80135d6:	697b      	ldr	r3, [r7, #20]
 80135d8:	689b      	ldr	r3, [r3, #8]
 80135da:	673b      	str	r3, [r7, #112]	; 0x70

                        /* Setup new buffer pointers.  */
                        byte_offset =  0;
 80135dc:	2300      	movs	r3, #0
 80135de:	637b      	str	r3, [r7, #52]	; 0x34
                        work_ptr = sector_base_ptr;
 80135e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80135e2:	677b      	str	r3, [r7, #116]	; 0x74
                for (j = 0; j < entry_ptr -> fx_dir_entry_long_name_shorted; j++)
 80135e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80135e6:	3301      	adds	r3, #1
 80135e8:	663b      	str	r3, [r7, #96]	; 0x60
 80135ea:	693b      	ldr	r3, [r7, #16]
 80135ec:	699b      	ldr	r3, [r3, #24]
 80135ee:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80135f0:	429a      	cmp	r2, r3
 80135f2:	f4ff af6d 	bcc.w	80134d0 <_fx_directory_entry_write+0x890>
                }
            }
        }

        /* This is an 8.3 name.  First clear the directory name.  */
        for (j = 0; j < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; j++)
 80135f6:	2300      	movs	r3, #0
 80135f8:	663b      	str	r3, [r7, #96]	; 0x60
 80135fa:	e007      	b.n	801360c <_fx_directory_entry_write+0x9cc>
        {
            work_ptr[j] = ' ';
 80135fc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80135fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013600:	4413      	add	r3, r2
 8013602:	2220      	movs	r2, #32
 8013604:	701a      	strb	r2, [r3, #0]
        for (j = 0; j < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; j++)
 8013606:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013608:	3301      	adds	r3, #1
 801360a:	663b      	str	r3, [r7, #96]	; 0x60
 801360c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801360e:	2b0a      	cmp	r3, #10
 8013610:	d9f4      	bls.n	80135fc <_fx_directory_entry_write+0x9bc>
        }

        /* Copy leading dots in case of first two entries of a directory.  */
        for (i = 0; (UCHAR)entry_ptr -> fx_dir_entry_name[i] == '.'; i++)
 8013612:	2300      	movs	r3, #0
 8013614:	667b      	str	r3, [r7, #100]	; 0x64
 8013616:	e007      	b.n	8013628 <_fx_directory_entry_write+0x9e8>
        {
            work_ptr[i] = '.';
 8013618:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801361a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801361c:	4413      	add	r3, r2
 801361e:	222e      	movs	r2, #46	; 0x2e
 8013620:	701a      	strb	r2, [r3, #0]
        for (i = 0; (UCHAR)entry_ptr -> fx_dir_entry_name[i] == '.'; i++)
 8013622:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013624:	3301      	adds	r3, #1
 8013626:	667b      	str	r3, [r7, #100]	; 0x64
 8013628:	693b      	ldr	r3, [r7, #16]
 801362a:	681a      	ldr	r2, [r3, #0]
 801362c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801362e:	4413      	add	r3, r2
 8013630:	781b      	ldrb	r3, [r3, #0]
 8013632:	2b2e      	cmp	r3, #46	; 0x2e
 8013634:	d0f0      	beq.n	8013618 <_fx_directory_entry_write+0x9d8>
        }

        /* Determine if there are more characters to copy.  */
        if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] != 0)
 8013636:	693b      	ldr	r3, [r7, #16]
 8013638:	681a      	ldr	r2, [r3, #0]
 801363a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801363c:	4413      	add	r3, r2
 801363e:	781b      	ldrb	r3, [r3, #0]
 8013640:	2b00      	cmp	r3, #0
 8013642:	d039      	beq.n	80136b8 <_fx_directory_entry_write+0xa78>
        {

            /* Copy directory name.  */
            for (i = 0, j = 0; j < FX_DIR_NAME_SIZE; i++, j++)
 8013644:	2300      	movs	r3, #0
 8013646:	667b      	str	r3, [r7, #100]	; 0x64
 8013648:	2300      	movs	r3, #0
 801364a:	663b      	str	r3, [r7, #96]	; 0x60
 801364c:	e02d      	b.n	80136aa <_fx_directory_entry_write+0xa6a>
            {

                /* Check for end of copy conditions.  */
                if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] == '.')
 801364e:	693b      	ldr	r3, [r7, #16]
 8013650:	681a      	ldr	r2, [r3, #0]
 8013652:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013654:	4413      	add	r3, r2
 8013656:	781b      	ldrb	r3, [r3, #0]
 8013658:	2b2e      	cmp	r3, #46	; 0x2e
 801365a:	d02a      	beq.n	80136b2 <_fx_directory_entry_write+0xa72>
                {
                    break;
                }
                if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] == 0)
 801365c:	693b      	ldr	r3, [r7, #16]
 801365e:	681a      	ldr	r2, [r3, #0]
 8013660:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013662:	4413      	add	r3, r2
 8013664:	781b      	ldrb	r3, [r3, #0]
 8013666:	2b00      	cmp	r3, #0
 8013668:	d025      	beq.n	80136b6 <_fx_directory_entry_write+0xa76>
                {
                    break;
                }

                /* Pickup shortname character.  */
                alpha = entry_ptr -> fx_dir_entry_name[i];
 801366a:	693b      	ldr	r3, [r7, #16]
 801366c:	681a      	ldr	r2, [r3, #0]
 801366e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013670:	4413      	add	r3, r2
 8013672:	781b      	ldrb	r3, [r3, #0]
 8013674:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41

                /* Determine if character is lower case.  */
                if ((alpha >= 'a') && (alpha <= 'z'))
 8013678:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 801367c:	2b60      	cmp	r3, #96	; 0x60
 801367e:	d908      	bls.n	8013692 <_fx_directory_entry_write+0xa52>
 8013680:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8013684:	2b7a      	cmp	r3, #122	; 0x7a
 8013686:	d804      	bhi.n	8013692 <_fx_directory_entry_write+0xa52>
                {

                    /* Store the character - converted to upper case.  */
                    alpha =  (CHAR)(alpha - ((CHAR)0x20));
 8013688:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 801368c:	3b20      	subs	r3, #32
 801368e:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
                }

                /* Copy a name character.  */
                work_ptr[j] =  (UCHAR)alpha;
 8013692:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8013694:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013696:	4413      	add	r3, r2
 8013698:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 801369c:	701a      	strb	r2, [r3, #0]
            for (i = 0, j = 0; j < FX_DIR_NAME_SIZE; i++, j++)
 801369e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80136a0:	3301      	adds	r3, #1
 80136a2:	667b      	str	r3, [r7, #100]	; 0x64
 80136a4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80136a6:	3301      	adds	r3, #1
 80136a8:	663b      	str	r3, [r7, #96]	; 0x60
 80136aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80136ac:	2b07      	cmp	r3, #7
 80136ae:	d9ce      	bls.n	801364e <_fx_directory_entry_write+0xa0e>
 80136b0:	e002      	b.n	80136b8 <_fx_directory_entry_write+0xa78>
                    break;
 80136b2:	bf00      	nop
 80136b4:	e000      	b.n	80136b8 <_fx_directory_entry_write+0xa78>
                    break;
 80136b6:	bf00      	nop
            }
        }

        /* Determine if there are more characters in the name.  */
        if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] != 0)
 80136b8:	693b      	ldr	r3, [r7, #16]
 80136ba:	681a      	ldr	r2, [r3, #0]
 80136bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80136be:	4413      	add	r3, r2
 80136c0:	781b      	ldrb	r3, [r3, #0]
 80136c2:	2b00      	cmp	r3, #0
 80136c4:	d031      	beq.n	801372a <_fx_directory_entry_write+0xaea>
        {

            /* Loop to copy the remainder of the name.  */
            for (i++, j = FX_DIR_NAME_SIZE; j < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++, j++)
 80136c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80136c8:	3301      	adds	r3, #1
 80136ca:	667b      	str	r3, [r7, #100]	; 0x64
 80136cc:	2308      	movs	r3, #8
 80136ce:	663b      	str	r3, [r7, #96]	; 0x60
 80136d0:	e026      	b.n	8013720 <_fx_directory_entry_write+0xae0>
            {

                /* Check for end of copy conditions.  */
                if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] == 0)
 80136d2:	693b      	ldr	r3, [r7, #16]
 80136d4:	681a      	ldr	r2, [r3, #0]
 80136d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80136d8:	4413      	add	r3, r2
 80136da:	781b      	ldrb	r3, [r3, #0]
 80136dc:	2b00      	cmp	r3, #0
 80136de:	d023      	beq.n	8013728 <_fx_directory_entry_write+0xae8>
                {
                    break;
                }

                /* Pickup shortname character.  */
                alpha = entry_ptr -> fx_dir_entry_name[i];
 80136e0:	693b      	ldr	r3, [r7, #16]
 80136e2:	681a      	ldr	r2, [r3, #0]
 80136e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80136e6:	4413      	add	r3, r2
 80136e8:	781b      	ldrb	r3, [r3, #0]
 80136ea:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41

                /* Determine if character is lower case.  */
                if ((alpha >= 'a') && (alpha <= 'z'))
 80136ee:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 80136f2:	2b60      	cmp	r3, #96	; 0x60
 80136f4:	d908      	bls.n	8013708 <_fx_directory_entry_write+0xac8>
 80136f6:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 80136fa:	2b7a      	cmp	r3, #122	; 0x7a
 80136fc:	d804      	bhi.n	8013708 <_fx_directory_entry_write+0xac8>
                {

                    /* Store the character - converted to upper case.  */
                    alpha =  (CHAR)(alpha - ((CHAR)0x20));
 80136fe:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8013702:	3b20      	subs	r3, #32
 8013704:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
                }

                /* Copy a name character.  */
                work_ptr[j] =  (UCHAR)alpha;
 8013708:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801370a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801370c:	4413      	add	r3, r2
 801370e:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 8013712:	701a      	strb	r2, [r3, #0]
            for (i++, j = FX_DIR_NAME_SIZE; j < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++, j++)
 8013714:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013716:	3301      	adds	r3, #1
 8013718:	667b      	str	r3, [r7, #100]	; 0x64
 801371a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801371c:	3301      	adds	r3, #1
 801371e:	663b      	str	r3, [r7, #96]	; 0x60
 8013720:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013722:	2b0a      	cmp	r3, #10
 8013724:	d9d5      	bls.n	80136d2 <_fx_directory_entry_write+0xa92>
 8013726:	e000      	b.n	801372a <_fx_directory_entry_write+0xaea>
                    break;
 8013728:	bf00      	nop
            }
        }

        /* Move to the next entry.  */
        work_ptr += (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE);
 801372a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801372c:	330b      	adds	r3, #11
 801372e:	677b      	str	r3, [r7, #116]	; 0x74
    }

    /* Write out the 8.3 part of the name. */

    /* Copy the attribute into the destination.  */
    *work_ptr++ =  entry_ptr -> fx_dir_entry_attributes;
 8013730:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8013732:	1c5a      	adds	r2, r3, #1
 8013734:	677a      	str	r2, [r7, #116]	; 0x74
 8013736:	693a      	ldr	r2, [r7, #16]
 8013738:	7f12      	ldrb	r2, [r2, #28]
 801373a:	701a      	strb	r2, [r3, #0]

    /* Copy the reserved byte.  */
    *work_ptr++ =  entry_ptr -> fx_dir_entry_reserved;
 801373c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801373e:	1c5a      	adds	r2, r3, #1
 8013740:	677a      	str	r2, [r7, #116]	; 0x74
 8013742:	693a      	ldr	r2, [r7, #16]
 8013744:	7f52      	ldrb	r2, [r2, #29]
 8013746:	701a      	strb	r2, [r3, #0]

    /* Copy the created time in milliseconds.  */
    *work_ptr++ =  entry_ptr -> fx_dir_entry_created_time_ms;
 8013748:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801374a:	1c5a      	adds	r2, r3, #1
 801374c:	677a      	str	r2, [r7, #116]	; 0x74
 801374e:	693a      	ldr	r2, [r7, #16]
 8013750:	7f92      	ldrb	r2, [r2, #30]
 8013752:	701a      	strb	r2, [r3, #0]

    /* Copy the created time.  */
    _fx_utility_16_unsigned_write(work_ptr, entry_ptr -> fx_dir_entry_created_time);
 8013754:	693b      	ldr	r3, [r7, #16]
 8013756:	6a1b      	ldr	r3, [r3, #32]
 8013758:	4619      	mov	r1, r3
 801375a:	6f78      	ldr	r0, [r7, #116]	; 0x74
 801375c:	f005 ffad 	bl	80196ba <_fx_utility_16_unsigned_write>
    work_ptr =  work_ptr + 2;  /* Always 2 bytes  */
 8013760:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8013762:	3302      	adds	r3, #2
 8013764:	677b      	str	r3, [r7, #116]	; 0x74

    /* Copy the created date.  */
    _fx_utility_16_unsigned_write(work_ptr, entry_ptr -> fx_dir_entry_created_date);
 8013766:	693b      	ldr	r3, [r7, #16]
 8013768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801376a:	4619      	mov	r1, r3
 801376c:	6f78      	ldr	r0, [r7, #116]	; 0x74
 801376e:	f005 ffa4 	bl	80196ba <_fx_utility_16_unsigned_write>
    work_ptr =  work_ptr + 2;  /* Always 2 bytes  */
 8013772:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8013774:	3302      	adds	r3, #2
 8013776:	677b      	str	r3, [r7, #116]	; 0x74

    /* Copy the last accessed date.  */
    _fx_utility_16_unsigned_write(work_ptr, entry_ptr -> fx_dir_entry_last_accessed_date);
 8013778:	693b      	ldr	r3, [r7, #16]
 801377a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801377c:	4619      	mov	r1, r3
 801377e:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8013780:	f005 ff9b 	bl	80196ba <_fx_utility_16_unsigned_write>
    work_ptr =  work_ptr + 2;  /* Always 2 bytes  */
 8013784:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8013786:	3302      	adds	r3, #2
 8013788:	677b      	str	r3, [r7, #116]	; 0x74

    /* Determine if a FAT32 entry is present.  */
    if (media_ptr -> fx_media_32_bit_FAT)
 801378a:	697b      	ldr	r3, [r7, #20]
 801378c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801378e:	2b00      	cmp	r3, #0
 8013790:	d008      	beq.n	80137a4 <_fx_directory_entry_write+0xb64>
    {

        /* Yes, FAT32 is present, store upper half of cluster.  */
        temp = (entry_ptr -> fx_dir_entry_cluster >> 16);
 8013792:	693b      	ldr	r3, [r7, #16]
 8013794:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013796:	0c1b      	lsrs	r3, r3, #16
 8013798:	66fb      	str	r3, [r7, #108]	; 0x6c
        _fx_utility_16_unsigned_write(work_ptr, temp);
 801379a:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 801379c:	6f78      	ldr	r0, [r7, #116]	; 0x74
 801379e:	f005 ff8c 	bl	80196ba <_fx_utility_16_unsigned_write>
 80137a2:	e003      	b.n	80137ac <_fx_directory_entry_write+0xb6c>
    else
    {

        /* No, FAT16 or FAT12 is present, just write a 0 for
           the upper half of the cluster.  */
        _fx_utility_16_unsigned_write(work_ptr, 0);
 80137a4:	2100      	movs	r1, #0
 80137a6:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80137a8:	f005 ff87 	bl	80196ba <_fx_utility_16_unsigned_write>
    }

    /* Advance the entry pointer.  */
    work_ptr =  work_ptr + 2;  /* Always 2 bytes  */
 80137ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80137ae:	3302      	adds	r3, #2
 80137b0:	677b      	str	r3, [r7, #116]	; 0x74

    /* Copy the time into the destination.  */
    _fx_utility_16_unsigned_write(work_ptr, entry_ptr -> fx_dir_entry_time);
 80137b2:	693b      	ldr	r3, [r7, #16]
 80137b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80137b6:	4619      	mov	r1, r3
 80137b8:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80137ba:	f005 ff7e 	bl	80196ba <_fx_utility_16_unsigned_write>
    work_ptr =  work_ptr + 2;  /* Always 2 bytes  */
 80137be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80137c0:	3302      	adds	r3, #2
 80137c2:	677b      	str	r3, [r7, #116]	; 0x74

    /* Copy the date into the destination.  */
    _fx_utility_16_unsigned_write(work_ptr, entry_ptr -> fx_dir_entry_date);
 80137c4:	693b      	ldr	r3, [r7, #16]
 80137c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80137c8:	4619      	mov	r1, r3
 80137ca:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80137cc:	f005 ff75 	bl	80196ba <_fx_utility_16_unsigned_write>
    work_ptr =  work_ptr + 2;  /* Always 2 bytes  */
 80137d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80137d2:	3302      	adds	r3, #2
 80137d4:	677b      	str	r3, [r7, #116]	; 0x74

    /* Copy the starting cluster into the destination.  */
    _fx_utility_16_unsigned_write(work_ptr, (UINT)entry_ptr -> fx_dir_entry_cluster);
 80137d6:	693b      	ldr	r3, [r7, #16]
 80137d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80137da:	4619      	mov	r1, r3
 80137dc:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80137de:	f005 ff6c 	bl	80196ba <_fx_utility_16_unsigned_write>
    work_ptr =  work_ptr + 2;  /* Always 2 bytes  */
 80137e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80137e4:	3302      	adds	r3, #2
 80137e6:	677b      	str	r3, [r7, #116]	; 0x74

    /* Copy the file size into the destination.  */
    _fx_utility_32_unsigned_write(work_ptr, (ULONG)entry_ptr -> fx_dir_entry_file_size);
 80137e8:	693b      	ldr	r3, [r7, #16]
 80137ea:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80137ee:	4613      	mov	r3, r2
 80137f0:	4619      	mov	r1, r3
 80137f2:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80137f4:	f005 ff93 	bl	801971e <_fx_utility_32_unsigned_write>
    else
    {
#endif /* FX_ENABLE_FAULT_TOLERANT */

        /* Write the directory sector to the media.  */
        status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) logical_sector,
 80137f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80137fa:	2200      	movs	r2, #0
 80137fc:	461c      	mov	r4, r3
 80137fe:	4615      	mov	r5, r2
 8013800:	2303      	movs	r3, #3
 8013802:	9302      	str	r3, [sp, #8]
 8013804:	2301      	movs	r3, #1
 8013806:	9301      	str	r3, [sp, #4]
 8013808:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801380a:	9300      	str	r3, [sp, #0]
 801380c:	4622      	mov	r2, r4
 801380e:	462b      	mov	r3, r5
 8013810:	6978      	ldr	r0, [r7, #20]
 8013812:	f007 fe47 	bl	801b4a4 <_fx_utility_logical_sector_write>
 8013816:	62f8      	str	r0, [r7, #44]	; 0x2c
#ifdef FX_ENABLE_FAULT_TOLERANT
    }
#endif /* FX_ENABLE_FAULT_TOLERANT */

    /* Determine if an error occurred.  */
    if (status != FX_SUCCESS)
 8013818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801381a:	2b00      	cmp	r3, #0
 801381c:	d001      	beq.n	8013822 <_fx_directory_entry_write+0xbe2>
    {

        /* Return the error status.  */
        return(status);
 801381e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013820:	e044      	b.n	80138ac <_fx_directory_entry_write+0xc6c>

#ifndef FX_MEDIA_DISABLE_SEARCH_CACHE

    /* Determine if there is a previously found directory entry in the directory
       search cache.  */
    if (media_ptr -> fx_media_last_found_name[0])
 8013822:	697b      	ldr	r3, [r7, #20]
 8013824:	f893 33e0 	ldrb.w	r3, [r3, #992]	; 0x3e0
 8013828:	2b00      	cmp	r3, #0
 801382a:	d03e      	beq.n	80138aa <_fx_directory_entry_write+0xc6a>
    {

        /* Determine if the cached search directory entry matches the directory entry being
           written.  */
        if ((entry_ptr -> fx_dir_entry_log_sector == media_ptr -> fx_media_last_found_entry.fx_dir_entry_log_sector) &&
 801382c:	693b      	ldr	r3, [r7, #16]
 801382e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8013832:	697b      	ldr	r3, [r7, #20]
 8013834:	e9d3 23ac 	ldrd	r2, r3, [r3, #688]	; 0x2b0
 8013838:	4299      	cmp	r1, r3
 801383a:	bf08      	it	eq
 801383c:	4290      	cmpeq	r0, r2
 801383e:	d134      	bne.n	80138aa <_fx_directory_entry_write+0xc6a>
            (entry_ptr -> fx_dir_entry_byte_offset == media_ptr -> fx_media_last_found_entry.fx_dir_entry_byte_offset))
 8013840:	693b      	ldr	r3, [r7, #16]
 8013842:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8013844:	697b      	ldr	r3, [r7, #20]
 8013846:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
        if ((entry_ptr -> fx_dir_entry_log_sector == media_ptr -> fx_media_last_found_entry.fx_dir_entry_log_sector) &&
 801384a:	429a      	cmp	r2, r3
 801384c:	d12d      	bne.n	80138aa <_fx_directory_entry_write+0xc6a>
        {

            /* Yes, this entry is the same as the one currently in the directory search cache.
               Update various fields in the directory search cache with the information being
               written now.  */
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_cluster =         entry_ptr -> fx_dir_entry_cluster;
 801384e:	693b      	ldr	r3, [r7, #16]
 8013850:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8013852:	697b      	ldr	r3, [r7, #20]
 8013854:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_file_size =       entry_ptr -> fx_dir_entry_file_size;
 8013858:	693b      	ldr	r3, [r7, #16]
 801385a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 801385e:	6979      	ldr	r1, [r7, #20]
 8013860:	e9c1 23aa 	strd	r2, r3, [r1, #680]	; 0x2a8
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_attributes =      entry_ptr -> fx_dir_entry_attributes;
 8013864:	693b      	ldr	r3, [r7, #16]
 8013866:	7f1a      	ldrb	r2, [r3, #28]
 8013868:	697b      	ldr	r3, [r7, #20]
 801386a:	f883 228c 	strb.w	r2, [r3, #652]	; 0x28c
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_time =            entry_ptr -> fx_dir_entry_time;
 801386e:	693b      	ldr	r3, [r7, #16]
 8013870:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013872:	697b      	ldr	r3, [r7, #20]
 8013874:	f8c3 229c 	str.w	r2, [r3, #668]	; 0x29c
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_date =            entry_ptr -> fx_dir_entry_date;
 8013878:	693b      	ldr	r3, [r7, #16]
 801387a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801387c:	697b      	ldr	r3, [r7, #20]
 801387e:	f8c3 22a0 	str.w	r2, [r3, #672]	; 0x2a0
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_reserved =        entry_ptr -> fx_dir_entry_reserved;
 8013882:	693b      	ldr	r3, [r7, #16]
 8013884:	7f5a      	ldrb	r2, [r3, #29]
 8013886:	697b      	ldr	r3, [r7, #20]
 8013888:	f883 228d 	strb.w	r2, [r3, #653]	; 0x28d
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_created_time_ms = entry_ptr -> fx_dir_entry_created_time_ms;
 801388c:	693b      	ldr	r3, [r7, #16]
 801388e:	7f9a      	ldrb	r2, [r3, #30]
 8013890:	697b      	ldr	r3, [r7, #20]
 8013892:	f883 228e 	strb.w	r2, [r3, #654]	; 0x28e
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_created_time =    entry_ptr -> fx_dir_entry_created_time;
 8013896:	693b      	ldr	r3, [r7, #16]
 8013898:	6a1a      	ldr	r2, [r3, #32]
 801389a:	697b      	ldr	r3, [r7, #20]
 801389c:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_created_date =    entry_ptr -> fx_dir_entry_created_date;
 80138a0:	693b      	ldr	r3, [r7, #16]
 80138a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80138a4:	697b      	ldr	r3, [r7, #20]
 80138a6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        }
    }
#endif

    /* Return success to the caller.  */
    return(FX_SUCCESS);
 80138aa:	2300      	movs	r3, #0
}
 80138ac:	4618      	mov	r0, r3
 80138ae:	3778      	adds	r7, #120	; 0x78
 80138b0:	46bd      	mov	sp, r7
 80138b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80138b6:	bf00      	nop

080138b8 <_fx_directory_free_search>:
/*                                            check for sub directory,    */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _fx_directory_free_search(FX_MEDIA *media_ptr, FX_DIR_ENTRY *directory_ptr, FX_DIR_ENTRY *entry_ptr)
{
 80138b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80138bc:	b0a8      	sub	sp, #160	; 0xa0
 80138be:	af04      	add	r7, sp, #16
 80138c0:	6278      	str	r0, [r7, #36]	; 0x24
 80138c2:	6239      	str	r1, [r7, #32]
 80138c4:	61fa      	str	r2, [r7, #28]
#endif /* FX_ENABLE_EXFAT */

#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of directory free entry search requests.  */
    media_ptr -> fx_media_directory_free_searches++;
 80138c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138c8:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 80138cc:	1c5a      	adds	r2, r3, #1
 80138ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138d0:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174
#endif

    /* Initialize the entry sector values.  */
    entry_sector = entry_offset = 0;
 80138d4:	2300      	movs	r3, #0
 80138d6:	67bb      	str	r3, [r7, #120]	; 0x78
 80138d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80138da:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* Set the long file name flag to false.  */
    entry_ptr -> fx_dir_entry_long_name_present =  0;
 80138dc:	69fb      	ldr	r3, [r7, #28]
 80138de:	2200      	movs	r2, #0
 80138e0:	615a      	str	r2, [r3, #20]

    /* Are there leading dots?  */
    if (entry_ptr -> fx_dir_entry_name[0] == '.')
 80138e2:	69fb      	ldr	r3, [r7, #28]
 80138e4:	681b      	ldr	r3, [r3, #0]
 80138e6:	781b      	ldrb	r3, [r3, #0]
 80138e8:	2b2e      	cmp	r3, #46	; 0x2e
 80138ea:	d108      	bne.n	80138fe <_fx_directory_free_search+0x46>
    {

        /* Is there more than 1 dot?  */
        if (entry_ptr -> fx_dir_entry_name[1] == '.')
 80138ec:	69fb      	ldr	r3, [r7, #28]
 80138ee:	681b      	ldr	r3, [r3, #0]
 80138f0:	3301      	adds	r3, #1
 80138f2:	781b      	ldrb	r3, [r3, #0]
 80138f4:	2b2e      	cmp	r3, #46	; 0x2e
 80138f6:	d102      	bne.n	80138fe <_fx_directory_free_search+0x46>
        {
            /* Yes, consider the name invalid.  */
            return(FX_INVALID_NAME);
 80138f8:	230c      	movs	r3, #12
 80138fa:	f000 bc17 	b.w	801412c <_fx_directory_free_search+0x874>
        }
    }

    /* Determine if a long file name is present.  */
    for (i = 0, j = 0; entry_ptr -> fx_dir_entry_name[i]; i++)
 80138fe:	2300      	movs	r3, #0
 8013900:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8013904:	2300      	movs	r3, #0
 8013906:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 801390a:	e13d      	b.n	8013b88 <_fx_directory_free_search+0x2d0>
    {

        /* Check for upper-case characters.  */
        if ((entry_ptr -> fx_dir_entry_name[i] >= 'A') && (entry_ptr -> fx_dir_entry_name[i] <= 'Z'))
 801390c:	69fb      	ldr	r3, [r7, #28]
 801390e:	681a      	ldr	r2, [r3, #0]
 8013910:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8013914:	4413      	add	r3, r2
 8013916:	781b      	ldrb	r3, [r3, #0]
 8013918:	2b40      	cmp	r3, #64	; 0x40
 801391a:	d908      	bls.n	801392e <_fx_directory_free_search+0x76>
 801391c:	69fb      	ldr	r3, [r7, #28]
 801391e:	681a      	ldr	r2, [r3, #0]
 8013920:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8013924:	4413      	add	r3, r2
 8013926:	781b      	ldrb	r3, [r3, #0]
 8013928:	2b5a      	cmp	r3, #90	; 0x5a
 801392a:	f240 8121 	bls.w	8013b70 <_fx_directory_free_search+0x2b8>
        {
            continue;
        }
        /* Check for numeric characters.  */
        else if ((entry_ptr -> fx_dir_entry_name[i] >= '0') && (entry_ptr -> fx_dir_entry_name[i] <= '9'))
 801392e:	69fb      	ldr	r3, [r7, #28]
 8013930:	681a      	ldr	r2, [r3, #0]
 8013932:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8013936:	4413      	add	r3, r2
 8013938:	781b      	ldrb	r3, [r3, #0]
 801393a:	2b2f      	cmp	r3, #47	; 0x2f
 801393c:	d908      	bls.n	8013950 <_fx_directory_free_search+0x98>
 801393e:	69fb      	ldr	r3, [r7, #28]
 8013940:	681a      	ldr	r2, [r3, #0]
 8013942:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8013946:	4413      	add	r3, r2
 8013948:	781b      	ldrb	r3, [r3, #0]
 801394a:	2b39      	cmp	r3, #57	; 0x39
 801394c:	f240 8112 	bls.w	8013b74 <_fx_directory_free_search+0x2bc>
        {
            continue;
        }
        /* Check for any lower-case characters.  */
        else if ((entry_ptr -> fx_dir_entry_name[i] >= 'a') && (entry_ptr -> fx_dir_entry_name[i] <= 'z'))
 8013950:	69fb      	ldr	r3, [r7, #28]
 8013952:	681a      	ldr	r2, [r3, #0]
 8013954:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8013958:	4413      	add	r3, r2
 801395a:	781b      	ldrb	r3, [r3, #0]
 801395c:	2b60      	cmp	r3, #96	; 0x60
 801395e:	d90b      	bls.n	8013978 <_fx_directory_free_search+0xc0>
 8013960:	69fb      	ldr	r3, [r7, #28]
 8013962:	681a      	ldr	r2, [r3, #0]
 8013964:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8013968:	4413      	add	r3, r2
 801396a:	781b      	ldrb	r3, [r3, #0]
 801396c:	2b7a      	cmp	r3, #122	; 0x7a
 801396e:	d803      	bhi.n	8013978 <_fx_directory_free_search+0xc0>
        {
            entry_ptr -> fx_dir_entry_long_name_present =  1;
 8013970:	69fb      	ldr	r3, [r7, #28]
 8013972:	2201      	movs	r2, #1
 8013974:	615a      	str	r2, [r3, #20]
 8013976:	e102      	b.n	8013b7e <_fx_directory_free_search+0x2c6>
        }
        /* Check for a space in the middle of the name.  */
        else if (entry_ptr -> fx_dir_entry_name[i] == ' ')
 8013978:	69fb      	ldr	r3, [r7, #28]
 801397a:	681a      	ldr	r2, [r3, #0]
 801397c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8013980:	4413      	add	r3, r2
 8013982:	781b      	ldrb	r3, [r3, #0]
 8013984:	2b20      	cmp	r3, #32
 8013986:	d103      	bne.n	8013990 <_fx_directory_free_search+0xd8>
        {
            entry_ptr -> fx_dir_entry_long_name_present = 1;
 8013988:	69fb      	ldr	r3, [r7, #28]
 801398a:	2201      	movs	r2, #1
 801398c:	615a      	str	r2, [r3, #20]
 801398e:	e0f6      	b.n	8013b7e <_fx_directory_free_search+0x2c6>
        }
        /* Check for a dot in the name.  */
        else if (entry_ptr -> fx_dir_entry_name[i] == '.')
 8013990:	69fb      	ldr	r3, [r7, #28]
 8013992:	681a      	ldr	r2, [r3, #0]
 8013994:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8013998:	4413      	add	r3, r2
 801399a:	781b      	ldrb	r3, [r3, #0]
 801399c:	2b2e      	cmp	r3, #46	; 0x2e
 801399e:	d114      	bne.n	80139ca <_fx_directory_free_search+0x112>
        {
            /* Determine if this is the first dot detected.  */
            if (j == 0)
 80139a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80139a4:	2b00      	cmp	r3, #0
 80139a6:	d10c      	bne.n	80139c2 <_fx_directory_free_search+0x10a>
            {
                /* First dot, remember where it was.  */
                j = i;
 80139a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80139ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

                /* Determine if this is a leading dot.  */
                if (i == 0)
 80139b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80139b4:	2b00      	cmp	r3, #0
 80139b6:	f040 80e2 	bne.w	8013b7e <_fx_directory_free_search+0x2c6>
                {

                    /* Leading dot detected, treat as a long filename.  */
                    entry_ptr -> fx_dir_entry_long_name_present =  1;
 80139ba:	69fb      	ldr	r3, [r7, #28]
 80139bc:	2201      	movs	r2, #1
 80139be:	615a      	str	r2, [r3, #20]
 80139c0:	e0dd      	b.n	8013b7e <_fx_directory_free_search+0x2c6>
                }
            }
            else
            {
                /* Second dot detected, must have a long file name.  */
                entry_ptr -> fx_dir_entry_long_name_present = 1;
 80139c2:	69fb      	ldr	r3, [r7, #28]
 80139c4:	2201      	movs	r2, #1
 80139c6:	615a      	str	r2, [r3, #20]
 80139c8:	e0d9      	b.n	8013b7e <_fx_directory_free_search+0x2c6>
            }
        }
        /* Check for a special 0xE5 character.  */
        else if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] == (UCHAR)0xE5)
 80139ca:	69fb      	ldr	r3, [r7, #28]
 80139cc:	681a      	ldr	r2, [r3, #0]
 80139ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80139d2:	4413      	add	r3, r2
 80139d4:	781b      	ldrb	r3, [r3, #0]
 80139d6:	2be5      	cmp	r3, #229	; 0xe5
 80139d8:	d103      	bne.n	80139e2 <_fx_directory_free_search+0x12a>
        {
            entry_ptr -> fx_dir_entry_long_name_present = 1;
 80139da:	69fb      	ldr	r3, [r7, #28]
 80139dc:	2201      	movs	r2, #1
 80139de:	615a      	str	r2, [r3, #20]
 80139e0:	e0cd      	b.n	8013b7e <_fx_directory_free_search+0x2c6>
        }
        /* Check for code point value greater than 127.  */
        else if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] > (UCHAR)127)
 80139e2:	69fb      	ldr	r3, [r7, #28]
 80139e4:	681a      	ldr	r2, [r3, #0]
 80139e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80139ea:	4413      	add	r3, r2
 80139ec:	781b      	ldrb	r3, [r3, #0]
 80139ee:	b25b      	sxtb	r3, r3
 80139f0:	2b00      	cmp	r3, #0
 80139f2:	f2c0 80c1 	blt.w	8013b78 <_fx_directory_free_search+0x2c0>
        {
            continue;
        }
        /* Check for any special characters.  */
        else if ((entry_ptr -> fx_dir_entry_name[i] == '~') ||
 80139f6:	69fb      	ldr	r3, [r7, #28]
 80139f8:	681a      	ldr	r2, [r3, #0]
 80139fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80139fe:	4413      	add	r3, r2
 8013a00:	781b      	ldrb	r3, [r3, #0]
 8013a02:	2b7e      	cmp	r3, #126	; 0x7e
 8013a04:	f000 80ba 	beq.w	8013b7c <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == '-') ||
 8013a08:	69fb      	ldr	r3, [r7, #28]
 8013a0a:	681a      	ldr	r2, [r3, #0]
 8013a0c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8013a10:	4413      	add	r3, r2
 8013a12:	781b      	ldrb	r3, [r3, #0]
        else if ((entry_ptr -> fx_dir_entry_name[i] == '~') ||
 8013a14:	2b2d      	cmp	r3, #45	; 0x2d
 8013a16:	f000 80b1 	beq.w	8013b7c <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == '_') ||
 8013a1a:	69fb      	ldr	r3, [r7, #28]
 8013a1c:	681a      	ldr	r2, [r3, #0]
 8013a1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8013a22:	4413      	add	r3, r2
 8013a24:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '-') ||
 8013a26:	2b5f      	cmp	r3, #95	; 0x5f
 8013a28:	f000 80a8 	beq.w	8013b7c <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == '}') ||
 8013a2c:	69fb      	ldr	r3, [r7, #28]
 8013a2e:	681a      	ldr	r2, [r3, #0]
 8013a30:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8013a34:	4413      	add	r3, r2
 8013a36:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '_') ||
 8013a38:	2b7d      	cmp	r3, #125	; 0x7d
 8013a3a:	f000 809f 	beq.w	8013b7c <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == '{') ||
 8013a3e:	69fb      	ldr	r3, [r7, #28]
 8013a40:	681a      	ldr	r2, [r3, #0]
 8013a42:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8013a46:	4413      	add	r3, r2
 8013a48:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '}') ||
 8013a4a:	2b7b      	cmp	r3, #123	; 0x7b
 8013a4c:	f000 8096 	beq.w	8013b7c <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == '(') ||
 8013a50:	69fb      	ldr	r3, [r7, #28]
 8013a52:	681a      	ldr	r2, [r3, #0]
 8013a54:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8013a58:	4413      	add	r3, r2
 8013a5a:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '{') ||
 8013a5c:	2b28      	cmp	r3, #40	; 0x28
 8013a5e:	f000 808d 	beq.w	8013b7c <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == ')') ||
 8013a62:	69fb      	ldr	r3, [r7, #28]
 8013a64:	681a      	ldr	r2, [r3, #0]
 8013a66:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8013a6a:	4413      	add	r3, r2
 8013a6c:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '(') ||
 8013a6e:	2b29      	cmp	r3, #41	; 0x29
 8013a70:	f000 8084 	beq.w	8013b7c <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == '`') ||
 8013a74:	69fb      	ldr	r3, [r7, #28]
 8013a76:	681a      	ldr	r2, [r3, #0]
 8013a78:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8013a7c:	4413      	add	r3, r2
 8013a7e:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == ')') ||
 8013a80:	2b60      	cmp	r3, #96	; 0x60
 8013a82:	d07b      	beq.n	8013b7c <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == '\'') ||
 8013a84:	69fb      	ldr	r3, [r7, #28]
 8013a86:	681a      	ldr	r2, [r3, #0]
 8013a88:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8013a8c:	4413      	add	r3, r2
 8013a8e:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '`') ||
 8013a90:	2b27      	cmp	r3, #39	; 0x27
 8013a92:	d073      	beq.n	8013b7c <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == '!') ||
 8013a94:	69fb      	ldr	r3, [r7, #28]
 8013a96:	681a      	ldr	r2, [r3, #0]
 8013a98:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8013a9c:	4413      	add	r3, r2
 8013a9e:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '\'') ||
 8013aa0:	2b21      	cmp	r3, #33	; 0x21
 8013aa2:	d06b      	beq.n	8013b7c <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == '#') ||
 8013aa4:	69fb      	ldr	r3, [r7, #28]
 8013aa6:	681a      	ldr	r2, [r3, #0]
 8013aa8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8013aac:	4413      	add	r3, r2
 8013aae:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '!') ||
 8013ab0:	2b23      	cmp	r3, #35	; 0x23
 8013ab2:	d063      	beq.n	8013b7c <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == '$') ||
 8013ab4:	69fb      	ldr	r3, [r7, #28]
 8013ab6:	681a      	ldr	r2, [r3, #0]
 8013ab8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8013abc:	4413      	add	r3, r2
 8013abe:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '#') ||
 8013ac0:	2b24      	cmp	r3, #36	; 0x24
 8013ac2:	d05b      	beq.n	8013b7c <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == '&') ||
 8013ac4:	69fb      	ldr	r3, [r7, #28]
 8013ac6:	681a      	ldr	r2, [r3, #0]
 8013ac8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8013acc:	4413      	add	r3, r2
 8013ace:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '$') ||
 8013ad0:	2b26      	cmp	r3, #38	; 0x26
 8013ad2:	d053      	beq.n	8013b7c <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == '@') ||
 8013ad4:	69fb      	ldr	r3, [r7, #28]
 8013ad6:	681a      	ldr	r2, [r3, #0]
 8013ad8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8013adc:	4413      	add	r3, r2
 8013ade:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '&') ||
 8013ae0:	2b40      	cmp	r3, #64	; 0x40
 8013ae2:	d04b      	beq.n	8013b7c <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == '^') ||
 8013ae4:	69fb      	ldr	r3, [r7, #28]
 8013ae6:	681a      	ldr	r2, [r3, #0]
 8013ae8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8013aec:	4413      	add	r3, r2
 8013aee:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '@') ||
 8013af0:	2b5e      	cmp	r3, #94	; 0x5e
 8013af2:	d043      	beq.n	8013b7c <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == '%'))
 8013af4:	69fb      	ldr	r3, [r7, #28]
 8013af6:	681a      	ldr	r2, [r3, #0]
 8013af8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8013afc:	4413      	add	r3, r2
 8013afe:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '^') ||
 8013b00:	2b25      	cmp	r3, #37	; 0x25
 8013b02:	d03b      	beq.n	8013b7c <_fx_directory_free_search+0x2c4>
        {
            continue;
        }
        /* Check for long filename special characters.  */
        else if ((entry_ptr -> fx_dir_entry_name[i] == '+') ||
 8013b04:	69fb      	ldr	r3, [r7, #28]
 8013b06:	681a      	ldr	r2, [r3, #0]
 8013b08:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8013b0c:	4413      	add	r3, r2
 8013b0e:	781b      	ldrb	r3, [r3, #0]
 8013b10:	2b2b      	cmp	r3, #43	; 0x2b
 8013b12:	d027      	beq.n	8013b64 <_fx_directory_free_search+0x2ac>
                 (entry_ptr -> fx_dir_entry_name[i] == ',') ||
 8013b14:	69fb      	ldr	r3, [r7, #28]
 8013b16:	681a      	ldr	r2, [r3, #0]
 8013b18:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8013b1c:	4413      	add	r3, r2
 8013b1e:	781b      	ldrb	r3, [r3, #0]
        else if ((entry_ptr -> fx_dir_entry_name[i] == '+') ||
 8013b20:	2b2c      	cmp	r3, #44	; 0x2c
 8013b22:	d01f      	beq.n	8013b64 <_fx_directory_free_search+0x2ac>
                 (entry_ptr -> fx_dir_entry_name[i] == ';') ||
 8013b24:	69fb      	ldr	r3, [r7, #28]
 8013b26:	681a      	ldr	r2, [r3, #0]
 8013b28:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8013b2c:	4413      	add	r3, r2
 8013b2e:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == ',') ||
 8013b30:	2b3b      	cmp	r3, #59	; 0x3b
 8013b32:	d017      	beq.n	8013b64 <_fx_directory_free_search+0x2ac>
                 (entry_ptr -> fx_dir_entry_name[i] == '=') ||
 8013b34:	69fb      	ldr	r3, [r7, #28]
 8013b36:	681a      	ldr	r2, [r3, #0]
 8013b38:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8013b3c:	4413      	add	r3, r2
 8013b3e:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == ';') ||
 8013b40:	2b3d      	cmp	r3, #61	; 0x3d
 8013b42:	d00f      	beq.n	8013b64 <_fx_directory_free_search+0x2ac>
                 (entry_ptr -> fx_dir_entry_name[i] == '[') ||
 8013b44:	69fb      	ldr	r3, [r7, #28]
 8013b46:	681a      	ldr	r2, [r3, #0]
 8013b48:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8013b4c:	4413      	add	r3, r2
 8013b4e:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '=') ||
 8013b50:	2b5b      	cmp	r3, #91	; 0x5b
 8013b52:	d007      	beq.n	8013b64 <_fx_directory_free_search+0x2ac>
                 (entry_ptr -> fx_dir_entry_name[i] == ']'))
 8013b54:	69fb      	ldr	r3, [r7, #28]
 8013b56:	681a      	ldr	r2, [r3, #0]
 8013b58:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8013b5c:	4413      	add	r3, r2
 8013b5e:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '[') ||
 8013b60:	2b5d      	cmp	r3, #93	; 0x5d
 8013b62:	d103      	bne.n	8013b6c <_fx_directory_free_search+0x2b4>
        {
            entry_ptr -> fx_dir_entry_long_name_present = 1;
 8013b64:	69fb      	ldr	r3, [r7, #28]
 8013b66:	2201      	movs	r2, #1
 8013b68:	615a      	str	r2, [r3, #20]
 8013b6a:	e008      	b.n	8013b7e <_fx_directory_free_search+0x2c6>
        }
        /* Something is wrong with the supplied name.  */
        else
        {
            return(FX_INVALID_NAME);
 8013b6c:	230c      	movs	r3, #12
 8013b6e:	e2dd      	b.n	801412c <_fx_directory_free_search+0x874>
            continue;
 8013b70:	bf00      	nop
 8013b72:	e004      	b.n	8013b7e <_fx_directory_free_search+0x2c6>
            continue;
 8013b74:	bf00      	nop
 8013b76:	e002      	b.n	8013b7e <_fx_directory_free_search+0x2c6>
            continue;
 8013b78:	bf00      	nop
 8013b7a:	e000      	b.n	8013b7e <_fx_directory_free_search+0x2c6>
            continue;
 8013b7c:	bf00      	nop
    for (i = 0, j = 0; entry_ptr -> fx_dir_entry_name[i]; i++)
 8013b7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8013b82:	3301      	adds	r3, #1
 8013b84:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8013b88:	69fb      	ldr	r3, [r7, #28]
 8013b8a:	681a      	ldr	r2, [r3, #0]
 8013b8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8013b90:	4413      	add	r3, r2
 8013b92:	781b      	ldrb	r3, [r3, #0]
 8013b94:	2b00      	cmp	r3, #0
 8013b96:	f47f aeb9 	bne.w	801390c <_fx_directory_free_search+0x54>
        }
    }

    /* Determine if a dot was found.  */
    if (j != 0)
 8013b9a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8013b9e:	2b00      	cmp	r3, #0
 8013ba0:	d009      	beq.n	8013bb6 <_fx_directory_free_search+0x2fe>
    {

        /* Yes, Determine if the extension exceeds a 3 character extension.  */
        if ((i - j) > 4)
 8013ba2:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8013ba6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8013baa:	1ad3      	subs	r3, r2, r3
 8013bac:	2b04      	cmp	r3, #4
 8013bae:	d902      	bls.n	8013bb6 <_fx_directory_free_search+0x2fe>
        {

            /* Yes, long file name is present.  */
            entry_ptr -> fx_dir_entry_long_name_present = 1;
 8013bb0:	69fb      	ldr	r3, [r7, #28]
 8013bb2:	2201      	movs	r2, #1
 8013bb4:	615a      	str	r2, [r3, #20]
        }
    }

    /* Calculate the total entries needed.  */
    if ((i <= 12) && (entry_ptr -> fx_dir_entry_long_name_present == 0))
 8013bb6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8013bba:	2b0c      	cmp	r3, #12
 8013bbc:	d818      	bhi.n	8013bf0 <_fx_directory_free_search+0x338>
 8013bbe:	69fb      	ldr	r3, [r7, #28]
 8013bc0:	695b      	ldr	r3, [r3, #20]
 8013bc2:	2b00      	cmp	r3, #0
 8013bc4:	d114      	bne.n	8013bf0 <_fx_directory_free_search+0x338>
    {

        /* Initialize the total entries to 1.  */
        total_entries = 1;
 8013bc6:	2301      	movs	r3, #1
 8013bc8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

        /* Check for special instance of long file name.  */
        if ((j >= 9) || ((i - j) >= 9))
 8013bcc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8013bd0:	2b08      	cmp	r3, #8
 8013bd2:	d806      	bhi.n	8013be2 <_fx_directory_free_search+0x32a>
 8013bd4:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8013bd8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8013bdc:	1ad3      	subs	r3, r2, r3
 8013bde:	2b08      	cmp	r3, #8
 8013be0:	d928      	bls.n	8013c34 <_fx_directory_free_search+0x37c>
        {

            /* The dot is after 8 character or there is no dot and the name
               is greater than 8 character. */
            entry_ptr -> fx_dir_entry_long_name_present = 1;
 8013be2:	69fb      	ldr	r3, [r7, #28]
 8013be4:	2201      	movs	r2, #1
 8013be6:	615a      	str	r2, [r3, #20]
            total_entries = 2;
 8013be8:	2302      	movs	r3, #2
 8013bea:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        if ((j >= 9) || ((i - j) >= 9))
 8013bee:	e021      	b.n	8013c34 <_fx_directory_free_search+0x37c>
    else
    {

        /* Long file name is present, calculate how many entries are needed
           to represent it.  */
        if (i % 13 == 0)
 8013bf0:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8013bf4:	4b95      	ldr	r3, [pc, #596]	; (8013e4c <_fx_directory_free_search+0x594>)
 8013bf6:	fba3 2301 	umull	r2, r3, r3, r1
 8013bfa:	089a      	lsrs	r2, r3, #2
 8013bfc:	4613      	mov	r3, r2
 8013bfe:	005b      	lsls	r3, r3, #1
 8013c00:	4413      	add	r3, r2
 8013c02:	009b      	lsls	r3, r3, #2
 8013c04:	4413      	add	r3, r2
 8013c06:	1aca      	subs	r2, r1, r3
 8013c08:	2a00      	cmp	r2, #0
 8013c0a:	d109      	bne.n	8013c20 <_fx_directory_free_search+0x368>
        {
            /* Exact fit, just add one for the 8.3 short name.  */
            total_entries = i / 13 + 1;
 8013c0c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8013c10:	4a8e      	ldr	r2, [pc, #568]	; (8013e4c <_fx_directory_free_search+0x594>)
 8013c12:	fba2 2303 	umull	r2, r3, r2, r3
 8013c16:	089b      	lsrs	r3, r3, #2
 8013c18:	3301      	adds	r3, #1
 8013c1a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8013c1e:	e00a      	b.n	8013c36 <_fx_directory_free_search+0x37e>
        }
        else
        {
            /* Non-exact fit, add two for 8.3 short name and overlap.  */
            total_entries = i / 13 + 2;
 8013c20:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8013c24:	4a89      	ldr	r2, [pc, #548]	; (8013e4c <_fx_directory_free_search+0x594>)
 8013c26:	fba2 2303 	umull	r2, r3, r2, r3
 8013c2a:	089b      	lsrs	r3, r3, #2
 8013c2c:	3302      	adds	r3, #2
 8013c2e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8013c32:	e000      	b.n	8013c36 <_fx_directory_free_search+0x37e>
        if ((j >= 9) || ((i - j) >= 9))
 8013c34:	bf00      	nop
    }

    /* Determine if the search is in the root directory or in a
       sub-directory.  Note: the directory search function clears the
       first character of the name for the root directory.  */
    if (directory_ptr -> fx_dir_entry_name[0])
 8013c36:	6a3b      	ldr	r3, [r7, #32]
 8013c38:	681b      	ldr	r3, [r3, #0]
 8013c3a:	781b      	ldrb	r3, [r3, #0]
 8013c3c:	2b00      	cmp	r3, #0
 8013c3e:	d00c      	beq.n	8013c5a <_fx_directory_free_search+0x3a2>

        /* Search for a free entry in a sub-directory.  */

        /* Pickup the number of entries in this directory.  This was placed
           into the unused file size field.  */
        directory_entries =  (ULONG)directory_ptr -> fx_dir_entry_file_size;
 8013c40:	6a3b      	ldr	r3, [r7, #32]
 8013c42:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8013c46:	4613      	mov	r3, r2
 8013c48:	65fb      	str	r3, [r7, #92]	; 0x5c

        /* Point the search directory pointer to this entry.  */
        search_dir_ptr =  directory_ptr;
 8013c4a:	6a3b      	ldr	r3, [r7, #32]
 8013c4c:	65bb      	str	r3, [r7, #88]	; 0x58

        /* Ensure that the search directory's last search cluster is cleared.  */
        search_dir_ptr -> fx_dir_entry_last_search_cluster =  0;
 8013c4e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013c50:	2200      	movs	r2, #0
 8013c52:	651a      	str	r2, [r3, #80]	; 0x50

        /* Set the initial index to 2, since the first two directory entries are
           always allocated.  */
        directory_index =  2;
 8013c54:	2302      	movs	r3, #2
 8013c56:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013c58:	e006      	b.n	8013c68 <_fx_directory_free_search+0x3b0>
    {

        /* Find a free entry in the root directory.  */

        /* Setup the number of directory entries.  */
        directory_entries =  (ULONG)media_ptr -> fx_media_root_directory_entries;
 8013c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013c5e:	65fb      	str	r3, [r7, #92]	; 0x5c

        /* Set the search pointer to NULL since we are working off of the
           root directory.  */
        search_dir_ptr =  FX_NULL;
 8013c60:	2300      	movs	r3, #0
 8013c62:	65bb      	str	r3, [r7, #88]	; 0x58

        /* Set the initial index to 0, since the first entry of the root directory is valid.  */
        directory_index =  0;
 8013c64:	2300      	movs	r3, #0
 8013c66:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    /* Loop through entries in the search directory.  Yes, this is a
       linear search!  */
    free_entry_start = directory_entries;
 8013c68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013c6a:	657b      	str	r3, [r7, #84]	; 0x54
    do
    {

        /* Read an entry from the directory.  */
        status =  _fx_directory_entry_read(media_ptr, search_dir_ptr, &directory_index, entry_ptr);
 8013c6c:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8013c70:	69fb      	ldr	r3, [r7, #28]
 8013c72:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8013c74:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013c76:	f7fe fc5d 	bl	8012534 <_fx_directory_entry_read>
 8013c7a:	64f8      	str	r0, [r7, #76]	; 0x4c

        /* Check for error status.  */
        if (status != FX_SUCCESS)
 8013c7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013c7e:	2b00      	cmp	r3, #0
 8013c80:	d001      	beq.n	8013c86 <_fx_directory_free_search+0x3ce>
        {
            return(status);
 8013c82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013c84:	e252      	b.n	801412c <_fx_directory_free_search+0x874>
        }

        /* Determine if this is an empty entry.  */
        if ((((UCHAR)entry_ptr -> fx_dir_entry_name[0] == (UCHAR)FX_DIR_ENTRY_FREE) && (entry_ptr -> fx_dir_entry_short_name[0] == 0)) ||
 8013c86:	69fb      	ldr	r3, [r7, #28]
 8013c88:	681b      	ldr	r3, [r3, #0]
 8013c8a:	781b      	ldrb	r3, [r3, #0]
 8013c8c:	2be5      	cmp	r3, #229	; 0xe5
 8013c8e:	d103      	bne.n	8013c98 <_fx_directory_free_search+0x3e0>
 8013c90:	69fb      	ldr	r3, [r7, #28]
 8013c92:	791b      	ldrb	r3, [r3, #4]
 8013c94:	2b00      	cmp	r3, #0
 8013c96:	d004      	beq.n	8013ca2 <_fx_directory_free_search+0x3ea>
            ((UCHAR)entry_ptr -> fx_dir_entry_name[0] == (UCHAR)FX_DIR_ENTRY_DONE))
 8013c98:	69fb      	ldr	r3, [r7, #28]
 8013c9a:	681b      	ldr	r3, [r3, #0]
 8013c9c:	781b      	ldrb	r3, [r3, #0]
        if ((((UCHAR)entry_ptr -> fx_dir_entry_name[0] == (UCHAR)FX_DIR_ENTRY_FREE) && (entry_ptr -> fx_dir_entry_short_name[0] == 0)) ||
 8013c9e:	2b00      	cmp	r3, #0
 8013ca0:	d16b      	bne.n	8013d7a <_fx_directory_free_search+0x4c2>
        {

            /* Determine how many entries are needed.  */
            if (total_entries > 1)
 8013ca2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8013ca6:	2b01      	cmp	r3, #1
 8013ca8:	d91a      	bls.n	8013ce0 <_fx_directory_free_search+0x428>
            {

                /* Multiple entries are needed for long file names.  Mark this
                   entry as free. */
                if (entry_ptr -> fx_dir_entry_name[0] == FX_DIR_ENTRY_DONE)
 8013caa:	69fb      	ldr	r3, [r7, #28]
 8013cac:	681b      	ldr	r3, [r3, #0]
 8013cae:	781b      	ldrb	r3, [r3, #0]
 8013cb0:	2b00      	cmp	r3, #0
 8013cb2:	d115      	bne.n	8013ce0 <_fx_directory_free_search+0x428>
                {

                    entry_ptr -> fx_dir_entry_long_name_present =  0;
 8013cb4:	69fb      	ldr	r3, [r7, #28]
 8013cb6:	2200      	movs	r2, #0
 8013cb8:	615a      	str	r2, [r3, #20]
                    entry_ptr -> fx_dir_entry_name[0] =      (CHAR)FX_DIR_ENTRY_FREE;
 8013cba:	69fb      	ldr	r3, [r7, #28]
 8013cbc:	681a      	ldr	r2, [r3, #0]
 8013cbe:	23e5      	movs	r3, #229	; 0xe5
 8013cc0:	7013      	strb	r3, [r2, #0]
                    entry_ptr -> fx_dir_entry_name[1] =      (CHAR)0;
 8013cc2:	69fb      	ldr	r3, [r7, #28]
 8013cc4:	681b      	ldr	r3, [r3, #0]
 8013cc6:	1c5a      	adds	r2, r3, #1
 8013cc8:	2300      	movs	r3, #0
 8013cca:	7013      	strb	r3, [r2, #0]

                    /* Write out the directory entry.  */
                    status = _fx_directory_entry_write(media_ptr, entry_ptr);
 8013ccc:	69f9      	ldr	r1, [r7, #28]
 8013cce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013cd0:	f7fe ffb6 	bl	8012c40 <_fx_directory_entry_write>
 8013cd4:	64f8      	str	r0, [r7, #76]	; 0x4c
                    if(status != FX_SUCCESS)
 8013cd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013cd8:	2b00      	cmp	r3, #0
 8013cda:	d001      	beq.n	8013ce0 <_fx_directory_free_search+0x428>
                    {  
                        return(status);
 8013cdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013cde:	e225      	b.n	801412c <_fx_directory_free_search+0x874>
                       i.e. entries must be logically contiguous.  */
                }
            }

            /* Determine if we are at the first free entry.  */
            if (free_entry_start == directory_entries)
 8013ce0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013ce2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013ce4:	429a      	cmp	r2, r3
 8013ce6:	d109      	bne.n	8013cfc <_fx_directory_free_search+0x444>
            {

                /* Remember the start of the free entry.  */
                free_entry_start =  directory_index;
 8013ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013cea:	657b      	str	r3, [r7, #84]	; 0x54
                entry_sector =      (ULONG)entry_ptr -> fx_dir_entry_log_sector;
 8013cec:	69fb      	ldr	r3, [r7, #28]
 8013cee:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8013cf2:	4613      	mov	r3, r2
 8013cf4:	67fb      	str	r3, [r7, #124]	; 0x7c
                entry_offset  =     entry_ptr -> fx_dir_entry_byte_offset;
 8013cf6:	69fb      	ldr	r3, [r7, #28]
 8013cf8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013cfa:	67bb      	str	r3, [r7, #120]	; 0x78
            }

            /* Determine if there are enough free entries to satisfy the request.  */
            if ((directory_index - free_entry_start + 1) >= total_entries)
 8013cfc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013cfe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013d00:	1ad3      	subs	r3, r2, r3
 8013d02:	3301      	adds	r3, #1
 8013d04:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8013d08:	429a      	cmp	r2, r3
 8013d0a:	d838      	bhi.n	8013d7e <_fx_directory_free_search+0x4c6>

                /* Found an empty slot.  Most pertinent information is already
                   in the entry structure.  */

                /* Setup the the sector and the offset.  */
                entry_ptr -> fx_dir_entry_log_sector =      entry_sector;
 8013d0c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8013d0e:	2200      	movs	r2, #0
 8013d10:	461c      	mov	r4, r3
 8013d12:	4615      	mov	r5, r2
 8013d14:	69fb      	ldr	r3, [r7, #28]
 8013d16:	e9c3 4510 	strd	r4, r5, [r3, #64]	; 0x40
                entry_ptr -> fx_dir_entry_byte_offset =     entry_offset;
 8013d1a:	69fb      	ldr	r3, [r7, #28]
 8013d1c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8013d1e:	649a      	str	r2, [r3, #72]	; 0x48

                /* Initialize the additional directory entries.  */
                entry_ptr -> fx_dir_entry_reserved =            0;
 8013d20:	69fb      	ldr	r3, [r7, #28]
 8013d22:	2200      	movs	r2, #0
 8013d24:	775a      	strb	r2, [r3, #29]
                entry_ptr -> fx_dir_entry_created_time_ms =     0;
 8013d26:	69fb      	ldr	r3, [r7, #28]
 8013d28:	2200      	movs	r2, #0
 8013d2a:	779a      	strb	r2, [r3, #30]
{
unsigned int posture;
#ifdef TX_PORT_USE_BASEPRI
    __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
#else
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013d2c:	f3ef 8310 	mrs	r3, PRIMASK
 8013d30:	63bb      	str	r3, [r7, #56]	; 0x38
#endif
    return(posture);
 8013d32:	6bbb      	ldr	r3, [r7, #56]	; 0x38

__attribute__( ( always_inline ) ) static inline unsigned int __disable_interrupts(void)
{
unsigned int int_posture;

    int_posture = __get_interrupt_posture();
 8013d34:	637b      	str	r3, [r7, #52]	; 0x34

#ifdef TX_PORT_USE_BASEPRI
    __set_basepri_value(TX_PORT_BASEPRI);
#else
    __asm__ volatile ("CPSID i" : : : "memory");
 8013d36:	b672      	cpsid	i
#endif
    return(int_posture);
 8013d38:	6b7b      	ldr	r3, [r7, #52]	; 0x34

                /* Lockout interrupts for time/date access.  */
                FX_DISABLE_INTS
 8013d3a:	64bb      	str	r3, [r7, #72]	; 0x48

                entry_ptr -> fx_dir_entry_created_time =        _fx_system_time;
 8013d3c:	4b44      	ldr	r3, [pc, #272]	; (8013e50 <_fx_directory_free_search+0x598>)
 8013d3e:	681a      	ldr	r2, [r3, #0]
 8013d40:	69fb      	ldr	r3, [r7, #28]
 8013d42:	621a      	str	r2, [r3, #32]
                entry_ptr -> fx_dir_entry_created_date =        _fx_system_date;
 8013d44:	4b43      	ldr	r3, [pc, #268]	; (8013e54 <_fx_directory_free_search+0x59c>)
 8013d46:	681a      	ldr	r2, [r3, #0]
 8013d48:	69fb      	ldr	r3, [r7, #28]
 8013d4a:	625a      	str	r2, [r3, #36]	; 0x24
                entry_ptr -> fx_dir_entry_last_accessed_date =  _fx_system_date;
 8013d4c:	4b41      	ldr	r3, [pc, #260]	; (8013e54 <_fx_directory_free_search+0x59c>)
 8013d4e:	681a      	ldr	r2, [r3, #0]
 8013d50:	69fb      	ldr	r3, [r7, #28]
 8013d52:	629a      	str	r2, [r3, #40]	; 0x28
 8013d54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013d56:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013d58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013d5a:	f383 8810 	msr	PRIMASK, r3
}
 8013d5e:	bf00      	nop

                /* Restore interrupts.  */
                FX_RESTORE_INTS

                /* Determine if a long file name is present.  */
                if (total_entries == 1)
 8013d60:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8013d64:	2b01      	cmp	r3, #1
 8013d66:	d103      	bne.n	8013d70 <_fx_directory_free_search+0x4b8>
                {
                    entry_ptr -> fx_dir_entry_long_name_present =  0;
 8013d68:	69fb      	ldr	r3, [r7, #28]
 8013d6a:	2200      	movs	r2, #0
 8013d6c:	615a      	str	r2, [r3, #20]
 8013d6e:	e002      	b.n	8013d76 <_fx_directory_free_search+0x4be>
                }
                else
                {
                    entry_ptr -> fx_dir_entry_long_name_present =  1;
 8013d70:	69fb      	ldr	r3, [r7, #28]
 8013d72:	2201      	movs	r2, #1
 8013d74:	615a      	str	r2, [r3, #20]
                }

                /* Return a successful completion.  */
                return(FX_SUCCESS);
 8013d76:	2300      	movs	r3, #0
 8013d78:	e1d8      	b.n	801412c <_fx_directory_free_search+0x874>
        }
        else
        {

            /* Reset the free entry start.  */
            free_entry_start =  directory_entries;
 8013d7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013d7c:	657b      	str	r3, [r7, #84]	; 0x54
        }

        /* Move to the next entry.  */
        directory_index++;
 8013d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d80:	3301      	adds	r3, #1
 8013d82:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Determine if we have exceeded the number of entries in the current directory.  */
        if (directory_index >= directory_entries)
 8013d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d86:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8013d88:	429a      	cmp	r2, r3
 8013d8a:	f200 81c9 	bhi.w	8014120 <_fx_directory_free_search+0x868>
        {

            /* Calculate how many sectors we need for the new directory entry.  */
            sectors =  ((total_entries * FX_DIR_ENTRY_SIZE) + (media_ptr -> fx_media_bytes_per_sector - 1))/
 8013d8e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8013d92:	015a      	lsls	r2, r3, #5
 8013d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013d98:	4413      	add	r3, r2
 8013d9a:	1e5a      	subs	r2, r3, #1
                                                                            media_ptr -> fx_media_bytes_per_sector;
 8013d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
            sectors =  ((total_entries * FX_DIR_ENTRY_SIZE) + (media_ptr -> fx_media_bytes_per_sector - 1))/
 8013da0:	fbb2 f3f3 	udiv	r3, r2, r3
 8013da4:	653b      	str	r3, [r7, #80]	; 0x50

            /* Now calculate how many clusters we need for the new directory entry.  */
            clusters_needed = (sectors + (media_ptr -> fx_media_sectors_per_cluster - 1)) / media_ptr -> fx_media_sectors_per_cluster;
 8013da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013da8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8013daa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013dac:	4413      	add	r3, r2
 8013dae:	1e5a      	subs	r2, r3, #1
 8013db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013db2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013db4:	fbb2 f3f3 	udiv	r3, r2, r3
 8013db8:	647b      	str	r3, [r7, #68]	; 0x44

            /* Not enough empty entries were found.  If the specified directory is a sub-directory,
               attempt to allocate another cluster to it.  */
            if (((search_dir_ptr) || (media_ptr -> fx_media_32_bit_FAT)) && (media_ptr -> fx_media_available_clusters >= clusters_needed))
 8013dba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013dbc:	2b00      	cmp	r3, #0
 8013dbe:	d104      	bne.n	8013dca <_fx_directory_free_search+0x512>
 8013dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013dc2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8013dc4:	2b00      	cmp	r3, #0
 8013dc6:	f000 81ab 	beq.w	8014120 <_fx_directory_free_search+0x868>
 8013dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013dcc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013dce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013dd0:	429a      	cmp	r2, r3
 8013dd2:	f200 81a5 	bhi.w	8014120 <_fx_directory_free_search+0x868>
            {

                /* Search for the additional clusters we need.  */
                first_new_cluster =  0;
 8013dd6:	2300      	movs	r3, #0
 8013dd8:	66bb      	str	r3, [r7, #104]	; 0x68
                total_clusters =     media_ptr -> fx_media_total_clusters;
 8013dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013dde:	66fb      	str	r3, [r7, #108]	; 0x6c
                last_cluster =       0;
 8013de0:	2300      	movs	r3, #0
 8013de2:	667b      	str	r3, [r7, #100]	; 0x64
                FAT_index    =       media_ptr -> fx_media_cluster_search_start;
 8013de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013de6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013dea:	677b      	str	r3, [r7, #116]	; 0x74
                clusters =           clusters_needed;
 8013dec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013dee:	663b      	str	r3, [r7, #96]	; 0x60

                /* Loop to find the needed clusters.  */
                while (clusters)
 8013df0:	e10b      	b.n	801400a <_fx_directory_free_search+0x752>
                {

                    /* Decrease the cluster count.  */
                    clusters--;
 8013df2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013df4:	3b01      	subs	r3, #1
 8013df6:	663b      	str	r3, [r7, #96]	; 0x60
                    /* Loop to find the first available cluster.  */
                    do
                    {

                        /* Make sure we stop looking after one pass through the FAT table.  */
                        if (!total_clusters)
 8013df8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013dfa:	2b00      	cmp	r3, #0
 8013dfc:	d101      	bne.n	8013e02 <_fx_directory_free_search+0x54a>
                        {

                            /* Something is wrong with the media - the desired clusters were
                               not found in the FAT table.  */
                            return(FX_NO_MORE_SPACE);
 8013dfe:	230a      	movs	r3, #10
 8013e00:	e194      	b.n	801412c <_fx_directory_free_search+0x874>
                        }

                        /* Read FAT entry.  */
                        status =  _fx_utility_FAT_entry_read(media_ptr, FAT_index, &FAT_value);
 8013e02:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8013e06:	461a      	mov	r2, r3
 8013e08:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8013e0a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013e0c:	f005 fca8 	bl	8019760 <_fx_utility_FAT_entry_read>
 8013e10:	64f8      	str	r0, [r7, #76]	; 0x4c

                        /* Check for a bad status.  */
                        if (status != FX_SUCCESS)
 8013e12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013e14:	2b00      	cmp	r3, #0
 8013e16:	d001      	beq.n	8013e1c <_fx_directory_free_search+0x564>
                        {

                            /* Return the bad status.  */
                            return(status);
 8013e18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013e1a:	e187      	b.n	801412c <_fx_directory_free_search+0x874>
                        }

                        /* Decrement the total cluster count.  */
                        total_clusters--;
 8013e1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013e1e:	3b01      	subs	r3, #1
 8013e20:	66fb      	str	r3, [r7, #108]	; 0x6c

                        /* Determine if the FAT entry is free.  */
                        if (FAT_value == FX_FREE_CLUSTER)
 8013e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e24:	2b00      	cmp	r3, #0
 8013e26:	d117      	bne.n	8013e58 <_fx_directory_free_search+0x5a0>
                        {

                            /* Move cluster search pointer forward.  */
                            media_ptr -> fx_media_cluster_search_start =  FAT_index + 1;
 8013e28:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8013e2a:	1c5a      	adds	r2, r3, #1
 8013e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e2e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

                            /* Determine if this needs to be wrapped.  */
                            if (media_ptr -> fx_media_cluster_search_start >= (media_ptr -> fx_media_total_clusters + FX_FAT_ENTRY_START))
 8013e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e34:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8013e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013e3c:	3302      	adds	r3, #2
 8013e3e:	429a      	cmp	r2, r3
 8013e40:	d316      	bcc.n	8013e70 <_fx_directory_free_search+0x5b8>
                            {

                                /* Wrap the search to the beginning FAT entry.  */
                                media_ptr -> fx_media_cluster_search_start =  FX_FAT_ENTRY_START;
 8013e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e44:	2202      	movs	r2, #2
 8013e46:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                            }

                            /* Break this loop.  */
                            break;
 8013e4a:	e011      	b.n	8013e70 <_fx_directory_free_search+0x5b8>
 8013e4c:	4ec4ec4f 	.word	0x4ec4ec4f
 8013e50:	24005050 	.word	0x24005050
 8013e54:	2400504c 	.word	0x2400504c
                        }
                        else
                        {

                            /* FAT entry is not free... Advance the FAT index.  */
                            FAT_index++;
 8013e58:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8013e5a:	3301      	adds	r3, #1
 8013e5c:	677b      	str	r3, [r7, #116]	; 0x74

                            /* Determine if we need to wrap the FAT index around.  */
                            if (FAT_index >= (media_ptr -> fx_media_total_clusters + FX_FAT_ENTRY_START))
 8013e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013e62:	3302      	adds	r3, #2
 8013e64:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8013e66:	429a      	cmp	r2, r3
 8013e68:	d3c6      	bcc.n	8013df8 <_fx_directory_free_search+0x540>
                            {

                                /* Wrap the search to the beginning FAT entry.  */
                                FAT_index =  FX_FAT_ENTRY_START;
 8013e6a:	2302      	movs	r3, #2
 8013e6c:	677b      	str	r3, [r7, #116]	; 0x74
                        if (!total_clusters)
 8013e6e:	e7c3      	b.n	8013df8 <_fx_directory_free_search+0x540>
                            break;
 8013e70:	bf00      	nop

                    /* We found an available cluster.  We now need to clear all of entries in
                       each of the cluster's sectors.  */

                    /* Calculate the logical sector of this cluster.  */
                    logical_sector =  ((ULONG) media_ptr -> fx_media_data_sector_start) +
 8013e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e74:	6d19      	ldr	r1, [r3, #80]	; 0x50
                                       ((((ULONG) FAT_index) - FX_FAT_ENTRY_START) *
 8013e76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8013e78:	1e9a      	subs	r2, r3, #2
                                       ((ULONG) media_ptr -> fx_media_sectors_per_cluster));
 8013e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
                                       ((((ULONG) FAT_index) - FX_FAT_ENTRY_START) *
 8013e7e:	fb02 f303 	mul.w	r3, r2, r3
                    logical_sector =  ((ULONG) media_ptr -> fx_media_data_sector_start) +
 8013e82:	440b      	add	r3, r1
 8013e84:	643b      	str	r3, [r7, #64]	; 0x40

                    /* Pickup the number of sectors for the next directory cluster.  */
                    sectors =  media_ptr -> fx_media_sectors_per_cluster;
 8013e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013e8a:	653b      	str	r3, [r7, #80]	; 0x50

                    /* Read the logical sector just for cache reasons.  */
                    status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 8013e8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013e8e:	2200      	movs	r2, #0
 8013e90:	613b      	str	r3, [r7, #16]
 8013e92:	617a      	str	r2, [r7, #20]
                                                              media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_DIRECTORY_SECTOR);
 8013e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e96:	689a      	ldr	r2, [r3, #8]
                    status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 8013e98:	2303      	movs	r3, #3
 8013e9a:	9302      	str	r3, [sp, #8]
 8013e9c:	2301      	movs	r3, #1
 8013e9e:	9301      	str	r3, [sp, #4]
 8013ea0:	9200      	str	r2, [sp, #0]
 8013ea2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8013ea6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013ea8:	f007 f868 	bl	801af7c <_fx_utility_logical_sector_read>
 8013eac:	64f8      	str	r0, [r7, #76]	; 0x4c

                    /* Check the return value.  */
                    if (status != FX_SUCCESS)
 8013eae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013eb0:	2b00      	cmp	r3, #0
 8013eb2:	d001      	beq.n	8013eb8 <_fx_directory_free_search+0x600>
                    {

                        /* Return the error status.  */
                        return(status);
 8013eb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013eb6:	e139      	b.n	801412c <_fx_directory_free_search+0x874>
                    }

                    /* Clear the entire first sector of the new sub-directory cluster.  */
                    work_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer;
 8013eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013eba:	689b      	ldr	r3, [r3, #8]
 8013ebc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                    i =  0;
 8013ec0:	2300      	movs	r3, #0
 8013ec2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                    while (i < media_ptr -> fx_media_bytes_per_sector)
 8013ec6:	e00d      	b.n	8013ee4 <_fx_directory_free_search+0x62c>
                    {

                        /* Clear 4 bytes.  */
                        *((ULONG *)work_ptr) =  (ULONG)0;
 8013ec8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8013ecc:	2200      	movs	r2, #0
 8013ece:	601a      	str	r2, [r3, #0]

                        /* Increment pointer.  */
                        work_ptr =  work_ptr + sizeof(ULONG);
 8013ed0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8013ed4:	3304      	adds	r3, #4
 8013ed6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

                        /* Increment counter.  */
                        i =  i + (ULONG)sizeof(ULONG);
 8013eda:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8013ede:	3304      	adds	r3, #4
 8013ee0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                    while (i < media_ptr -> fx_media_bytes_per_sector)
 8013ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013ee8:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8013eec:	429a      	cmp	r2, r3
 8013eee:	d3eb      	bcc.n	8013ec8 <_fx_directory_free_search+0x610>
                    }

                    /* Write the logical sector to ensure the zeros are written.  */
                    status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) logical_sector,
 8013ef0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013ef2:	2200      	movs	r2, #0
 8013ef4:	60bb      	str	r3, [r7, #8]
 8013ef6:	60fa      	str	r2, [r7, #12]
                                                               media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_DIRECTORY_SECTOR);
 8013ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013efa:	689a      	ldr	r2, [r3, #8]
                    status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) logical_sector,
 8013efc:	2303      	movs	r3, #3
 8013efe:	9302      	str	r3, [sp, #8]
 8013f00:	2301      	movs	r3, #1
 8013f02:	9301      	str	r3, [sp, #4]
 8013f04:	9200      	str	r2, [sp, #0]
 8013f06:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8013f0a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013f0c:	f007 faca 	bl	801b4a4 <_fx_utility_logical_sector_write>
 8013f10:	64f8      	str	r0, [r7, #76]	; 0x4c

                    /* Determine if the write was successful.  */
                    if (status != FX_SUCCESS)
 8013f12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013f14:	2b00      	cmp	r3, #0
 8013f16:	d001      	beq.n	8013f1c <_fx_directory_free_search+0x664>
                    {

                        /* Return the error code.  */
                        return(status);
 8013f18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013f1a:	e107      	b.n	801412c <_fx_directory_free_search+0x874>
                    }

                    /* Determine if there are more sectors to clear in the first cluster of the new
                       sub-directory.  */
                    if (sectors > 1)
 8013f1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013f1e:	2b01      	cmp	r3, #1
 8013f20:	d95a      	bls.n	8013fd8 <_fx_directory_free_search+0x720>

                        /* Yes, invalidate all cached sectors that are contained in the newly allocated first
                           cluster of the directory.  */

                        /* Flush the internal logical sector cache.  */
                        status =  _fx_utility_logical_sector_flush(media_ptr, (ULONG64) (logical_sector + 1), (ULONG64) (sectors - 1), FX_TRUE);
 8013f22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013f24:	3301      	adds	r3, #1
 8013f26:	2200      	movs	r2, #0
 8013f28:	603b      	str	r3, [r7, #0]
 8013f2a:	607a      	str	r2, [r7, #4]
 8013f2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013f2e:	3b01      	subs	r3, #1
 8013f30:	2200      	movs	r2, #0
 8013f32:	4698      	mov	r8, r3
 8013f34:	4691      	mov	r9, r2
 8013f36:	2301      	movs	r3, #1
 8013f38:	9302      	str	r3, [sp, #8]
 8013f3a:	e9cd 8900 	strd	r8, r9, [sp]
 8013f3e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013f42:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013f44:	f006 fe04 	bl	801ab50 <_fx_utility_logical_sector_flush>
 8013f48:	64f8      	str	r0, [r7, #76]	; 0x4c

                        /* Determine if the flush was successful.  */
                        if (status != FX_SUCCESS)
 8013f4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013f4c:	2b00      	cmp	r3, #0
 8013f4e:	d001      	beq.n	8013f54 <_fx_directory_free_search+0x69c>
                        {

                            /* Return the error code.  */
                            return(status);
 8013f50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013f52:	e0eb      	b.n	801412c <_fx_directory_free_search+0x874>
                        }

                        /* Clear all additional sectors of new sub-directory.  */
                        sectors--;
 8013f54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013f56:	3b01      	subs	r3, #1
 8013f58:	653b      	str	r3, [r7, #80]	; 0x50
                        while (sectors)
 8013f5a:	e03a      	b.n	8013fd2 <_fx_directory_free_search+0x71a>
                        {

#ifndef FX_MEDIA_STATISTICS_DISABLE

                            /* Increment the number of driver write sector(s) requests.  */
                            media_ptr -> fx_media_driver_write_requests++;
 8013f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f5e:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8013f62:	1c5a      	adds	r2, r3, #1
 8013f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f66:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
#endif

                            /* Build Write request to the driver.  */
                            media_ptr -> fx_media_driver_request =          FX_DRIVER_WRITE;
 8013f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f6c:	2201      	movs	r2, #1
 8013f6e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
                            media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8013f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f74:	2290      	movs	r2, #144	; 0x90
 8013f76:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
                            media_ptr -> fx_media_driver_buffer =           media_ptr -> fx_media_memory_buffer;
 8013f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f7c:	689a      	ldr	r2, [r3, #8]
 8013f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f80:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
                            media_ptr -> fx_media_driver_logical_sector =   (ULONG)logical_sector + ((ULONG)sectors);
 8013f84:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013f86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013f88:	441a      	add	r2, r3
 8013f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f8c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
                            media_ptr -> fx_media_driver_sectors =          1;
 8013f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f92:	2201      	movs	r2, #1
 8013f94:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
                            media_ptr -> fx_media_driver_sector_type =      FX_DIRECTORY_SECTOR;
 8013f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f9a:	2203      	movs	r2, #3
 8013f9c:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

                            /* Set the system write flag since we are writing a directory sector.  */
                            media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 8013fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013fa2:	2201      	movs	r2, #1
 8013fa4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

                            /* If trace is enabled, insert this event into the trace buffer.  */
                            FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_WRITE, media_ptr, ((ULONG)logical_sector) + ((ULONG)sectors), 1, media_ptr -> fx_media_memory_buffer, FX_TRACE_INTERNAL_EVENTS, 0, 0)

                            /* Invoke the driver to write the sector.  */
                            (media_ptr -> fx_media_driver_entry) (media_ptr);
 8013fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013faa:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8013fae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013fb0:	4798      	blx	r3

                            /* Clear the system write flag.  */
                            media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 8013fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013fb4:	2200      	movs	r2, #0
 8013fb6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

                            /* Determine if an error occurred.  */
                            if (media_ptr -> fx_media_driver_status != FX_SUCCESS)
 8013fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013fbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013fc0:	2b00      	cmp	r3, #0
 8013fc2:	d003      	beq.n	8013fcc <_fx_directory_free_search+0x714>
                            {

                                /* Return error code.  */
                                return(media_ptr -> fx_media_driver_status);
 8013fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013fc6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013fca:	e0af      	b.n	801412c <_fx_directory_free_search+0x874>
                            }

                            /* Decrease the number of sectors to clear.  */
                            sectors--;
 8013fcc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013fce:	3b01      	subs	r3, #1
 8013fd0:	653b      	str	r3, [r7, #80]	; 0x50
                        while (sectors)
 8013fd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013fd4:	2b00      	cmp	r3, #0
 8013fd6:	d1c1      	bne.n	8013f5c <_fx_directory_free_search+0x6a4>
                        }
                    }

                    /* Determine if we have found the first new cluster yet.  */
                    if (first_new_cluster == 0)
 8013fd8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013fda:	2b00      	cmp	r3, #0
 8013fdc:	d101      	bne.n	8013fe2 <_fx_directory_free_search+0x72a>
                    {

                        /* Remember the first new cluster. */
                        first_new_cluster =  FAT_index;
 8013fde:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8013fe0:	66bb      	str	r3, [r7, #104]	; 0x68
                    }

                    /* Check for a valid last cluster to link.  */
                    if (last_cluster)
 8013fe2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013fe4:	2b00      	cmp	r3, #0
 8013fe6:	d00a      	beq.n	8013ffe <_fx_directory_free_search+0x746>
                    {

                        /* Normal condition - link the last cluster with the new
                           found cluster.  */
                        status = _fx_utility_FAT_entry_write(media_ptr, last_cluster, FAT_index);
 8013fe8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8013fea:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8013fec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013fee:	f005 fde0 	bl	8019bb2 <_fx_utility_FAT_entry_write>
 8013ff2:	64f8      	str	r0, [r7, #76]	; 0x4c

                        /* Check for a bad FAT write status.  */
                        if (status !=  FX_SUCCESS)
 8013ff4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013ff6:	2b00      	cmp	r3, #0
 8013ff8:	d001      	beq.n	8013ffe <_fx_directory_free_search+0x746>
                        {

                            /* Return the bad status.  */
                            return(status);
 8013ffa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013ffc:	e096      	b.n	801412c <_fx_directory_free_search+0x874>
                        }
                    }

                    /* Otherwise, remember the new FAT index as the last.  */
                    last_cluster =  FAT_index;
 8013ffe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014000:	667b      	str	r3, [r7, #100]	; 0x64

                    /* Move to the next FAT entry.  */
                    FAT_index =  media_ptr -> fx_media_cluster_search_start;
 8014002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014004:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014008:	677b      	str	r3, [r7, #116]	; 0x74
                while (clusters)
 801400a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801400c:	2b00      	cmp	r3, #0
 801400e:	f47f aef0 	bne.w	8013df2 <_fx_directory_free_search+0x53a>
                }

                /* Place an end-of-file marker on the last cluster.  */
                status = _fx_utility_FAT_entry_write(media_ptr, last_cluster, media_ptr -> fx_media_fat_last);
 8014012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014014:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014018:	f8d3 34ac 	ldr.w	r3, [r3, #1196]	; 0x4ac
 801401c:	461a      	mov	r2, r3
 801401e:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8014020:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014022:	f005 fdc6 	bl	8019bb2 <_fx_utility_FAT_entry_write>
 8014026:	64f8      	str	r0, [r7, #76]	; 0x4c

                /* Check for a bad FAT write status.  */
                if (status !=  FX_SUCCESS)
 8014028:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801402a:	2b00      	cmp	r3, #0
 801402c:	d001      	beq.n	8014032 <_fx_directory_free_search+0x77a>
                {

                    /* Return the bad status.  */
                    return(status);
 801402e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014030:	e07c      	b.n	801412c <_fx_directory_free_search+0x874>
                /* Flush the cached individual FAT entries */
                _fx_utility_FAT_flush(media_ptr);
#endif

                /* Now the new cluster needs to be linked to the sub-directory.  */
                if (search_dir_ptr)
 8014032:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014034:	2b00      	cmp	r3, #0
 8014036:	d003      	beq.n	8014040 <_fx_directory_free_search+0x788>
                {
                    cluster = search_dir_ptr -> fx_dir_entry_cluster;
 8014038:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801403a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801403c:	673b      	str	r3, [r7, #112]	; 0x70
 801403e:	e002      	b.n	8014046 <_fx_directory_free_search+0x78e>
                }
                else
                {
                    cluster = media_ptr -> fx_media_root_cluster_32;
 8014040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014042:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014044:	673b      	str	r3, [r7, #112]	; 0x70
                }

                /* Initialize loop variables.  */
                last_cluster =  0;
 8014046:	2300      	movs	r3, #0
 8014048:	667b      	str	r3, [r7, #100]	; 0x64
                i =  0;
 801404a:	2300      	movs	r3, #0
 801404c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

                /* Follow the link of FAT entries.  */
                while (cluster < media_ptr -> fx_media_fat_reserved)
 8014050:	e024      	b.n	801409c <_fx_directory_free_search+0x7e4>
                {

                    /* Read the current cluster entry from the FAT.  */
                    status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &FAT_value);
 8014052:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8014056:	461a      	mov	r2, r3
 8014058:	6f39      	ldr	r1, [r7, #112]	; 0x70
 801405a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801405c:	f005 fb80 	bl	8019760 <_fx_utility_FAT_entry_read>
 8014060:	64f8      	str	r0, [r7, #76]	; 0x4c
                    i++;
 8014062:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8014066:	3301      	adds	r3, #1
 8014068:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

                    /* Check the return value.  */
                    if (status != FX_SUCCESS)
 801406c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801406e:	2b00      	cmp	r3, #0
 8014070:	d001      	beq.n	8014076 <_fx_directory_free_search+0x7be>
                    {

                        /* Return the error status.  */
                        return(status);
 8014072:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014074:	e05a      	b.n	801412c <_fx_directory_free_search+0x874>
                    }

                    /* Determine if the FAT read was invalid.  */
                    if ((cluster < FX_FAT_ENTRY_START) || (cluster == FAT_value) || (i > media_ptr -> fx_media_total_clusters))
 8014076:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8014078:	2b01      	cmp	r3, #1
 801407a:	d909      	bls.n	8014090 <_fx_directory_free_search+0x7d8>
 801407c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801407e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8014080:	429a      	cmp	r2, r3
 8014082:	d005      	beq.n	8014090 <_fx_directory_free_search+0x7d8>
 8014084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014088:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 801408c:	429a      	cmp	r2, r3
 801408e:	d901      	bls.n	8014094 <_fx_directory_free_search+0x7dc>
                    {

                        /* Return the bad status.  */
                        return(FX_FAT_READ_ERROR);
 8014090:	2303      	movs	r3, #3
 8014092:	e04b      	b.n	801412c <_fx_directory_free_search+0x874>
                    }

                    /* Save the last valid cluster.  */
                    last_cluster =  cluster;
 8014094:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8014096:	667b      	str	r3, [r7, #100]	; 0x64

                    /* Setup for the next cluster.  */
                    cluster =  FAT_value;
 8014098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801409a:	673b      	str	r3, [r7, #112]	; 0x70
                while (cluster < media_ptr -> fx_media_fat_reserved)
 801409c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801409e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80140a2:	f8d3 34a8 	ldr.w	r3, [r3, #1192]	; 0x4a8
 80140a6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80140a8:	429a      	cmp	r2, r3
 80140aa:	d3d2      	bcc.n	8014052 <_fx_directory_free_search+0x79a>
                }

                /* Decrease the available clusters in the media.  */
                media_ptr -> fx_media_available_clusters =  media_ptr -> fx_media_available_clusters - clusters_needed;
 80140ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140ae:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80140b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80140b2:	1ad2      	subs	r2, r2, r3
 80140b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140b6:	67da      	str	r2, [r3, #124]	; 0x7c

                /* Increase the number of directory entries.  */
                directory_entries =  directory_entries + ((clusters_needed * media_ptr -> fx_media_sectors_per_cluster) * media_ptr -> fx_media_bytes_per_sector) / FX_DIR_ENTRY_SIZE;
 80140b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80140bc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80140be:	fb03 f202 	mul.w	r2, r3, r2
 80140c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80140c6:	fb02 f303 	mul.w	r3, r2, r3
 80140ca:	095b      	lsrs	r3, r3, #5
 80140cc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80140ce:	4413      	add	r3, r2
 80140d0:	65fb      	str	r3, [r7, #92]	; 0x5c

                /* Determine if we need to reset the free entry start since we changed the
                   number of directory entries.  If the last entry was not free, then we
                   should definitely reset the free entry start.  */
                if (!(((UCHAR)entry_ptr -> fx_dir_entry_name[0] == (UCHAR) FX_DIR_ENTRY_FREE) && (entry_ptr -> fx_dir_entry_short_name[0] == 0)))
 80140d2:	69fb      	ldr	r3, [r7, #28]
 80140d4:	681b      	ldr	r3, [r3, #0]
 80140d6:	781b      	ldrb	r3, [r3, #0]
 80140d8:	2be5      	cmp	r3, #229	; 0xe5
 80140da:	d103      	bne.n	80140e4 <_fx_directory_free_search+0x82c>
 80140dc:	69fb      	ldr	r3, [r7, #28]
 80140de:	791b      	ldrb	r3, [r3, #4]
 80140e0:	2b00      	cmp	r3, #0
 80140e2:	d001      	beq.n	80140e8 <_fx_directory_free_search+0x830>
                {

                    /* Reset the free entry start to indicate we haven't found a starting free entry yet.  */
                    free_entry_start =  directory_entries;
 80140e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80140e6:	657b      	str	r3, [r7, #84]	; 0x54
                }

                /* Update the directory size field.  */
                directory_ptr -> fx_dir_entry_file_size =  directory_entries;
 80140e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80140ea:	2200      	movs	r2, #0
 80140ec:	469a      	mov	sl, r3
 80140ee:	4693      	mov	fp, r2
 80140f0:	6a3b      	ldr	r3, [r7, #32]
 80140f2:	e9c3 ab0e 	strd	sl, fp, [r3, #56]	; 0x38

                /* Defer the update of the FAT entry and the last cluster of the current
                   directory entry until after the new cluster is initialized and written out.  */

                /* Determine if a FAT32 is present.  */
                if ((media_ptr -> fx_media_32_bit_FAT) && (search_dir_ptr == FX_NULL))
 80140f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80140fa:	2b00      	cmp	r3, #0
 80140fc:	d005      	beq.n	801410a <_fx_directory_free_search+0x852>
 80140fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014100:	2b00      	cmp	r3, #0
 8014102:	d102      	bne.n	801410a <_fx_directory_free_search+0x852>
                {

                    /* Change root directory entry count - FAT32 has a variable sized root directory.  */
                    media_ptr -> fx_media_root_directory_entries =  directory_entries;
 8014104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014106:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8014108:	679a      	str	r2, [r3, #120]	; 0x78
                }

                /* At this point, link up the last cluster with the new cluster.  */
                status =  _fx_utility_FAT_entry_write(media_ptr, last_cluster, first_new_cluster);
 801410a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801410c:	6e79      	ldr	r1, [r7, #100]	; 0x64
 801410e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014110:	f005 fd4f 	bl	8019bb2 <_fx_utility_FAT_entry_write>
 8014114:	64f8      	str	r0, [r7, #76]	; 0x4c

                /* Check the return value.  */
                if (status != FX_SUCCESS)
 8014116:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014118:	2b00      	cmp	r3, #0
 801411a:	d001      	beq.n	8014120 <_fx_directory_free_search+0x868>
                {

                    /* Return the error status.  */
                    return(status);
 801411c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801411e:	e005      	b.n	801412c <_fx_directory_free_search+0x874>
                /* Flush the cached individual FAT entries */
                _fx_utility_FAT_flush(media_ptr);
#endif
            }
        }
    } while (directory_index < directory_entries);
 8014120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014122:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8014124:	429a      	cmp	r2, r3
 8014126:	f63f ada1 	bhi.w	8013c6c <_fx_directory_free_search+0x3b4>

    /* Return FX_NO_MORE_SPACE status to the caller.  */
    return(FX_NO_MORE_SPACE);
 801412a:	230a      	movs	r3, #10
}
 801412c:	4618      	mov	r0, r3
 801412e:	3790      	adds	r7, #144	; 0x90
 8014130:	46bd      	mov	sp, r7
 8014132:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8014136:	bf00      	nop

08014138 <_fx_directory_name_extract>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
CHAR  *_fx_directory_name_extract(CHAR *source_ptr, CHAR *dest_ptr)
{
 8014138:	b480      	push	{r7}
 801413a:	b085      	sub	sp, #20
 801413c:	af00      	add	r7, sp, #0
 801413e:	6078      	str	r0, [r7, #4]
 8014140:	6039      	str	r1, [r7, #0]

UINT i;


    /* Set the destination string to NULL.  */
    dest_ptr[0] = 0;
 8014142:	683b      	ldr	r3, [r7, #0]
 8014144:	2200      	movs	r2, #0
 8014146:	701a      	strb	r2, [r3, #0]

    /* Is a backslash present?  */
    if ((*source_ptr == '\\') || (*source_ptr == '/'))
 8014148:	687b      	ldr	r3, [r7, #4]
 801414a:	781b      	ldrb	r3, [r3, #0]
 801414c:	2b5c      	cmp	r3, #92	; 0x5c
 801414e:	d003      	beq.n	8014158 <_fx_directory_name_extract+0x20>
 8014150:	687b      	ldr	r3, [r7, #4]
 8014152:	781b      	ldrb	r3, [r3, #0]
 8014154:	2b2f      	cmp	r3, #47	; 0x2f
 8014156:	d106      	bne.n	8014166 <_fx_directory_name_extract+0x2e>
    {

        /* Advance the string pointer.  */
        source_ptr++;
 8014158:	687b      	ldr	r3, [r7, #4]
 801415a:	3301      	adds	r3, #1
 801415c:	607b      	str	r3, [r7, #4]
    }

    /* Loop to remove any leading spaces.  */
    while (*source_ptr == ' ')
 801415e:	e002      	b.n	8014166 <_fx_directory_name_extract+0x2e>
    {

        /* Position past leading space.  */
        source_ptr++;
 8014160:	687b      	ldr	r3, [r7, #4]
 8014162:	3301      	adds	r3, #1
 8014164:	607b      	str	r3, [r7, #4]
    while (*source_ptr == ' ')
 8014166:	687b      	ldr	r3, [r7, #4]
 8014168:	781b      	ldrb	r3, [r3, #0]
 801416a:	2b20      	cmp	r3, #32
 801416c:	d0f8      	beq.n	8014160 <_fx_directory_name_extract+0x28>
    }

    /* Loop to extract the name.  */
    i = 0;
 801416e:	2300      	movs	r3, #0
 8014170:	60fb      	str	r3, [r7, #12]
    while (*source_ptr)
 8014172:	e015      	b.n	80141a0 <_fx_directory_name_extract+0x68>
    {

        /* If another backslash is present, break the loop.  */
        if ((*source_ptr == '\\') || (*source_ptr == '/'))
 8014174:	687b      	ldr	r3, [r7, #4]
 8014176:	781b      	ldrb	r3, [r3, #0]
 8014178:	2b5c      	cmp	r3, #92	; 0x5c
 801417a:	d017      	beq.n	80141ac <_fx_directory_name_extract+0x74>
 801417c:	687b      	ldr	r3, [r7, #4]
 801417e:	781b      	ldrb	r3, [r3, #0]
 8014180:	2b2f      	cmp	r3, #47	; 0x2f
 8014182:	d013      	beq.n	80141ac <_fx_directory_name_extract+0x74>
            break;
        }

        /* Long name can be at most 255 characters, but are further limited by the
           FX_MAX_LONG_NAME_LEN define.  */
        if (i == FX_MAX_LONG_NAME_LEN - 1)
 8014184:	68fb      	ldr	r3, [r7, #12]
 8014186:	2bff      	cmp	r3, #255	; 0xff
 8014188:	d00f      	beq.n	80141aa <_fx_directory_name_extract+0x72>
        {
            break;
        }

        /* Store the character.  */
        dest_ptr[i] =  *source_ptr++;
 801418a:	687b      	ldr	r3, [r7, #4]
 801418c:	1c5a      	adds	r2, r3, #1
 801418e:	607a      	str	r2, [r7, #4]
 8014190:	6839      	ldr	r1, [r7, #0]
 8014192:	68fa      	ldr	r2, [r7, #12]
 8014194:	440a      	add	r2, r1
 8014196:	781b      	ldrb	r3, [r3, #0]
 8014198:	7013      	strb	r3, [r2, #0]

        /* Increment the character counter.  */
        i++;
 801419a:	68fb      	ldr	r3, [r7, #12]
 801419c:	3301      	adds	r3, #1
 801419e:	60fb      	str	r3, [r7, #12]
    while (*source_ptr)
 80141a0:	687b      	ldr	r3, [r7, #4]
 80141a2:	781b      	ldrb	r3, [r3, #0]
 80141a4:	2b00      	cmp	r3, #0
 80141a6:	d1e5      	bne.n	8014174 <_fx_directory_name_extract+0x3c>
 80141a8:	e000      	b.n	80141ac <_fx_directory_name_extract+0x74>
            break;
 80141aa:	bf00      	nop
    }

    /* NULL-terminate the string.  */
    dest_ptr[i] =  0;
 80141ac:	683a      	ldr	r2, [r7, #0]
 80141ae:	68fb      	ldr	r3, [r7, #12]
 80141b0:	4413      	add	r3, r2
 80141b2:	2200      	movs	r2, #0
 80141b4:	701a      	strb	r2, [r3, #0]

    /* Determine if we can backup to the previous character.  */
    if (i)
 80141b6:	68fb      	ldr	r3, [r7, #12]
 80141b8:	2b00      	cmp	r3, #0
 80141ba:	d00b      	beq.n	80141d4 <_fx_directory_name_extract+0x9c>
    {

        /* Yes, we can move backwards.  */
        i--;
 80141bc:	68fb      	ldr	r3, [r7, #12]
 80141be:	3b01      	subs	r3, #1
 80141c0:	60fb      	str	r3, [r7, #12]
    }

    /* Get rid of trailing blanks in the destination string.  */
    while (dest_ptr[i] == ' ')
 80141c2:	e007      	b.n	80141d4 <_fx_directory_name_extract+0x9c>
    {

        /* Set this entry to NULL.  */
        dest_ptr[i] =  0;
 80141c4:	683a      	ldr	r2, [r7, #0]
 80141c6:	68fb      	ldr	r3, [r7, #12]
 80141c8:	4413      	add	r3, r2
 80141ca:	2200      	movs	r2, #0
 80141cc:	701a      	strb	r2, [r3, #0]

        /* Backup to the next character. Since leading spaces have been removed,
           we know that the index is always greater than 1.  */
        i--;
 80141ce:	68fb      	ldr	r3, [r7, #12]
 80141d0:	3b01      	subs	r3, #1
 80141d2:	60fb      	str	r3, [r7, #12]
    while (dest_ptr[i] == ' ')
 80141d4:	683a      	ldr	r2, [r7, #0]
 80141d6:	68fb      	ldr	r3, [r7, #12]
 80141d8:	4413      	add	r3, r2
 80141da:	781b      	ldrb	r3, [r3, #0]
 80141dc:	2b20      	cmp	r3, #32
 80141de:	d0f1      	beq.n	80141c4 <_fx_directory_name_extract+0x8c>
    }

    /* Determine if the source string is now at the end.  */
    if (*source_ptr == 0)
 80141e0:	687b      	ldr	r3, [r7, #4]
 80141e2:	781b      	ldrb	r3, [r3, #0]
 80141e4:	2b00      	cmp	r3, #0
 80141e6:	d101      	bne.n	80141ec <_fx_directory_name_extract+0xb4>
    {

        /* Yes, return a NULL pointer.  */
        source_ptr = FX_NULL;
 80141e8:	2300      	movs	r3, #0
 80141ea:	607b      	str	r3, [r7, #4]
    }

    /* Return the last pointer position in the source.  */
    return(source_ptr);
 80141ec:	687b      	ldr	r3, [r7, #4]
}
 80141ee:	4618      	mov	r0, r3
 80141f0:	3714      	adds	r7, #20
 80141f2:	46bd      	mov	sp, r7
 80141f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141f8:	4770      	bx	lr
	...

080141fc <_fx_directory_search>:
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _fx_directory_search(FX_MEDIA *media_ptr, CHAR *name_ptr, FX_DIR_ENTRY *entry_ptr,
                           FX_DIR_ENTRY *last_dir_ptr, CHAR **last_name_ptr)
{
 80141fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8014200:	b0c0      	sub	sp, #256	; 0x100
 8014202:	af00      	add	r7, sp, #0
 8014204:	62f8      	str	r0, [r7, #44]	; 0x2c
 8014206:	62b9      	str	r1, [r7, #40]	; 0x28
 8014208:	627a      	str	r2, [r7, #36]	; 0x24
 801420a:	623b      	str	r3, [r7, #32]
UINT          found;
UINT          status;
#ifndef FX_MEDIA_DISABLE_SEARCH_CACHE
UINT          v, j;
#endif /* FX_MEDIA_DISABLE_SEARCH_CACHE */
ULONG         cluster, next_cluster = 0;
 801420c:	2300      	movs	r3, #0
 801420e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
FX_DIR_ENTRY  search_dir;
FX_DIR_ENTRY *search_dir_ptr;
CHAR         *name, alpha, name_alpha;
#ifndef FX_MEDIA_DISABLE_SEARCH_CACHE
UINT          index;
CHAR         *path_ptr =  FX_NULL;
 8014212:	2300      	movs	r3, #0
 8014214:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
CHAR         *original_name =  name_ptr;
 8014218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801421a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
#endif /* FX_ENABLE_EXFAT */

#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of directory search requests.  */
    media_ptr -> fx_media_directory_searches++;
 801421e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014220:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 8014224:	1c5a      	adds	r2, r3, #1
 8014226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014228:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
#endif

    /* Setup pointer to media name buffer.  */
    name =  media_ptr -> fx_media_name_buffer;
 801422c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801422e:	f603 039c 	addw	r3, r3, #2204	; 0x89c
 8014232:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

    /* Setup the last directory, if required.  */
    if (last_dir_ptr)
 8014236:	6a3b      	ldr	r3, [r7, #32]
 8014238:	2b00      	cmp	r3, #0
 801423a:	d003      	beq.n	8014244 <_fx_directory_search+0x48>
    {

        /* Set the first character of the directory entry to NULL to
           indicate root or no directory.  */
        last_dir_ptr -> fx_dir_entry_name[0] =  0;
 801423c:	6a3b      	ldr	r3, [r7, #32]
 801423e:	681a      	ldr	r2, [r3, #0]
 8014240:	2300      	movs	r3, #0
 8014242:	7013      	strb	r3, [r2, #0]
    }

    /* Determine if the file name has a full directory path.  */
    if ((*name_ptr == '\\') || (*name_ptr == '/'))
 8014244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014246:	781b      	ldrb	r3, [r3, #0]
 8014248:	2b5c      	cmp	r3, #92	; 0x5c
 801424a:	d003      	beq.n	8014254 <_fx_directory_search+0x58>
 801424c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801424e:	781b      	ldrb	r3, [r3, #0]
 8014250:	2b2f      	cmp	r3, #47	; 0x2f
 8014252:	d103      	bne.n	801425c <_fx_directory_search+0x60>
    {

        /* Directory name has full path, set the search pointer to NULL.  */
        search_dir_ptr =  FX_NULL;
 8014254:	2300      	movs	r3, #0
 8014256:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 801425a:	e044      	b.n	80142e6 <_fx_directory_search+0xea>
           directory - if there is one.  */

        /* First check for a local path pointer stored in the thread control block.  This
           is only available in ThreadX Version 4 and above.  */
#ifndef FX_NO_LOCAL_PATH
        if (_tx_thread_current_ptr -> tx_thread_filex_ptr)
 801425c:	4bab      	ldr	r3, [pc, #684]	; (801450c <_fx_directory_search+0x310>)
 801425e:	681b      	ldr	r3, [r3, #0]
 8014260:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014264:	2b00      	cmp	r3, #0
 8014266:	d022      	beq.n	80142ae <_fx_directory_search+0xb2>
        {

            /* Determine if the local directory is not the root directory.  */
            if (((FX_PATH *)_tx_thread_current_ptr -> tx_thread_filex_ptr) -> fx_path_directory.fx_dir_entry_name[0])
 8014268:	4ba8      	ldr	r3, [pc, #672]	; (801450c <_fx_directory_search+0x310>)
 801426a:	681b      	ldr	r3, [r3, #0]
 801426c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014270:	681b      	ldr	r3, [r3, #0]
 8014272:	781b      	ldrb	r3, [r3, #0]
 8014274:	2b00      	cmp	r3, #0
 8014276:	d016      	beq.n	80142a6 <_fx_directory_search+0xaa>
            {

                /* Start at the current working directory of the media.  */
                search_dir =   ((FX_PATH *)_tx_thread_current_ptr -> tx_thread_filex_ptr) -> fx_path_directory;
 8014278:	4ba4      	ldr	r3, [pc, #656]	; (801450c <_fx_directory_search+0x310>)
 801427a:	681b      	ldr	r3, [r3, #0]
 801427c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014280:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8014284:	4619      	mov	r1, r3
 8014286:	2370      	movs	r3, #112	; 0x70
 8014288:	461a      	mov	r2, r3
 801428a:	f00b fb47 	bl	801f91c <memcpy>

#ifndef FX_MEDIA_DISABLE_SEARCH_CACHE

                /* Setup pointer to the path.  */
                path_ptr =  ((FX_PATH *)_tx_thread_current_ptr -> tx_thread_filex_ptr) -> fx_path_string;
 801428e:	4b9f      	ldr	r3, [pc, #636]	; (801450c <_fx_directory_search+0x310>)
 8014290:	681b      	ldr	r3, [r3, #0]
 8014292:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014296:	3370      	adds	r3, #112	; 0x70
 8014298:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
#endif

                /* Set the internal pointer to the search directory as well.  */
                search_dir_ptr =  &search_dir;
 801429c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80142a0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80142a4:	e01f      	b.n	80142e6 <_fx_directory_search+0xea>
            }
            else
            {

                /* We are searching in the root directory.  */
                search_dir_ptr =  FX_NULL;
 80142a6:	2300      	movs	r3, #0
 80142a8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80142ac:	e01b      	b.n	80142e6 <_fx_directory_search+0xea>
            }
        }
        else
#endif
        if (media_ptr -> fx_media_default_path.fx_path_directory.fx_dir_entry_name[0])
 80142ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142b0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80142b4:	781b      	ldrb	r3, [r3, #0]
 80142b6:	2b00      	cmp	r3, #0
 80142b8:	d012      	beq.n	80142e0 <_fx_directory_search+0xe4>
        {

            /* Start at the current working directory of the media.  */
            search_dir =  media_ptr -> fx_media_default_path.fx_path_directory;
 80142ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142bc:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80142c0:	f503 619c 	add.w	r1, r3, #1248	; 0x4e0
 80142c4:	2370      	movs	r3, #112	; 0x70
 80142c6:	461a      	mov	r2, r3
 80142c8:	f00b fb28 	bl	801f91c <memcpy>

#ifndef FX_MEDIA_DISABLE_SEARCH_CACHE

            /* Setup pointer to the path.  */
            path_ptr =  media_ptr -> fx_media_default_path.fx_path_string;
 80142cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142ce:	f503 63aa 	add.w	r3, r3, #1360	; 0x550
 80142d2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
#endif

            /* Set the internal pointer to the search directory as well.  */
            search_dir_ptr =  &search_dir;
 80142d6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80142da:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80142de:	e002      	b.n	80142e6 <_fx_directory_search+0xea>
        else
        {

            /* The current default directory is the root so just set the
               search directory pointer to NULL.  */
            search_dir_ptr =  FX_NULL;
 80142e0:	2300      	movs	r3, #0
 80142e2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }

#ifndef FX_MEDIA_DISABLE_SEARCH_CACHE

    /* Determine if there is a previously found directory entry.  */
    if (media_ptr -> fx_media_last_found_name[0])
 80142e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142e8:	f893 33e0 	ldrb.w	r3, [r3, #992]	; 0x3e0
 80142ec:	2b00      	cmp	r3, #0
 80142ee:	f000 81b9 	beq.w	8014664 <_fx_directory_search+0x468>
    CHAR *temp_ptr, beta;

        /* Yes, there is a previously found directory in our cache.  */

        /* Initialize the index.  */
        v =  0;
 80142f2:	2300      	movs	r3, #0
 80142f4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4

        /* Determine if there is a full path.  */
        if ((*name_ptr == '\\') || (*name_ptr == '/'))
 80142f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80142fa:	781b      	ldrb	r3, [r3, #0]
 80142fc:	2b5c      	cmp	r3, #92	; 0x5c
 80142fe:	d02d      	beq.n	801435c <_fx_directory_search+0x160>
 8014300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014302:	781b      	ldrb	r3, [r3, #0]
 8014304:	2b2f      	cmp	r3, #47	; 0x2f
 8014306:	d14c      	bne.n	80143a2 <_fx_directory_search+0x1a6>
        {

            /* Yes, the full path is in the name buffer. Simply compare with what is in
               the last search buffer.  */
            while ((v < (FX_MAX_LAST_NAME_LEN - 1)) && (name_ptr[v]))
 8014308:	e028      	b.n	801435c <_fx_directory_search+0x160>
            {

                /* Pickup the respective name characters.  */
                alpha =  name_ptr[v];
 801430a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801430c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8014310:	4413      	add	r3, r2
 8014312:	781b      	ldrb	r3, [r3, #0]
 8014314:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
                beta =   media_ptr -> fx_media_last_found_name[v];
 8014318:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801431a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801431e:	4413      	add	r3, r2
 8014320:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 8014324:	781b      	ldrb	r3, [r3, #0]
 8014326:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3

                /* Ensure directory markers are the same.  */
                if (alpha == '\\')
 801432a:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 801432e:	2b5c      	cmp	r3, #92	; 0x5c
 8014330:	d102      	bne.n	8014338 <_fx_directory_search+0x13c>
                {
                    alpha =  '/';
 8014332:	232f      	movs	r3, #47	; 0x2f
 8014334:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
                }
                if (beta == '\\')
 8014338:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 801433c:	2b5c      	cmp	r3, #92	; 0x5c
 801433e:	d102      	bne.n	8014346 <_fx_directory_search+0x14a>
                {
                    beta =  '/';
 8014340:	232f      	movs	r3, #47	; 0x2f
 8014342:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
                }

                /* Is the name the same?  */
                if (alpha != beta)
 8014346:	f897 20d3 	ldrb.w	r2, [r7, #211]	; 0xd3
 801434a:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 801434e:	429a      	cmp	r2, r3
 8014350:	d110      	bne.n	8014374 <_fx_directory_search+0x178>
                    /* Break out of loop!  */
                    break;
                }

                /* Move to next character.  */
                v++;
 8014352:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8014356:	3301      	adds	r3, #1
 8014358:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
            while ((v < (FX_MAX_LAST_NAME_LEN - 1)) && (name_ptr[v]))
 801435c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8014360:	2bfe      	cmp	r3, #254	; 0xfe
 8014362:	d808      	bhi.n	8014376 <_fx_directory_search+0x17a>
 8014364:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014366:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801436a:	4413      	add	r3, r2
 801436c:	781b      	ldrb	r3, [r3, #0]
 801436e:	2b00      	cmp	r3, #0
 8014370:	d1cb      	bne.n	801430a <_fx_directory_search+0x10e>
 8014372:	e000      	b.n	8014376 <_fx_directory_search+0x17a>
                    break;
 8014374:	bf00      	nop
            }

            /* Determine if we have a match.  */
            if (name_ptr[v] != media_ptr -> fx_media_last_found_name[v])
 8014376:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014378:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801437c:	4413      	add	r3, r2
 801437e:	7819      	ldrb	r1, [r3, #0]
 8014380:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014382:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8014386:	4413      	add	r3, r2
 8014388:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 801438c:	781b      	ldrb	r3, [r3, #0]
 801438e:	4299      	cmp	r1, r3
 8014390:	d003      	beq.n	801439a <_fx_directory_search+0x19e>
            {
                match =  FX_FALSE;
 8014392:	2300      	movs	r3, #0
 8014394:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
            if (name_ptr[v] != media_ptr -> fx_media_last_found_name[v])
 8014398:	e0cf      	b.n	801453a <_fx_directory_search+0x33e>
            }
            else
            {
                match =  FX_TRUE;
 801439a:	2301      	movs	r3, #1
 801439c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
            if (name_ptr[v] != media_ptr -> fx_media_last_found_name[v])
 80143a0:	e0cb      	b.n	801453a <_fx_directory_search+0x33e>
        }
        else
        {

            /* Default to found.  */
            match =  FX_TRUE;
 80143a2:	2301      	movs	r3, #1
 80143a4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

            /* Determine if there is a default path to compare with.  */
            if (path_ptr)
 80143a8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80143ac:	2b00      	cmp	r3, #0
 80143ae:	d043      	beq.n	8014438 <_fx_directory_search+0x23c>
            {

                /* Yes, compare the current path with what is contained in the last
                   found buffer. Note that the last found name must have at least one
                   path separator as well as room for at least one character for a name. */
                while ((v < (FX_MAX_LAST_NAME_LEN - 1)) && (path_ptr[v]))
 80143b0:	e029      	b.n	8014406 <_fx_directory_search+0x20a>
                {

                    /* Pickup the respective name characters.  */
                    alpha =  media_ptr -> fx_media_last_found_name[v];
 80143b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80143b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80143b8:	4413      	add	r3, r2
 80143ba:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 80143be:	781b      	ldrb	r3, [r3, #0]
 80143c0:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
                    beta =   path_ptr[v];
 80143c4:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80143c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80143cc:	4413      	add	r3, r2
 80143ce:	781b      	ldrb	r3, [r3, #0]
 80143d0:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3

                    /* Ensure directory markers are the same.  */
                    if (alpha == '\\')
 80143d4:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 80143d8:	2b5c      	cmp	r3, #92	; 0x5c
 80143da:	d102      	bne.n	80143e2 <_fx_directory_search+0x1e6>
                    {
                        alpha =  '/';
 80143dc:	232f      	movs	r3, #47	; 0x2f
 80143de:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
                    }
                    if (beta == '\\')
 80143e2:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 80143e6:	2b5c      	cmp	r3, #92	; 0x5c
 80143e8:	d102      	bne.n	80143f0 <_fx_directory_search+0x1f4>
                    {
                        beta =  '/';
 80143ea:	232f      	movs	r3, #47	; 0x2f
 80143ec:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
                    }

                    /* Is the name the same?  */
                    if (alpha != beta)
 80143f0:	f897 20d3 	ldrb.w	r2, [r7, #211]	; 0xd3
 80143f4:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 80143f8:	429a      	cmp	r2, r3
 80143fa:	d111      	bne.n	8014420 <_fx_directory_search+0x224>
                        /* Break out of loop!  */
                        break;
                    }

                    /* Move to next character.  */
                    v++;
 80143fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8014400:	3301      	adds	r3, #1
 8014402:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
                while ((v < (FX_MAX_LAST_NAME_LEN - 1)) && (path_ptr[v]))
 8014406:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801440a:	2bfe      	cmp	r3, #254	; 0xfe
 801440c:	d809      	bhi.n	8014422 <_fx_directory_search+0x226>
 801440e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8014412:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8014416:	4413      	add	r3, r2
 8014418:	781b      	ldrb	r3, [r3, #0]
 801441a:	2b00      	cmp	r3, #0
 801441c:	d1c9      	bne.n	80143b2 <_fx_directory_search+0x1b6>
 801441e:	e000      	b.n	8014422 <_fx_directory_search+0x226>
                        break;
 8014420:	bf00      	nop
                }

                /* Determine if we don't have a match...  The relative path must be exhausted. */
                if (path_ptr[v])
 8014422:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8014426:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801442a:	4413      	add	r3, r2
 801442c:	781b      	ldrb	r3, [r3, #0]
 801442e:	2b00      	cmp	r3, #0
 8014430:	d002      	beq.n	8014438 <_fx_directory_search+0x23c>
                {
                    match =  FX_FALSE;
 8014432:	2300      	movs	r3, #0
 8014434:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                }
            }

            /* Determine if we still have a match.  */
            if (match)
 8014438:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801443c:	2b00      	cmp	r3, #0
 801443e:	d07c      	beq.n	801453a <_fx_directory_search+0x33e>

                /* Now examine the rest of the last name and the newly supplied
                   input name.  */

                /* Determine if a valid directory separator is present.  */
                if ((media_ptr -> fx_media_last_found_name[v] != '\\') &&
 8014440:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014442:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8014446:	4413      	add	r3, r2
 8014448:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 801444c:	781b      	ldrb	r3, [r3, #0]
 801444e:	2b5c      	cmp	r3, #92	; 0x5c
 8014450:	d00c      	beq.n	801446c <_fx_directory_search+0x270>
                    (media_ptr -> fx_media_last_found_name[v] != '/'))
 8014452:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014454:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8014458:	4413      	add	r3, r2
 801445a:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 801445e:	781b      	ldrb	r3, [r3, #0]
                if ((media_ptr -> fx_media_last_found_name[v] != '\\') &&
 8014460:	2b2f      	cmp	r3, #47	; 0x2f
 8014462:	d003      	beq.n	801446c <_fx_directory_search+0x270>
                {

                    /* Set match to false - invalid directory path separator.  */
                    match =  FX_FALSE;
 8014464:	2300      	movs	r3, #0
 8014466:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 801446a:	e004      	b.n	8014476 <_fx_directory_search+0x27a>
                }
                else
                {
                    /* Position past the next directory separator in the
                       last name string.  */
                    v++;
 801446c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8014470:	3301      	adds	r3, #1
 8014472:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
                }

                /* Yes, the full path is in the name buffer. Simply compare with what is in
                   the last search buffer.  */
                j =  0;
 8014476:	2300      	movs	r3, #0
 8014478:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
                while ((v < (FX_MAX_LAST_NAME_LEN - 1)) && (name_ptr[j]) && (match))
 801447c:	e02d      	b.n	80144da <_fx_directory_search+0x2de>
                {

                    /* Pickup the respective name characters.  */
                    alpha =  name_ptr[j];
 801447e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014480:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8014484:	4413      	add	r3, r2
 8014486:	781b      	ldrb	r3, [r3, #0]
 8014488:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
                    beta =   media_ptr -> fx_media_last_found_name[v];
 801448c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801448e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8014492:	4413      	add	r3, r2
 8014494:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 8014498:	781b      	ldrb	r3, [r3, #0]
 801449a:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3

                    /* Ensure directory markers are the same.  */
                    if (alpha == '\\')
 801449e:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 80144a2:	2b5c      	cmp	r3, #92	; 0x5c
 80144a4:	d102      	bne.n	80144ac <_fx_directory_search+0x2b0>
                    {
                        alpha =  '/';
 80144a6:	232f      	movs	r3, #47	; 0x2f
 80144a8:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
                    }
                    if (beta == '\\')
 80144ac:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 80144b0:	2b5c      	cmp	r3, #92	; 0x5c
 80144b2:	d102      	bne.n	80144ba <_fx_directory_search+0x2be>
                    {
                        beta =  '/';
 80144b4:	232f      	movs	r3, #47	; 0x2f
 80144b6:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
                    }

                    /* Is the name the same?  */
                    if (alpha != beta)
 80144ba:	f897 20d3 	ldrb.w	r2, [r7, #211]	; 0xd3
 80144be:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 80144c2:	429a      	cmp	r2, r3
 80144c4:	d119      	bne.n	80144fa <_fx_directory_search+0x2fe>
                        /* Break out of loop!  */
                        break;
                    }

                    /* Move to next character.  */
                    v++;
 80144c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80144ca:	3301      	adds	r3, #1
 80144cc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
                    j++;
 80144d0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80144d4:	3301      	adds	r3, #1
 80144d6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
                while ((v < (FX_MAX_LAST_NAME_LEN - 1)) && (name_ptr[j]) && (match))
 80144da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80144de:	2bfe      	cmp	r3, #254	; 0xfe
 80144e0:	d80c      	bhi.n	80144fc <_fx_directory_search+0x300>
 80144e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80144e4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80144e8:	4413      	add	r3, r2
 80144ea:	781b      	ldrb	r3, [r3, #0]
 80144ec:	2b00      	cmp	r3, #0
 80144ee:	d005      	beq.n	80144fc <_fx_directory_search+0x300>
 80144f0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80144f4:	2b00      	cmp	r3, #0
 80144f6:	d1c2      	bne.n	801447e <_fx_directory_search+0x282>
 80144f8:	e000      	b.n	80144fc <_fx_directory_search+0x300>
                        break;
 80144fa:	bf00      	nop
                }

                /* Avoid accessing fx_media_last_found_name out of bounds. */
                if (v >= 256)
 80144fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8014500:	2bff      	cmp	r3, #255	; 0xff
 8014502:	d905      	bls.n	8014510 <_fx_directory_search+0x314>
                {
                    match = FX_FALSE;
 8014504:	2300      	movs	r3, #0
 8014506:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 801450a:	e016      	b.n	801453a <_fx_directory_search+0x33e>
 801450c:	240050cc 	.word	0x240050cc
                }
                else if ((match) && (name_ptr[j] != media_ptr -> fx_media_last_found_name[v]))
 8014510:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8014514:	2b00      	cmp	r3, #0
 8014516:	d010      	beq.n	801453a <_fx_directory_search+0x33e>
 8014518:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801451a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 801451e:	4413      	add	r3, r2
 8014520:	7819      	ldrb	r1, [r3, #0]
 8014522:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014524:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8014528:	4413      	add	r3, r2
 801452a:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 801452e:	781b      	ldrb	r3, [r3, #0]
 8014530:	4299      	cmp	r1, r3
 8014532:	d002      	beq.n	801453a <_fx_directory_search+0x33e>
                {

                    /* We don't have a match.  */
                    match =  FX_FALSE;
 8014534:	2300      	movs	r3, #0
 8014536:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                }
            }
        }

        /* Now determine if we actually found a match.  */
        if (match)
 801453a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801453e:	2b00      	cmp	r3, #0
 8014540:	f000 8090 	beq.w	8014664 <_fx_directory_search+0x468>
        {

            /* Save the directory entry name pointer.  */
            temp_ptr =  entry_ptr -> fx_dir_entry_name;
 8014544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014546:	681b      	ldr	r3, [r3, #0]
 8014548:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

            /* Copy the saved directory entry.  */
            *entry_ptr =  media_ptr -> fx_media_last_found_entry;
 801454c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801454e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014550:	4610      	mov	r0, r2
 8014552:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8014556:	2270      	movs	r2, #112	; 0x70
 8014558:	4619      	mov	r1, r3
 801455a:	f00b f9df 	bl	801f91c <memcpy>

            /* Restore the directory entry name pointer.  */
            entry_ptr -> fx_dir_entry_name =  temp_ptr;
 801455e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014560:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8014564:	601a      	str	r2, [r3, #0]

            /* Copy the directory name into the destination directory name.  */
            for (index = 0; index < FX_MAX_LONG_NAME_LEN; index++)
 8014566:	2300      	movs	r3, #0
 8014568:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 801456c:	e01d      	b.n	80145aa <_fx_directory_search+0x3ae>
            {

                /* Copy character into the destination.  */
                temp_ptr[index] =  media_ptr -> fx_media_last_found_file_name[index];
 801456e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8014572:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8014576:	4413      	add	r3, r2
 8014578:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801457a:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 801457e:	440a      	add	r2, r1
 8014580:	f502 7238 	add.w	r2, r2, #736	; 0x2e0
 8014584:	7812      	ldrb	r2, [r2, #0]
 8014586:	701a      	strb	r2, [r3, #0]

                /* See if we have copied the NULL termination character.  */
                if (temp_ptr[index] == (CHAR)FX_NULL)
 8014588:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801458c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8014590:	4413      	add	r3, r2
 8014592:	781b      	ldrb	r3, [r3, #0]
 8014594:	2b00      	cmp	r3, #0
 8014596:	d103      	bne.n	80145a0 <_fx_directory_search+0x3a4>
                {
                
                    /* Determine if we should break here or at the top of the loop.  */
                    if (index < (FX_MAX_LONG_NAME_LEN - 1))
 8014598:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801459c:	2bfe      	cmp	r3, #254	; 0xfe
 801459e:	d909      	bls.n	80145b4 <_fx_directory_search+0x3b8>
            for (index = 0; index < FX_MAX_LONG_NAME_LEN; index++)
 80145a0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80145a4:	3301      	adds	r3, #1
 80145a6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80145aa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80145ae:	2bff      	cmp	r3, #255	; 0xff
 80145b0:	d9dd      	bls.n	801456e <_fx_directory_search+0x372>
 80145b2:	e000      	b.n	80145b6 <_fx_directory_search+0x3ba>
                    {
                    
                        /* Yes, break out of the loop early.  */
                        break;
 80145b4:	bf00      	nop
                    }
                }
            }

            /* Determine if there is a search directory to copy.  */
            if ((last_dir_ptr) && (media_ptr -> fx_media_last_found_directory_valid))
 80145b6:	6a3b      	ldr	r3, [r7, #32]
 80145b8:	2b00      	cmp	r3, #0
 80145ba:	d041      	beq.n	8014640 <_fx_directory_search+0x444>
 80145bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80145be:	f8d3 31fc 	ldr.w	r3, [r3, #508]	; 0x1fc
 80145c2:	2b00      	cmp	r3, #0
 80145c4:	d03c      	beq.n	8014640 <_fx_directory_search+0x444>

                /* Yes, there was a search directory... and one is requested in this request as well.
                   Simply copy it into the destination.  */

                /* First, save the name pointer from the list directory pointer.  */
                destination_name_ptr =  last_dir_ptr -> fx_dir_entry_name;
 80145c6:	6a3b      	ldr	r3, [r7, #32]
 80145c8:	681b      	ldr	r3, [r3, #0]
 80145ca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

                /* Copy the entire directory entry structure.  */
                *last_dir_ptr =  media_ptr -> fx_media_last_found_directory;
 80145ce:	6a3a      	ldr	r2, [r7, #32]
 80145d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80145d2:	4610      	mov	r0, r2
 80145d4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80145d8:	2270      	movs	r2, #112	; 0x70
 80145da:	4619      	mov	r1, r3
 80145dc:	f00b f99e 	bl	801f91c <memcpy>

                /* Restore the original name buffer pointer.  */
                last_dir_ptr -> fx_dir_entry_name =  destination_name_ptr;
 80145e0:	6a3b      	ldr	r3, [r7, #32]
 80145e2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80145e6:	601a      	str	r2, [r3, #0]

                /* Pickup pointer to name to copy.  */
                source_name_ptr =  media_ptr -> fx_media_last_found_directory.fx_dir_entry_name;
 80145e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80145ea:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80145ee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

                /* Loop to copy the name into the last directory name buffer.  */
                for (n = 0; n < FX_MAX_LONG_NAME_LEN; n++)
 80145f2:	2300      	movs	r3, #0
 80145f4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80145f8:	e01c      	b.n	8014634 <_fx_directory_search+0x438>
                {
                
                    /* Copy a character.  */
                    destination_name_ptr[n] =  source_name_ptr[n];
 80145fa:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80145fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8014602:	441a      	add	r2, r3
 8014604:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 8014608:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801460c:	440b      	add	r3, r1
 801460e:	7812      	ldrb	r2, [r2, #0]
 8014610:	701a      	strb	r2, [r3, #0]
                
                    /* See if we have copied the NULL termination character.  */
                    if (source_name_ptr[n] == (CHAR)FX_NULL)
 8014612:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8014616:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801461a:	4413      	add	r3, r2
 801461c:	781b      	ldrb	r3, [r3, #0]
 801461e:	2b00      	cmp	r3, #0
 8014620:	d103      	bne.n	801462a <_fx_directory_search+0x42e>
                    {
                
                        /* Determine if we should break here or at the top of the loop.  */
                        if (n < (FX_MAX_LONG_NAME_LEN - 1))
 8014622:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8014626:	2bfe      	cmp	r3, #254	; 0xfe
 8014628:	d909      	bls.n	801463e <_fx_directory_search+0x442>
                for (n = 0; n < FX_MAX_LONG_NAME_LEN; n++)
 801462a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801462e:	3301      	adds	r3, #1
 8014630:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8014634:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8014638:	2bff      	cmp	r3, #255	; 0xff
 801463a:	d9de      	bls.n	80145fa <_fx_directory_search+0x3fe>
 801463c:	e000      	b.n	8014640 <_fx_directory_search+0x444>
                        {
                    
                            /* Yes, break out of the loop early.  */
                            break;
 801463e:	bf00      	nop
                    }
                }
            }

            /* Return the last name pointer, if required.  */
            if (last_name_ptr)
 8014640:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8014644:	2b00      	cmp	r3, #0
 8014646:	d004      	beq.n	8014652 <_fx_directory_search+0x456>
            {

                /* Just set the last name to initial name string.  */
                *last_name_ptr =  temp_ptr;
 8014648:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 801464c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8014650:	601a      	str	r2, [r3, #0]
            }

#ifndef FX_MEDIA_STATISTICS_DISABLE

            /* Increment the number of directory search cache hits.  */
            media_ptr -> fx_media_directory_search_cache_hits++;
 8014652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014654:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 8014658:	1c5a      	adds	r2, r3, #1
 801465a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801465c:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
#endif

            /* Return success.  */
            return(FX_SUCCESS);
 8014660:	2300      	movs	r3, #0
 8014662:	e2ff      	b.n	8014c64 <_fx_directory_search+0xa68>
        }
    }

    /* Not a sequential search, invalidate the saved information.  */
    media_ptr -> fx_media_last_found_name[0] =  FX_NULL;
 8014664:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014666:	2300      	movs	r3, #0
 8014668:	f882 33e0 	strb.w	r3, [r2, #992]	; 0x3e0
    /* Loop to traverse the directory paths to find the specified file.  */
    do
    {

        /* Remember the last name pointer, if required.  */
        if (last_name_ptr)
 801466c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8014670:	2b00      	cmp	r3, #0
 8014672:	d003      	beq.n	801467c <_fx_directory_search+0x480>
        {

            /* Just set the last name to initial name string.  */
            *last_name_ptr =  name_ptr;
 8014674:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8014678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801467a:	6013      	str	r3, [r2, #0]
        }

        /* Extract file name.  */
        name_ptr =  _fx_directory_name_extract(name_ptr, name);
 801467c:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8014680:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014682:	f7ff fd59 	bl	8014138 <_fx_directory_name_extract>
 8014686:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Calculate the directory size.  */
        if (search_dir_ptr)
 8014688:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801468c:	2b00      	cmp	r3, #0
 801468e:	f000 80be 	beq.w	801480e <_fx_directory_search+0x612>
            else
            {
#endif /* FX_ENABLE_EXFAT */

                /* Ensure that the search directory's last search cluster is cleared.  */
                search_dir_ptr -> fx_dir_entry_last_search_cluster =  0;
 8014692:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8014696:	2300      	movs	r3, #0
 8014698:	6513      	str	r3, [r2, #80]	; 0x50

                /* Calculate the directory size by counting the allocated
                clusters for it.  */
                i =        0;
 801469a:	2300      	movs	r3, #0
 801469c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                cluster =  search_dir_ptr -> fx_dir_entry_cluster;
 80146a0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80146a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80146a6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
                while (cluster < media_ptr -> fx_media_fat_reserved)
 80146aa:	e02b      	b.n	8014704 <_fx_directory_search+0x508>
                {

                    /* Increment the cluster count.  */
                    i++;
 80146ac:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80146b0:	3301      	adds	r3, #1
 80146b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

                    /* Read the next FAT entry.  */
                    status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &next_cluster);
 80146b6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80146ba:	461a      	mov	r2, r3
 80146bc:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 80146c0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80146c2:	f005 f84d 	bl	8019760 <_fx_utility_FAT_entry_read>
 80146c6:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8

                    /* Check the return status.  */
                    if (status != FX_SUCCESS)
 80146ca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80146ce:	2b00      	cmp	r3, #0
 80146d0:	d002      	beq.n	80146d8 <_fx_directory_search+0x4dc>
                    {

                        /* Return the bad status.  */
                        return(status);
 80146d2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80146d6:	e2c5      	b.n	8014c64 <_fx_directory_search+0xa68>
                    }

                    /* Check for error situation.  */
                    if ((cluster < FX_FAT_ENTRY_START) || (cluster == next_cluster) || (i > media_ptr -> fx_media_total_clusters))
 80146d8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80146dc:	2b01      	cmp	r3, #1
 80146de:	d90b      	bls.n	80146f8 <_fx_directory_search+0x4fc>
 80146e0:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80146e4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80146e8:	4293      	cmp	r3, r2
 80146ea:	d005      	beq.n	80146f8 <_fx_directory_search+0x4fc>
 80146ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80146ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80146f0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80146f4:	429a      	cmp	r2, r3
 80146f6:	d201      	bcs.n	80146fc <_fx_directory_search+0x500>
                    {

                        /* Return the bad status.  */
                        return(FX_FAT_READ_ERROR);
 80146f8:	2303      	movs	r3, #3
 80146fa:	e2b3      	b.n	8014c64 <_fx_directory_search+0xa68>
                    }

                    cluster = next_cluster;
 80146fc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8014700:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
                while (cluster < media_ptr -> fx_media_fat_reserved)
 8014704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014706:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 801470a:	f8d3 24a8 	ldr.w	r2, [r3, #1192]	; 0x4a8
 801470e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8014712:	4293      	cmp	r3, r2
 8014714:	d3ca      	bcc.n	80146ac <_fx_directory_search+0x4b0>
                }

                /* Now we can calculate the directory size.  */
                directory_size =  (((ULONG64) media_ptr -> fx_media_bytes_per_sector) *
 8014716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801471a:	2200      	movs	r2, #0
 801471c:	469a      	mov	sl, r3
 801471e:	4693      	mov	fp, r2
                                   ((ULONG64) media_ptr -> fx_media_sectors_per_cluster) * i)
 8014720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014722:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014724:	2200      	movs	r2, #0
 8014726:	613b      	str	r3, [r7, #16]
 8014728:	617a      	str	r2, [r7, #20]
                directory_size =  (((ULONG64) media_ptr -> fx_media_bytes_per_sector) *
 801472a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801472e:	4603      	mov	r3, r0
 8014730:	fb03 f20b 	mul.w	r2, r3, fp
 8014734:	460b      	mov	r3, r1
 8014736:	fb0a f303 	mul.w	r3, sl, r3
 801473a:	4413      	add	r3, r2
 801473c:	4602      	mov	r2, r0
 801473e:	fbaa 4502 	umull	r4, r5, sl, r2
 8014742:	442b      	add	r3, r5
 8014744:	461d      	mov	r5, r3
                                   ((ULONG64) media_ptr -> fx_media_sectors_per_cluster) * i)
 8014746:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801474a:	2200      	movs	r2, #0
 801474c:	60bb      	str	r3, [r7, #8]
 801474e:	60fa      	str	r2, [r7, #12]
 8014750:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8014754:	4603      	mov	r3, r0
 8014756:	fb03 f205 	mul.w	r2, r3, r5
 801475a:	460b      	mov	r3, r1
 801475c:	fb04 f303 	mul.w	r3, r4, r3
 8014760:	4413      	add	r3, r2
 8014762:	4602      	mov	r2, r0
 8014764:	fba4 8902 	umull	r8, r9, r4, r2
 8014768:	444b      	add	r3, r9
 801476a:	4699      	mov	r9, r3
                directory_size =  (((ULONG64) media_ptr -> fx_media_bytes_per_sector) *
 801476c:	f04f 0200 	mov.w	r2, #0
 8014770:	f04f 0300 	mov.w	r3, #0
 8014774:	ea4f 1258 	mov.w	r2, r8, lsr #5
 8014778:	ea42 62c9 	orr.w	r2, r2, r9, lsl #27
 801477c:	ea4f 1359 	mov.w	r3, r9, lsr #5
 8014780:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
                                    / (ULONG64) FX_DIR_ENTRY_SIZE;

                /* Also save this in the directory entry so we don't have to
                   calculate it later.  */
                search_dir_ptr -> fx_dir_entry_file_size =  directory_size;
 8014784:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 8014788:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 801478c:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
            }
#endif /* FX_ENABLE_EXFAT */

            /* If required, copy the last search directory entry into the
               destination.  */
            if (last_dir_ptr)
 8014790:	6a3b      	ldr	r3, [r7, #32]
 8014792:	2b00      	cmp	r3, #0
 8014794:	d046      	beq.n	8014824 <_fx_directory_search+0x628>
            {

                /* Copy the last search directory into the destination.  */

                /* First, save the name pointer from the list directory pointer.  */
                destination_name_ptr =  last_dir_ptr -> fx_dir_entry_name;
 8014796:	6a3b      	ldr	r3, [r7, #32]
 8014798:	681b      	ldr	r3, [r3, #0]
 801479a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

                /* Copy the entire directory entry structure.  */
                *last_dir_ptr =  *search_dir_ptr;
 801479e:	6a3a      	ldr	r2, [r7, #32]
 80147a0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80147a4:	4610      	mov	r0, r2
 80147a6:	4619      	mov	r1, r3
 80147a8:	2370      	movs	r3, #112	; 0x70
 80147aa:	461a      	mov	r2, r3
 80147ac:	f00b f8b6 	bl	801f91c <memcpy>

                /* Restore the original name buffer pointer.  */
                last_dir_ptr -> fx_dir_entry_name =  destination_name_ptr;
 80147b0:	6a3a      	ldr	r2, [r7, #32]
 80147b2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80147b6:	6013      	str	r3, [r2, #0]

                /* Pickup pointer to name to copy.  */
                source_name_ptr =  search_dir_ptr -> fx_dir_entry_name;
 80147b8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80147bc:	681b      	ldr	r3, [r3, #0]
 80147be:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

                /* Loop to copy the name into the last directory name buffer.  */
                for (n = 0; n < FX_MAX_LONG_NAME_LEN; n++)
 80147c2:	2300      	movs	r3, #0
 80147c4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80147c8:	e01c      	b.n	8014804 <_fx_directory_search+0x608>
                {

                    /* Copy a character.  */
                    destination_name_ptr[n] =  source_name_ptr[n];
 80147ca:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80147ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80147d2:	18d1      	adds	r1, r2, r3
 80147d4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80147d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80147dc:	441a      	add	r2, r3
 80147de:	780b      	ldrb	r3, [r1, #0]
 80147e0:	7013      	strb	r3, [r2, #0]

                    /* See if we have copied the NULL termination character.  */
                    if (source_name_ptr[n] == (CHAR) FX_NULL)
 80147e2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80147e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80147ea:	4413      	add	r3, r2
 80147ec:	781b      	ldrb	r3, [r3, #0]
 80147ee:	2b00      	cmp	r3, #0
 80147f0:	d103      	bne.n	80147fa <_fx_directory_search+0x5fe>
                    {
                
                        /* Determine if we should break here or at the top of the loop.  */
                        if (n < (FX_MAX_LONG_NAME_LEN - 1))
 80147f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80147f6:	2bfe      	cmp	r3, #254	; 0xfe
 80147f8:	d913      	bls.n	8014822 <_fx_directory_search+0x626>
                for (n = 0; n < FX_MAX_LONG_NAME_LEN; n++)
 80147fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80147fe:	3301      	adds	r3, #1
 8014800:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8014804:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8014808:	2bff      	cmp	r3, #255	; 0xff
 801480a:	d9de      	bls.n	80147ca <_fx_directory_search+0x5ce>
 801480c:	e00a      	b.n	8014824 <_fx_directory_search+0x628>
        }
        else
        {

            /* Directory size is the number of entries in the root directory.  */
            directory_size =  (ULONG)media_ptr -> fx_media_root_directory_entries;
 801480e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014810:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014812:	2200      	movs	r2, #0
 8014814:	603b      	str	r3, [r7, #0]
 8014816:	607a      	str	r2, [r7, #4]
 8014818:	e9d7 2300 	ldrd	r2, r3, [r7]
 801481c:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
 8014820:	e000      	b.n	8014824 <_fx_directory_search+0x628>
                            break;
 8014822:	bf00      	nop
        }

        /* Loop through entries in the directory.  Yes, this is a
           linear search!  */
        i =      0;
 8014824:	2300      	movs	r3, #0
 8014826:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        found =  FX_FALSE;
 801482a:	2300      	movs	r3, #0
 801482c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8

            /* Read an entry from the directory.  */
#ifdef FX_ENABLE_EXFAT
            status =  _fx_directory_entry_read_ex(media_ptr, search_dir_ptr, &i, entry_ptr, hash);
#else
            status =  _fx_directory_entry_read(media_ptr, search_dir_ptr, &i, entry_ptr);
 8014830:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8014834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014836:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 801483a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801483c:	f7fd fe7a 	bl	8012534 <_fx_directory_entry_read>
 8014840:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
#endif /* FX_ENABLE_EXFAT */

            i++;
 8014844:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8014848:	3301      	adds	r3, #1
 801484a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

            /* Check for error status.  */
            if (status != FX_SUCCESS)
 801484e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8014852:	2b00      	cmp	r3, #0
 8014854:	d002      	beq.n	801485c <_fx_directory_search+0x660>
            {
                return(status);
 8014856:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801485a:	e203      	b.n	8014c64 <_fx_directory_search+0xa68>

            /* Determine if this is the last directory entry.  */
#ifdef FX_ENABLE_EXFAT
            if (entry_ptr -> fx_dir_entry_type == FX_EXFAT_DIR_ENTRY_TYPE_END_MARKER)
#else
            if ((UCHAR)entry_ptr -> fx_dir_entry_name[0] == (UCHAR)FX_DIR_ENTRY_DONE)
 801485c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801485e:	681b      	ldr	r3, [r3, #0]
 8014860:	781b      	ldrb	r3, [r3, #0]
 8014862:	2b00      	cmp	r3, #0
 8014864:	f000 80c6 	beq.w	80149f4 <_fx_directory_search+0x7f8>
            {
                break;
            }

            /* Determine if the entry is a volume label entry */
            if ((entry_ptr -> fx_dir_entry_attributes & FX_VOLUME))
 8014868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801486a:	7f1b      	ldrb	r3, [r3, #28]
 801486c:	f003 0308 	and.w	r3, r3, #8
 8014870:	2b00      	cmp	r3, #0
 8014872:	f040 80a9 	bne.w	80149c8 <_fx_directory_search+0x7cc>

            /* Determine if this is an empty entry.  */
#ifdef FX_ENABLE_EXFAT
            if (entry_ptr -> fx_dir_entry_type != FX_EXFAT_DIR_ENTRY_TYPE_FILE_DIRECTORY)
#else
            if (((UCHAR)entry_ptr -> fx_dir_entry_name[0] == (UCHAR)FX_DIR_ENTRY_FREE) && (entry_ptr -> fx_dir_entry_short_name[0] == 0))
 8014876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014878:	681b      	ldr	r3, [r3, #0]
 801487a:	781b      	ldrb	r3, [r3, #0]
 801487c:	2be5      	cmp	r3, #229	; 0xe5
 801487e:	d104      	bne.n	801488a <_fx_directory_search+0x68e>
 8014880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014882:	791b      	ldrb	r3, [r3, #4]
 8014884:	2b00      	cmp	r3, #0
 8014886:	f000 80a1 	beq.w	80149cc <_fx_directory_search+0x7d0>
                continue;
            }

            /* Compare the input name and extension with the directory
               entry.  */
            work_ptr =      &name[0];
 801488a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801488e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
            dir_name_ptr =  &(entry_ptr -> fx_dir_entry_name[0]);
 8014892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014894:	681b      	ldr	r3, [r3, #0]
 8014896:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
            /* Loop to compare names.  */
            do
            {

                /* Pickup character of directory name.  */
                alpha =  *dir_name_ptr;
 801489a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801489e:	781b      	ldrb	r3, [r3, #0]
 80148a0:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3

                /* Pickup character of name.  */
                name_alpha =  *work_ptr;
 80148a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80148a8:	781b      	ldrb	r3, [r3, #0]
 80148aa:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2

                /* Determine if its case needs to be changed.  */
                if ((alpha >= 'a') && (alpha <= 'z'))
 80148ae:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 80148b2:	2b60      	cmp	r3, #96	; 0x60
 80148b4:	d908      	bls.n	80148c8 <_fx_directory_search+0x6cc>
 80148b6:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 80148ba:	2b7a      	cmp	r3, #122	; 0x7a
 80148bc:	d804      	bhi.n	80148c8 <_fx_directory_search+0x6cc>
                {

                    /* Yes, make upper case.  */
                    alpha =  (CHAR)((INT)alpha - 0x20);
 80148be:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 80148c2:	3b20      	subs	r3, #32
 80148c4:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
                }

                /* Determine if its case needs to be changed.  */
                if ((name_alpha >= 'a') && (name_alpha <= 'z'))
 80148c8:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 80148cc:	2b60      	cmp	r3, #96	; 0x60
 80148ce:	d908      	bls.n	80148e2 <_fx_directory_search+0x6e6>
 80148d0:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 80148d4:	2b7a      	cmp	r3, #122	; 0x7a
 80148d6:	d804      	bhi.n	80148e2 <_fx_directory_search+0x6e6>
                {

                    /* Yes, make upper case.  */
                    name_alpha =  (CHAR)((INT)name_alpha - 0x20);
 80148d8:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 80148dc:	3b20      	subs	r3, #32
 80148de:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
                }

                /* Compare name with directory name.  */
                if (alpha != name_alpha)
 80148e2:	f897 20d3 	ldrb.w	r2, [r7, #211]	; 0xd3
 80148e6:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 80148ea:	429a      	cmp	r2, r3
 80148ec:	d10f      	bne.n	801490e <_fx_directory_search+0x712>
                    /* The names don't match, get out of the loop. */
                    break;
                }

                /* Otherwise, increment the name pointers.  */
                work_ptr++;
 80148ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80148f2:	3301      	adds	r3, #1
 80148f4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
                dir_name_ptr++;
 80148f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80148fc:	3301      	adds	r3, #1
 80148fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
            } while (*dir_name_ptr);
 8014902:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014906:	781b      	ldrb	r3, [r3, #0]
 8014908:	2b00      	cmp	r3, #0
 801490a:	d1c6      	bne.n	801489a <_fx_directory_search+0x69e>
 801490c:	e000      	b.n	8014910 <_fx_directory_search+0x714>
                    break;
 801490e:	bf00      	nop

            /* Determine if the requested name has been found.  If so,
               return success to the caller.  */
            if ((*dir_name_ptr == 0) && (*work_ptr == *dir_name_ptr))
 8014910:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014914:	781b      	ldrb	r3, [r3, #0]
 8014916:	2b00      	cmp	r3, #0
 8014918:	d10b      	bne.n	8014932 <_fx_directory_search+0x736>
 801491a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801491e:	781a      	ldrb	r2, [r3, #0]
 8014920:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014924:	781b      	ldrb	r3, [r3, #0]
 8014926:	429a      	cmp	r2, r3
 8014928:	d103      	bne.n	8014932 <_fx_directory_search+0x736>
            {

                /* Yes, the name was located.  All pertinent directory
                   information is in the directory entry field.  */
                found =  FX_TRUE;
 801492a:	2301      	movs	r3, #1
 801492c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8014930:	e04d      	b.n	80149ce <_fx_directory_search+0x7d2>
            /* Determine if there is a short name to check.  */
#ifdef FX_ENABLE_EXFAT
            else if ((media_ptr -> fx_media_FAT_type != FX_exFAT) &&
                     (entry_ptr -> fx_dir_entry_short_name[0] != 0))
#else
            else if (entry_ptr -> fx_dir_entry_short_name[0] != 0)
 8014932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014934:	791b      	ldrb	r3, [r3, #4]
 8014936:	2b00      	cmp	r3, #0
 8014938:	d049      	beq.n	80149ce <_fx_directory_search+0x7d2>
            {

                /* Yes, check for the short part of the name.  */

                /* Compare the input name and extension with the directory entry.  */
                work_ptr =      &name[0];
 801493a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801493e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
                dir_name_ptr =  &(entry_ptr -> fx_dir_entry_short_name[0]);
 8014942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014944:	3304      	adds	r3, #4
 8014946:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                /* Loop to compare names.  */
                do
                {

                    /* Pickup character of directory name.  */
                    alpha =  *dir_name_ptr;
 801494a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801494e:	781b      	ldrb	r3, [r3, #0]
 8014950:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3

                    /* Pickup character of name.  */
                    name_alpha =  *work_ptr;
 8014954:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8014958:	781b      	ldrb	r3, [r3, #0]
 801495a:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2

                    /* Determine if its case needs to be changed.  */
                    if ((name_alpha >= 'a') && (name_alpha <= 'z'))
 801495e:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 8014962:	2b60      	cmp	r3, #96	; 0x60
 8014964:	d908      	bls.n	8014978 <_fx_directory_search+0x77c>
 8014966:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 801496a:	2b7a      	cmp	r3, #122	; 0x7a
 801496c:	d804      	bhi.n	8014978 <_fx_directory_search+0x77c>
                    {

                        /* Yes, make upper case.  */
                        name_alpha =  (CHAR)((INT)name_alpha - 0x20);
 801496e:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 8014972:	3b20      	subs	r3, #32
 8014974:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
                    }

                    /* Compare name with directory name.  */
                    if (alpha != name_alpha)
 8014978:	f897 20d3 	ldrb.w	r2, [r7, #211]	; 0xd3
 801497c:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 8014980:	429a      	cmp	r2, r3
 8014982:	d10f      	bne.n	80149a4 <_fx_directory_search+0x7a8>
                        break;
                    }

                    /* Otherwise, move the name pointers and increment the
                       count.  */
                    work_ptr++;
 8014984:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8014988:	3301      	adds	r3, #1
 801498a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
                    dir_name_ptr++;
 801498e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014992:	3301      	adds	r3, #1
 8014994:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                } while (*dir_name_ptr);
 8014998:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801499c:	781b      	ldrb	r3, [r3, #0]
 801499e:	2b00      	cmp	r3, #0
 80149a0:	d1d3      	bne.n	801494a <_fx_directory_search+0x74e>
 80149a2:	e000      	b.n	80149a6 <_fx_directory_search+0x7aa>
                        break;
 80149a4:	bf00      	nop

                /* Determine if the names match.  */
                if ((*dir_name_ptr == 0) && (*work_ptr == *dir_name_ptr))
 80149a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80149aa:	781b      	ldrb	r3, [r3, #0]
 80149ac:	2b00      	cmp	r3, #0
 80149ae:	d10e      	bne.n	80149ce <_fx_directory_search+0x7d2>
 80149b0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80149b4:	781a      	ldrb	r2, [r3, #0]
 80149b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80149ba:	781b      	ldrb	r3, [r3, #0]
 80149bc:	429a      	cmp	r2, r3
 80149be:	d106      	bne.n	80149ce <_fx_directory_search+0x7d2>
                {

                    /* Yes, the name was located.  All pertinent directory
                        information is in the directory entry field.  */
                    found =  FX_TRUE;
 80149c0:	2301      	movs	r3, #1
 80149c2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80149c6:	e002      	b.n	80149ce <_fx_directory_search+0x7d2>
                continue;
 80149c8:	bf00      	nop
 80149ca:	e000      	b.n	80149ce <_fx_directory_search+0x7d2>
                continue;
 80149cc:	bf00      	nop
                }
            }
        } while ((i < directory_size) && (!found));
 80149ce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80149d2:	2200      	movs	r2, #0
 80149d4:	61bb      	str	r3, [r7, #24]
 80149d6:	61fa      	str	r2, [r7, #28]
 80149d8:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 80149dc:	69b9      	ldr	r1, [r7, #24]
 80149de:	4291      	cmp	r1, r2
 80149e0:	69f9      	ldr	r1, [r7, #28]
 80149e2:	eb71 0303 	sbcs.w	r3, r1, r3
 80149e6:	d206      	bcs.n	80149f6 <_fx_directory_search+0x7fa>
 80149e8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80149ec:	2b00      	cmp	r3, #0
 80149ee:	f43f af1f 	beq.w	8014830 <_fx_directory_search+0x634>
 80149f2:	e000      	b.n	80149f6 <_fx_directory_search+0x7fa>
                break;
 80149f4:	bf00      	nop

        /* Now determine if we have a match.  */
        if (!found)
 80149f6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80149fa:	2b00      	cmp	r3, #0
 80149fc:	d101      	bne.n	8014a02 <_fx_directory_search+0x806>
        {

            /* Return a "not found" status to the caller.  */
            return(FX_NOT_FOUND);
 80149fe:	2304      	movs	r3, #4
 8014a00:	e130      	b.n	8014c64 <_fx_directory_search+0xa68>
        }

        /* Determine if the found entry is indeed a sub-directory.  */
        if (entry_ptr -> fx_dir_entry_attributes & FX_DIRECTORY)
 8014a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a04:	7f1b      	ldrb	r3, [r3, #28]
 8014a06:	f003 0310 	and.w	r3, r3, #16
 8014a0a:	2b00      	cmp	r3, #0
 8014a0c:	d04f      	beq.n	8014aae <_fx_directory_search+0x8b2>
        {

            /* Move the directory search pointer to this entry.  */
            search_dir =      *entry_ptr;
 8014a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a10:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8014a14:	4619      	mov	r1, r3
 8014a16:	2370      	movs	r3, #112	; 0x70
 8014a18:	461a      	mov	r2, r3
 8014a1a:	f00a ff7f 	bl	801f91c <memcpy>
            search_dir_ptr =  &search_dir;
 8014a1e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8014a22:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

            /* Ensure that the search directory's last search cluster is cleared.  */
            search_dir_ptr -> fx_dir_entry_last_search_cluster =  0;
 8014a26:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8014a2a:	2300      	movs	r3, #0
 8014a2c:	6513      	str	r3, [r2, #80]	; 0x50
               directory.  */
#ifdef FX_ENABLE_EXFAT
            if ((!search_dir_ptr -> fx_dir_entry_cluster)
                && (media_ptr -> fx_media_FAT_type != FX_exFAT))
#else
            if (!search_dir_ptr -> fx_dir_entry_cluster)
 8014a2e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8014a32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014a34:	2b00      	cmp	r3, #0
 8014a36:	d13f      	bne.n	8014ab8 <_fx_directory_search+0x8bc>
            {

                /* This is a backward link to the root directory.  Make
                   sure this is indicated in the search directory
                   information.  */
                search_dir_ptr -> fx_dir_entry_name[0] =  0;
 8014a38:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8014a3c:	681a      	ldr	r2, [r3, #0]
 8014a3e:	2300      	movs	r3, #0
 8014a40:	7013      	strb	r3, [r2, #0]

                /* Determine if we need to remember this in the last
                   directory searched return area.  */
                if (last_dir_ptr)
 8014a42:	6a3b      	ldr	r3, [r7, #32]
 8014a44:	2b00      	cmp	r3, #0
 8014a46:	d02e      	beq.n	8014aa6 <_fx_directory_search+0x8aa>
                {

                    /* Yes, return this value to the caller.  */

                    /* First, save the name pointer from the list directory pointer.  */
                    destination_name_ptr =  last_dir_ptr -> fx_dir_entry_name;
 8014a48:	6a3b      	ldr	r3, [r7, #32]
 8014a4a:	681b      	ldr	r3, [r3, #0]
 8014a4c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

                    /* Copy the entire directory entry structure.  */
                    *last_dir_ptr =  *search_dir_ptr;
 8014a50:	6a3a      	ldr	r2, [r7, #32]
 8014a52:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8014a56:	4610      	mov	r0, r2
 8014a58:	4619      	mov	r1, r3
 8014a5a:	2370      	movs	r3, #112	; 0x70
 8014a5c:	461a      	mov	r2, r3
 8014a5e:	f00a ff5d 	bl	801f91c <memcpy>

                    /* Restore the original name buffer pointer.  */
                    last_dir_ptr -> fx_dir_entry_name =  destination_name_ptr;
 8014a62:	6a3a      	ldr	r2, [r7, #32]
 8014a64:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8014a68:	6013      	str	r3, [r2, #0]

                    /* Pickup pointer to name to copy.  */
                    source_name_ptr =  search_dir_ptr -> fx_dir_entry_name;
 8014a6a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8014a6e:	681b      	ldr	r3, [r3, #0]
 8014a70:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

                    /* Loop to copy the name into the last directory name buffer.  */
                    for (n = 0; n < FX_MAX_LONG_NAME_LEN; n++)
 8014a74:	2300      	movs	r3, #0
 8014a76:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8014a7a:	e010      	b.n	8014a9e <_fx_directory_search+0x8a2>
                    {

                        /* Copy a character.  */
                        destination_name_ptr[n] =  source_name_ptr[n];
 8014a7c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8014a80:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8014a84:	18d1      	adds	r1, r2, r3
 8014a86:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8014a8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8014a8e:	441a      	add	r2, r3
 8014a90:	780b      	ldrb	r3, [r1, #0]
 8014a92:	7013      	strb	r3, [r2, #0]
                    for (n = 0; n < FX_MAX_LONG_NAME_LEN; n++)
 8014a94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8014a98:	3301      	adds	r3, #1
 8014a9a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8014a9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8014aa2:	2bff      	cmp	r3, #255	; 0xff
 8014aa4:	d9ea      	bls.n	8014a7c <_fx_directory_search+0x880>
                    }
                }

                /* Set the search directory pointer to NULL to indicate
                   we are at the root directory.  */
                search_dir_ptr =  FX_NULL;
 8014aa6:	2300      	movs	r3, #0
 8014aa8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8014aac:	e004      	b.n	8014ab8 <_fx_directory_search+0x8bc>
        else
        {

            /* This is not a directory, we better return not found
               since we can't continue the search.  */
            if (name_ptr)
 8014aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ab0:	2b00      	cmp	r3, #0
 8014ab2:	d001      	beq.n	8014ab8 <_fx_directory_search+0x8bc>
            {

                /* Return not-found status to caller.  */
                return(FX_NOT_FOUND);
 8014ab4:	2304      	movs	r3, #4
 8014ab6:	e0d5      	b.n	8014c64 <_fx_directory_search+0xa68>
            }
        }
    } while (name_ptr);
 8014ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014aba:	2b00      	cmp	r3, #0
 8014abc:	f47f add6 	bne.w	801466c <_fx_directory_search+0x470>

    /* At this point, cache the found information.  If a subsequent search for the same name is done,
       it will return immediately.  */

    /* Set the index of the saved name string.  */
    v=  0;
 8014ac0:	2300      	movs	r3, #0
 8014ac2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4

    /* First, build the full path and name.  */
    if ((*original_name != '\\') && (*original_name != '/') && (path_ptr))
 8014ac6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8014aca:	781b      	ldrb	r3, [r3, #0]
 8014acc:	2b5c      	cmp	r3, #92	; 0x5c
 8014ace:	d028      	beq.n	8014b22 <_fx_directory_search+0x926>
 8014ad0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8014ad4:	781b      	ldrb	r3, [r3, #0]
 8014ad6:	2b2f      	cmp	r3, #47	; 0x2f
 8014ad8:	d023      	beq.n	8014b22 <_fx_directory_search+0x926>
 8014ada:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8014ade:	2b00      	cmp	r3, #0
 8014ae0:	d01f      	beq.n	8014b22 <_fx_directory_search+0x926>
    {

        /* Copy the path into the destination.  */
        while ((v< (FX_MAX_LAST_NAME_LEN - 1)) && (path_ptr[v]))
 8014ae2:	e012      	b.n	8014b0a <_fx_directory_search+0x90e>
        {

            /* Copy one character.   */
            media_ptr -> fx_media_last_found_name[v] =  path_ptr[v];
 8014ae4:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8014ae8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8014aec:	4413      	add	r3, r2
 8014aee:	7819      	ldrb	r1, [r3, #0]
 8014af0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014af2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8014af6:	4413      	add	r3, r2
 8014af8:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 8014afc:	460a      	mov	r2, r1
 8014afe:	701a      	strb	r2, [r3, #0]

            /* Move to next character.  */
            v++;
 8014b00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8014b04:	3301      	adds	r3, #1
 8014b06:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
        while ((v< (FX_MAX_LAST_NAME_LEN - 1)) && (path_ptr[v]))
 8014b0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8014b0e:	2bfe      	cmp	r3, #254	; 0xfe
 8014b10:	d807      	bhi.n	8014b22 <_fx_directory_search+0x926>
 8014b12:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8014b16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8014b1a:	4413      	add	r3, r2
 8014b1c:	781b      	ldrb	r3, [r3, #0]
 8014b1e:	2b00      	cmp	r3, #0
 8014b20:	d1e0      	bne.n	8014ae4 <_fx_directory_search+0x8e8>
        }
    }

    /* Now see if there is no directory path symbol in the name itself.  */
    if ((*original_name != '\\') && (*original_name != '/'))
 8014b22:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8014b26:	781b      	ldrb	r3, [r3, #0]
 8014b28:	2b5c      	cmp	r3, #92	; 0x5c
 8014b2a:	d012      	beq.n	8014b52 <_fx_directory_search+0x956>
 8014b2c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8014b30:	781b      	ldrb	r3, [r3, #0]
 8014b32:	2b2f      	cmp	r3, #47	; 0x2f
 8014b34:	d00d      	beq.n	8014b52 <_fx_directory_search+0x956>
    {

        /* If there is room, place a directory separator character.  */
        if (v < (FX_MAX_LAST_NAME_LEN - 1))
 8014b36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8014b3a:	2bfe      	cmp	r3, #254	; 0xfe
 8014b3c:	d809      	bhi.n	8014b52 <_fx_directory_search+0x956>
        {
            media_ptr -> fx_media_last_found_name[v++] =  '/';
 8014b3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8014b42:	1c5a      	adds	r2, r3, #1
 8014b44:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8014b48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014b4a:	4413      	add	r3, r2
 8014b4c:	222f      	movs	r2, #47	; 0x2f
 8014b4e:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
        }
    }

    /* Now append the name to the path.  */
    j =  0;
 8014b52:	2300      	movs	r3, #0
 8014b54:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    while ((v < FX_MAX_LAST_NAME_LEN) && (original_name[j]))
 8014b58:	e017      	b.n	8014b8a <_fx_directory_search+0x98e>
    {

        /* Copy one character.   */
        media_ptr -> fx_media_last_found_name[v] =  original_name[j];
 8014b5a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8014b5e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8014b62:	4413      	add	r3, r2
 8014b64:	7819      	ldrb	r1, [r3, #0]
 8014b66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014b68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8014b6c:	4413      	add	r3, r2
 8014b6e:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 8014b72:	460a      	mov	r2, r1
 8014b74:	701a      	strb	r2, [r3, #0]

        /* Move to next character.  */
        v++;
 8014b76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8014b7a:	3301      	adds	r3, #1
 8014b7c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
        j++;
 8014b80:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8014b84:	3301      	adds	r3, #1
 8014b86:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    while ((v < FX_MAX_LAST_NAME_LEN) && (original_name[j]))
 8014b8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8014b8e:	2bff      	cmp	r3, #255	; 0xff
 8014b90:	d807      	bhi.n	8014ba2 <_fx_directory_search+0x9a6>
 8014b92:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8014b96:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8014b9a:	4413      	add	r3, r2
 8014b9c:	781b      	ldrb	r3, [r3, #0]
 8014b9e:	2b00      	cmp	r3, #0
 8014ba0:	d1db      	bne.n	8014b5a <_fx_directory_search+0x95e>
    }

    /* Null terminate the last name string.   */
    if (v< FX_MAX_LAST_NAME_LEN)
 8014ba2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8014ba6:	2bff      	cmp	r3, #255	; 0xff
 8014ba8:	d808      	bhi.n	8014bbc <_fx_directory_search+0x9c0>
    {

        /* Null terminate.  */
        media_ptr -> fx_media_last_found_name[v] =  FX_NULL;
 8014baa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014bac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8014bb0:	4413      	add	r3, r2
 8014bb2:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 8014bb6:	2200      	movs	r2, #0
 8014bb8:	701a      	strb	r2, [r3, #0]
 8014bba:	e003      	b.n	8014bc4 <_fx_directory_search+0x9c8>
    }
    else
    {

        /* The string is too big, NULL the string so it won't be used in searching.  */
        media_ptr -> fx_media_last_found_name[0] =  FX_NULL;
 8014bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014bbe:	2200      	movs	r2, #0
 8014bc0:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
    }

    /* Determine if there is a search pointer.  */
    if (search_dir_ptr)
 8014bc4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8014bc8:	2b00      	cmp	r3, #0
 8014bca:	d00e      	beq.n	8014bea <_fx_directory_search+0x9ee>
    {

        /* Yes, there is a search directory pointer so save it!   */
        media_ptr -> fx_media_last_found_directory =  *search_dir_ptr;
 8014bcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014bce:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8014bd2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8014bd6:	4611      	mov	r1, r2
 8014bd8:	2270      	movs	r2, #112	; 0x70
 8014bda:	4618      	mov	r0, r3
 8014bdc:	f00a fe9e 	bl	801f91c <memcpy>

        /* Indicate the search directory is valid.  */
        media_ptr -> fx_media_last_found_directory_valid =  FX_TRUE;
 8014be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014be2:	2201      	movs	r2, #1
 8014be4:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
 8014be8:	e003      	b.n	8014bf2 <_fx_directory_search+0x9f6>
    }
    else
    {

        /* Indicate the search directory is not valid.  */
        media_ptr -> fx_media_last_found_directory_valid =  FX_FALSE;
 8014bea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014bec:	2200      	movs	r2, #0
 8014bee:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
    }

    /* Copy the directory entry.  */
    media_ptr -> fx_media_last_found_entry =  *entry_ptr;
 8014bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014bf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014bf6:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8014bfa:	4611      	mov	r1, r2
 8014bfc:	2270      	movs	r2, #112	; 0x70
 8014bfe:	4618      	mov	r0, r3
 8014c00:	f00a fe8c 	bl	801f91c <memcpy>

    /* Setup the directory entry for the last found internal file name.  */
    media_ptr -> fx_media_last_found_entry.fx_dir_entry_name =  media_ptr -> fx_media_last_found_file_name;
 8014c04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c06:	f503 7238 	add.w	r2, r3, #736	; 0x2e0
 8014c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c0c:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* Copy the actual directory name into the cached directory name.  */
    for (index = 0; index < FX_MAX_LONG_NAME_LEN; index++)
 8014c10:	2300      	movs	r3, #0
 8014c12:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8014c16:	e01e      	b.n	8014c56 <_fx_directory_search+0xa5a>
    {

        /* Copy character into the cached directory name.  */
        media_ptr -> fx_media_last_found_file_name[index] =  entry_ptr ->  fx_dir_entry_name[index];
 8014c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c1a:	681a      	ldr	r2, [r3, #0]
 8014c1c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8014c20:	4413      	add	r3, r2
 8014c22:	7819      	ldrb	r1, [r3, #0]
 8014c24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014c26:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8014c2a:	4413      	add	r3, r2
 8014c2c:	f503 7338 	add.w	r3, r3, #736	; 0x2e0
 8014c30:	460a      	mov	r2, r1
 8014c32:	701a      	strb	r2, [r3, #0]

        /* See if we have copied the NULL termination character.  */
        if (entry_ptr -> fx_dir_entry_name[index] == (CHAR)FX_NULL)
 8014c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c36:	681a      	ldr	r2, [r3, #0]
 8014c38:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8014c3c:	4413      	add	r3, r2
 8014c3e:	781b      	ldrb	r3, [r3, #0]
 8014c40:	2b00      	cmp	r3, #0
 8014c42:	d103      	bne.n	8014c4c <_fx_directory_search+0xa50>
        {
                
            /* Check to see if we use the break to get out of the loop.  */
            if (index < (FX_MAX_LONG_NAME_LEN - 1))
 8014c44:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8014c48:	2bfe      	cmp	r3, #254	; 0xfe
 8014c4a:	d909      	bls.n	8014c60 <_fx_directory_search+0xa64>
    for (index = 0; index < FX_MAX_LONG_NAME_LEN; index++)
 8014c4c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8014c50:	3301      	adds	r3, #1
 8014c52:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8014c56:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8014c5a:	2bff      	cmp	r3, #255	; 0xff
 8014c5c:	d9dc      	bls.n	8014c18 <_fx_directory_search+0xa1c>
 8014c5e:	e000      	b.n	8014c62 <_fx_directory_search+0xa66>
            {
                    
                /* Yes, not at the end of the string, break.  */
                break;
 8014c60:	bf00      	nop
            }
        }
    }
#endif

    return(FX_SUCCESS);
 8014c62:	2300      	movs	r3, #0
}
 8014c64:	4618      	mov	r0, r3
 8014c66:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8014c6a:	46bd      	mov	sp, r7
 8014c6c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08014c70 <_fx_file_close>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fx_file_close(FX_FILE *file_ptr)
{
 8014c70:	b580      	push	{r7, lr}
 8014c72:	b088      	sub	sp, #32
 8014c74:	af00      	add	r7, sp, #0
 8014c76:	6078      	str	r0, [r7, #4]
FX_MEDIA *media_ptr;
FX_INT_SAVE_AREA


    /* First, determine if the file is still open.  */
    if (file_ptr -> fx_file_id != FX_FILE_ID)
 8014c78:	687b      	ldr	r3, [r7, #4]
 8014c7a:	681b      	ldr	r3, [r3, #0]
 8014c7c:	4a49      	ldr	r2, [pc, #292]	; (8014da4 <_fx_file_close+0x134>)
 8014c7e:	4293      	cmp	r3, r2
 8014c80:	d001      	beq.n	8014c86 <_fx_file_close+0x16>
    {

        /* Return the file not open error status.  */
        return(FX_NOT_OPEN);
 8014c82:	2307      	movs	r3, #7
 8014c84:	e08a      	b.n	8014d9c <_fx_file_close+0x12c>
    }

    /* Setup a pointer to the associated media.  */
    media_ptr =  file_ptr -> fx_file_media_ptr;
 8014c86:	687b      	ldr	r3, [r7, #4]
 8014c88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014c8a:	61fb      	str	r3, [r7, #28]

#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of times this service has been called.  */
    media_ptr -> fx_media_file_closes++;
 8014c8c:	69fb      	ldr	r3, [r7, #28]
 8014c8e:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8014c92:	1c5a      	adds	r2, r3, #1
 8014c94:	69fb      	ldr	r3, [r7, #28]
 8014c96:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_FILE_CLOSE, file_ptr, file_ptr -> fx_file_current_file_size, 0, 0, FX_TRACE_FILE_EVENTS, 0, 0)

    /* Protect against other threads accessing the media.  */
    FX_PROTECT
 8014c9a:	69fb      	ldr	r3, [r7, #28]
 8014c9c:	681b      	ldr	r3, [r3, #0]
 8014c9e:	4a42      	ldr	r2, [pc, #264]	; (8014da8 <_fx_file_close+0x138>)
 8014ca0:	4293      	cmp	r3, r2
 8014ca2:	d001      	beq.n	8014ca8 <_fx_file_close+0x38>
 8014ca4:	2311      	movs	r3, #17
 8014ca6:	e079      	b.n	8014d9c <_fx_file_close+0x12c>
 8014ca8:	69fb      	ldr	r3, [r7, #28]
 8014caa:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8014cae:	f04f 31ff 	mov.w	r1, #4294967295
 8014cb2:	4618      	mov	r0, r3
 8014cb4:	f007 fd4e 	bl	801c754 <_tx_mutex_get>
 8014cb8:	4603      	mov	r3, r0
 8014cba:	2b00      	cmp	r3, #0
 8014cbc:	d001      	beq.n	8014cc2 <_fx_file_close+0x52>
 8014cbe:	2311      	movs	r3, #17
 8014cc0:	e06c      	b.n	8014d9c <_fx_file_close+0x12c>
    FX_TRACE_OBJECT_UNREGISTER(file_ptr)

    /* Remove this file from the opened list for the media.  */

    /* See if the file is the only one on the open list for this media.  */
    if (file_ptr == file_ptr -> fx_file_opened_next)
 8014cc2:	687b      	ldr	r3, [r7, #4]
 8014cc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8014cc6:	687a      	ldr	r2, [r7, #4]
 8014cc8:	429a      	cmp	r2, r3
 8014cca:	d104      	bne.n	8014cd6 <_fx_file_close+0x66>
    {

        /* Only opened file, just set the opened list to NULL.  */
        media_ptr -> fx_media_opened_file_list =  FX_NULL;
 8014ccc:	69fb      	ldr	r3, [r7, #28]
 8014cce:	2200      	movs	r2, #0
 8014cd0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
 8014cd4:	e014      	b.n	8014d00 <_fx_file_close+0x90>
    }
    else
    {

        /* Otherwise, not the only opened file, link-up the neighbors.  */
        (file_ptr -> fx_file_opened_next) -> fx_file_opened_previous =
 8014cd6:	687b      	ldr	r3, [r7, #4]
 8014cd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
            file_ptr -> fx_file_opened_previous;
 8014cda:	687a      	ldr	r2, [r7, #4]
 8014cdc:	6e12      	ldr	r2, [r2, #96]	; 0x60
        (file_ptr -> fx_file_opened_next) -> fx_file_opened_previous =
 8014cde:	661a      	str	r2, [r3, #96]	; 0x60
        (file_ptr -> fx_file_opened_previous) -> fx_file_opened_next =
 8014ce0:	687b      	ldr	r3, [r7, #4]
 8014ce2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
            file_ptr -> fx_file_opened_next;
 8014ce4:	687a      	ldr	r2, [r7, #4]
 8014ce6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
        (file_ptr -> fx_file_opened_previous) -> fx_file_opened_next =
 8014ce8:	65da      	str	r2, [r3, #92]	; 0x5c

        /* See if we have to update the opened list head pointer.  */
        if (media_ptr -> fx_media_opened_file_list == file_ptr)
 8014cea:	69fb      	ldr	r3, [r7, #28]
 8014cec:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8014cf0:	687a      	ldr	r2, [r7, #4]
 8014cf2:	429a      	cmp	r2, r3
 8014cf4:	d104      	bne.n	8014d00 <_fx_file_close+0x90>
        {

            /* Yes, move the head pointer to the next opened file. */
            media_ptr -> fx_media_opened_file_list =  file_ptr -> fx_file_opened_next;
 8014cf6:	687b      	ldr	r3, [r7, #4]
 8014cf8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8014cfa:	69fb      	ldr	r3, [r7, #28]
 8014cfc:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
        }
    }

    /* Decrement the opened file counter.  */
    media_ptr -> fx_media_opened_file_count--;
 8014d00:	69fb      	ldr	r3, [r7, #28]
 8014d02:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8014d06:	1e5a      	subs	r2, r3, #1
 8014d08:	69fb      	ldr	r3, [r7, #28]
 8014d0a:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

    /* Finally, Indicate that this file is closed.  */
    file_ptr -> fx_file_id =  FX_FILE_CLOSED_ID;
 8014d0e:	687b      	ldr	r3, [r7, #4]
 8014d10:	4a26      	ldr	r2, [pc, #152]	; (8014dac <_fx_file_close+0x13c>)
 8014d12:	601a      	str	r2, [r3, #0]

    /* Check to see if this file needs to have its directory entry written
       back to the media.  */
    if ((file_ptr -> fx_file_open_mode == FX_OPEN_FOR_WRITE) &&
 8014d14:	687b      	ldr	r3, [r7, #4]
 8014d16:	689b      	ldr	r3, [r3, #8]
 8014d18:	2b01      	cmp	r3, #1
 8014d1a:	d138      	bne.n	8014d8e <_fx_file_close+0x11e>
        (file_ptr -> fx_file_modified))
 8014d1c:	687b      	ldr	r3, [r7, #4]
 8014d1e:	7b1b      	ldrb	r3, [r3, #12]
    if ((file_ptr -> fx_file_open_mode == FX_OPEN_FOR_WRITE) &&
 8014d20:	2b00      	cmp	r3, #0
 8014d22:	d034      	beq.n	8014d8e <_fx_file_close+0x11e>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014d24:	f3ef 8310 	mrs	r3, PRIMASK
 8014d28:	60fb      	str	r3, [r7, #12]
    return(posture);
 8014d2a:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 8014d2c:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 8014d2e:	b672      	cpsid	i
    return(int_posture);
 8014d30:	68bb      	ldr	r3, [r7, #8]
    {

        /* Lockout interrupts for time/date access.  */
        FX_DISABLE_INTS
 8014d32:	61bb      	str	r3, [r7, #24]

        /* Set the new time and date.  */
        file_ptr -> fx_file_dir_entry.fx_dir_entry_time =  _fx_system_time;
 8014d34:	4b1e      	ldr	r3, [pc, #120]	; (8014db0 <_fx_file_close+0x140>)
 8014d36:	681a      	ldr	r2, [r3, #0]
 8014d38:	687b      	ldr	r3, [r7, #4]
 8014d3a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        file_ptr -> fx_file_dir_entry.fx_dir_entry_date =  _fx_system_date;
 8014d3e:	4b1d      	ldr	r3, [pc, #116]	; (8014db4 <_fx_file_close+0x144>)
 8014d40:	681a      	ldr	r2, [r3, #0]
 8014d42:	687b      	ldr	r3, [r7, #4]
 8014d44:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

        /* Set the last access date.  */
        file_ptr -> fx_file_dir_entry.fx_dir_entry_last_accessed_date =  _fx_system_date;
 8014d48:	4b1a      	ldr	r3, [pc, #104]	; (8014db4 <_fx_file_close+0x144>)
 8014d4a:	681a      	ldr	r2, [r3, #0]
 8014d4c:	687b      	ldr	r3, [r7, #4]
 8014d4e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8014d52:	69bb      	ldr	r3, [r7, #24]
 8014d54:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014d56:	693b      	ldr	r3, [r7, #16]
 8014d58:	f383 8810 	msr	PRIMASK, r3
}
 8014d5c:	bf00      	nop
        /* Restore interrupts.  */
        FX_RESTORE_INTS

        /* Copy the new file size into the directory entry.  */
        file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size =
            file_ptr -> fx_file_current_file_size;
 8014d5e:	687b      	ldr	r3, [r7, #4]
 8014d60:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
        file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size =
 8014d64:	6879      	ldr	r1, [r7, #4]
 8014d66:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0
                    media_ptr, &(file_ptr -> fx_file_dir_entry), UPDATE_STREAM);
        }
        else
        {
#endif /* FX_ENABLE_EXFAT */
            status = _fx_directory_entry_write(media_ptr, &(file_ptr -> fx_file_dir_entry));
 8014d6a:	687b      	ldr	r3, [r7, #4]
 8014d6c:	3368      	adds	r3, #104	; 0x68
 8014d6e:	4619      	mov	r1, r3
 8014d70:	69f8      	ldr	r0, [r7, #28]
 8014d72:	f7fd ff65 	bl	8012c40 <_fx_directory_entry_write>
 8014d76:	6178      	str	r0, [r7, #20]
#ifdef FX_ENABLE_EXFAT
        }
#endif /* FX_ENABLE_EXFAT */

        /* Check for a good status.  */
        if (status != FX_SUCCESS)
 8014d78:	697b      	ldr	r3, [r7, #20]
 8014d7a:	2b00      	cmp	r3, #0
 8014d7c:	d007      	beq.n	8014d8e <_fx_file_close+0x11e>
        {

            /* Release media protection.  */
            FX_UNPROTECT
 8014d7e:	69fb      	ldr	r3, [r7, #28]
 8014d80:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8014d84:	4618      	mov	r0, r3
 8014d86:	f007 ff5d 	bl	801cc44 <_tx_mutex_put>

            /* Error writing the directory.  */
            return(status);
 8014d8a:	697b      	ldr	r3, [r7, #20]
 8014d8c:	e006      	b.n	8014d9c <_fx_file_close+0x12c>
        }
    }

    /* Release media protection.  */
    FX_UNPROTECT
 8014d8e:	69fb      	ldr	r3, [r7, #28]
 8014d90:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8014d94:	4618      	mov	r0, r3
 8014d96:	f007 ff55 	bl	801cc44 <_tx_mutex_put>

    /* Return status to the caller.  */
    return(FX_SUCCESS);
 8014d9a:	2300      	movs	r3, #0
}
 8014d9c:	4618      	mov	r0, r3
 8014d9e:	3720      	adds	r7, #32
 8014da0:	46bd      	mov	sp, r7
 8014da2:	bd80      	pop	{r7, pc}
 8014da4:	46494c45 	.word	0x46494c45
 8014da8:	4d454449 	.word	0x4d454449
 8014dac:	46494c43 	.word	0x46494c43
 8014db0:	24005050 	.word	0x24005050
 8014db4:	2400504c 	.word	0x2400504c

08014db8 <_fx_file_create>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fx_file_create(FX_MEDIA *media_ptr, CHAR *file_name)
{
 8014db8:	b590      	push	{r4, r7, lr}
 8014dba:	b0c5      	sub	sp, #276	; 0x114
 8014dbc:	af02      	add	r7, sp, #8
 8014dbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014dc2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8014dc6:	6018      	str	r0, [r3, #0]
 8014dc8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014dcc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8014dd0:	6019      	str	r1, [r3, #0]


#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of times this service has been called.  */
    media_ptr -> fx_media_file_creates++;
 8014dd2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014dd6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8014dda:	681b      	ldr	r3, [r3, #0]
 8014ddc:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 8014de0:	1c5a      	adds	r2, r3, #1
 8014de2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014de6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8014dea:	681b      	ldr	r3, [r3, #0]
 8014dec:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
#endif

    /* Determine if the supplied name is less than the maximum supported name size. The
       maximum name (FX_MAX_LONG_NAME_LEN) is defined in fx_api.h.  */
    i =  0;
 8014df0:	2300      	movs	r3, #0
 8014df2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    work_ptr =  (CHAR *)file_name;
 8014df6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014dfa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8014dfe:	681b      	ldr	r3, [r3, #0]
 8014e00:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    while (*work_ptr)
 8014e04:	e020      	b.n	8014e48 <_fx_file_create+0x90>
    {

        /* Determine if the character designates a new path.  */
        if ((*work_ptr == '\\') || (*work_ptr == '/'))
 8014e06:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8014e0a:	781b      	ldrb	r3, [r3, #0]
 8014e0c:	2b5c      	cmp	r3, #92	; 0x5c
 8014e0e:	d004      	beq.n	8014e1a <_fx_file_create+0x62>
 8014e10:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8014e14:	781b      	ldrb	r3, [r3, #0]
 8014e16:	2b2f      	cmp	r3, #47	; 0x2f
 8014e18:	d103      	bne.n	8014e22 <_fx_file_create+0x6a>
        {
            /* Yes, reset the name size.  */
            i =  0;
 8014e1a:	2300      	movs	r3, #0
 8014e1c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8014e20:	e00d      	b.n	8014e3e <_fx_file_create+0x86>
        }
        /* Check for leading spaces.  */
        else if ((*work_ptr != ' ') || (i != 0))
 8014e22:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8014e26:	781b      	ldrb	r3, [r3, #0]
 8014e28:	2b20      	cmp	r3, #32
 8014e2a:	d103      	bne.n	8014e34 <_fx_file_create+0x7c>
 8014e2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014e30:	2b00      	cmp	r3, #0
 8014e32:	d004      	beq.n	8014e3e <_fx_file_create+0x86>
        {

            /* No leading spaces, increment the name size.  */
            i++;
 8014e34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014e38:	3301      	adds	r3, #1
 8014e3a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        }

        /* Move to the next character.  */
        work_ptr++;
 8014e3e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8014e42:	3301      	adds	r3, #1
 8014e44:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    while (*work_ptr)
 8014e48:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8014e4c:	781b      	ldrb	r3, [r3, #0]
 8014e4e:	2b00      	cmp	r3, #0
 8014e50:	d1d9      	bne.n	8014e06 <_fx_file_create+0x4e>
    }

    /* Determine if the supplied name is valid.  */
    if ((i == 0) || (i >= FX_MAX_LONG_NAME_LEN))
 8014e52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014e56:	2b00      	cmp	r3, #0
 8014e58:	d003      	beq.n	8014e62 <_fx_file_create+0xaa>
 8014e5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014e5e:	2bff      	cmp	r3, #255	; 0xff
 8014e60:	d901      	bls.n	8014e66 <_fx_file_create+0xae>
    {

        /* Return an invalid name value.  */
        return(FX_INVALID_NAME);
 8014e62:	230c      	movs	r3, #12
 8014e64:	e10a      	b.n	801507c <_fx_file_create+0x2c4>
    }

    /* Setup pointer to media name buffer.  */
    dir_entry.fx_dir_entry_name =  media_ptr -> fx_media_name_buffer + FX_MAX_LONG_NAME_LEN;
 8014e66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014e6a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8014e6e:	681b      	ldr	r3, [r3, #0]
 8014e70:	f603 039c 	addw	r3, r3, #2204	; 0x89c
 8014e74:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8014e78:	67bb      	str	r3, [r7, #120]	; 0x78

    /* Setup another pointer to another media name buffer.  */
    search_directory.fx_dir_entry_name =  media_ptr -> fx_media_name_buffer + FX_MAX_LONG_NAME_LEN * 2;
 8014e7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014e7e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8014e82:	681b      	ldr	r3, [r3, #0]
 8014e84:	f603 039c 	addw	r3, r3, #2204	; 0x89c
 8014e88:	f503 7200 	add.w	r2, r3, #512	; 0x200
 8014e8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014e90:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8014e94:	601a      	str	r2, [r3, #0]

    /* Clear the short name strings.  */
    dir_entry.fx_dir_entry_short_name[0] =        0;
 8014e96:	2300      	movs	r3, #0
 8014e98:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
    search_directory.fx_dir_entry_short_name[0] = 0;
 8014e9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014ea0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8014ea4:	2200      	movs	r2, #0
 8014ea6:	711a      	strb	r2, [r3, #4]

    /* Check the media to make sure it is open.  */
    if (media_ptr -> fx_media_id != FX_MEDIA_ID)
 8014ea8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014eac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8014eb0:	681b      	ldr	r3, [r3, #0]
 8014eb2:	681b      	ldr	r3, [r3, #0]
 8014eb4:	4a74      	ldr	r2, [pc, #464]	; (8015088 <_fx_file_create+0x2d0>)
 8014eb6:	4293      	cmp	r3, r2
 8014eb8:	d001      	beq.n	8014ebe <_fx_file_create+0x106>
    {

        /* Return the media not opened error.  */
        return(FX_MEDIA_NOT_OPEN);
 8014eba:	2311      	movs	r3, #17
 8014ebc:	e0de      	b.n	801507c <_fx_file_create+0x2c4>

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_FILE_CREATE, media_ptr, file_name, 0, 0, FX_TRACE_FILE_EVENTS, 0, 0)

    /* Protect against other threads accessing the media.  */
    FX_PROTECT
 8014ebe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014ec2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8014ec6:	681b      	ldr	r3, [r3, #0]
 8014ec8:	681b      	ldr	r3, [r3, #0]
 8014eca:	4a6f      	ldr	r2, [pc, #444]	; (8015088 <_fx_file_create+0x2d0>)
 8014ecc:	4293      	cmp	r3, r2
 8014ece:	d001      	beq.n	8014ed4 <_fx_file_create+0x11c>
 8014ed0:	2311      	movs	r3, #17
 8014ed2:	e0d3      	b.n	801507c <_fx_file_create+0x2c4>
 8014ed4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014ed8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8014edc:	681b      	ldr	r3, [r3, #0]
 8014ede:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8014ee2:	f04f 31ff 	mov.w	r1, #4294967295
 8014ee6:	4618      	mov	r0, r3
 8014ee8:	f007 fc34 	bl	801c754 <_tx_mutex_get>
 8014eec:	4603      	mov	r3, r0
 8014eee:	2b00      	cmp	r3, #0
 8014ef0:	d001      	beq.n	8014ef6 <_fx_file_create+0x13e>
 8014ef2:	2311      	movs	r3, #17
 8014ef4:	e0c2      	b.n	801507c <_fx_file_create+0x2c4>
    /* Start transaction. */
    _fx_fault_tolerant_transaction_start(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

    /* Check for write protect at the media level (set by driver).  */
    if (media_ptr -> fx_media_driver_write_protect)
 8014ef6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014efa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8014efe:	681b      	ldr	r3, [r3, #0]
 8014f00:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8014f04:	2b00      	cmp	r3, #0
 8014f06:	d00b      	beq.n	8014f20 <_fx_file_create+0x168>
#ifdef FX_ENABLE_FAULT_TOLERANT
        FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

        /* Release media protection.  */
        FX_UNPROTECT
 8014f08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014f0c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8014f10:	681b      	ldr	r3, [r3, #0]
 8014f12:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8014f16:	4618      	mov	r0, r3
 8014f18:	f007 fe94 	bl	801cc44 <_tx_mutex_put>

        /* Return write protect error.  */
        return(FX_WRITE_PROTECT);
 8014f1c:	2323      	movs	r3, #35	; 0x23
 8014f1e:	e0ad      	b.n	801507c <_fx_file_create+0x2c4>
    }

    /* Search the system for the supplied file name.  */
    status =  _fx_directory_search(media_ptr, file_name, &dir_entry, &search_directory, &name_ptr);
 8014f20:	f107 0408 	add.w	r4, r7, #8
 8014f24:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8014f28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014f2c:	f5a3 7184 	sub.w	r1, r3, #264	; 0x108
 8014f30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014f34:	f5a3 7082 	sub.w	r0, r3, #260	; 0x104
 8014f38:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8014f3c:	9300      	str	r3, [sp, #0]
 8014f3e:	4623      	mov	r3, r4
 8014f40:	6809      	ldr	r1, [r1, #0]
 8014f42:	6800      	ldr	r0, [r0, #0]
 8014f44:	f7ff f95a 	bl	80141fc <_fx_directory_search>
 8014f48:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc

    /* Determine if the search was successful.  */
    if (status == FX_SUCCESS)
 8014f4c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8014f50:	2b00      	cmp	r3, #0
 8014f52:	d10b      	bne.n	8014f6c <_fx_file_create+0x1b4>
#ifdef FX_ENABLE_FAULT_TOLERANT
        FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

        /* Release media protection.  */
        FX_UNPROTECT
 8014f54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014f58:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8014f5c:	681b      	ldr	r3, [r3, #0]
 8014f5e:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8014f62:	4618      	mov	r0, r3
 8014f64:	f007 fe6e 	bl	801cc44 <_tx_mutex_put>

        /* File found - Return the error code.  */
        return(FX_ALREADY_CREATED);
 8014f68:	230b      	movs	r3, #11
 8014f6a:	e087      	b.n	801507c <_fx_file_create+0x2c4>
    }

    /* Determine if there is anything left after the name.  */
    if (_fx_directory_name_extract(name_ptr, &dir_entry.fx_dir_entry_name[0]))
 8014f6c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8014f70:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8014f72:	4611      	mov	r1, r2
 8014f74:	4618      	mov	r0, r3
 8014f76:	f7ff f8df 	bl	8014138 <_fx_directory_name_extract>
 8014f7a:	4603      	mov	r3, r0
 8014f7c:	2b00      	cmp	r3, #0
 8014f7e:	d00b      	beq.n	8014f98 <_fx_file_create+0x1e0>
#ifdef FX_ENABLE_FAULT_TOLERANT
        FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

        /* Release media protection.  */
        FX_UNPROTECT
 8014f80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014f84:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8014f88:	681b      	ldr	r3, [r3, #0]
 8014f8a:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8014f8e:	4618      	mov	r0, r3
 8014f90:	f007 fe58 	bl	801cc44 <_tx_mutex_put>

        /* Extra information after the file name, return an invalid path
           error.  */
        return(FX_INVALID_PATH);
 8014f94:	230d      	movs	r3, #13
 8014f96:	e071      	b.n	801507c <_fx_file_create+0x2c4>
    /* Save the directory entry size.  */
    dir_size = search_directory.fx_dir_entry_file_size;
#endif /* FX_ENABLE_EXFAT */

    /* Find a free slot for the new file.  */
    status =  _fx_directory_free_search(media_ptr, &search_directory, &dir_entry);
 8014f98:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8014f9c:	f107 0108 	add.w	r1, r7, #8
 8014fa0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014fa4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8014fa8:	6818      	ldr	r0, [r3, #0]
 8014faa:	f7fe fc85 	bl	80138b8 <_fx_directory_free_search>
 8014fae:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc

    /* Determine if the search was successful.  */
    if (status != FX_SUCCESS)
 8014fb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8014fb6:	2b00      	cmp	r3, #0
 8014fb8:	d00c      	beq.n	8014fd4 <_fx_file_create+0x21c>
#ifdef FX_ENABLE_FAULT_TOLERANT
        FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

        /* Release media protection.  */
        FX_UNPROTECT
 8014fba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014fbe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8014fc2:	681b      	ldr	r3, [r3, #0]
 8014fc4:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8014fc8:	4618      	mov	r0, r3
 8014fca:	f007 fe3b 	bl	801cc44 <_tx_mutex_put>

        /* Return the error code.  */
        return(status);
 8014fce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8014fd2:	e053      	b.n	801507c <_fx_file_create+0x2c4>
    }

    /* Populate the directory entry.  */

    /* Isolate the file name.  */
    _fx_directory_name_extract(name_ptr, &dir_entry.fx_dir_entry_name[0]);
 8014fd4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8014fd8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8014fda:	4611      	mov	r1, r2
 8014fdc:	4618      	mov	r0, r3
 8014fde:	f7ff f8ab 	bl	8014138 <_fx_directory_name_extract>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014fe2:	f3ef 8310 	mrs	r3, PRIMASK
 8014fe6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    return(posture);
 8014fea:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
    int_posture = __get_interrupt_posture();
 8014fee:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    __asm__ volatile ("CPSID i" : : : "memory");
 8014ff2:	b672      	cpsid	i
    return(int_posture);
 8014ff4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec

    /* Disable interrupts for time/date access.  */
    FX_DISABLE_INTS
 8014ff8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8

    /* Set time and date stamps.  */
    dir_entry.fx_dir_entry_time =  _fx_system_time;
 8014ffc:	4b23      	ldr	r3, [pc, #140]	; (801508c <_fx_file_create+0x2d4>)
 8014ffe:	681b      	ldr	r3, [r3, #0]
 8015000:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    dir_entry.fx_dir_entry_date =  _fx_system_date;
 8015004:	4b22      	ldr	r3, [pc, #136]	; (8015090 <_fx_file_create+0x2d8>)
 8015006:	681b      	ldr	r3, [r3, #0]
 8015008:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 801500c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8015010:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015014:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8015018:	f383 8810 	msr	PRIMASK, r3
}
 801501c:	bf00      	nop

    /* Restore interrupts.  */
    FX_RESTORE_INTS

    /* Set the attributes for the file.  */
    dir_entry.fx_dir_entry_attributes =  FX_ARCHIVE;
 801501e:	2320      	movs	r3, #32
 8015020:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94

    /* Set file size to 0. */
    dir_entry.fx_dir_entry_file_size =  0;
 8015024:	f04f 0200 	mov.w	r2, #0
 8015028:	f04f 0300 	mov.w	r3, #0
 801502c:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
    /* Set available file size to 0. */
    dir_entry.fx_dir_entry_available_file_size = 0;
#endif /* FX_ENABLE_EXFAT */

    /* Set the cluster to NULL.  */
    dir_entry.fx_dir_entry_cluster =    FX_NULL;
 8015030:	2300      	movs	r3, #0
 8015032:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

    /* Is there a leading dot?  */
    if (dir_entry.fx_dir_entry_name[0] == '.')
 8015036:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8015038:	781b      	ldrb	r3, [r3, #0]
 801503a:	2b2e      	cmp	r3, #46	; 0x2e
 801503c:	d106      	bne.n	801504c <_fx_file_create+0x294>
    {

        /* Yes, toggle the hidden attribute bit.  */
        dir_entry.fx_dir_entry_attributes |=  FX_HIDDEN;
 801503e:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 8015042:	f043 0302 	orr.w	r3, r3, #2
 8015046:	b2db      	uxtb	r3, r3
 8015048:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
        status = _fx_directory_exFAT_entry_write(media_ptr, &dir_entry, UPDATE_FULL);
    }
    else
    {
#endif /* FX_ENABLE_EXFAT */
        status = _fx_directory_entry_write(media_ptr, &dir_entry);
 801504c:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8015050:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8015054:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8015058:	4611      	mov	r1, r2
 801505a:	6818      	ldr	r0, [r3, #0]
 801505c:	f7fd fdf0 	bl	8012c40 <_fx_directory_entry_write>
 8015060:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    /* End transaction. */
    status = _fx_fault_tolerant_transaction_end(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

    /* Release media protection.  */
    FX_UNPROTECT
 8015064:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8015068:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801506c:	681b      	ldr	r3, [r3, #0]
 801506e:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8015072:	4618      	mov	r0, r3
 8015074:	f007 fde6 	bl	801cc44 <_tx_mutex_put>

    /* File create is complete, return status.  */
    return(status);
 8015078:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
}
 801507c:	4618      	mov	r0, r3
 801507e:	f507 7786 	add.w	r7, r7, #268	; 0x10c
 8015082:	46bd      	mov	sp, r7
 8015084:	bd90      	pop	{r4, r7, pc}
 8015086:	bf00      	nop
 8015088:	4d454449 	.word	0x4d454449
 801508c:	24005050 	.word	0x24005050
 8015090:	2400504c 	.word	0x2400504c

08015094 <_fx_file_delete>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fx_file_delete(FX_MEDIA *media_ptr, CHAR *file_name)
{
 8015094:	b580      	push	{r7, lr}
 8015096:	b0a8      	sub	sp, #160	; 0xa0
 8015098:	af02      	add	r7, sp, #8
 801509a:	6078      	str	r0, [r7, #4]
 801509c:	6039      	str	r1, [r7, #0]
#endif /* FX_ENABLE_EXFAT */

#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of times this service has been called.  */
    media_ptr -> fx_media_file_deletes++;
 801509e:	687b      	ldr	r3, [r7, #4]
 80150a0:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80150a4:	1c5a      	adds	r2, r3, #1
 80150a6:	687b      	ldr	r3, [r7, #4]
 80150a8:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
#endif

    /* Setup pointer to media name buffer.  */
    dir_entry.fx_dir_entry_name =  media_ptr -> fx_media_name_buffer + FX_MAX_LONG_NAME_LEN;
 80150ac:	687b      	ldr	r3, [r7, #4]
 80150ae:	f603 039c 	addw	r3, r3, #2204	; 0x89c
 80150b2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80150b6:	60bb      	str	r3, [r7, #8]

    /* Clear the short name string.  */
    dir_entry.fx_dir_entry_short_name[0] =  0;
 80150b8:	2300      	movs	r3, #0
 80150ba:	733b      	strb	r3, [r7, #12]

    /* Check the media to make sure it is open.  */
    if (media_ptr -> fx_media_id != FX_MEDIA_ID)
 80150bc:	687b      	ldr	r3, [r7, #4]
 80150be:	681b      	ldr	r3, [r3, #0]
 80150c0:	4a8e      	ldr	r2, [pc, #568]	; (80152fc <_fx_file_delete+0x268>)
 80150c2:	4293      	cmp	r3, r2
 80150c4:	d001      	beq.n	80150ca <_fx_file_delete+0x36>
    {

        /* Return the media not opened error.  */
        return(FX_MEDIA_NOT_OPEN);
 80150c6:	2311      	movs	r3, #17
 80150c8:	e113      	b.n	80152f2 <_fx_file_delete+0x25e>

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_FILE_DELETE, media_ptr, file_name, 0, 0, FX_TRACE_FILE_EVENTS, 0, 0)

    /* Protect against other threads accessing the media.  */
    FX_PROTECT
 80150ca:	687b      	ldr	r3, [r7, #4]
 80150cc:	681b      	ldr	r3, [r3, #0]
 80150ce:	4a8b      	ldr	r2, [pc, #556]	; (80152fc <_fx_file_delete+0x268>)
 80150d0:	4293      	cmp	r3, r2
 80150d2:	d001      	beq.n	80150d8 <_fx_file_delete+0x44>
 80150d4:	2311      	movs	r3, #17
 80150d6:	e10c      	b.n	80152f2 <_fx_file_delete+0x25e>
 80150d8:	687b      	ldr	r3, [r7, #4]
 80150da:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 80150de:	f04f 31ff 	mov.w	r1, #4294967295
 80150e2:	4618      	mov	r0, r3
 80150e4:	f007 fb36 	bl	801c754 <_tx_mutex_get>
 80150e8:	4603      	mov	r3, r0
 80150ea:	2b00      	cmp	r3, #0
 80150ec:	d001      	beq.n	80150f2 <_fx_file_delete+0x5e>
 80150ee:	2311      	movs	r3, #17
 80150f0:	e0ff      	b.n	80152f2 <_fx_file_delete+0x25e>
    /* Start transaction. */
    _fx_fault_tolerant_transaction_start(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

    /* Check for write protect at the media level (set by driver).  */
    if (media_ptr -> fx_media_driver_write_protect)
 80150f2:	687b      	ldr	r3, [r7, #4]
 80150f4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80150f8:	2b00      	cmp	r3, #0
 80150fa:	d007      	beq.n	801510c <_fx_file_delete+0x78>
#ifdef FX_ENABLE_FAULT_TOLERANT
        FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

        /* Release media protection.  */
        FX_UNPROTECT
 80150fc:	687b      	ldr	r3, [r7, #4]
 80150fe:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8015102:	4618      	mov	r0, r3
 8015104:	f007 fd9e 	bl	801cc44 <_tx_mutex_put>

        /* Return write protect error.  */
        return(FX_WRITE_PROTECT);
 8015108:	2323      	movs	r3, #35	; 0x23
 801510a:	e0f2      	b.n	80152f2 <_fx_file_delete+0x25e>
    }

    /* Search the system for the supplied file name.  */
    status =  _fx_directory_search(media_ptr, file_name, &dir_entry, FX_NULL, FX_NULL);
 801510c:	f107 0208 	add.w	r2, r7, #8
 8015110:	2300      	movs	r3, #0
 8015112:	9300      	str	r3, [sp, #0]
 8015114:	2300      	movs	r3, #0
 8015116:	6839      	ldr	r1, [r7, #0]
 8015118:	6878      	ldr	r0, [r7, #4]
 801511a:	f7ff f86f 	bl	80141fc <_fx_directory_search>
 801511e:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94

    /* Determine if the search was successful.  */
    if (status != FX_SUCCESS)
 8015122:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8015126:	2b00      	cmp	r3, #0
 8015128:	d008      	beq.n	801513c <_fx_file_delete+0xa8>
#ifdef FX_ENABLE_FAULT_TOLERANT
        FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

        /* Release media protection.  */
        FX_UNPROTECT
 801512a:	687b      	ldr	r3, [r7, #4]
 801512c:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8015130:	4618      	mov	r0, r3
 8015132:	f007 fd87 	bl	801cc44 <_tx_mutex_put>

        /* Return the error code.  */
        return(status);
 8015136:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801513a:	e0da      	b.n	80152f2 <_fx_file_delete+0x25e>
        not_a_file_attr = FX_DIRECTORY;
    }
    else
    {
#endif /* FX_ENABLE_EXFAT */
        not_a_file_attr = FX_DIRECTORY | FX_VOLUME;
 801513c:	2318      	movs	r3, #24
 801513e:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
#ifdef FX_ENABLE_EXFAT
    }
#endif /* FX_ENABLE_EXFAT */

    /* Check to make sure the found entry is a file.  */
    if (dir_entry.fx_dir_entry_attributes & not_a_file_attr)
 8015142:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8015146:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 801514a:	4013      	ands	r3, r2
 801514c:	b2db      	uxtb	r3, r3
 801514e:	2b00      	cmp	r3, #0
 8015150:	d007      	beq.n	8015162 <_fx_file_delete+0xce>
#ifdef FX_ENABLE_FAULT_TOLERANT
        FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

        /* Release media protection.  */
        FX_UNPROTECT
 8015152:	687b      	ldr	r3, [r7, #4]
 8015154:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8015158:	4618      	mov	r0, r3
 801515a:	f007 fd73 	bl	801cc44 <_tx_mutex_put>

        /* Return the not a file error code.  */
        return(FX_NOT_A_FILE);
 801515e:	2305      	movs	r3, #5
 8015160:	e0c7      	b.n	80152f2 <_fx_file_delete+0x25e>
    }

    /* Check if the entry is read only */
    if (dir_entry.fx_dir_entry_attributes & (UCHAR)(FX_READ_ONLY))
 8015162:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8015166:	f003 0301 	and.w	r3, r3, #1
 801516a:	2b00      	cmp	r3, #0
 801516c:	d007      	beq.n	801517e <_fx_file_delete+0xea>
#ifdef FX_ENABLE_FAULT_TOLERANT
        FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

        /* Release media protection.  */
        FX_UNPROTECT
 801516e:	687b      	ldr	r3, [r7, #4]
 8015170:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8015174:	4618      	mov	r0, r3
 8015176:	f007 fd65 	bl	801cc44 <_tx_mutex_put>

        /* Return the not a directory error code.  */
        return(FX_WRITE_PROTECT);
 801517a:	2323      	movs	r3, #35	; 0x23
 801517c:	e0b9      	b.n	80152f2 <_fx_file_delete+0x25e>
    }

    /* Search the opened files to see if this file is currently
       opened.  */
    open_count =  media_ptr -> fx_media_opened_file_count;
 801517e:	687b      	ldr	r3, [r7, #4]
 8015180:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8015184:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    search_ptr =  media_ptr -> fx_media_opened_file_list;
 8015188:	687b      	ldr	r3, [r7, #4]
 801518a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 801518e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    while (open_count)
 8015192:	e022      	b.n	80151da <_fx_file_delete+0x146>
    {

        /* Look at each opened file to see if the same file is opened.  */
        if ((search_ptr -> fx_file_dir_entry.fx_dir_entry_log_sector == dir_entry.fx_dir_entry_log_sector) &&
 8015194:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8015198:	e9d3 012a 	ldrd	r0, r1, [r3, #168]	; 0xa8
 801519c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80151a0:	4299      	cmp	r1, r3
 80151a2:	bf08      	it	eq
 80151a4:	4290      	cmpeq	r0, r2
 80151a6:	d10e      	bne.n	80151c6 <_fx_file_delete+0x132>
            (search_ptr -> fx_file_dir_entry.fx_dir_entry_byte_offset == dir_entry.fx_dir_entry_byte_offset))
 80151a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80151ac:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80151b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
        if ((search_ptr -> fx_file_dir_entry.fx_dir_entry_log_sector == dir_entry.fx_dir_entry_log_sector) &&
 80151b2:	429a      	cmp	r2, r3
 80151b4:	d107      	bne.n	80151c6 <_fx_file_delete+0x132>
#ifdef FX_ENABLE_FAULT_TOLERANT
            FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

            /* Release media protection.  */
            FX_UNPROTECT
 80151b6:	687b      	ldr	r3, [r7, #4]
 80151b8:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 80151bc:	4618      	mov	r0, r3
 80151be:	f007 fd41 	bl	801cc44 <_tx_mutex_put>

            /* The file is currently open.  */
            return(FX_ACCESS_ERROR);
 80151c2:	2306      	movs	r3, #6
 80151c4:	e095      	b.n	80152f2 <_fx_file_delete+0x25e>
        }

        /* Adjust the pointer and decrement the search count.  */
        search_ptr =  search_ptr -> fx_file_opened_next;
 80151c6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80151ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80151cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        open_count--;
 80151d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80151d4:	3b01      	subs	r3, #1
 80151d6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    while (open_count)
 80151da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80151de:	2b00      	cmp	r3, #0
 80151e0:	d1d8      	bne.n	8015194 <_fx_file_delete+0x100>
    }

    /* Pickup the starting cluster of the file.  */
    cluster =           dir_entry.fx_dir_entry_cluster;
 80151e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80151e4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    /* At this point, make the directory entry invalid in order to delete the file.  */

#ifndef FX_MEDIA_DISABLE_SEARCH_CACHE

    /* Invalidate the directory search saved information.  */
    media_ptr -> fx_media_last_found_name[0] =  FX_NULL;
 80151e8:	687b      	ldr	r3, [r7, #4]
 80151ea:	2200      	movs	r2, #0
 80151ec:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
#endif

    /* Mark the directory entry as available, while leaving the other
       information for the sake of posterity.  */
    dir_entry.fx_dir_entry_name[0] =        (CHAR)FX_DIR_ENTRY_FREE;
 80151f0:	68bb      	ldr	r3, [r7, #8]
 80151f2:	22e5      	movs	r2, #229	; 0xe5
 80151f4:	701a      	strb	r2, [r3, #0]
    dir_entry.fx_dir_entry_short_name[0] =  (CHAR)FX_DIR_ENTRY_FREE;
 80151f6:	23e5      	movs	r3, #229	; 0xe5
 80151f8:	733b      	strb	r3, [r7, #12]
        status = _fx_directory_exFAT_entry_write(media_ptr, &dir_entry, UPDATE_DELETE);
    }
    else
    {
#endif /* FX_ENABLE_EXFAT */
        status = _fx_directory_entry_write(media_ptr, &dir_entry);
 80151fa:	f107 0308 	add.w	r3, r7, #8
 80151fe:	4619      	mov	r1, r3
 8015200:	6878      	ldr	r0, [r7, #4]
 8015202:	f7fd fd1d 	bl	8012c40 <_fx_directory_entry_write>
 8015206:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
#ifdef FX_ENABLE_EXFAT
    }
#endif /* FX_ENABLE_EXFAT */

    /* Determine if the write was successful.  */
    if (status != FX_SUCCESS)
 801520a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801520e:	2b00      	cmp	r3, #0
 8015210:	d008      	beq.n	8015224 <_fx_file_delete+0x190>
#ifdef FX_ENABLE_FAULT_TOLERANT
        FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

        /* Release media protection.  */
        FX_UNPROTECT
 8015212:	687b      	ldr	r3, [r7, #4]
 8015214:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8015218:	4618      	mov	r0, r3
 801521a:	f007 fd13 	bl	801cc44 <_tx_mutex_put>

        /* Return the error code.  */
        return(status);
 801521e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8015222:	e066      	b.n	80152f2 <_fx_file_delete+0x25e>
    }

    /* Now that the directory entry is no longer valid and pointing at the chain of clusters,
       walk the chain of allocated FAT entries and mark each of them as free.  */
    cluster_count =     0;
 8015224:	2300      	movs	r3, #0
 8015226:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    else
    {
#endif /* FX_ENABLE_FAULT_TOLERANT */

        /* Follow the link of FAT entries.  */
        while ((cluster >= FX_FAT_ENTRY_START) && (cluster < media_ptr -> fx_media_fat_reserved))
 801522a:	e046      	b.n	80152ba <_fx_file_delete+0x226>
        {

            /* Increment the number of clusters.  */
            cluster_count++;
 801522c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8015230:	3301      	adds	r3, #1
 8015232:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
            else
            {
#endif /* FX_ENABLE_EXFAT */

                /* Read the current cluster entry from the FAT.  */
                status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &contents);
 8015236:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 801523a:	461a      	mov	r2, r3
 801523c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8015240:	6878      	ldr	r0, [r7, #4]
 8015242:	f004 fa8d 	bl	8019760 <_fx_utility_FAT_entry_read>
 8015246:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94

                /* Check the return value.  */
                if (status != FX_SUCCESS)
 801524a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801524e:	2b00      	cmp	r3, #0
 8015250:	d008      	beq.n	8015264 <_fx_file_delete+0x1d0>
#ifdef FX_ENABLE_FAULT_TOLERANT
                    FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

                    /* Release media protection.  */
                    FX_UNPROTECT
 8015252:	687b      	ldr	r3, [r7, #4]
 8015254:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8015258:	4618      	mov	r0, r3
 801525a:	f007 fcf3 	bl	801cc44 <_tx_mutex_put>

                    /* Return the error status.  */
                    return(status);
 801525e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8015262:	e046      	b.n	80152f2 <_fx_file_delete+0x25e>
                }
#ifdef FX_ENABLE_EXFAT
            }
#endif /* FX_ENABLE_EXFAT */

            if ((cluster == contents) || (cluster_count > media_ptr -> fx_media_total_clusters))
 8015264:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8015266:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 801526a:	429a      	cmp	r2, r3
 801526c:	d005      	beq.n	801527a <_fx_file_delete+0x1e6>
 801526e:	687b      	ldr	r3, [r7, #4]
 8015270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015272:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8015276:	429a      	cmp	r2, r3
 8015278:	d907      	bls.n	801528a <_fx_file_delete+0x1f6>
#ifdef FX_ENABLE_FAULT_TOLERANT
                FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

                /* Release media protection.  */
                FX_UNPROTECT
 801527a:	687b      	ldr	r3, [r7, #4]
 801527c:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8015280:	4618      	mov	r0, r3
 8015282:	f007 fcdf 	bl	801cc44 <_tx_mutex_put>

                /* Return the bad status.  */
                return(FX_FAT_READ_ERROR);
 8015286:	2303      	movs	r3, #3
 8015288:	e033      	b.n	80152f2 <_fx_file_delete+0x25e>
            if (!(dir_entry.fx_dir_entry_dont_use_fat & 1))
            {
#endif /* FX_ENABLE_EXFAT */

                /* Make the current cluster available.  */
                status =  _fx_utility_FAT_entry_write(media_ptr, cluster, FX_FREE_CLUSTER);
 801528a:	2200      	movs	r2, #0
 801528c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8015290:	6878      	ldr	r0, [r7, #4]
 8015292:	f004 fc8e 	bl	8019bb2 <_fx_utility_FAT_entry_write>
 8015296:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94

                /* Check the return value.  */
                if (status != FX_SUCCESS)
 801529a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801529e:	2b00      	cmp	r3, #0
 80152a0:	d008      	beq.n	80152b4 <_fx_file_delete+0x220>
#ifdef FX_ENABLE_FAULT_TOLERANT
                    FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

                    /* Release media protection.  */
                    FX_UNPROTECT
 80152a2:	687b      	ldr	r3, [r7, #4]
 80152a4:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 80152a8:	4618      	mov	r0, r3
 80152aa:	f007 fccb 	bl	801cc44 <_tx_mutex_put>

                    /* Return the error status.  */
                    return(status);
 80152ae:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80152b2:	e01e      	b.n	80152f2 <_fx_file_delete+0x25e>
                }
            }
#endif /* FX_ENABLE_EXFAT */

            /* Setup for the next cluster.  */
            cluster =  contents;
 80152b4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80152b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        while ((cluster >= FX_FAT_ENTRY_START) && (cluster < media_ptr -> fx_media_fat_reserved))
 80152ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80152be:	2b01      	cmp	r3, #1
 80152c0:	d908      	bls.n	80152d4 <_fx_file_delete+0x240>
 80152c2:	687b      	ldr	r3, [r7, #4]
 80152c4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80152c8:	f8d3 34a8 	ldr.w	r3, [r3, #1192]	; 0x4a8
 80152cc:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80152d0:	429a      	cmp	r2, r3
 80152d2:	d3ab      	bcc.n	801522c <_fx_file_delete+0x198>
    }
#endif /* FX_ENABLE_FAULT_TOLERANT */

    /* Update the free clusters in the media control block.  */
    media_ptr -> fx_media_available_clusters =
        media_ptr -> fx_media_available_clusters + cluster_count;
 80152d4:	687b      	ldr	r3, [r7, #4]
 80152d6:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80152d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80152dc:	441a      	add	r2, r3
    media_ptr -> fx_media_available_clusters =
 80152de:	687b      	ldr	r3, [r7, #4]
 80152e0:	67da      	str	r2, [r3, #124]	; 0x7c
    /* End transaction. */
    status = _fx_fault_tolerant_transaction_end(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

    /* Release media protection.  */
    FX_UNPROTECT
 80152e2:	687b      	ldr	r3, [r7, #4]
 80152e4:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 80152e8:	4618      	mov	r0, r3
 80152ea:	f007 fcab 	bl	801cc44 <_tx_mutex_put>

    /* File delete is complete, return status.  */
    return(status);
 80152ee:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
}
 80152f2:	4618      	mov	r0, r3
 80152f4:	3798      	adds	r7, #152	; 0x98
 80152f6:	46bd      	mov	sp, r7
 80152f8:	bd80      	pop	{r7, pc}
 80152fa:	bf00      	nop
 80152fc:	4d454449 	.word	0x4d454449

08015300 <_fx_file_extended_seek>:
/*                                            relative cluster logic,     */
/*                                            resulting in version 6.1.7  */
/*                                                                        */
/**************************************************************************/
UINT  _fx_file_extended_seek(FX_FILE *file_ptr, ULONG64 byte_offset)
{
 8015300:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8015304:	b0c2      	sub	sp, #264	; 0x108
 8015306:	af00      	add	r7, sp, #0
 8015308:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
 801530c:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0

UINT      status;
ULONG     cluster;
ULONG     contents = 0;
 8015310:	2300      	movs	r3, #0
 8015312:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
ULONG64   bytes_remaining;
FX_MEDIA *media_ptr;


    /* First, determine if the file is still open.  */
    if (file_ptr -> fx_file_id != FX_FILE_ID)
 8015316:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801531a:	681a      	ldr	r2, [r3, #0]
 801531c:	4bcf      	ldr	r3, [pc, #828]	; (801565c <_fx_file_extended_seek+0x35c>)
 801531e:	429a      	cmp	r2, r3
 8015320:	d001      	beq.n	8015326 <_fx_file_extended_seek+0x26>
    {

        /* Return the file not open error status.  */
        return(FX_NOT_OPEN);
 8015322:	2307      	movs	r3, #7
 8015324:	e2b4      	b.n	8015890 <_fx_file_extended_seek+0x590>
    }

#ifndef FX_MEDIA_STATISTICS_DISABLE
    /* Setup pointer to media structure.  */
    media_ptr =  file_ptr -> fx_file_media_ptr;
 8015326:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801532a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801532c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4

    /* Increment the number of times this service has been called.  */
    media_ptr -> fx_media_file_seeks++;
 8015330:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8015334:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8015338:	1c5a      	adds	r2, r3, #1
 801533a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801533e:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
#endif

    /* Setup pointer to associated media control block.  */
    media_ptr =  file_ptr -> fx_file_media_ptr;
 8015342:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8015346:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015348:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_FILE_SEEK, file_ptr, byte_offset, file_ptr -> fx_file_current_file_offset, 0, FX_TRACE_FILE_EVENTS, 0, 0)

    /* Protect against other threads accessing the media.  */
    FX_PROTECT
 801534c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8015350:	681a      	ldr	r2, [r3, #0]
 8015352:	4bc3      	ldr	r3, [pc, #780]	; (8015660 <_fx_file_extended_seek+0x360>)
 8015354:	429a      	cmp	r2, r3
 8015356:	d001      	beq.n	801535c <_fx_file_extended_seek+0x5c>
 8015358:	2311      	movs	r3, #17
 801535a:	e299      	b.n	8015890 <_fx_file_extended_seek+0x590>
 801535c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8015360:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8015364:	f04f 31ff 	mov.w	r1, #4294967295
 8015368:	4618      	mov	r0, r3
 801536a:	f007 f9f3 	bl	801c754 <_tx_mutex_get>
 801536e:	4603      	mov	r3, r0
 8015370:	2b00      	cmp	r3, #0
 8015372:	d001      	beq.n	8015378 <_fx_file_extended_seek+0x78>
 8015374:	2311      	movs	r3, #17
 8015376:	e28b      	b.n	8015890 <_fx_file_extended_seek+0x590>

    /* Check if we actually have to do anything.  */
    if (byte_offset == file_ptr -> fx_file_current_file_offset)
 8015378:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801537c:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8015380:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 8015384:	428b      	cmp	r3, r1
 8015386:	bf08      	it	eq
 8015388:	4282      	cmpeq	r2, r0
 801538a:	d108      	bne.n	801539e <_fx_file_extended_seek+0x9e>
    {

        /* Release media protection.  */
        FX_UNPROTECT
 801538c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8015390:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8015394:	4618      	mov	r0, r3
 8015396:	f007 fc55 	bl	801cc44 <_tx_mutex_put>

        /* Seek is complete, return successful status.  */
        return(FX_SUCCESS);
 801539a:	2300      	movs	r3, #0
 801539c:	e278      	b.n	8015890 <_fx_file_extended_seek+0x590>
    }

    /* Calculate the number of bytes per cluster.  */
    bytes_per_cluster =  ((ULONG)media_ptr -> fx_media_bytes_per_sector) *
 801539e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80153a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
        ((ULONG)media_ptr -> fx_media_sectors_per_cluster);
 80153a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80153a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    bytes_per_cluster =  ((ULONG)media_ptr -> fx_media_bytes_per_sector) *
 80153aa:	fb02 f303 	mul.w	r3, r2, r3
 80153ae:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0

    /* Check for invalid value.  */
    if (bytes_per_cluster == 0)
 80153b2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80153b6:	2b00      	cmp	r3, #0
 80153b8:	d108      	bne.n	80153cc <_fx_file_extended_seek+0xcc>
    {

        /* Release media protection.  */
        FX_UNPROTECT
 80153ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80153be:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 80153c2:	4618      	mov	r0, r3
 80153c4:	f007 fc3e 	bl	801cc44 <_tx_mutex_put>

        /* Invalid media, return error.  */
        return(FX_MEDIA_INVALID);
 80153c8:	2302      	movs	r3, #2
 80153ca:	e261      	b.n	8015890 <_fx_file_extended_seek+0x590>
    }

    /* See if we need to adjust the byte offset.  */
    if (byte_offset > file_ptr -> fx_file_current_file_size)
 80153cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80153d0:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 80153d4:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 80153d8:	4290      	cmp	r0, r2
 80153da:	eb71 0303 	sbcs.w	r3, r1, r3
 80153de:	d205      	bcs.n	80153ec <_fx_file_extended_seek+0xec>
    {

        /* Adjust the byte offset down to the file size. */
        byte_offset =  file_ptr -> fx_file_current_file_size;
 80153e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80153e4:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 80153e8:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
    }

    /* Check if the desired position within the leading consecutive clusters.  */
    if (byte_offset >= (ULONG64)file_ptr -> fx_file_consecutive_cluster * (ULONG64)bytes_per_cluster)
 80153ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80153f0:	699b      	ldr	r3, [r3, #24]
 80153f2:	2200      	movs	r2, #0
 80153f4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80153f8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80153fc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8015400:	2200      	movs	r2, #0
 8015402:	469a      	mov	sl, r3
 8015404:	4693      	mov	fp, r2
 8015406:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 801540a:	460b      	mov	r3, r1
 801540c:	fb0a f203 	mul.w	r2, sl, r3
 8015410:	4603      	mov	r3, r0
 8015412:	fb03 f30b 	mul.w	r3, r3, fp
 8015416:	4413      	add	r3, r2
 8015418:	4602      	mov	r2, r0
 801541a:	fba2 450a 	umull	r4, r5, r2, sl
 801541e:	442b      	add	r3, r5
 8015420:	461d      	mov	r5, r3
 8015422:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 8015426:	42a2      	cmp	r2, r4
 8015428:	41ab      	sbcs	r3, r5
 801542a:	f0c0 8155 	bcc.w	80156d8 <_fx_file_extended_seek+0x3d8>

            /* At this point, we are ready to walk list of clusters to setup the
               seek position of this file.  */

            /* check if byte_offset is greater than where we were left off earlier */
            if ((ULONG64)file_ptr -> fx_file_current_relative_cluster * (ULONG64)bytes_per_cluster < byte_offset)
 801542e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8015432:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015434:	2200      	movs	r2, #0
 8015436:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 801543a:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 801543e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8015442:	2200      	movs	r2, #0
 8015444:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8015448:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 801544c:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	; 0xb8
 8015450:	462b      	mov	r3, r5
 8015452:	e9d7 ab2c 	ldrd	sl, fp, [r7, #176]	; 0xb0
 8015456:	4652      	mov	r2, sl
 8015458:	fb02 f203 	mul.w	r2, r2, r3
 801545c:	465b      	mov	r3, fp
 801545e:	4621      	mov	r1, r4
 8015460:	fb01 f303 	mul.w	r3, r1, r3
 8015464:	4413      	add	r3, r2
 8015466:	4622      	mov	r2, r4
 8015468:	4651      	mov	r1, sl
 801546a:	fba2 8901 	umull	r8, r9, r2, r1
 801546e:	444b      	add	r3, r9
 8015470:	4699      	mov	r9, r3
 8015472:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 8015476:	4590      	cmp	r8, r2
 8015478:	eb79 0303 	sbcs.w	r3, r9, r3
 801547c:	d225      	bcs.n	80154ca <_fx_file_extended_seek+0x1ca>
            {

                cluster =    file_ptr -> fx_file_current_physical_cluster;
 801547e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8015482:	6a1b      	ldr	r3, [r3, #32]
 8015484:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

                bytes_remaining =   byte_offset -
                    file_ptr -> fx_file_current_relative_cluster * bytes_per_cluster;
 8015488:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801548c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801548e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8015492:	fb02 f303 	mul.w	r3, r2, r3
 8015496:	2200      	movs	r2, #0
 8015498:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 801549c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
                bytes_remaining =   byte_offset -
 80154a0:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 80154a4:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	; 0xa8
 80154a8:	4621      	mov	r1, r4
 80154aa:	1a51      	subs	r1, r2, r1
 80154ac:	6139      	str	r1, [r7, #16]
 80154ae:	4629      	mov	r1, r5
 80154b0:	eb63 0301 	sbc.w	r3, r3, r1
 80154b4:	617b      	str	r3, [r7, #20]
 80154b6:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80154ba:	e9c7 343e 	strd	r3, r4, [r7, #248]	; 0xf8

                cluster_count = file_ptr -> fx_file_current_relative_cluster;
 80154be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80154c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80154c4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80154c8:	e0b7      	b.n	801563a <_fx_file_extended_seek+0x33a>
            }
            else
            {

                cluster =    file_ptr -> fx_file_first_physical_cluster +
 80154ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80154ce:	695a      	ldr	r2, [r3, #20]
                    (file_ptr -> fx_file_consecutive_cluster - 1);
 80154d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80154d4:	699b      	ldr	r3, [r3, #24]
                cluster =    file_ptr -> fx_file_first_physical_cluster +
 80154d6:	4413      	add	r3, r2
 80154d8:	3b01      	subs	r3, #1
 80154da:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
                bytes_remaining =   byte_offset -
                    (file_ptr -> fx_file_consecutive_cluster - 1) * bytes_per_cluster;
 80154de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80154e2:	699b      	ldr	r3, [r3, #24]
 80154e4:	1e5a      	subs	r2, r3, #1
 80154e6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80154ea:	fb02 f303 	mul.w	r3, r2, r3
 80154ee:	2200      	movs	r2, #0
 80154f0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80154f4:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
                bytes_remaining =   byte_offset -
 80154f8:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 80154fc:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	; 0xa0
 8015500:	4621      	mov	r1, r4
 8015502:	1a51      	subs	r1, r2, r1
 8015504:	60b9      	str	r1, [r7, #8]
 8015506:	4629      	mov	r1, r5
 8015508:	eb63 0301 	sbc.w	r3, r3, r1
 801550c:	60fb      	str	r3, [r7, #12]
 801550e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8015512:	e9c7 343e 	strd	r3, r4, [r7, #248]	; 0xf8
                cluster_count =     (file_ptr -> fx_file_consecutive_cluster - 1);
 8015516:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801551a:	699b      	ldr	r3, [r3, #24]
 801551c:	3b01      	subs	r3, #1
 801551e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
            }


            /* Follow the link of FAT entries.  */
            while ((cluster >= FX_FAT_ENTRY_START) && (cluster < media_ptr -> fx_media_fat_reserved))
 8015522:	e08a      	b.n	801563a <_fx_file_extended_seek+0x33a>
            {

                /* Increment the number of clusters.  */
                cluster_count++;
 8015524:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8015528:	3301      	adds	r3, #1
 801552a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100

                /* Read the current cluster entry from the FAT.  */
                status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &contents);
 801552e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8015532:	461a      	mov	r2, r3
 8015534:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 8015538:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 801553c:	f004 f910 	bl	8019760 <_fx_utility_FAT_entry_read>
 8015540:	f8c7 00ec 	str.w	r0, [r7, #236]	; 0xec

                /* Check the return value.  */
                if (status != FX_SUCCESS)
 8015544:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8015548:	2b00      	cmp	r3, #0
 801554a:	d009      	beq.n	8015560 <_fx_file_extended_seek+0x260>
                {

                    /* Release media protection.  */
                    FX_UNPROTECT
 801554c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8015550:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8015554:	4618      	mov	r0, r3
 8015556:	f007 fb75 	bl	801cc44 <_tx_mutex_put>

                    /* Return the error status.  */
                    return(status);
 801555a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 801555e:	e197      	b.n	8015890 <_fx_file_extended_seek+0x590>
                }

                /* Save the last valid cluster.  */
                last_cluster =  cluster;
 8015560:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8015564:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8

                /* Setup for the next cluster.  */
                cluster =  contents;
 8015568:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801556c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

                /* Determine if this is the last written cluster.  */
                if (bytes_remaining > bytes_per_cluster)
 8015570:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8015574:	2200      	movs	r2, #0
 8015576:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 801557a:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 801557e:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 8015582:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 8015586:	4621      	mov	r1, r4
 8015588:	4291      	cmp	r1, r2
 801558a:	4629      	mov	r1, r5
 801558c:	eb71 0303 	sbcs.w	r3, r1, r3
 8015590:	d216      	bcs.n	80155c0 <_fx_file_extended_seek+0x2c0>
                {

                    /* Still more seeking, just decrement the working byte offset.  */
                    bytes_remaining =  bytes_remaining - bytes_per_cluster;
 8015592:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8015596:	2200      	movs	r2, #0
 8015598:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801559c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80155a0:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 80155a4:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80155a8:	4621      	mov	r1, r4
 80155aa:	1a51      	subs	r1, r2, r1
 80155ac:	6039      	str	r1, [r7, #0]
 80155ae:	4629      	mov	r1, r5
 80155b0:	eb63 0301 	sbc.w	r3, r3, r1
 80155b4:	607b      	str	r3, [r7, #4]
 80155b6:	e9d7 3400 	ldrd	r3, r4, [r7]
 80155ba:	e9c7 343e 	strd	r3, r4, [r7, #248]	; 0xf8
 80155be:	e03c      	b.n	801563a <_fx_file_extended_seek+0x33a>
                }
                else
                {

                    /* Remember this cluster number.  */
                    file_ptr -> fx_file_current_physical_cluster =  last_cluster;
 80155c0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80155c4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80155c8:	6213      	str	r3, [r2, #32]

                    /* Remember the relative cluster.  */
                    file_ptr -> fx_file_current_relative_cluster =  cluster_count - 1;
 80155ca:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80155ce:	1e5a      	subs	r2, r3, #1
 80155d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80155d4:	635a      	str	r2, [r3, #52]	; 0x34

                    /* If the remaining bytes exactly fits the cluster size, check for
                       a possible adjustment to the next cluster.  */
                    if ((bytes_remaining == bytes_per_cluster) &&
 80155d6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80155da:	2200      	movs	r2, #0
 80155dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80155e0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80155e4:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 80155e8:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 80155ec:	4621      	mov	r1, r4
 80155ee:	4628      	mov	r0, r5
 80155f0:	4283      	cmp	r3, r0
 80155f2:	bf08      	it	eq
 80155f4:	428a      	cmpeq	r2, r1
 80155f6:	d135      	bne.n	8015664 <_fx_file_extended_seek+0x364>
 80155f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80155fc:	2b01      	cmp	r3, #1
 80155fe:	d931      	bls.n	8015664 <_fx_file_extended_seek+0x364>
                        (cluster >= FX_FAT_ENTRY_START) && (cluster < media_ptr -> fx_media_fat_reserved))
 8015600:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8015604:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8015608:	f8d3 24a8 	ldr.w	r2, [r3, #1192]	; 0x4a8
 801560c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8015610:	4293      	cmp	r3, r2
 8015612:	d227      	bcs.n	8015664 <_fx_file_extended_seek+0x364>
                    {

                        /* We need to position to next allocated cluster.  */
                        file_ptr -> fx_file_current_physical_cluster =  cluster;
 8015614:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8015618:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801561c:	6213      	str	r3, [r2, #32]
                        file_ptr -> fx_file_current_relative_cluster++;
 801561e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8015622:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015624:	1c5a      	adds	r2, r3, #1
 8015626:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801562a:	635a      	str	r2, [r3, #52]	; 0x34

                        /* Clear the remaining bytes.  */
                        bytes_remaining =  0;
 801562c:	f04f 0200 	mov.w	r2, #0
 8015630:	f04f 0300 	mov.w	r3, #0
 8015634:	e9c7 233e 	strd	r2, r3, [r7, #248]	; 0xf8
                    }

                    /* This is the cluster that contains the seek position.  */
                    break;
 8015638:	e014      	b.n	8015664 <_fx_file_extended_seek+0x364>
            while ((cluster >= FX_FAT_ENTRY_START) && (cluster < media_ptr -> fx_media_fat_reserved))
 801563a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801563e:	2b01      	cmp	r3, #1
 8015640:	d911      	bls.n	8015666 <_fx_file_extended_seek+0x366>
 8015642:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8015646:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 801564a:	f8d3 24a8 	ldr.w	r2, [r3, #1192]	; 0x4a8
 801564e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8015652:	4293      	cmp	r3, r2
 8015654:	f4ff af66 	bcc.w	8015524 <_fx_file_extended_seek+0x224>
 8015658:	e005      	b.n	8015666 <_fx_file_extended_seek+0x366>
 801565a:	bf00      	nop
 801565c:	46494c45 	.word	0x46494c45
 8015660:	4d454449 	.word	0x4d454449
                    break;
 8015664:	bf00      	nop
                }
            }
        
            /* Check for errors in traversal of the FAT chain.  */
            if (byte_offset > (((ULONG64) bytes_per_cluster) * ((ULONG64) cluster_count)))
 8015666:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 801566a:	2200      	movs	r2, #0
 801566c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8015670:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8015674:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8015678:	2200      	movs	r2, #0
 801567a:	67bb      	str	r3, [r7, #120]	; 0x78
 801567c:	67fa      	str	r2, [r7, #124]	; 0x7c
 801567e:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8015682:	462b      	mov	r3, r5
 8015684:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8015688:	4642      	mov	r2, r8
 801568a:	fb02 f203 	mul.w	r2, r2, r3
 801568e:	464b      	mov	r3, r9
 8015690:	4621      	mov	r1, r4
 8015692:	fb01 f303 	mul.w	r3, r1, r3
 8015696:	4413      	add	r3, r2
 8015698:	4622      	mov	r2, r4
 801569a:	4641      	mov	r1, r8
 801569c:	fba2 1201 	umull	r1, r2, r2, r1
 80156a0:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 80156a4:	460a      	mov	r2, r1
 80156a6:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 80156aa:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80156ae:	4413      	add	r3, r2
 80156b0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80156b4:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 80156b8:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 80156bc:	4621      	mov	r1, r4
 80156be:	4291      	cmp	r1, r2
 80156c0:	4629      	mov	r1, r5
 80156c2:	4199      	sbcs	r1, r3
 80156c4:	d22f      	bcs.n	8015726 <_fx_file_extended_seek+0x426>
            {
    
                /* Release media protection.  */
                FX_UNPROTECT
 80156c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80156ca:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 80156ce:	4618      	mov	r0, r3
 80156d0:	f007 fab8 	bl	801cc44 <_tx_mutex_put>

                /* This is an error that suggests a corrupt file.  */
                return(FX_FILE_CORRUPT);
 80156d4:	2308      	movs	r3, #8
 80156d6:	e0db      	b.n	8015890 <_fx_file_extended_seek+0x590>
    }
    else
    {

        /* we should directly access the desired cluster */
        file_ptr -> fx_file_current_relative_cluster = (ULONG)(byte_offset / bytes_per_cluster);
 80156d8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80156dc:	2200      	movs	r2, #0
 80156de:	673b      	str	r3, [r7, #112]	; 0x70
 80156e0:	677a      	str	r2, [r7, #116]	; 0x74
 80156e2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80156e6:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 80156ea:	f7ea ff79 	bl	80005e0 <__aeabi_uldivmod>
 80156ee:	4602      	mov	r2, r0
 80156f0:	460b      	mov	r3, r1
 80156f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80156f6:	635a      	str	r2, [r3, #52]	; 0x34

        file_ptr -> fx_file_current_physical_cluster =
            file_ptr -> fx_file_first_physical_cluster + file_ptr -> fx_file_current_relative_cluster;
 80156f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80156fc:	695a      	ldr	r2, [r3, #20]
 80156fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8015702:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015704:	441a      	add	r2, r3
        file_ptr -> fx_file_current_physical_cluster =
 8015706:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801570a:	621a      	str	r2, [r3, #32]

        bytes_remaining =  byte_offset % bytes_per_cluster;
 801570c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8015710:	2200      	movs	r2, #0
 8015712:	66bb      	str	r3, [r7, #104]	; 0x68
 8015714:	66fa      	str	r2, [r7, #108]	; 0x6c
 8015716:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 801571a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 801571e:	f7ea ff5f 	bl	80005e0 <__aeabi_uldivmod>
 8015722:	e9c7 233e 	strd	r2, r3, [r7, #248]	; 0xf8
    }


    /* Determine if the remaining bytes fit exactly into the cluster size.  */
    if (bytes_remaining == bytes_per_cluster)
 8015726:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 801572a:	2200      	movs	r2, #0
 801572c:	663b      	str	r3, [r7, #96]	; 0x60
 801572e:	667a      	str	r2, [r7, #100]	; 0x64
 8015730:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 8015734:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8015738:	4621      	mov	r1, r4
 801573a:	4628      	mov	r0, r5
 801573c:	4283      	cmp	r3, r0
 801573e:	bf08      	it	eq
 8015740:	428a      	cmpeq	r2, r1
 8015742:	d151      	bne.n	80157e8 <_fx_file_extended_seek+0x4e8>
    {

        /* Position to the end of the cluster.  */
        file_ptr -> fx_file_current_logical_sector = (ULONG)(((ULONG)media_ptr -> fx_media_data_sector_start) +
 8015744:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8015748:	6d1a      	ldr	r2, [r3, #80]	; 0x50
                                                             (((ULONG64)file_ptr -> fx_file_current_physical_cluster - FX_FAT_ENTRY_START) *
 801574a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801574e:	6a1b      	ldr	r3, [r3, #32]
        file_ptr -> fx_file_current_logical_sector = (ULONG)(((ULONG)media_ptr -> fx_media_data_sector_start) +
 8015750:	3b02      	subs	r3, #2
                                                              ((ULONG)media_ptr -> fx_media_sectors_per_cluster)) +
 8015752:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 8015756:	6d49      	ldr	r1, [r1, #84]	; 0x54
        file_ptr -> fx_file_current_logical_sector = (ULONG)(((ULONG)media_ptr -> fx_media_data_sector_start) +
 8015758:	fb01 f303 	mul.w	r3, r1, r3
 801575c:	18d4      	adds	r4, r2, r3
                                                             ((bytes_remaining - 1) / (ULONG)media_ptr -> fx_media_bytes_per_sector));
 801575e:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 8015762:	1e51      	subs	r1, r2, #1
 8015764:	65b9      	str	r1, [r7, #88]	; 0x58
 8015766:	f143 33ff 	adc.w	r3, r3, #4294967295
 801576a:	65fb      	str	r3, [r7, #92]	; 0x5c
 801576c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8015770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015772:	2200      	movs	r2, #0
 8015774:	653b      	str	r3, [r7, #80]	; 0x50
 8015776:	657a      	str	r2, [r7, #84]	; 0x54
 8015778:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 801577c:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8015780:	f7ea ff2e 	bl	80005e0 <__aeabi_uldivmod>
 8015784:	4602      	mov	r2, r0
 8015786:	460b      	mov	r3, r1
        file_ptr -> fx_file_current_logical_sector = (ULONG)(((ULONG)media_ptr -> fx_media_data_sector_start) +
 8015788:	4613      	mov	r3, r2
 801578a:	4423      	add	r3, r4
 801578c:	2200      	movs	r2, #0
 801578e:	64bb      	str	r3, [r7, #72]	; 0x48
 8015790:	64fa      	str	r2, [r7, #76]	; 0x4c
 8015792:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8015796:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 801579a:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
        file_ptr -> fx_file_current_relative_sector =   (UINT)(((bytes_remaining - 1) / (ULONG)media_ptr -> fx_media_bytes_per_sector));
 801579e:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 80157a2:	1e51      	subs	r1, r2, #1
 80157a4:	6439      	str	r1, [r7, #64]	; 0x40
 80157a6:	f143 33ff 	adc.w	r3, r3, #4294967295
 80157aa:	647b      	str	r3, [r7, #68]	; 0x44
 80157ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80157b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80157b2:	2200      	movs	r2, #0
 80157b4:	63bb      	str	r3, [r7, #56]	; 0x38
 80157b6:	63fa      	str	r2, [r7, #60]	; 0x3c
 80157b8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80157bc:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80157c0:	f7ea ff0e 	bl	80005e0 <__aeabi_uldivmod>
 80157c4:	4602      	mov	r2, r0
 80157c6:	460b      	mov	r3, r1
 80157c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80157cc:	639a      	str	r2, [r3, #56]	; 0x38
        file_ptr -> fx_file_current_file_offset =       byte_offset;
 80157ce:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 80157d2:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 80157d6:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
        file_ptr -> fx_file_current_logical_offset =    media_ptr -> fx_media_bytes_per_sector;
 80157da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80157de:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80157e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80157e4:	631a      	str	r2, [r3, #48]	; 0x30
 80157e6:	e04b      	b.n	8015880 <_fx_file_extended_seek+0x580>
    }
    else
    {

        /* Position the pointers to the new offset.  */
        file_ptr -> fx_file_current_logical_sector = (ULONG)(((ULONG)media_ptr -> fx_media_data_sector_start) +
 80157e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80157ec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
                                                             (((ULONG64)file_ptr -> fx_file_current_physical_cluster - FX_FAT_ENTRY_START) *
 80157ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80157f2:	6a1b      	ldr	r3, [r3, #32]
        file_ptr -> fx_file_current_logical_sector = (ULONG)(((ULONG)media_ptr -> fx_media_data_sector_start) +
 80157f4:	3b02      	subs	r3, #2
                                                              ((ULONG)media_ptr -> fx_media_sectors_per_cluster)) +
 80157f6:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 80157fa:	6d49      	ldr	r1, [r1, #84]	; 0x54
        file_ptr -> fx_file_current_logical_sector = (ULONG)(((ULONG)media_ptr -> fx_media_data_sector_start) +
 80157fc:	fb01 f303 	mul.w	r3, r1, r3
 8015800:	18d4      	adds	r4, r2, r3
                                                             (bytes_remaining / (ULONG)media_ptr -> fx_media_bytes_per_sector));
 8015802:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8015806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015808:	2200      	movs	r2, #0
 801580a:	633b      	str	r3, [r7, #48]	; 0x30
 801580c:	637a      	str	r2, [r7, #52]	; 0x34
 801580e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8015812:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 8015816:	f7ea fee3 	bl	80005e0 <__aeabi_uldivmod>
 801581a:	4602      	mov	r2, r0
 801581c:	460b      	mov	r3, r1
        file_ptr -> fx_file_current_logical_sector = (ULONG)(((ULONG)media_ptr -> fx_media_data_sector_start) +
 801581e:	4613      	mov	r3, r2
 8015820:	4423      	add	r3, r4
 8015822:	2200      	movs	r2, #0
 8015824:	62bb      	str	r3, [r7, #40]	; 0x28
 8015826:	62fa      	str	r2, [r7, #44]	; 0x2c
 8015828:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801582c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8015830:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
        file_ptr -> fx_file_current_relative_sector =   (UINT)((bytes_remaining / (ULONG)media_ptr -> fx_media_bytes_per_sector));
 8015834:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8015838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801583a:	2200      	movs	r2, #0
 801583c:	623b      	str	r3, [r7, #32]
 801583e:	627a      	str	r2, [r7, #36]	; 0x24
 8015840:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8015844:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 8015848:	f7ea feca 	bl	80005e0 <__aeabi_uldivmod>
 801584c:	4602      	mov	r2, r0
 801584e:	460b      	mov	r3, r1
 8015850:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8015854:	639a      	str	r2, [r3, #56]	; 0x38
        file_ptr -> fx_file_current_file_offset =       byte_offset;
 8015856:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 801585a:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 801585e:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
        file_ptr -> fx_file_current_logical_offset =    (ULONG)(bytes_remaining % ((ULONG)media_ptr -> fx_media_bytes_per_sector));
 8015862:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8015866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015868:	2200      	movs	r2, #0
 801586a:	61bb      	str	r3, [r7, #24]
 801586c:	61fa      	str	r2, [r7, #28]
 801586e:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 8015872:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8015876:	f7ea feb3 	bl	80005e0 <__aeabi_uldivmod>
 801587a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801587e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Release media protection.  */
    FX_UNPROTECT
 8015880:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8015884:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8015888:	4618      	mov	r0, r3
 801588a:	f007 f9db 	bl	801cc44 <_tx_mutex_put>

    /* Seek is complete, return successful status.  */
    return(FX_SUCCESS);
 801588e:	2300      	movs	r3, #0
}
 8015890:	4618      	mov	r0, r3
 8015892:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8015896:	46bd      	mov	sp, r7
 8015898:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0801589c <_fx_file_open>:
/*                                            consecutive detect,         */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fx_file_open(FX_MEDIA *media_ptr, FX_FILE *file_ptr, CHAR *file_name, UINT open_type)
{
 801589c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80158a0:	b0e8      	sub	sp, #416	; 0x1a0
 80158a2:	af02      	add	r7, sp, #8
 80158a4:	f8c7 014c 	str.w	r0, [r7, #332]	; 0x14c
 80158a8:	f8c7 1148 	str.w	r1, [r7, #328]	; 0x148
 80158ac:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
 80158b0:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
UINT     status;
#ifndef FX_DISABLE_CONSECUTIVE_DETECT
UINT     leading_consecutive;
#endif /* FX_DISABLE_CONSECUTIVE_DETECT */
ULONG    cluster;
ULONG    contents = 0;
 80158b4:	2300      	movs	r3, #0
 80158b6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
#endif /* FX_DISABLE_FAST_OPEN */
UCHAR    not_a_file_attr;


    /* Check the media to make sure it is open.  */
    if (media_ptr -> fx_media_id != FX_MEDIA_ID)
 80158ba:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80158be:	681a      	ldr	r2, [r3, #0]
 80158c0:	4bd9      	ldr	r3, [pc, #868]	; (8015c28 <_fx_file_open+0x38c>)
 80158c2:	429a      	cmp	r2, r3
 80158c4:	d002      	beq.n	80158cc <_fx_file_open+0x30>
    {

        /* Return the media not opened error.  */
        return(FX_MEDIA_NOT_OPEN);
 80158c6:	2311      	movs	r3, #17
 80158c8:	f000 bcc4 	b.w	8016254 <_fx_file_open+0x9b8>
    }

#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of times this service has been called.  */
    media_ptr -> fx_media_file_opens++;
 80158cc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80158d0:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 80158d4:	1c5a      	adds	r2, r3, #1
 80158d6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80158da:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
#endif

    /* Clear the notify function. */
    file_ptr -> fx_file_write_notify = FX_NULL;
 80158de:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80158e2:	2300      	movs	r3, #0
 80158e4:	f8c2 31dc 	str.w	r3, [r2, #476]	; 0x1dc
        fat_last        = FX_LAST_CLUSTER_exFAT;
        not_a_file_attr = FX_DIRECTORY;
    }
    else if (media_ptr -> fx_media_FAT_type == FX_FAT32)
#else
    if (media_ptr -> fx_media_32_bit_FAT)
 80158e8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80158ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80158ee:	2b00      	cmp	r3, #0
 80158f0:	d006      	beq.n	8015900 <_fx_file_open+0x64>
#endif /* FX_ENABLE_EXFAT */
    {
        fat_last        = FX_LAST_CLUSTER_1_32;
 80158f2:	4bce      	ldr	r3, [pc, #824]	; (8015c2c <_fx_file_open+0x390>)
 80158f4:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
        not_a_file_attr = FX_DIRECTORY | FX_VOLUME;
 80158f8:	2318      	movs	r3, #24
 80158fa:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
 80158fe:	e006      	b.n	801590e <_fx_file_open+0x72>
    }
    else
    {
        fat_last        = FX_LAST_CLUSTER_1;
 8015900:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8015904:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
        not_a_file_attr = FX_DIRECTORY | FX_VOLUME;
 8015908:	2318      	movs	r3, #24
 801590a:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
    }

#ifndef FX_DISABLE_FAST_OPEN
    /* Determine if a fast open is selected.  */
    if (open_type == FX_OPEN_FOR_READ_FAST)
 801590e:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8015912:	2b02      	cmp	r3, #2
 8015914:	d106      	bne.n	8015924 <_fx_file_open+0x88>
    {

        /* Yes, convert the open type to a standard read.  */
        open_type =  FX_OPEN_FOR_READ;
 8015916:	2300      	movs	r3, #0
 8015918:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140

        /* Set the open fast flag.  */
        fast_open =  FX_TRUE;
 801591c:	2301      	movs	r3, #1
 801591e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8015922:	e002      	b.n	801592a <_fx_file_open+0x8e>
    }
    else
    {

        /* A fast open is not selected, set the flag to false.  */
        fast_open =  FX_FALSE;
 8015924:	2300      	movs	r3, #0
 8015926:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_FILE_OPEN, media_ptr, file_ptr, file_name, open_type, FX_TRACE_FILE_EVENTS, 0, 0)

    /* Protect against other threads accessing the media.  */
    FX_PROTECT
 801592a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 801592e:	681a      	ldr	r2, [r3, #0]
 8015930:	4bbd      	ldr	r3, [pc, #756]	; (8015c28 <_fx_file_open+0x38c>)
 8015932:	429a      	cmp	r2, r3
 8015934:	d002      	beq.n	801593c <_fx_file_open+0xa0>
 8015936:	2311      	movs	r3, #17
 8015938:	f000 bc8c 	b.w	8016254 <_fx_file_open+0x9b8>
 801593c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8015940:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8015944:	f04f 31ff 	mov.w	r1, #4294967295
 8015948:	4618      	mov	r0, r3
 801594a:	f006 ff03 	bl	801c754 <_tx_mutex_get>
 801594e:	4603      	mov	r3, r0
 8015950:	2b00      	cmp	r3, #0
 8015952:	d002      	beq.n	801595a <_fx_file_open+0xbe>
 8015954:	2311      	movs	r3, #17
 8015956:	f000 bc7d 	b.w	8016254 <_fx_file_open+0x9b8>

    /* Setup file name pointer.  */
    file_ptr -> fx_file_dir_entry.fx_dir_entry_name =  file_ptr -> fx_file_name_buffer;
 801595a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801595e:	f103 02d8 	add.w	r2, r3, #216	; 0xd8
 8015962:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8015966:	669a      	str	r2, [r3, #104]	; 0x68
    file_ptr -> fx_file_dir_entry.fx_dir_entry_short_name[0] =  0;
 8015968:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 801596c:	2300      	movs	r3, #0
 801596e:	f882 306c 	strb.w	r3, [r2, #108]	; 0x6c

    /* Search the system for the supplied file name.  */
    status =  _fx_directory_search(media_ptr, file_name, &(file_ptr -> fx_file_dir_entry), FX_NULL, FX_NULL);
 8015972:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8015976:	f103 0268 	add.w	r2, r3, #104	; 0x68
 801597a:	2300      	movs	r3, #0
 801597c:	9300      	str	r3, [sp, #0]
 801597e:	2300      	movs	r3, #0
 8015980:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8015984:	f8d7 014c 	ldr.w	r0, [r7, #332]	; 0x14c
 8015988:	f7fe fc38 	bl	80141fc <_fx_directory_search>
 801598c:	f8c7 0160 	str.w	r0, [r7, #352]	; 0x160

    /* Determine if the search was successful.  */
    if (status != FX_SUCCESS)
 8015990:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8015994:	2b00      	cmp	r3, #0
 8015996:	d00a      	beq.n	80159ae <_fx_file_open+0x112>
    {

        /* Release media protection.  */
        FX_UNPROTECT
 8015998:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 801599c:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 80159a0:	4618      	mov	r0, r3
 80159a2:	f007 f94f 	bl	801cc44 <_tx_mutex_put>

        /* Return the error code.  */
        return(status);
 80159a6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80159aa:	f000 bc53 	b.w	8016254 <_fx_file_open+0x9b8>
    }

    /* Check to make sure the found entry is a file.  */
    if (file_ptr -> fx_file_dir_entry.fx_dir_entry_attributes & not_a_file_attr)
 80159ae:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80159b2:	f893 2084 	ldrb.w	r2, [r3, #132]	; 0x84
 80159b6:	f897 3167 	ldrb.w	r3, [r7, #359]	; 0x167
 80159ba:	4013      	ands	r3, r2
 80159bc:	b2db      	uxtb	r3, r3
 80159be:	2b00      	cmp	r3, #0
 80159c0:	d009      	beq.n	80159d6 <_fx_file_open+0x13a>
    {

        /* Release media protection.  */
        FX_UNPROTECT
 80159c2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80159c6:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 80159ca:	4618      	mov	r0, r3
 80159cc:	f007 f93a 	bl	801cc44 <_tx_mutex_put>

        /* Return the not a file error code.  */
        return(FX_NOT_A_FILE);
 80159d0:	2305      	movs	r3, #5
 80159d2:	f000 bc3f 	b.w	8016254 <_fx_file_open+0x9b8>
            open_count--;
        }
    }
    else
#else
    if (open_type == FX_OPEN_FOR_WRITE)
 80159d6:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80159da:	2b01      	cmp	r3, #1
 80159dc:	d160      	bne.n	8015aa0 <_fx_file_open+0x204>
    {

        /* A open for write request is present, check the file attributes
           and the list of open files for any other open instance of
           this file.  */
        if (media_ptr -> fx_media_driver_write_protect)
 80159de:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80159e2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80159e6:	2b00      	cmp	r3, #0
 80159e8:	d009      	beq.n	80159fe <_fx_file_open+0x162>
        {

            /* Release media protection.  */
            FX_UNPROTECT
 80159ea:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80159ee:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 80159f2:	4618      	mov	r0, r3
 80159f4:	f007 f926 	bl	801cc44 <_tx_mutex_put>

            /* Return write protect error.  */
            return(FX_WRITE_PROTECT);
 80159f8:	2323      	movs	r3, #35	; 0x23
 80159fa:	f000 bc2b 	b.w	8016254 <_fx_file_open+0x9b8>
        }

        if (file_ptr -> fx_file_dir_entry.fx_dir_entry_attributes & (UCHAR)(FX_READ_ONLY))
 80159fe:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8015a02:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8015a06:	f003 0301 	and.w	r3, r3, #1
 8015a0a:	2b00      	cmp	r3, #0
 8015a0c:	d009      	beq.n	8015a22 <_fx_file_open+0x186>
        {

            /* Release media protection.  */
            FX_UNPROTECT
 8015a0e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8015a12:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8015a16:	4618      	mov	r0, r3
 8015a18:	f007 f914 	bl	801cc44 <_tx_mutex_put>

            /* Return the not a file error code.  */
            return(FX_ACCESS_ERROR);
 8015a1c:	2306      	movs	r3, #6
 8015a1e:	f000 bc19 	b.w	8016254 <_fx_file_open+0x9b8>
        }

        /* Also search the opened files to see if this file is currently
           opened.  */
        open_count =  media_ptr -> fx_media_opened_file_count;
 8015a22:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8015a26:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8015a2a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
        search_ptr =  media_ptr -> fx_media_opened_file_list;
 8015a2e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8015a32:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8015a36:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
        while (open_count)
 8015a3a:	e02d      	b.n	8015a98 <_fx_file_open+0x1fc>
                (search_ptr -> fx_file_dir_entry.fx_dir_entry_byte_offset ==
                 file_ptr -> fx_file_dir_entry.fx_dir_entry_byte_offset))
#else
            /* Look at each opened file to see if the same file is already opened
               for writing.  */
            if ((search_ptr -> fx_file_dir_entry.fx_dir_entry_log_sector ==
 8015a3c:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8015a40:	e9d3 012a 	ldrd	r0, r1, [r3, #168]	; 0xa8
                 file_ptr -> fx_file_dir_entry.fx_dir_entry_log_sector) &&
 8015a44:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8015a48:	e9d3 232a 	ldrd	r2, r3, [r3, #168]	; 0xa8
            if ((search_ptr -> fx_file_dir_entry.fx_dir_entry_log_sector ==
 8015a4c:	4299      	cmp	r1, r3
 8015a4e:	bf08      	it	eq
 8015a50:	4290      	cmpeq	r0, r2
 8015a52:	d117      	bne.n	8015a84 <_fx_file_open+0x1e8>
                (search_ptr -> fx_file_dir_entry.fx_dir_entry_byte_offset ==
 8015a54:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8015a58:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
                 file_ptr -> fx_file_dir_entry.fx_dir_entry_byte_offset) &&
 8015a5c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8015a60:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
                 file_ptr -> fx_file_dir_entry.fx_dir_entry_log_sector) &&
 8015a64:	429a      	cmp	r2, r3
 8015a66:	d10d      	bne.n	8015a84 <_fx_file_open+0x1e8>
                (search_ptr -> fx_file_open_mode == FX_OPEN_FOR_WRITE))
 8015a68:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8015a6c:	689b      	ldr	r3, [r3, #8]
                 file_ptr -> fx_file_dir_entry.fx_dir_entry_byte_offset) &&
 8015a6e:	2b01      	cmp	r3, #1
 8015a70:	d108      	bne.n	8015a84 <_fx_file_open+0x1e8>
#endif
            {

                /* Release media protection.  */
                FX_UNPROTECT
 8015a72:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8015a76:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8015a7a:	4618      	mov	r0, r3
 8015a7c:	f007 f8e2 	bl	801cc44 <_tx_mutex_put>

                /* The file is currently open.  */
                return(FX_ACCESS_ERROR);
 8015a80:	2306      	movs	r3, #6
 8015a82:	e3e7      	b.n	8016254 <_fx_file_open+0x9b8>
            }

            /* Adjust the pointer and decrement the search count.  */
            search_ptr =  search_ptr -> fx_file_opened_next;
 8015a84:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8015a88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015a8a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
            open_count--;
 8015a8e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8015a92:	3b01      	subs	r3, #1
 8015a94:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
        while (open_count)
 8015a98:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8015a9c:	2b00      	cmp	r3, #0
 8015a9e:	d1cd      	bne.n	8015a3c <_fx_file_open+0x1a0>
        }
    }

    /* At this point, we are ready to walk list of clusters to setup the
       initial condition of this file as well as to verify its integrity.  */
    cluster =           file_ptr -> fx_file_dir_entry.fx_dir_entry_cluster;
 8015aa0:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8015aa4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8015aa8:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
    bytes_remaining =   file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size;
 8015aac:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8015ab0:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	; 0xa0
 8015ab4:	e9c7 235c 	strd	r2, r3, [r7, #368]	; 0x170
    bytes_per_cluster = ((ULONG)media_ptr -> fx_media_bytes_per_sector) *
 8015ab8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8015abc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
        ((ULONG)media_ptr -> fx_media_sectors_per_cluster);
 8015abe:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8015ac2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    bytes_per_cluster = ((ULONG)media_ptr -> fx_media_bytes_per_sector) *
 8015ac4:	fb02 f303 	mul.w	r3, r2, r3
 8015ac8:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
    file_ptr -> fx_file_current_physical_cluster =  0;
 8015acc:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8015ad0:	2300      	movs	r3, #0
 8015ad2:	6213      	str	r3, [r2, #32]

    /* Check for invalid value.  */
    if (bytes_per_cluster == 0)
 8015ad4:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8015ad8:	2b00      	cmp	r3, #0
 8015ada:	d108      	bne.n	8015aee <_fx_file_open+0x252>
    {

        /* Release media protection.  */
        FX_UNPROTECT
 8015adc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8015ae0:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8015ae4:	4618      	mov	r0, r3
 8015ae6:	f007 f8ad 	bl	801cc44 <_tx_mutex_put>

        /* Invalid media, return error.  */
        return(FX_MEDIA_INVALID);
 8015aea:	2302      	movs	r3, #2
 8015aec:	e3b2      	b.n	8016254 <_fx_file_open+0x9b8>
    }

    last_cluster =      0;
 8015aee:	2300      	movs	r3, #0
 8015af0:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
    cluster_count =     0;
 8015af4:	2300      	movs	r3, #0
 8015af6:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180

#ifndef FX_DISABLE_CONSECUTIVE_DETECT
    leading_consecutive = 1;
 8015afa:	2301      	movs	r3, #1
 8015afc:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
#endif /* FX_DISABLE_CONSECUTIVE_DETECT */
    file_ptr -> fx_file_consecutive_cluster = 1;
 8015b00:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8015b04:	2301      	movs	r3, #1
 8015b06:	6193      	str	r3, [r2, #24]
#ifndef FX_DISABLE_FAST_OPEN

    /* Determine if the file is being open for reading with the fast option.  */
    if (fast_open)
 8015b08:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8015b0c:	2b00      	cmp	r3, #0
 8015b0e:	f000 8103 	beq.w	8015d18 <_fx_file_open+0x47c>
    {

        /* Calculate the bytes available.  */
        bytes_available =  ((bytes_remaining + bytes_per_cluster - 1) / bytes_per_cluster) * bytes_per_cluster;
 8015b12:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8015b16:	2200      	movs	r2, #0
 8015b18:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8015b1c:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8015b20:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 8015b24:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	; 0x118
 8015b28:	4621      	mov	r1, r4
 8015b2a:	eb11 0a02 	adds.w	sl, r1, r2
 8015b2e:	4629      	mov	r1, r5
 8015b30:	eb41 0b03 	adc.w	fp, r1, r3
 8015b34:	f11a 33ff 	adds.w	r3, sl, #4294967295
 8015b38:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8015b3c:	f14b 33ff 	adc.w	r3, fp, #4294967295
 8015b40:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8015b44:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8015b48:	2200      	movs	r2, #0
 8015b4a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8015b4e:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8015b52:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 8015b56:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8015b5a:	f7ea fd41 	bl	80005e0 <__aeabi_uldivmod>
 8015b5e:	4602      	mov	r2, r0
 8015b60:	460b      	mov	r3, r1
 8015b62:	4610      	mov	r0, r2
 8015b64:	4619      	mov	r1, r3
 8015b66:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8015b6a:	2200      	movs	r2, #0
 8015b6c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8015b70:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 8015b74:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 8015b78:	4623      	mov	r3, r4
 8015b7a:	fb03 f201 	mul.w	r2, r3, r1
 8015b7e:	462b      	mov	r3, r5
 8015b80:	fb00 f303 	mul.w	r3, r0, r3
 8015b84:	4413      	add	r3, r2
 8015b86:	4622      	mov	r2, r4
 8015b88:	fba0 8902 	umull	r8, r9, r0, r2
 8015b8c:	444b      	add	r3, r9
 8015b8e:	4699      	mov	r9, r3
 8015b90:	e9c7 895e 	strd	r8, r9, [r7, #376]	; 0x178
 8015b94:	e9c7 895e 	strd	r8, r9, [r7, #376]	; 0x178
 8015b98:	e12f      	b.n	8015dfa <_fx_file_open+0x55e>
            /* Follow the link of FAT entries.  */
            while ((cluster >= FX_FAT_ENTRY_START) && (cluster < media_ptr -> fx_media_fat_reserved))
            {

                /* Increment the number of clusters.  */
                cluster_count++;
 8015b9a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8015b9e:	3301      	adds	r3, #1
 8015ba0:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180

                /* Read the current cluster entry from the FAT.  */
                status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &contents);
 8015ba4:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8015ba8:	461a      	mov	r2, r3
 8015baa:	f8d7 1190 	ldr.w	r1, [r7, #400]	; 0x190
 8015bae:	f8d7 014c 	ldr.w	r0, [r7, #332]	; 0x14c
 8015bb2:	f003 fdd5 	bl	8019760 <_fx_utility_FAT_entry_read>
 8015bb6:	f8c7 0160 	str.w	r0, [r7, #352]	; 0x160

                /* Check the return value.  */
                if (status != FX_SUCCESS)
 8015bba:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8015bbe:	2b00      	cmp	r3, #0
 8015bc0:	d009      	beq.n	8015bd6 <_fx_file_open+0x33a>
                {

                    /* Release media protection.  */
                    FX_UNPROTECT
 8015bc2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8015bc6:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8015bca:	4618      	mov	r0, r3
 8015bcc:	f007 f83a 	bl	801cc44 <_tx_mutex_put>

                    /* Return the error status.  */
                    return(status);
 8015bd0:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8015bd4:	e33e      	b.n	8016254 <_fx_file_open+0x9b8>
                }

                /* Determine if the cluster is invalid (points to itself) or the count exceeds the total number of clusters.  */
                if ((cluster == contents) || (cluster_count > media_ptr -> fx_media_total_clusters))
 8015bd6:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8015bda:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8015bde:	4293      	cmp	r3, r2
 8015be0:	d006      	beq.n	8015bf0 <_fx_file_open+0x354>
 8015be2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8015be6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8015be8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8015bec:	4293      	cmp	r3, r2
 8015bee:	d908      	bls.n	8015c02 <_fx_file_open+0x366>
                {

                    /* Release media protection.  */
                    FX_UNPROTECT
 8015bf0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8015bf4:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8015bf8:	4618      	mov	r0, r3
 8015bfa:	f007 f823 	bl	801cc44 <_tx_mutex_put>

                    /* Return the bad status.  */
                    return(FX_FAT_READ_ERROR);
 8015bfe:	2303      	movs	r3, #3
 8015c00:	e328      	b.n	8016254 <_fx_file_open+0x9b8>
                }

#ifndef FX_DISABLE_CONSECUTIVE_DETECT

                /* Check if present and next clusters are consecutive */
                if (cluster + 1 == contents)
 8015c02:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8015c06:	1c5a      	adds	r2, r3, #1
 8015c08:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8015c0c:	429a      	cmp	r2, r3
 8015c0e:	d10f      	bne.n	8015c30 <_fx_file_open+0x394>
                {
            
                    /* Determine if clusters are consecutive so far.  */
                    if (leading_consecutive)
 8015c10:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8015c14:	2b00      	cmp	r3, #0
 8015c16:	d00e      	beq.n	8015c36 <_fx_file_open+0x39a>
                    {

                        /* Yes, increment the number of leading consecutive clusters.  */
                        file_ptr -> fx_file_consecutive_cluster++;
 8015c18:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8015c1c:	699b      	ldr	r3, [r3, #24]
 8015c1e:	1c5a      	adds	r2, r3, #1
 8015c20:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8015c24:	619a      	str	r2, [r3, #24]
 8015c26:	e006      	b.n	8015c36 <_fx_file_open+0x39a>
 8015c28:	4d454449 	.word	0x4d454449
 8015c2c:	0ffffff8 	.word	0x0ffffff8
                }
                else
                {

                    /* The clusters are no longer consecutive, clear the consecutive flag.  */
                    leading_consecutive = 0;
 8015c30:	2300      	movs	r3, #0
 8015c32:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
                }
#endif /* FX_DISABLE_CONSECUTIVE_DETECT */

                /* Save the last valid cluster.  */
                last_cluster =  cluster;
 8015c36:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8015c3a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184

                /* Setup for the next cluster.  */
                cluster =  contents;
 8015c3e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8015c42:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190

                /* Determine if this is the last written cluster.  We need to remember this
                   for open for writing.  */
                if (bytes_remaining > bytes_per_cluster)
 8015c46:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8015c4a:	2200      	movs	r2, #0
 8015c4c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8015c50:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8015c54:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 8015c58:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	; 0xf8
 8015c5c:	4641      	mov	r1, r8
 8015c5e:	4291      	cmp	r1, r2
 8015c60:	4649      	mov	r1, r9
 8015c62:	eb71 0303 	sbcs.w	r3, r1, r3
 8015c66:	d216      	bcs.n	8015c96 <_fx_file_open+0x3fa>
                {

                    /* Still more written clusters, just decrement the counter.  */
                    bytes_remaining =  bytes_remaining - bytes_per_cluster;
 8015c68:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8015c6c:	2200      	movs	r2, #0
 8015c6e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8015c72:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8015c76:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 8015c7a:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 8015c7e:	4641      	mov	r1, r8
 8015c80:	1a51      	subs	r1, r2, r1
 8015c82:	6039      	str	r1, [r7, #0]
 8015c84:	4649      	mov	r1, r9
 8015c86:	eb63 0301 	sbc.w	r3, r3, r1
 8015c8a:	607b      	str	r3, [r7, #4]
 8015c8c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8015c90:	e9c7 235c 	strd	r2, r3, [r7, #368]	; 0x170
 8015c94:	e040      	b.n	8015d18 <_fx_file_open+0x47c>
                }
                else if (!file_ptr -> fx_file_current_physical_cluster)
 8015c96:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8015c9a:	6a1b      	ldr	r3, [r3, #32]
 8015c9c:	2b00      	cmp	r3, #0
 8015c9e:	d13b      	bne.n	8015d18 <_fx_file_open+0x47c>
                {

                    /* Remember this cluster number.  */
                    file_ptr -> fx_file_current_physical_cluster =  last_cluster;
 8015ca0:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8015ca4:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8015ca8:	6213      	str	r3, [r2, #32]

                    /* Remember the relative cluster.  */
                    file_ptr -> fx_file_current_relative_cluster =  cluster_count - 1;
 8015caa:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8015cae:	1e5a      	subs	r2, r3, #1
 8015cb0:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8015cb4:	635a      	str	r2, [r3, #52]	; 0x34

                    /* If the remaining bytes exactly fits the cluster size, check for
                       a possible adjustment to the next cluster.  */
                    if ((bytes_remaining == bytes_per_cluster) &&
 8015cb6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8015cba:	2200      	movs	r2, #0
 8015cbc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8015cc0:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8015cc4:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 8015cc8:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8015ccc:	4641      	mov	r1, r8
 8015cce:	4648      	mov	r0, r9
 8015cd0:	4283      	cmp	r3, r0
 8015cd2:	bf08      	it	eq
 8015cd4:	428a      	cmpeq	r2, r1
 8015cd6:	d11f      	bne.n	8015d18 <_fx_file_open+0x47c>
 8015cd8:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8015cdc:	2b01      	cmp	r3, #1
 8015cde:	d91b      	bls.n	8015d18 <_fx_file_open+0x47c>
                        (cluster >= FX_FAT_ENTRY_START) && (cluster < media_ptr -> fx_media_fat_reserved))
 8015ce0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8015ce4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8015ce8:	f8d3 24a8 	ldr.w	r2, [r3, #1192]	; 0x4a8
 8015cec:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8015cf0:	4293      	cmp	r3, r2
 8015cf2:	d211      	bcs.n	8015d18 <_fx_file_open+0x47c>
                    {

                        /* We need to position to next allocated cluster.  */
                        file_ptr -> fx_file_current_physical_cluster =  cluster;
 8015cf4:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8015cf8:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8015cfc:	6213      	str	r3, [r2, #32]
                        file_ptr -> fx_file_current_relative_cluster++;
 8015cfe:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8015d02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015d04:	1c5a      	adds	r2, r3, #1
 8015d06:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8015d0a:	635a      	str	r2, [r3, #52]	; 0x34

                        /* Clear the remaining bytes.  */
                        bytes_remaining =  0;
 8015d0c:	f04f 0200 	mov.w	r2, #0
 8015d10:	f04f 0300 	mov.w	r3, #0
 8015d14:	e9c7 235c 	strd	r2, r3, [r7, #368]	; 0x170
            while ((cluster >= FX_FAT_ENTRY_START) && (cluster < media_ptr -> fx_media_fat_reserved))
 8015d18:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8015d1c:	2b01      	cmp	r3, #1
 8015d1e:	d90a      	bls.n	8015d36 <_fx_file_open+0x49a>
 8015d20:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8015d24:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8015d28:	f8d3 24a8 	ldr.w	r2, [r3, #1192]	; 0x4a8
 8015d2c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8015d30:	4293      	cmp	r3, r2
 8015d32:	f4ff af32 	bcc.w	8015b9a <_fx_file_open+0x2fe>
                }
            }

            /* Determine if the number of clusters is large enough to support the
               specified file size.  */
            bytes_available =  ((ULONG64)media_ptr -> fx_media_bytes_per_sector) *
 8015d36:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8015d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015d3c:	2200      	movs	r2, #0
 8015d3e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8015d42:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
                ((ULONG64)media_ptr -> fx_media_sectors_per_cluster) *
 8015d46:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8015d4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015d4c:	2200      	movs	r2, #0
 8015d4e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8015d52:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
            bytes_available =  ((ULONG64)media_ptr -> fx_media_bytes_per_sector) *
 8015d56:	e9d7 8938 	ldrd	r8, r9, [r7, #224]	; 0xe0
 8015d5a:	464b      	mov	r3, r9
 8015d5c:	e9d7 ab36 	ldrd	sl, fp, [r7, #216]	; 0xd8
 8015d60:	4652      	mov	r2, sl
 8015d62:	fb02 f203 	mul.w	r2, r2, r3
 8015d66:	465b      	mov	r3, fp
 8015d68:	4641      	mov	r1, r8
 8015d6a:	fb01 f303 	mul.w	r3, r1, r3
 8015d6e:	4413      	add	r3, r2
 8015d70:	4642      	mov	r2, r8
 8015d72:	4651      	mov	r1, sl
 8015d74:	fba2 4501 	umull	r4, r5, r2, r1
 8015d78:	442b      	add	r3, r5
 8015d7a:	461d      	mov	r5, r3
                ((ULONG64)cluster_count);
 8015d7c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8015d80:	2200      	movs	r2, #0
 8015d82:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8015d86:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
            bytes_available =  ((ULONG64)media_ptr -> fx_media_bytes_per_sector) *
 8015d8a:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8015d8e:	4603      	mov	r3, r0
 8015d90:	fb03 f205 	mul.w	r2, r3, r5
 8015d94:	460b      	mov	r3, r1
 8015d96:	fb04 f303 	mul.w	r3, r4, r3
 8015d9a:	4413      	add	r3, r2
 8015d9c:	4602      	mov	r2, r0
 8015d9e:	fba4 1202 	umull	r1, r2, r4, r2
 8015da2:	f8c7 2124 	str.w	r2, [r7, #292]	; 0x124
 8015da6:	460a      	mov	r2, r1
 8015da8:	f8c7 2120 	str.w	r2, [r7, #288]	; 0x120
 8015dac:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8015db0:	4413      	add	r3, r2
 8015db2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8015db6:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 8015dba:	e9c7 345e 	strd	r3, r4, [r7, #376]	; 0x178
 8015dbe:	e9c7 345e 	strd	r3, r4, [r7, #376]	; 0x178

            /* Check the bytes available in the cluster chain against the directory entry file size.  */
            if ((bytes_available < file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size) ||
 8015dc2:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8015dc6:	e9d3 0128 	ldrd	r0, r1, [r3, #160]	; 0xa0
 8015dca:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 8015dce:	4282      	cmp	r2, r0
 8015dd0:	418b      	sbcs	r3, r1
 8015dd2:	d309      	bcc.n	8015de8 <_fx_file_open+0x54c>
 8015dd4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8015dd8:	2b00      	cmp	r3, #0
 8015dda:	d00e      	beq.n	8015dfa <_fx_file_open+0x55e>
                ((cluster_count) && (contents < fat_last)))
 8015ddc:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8015de0:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8015de4:	4293      	cmp	r3, r2
 8015de6:	d908      	bls.n	8015dfa <_fx_file_open+0x55e>
            {
                /* File is corrupt, release media protection.  */
                FX_UNPROTECT
 8015de8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8015dec:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8015df0:	4618      	mov	r0, r3
 8015df2:	f006 ff27 	bl	801cc44 <_tx_mutex_put>

                /* Return a corrupt file error status.  */
                return(FX_FILE_CORRUPT);
 8015df6:	2308      	movs	r3, #8
 8015df8:	e22c      	b.n	8016254 <_fx_file_open+0x9b8>
#endif /* FX_ENABLE_EXFAT */
    }

    /* The file is okay, populate the file control block and complete the
       file open process.  */
    file_ptr -> fx_file_id =                        FX_FILE_ID;
 8015dfa:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8015dfe:	4baa      	ldr	r3, [pc, #680]	; (80160a8 <_fx_file_open+0x80c>)
 8015e00:	6013      	str	r3, [r2, #0]
    file_ptr -> fx_file_name =                      file_ptr -> fx_file_name_buffer;
 8015e02:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8015e06:	f103 02d8 	add.w	r2, r3, #216	; 0xd8
 8015e0a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8015e0e:	605a      	str	r2, [r3, #4]
    file_ptr -> fx_file_media_ptr =                 media_ptr;
 8015e10:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8015e14:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8015e18:	6593      	str	r3, [r2, #88]	; 0x58
    file_ptr -> fx_file_open_mode =                 open_type;
 8015e1a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8015e1e:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8015e22:	6093      	str	r3, [r2, #8]
    file_ptr -> fx_file_modified =                  FX_FALSE;
 8015e24:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8015e28:	2300      	movs	r3, #0
 8015e2a:	7313      	strb	r3, [r2, #12]
    file_ptr -> fx_file_total_clusters =            cluster_count;
 8015e2c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8015e30:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8015e34:	6113      	str	r3, [r2, #16]
    file_ptr -> fx_file_first_physical_cluster =    file_ptr -> fx_file_dir_entry.fx_dir_entry_cluster;
 8015e36:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8015e3a:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8015e3e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8015e42:	615a      	str	r2, [r3, #20]
    file_ptr -> fx_file_last_physical_cluster =     last_cluster;
 8015e44:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8015e48:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8015e4c:	61d3      	str	r3, [r2, #28]
    file_ptr -> fx_file_current_file_size =         file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size;
 8015e4e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8015e52:	e9d3 0128 	ldrd	r0, r1, [r3, #160]	; 0xa0
 8015e56:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8015e5a:	e9c3 0112 	strd	r0, r1, [r3, #72]	; 0x48
    file_ptr -> fx_file_current_available_size =    bytes_available;
 8015e5e:	f8d7 1148 	ldr.w	r1, [r7, #328]	; 0x148
 8015e62:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 8015e66:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
    file_ptr -> fx_file_disable_burst_cache =       FX_FALSE;
 8015e6a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8015e6e:	2300      	movs	r3, #0
 8015e70:	f8c2 31d8 	str.w	r3, [r2, #472]	; 0x1d8

    /* Set the current settings based on how the file was opened.  */
    if (open_type == FX_OPEN_FOR_READ)
 8015e74:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8015e78:	2b00      	cmp	r3, #0
 8015e7a:	d163      	bne.n	8015f44 <_fx_file_open+0x6a8>
    {

        /* Position the pointers to the beginning of the file.  */
        file_ptr -> fx_file_current_physical_cluster =  file_ptr -> fx_file_first_physical_cluster;
 8015e7c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8015e80:	695a      	ldr	r2, [r3, #20]
 8015e82:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8015e86:	621a      	str	r2, [r3, #32]
        file_ptr -> fx_file_current_relative_cluster =  0;
 8015e88:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8015e8c:	2200      	movs	r2, #0
 8015e8e:	635a      	str	r2, [r3, #52]	; 0x34
        file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 8015e90:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8015e94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015e96:	2200      	movs	r2, #0
 8015e98:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8015e9c:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
            (((ULONG64)(file_ptr -> fx_file_first_physical_cluster - FX_FAT_ENTRY_START)) *
 8015ea0:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8015ea4:	695b      	ldr	r3, [r3, #20]
 8015ea6:	3b02      	subs	r3, #2
 8015ea8:	2200      	movs	r2, #0
 8015eaa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8015eae:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
             ((ULONG)media_ptr -> fx_media_sectors_per_cluster));
 8015eb2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8015eb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015eb8:	2200      	movs	r2, #0
 8015eba:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8015ebe:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
            (((ULONG64)(file_ptr -> fx_file_first_physical_cluster - FX_FAT_ENTRY_START)) *
 8015ec2:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	; 0xc0
 8015ec6:	462b      	mov	r3, r5
 8015ec8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8015ecc:	4642      	mov	r2, r8
 8015ece:	fb02 f203 	mul.w	r2, r2, r3
 8015ed2:	464b      	mov	r3, r9
 8015ed4:	4621      	mov	r1, r4
 8015ed6:	fb01 f303 	mul.w	r3, r1, r3
 8015eda:	4413      	add	r3, r2
 8015edc:	4622      	mov	r2, r4
 8015ede:	4641      	mov	r1, r8
 8015ee0:	fba2 1201 	umull	r1, r2, r2, r1
 8015ee4:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 8015ee8:	460a      	mov	r2, r1
 8015eea:	f8c7 2138 	str.w	r2, [r7, #312]	; 0x138
 8015eee:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8015ef2:	4413      	add	r3, r2
 8015ef4:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
        file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 8015ef8:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 8015efc:	4623      	mov	r3, r4
 8015efe:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 8015f02:	4602      	mov	r2, r0
 8015f04:	189b      	adds	r3, r3, r2
 8015f06:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8015f0a:	460b      	mov	r3, r1
 8015f0c:	462a      	mov	r2, r5
 8015f0e:	eb42 0303 	adc.w	r3, r2, r3
 8015f12:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8015f16:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8015f1a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8015f1e:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
        file_ptr -> fx_file_current_relative_sector =   0;
 8015f22:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8015f26:	2200      	movs	r2, #0
 8015f28:	639a      	str	r2, [r3, #56]	; 0x38
        file_ptr -> fx_file_current_logical_offset =    0;
 8015f2a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8015f2e:	2200      	movs	r2, #0
 8015f30:	631a      	str	r2, [r3, #48]	; 0x30
        file_ptr -> fx_file_current_file_offset =       0;
 8015f32:	f8d7 1148 	ldr.w	r1, [r7, #328]	; 0x148
 8015f36:	f04f 0200 	mov.w	r2, #0
 8015f3a:	f04f 0300 	mov.w	r3, #0
 8015f3e:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
 8015f42:	e140      	b.n	80161c6 <_fx_file_open+0x92a>
    {

        /* Open for writing - position the pointers to the end of the file.  */

        /* Determine if the remaining bytes fit exactly into the cluster size.  */
        if (bytes_remaining == bytes_per_cluster)
 8015f44:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8015f48:	2200      	movs	r2, #0
 8015f4a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8015f4e:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8015f52:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 8015f56:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	; 0xa8
 8015f5a:	4621      	mov	r1, r4
 8015f5c:	4628      	mov	r0, r5
 8015f5e:	4283      	cmp	r3, r0
 8015f60:	bf08      	it	eq
 8015f62:	428a      	cmpeq	r2, r1
 8015f64:	f040 80a2 	bne.w	80160ac <_fx_file_open+0x810>
        {

            /* Position to the end of the cluster.  */
            file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 8015f68:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8015f6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015f6e:	2200      	movs	r2, #0
 8015f70:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8015f74:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
                (((ULONG64)file_ptr -> fx_file_current_physical_cluster - FX_FAT_ENTRY_START) *
 8015f78:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8015f7c:	6a1b      	ldr	r3, [r3, #32]
 8015f7e:	2200      	movs	r2, #0
 8015f80:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8015f84:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8015f88:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8015f8c:	460b      	mov	r3, r1
 8015f8e:	3b02      	subs	r3, #2
 8015f90:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8015f94:	4613      	mov	r3, r2
 8015f96:	f143 33ff 	adc.w	r3, r3, #4294967295
 8015f9a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
                 ((ULONG)media_ptr -> fx_media_sectors_per_cluster)) +
 8015f9e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8015fa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015fa4:	2200      	movs	r2, #0
 8015fa6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8015faa:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
                (((ULONG64)file_ptr -> fx_file_current_physical_cluster - FX_FAT_ENTRY_START) *
 8015fae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8015fb2:	462b      	mov	r3, r5
 8015fb4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8015fb8:	4642      	mov	r2, r8
 8015fba:	fb02 f203 	mul.w	r2, r2, r3
 8015fbe:	464b      	mov	r3, r9
 8015fc0:	4621      	mov	r1, r4
 8015fc2:	fb01 f303 	mul.w	r3, r1, r3
 8015fc6:	4413      	add	r3, r2
 8015fc8:	4622      	mov	r2, r4
 8015fca:	4641      	mov	r1, r8
 8015fcc:	fba2 1201 	umull	r1, r2, r2, r1
 8015fd0:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 8015fd4:	460a      	mov	r2, r1
 8015fd6:	f8c7 2130 	str.w	r2, [r7, #304]	; 0x130
 8015fda:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8015fde:	4413      	add	r3, r2
 8015fe0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
            file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 8015fe4:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	; 0xa0
 8015fe8:	4623      	mov	r3, r4
 8015fea:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	; 0x130
 8015fee:	4602      	mov	r2, r0
 8015ff0:	189b      	adds	r3, r3, r2
 8015ff2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8015ff6:	460b      	mov	r3, r1
 8015ff8:	462a      	mov	r2, r5
 8015ffa:	eb42 0303 	adc.w	r3, r2, r3
 8015ffe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                ((ULONG)(((bytes_remaining - 1) / (ULONG)media_ptr -> fx_media_bytes_per_sector)));
 8016002:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 8016006:	1e51      	subs	r1, r2, #1
 8016008:	67b9      	str	r1, [r7, #120]	; 0x78
 801600a:	f143 33ff 	adc.w	r3, r3, #4294967295
 801600e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8016010:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8016014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016016:	2200      	movs	r2, #0
 8016018:	673b      	str	r3, [r7, #112]	; 0x70
 801601a:	677a      	str	r2, [r7, #116]	; 0x74
 801601c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8016020:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8016024:	f7ea fadc 	bl	80005e0 <__aeabi_uldivmod>
 8016028:	4602      	mov	r2, r0
 801602a:	460b      	mov	r3, r1
 801602c:	2300      	movs	r3, #0
 801602e:	66ba      	str	r2, [r7, #104]	; 0x68
 8016030:	66fb      	str	r3, [r7, #108]	; 0x6c
                 ((ULONG)media_ptr -> fx_media_sectors_per_cluster)) +
 8016032:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8016036:	4623      	mov	r3, r4
 8016038:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 801603c:	4602      	mov	r2, r0
 801603e:	189b      	adds	r3, r3, r2
 8016040:	663b      	str	r3, [r7, #96]	; 0x60
 8016042:	460b      	mov	r3, r1
 8016044:	462a      	mov	r2, r5
 8016046:	eb42 0303 	adc.w	r3, r2, r3
 801604a:	667b      	str	r3, [r7, #100]	; 0x64
            file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 801604c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8016050:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8016054:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
            file_ptr -> fx_file_current_relative_sector =   (ULONG)(((bytes_remaining - 1) / (ULONG)media_ptr -> fx_media_bytes_per_sector));
 8016058:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 801605c:	1e51      	subs	r1, r2, #1
 801605e:	65b9      	str	r1, [r7, #88]	; 0x58
 8016060:	f143 33ff 	adc.w	r3, r3, #4294967295
 8016064:	65fb      	str	r3, [r7, #92]	; 0x5c
 8016066:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 801606a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801606c:	2200      	movs	r2, #0
 801606e:	653b      	str	r3, [r7, #80]	; 0x50
 8016070:	657a      	str	r2, [r7, #84]	; 0x54
 8016072:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8016076:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 801607a:	f7ea fab1 	bl	80005e0 <__aeabi_uldivmod>
 801607e:	4602      	mov	r2, r0
 8016080:	460b      	mov	r3, r1
 8016082:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8016086:	639a      	str	r2, [r3, #56]	; 0x38
            file_ptr -> fx_file_current_file_offset =       file_ptr -> fx_file_current_file_size;
 8016088:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801608c:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8016090:	f8d7 1148 	ldr.w	r1, [r7, #328]	; 0x148
 8016094:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
            file_ptr -> fx_file_current_logical_offset =    media_ptr -> fx_media_bytes_per_sector;
 8016098:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 801609c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801609e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80160a2:	631a      	str	r2, [r3, #48]	; 0x30
 80160a4:	e08f      	b.n	80161c6 <_fx_file_open+0x92a>
 80160a6:	bf00      	nop
 80160a8:	46494c45 	.word	0x46494c45
        }
        else
        {

            /* Position file parameters at end of last cluster allocation.  */
            file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 80160ac:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80160b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80160b2:	2200      	movs	r2, #0
 80160b4:	64bb      	str	r3, [r7, #72]	; 0x48
 80160b6:	64fa      	str	r2, [r7, #76]	; 0x4c
                (((ULONG64)file_ptr -> fx_file_current_physical_cluster - FX_FAT_ENTRY_START) *
 80160b8:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80160bc:	6a1b      	ldr	r3, [r3, #32]
 80160be:	2200      	movs	r2, #0
 80160c0:	643b      	str	r3, [r7, #64]	; 0x40
 80160c2:	647a      	str	r2, [r7, #68]	; 0x44
 80160c4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80160c8:	460b      	mov	r3, r1
 80160ca:	3b02      	subs	r3, #2
 80160cc:	63bb      	str	r3, [r7, #56]	; 0x38
 80160ce:	4613      	mov	r3, r2
 80160d0:	f143 33ff 	adc.w	r3, r3, #4294967295
 80160d4:	63fb      	str	r3, [r7, #60]	; 0x3c
                 ((ULONG)media_ptr -> fx_media_sectors_per_cluster)) +
 80160d6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80160da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80160dc:	2200      	movs	r2, #0
 80160de:	633b      	str	r3, [r7, #48]	; 0x30
 80160e0:	637a      	str	r2, [r7, #52]	; 0x34
                (((ULONG64)file_ptr -> fx_file_current_physical_cluster - FX_FAT_ENTRY_START) *
 80160e2:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 80160e6:	462b      	mov	r3, r5
 80160e8:	e9d7 890c 	ldrd	r8, r9, [r7, #48]	; 0x30
 80160ec:	4642      	mov	r2, r8
 80160ee:	fb02 f203 	mul.w	r2, r2, r3
 80160f2:	464b      	mov	r3, r9
 80160f4:	4621      	mov	r1, r4
 80160f6:	fb01 f303 	mul.w	r3, r1, r3
 80160fa:	4413      	add	r3, r2
 80160fc:	4622      	mov	r2, r4
 80160fe:	4641      	mov	r1, r8
 8016100:	fba2 1201 	umull	r1, r2, r2, r1
 8016104:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 8016108:	460a      	mov	r2, r1
 801610a:	f8c7 2128 	str.w	r2, [r7, #296]	; 0x128
 801610e:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8016112:	4413      	add	r3, r2
 8016114:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 8016118:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 801611c:	4623      	mov	r3, r4
 801611e:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 8016122:	4602      	mov	r2, r0
 8016124:	189b      	adds	r3, r3, r2
 8016126:	62bb      	str	r3, [r7, #40]	; 0x28
 8016128:	460b      	mov	r3, r1
 801612a:	462a      	mov	r2, r5
 801612c:	eb42 0303 	adc.w	r3, r2, r3
 8016130:	62fb      	str	r3, [r7, #44]	; 0x2c
                ((ULONG)((bytes_remaining / (ULONG)media_ptr -> fx_media_bytes_per_sector)));
 8016132:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8016136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016138:	2200      	movs	r2, #0
 801613a:	623b      	str	r3, [r7, #32]
 801613c:	627a      	str	r2, [r7, #36]	; 0x24
 801613e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8016142:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 8016146:	f7ea fa4b 	bl	80005e0 <__aeabi_uldivmod>
 801614a:	4602      	mov	r2, r0
 801614c:	460b      	mov	r3, r1
 801614e:	2300      	movs	r3, #0
 8016150:	61ba      	str	r2, [r7, #24]
 8016152:	61fb      	str	r3, [r7, #28]
                 ((ULONG)media_ptr -> fx_media_sectors_per_cluster)) +
 8016154:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8016158:	4623      	mov	r3, r4
 801615a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 801615e:	4602      	mov	r2, r0
 8016160:	189b      	adds	r3, r3, r2
 8016162:	613b      	str	r3, [r7, #16]
 8016164:	460b      	mov	r3, r1
 8016166:	462a      	mov	r2, r5
 8016168:	eb42 0303 	adc.w	r3, r2, r3
 801616c:	617b      	str	r3, [r7, #20]
            file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 801616e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8016172:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8016176:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
            file_ptr -> fx_file_current_relative_sector =   (ULONG)((bytes_remaining / (ULONG)media_ptr -> fx_media_bytes_per_sector));
 801617a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 801617e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016180:	2200      	movs	r2, #0
 8016182:	60bb      	str	r3, [r7, #8]
 8016184:	60fa      	str	r2, [r7, #12]
 8016186:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801618a:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 801618e:	f7ea fa27 	bl	80005e0 <__aeabi_uldivmod>
 8016192:	4602      	mov	r2, r0
 8016194:	460b      	mov	r3, r1
 8016196:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801619a:	639a      	str	r2, [r3, #56]	; 0x38
            file_ptr -> fx_file_current_file_offset =       file_ptr -> fx_file_current_file_size;
 801619c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80161a0:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 80161a4:	f8d7 1148 	ldr.w	r1, [r7, #328]	; 0x148
 80161a8:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
            file_ptr -> fx_file_current_logical_offset =    (ULONG)bytes_remaining % ((ULONG)media_ptr -> fx_media_bytes_per_sector);
 80161ac:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 80161b0:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80161b4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80161b6:	fbb3 f1f2 	udiv	r1, r3, r2
 80161ba:	fb01 f202 	mul.w	r2, r1, r2
 80161be:	1a9a      	subs	r2, r3, r2
 80161c0:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80161c4:	631a      	str	r2, [r3, #48]	; 0x30
    file_ptr -> fx_file_maximum_size_used = file_ptr -> fx_file_current_file_size;
#endif /* FX_ENABLE_FAULT_TOLERANT */

    /* Place newly opened file on the list of open files for
       this media.  First, check for an empty list.  */
    if (media_ptr -> fx_media_opened_file_list)
 80161c6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80161ca:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80161ce:	2b00      	cmp	r3, #0
 80161d0:	d01f      	beq.n	8016212 <_fx_file_open+0x976>
    {

        /* Pickup tail pointer.  */
        tail_ptr =  (media_ptr -> fx_media_opened_file_list) -> fx_file_opened_previous;
 80161d2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80161d6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80161da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80161dc:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158

        /* Place the new file in the list.  */
        (media_ptr -> fx_media_opened_file_list) -> fx_file_opened_previous =  file_ptr;
 80161e0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80161e4:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80161e8:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80161ec:	661a      	str	r2, [r3, #96]	; 0x60
        tail_ptr -> fx_file_opened_next =  file_ptr;
 80161ee:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80161f2:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80161f6:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Setup this file's opened links.  */
        file_ptr -> fx_file_opened_previous =  tail_ptr;
 80161f8:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80161fc:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 8016200:	661a      	str	r2, [r3, #96]	; 0x60
        file_ptr -> fx_file_opened_next =      media_ptr -> fx_media_opened_file_list;
 8016202:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8016206:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 801620a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801620e:	65da      	str	r2, [r3, #92]	; 0x5c
 8016210:	e00f      	b.n	8016232 <_fx_file_open+0x996>
    }
    else
    {

        /* The opened media list is empty.  Add the media to empty list.  */
        media_ptr -> fx_media_opened_file_list =   file_ptr;
 8016212:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8016216:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 801621a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
        file_ptr ->  fx_file_opened_next =         file_ptr;
 801621e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8016222:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8016226:	65da      	str	r2, [r3, #92]	; 0x5c
        file_ptr ->  fx_file_opened_previous =     file_ptr;
 8016228:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801622c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8016230:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Increment the opened file counter.  */
    media_ptr -> fx_media_opened_file_count++;
 8016232:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8016236:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 801623a:	1c5a      	adds	r2, r3, #1
 801623c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8016240:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

    /* Release media protection.  */
    FX_UNPROTECT
 8016244:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8016248:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 801624c:	4618      	mov	r0, r3
 801624e:	f006 fcf9 	bl	801cc44 <_tx_mutex_put>

    /* Open is complete, return successful status.  */
    return(FX_SUCCESS);
 8016252:	2300      	movs	r3, #0
}
 8016254:	4618      	mov	r0, r3
 8016256:	f507 77cc 	add.w	r7, r7, #408	; 0x198
 801625a:	46bd      	mov	sp, r7
 801625c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08016260 <_fx_file_read>:
/*                                            memcpy usage,               */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fx_file_read(FX_FILE *file_ptr, VOID *buffer_ptr, ULONG request_size, ULONG *actual_size)
{
 8016260:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8016264:	b0aa      	sub	sp, #168	; 0xa8
 8016266:	af04      	add	r7, sp, #16
 8016268:	66f8      	str	r0, [r7, #108]	; 0x6c
 801626a:	66b9      	str	r1, [r7, #104]	; 0x68
 801626c:	667a      	str	r2, [r7, #100]	; 0x64
 801626e:	663b      	str	r3, [r7, #96]	; 0x60
ULONG                  trace_timestamp;
#endif


    /* First, determine if the file is still open.  */
    if (file_ptr -> fx_file_id != FX_FILE_ID)
 8016270:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016272:	681a      	ldr	r2, [r3, #0]
 8016274:	4b9d      	ldr	r3, [pc, #628]	; (80164ec <_fx_file_read+0x28c>)
 8016276:	429a      	cmp	r2, r3
 8016278:	d001      	beq.n	801627e <_fx_file_read+0x1e>
    {

        /* Return the file not open error status.  */
        return(FX_NOT_OPEN);
 801627a:	2307      	movs	r3, #7
 801627c:	e28d      	b.n	801679a <_fx_file_read+0x53a>
    }

#ifndef FX_MEDIA_STATISTICS_DISABLE
    /* Setup pointer to media structure.  */
    media_ptr =  file_ptr -> fx_file_media_ptr;
 801627e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016280:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016282:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* Increment the number of times this service has been called.  */
    media_ptr -> fx_media_file_reads++;
 8016284:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8016286:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 801628a:	1c5a      	adds	r2, r3, #1
 801628c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801628e:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
#endif

    /* Setup pointer to associated media control block.  */
    media_ptr =  file_ptr -> fx_file_media_ptr;
 8016292:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016294:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016296:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_FILE_READ, file_ptr, buffer_ptr, request_size, 0, FX_TRACE_FILE_EVENTS, &trace_event, &trace_timestamp)

    /* Protect against other threads accessing the media.  */
    FX_PROTECT
 8016298:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801629a:	681a      	ldr	r2, [r3, #0]
 801629c:	4b94      	ldr	r3, [pc, #592]	; (80164f0 <_fx_file_read+0x290>)
 801629e:	429a      	cmp	r2, r3
 80162a0:	d001      	beq.n	80162a6 <_fx_file_read+0x46>
 80162a2:	2311      	movs	r3, #17
 80162a4:	e279      	b.n	801679a <_fx_file_read+0x53a>
 80162a6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80162a8:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 80162ac:	f04f 31ff 	mov.w	r1, #4294967295
 80162b0:	4618      	mov	r0, r3
 80162b2:	f006 fa4f 	bl	801c754 <_tx_mutex_get>
 80162b6:	4603      	mov	r3, r0
 80162b8:	2b00      	cmp	r3, #0
 80162ba:	d001      	beq.n	80162c0 <_fx_file_read+0x60>
 80162bc:	2311      	movs	r3, #17
 80162be:	e26c      	b.n	801679a <_fx_file_read+0x53a>

    /* Next, determine if there is any more bytes to read in the file.  */
    if (file_ptr -> fx_file_current_file_offset >=
 80162c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80162c2:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
        file_ptr -> fx_file_current_file_size)
 80162c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80162c8:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
    if (file_ptr -> fx_file_current_file_offset >=
 80162cc:	4290      	cmp	r0, r2
 80162ce:	eb71 0303 	sbcs.w	r3, r1, r3
 80162d2:	d30a      	bcc.n	80162ea <_fx_file_read+0x8a>
    {

        /* Release media protection.  */
        FX_UNPROTECT
 80162d4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80162d6:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 80162da:	4618      	mov	r0, r3
 80162dc:	f006 fcb2 	bl	801cc44 <_tx_mutex_put>

        /* The file is at the end, return the proper status and set the
           actual size to 0.  */
        *actual_size =  0;
 80162e0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80162e2:	2200      	movs	r2, #0
 80162e4:	601a      	str	r2, [r3, #0]
        return(FX_END_OF_FILE);
 80162e6:	2309      	movs	r3, #9
 80162e8:	e257      	b.n	801679a <_fx_file_read+0x53a>
    }

    /* At this point there is something to read.  */

    /* Setup local buffer pointer.  */
    destination_ptr =  (UCHAR *)buffer_ptr;
 80162ea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80162ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

    /* Determine if there are less bytes left in the file than that specified
       by the request.  If so, adjust the requested size.  */
    if ((ULONG64)request_size >
 80162f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80162f2:	2200      	movs	r2, #0
 80162f4:	4698      	mov	r8, r3
 80162f6:	4691      	mov	r9, r2
        (file_ptr -> fx_file_current_file_size - file_ptr -> fx_file_current_file_offset))
 80162f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80162fa:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 80162fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016300:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8016304:	1a84      	subs	r4, r0, r2
 8016306:	eb61 0503 	sbc.w	r5, r1, r3
    if ((ULONG64)request_size >
 801630a:	4544      	cmp	r4, r8
 801630c:	eb75 0309 	sbcs.w	r3, r5, r9
 8016310:	d209      	bcs.n	8016326 <_fx_file_read+0xc6>
    {

        /* Adjust the bytes remaining to what's available.  */
        request_size =  (ULONG)(file_ptr -> fx_file_current_file_size - file_ptr -> fx_file_current_file_offset);
 8016312:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016314:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8016318:	4611      	mov	r1, r2
 801631a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801631c:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8016320:	4613      	mov	r3, r2
 8016322:	1acb      	subs	r3, r1, r3
 8016324:	667b      	str	r3, [r7, #100]	; 0x64
    }

    /* Setup the remaining number of bytes to read.  */
    bytes_remaining =  request_size;
 8016326:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8016328:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    /* Loop to read all of the bytes.  */
    while (bytes_remaining)
 801632c:	e20a      	b.n	8016744 <_fx_file_read+0x4e4>
    {

        /* Determine if a beginning or ending partial read is required.  */
        if ((file_ptr -> fx_file_current_logical_offset) ||
 801632e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016332:	2b00      	cmp	r3, #0
 8016334:	d105      	bne.n	8016342 <_fx_file_read+0xe2>
            (bytes_remaining < media_ptr -> fx_media_bytes_per_sector))
 8016336:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8016338:	6a9a      	ldr	r2, [r3, #40]	; 0x28
        if ((file_ptr -> fx_file_current_logical_offset) ||
 801633a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801633e:	4293      	cmp	r3, r2
 8016340:	d24d      	bcs.n	80163de <_fx_file_read+0x17e>
        {

            /* A partial sector read is required.  */

            /* Read the current logical sector.  */
            status =  _fx_utility_logical_sector_read(media_ptr,
 8016342:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016344:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
                                                      file_ptr -> fx_file_current_logical_sector,
                                                      media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_DATA_SECTOR);
 8016348:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801634a:	689a      	ldr	r2, [r3, #8]
            status =  _fx_utility_logical_sector_read(media_ptr,
 801634c:	2304      	movs	r3, #4
 801634e:	9302      	str	r3, [sp, #8]
 8016350:	2301      	movs	r3, #1
 8016352:	9301      	str	r3, [sp, #4]
 8016354:	9200      	str	r2, [sp, #0]
 8016356:	4602      	mov	r2, r0
 8016358:	460b      	mov	r3, r1
 801635a:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 801635c:	f004 fe0e 	bl	801af7c <_fx_utility_logical_sector_read>
 8016360:	67b8      	str	r0, [r7, #120]	; 0x78

            /* Check for good completion status.  */
            if (status !=  FX_SUCCESS)
 8016362:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8016364:	2b00      	cmp	r3, #0
 8016366:	d007      	beq.n	8016378 <_fx_file_read+0x118>
            {

                /* Release media protection.  */
                FX_UNPROTECT
 8016368:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801636a:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 801636e:	4618      	mov	r0, r3
 8016370:	f006 fc68 	bl	801cc44 <_tx_mutex_put>

                /* Return the error status.  */
                return(status);
 8016374:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8016376:	e210      	b.n	801679a <_fx_file_read+0x53a>
            }

            /* Copy the appropriate number of bytes into the destination buffer.  */
            copy_bytes =  media_ptr -> fx_media_bytes_per_sector -
 8016378:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801637a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
                file_ptr -> fx_file_current_logical_offset;
 801637c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801637e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            copy_bytes =  media_ptr -> fx_media_bytes_per_sector -
 8016380:	1ad3      	subs	r3, r2, r3
 8016382:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

            /* Check to see if only a portion of the read sector needs to be
               copied.  */
            if (copy_bytes > bytes_remaining)
 8016386:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 801638a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801638e:	429a      	cmp	r2, r3
 8016390:	d903      	bls.n	801639a <_fx_file_read+0x13a>
            {

                /* Adjust the number of bytes to copy.  */
                copy_bytes =  bytes_remaining;
 8016392:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8016396:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
            }

            /* Actually perform the memory copy.  */
            _fx_utility_memory_copy(((UCHAR *)media_ptr -> fx_media_memory_buffer) + /* Use case of memcpy is verified. */
 801639a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801639c:	689a      	ldr	r2, [r3, #8]
                                    file_ptr -> fx_file_current_logical_offset,
 801639e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80163a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            _fx_utility_memory_copy(((UCHAR *)media_ptr -> fx_media_memory_buffer) + /* Use case of memcpy is verified. */
 80163a2:	4413      	add	r3, r2
 80163a4:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80163a8:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 80163ac:	4618      	mov	r0, r3
 80163ae:	f005 f9e1 	bl	801b774 <_fx_utility_memory_copy>
                                    destination_ptr, copy_bytes);

            /* Increment the logical sector byte offset.  */
            file_ptr -> fx_file_current_logical_offset =
                file_ptr -> fx_file_current_logical_offset + copy_bytes;
 80163b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80163b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80163b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80163ba:	441a      	add	r2, r3
            file_ptr -> fx_file_current_logical_offset =
 80163bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80163be:	631a      	str	r2, [r3, #48]	; 0x30

            /* Adjust the remaining bytes to read.  */
            bytes_remaining =  bytes_remaining - copy_bytes;
 80163c0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80163c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80163c8:	1ad3      	subs	r3, r2, r3
 80163ca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

            /* Adjust the pointer to the destination buffer.  */
            destination_ptr =  destination_ptr + copy_bytes;
 80163ce:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80163d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80163d6:	4413      	add	r3, r2
 80163d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80163dc:	e108      	b.n	80165f0 <_fx_file_read+0x390>
            /* Attempt to read multiple sectors directly into the destination
               buffer.  */

            /* Calculate the number of whole sectors to read directly into
               the destination buffer.  */
            sectors =  (UINT)(bytes_remaining / media_ptr -> fx_media_bytes_per_sector);
 80163de:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80163e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80163e2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80163e6:	fbb3 f3f2 	udiv	r3, r3, r2
 80163ea:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80


            next_cluster = cluster = file_ptr -> fx_file_current_physical_cluster;
 80163ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80163f0:	6a1b      	ldr	r3, [r3, #32]
 80163f2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80163f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80163fa:	677b      	str	r3, [r7, #116]	; 0x74
            for (i = (media_ptr -> fx_media_sectors_per_cluster -
 80163fc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80163fe:	6d5a      	ldr	r2, [r3, #84]	; 0x54
                      file_ptr -> fx_file_current_relative_sector); i < sectors; i += media_ptr -> fx_media_sectors_per_cluster)
 8016400:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            for (i = (media_ptr -> fx_media_sectors_per_cluster -
 8016404:	1ad3      	subs	r3, r2, r3
 8016406:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801640a:	e033      	b.n	8016474 <_fx_file_read+0x214>
                    cluster++;
                }
                else
                {
#endif /* FX_ENABLE_EXFAT */
                    status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &next_cluster);
 801640c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8016410:	461a      	mov	r2, r3
 8016412:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8016416:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8016418:	f003 f9a2 	bl	8019760 <_fx_utility_FAT_entry_read>
 801641c:	67b8      	str	r0, [r7, #120]	; 0x78

                    /* Determine if an error is present.  */
                    if ((status != FX_SUCCESS) || (next_cluster < FX_FAT_ENTRY_START) ||
 801641e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8016420:	2b00      	cmp	r3, #0
 8016422:	d10a      	bne.n	801643a <_fx_file_read+0x1da>
 8016424:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8016426:	2b01      	cmp	r3, #1
 8016428:	d907      	bls.n	801643a <_fx_file_read+0x1da>
                        (next_cluster > media_ptr -> fx_media_fat_reserved))
 801642a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801642c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8016430:	f8d3 24a8 	ldr.w	r2, [r3, #1192]	; 0x4a8
 8016434:	6f7b      	ldr	r3, [r7, #116]	; 0x74
                    if ((status != FX_SUCCESS) || (next_cluster < FX_FAT_ENTRY_START) ||
 8016436:	429a      	cmp	r2, r3
 8016438:	d20c      	bcs.n	8016454 <_fx_file_read+0x1f4>
                    {

                        /* Release media protection.  */
                        FX_UNPROTECT
 801643a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801643c:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8016440:	4618      	mov	r0, r3
 8016442:	f006 fbff 	bl	801cc44 <_tx_mutex_put>

                        /* Send error message back to caller.  */
                        if (status != FX_SUCCESS)
 8016446:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8016448:	2b00      	cmp	r3, #0
 801644a:	d001      	beq.n	8016450 <_fx_file_read+0x1f0>
                        {
                            return(status);
 801644c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801644e:	e1a4      	b.n	801679a <_fx_file_read+0x53a>
                        }
                        else
                        {
                            return(FX_FILE_CORRUPT);
 8016450:	2308      	movs	r3, #8
 8016452:	e1a2      	b.n	801679a <_fx_file_read+0x53a>
                        }
                    }

                    if (next_cluster != cluster + 1)
 8016454:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8016458:	1c5a      	adds	r2, r3, #1
 801645a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801645c:	429a      	cmp	r2, r3
 801645e:	d110      	bne.n	8016482 <_fx_file_read+0x222>
                    {
                        break;
                    }
                    else
                    {
                        cluster = next_cluster;
 8016460:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8016462:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                      file_ptr -> fx_file_current_relative_sector); i < sectors; i += media_ptr -> fx_media_sectors_per_cluster)
 8016466:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8016468:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801646a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801646e:	4413      	add	r3, r2
 8016470:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8016474:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8016478:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801647c:	429a      	cmp	r2, r3
 801647e:	d3c5      	bcc.n	801640c <_fx_file_read+0x1ac>
 8016480:	e000      	b.n	8016484 <_fx_file_read+0x224>
                        break;
 8016482:	bf00      	nop
#ifdef FX_ENABLE_EXFAT
                }
#endif /* FX_ENABLE_EXFAT */
            }

            if (i < sectors)
 8016484:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8016488:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801648c:	429a      	cmp	r2, r3
 801648e:	d203      	bcs.n	8016498 <_fx_file_read+0x238>
            {
                sectors = i;
 8016490:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8016494:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
            }

            /* Determine if this is a single sector read request.  If so, read the sector so it will
               come from the internal cache.  */
            if (sectors == 1)
 8016498:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801649c:	2b01      	cmp	r3, #1
 801649e:	d129      	bne.n	80164f4 <_fx_file_read+0x294>
            {

                /* Read the current logical sector.  */
                status =  _fx_utility_logical_sector_read(media_ptr,
 80164a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80164a2:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
                                                          file_ptr -> fx_file_current_logical_sector,
                                                          media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_DATA_SECTOR);
 80164a6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80164a8:	689a      	ldr	r2, [r3, #8]
                status =  _fx_utility_logical_sector_read(media_ptr,
 80164aa:	2304      	movs	r3, #4
 80164ac:	9302      	str	r3, [sp, #8]
 80164ae:	2301      	movs	r3, #1
 80164b0:	9301      	str	r3, [sp, #4]
 80164b2:	9200      	str	r2, [sp, #0]
 80164b4:	4602      	mov	r2, r0
 80164b6:	460b      	mov	r3, r1
 80164b8:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 80164ba:	f004 fd5f 	bl	801af7c <_fx_utility_logical_sector_read>
 80164be:	67b8      	str	r0, [r7, #120]	; 0x78

                /* Check for good completion status.  */
                if (status !=  FX_SUCCESS)
 80164c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80164c2:	2b00      	cmp	r3, #0
 80164c4:	d007      	beq.n	80164d6 <_fx_file_read+0x276>
                {

                    /* Release media protection.  */
                    FX_UNPROTECT
 80164c6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80164c8:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 80164cc:	4618      	mov	r0, r3
 80164ce:	f006 fbb9 	bl	801cc44 <_tx_mutex_put>

                    /* Return the error status.  */
                    return(status);
 80164d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80164d4:	e161      	b.n	801679a <_fx_file_read+0x53a>
                }

                /* Actually perform the memory copy.  */
                _fx_utility_memory_copy((UCHAR *)media_ptr -> fx_media_memory_buffer, destination_ptr, media_ptr -> fx_media_bytes_per_sector); /* Use case of memcpy is verified. */
 80164d6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80164d8:	6898      	ldr	r0, [r3, #8]
 80164da:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80164dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80164de:	461a      	mov	r2, r3
 80164e0:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 80164e4:	f005 f946 	bl	801b774 <_fx_utility_memory_copy>
 80164e8:	e02f      	b.n	801654a <_fx_file_read+0x2ea>
 80164ea:	bf00      	nop
 80164ec:	46494c45 	.word	0x46494c45
 80164f0:	4d454449 	.word	0x4d454449

                /* Multiple sector read request.  Read all the sectors at once.  */

                /* Perform the data read directly into the user's buffer of
                   the appropriate number of sectors.  */
                media_ptr -> fx_media_disable_burst_cache = file_ptr -> fx_file_disable_burst_cache;
 80164f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80164f6:	f8d3 21d8 	ldr.w	r2, [r3, #472]	; 0x1d8
 80164fa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80164fc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8016500:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
                status =  _fx_utility_logical_sector_read(media_ptr, file_ptr -> fx_file_current_logical_sector,
 8016504:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016506:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 801650a:	2304      	movs	r3, #4
 801650c:	9302      	str	r3, [sp, #8]
 801650e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8016512:	9301      	str	r3, [sp, #4]
 8016514:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8016518:	9300      	str	r3, [sp, #0]
 801651a:	4602      	mov	r2, r0
 801651c:	460b      	mov	r3, r1
 801651e:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8016520:	f004 fd2c 	bl	801af7c <_fx_utility_logical_sector_read>
 8016524:	67b8      	str	r0, [r7, #120]	; 0x78
                                                          destination_ptr, (ULONG) sectors, FX_DATA_SECTOR);
                media_ptr -> fx_media_disable_burst_cache = FX_FALSE;
 8016526:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8016528:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 801652c:	461a      	mov	r2, r3
 801652e:	2300      	movs	r3, #0
 8016530:	f8c2 34a4 	str.w	r3, [r2, #1188]	; 0x4a4

                /* Check for good completion status.  */
                if (status !=  FX_SUCCESS)
 8016534:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8016536:	2b00      	cmp	r3, #0
 8016538:	d007      	beq.n	801654a <_fx_file_read+0x2ea>
                {

                    /* Release media protection.  */
                    FX_UNPROTECT
 801653a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801653c:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8016540:	4618      	mov	r0, r3
 8016542:	f006 fb7f 	bl	801cc44 <_tx_mutex_put>

                    /* Return the error status.  */
                    return(status);
 8016546:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8016548:	e127      	b.n	801679a <_fx_file_read+0x53a>

            /* Increment the current logical sector.  Subtract one from
               the sector count because we are going to use the logical
               offset to do additional sector/cluster arithmetic below.  */
            file_ptr -> fx_file_current_logical_sector =
                file_ptr -> fx_file_current_logical_sector +
 801654a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801654c:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
                (sectors - 1);
 8016550:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8016554:	3b01      	subs	r3, #1
 8016556:	2200      	movs	r2, #0
 8016558:	65bb      	str	r3, [r7, #88]	; 0x58
 801655a:	65fa      	str	r2, [r7, #92]	; 0x5c
                file_ptr -> fx_file_current_logical_sector +
 801655c:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8016560:	4623      	mov	r3, r4
 8016562:	18c3      	adds	r3, r0, r3
 8016564:	653b      	str	r3, [r7, #80]	; 0x50
 8016566:	462b      	mov	r3, r5
 8016568:	eb41 0303 	adc.w	r3, r1, r3
 801656c:	657b      	str	r3, [r7, #84]	; 0x54
            file_ptr -> fx_file_current_logical_sector =
 801656e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016570:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8016574:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28

            /* Move the relative sector and cluster as well.  */
            file_ptr -> fx_file_current_relative_cluster = file_ptr -> fx_file_current_relative_cluster +
 8016578:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801657a:	6b59      	ldr	r1, [r3, #52]	; 0x34
                (file_ptr -> fx_file_current_relative_sector + (sectors - 1)) /
 801657c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801657e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8016580:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8016584:	4413      	add	r3, r2
 8016586:	1e5a      	subs	r2, r3, #1
                media_ptr -> fx_media_sectors_per_cluster;
 8016588:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801658a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
                (file_ptr -> fx_file_current_relative_sector + (sectors - 1)) /
 801658c:	fbb2 f3f3 	udiv	r3, r2, r3
            file_ptr -> fx_file_current_relative_cluster = file_ptr -> fx_file_current_relative_cluster +
 8016590:	18ca      	adds	r2, r1, r3
 8016592:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016594:	635a      	str	r2, [r3, #52]	; 0x34

            file_ptr -> fx_file_current_relative_sector =
                (file_ptr -> fx_file_current_relative_sector +
 8016596:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016598:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801659a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801659e:	4413      	add	r3, r2
 80165a0:	1e59      	subs	r1, r3, #1
                 (sectors - 1)) % media_ptr -> fx_media_sectors_per_cluster;
 80165a2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80165a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80165a6:	fbb1 f3f2 	udiv	r3, r1, r2
 80165aa:	fb02 f303 	mul.w	r3, r2, r3
 80165ae:	1aca      	subs	r2, r1, r3
            file_ptr -> fx_file_current_relative_sector =
 80165b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80165b2:	639a      	str	r2, [r3, #56]	; 0x38

            /* Increment the logical sector byte offset.  */
            file_ptr -> fx_file_current_logical_offset =
                media_ptr -> fx_media_bytes_per_sector;
 80165b4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80165b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
            file_ptr -> fx_file_current_logical_offset =
 80165b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80165ba:	631a      	str	r2, [r3, #48]	; 0x30

            file_ptr -> fx_file_current_physical_cluster = cluster;
 80165bc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80165be:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80165c2:	6213      	str	r3, [r2, #32]

            /* Adjust the remaining bytes.  */
            bytes_remaining =  bytes_remaining -
                (((ULONG)media_ptr -> fx_media_bytes_per_sector) * sectors);
 80165c4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80165c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80165c8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80165cc:	fb03 f202 	mul.w	r2, r3, r2
            bytes_remaining =  bytes_remaining -
 80165d0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80165d4:	1a9b      	subs	r3, r3, r2
 80165d6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

            /* Adjust the pointer to the destination buffer.  */
            destination_ptr =  destination_ptr +
                (((ULONG)media_ptr -> fx_media_bytes_per_sector) * sectors);
 80165da:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80165dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80165de:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80165e2:	fb03 f202 	mul.w	r2, r3, r2
            destination_ptr =  destination_ptr +
 80165e6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80165ea:	4413      	add	r3, r2
 80165ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        }

        /* At this point, we have either read a partial sector or have successfully
           read one or more whole sectors.  Determine if we are at the end of
           the current logical sector.  */
        if (file_ptr -> fx_file_current_logical_offset >=
 80165f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80165f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
            media_ptr -> fx_media_bytes_per_sector)
 80165f4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80165f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if (file_ptr -> fx_file_current_logical_offset >=
 80165f8:	429a      	cmp	r2, r3
 80165fa:	f0c0 80a3 	bcc.w	8016744 <_fx_file_read+0x4e4>
        {

            /* Determine if we are at the exact physical end of the file at the end of reading.  */
            if ((bytes_remaining == 0) && ((file_ptr -> fx_file_current_file_offset + (ULONG64)request_size) >=
 80165fe:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8016602:	2b00      	cmp	r3, #0
 8016604:	d11a      	bne.n	801663c <_fx_file_read+0x3dc>
 8016606:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016608:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 801660c:	6e79      	ldr	r1, [r7, #100]	; 0x64
 801660e:	2000      	movs	r0, #0
 8016610:	64b9      	str	r1, [r7, #72]	; 0x48
 8016612:	64f8      	str	r0, [r7, #76]	; 0x4c
 8016614:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8016618:	4621      	mov	r1, r4
 801661a:	1851      	adds	r1, r2, r1
 801661c:	6439      	str	r1, [r7, #64]	; 0x40
 801661e:	4629      	mov	r1, r5
 8016620:	414b      	adcs	r3, r1
 8016622:	647b      	str	r3, [r7, #68]	; 0x44
                                           file_ptr -> fx_file_current_available_size))
 8016624:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016626:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
            if ((bytes_remaining == 0) && ((file_ptr -> fx_file_current_file_offset + (ULONG64)request_size) >=
 801662a:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 801662e:	4621      	mov	r1, r4
 8016630:	4291      	cmp	r1, r2
 8016632:	4629      	mov	r1, r5
 8016634:	eb71 0303 	sbcs.w	r3, r1, r3
 8016638:	f080 808a 	bcs.w	8016750 <_fx_file_read+0x4f0>
            /* We need to move to the next logical sector, but first
               determine if the next logical sector is within the same
               cluster.  */

            /* Increment the current relative sector in the cluster.  */
            file_ptr -> fx_file_current_relative_sector++;
 801663c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801663e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016640:	1c5a      	adds	r2, r3, #1
 8016642:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016644:	639a      	str	r2, [r3, #56]	; 0x38

            /* Determine if this is in a new cluster.  */
            if (file_ptr -> fx_file_current_relative_sector >=
 8016646:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016648:	6b9a      	ldr	r2, [r3, #56]	; 0x38
                media_ptr -> fx_media_sectors_per_cluster)
 801664a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801664c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
            if (file_ptr -> fx_file_current_relative_sector >=
 801664e:	429a      	cmp	r2, r3
 8016650:	d368      	bcc.n	8016724 <_fx_file_read+0x4c4>
                {
#endif /* FX_ENABLE_EXFAT */

                    /* Read the FAT entry of the current cluster to find
                       the next cluster.  */
                    status =  _fx_utility_FAT_entry_read(media_ptr,
 8016652:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016654:	6a19      	ldr	r1, [r3, #32]
 8016656:	f107 0374 	add.w	r3, r7, #116	; 0x74
 801665a:	461a      	mov	r2, r3
 801665c:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 801665e:	f003 f87f 	bl	8019760 <_fx_utility_FAT_entry_read>
 8016662:	67b8      	str	r0, [r7, #120]	; 0x78
                                                         file_ptr -> fx_file_current_physical_cluster, &next_cluster);

                    /* Determine if an error is present.  */
                    if ((status != FX_SUCCESS) || (next_cluster < FX_FAT_ENTRY_START) ||
 8016664:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8016666:	2b00      	cmp	r3, #0
 8016668:	d10a      	bne.n	8016680 <_fx_file_read+0x420>
 801666a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801666c:	2b01      	cmp	r3, #1
 801666e:	d907      	bls.n	8016680 <_fx_file_read+0x420>
                        (next_cluster > media_ptr -> fx_media_fat_reserved))
 8016670:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8016672:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8016676:	f8d3 24a8 	ldr.w	r2, [r3, #1192]	; 0x4a8
 801667a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
                    if ((status != FX_SUCCESS) || (next_cluster < FX_FAT_ENTRY_START) ||
 801667c:	429a      	cmp	r2, r3
 801667e:	d20c      	bcs.n	801669a <_fx_file_read+0x43a>
                    {

                        /* Release media protection.  */
                        FX_UNPROTECT
 8016680:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8016682:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8016686:	4618      	mov	r0, r3
 8016688:	f006 fadc 	bl	801cc44 <_tx_mutex_put>

                        /* Send error message back to caller.  */
                        if (status != FX_SUCCESS)
 801668c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801668e:	2b00      	cmp	r3, #0
 8016690:	d001      	beq.n	8016696 <_fx_file_read+0x436>
                        {
                            return(status);
 8016692:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8016694:	e081      	b.n	801679a <_fx_file_read+0x53a>
                        }
                        else
                        {
                            return(FX_FILE_CORRUPT);
 8016696:	2308      	movs	r3, #8
 8016698:	e07f      	b.n	801679a <_fx_file_read+0x53a>
                }
#endif /* FX_ENABLE_EXFAT */

                /* Otherwise, we have a new cluster.  Save it in the file
                   control block and calculate a new logical sector value.  */
                file_ptr -> fx_file_current_physical_cluster =  next_cluster;
 801669a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801669c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801669e:	621a      	str	r2, [r3, #32]
                file_ptr -> fx_file_current_relative_cluster++;
 80166a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80166a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80166a4:	1c5a      	adds	r2, r3, #1
 80166a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80166a8:	635a      	str	r2, [r3, #52]	; 0x34
                file_ptr -> fx_file_current_logical_sector = ((ULONG)media_ptr -> fx_media_data_sector_start) +
 80166aa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80166ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80166ae:	2200      	movs	r2, #0
 80166b0:	63bb      	str	r3, [r7, #56]	; 0x38
 80166b2:	63fa      	str	r2, [r7, #60]	; 0x3c
                    ((((ULONG64)next_cluster) - FX_FAT_ENTRY_START) *
 80166b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80166b6:	2200      	movs	r2, #0
 80166b8:	633b      	str	r3, [r7, #48]	; 0x30
 80166ba:	637a      	str	r2, [r7, #52]	; 0x34
 80166bc:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80166c0:	460b      	mov	r3, r1
 80166c2:	3b02      	subs	r3, #2
 80166c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80166c6:	4613      	mov	r3, r2
 80166c8:	f143 33ff 	adc.w	r3, r3, #4294967295
 80166cc:	62fb      	str	r3, [r7, #44]	; 0x2c
                     ((ULONG)media_ptr -> fx_media_sectors_per_cluster));
 80166ce:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80166d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80166d2:	2200      	movs	r2, #0
 80166d4:	623b      	str	r3, [r7, #32]
 80166d6:	627a      	str	r2, [r7, #36]	; 0x24
                    ((((ULONG64)next_cluster) - FX_FAT_ENTRY_START) *
 80166d8:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 80166dc:	462b      	mov	r3, r5
 80166de:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80166e2:	4642      	mov	r2, r8
 80166e4:	fb02 f203 	mul.w	r2, r2, r3
 80166e8:	464b      	mov	r3, r9
 80166ea:	4621      	mov	r1, r4
 80166ec:	fb01 f303 	mul.w	r3, r1, r3
 80166f0:	4413      	add	r3, r2
 80166f2:	4622      	mov	r2, r4
 80166f4:	4641      	mov	r1, r8
 80166f6:	fba2 ab01 	umull	sl, fp, r2, r1
 80166fa:	445b      	add	r3, fp
 80166fc:	469b      	mov	fp, r3
                file_ptr -> fx_file_current_logical_sector = ((ULONG)media_ptr -> fx_media_data_sector_start) +
 80166fe:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8016702:	460b      	mov	r3, r1
 8016704:	eb13 030a 	adds.w	r3, r3, sl
 8016708:	61bb      	str	r3, [r7, #24]
 801670a:	4613      	mov	r3, r2
 801670c:	eb43 030b 	adc.w	r3, r3, fp
 8016710:	61fb      	str	r3, [r7, #28]
 8016712:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016714:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8016718:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
                file_ptr -> fx_file_current_relative_sector =  0;
 801671c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801671e:	2300      	movs	r3, #0
 8016720:	6393      	str	r3, [r2, #56]	; 0x38
 8016722:	e00c      	b.n	801673e <_fx_file_read+0x4de>
            else
            {

                /* Still within the same cluster so just increment the
                   logical sector.  */
                file_ptr -> fx_file_current_logical_sector++;
 8016724:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016726:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 801672a:	1c51      	adds	r1, r2, #1
 801672c:	6139      	str	r1, [r7, #16]
 801672e:	f143 0300 	adc.w	r3, r3, #0
 8016732:	617b      	str	r3, [r7, #20]
 8016734:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016736:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 801673a:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
            }

            /* In either case, we are now positioned at a new sector so
               clear the logical sector offset.  */
            file_ptr -> fx_file_current_logical_offset =  0;
 801673e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8016740:	2300      	movs	r3, #0
 8016742:	6313      	str	r3, [r2, #48]	; 0x30
    while (bytes_remaining)
 8016744:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8016748:	2b00      	cmp	r3, #0
 801674a:	f47f adf0 	bne.w	801632e <_fx_file_read+0xce>
 801674e:	e000      	b.n	8016752 <_fx_file_read+0x4f2>
                break;
 8016750:	bf00      	nop
        }
    }

    /* Adjust the current file offset accordingly.  */
    file_ptr -> fx_file_current_file_offset =
        file_ptr -> fx_file_current_file_offset + (ULONG64)request_size;
 8016752:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016754:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8016758:	6e79      	ldr	r1, [r7, #100]	; 0x64
 801675a:	2000      	movs	r0, #0
 801675c:	60b9      	str	r1, [r7, #8]
 801675e:	60f8      	str	r0, [r7, #12]
 8016760:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8016764:	4621      	mov	r1, r4
 8016766:	1851      	adds	r1, r2, r1
 8016768:	6039      	str	r1, [r7, #0]
 801676a:	4629      	mov	r1, r5
 801676c:	eb43 0101 	adc.w	r1, r3, r1
 8016770:	6079      	str	r1, [r7, #4]
    file_ptr -> fx_file_current_file_offset =
 8016772:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016774:	e9d7 1200 	ldrd	r1, r2, [r7]
 8016778:	e9c3 1210 	strd	r1, r2, [r3, #64]	; 0x40

    /* Store the number of bytes actually read.  */
    *actual_size =  request_size;
 801677c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801677e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8016780:	601a      	str	r2, [r3, #0]

    /* Update the trace event with the bytes read.  */
    FX_TRACE_EVENT_UPDATE(trace_event, trace_timestamp, FX_TRACE_FILE_READ, 0, 0, 0, request_size)

    /* Update the last accessed date.  */
    file_ptr -> fx_file_dir_entry.fx_dir_entry_last_accessed_date =  _fx_system_date;
 8016782:	4b08      	ldr	r3, [pc, #32]	; (80167a4 <_fx_file_read+0x544>)
 8016784:	681a      	ldr	r2, [r3, #0]
 8016786:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016788:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

    /* Release media protection.  */
    FX_UNPROTECT
 801678c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801678e:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8016792:	4618      	mov	r0, r3
 8016794:	f006 fa56 	bl	801cc44 <_tx_mutex_put>

    /* Return a successful status to the caller.  */
    return(FX_SUCCESS);
 8016798:	2300      	movs	r3, #0
}
 801679a:	4618      	mov	r0, r3
 801679c:	3798      	adds	r7, #152	; 0x98
 801679e:	46bd      	mov	sp, r7
 80167a0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80167a4:	2400504c 	.word	0x2400504c

080167a8 <_fx_file_rename>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fx_file_rename(FX_MEDIA *media_ptr, CHAR *old_file_name, CHAR *new_file_name)
{
 80167a8:	b590      	push	{r4, r7, lr}
 80167aa:	b0e3      	sub	sp, #396	; 0x18c
 80167ac:	af02      	add	r7, sp, #8
 80167ae:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80167b2:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80167b6:	6018      	str	r0, [r3, #0]
 80167b8:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80167bc:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 80167c0:	6019      	str	r1, [r3, #0]
 80167c2:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80167c6:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80167ca:	601a      	str	r2, [r3, #0]


#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of times this service has been called.  */
    media_ptr -> fx_media_file_renames++;
 80167cc:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80167d0:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80167d4:	681b      	ldr	r3, [r3, #0]
 80167d6:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 80167da:	1c5a      	adds	r2, r3, #1
 80167dc:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80167e0:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80167e4:	681b      	ldr	r3, [r3, #0]
 80167e6:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
#endif

    /* Setup pointers to media name buffers.  */
    old_dir_entry.fx_dir_entry_name =     media_ptr -> fx_media_name_buffer + FX_MAX_LONG_NAME_LEN;
 80167ea:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80167ee:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80167f2:	681b      	ldr	r3, [r3, #0]
 80167f4:	f603 039c 	addw	r3, r3, #2204	; 0x89c
 80167f8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80167fc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    new_dir_entry.fx_dir_entry_name =     media_ptr -> fx_media_name_buffer + FX_MAX_LONG_NAME_LEN * 2;
 8016800:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8016804:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8016808:	681b      	ldr	r3, [r3, #0]
 801680a:	f603 039c 	addw	r3, r3, #2204	; 0x89c
 801680e:	f503 7200 	add.w	r2, r3, #512	; 0x200
 8016812:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8016816:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 801681a:	601a      	str	r2, [r3, #0]
    search_directory.fx_dir_entry_name =  media_ptr -> fx_media_name_buffer + FX_MAX_LONG_NAME_LEN * 3;
 801681c:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8016820:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8016824:	681b      	ldr	r3, [r3, #0]
 8016826:	f603 039c 	addw	r3, r3, #2204	; 0x89c
 801682a:	f503 7240 	add.w	r2, r3, #768	; 0x300
 801682e:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8016832:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8016836:	601a      	str	r2, [r3, #0]

    /* Clear the short name strings.  */
    old_dir_entry.fx_dir_entry_short_name[0] =     0;
 8016838:	2300      	movs	r3, #0
 801683a:	f887 30f4 	strb.w	r3, [r7, #244]	; 0xf4
    new_dir_entry.fx_dir_entry_short_name[0] =     0;
 801683e:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8016842:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8016846:	2200      	movs	r2, #0
 8016848:	711a      	strb	r2, [r3, #4]
    search_directory.fx_dir_entry_short_name[0] =  0;
 801684a:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 801684e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8016852:	2200      	movs	r2, #0
 8016854:	711a      	strb	r2, [r3, #4]

    /* Determine if the supplied name is less than the maximum supported name size. The
       maximum name (FX_MAX_LONG_NAME_LEN) is defined in fx_api.h.  */
    i =  0;
 8016856:	2300      	movs	r3, #0
 8016858:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
    work_ptr =  (CHAR *)new_file_name;
 801685c:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8016860:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8016864:	681b      	ldr	r3, [r3, #0]
 8016866:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
    while (*work_ptr)
 801686a:	e020      	b.n	80168ae <_fx_file_rename+0x106>
    {

        /* Determine if the character designates a new path.  */
        if ((*work_ptr == '\\') || (*work_ptr == '/'))
 801686c:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8016870:	781b      	ldrb	r3, [r3, #0]
 8016872:	2b5c      	cmp	r3, #92	; 0x5c
 8016874:	d004      	beq.n	8016880 <_fx_file_rename+0xd8>
 8016876:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 801687a:	781b      	ldrb	r3, [r3, #0]
 801687c:	2b2f      	cmp	r3, #47	; 0x2f
 801687e:	d103      	bne.n	8016888 <_fx_file_rename+0xe0>
        {
            /* Yes, reset the name size.  */
            i =  0;
 8016880:	2300      	movs	r3, #0
 8016882:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8016886:	e00d      	b.n	80168a4 <_fx_file_rename+0xfc>
        }
        /* Check for leading spaces.  */
        else if ((*work_ptr != ' ') || (i != 0))
 8016888:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 801688c:	781b      	ldrb	r3, [r3, #0]
 801688e:	2b20      	cmp	r3, #32
 8016890:	d103      	bne.n	801689a <_fx_file_rename+0xf2>
 8016892:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8016896:	2b00      	cmp	r3, #0
 8016898:	d004      	beq.n	80168a4 <_fx_file_rename+0xfc>
        {

            /* No leading spaces, increment the name size.  */
            i++;
 801689a:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 801689e:	3301      	adds	r3, #1
 80168a0:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
        }

        /* Move to the next character.  */
        work_ptr++;
 80168a4:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 80168a8:	3301      	adds	r3, #1
 80168aa:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
    while (*work_ptr)
 80168ae:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 80168b2:	781b      	ldrb	r3, [r3, #0]
 80168b4:	2b00      	cmp	r3, #0
 80168b6:	d1d9      	bne.n	801686c <_fx_file_rename+0xc4>
    }

    /* Determine if the supplied name is valid.  */
    if ((i == 0) || (i >= FX_MAX_LONG_NAME_LEN))
 80168b8:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 80168bc:	2b00      	cmp	r3, #0
 80168be:	d003      	beq.n	80168c8 <_fx_file_rename+0x120>
 80168c0:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 80168c4:	2bff      	cmp	r3, #255	; 0xff
 80168c6:	d901      	bls.n	80168cc <_fx_file_rename+0x124>
    {

        /* Return an invalid name value.  */
        return(FX_INVALID_NAME);
 80168c8:	230c      	movs	r3, #12
 80168ca:	e26a      	b.n	8016da2 <_fx_file_rename+0x5fa>
    }

    /* Check the media to make sure it is open.  */
    if (media_ptr -> fx_media_id != FX_MEDIA_ID)
 80168cc:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80168d0:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80168d4:	681b      	ldr	r3, [r3, #0]
 80168d6:	681b      	ldr	r3, [r3, #0]
 80168d8:	4a8d      	ldr	r2, [pc, #564]	; (8016b10 <_fx_file_rename+0x368>)
 80168da:	4293      	cmp	r3, r2
 80168dc:	d001      	beq.n	80168e2 <_fx_file_rename+0x13a>
    {

        /* Return the media not opened error.  */
        return(FX_MEDIA_NOT_OPEN);
 80168de:	2311      	movs	r3, #17
 80168e0:	e25f      	b.n	8016da2 <_fx_file_rename+0x5fa>

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_FILE_RENAME, media_ptr, old_file_name, new_file_name, 0, FX_TRACE_FILE_EVENTS, 0, 0)

    /* Protect against other threads accessing the media.  */
    FX_PROTECT
 80168e2:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80168e6:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80168ea:	681b      	ldr	r3, [r3, #0]
 80168ec:	681b      	ldr	r3, [r3, #0]
 80168ee:	4a88      	ldr	r2, [pc, #544]	; (8016b10 <_fx_file_rename+0x368>)
 80168f0:	4293      	cmp	r3, r2
 80168f2:	d001      	beq.n	80168f8 <_fx_file_rename+0x150>
 80168f4:	2311      	movs	r3, #17
 80168f6:	e254      	b.n	8016da2 <_fx_file_rename+0x5fa>
 80168f8:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80168fc:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8016900:	681b      	ldr	r3, [r3, #0]
 8016902:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8016906:	f04f 31ff 	mov.w	r1, #4294967295
 801690a:	4618      	mov	r0, r3
 801690c:	f005 ff22 	bl	801c754 <_tx_mutex_get>
 8016910:	4603      	mov	r3, r0
 8016912:	2b00      	cmp	r3, #0
 8016914:	d001      	beq.n	801691a <_fx_file_rename+0x172>
 8016916:	2311      	movs	r3, #17
 8016918:	e243      	b.n	8016da2 <_fx_file_rename+0x5fa>
    /* Start transaction. */
    _fx_fault_tolerant_transaction_start(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

    /* Check for write protect at the media level (set by driver).  */
    if (media_ptr -> fx_media_driver_write_protect)
 801691a:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 801691e:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8016922:	681b      	ldr	r3, [r3, #0]
 8016924:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8016928:	2b00      	cmp	r3, #0
 801692a:	d00b      	beq.n	8016944 <_fx_file_rename+0x19c>
#ifdef FX_ENABLE_FAULT_TOLERANT
        FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

        /* Release media protection.  */
        FX_UNPROTECT
 801692c:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8016930:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8016934:	681b      	ldr	r3, [r3, #0]
 8016936:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 801693a:	4618      	mov	r0, r3
 801693c:	f006 f982 	bl	801cc44 <_tx_mutex_put>

        /* Return write protect error.  */
        return(FX_WRITE_PROTECT);
 8016940:	2323      	movs	r3, #35	; 0x23
 8016942:	e22e      	b.n	8016da2 <_fx_file_rename+0x5fa>
    }

    /* Search the system for the supplied file name.  */
    status =  _fx_directory_search(media_ptr, old_file_name, &old_dir_entry, &search_directory, FX_NULL);
 8016944:	f107 0310 	add.w	r3, r7, #16
 8016948:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 801694c:	f507 71c0 	add.w	r1, r7, #384	; 0x180
 8016950:	f5a1 71bc 	sub.w	r1, r1, #376	; 0x178
 8016954:	f507 70c0 	add.w	r0, r7, #384	; 0x180
 8016958:	f5a0 70ba 	sub.w	r0, r0, #372	; 0x174
 801695c:	2400      	movs	r4, #0
 801695e:	9400      	str	r4, [sp, #0]
 8016960:	6809      	ldr	r1, [r1, #0]
 8016962:	6800      	ldr	r0, [r0, #0]
 8016964:	f7fd fc4a 	bl	80141fc <_fx_directory_search>
 8016968:	f8c7 0168 	str.w	r0, [r7, #360]	; 0x168

    /* Determine if the search was successful.  */
    if (status != FX_SUCCESS)
 801696c:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8016970:	2b00      	cmp	r3, #0
 8016972:	d00c      	beq.n	801698e <_fx_file_rename+0x1e6>
#ifdef FX_ENABLE_FAULT_TOLERANT
        FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

        /* Release media protection.  */
        FX_UNPROTECT
 8016974:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8016978:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 801697c:	681b      	ldr	r3, [r3, #0]
 801697e:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8016982:	4618      	mov	r0, r3
 8016984:	f006 f95e 	bl	801cc44 <_tx_mutex_put>

        /* Return the error code.  */
        return(status);
 8016988:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 801698c:	e209      	b.n	8016da2 <_fx_file_rename+0x5fa>
        not_a_file_attr = FX_DIRECTORY;
    }
    else
    {
#endif /* FX_ENABLE_EXFAT */
        not_a_file_attr = FX_DIRECTORY | FX_VOLUME;
 801698e:	2318      	movs	r3, #24
 8016990:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
#ifdef FX_ENABLE_EXFAT
    }
#endif /* FX_ENABLE_EXFAT */

    /* Check to make sure the found entry is a file.  */
    if (old_dir_entry.fx_dir_entry_attributes & not_a_file_attr)
 8016994:	f897 210c 	ldrb.w	r2, [r7, #268]	; 0x10c
 8016998:	f897 3167 	ldrb.w	r3, [r7, #359]	; 0x167
 801699c:	4013      	ands	r3, r2
 801699e:	b2db      	uxtb	r3, r3
 80169a0:	2b00      	cmp	r3, #0
 80169a2:	d00b      	beq.n	80169bc <_fx_file_rename+0x214>
#ifdef FX_ENABLE_FAULT_TOLERANT
        FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

        /* Release media protection.  */
        FX_UNPROTECT
 80169a4:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80169a8:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80169ac:	681b      	ldr	r3, [r3, #0]
 80169ae:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 80169b2:	4618      	mov	r0, r3
 80169b4:	f006 f946 	bl	801cc44 <_tx_mutex_put>

        /* Return the not a file error code.  */
        return(FX_NOT_A_FILE);
 80169b8:	2305      	movs	r3, #5
 80169ba:	e1f2      	b.n	8016da2 <_fx_file_rename+0x5fa>
        new_file_name =  (CHAR *)media_ptr -> fx_media_rename_buffer;
    }
#endif

    /* Search the target directory for the same file name.  */
    status = _fx_directory_search(media_ptr, new_file_name, &new_dir_entry, &search_directory, &new_name_ptr);
 80169bc:	f107 0410 	add.w	r4, r7, #16
 80169c0:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80169c4:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80169c8:	f5a3 71be 	sub.w	r1, r3, #380	; 0x17c
 80169cc:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80169d0:	f5a3 70ba 	sub.w	r0, r3, #372	; 0x174
 80169d4:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80169d8:	9300      	str	r3, [sp, #0]
 80169da:	4623      	mov	r3, r4
 80169dc:	6809      	ldr	r1, [r1, #0]
 80169de:	6800      	ldr	r0, [r0, #0]
 80169e0:	f7fd fc0c 	bl	80141fc <_fx_directory_search>
 80169e4:	f8c7 0168 	str.w	r0, [r7, #360]	; 0x168

    /* Determine if the name already exists.  */
    if (status == FX_SUCCESS)
 80169e8:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80169ec:	2b00      	cmp	r3, #0
 80169ee:	d157      	bne.n	8016aa0 <_fx_file_rename+0x2f8>
    {

        /* Determine if the new name simply has an ASCII case change. If so, simply let the processing
           continue.  */
        i =  0;
 80169f0:	2300      	movs	r3, #0
 80169f2:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
        do
        {

            /* Pickup an old name and new name character and convert to upper case if necessary.  */
            alpha =  old_file_name[i];
 80169f6:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80169fa:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 80169fe:	681a      	ldr	r2, [r3, #0]
 8016a00:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8016a04:	4413      	add	r3, r2
 8016a06:	781b      	ldrb	r3, [r3, #0]
 8016a08:	f887 3177 	strb.w	r3, [r7, #375]	; 0x177
            if ((alpha >= 'a') && (alpha <= 'z'))
 8016a0c:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 8016a10:	2b60      	cmp	r3, #96	; 0x60
 8016a12:	d908      	bls.n	8016a26 <_fx_file_rename+0x27e>
 8016a14:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 8016a18:	2b7a      	cmp	r3, #122	; 0x7a
 8016a1a:	d804      	bhi.n	8016a26 <_fx_file_rename+0x27e>
            {

                /* Lower case, convert to upper case!  */
                alpha =  (CHAR)((INT)alpha - 0x20);
 8016a1c:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 8016a20:	3b20      	subs	r3, #32
 8016a22:	f887 3177 	strb.w	r3, [r7, #375]	; 0x177
            }
            beta =   new_file_name[i];
 8016a26:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8016a2a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8016a2e:	681a      	ldr	r2, [r3, #0]
 8016a30:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8016a34:	4413      	add	r3, r2
 8016a36:	781b      	ldrb	r3, [r3, #0]
 8016a38:	f887 3176 	strb.w	r3, [r7, #374]	; 0x176
            if ((beta >= 'a') && (beta <= 'z'))
 8016a3c:	f897 3176 	ldrb.w	r3, [r7, #374]	; 0x176
 8016a40:	2b60      	cmp	r3, #96	; 0x60
 8016a42:	d908      	bls.n	8016a56 <_fx_file_rename+0x2ae>
 8016a44:	f897 3176 	ldrb.w	r3, [r7, #374]	; 0x176
 8016a48:	2b7a      	cmp	r3, #122	; 0x7a
 8016a4a:	d804      	bhi.n	8016a56 <_fx_file_rename+0x2ae>
            {

                /* Lower case, convert to upper case!  */
                beta = (CHAR)((INT)beta - 0x20);
 8016a4c:	f897 3176 	ldrb.w	r3, [r7, #374]	; 0x176
 8016a50:	3b20      	subs	r3, #32
 8016a52:	f887 3176 	strb.w	r3, [r7, #374]	; 0x176
            }

            /* Now compare the characters.  */
            if ((alpha != beta) || (alpha == 0))
 8016a56:	f897 2177 	ldrb.w	r2, [r7, #375]	; 0x177
 8016a5a:	f897 3176 	ldrb.w	r3, [r7, #374]	; 0x176
 8016a5e:	429a      	cmp	r2, r3
 8016a60:	d10c      	bne.n	8016a7c <_fx_file_rename+0x2d4>
 8016a62:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 8016a66:	2b00      	cmp	r3, #0
 8016a68:	d008      	beq.n	8016a7c <_fx_file_rename+0x2d4>
                /* Get out of this loop!  */
                break;
            }

            /* Move to next character.  */
            i++;
 8016a6a:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8016a6e:	3301      	adds	r3, #1
 8016a70:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
        } while (i < (FX_MAXIMUM_PATH-1));
 8016a74:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8016a78:	2bfe      	cmp	r3, #254	; 0xfe
 8016a7a:	d9bc      	bls.n	80169f6 <_fx_file_rename+0x24e>

        /* Now determine if the names match.  */
        if (alpha != beta)
 8016a7c:	f897 2177 	ldrb.w	r2, [r7, #375]	; 0x177
 8016a80:	f897 3176 	ldrb.w	r3, [r7, #374]	; 0x176
 8016a84:	429a      	cmp	r2, r3
 8016a86:	d00b      	beq.n	8016aa0 <_fx_file_rename+0x2f8>
#ifdef FX_ENABLE_FAULT_TOLERANT
            FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

            /* Release media protection.  */
            FX_UNPROTECT
 8016a88:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8016a8c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8016a90:	681b      	ldr	r3, [r3, #0]
 8016a92:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8016a96:	4618      	mov	r0, r3
 8016a98:	f006 f8d4 	bl	801cc44 <_tx_mutex_put>

            /* Return the not a file error code.  */
            return(FX_ALREADY_CREATED);
 8016a9c:	230b      	movs	r3, #11
 8016a9e:	e180      	b.n	8016da2 <_fx_file_rename+0x5fa>
        }
    }

    /* Change the file name and look for extra stuff at the end.  */
    if (_fx_directory_name_extract(new_name_ptr, &new_dir_entry.fx_dir_entry_name[0]))
 8016aa0:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 8016aa4:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8016aa8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8016aac:	681b      	ldr	r3, [r3, #0]
 8016aae:	4619      	mov	r1, r3
 8016ab0:	4610      	mov	r0, r2
 8016ab2:	f7fd fb41 	bl	8014138 <_fx_directory_name_extract>
 8016ab6:	4603      	mov	r3, r0
 8016ab8:	2b00      	cmp	r3, #0
 8016aba:	d00b      	beq.n	8016ad4 <_fx_file_rename+0x32c>
#ifdef FX_ENABLE_FAULT_TOLERANT
        FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

        /* Release media protection.  */
        FX_UNPROTECT
 8016abc:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8016ac0:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8016ac4:	681b      	ldr	r3, [r3, #0]
 8016ac6:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8016aca:	4618      	mov	r0, r3
 8016acc:	f006 f8ba 	bl	801cc44 <_tx_mutex_put>

        /* Invalid name, return error status.  */
        return(FX_INVALID_NAME);
 8016ad0:	230c      	movs	r3, #12
 8016ad2:	e166      	b.n	8016da2 <_fx_file_rename+0x5fa>
    }

    /* Search for a free spot in the target directory.  */
    status = _fx_directory_free_search(media_ptr, &search_directory, &new_dir_entry);
 8016ad4:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8016ad8:	f107 0110 	add.w	r1, r7, #16
 8016adc:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8016ae0:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8016ae4:	6818      	ldr	r0, [r3, #0]
 8016ae6:	f7fc fee7 	bl	80138b8 <_fx_directory_free_search>
 8016aea:	f8c7 0168 	str.w	r0, [r7, #360]	; 0x168

    /* Determine if a free spot was found.  */
    if (status != FX_SUCCESS)
 8016aee:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8016af2:	2b00      	cmp	r3, #0
 8016af4:	d00e      	beq.n	8016b14 <_fx_file_rename+0x36c>
#ifdef FX_ENABLE_FAULT_TOLERANT
        FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

        /* Release media protection.  */
        FX_UNPROTECT
 8016af6:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8016afa:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8016afe:	681b      	ldr	r3, [r3, #0]
 8016b00:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8016b04:	4618      	mov	r0, r3
 8016b06:	f006 f89d 	bl	801cc44 <_tx_mutex_put>

        /* Return the error code.  */
        return(status);
 8016b0a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8016b0e:	e148      	b.n	8016da2 <_fx_file_rename+0x5fa>
 8016b10:	4d454449 	.word	0x4d454449
    }

    /* Extract the new file name.  */
    _fx_directory_name_extract(new_name_ptr, &new_dir_entry.fx_dir_entry_name[0]);
 8016b14:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 8016b18:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8016b1c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8016b20:	681b      	ldr	r3, [r3, #0]
 8016b22:	4619      	mov	r1, r3
 8016b24:	4610      	mov	r0, r2
 8016b26:	f7fd fb07 	bl	8014138 <_fx_directory_name_extract>

    /* Determine if a long name is present.  */
    if (new_dir_entry.fx_dir_entry_long_name_present)
 8016b2a:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8016b2e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8016b32:	695b      	ldr	r3, [r3, #20]
 8016b34:	2b00      	cmp	r3, #0
 8016b36:	d005      	beq.n	8016b44 <_fx_file_rename+0x39c>
    {

        /* Yes, clear the short file name.  */
        new_dir_entry.fx_dir_entry_short_name[0] =  0;
 8016b38:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8016b3c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8016b40:	2200      	movs	r2, #0
 8016b42:	711a      	strb	r2, [r3, #4]
    }

    /* Save the updated directory parameters.  */
    new_dir_entry.fx_dir_entry_attributes =          old_dir_entry.fx_dir_entry_attributes;
 8016b44:	f897 210c 	ldrb.w	r2, [r7, #268]	; 0x10c
 8016b48:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8016b4c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8016b50:	771a      	strb	r2, [r3, #28]
    new_dir_entry.fx_dir_entry_cluster    =          old_dir_entry.fx_dir_entry_cluster;
 8016b52:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8016b56:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8016b5a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8016b5e:	635a      	str	r2, [r3, #52]	; 0x34
    new_dir_entry.fx_dir_entry_file_size  =          old_dir_entry.fx_dir_entry_file_size;
 8016b60:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8016b64:	f507 71c0 	add.w	r1, r7, #384	; 0x180
 8016b68:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
 8016b6c:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

    /* Save the reserved field.  */
    new_dir_entry.fx_dir_entry_reserved =            old_dir_entry.fx_dir_entry_reserved;
 8016b70:	f897 210d 	ldrb.w	r2, [r7, #269]	; 0x10d
 8016b74:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8016b78:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8016b7c:	775a      	strb	r2, [r3, #29]

    /* Set time and date stamps.  */
    new_dir_entry.fx_dir_entry_created_time_ms =     old_dir_entry.fx_dir_entry_created_time_ms;
 8016b7e:	f897 210e 	ldrb.w	r2, [r7, #270]	; 0x10e
 8016b82:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8016b86:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8016b8a:	779a      	strb	r2, [r3, #30]
    new_dir_entry.fx_dir_entry_created_time =        old_dir_entry.fx_dir_entry_created_time;
 8016b8c:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8016b90:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8016b94:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8016b98:	621a      	str	r2, [r3, #32]
    new_dir_entry.fx_dir_entry_created_date =        old_dir_entry.fx_dir_entry_created_date;
 8016b9a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8016b9e:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8016ba2:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8016ba6:	625a      	str	r2, [r3, #36]	; 0x24
    new_dir_entry.fx_dir_entry_last_accessed_date =  old_dir_entry.fx_dir_entry_last_accessed_date;
 8016ba8:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8016bac:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8016bb0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8016bb4:	629a      	str	r2, [r3, #40]	; 0x28
    new_dir_entry.fx_dir_entry_time =                old_dir_entry.fx_dir_entry_time;
 8016bb6:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8016bba:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8016bbe:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8016bc2:	62da      	str	r2, [r3, #44]	; 0x2c
    new_dir_entry.fx_dir_entry_date =                old_dir_entry.fx_dir_entry_date;
 8016bc4:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8016bc8:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8016bcc:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8016bd0:	631a      	str	r2, [r3, #48]	; 0x30
        new_dir_entry.fx_dir_entry_secondary_count =       old_dir_entry.fx_dir_entry_secondary_count;
    }
#endif /* FX_ENABLE_EXFAT */

    /* Is there a leading dot?  */
    if (new_dir_entry.fx_dir_entry_name[0] == '.')
 8016bd2:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8016bd6:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8016bda:	681b      	ldr	r3, [r3, #0]
 8016bdc:	781b      	ldrb	r3, [r3, #0]
 8016bde:	2b2e      	cmp	r3, #46	; 0x2e
 8016be0:	d10c      	bne.n	8016bfc <_fx_file_rename+0x454>
    {

        /* Yes, toggle the hidden attribute bit.  */
        new_dir_entry.fx_dir_entry_attributes |=  FX_HIDDEN;
 8016be2:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8016be6:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8016bea:	7f1b      	ldrb	r3, [r3, #28]
 8016bec:	f043 0302 	orr.w	r3, r3, #2
 8016bf0:	b2da      	uxtb	r2, r3
 8016bf2:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8016bf6:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8016bfa:	771a      	strb	r2, [r3, #28]
    }

#ifndef FX_MEDIA_DISABLE_SEARCH_CACHE

    /* Invalidate the directory cache.  */
    media_ptr -> fx_media_last_found_name[0] =  FX_NULL;
 8016bfc:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8016c00:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8016c04:	681b      	ldr	r3, [r3, #0]
 8016c06:	2200      	movs	r2, #0
 8016c08:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
        status = _fx_directory_exFAT_entry_write(media_ptr, &new_dir_entry, UPDATE_FULL);
    }
    else
    {
#endif /* FX_ENABLE_EXFAT */
        status =  _fx_directory_entry_write(media_ptr, &new_dir_entry);
 8016c0c:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8016c10:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8016c14:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8016c18:	4611      	mov	r1, r2
 8016c1a:	6818      	ldr	r0, [r3, #0]
 8016c1c:	f7fc f810 	bl	8012c40 <_fx_directory_entry_write>
 8016c20:	f8c7 0168 	str.w	r0, [r7, #360]	; 0x168
#ifdef FX_ENABLE_EXFAT
    }
#endif /* FX_ENABLE_EXFAT */

    /* Determine if the write was successful.  */
    if (status != FX_SUCCESS)
 8016c24:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8016c28:	2b00      	cmp	r3, #0
 8016c2a:	d00c      	beq.n	8016c46 <_fx_file_rename+0x49e>
#ifdef FX_ENABLE_FAULT_TOLERANT
        FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

        /* Release media protection.  */
        FX_UNPROTECT
 8016c2c:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8016c30:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8016c34:	681b      	ldr	r3, [r3, #0]
 8016c36:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8016c3a:	4618      	mov	r0, r3
 8016c3c:	f006 f802 	bl	801cc44 <_tx_mutex_put>

        /* Return the error code.  */
        return(status);
 8016c40:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8016c44:	e0ad      	b.n	8016da2 <_fx_file_rename+0x5fa>
    }

#ifndef FX_DONT_UPDATE_OPEN_FILES

    /* Search the opened files to update any currently opened files.  */
    open_count =  media_ptr -> fx_media_opened_file_count;
 8016c46:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8016c4a:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8016c4e:	681b      	ldr	r3, [r3, #0]
 8016c50:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8016c54:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
    search_ptr =  media_ptr -> fx_media_opened_file_list;
 8016c58:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8016c5c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8016c60:	681b      	ldr	r3, [r3, #0]
 8016c62:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8016c66:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
    while (open_count)
 8016c6a:	e077      	b.n	8016d5c <_fx_file_rename+0x5b4>
    {

        /* Look at each opened file to see if it matches the file being renamed.  */
        if ((search_ptr -> fx_file_dir_entry.fx_dir_entry_log_sector ==
 8016c6c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8016c70:	e9d3 012a 	ldrd	r0, r1, [r3, #168]	; 0xa8
             old_dir_entry.fx_dir_entry_log_sector) &&
 8016c74:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
        if ((search_ptr -> fx_file_dir_entry.fx_dir_entry_log_sector ==
 8016c78:	4299      	cmp	r1, r3
 8016c7a:	bf08      	it	eq
 8016c7c:	4290      	cmpeq	r0, r2
 8016c7e:	d163      	bne.n	8016d48 <_fx_file_rename+0x5a0>
            (search_ptr -> fx_file_dir_entry.fx_dir_entry_byte_offset ==
 8016c80:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8016c84:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
             old_dir_entry.fx_dir_entry_byte_offset))
 8016c88:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
             old_dir_entry.fx_dir_entry_log_sector) &&
 8016c8c:	429a      	cmp	r2, r3
 8016c8e:	d15b      	bne.n	8016d48 <_fx_file_rename+0x5a0>
        {

            /* Yes, the file being renamed is already open.  Update the file's
               information so that it is kept current.  */
            search_ptr -> fx_file_dir_entry.fx_dir_entry_cluster =      new_dir_entry.fx_dir_entry_cluster;
 8016c90:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8016c94:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8016c98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8016c9a:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8016c9e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
            search_ptr -> fx_file_dir_entry.fx_dir_entry_file_size =    new_dir_entry.fx_dir_entry_file_size;
 8016ca2:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8016ca6:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8016caa:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8016cae:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8016cb2:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0
            search_ptr -> fx_file_dir_entry.fx_dir_entry_log_sector =   new_dir_entry.fx_dir_entry_log_sector;
 8016cb6:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8016cba:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8016cbe:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8016cc2:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8016cc6:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8
            search_ptr -> fx_file_dir_entry.fx_dir_entry_byte_offset =  new_dir_entry.fx_dir_entry_byte_offset;
 8016cca:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8016cce:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8016cd2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8016cd4:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8016cd8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

            /* Copy the new name into the file's name buffer.  */
            i =  0;
 8016cdc:	2300      	movs	r3, #0
 8016cde:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
            while (i < (FX_MAX_LONG_NAME_LEN - 1))
 8016ce2:	e023      	b.n	8016d2c <_fx_file_rename+0x584>
            {

                /* Copy byte of the new name.  */
                search_ptr -> fx_file_dir_entry.fx_dir_entry_name[i] =  new_dir_entry.fx_dir_entry_name[i];
 8016ce4:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8016ce8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8016cec:	681a      	ldr	r2, [r3, #0]
 8016cee:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8016cf2:	441a      	add	r2, r3
 8016cf4:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8016cf8:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8016cfa:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8016cfe:	440b      	add	r3, r1
 8016d00:	7812      	ldrb	r2, [r2, #0]
 8016d02:	701a      	strb	r2, [r3, #0]

                /* Move to the next character.  */
                i++;
 8016d04:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8016d08:	3301      	adds	r3, #1
 8016d0a:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c

                /* Determine if we are at the end of the name.  */
                if (new_dir_entry.fx_dir_entry_name[i] == FX_NULL)
 8016d0e:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8016d12:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8016d16:	681a      	ldr	r2, [r3, #0]
 8016d18:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8016d1c:	4413      	add	r3, r2
 8016d1e:	781b      	ldrb	r3, [r3, #0]
 8016d20:	2b00      	cmp	r3, #0
 8016d22:	d103      	bne.n	8016d2c <_fx_file_rename+0x584>
                {
                
                    /* Determine if we are not at the maximum name size.  */
                    if (i < (FX_MAX_LONG_NAME_LEN - 1))
 8016d24:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8016d28:	2bfe      	cmp	r3, #254	; 0xfe
 8016d2a:	d904      	bls.n	8016d36 <_fx_file_rename+0x58e>
            while (i < (FX_MAX_LONG_NAME_LEN - 1))
 8016d2c:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8016d30:	2bfe      	cmp	r3, #254	; 0xfe
 8016d32:	d9d7      	bls.n	8016ce4 <_fx_file_rename+0x53c>
 8016d34:	e000      	b.n	8016d38 <_fx_file_rename+0x590>
                    {
                    
                        /* Get out of the loop.   */
                        break;
 8016d36:	bf00      	nop
                    }
                }
            }

            /* Set the NULL termination in the copy of the new name.  */
            search_ptr -> fx_file_dir_entry.fx_dir_entry_name[i] =  FX_NULL;
 8016d38:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8016d3c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8016d3e:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8016d42:	4413      	add	r3, r2
 8016d44:	2200      	movs	r2, #0
 8016d46:	701a      	strb	r2, [r3, #0]
        }

        /* Adjust the pointer and decrement the search count.  */
        search_ptr =  search_ptr -> fx_file_opened_next;
 8016d48:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8016d4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016d4e:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
        open_count--;
 8016d52:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8016d56:	3b01      	subs	r3, #1
 8016d58:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
    while (open_count)
 8016d5c:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8016d60:	2b00      	cmp	r3, #0
 8016d62:	d183      	bne.n	8016c6c <_fx_file_rename+0x4c4>
    }
#endif

    /* Now we are ready to remove the old directory entry.  */
    old_dir_entry.fx_dir_entry_name[0] =        (CHAR)FX_DIR_ENTRY_FREE;
 8016d64:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8016d68:	22e5      	movs	r2, #229	; 0xe5
 8016d6a:	701a      	strb	r2, [r3, #0]
    old_dir_entry.fx_dir_entry_short_name[0] =  (CHAR)FX_DIR_ENTRY_FREE;
 8016d6c:	23e5      	movs	r3, #229	; 0xe5
 8016d6e:	f887 30f4 	strb.w	r3, [r7, #244]	; 0xf4
        status = _fx_directory_exFAT_entry_write(media_ptr, &old_dir_entry, UPDATE_DELETE);
    }
    else
    {
#endif /* FX_ENABLE_EXFAT */
        status =  _fx_directory_entry_write(media_ptr, &old_dir_entry);
 8016d72:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8016d76:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8016d7a:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8016d7e:	4611      	mov	r1, r2
 8016d80:	6818      	ldr	r0, [r3, #0]
 8016d82:	f7fb ff5d 	bl	8012c40 <_fx_directory_entry_write>
 8016d86:	f8c7 0168 	str.w	r0, [r7, #360]	; 0x168
    /* End transaction. */
    status = _fx_fault_tolerant_transaction_end(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

    /* Release media protection.  */
    FX_UNPROTECT
 8016d8a:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8016d8e:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8016d92:	681b      	ldr	r3, [r3, #0]
 8016d94:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8016d98:	4618      	mov	r0, r3
 8016d9a:	f005 ff53 	bl	801cc44 <_tx_mutex_put>

    /* File rename is complete, return status.  */
    return(status);
 8016d9e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
}
 8016da2:	4618      	mov	r0, r3
 8016da4:	f507 77c2 	add.w	r7, r7, #388	; 0x184
 8016da8:	46bd      	mov	sp, r7
 8016daa:	bd90      	pop	{r4, r7, pc}

08016dac <_fx_file_seek>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
#ifndef FX_DISABLE_ONE_LINE_FUNCTION
UINT  _fx_file_seek(FX_FILE *file_ptr, ULONG byte_offset)
{
 8016dac:	b580      	push	{r7, lr}
 8016dae:	b082      	sub	sp, #8
 8016db0:	af00      	add	r7, sp, #0
 8016db2:	6078      	str	r0, [r7, #4]
 8016db4:	6039      	str	r1, [r7, #0]

    return(_fx_file_extended_seek(file_ptr, (ULONG64) byte_offset));
 8016db6:	6839      	ldr	r1, [r7, #0]
 8016db8:	2000      	movs	r0, #0
 8016dba:	460a      	mov	r2, r1
 8016dbc:	4603      	mov	r3, r0
 8016dbe:	6878      	ldr	r0, [r7, #4]
 8016dc0:	f7fe fa9e 	bl	8015300 <_fx_file_extended_seek>
 8016dc4:	4603      	mov	r3, r0
}
 8016dc6:	4618      	mov	r0, r3
 8016dc8:	3708      	adds	r7, #8
 8016dca:	46bd      	mov	sp, r7
 8016dcc:	bd80      	pop	{r7, pc}
	...

08016dd0 <_fx_file_write>:
/*                                            memcpy usage,               */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fx_file_write(FX_FILE *file_ptr, VOID *buffer_ptr, ULONG size)
{
 8016dd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8016dd4:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8016dd8:	af04      	add	r7, sp, #16
 8016dda:	f8c7 019c 	str.w	r0, [r7, #412]	; 0x19c
 8016dde:	f8c7 1198 	str.w	r1, [r7, #408]	; 0x198
 8016de2:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
UCHAR                  dont_use_fat_old = FX_FALSE; /* Used by exFAT logic to indicate whether or not the FAT table should be used. */
#endif /* FX_ENABLE_FAULT_TOLERANT */


    /* First, determine if the file is still open.  */
    if (file_ptr -> fx_file_id != FX_FILE_ID)
 8016de6:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8016dea:	681a      	ldr	r2, [r3, #0]
 8016dec:	4bd9      	ldr	r3, [pc, #868]	; (8017154 <_fx_file_write+0x384>)
 8016dee:	429a      	cmp	r2, r3
 8016df0:	d002      	beq.n	8016df8 <_fx_file_write+0x28>
    {

        /* Return the file not open error status.  */
        return(FX_NOT_OPEN);
 8016df2:	2307      	movs	r3, #7
 8016df4:	f000 bf26 	b.w	8017c44 <_fx_file_write+0xe74>
    }

    /* Setup pointer to media structure.  */
    media_ptr =  file_ptr -> fx_file_media_ptr;
 8016df8:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8016dfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016dfe:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac

#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of times this service has been called.  */
    media_ptr -> fx_media_file_writes++;
 8016e02:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8016e06:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8016e0a:	1c5a      	adds	r2, r3, #1
 8016e0c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8016e10:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154

#ifdef FX_ENABLE_EXFAT
    if ((media_ptr -> fx_media_FAT_type != FX_exFAT) &&
        (file_ptr -> fx_file_current_file_offset + size > 0xFFFFFFFFULL))
#else
    if (file_ptr -> fx_file_current_file_offset + size > 0xFFFFFFFFULL)
 8016e14:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8016e18:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8016e1c:	f8d7 1194 	ldr.w	r1, [r7, #404]	; 0x194
 8016e20:	2000      	movs	r0, #0
 8016e22:	460c      	mov	r4, r1
 8016e24:	4605      	mov	r5, r0
 8016e26:	eb12 0804 	adds.w	r8, r2, r4
 8016e2a:	eb43 0905 	adc.w	r9, r3, r5
 8016e2e:	f1b9 0f01 	cmp.w	r9, #1
 8016e32:	d302      	bcc.n	8016e3a <_fx_file_write+0x6a>
#endif /* FX_ENABLE_EXFAT */
    {

        /* Return the no more space error, since the new file size would be larger than
           the 32-bit field to represent it in the file's directory entry.  */
        return(FX_NO_MORE_SPACE);
 8016e34:	230a      	movs	r3, #10
 8016e36:	f000 bf05 	b.w	8017c44 <_fx_file_write+0xe74>

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_FILE_WRITE, file_ptr, buffer_ptr, size, 0, FX_TRACE_FILE_EVENTS, &trace_event, &trace_timestamp)

    /* Protect against other threads accessing the media.  */
    FX_PROTECT
 8016e3a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8016e3e:	681a      	ldr	r2, [r3, #0]
 8016e40:	4bc5      	ldr	r3, [pc, #788]	; (8017158 <_fx_file_write+0x388>)
 8016e42:	429a      	cmp	r2, r3
 8016e44:	d002      	beq.n	8016e4c <_fx_file_write+0x7c>
 8016e46:	2311      	movs	r3, #17
 8016e48:	f000 befc 	b.w	8017c44 <_fx_file_write+0xe74>
 8016e4c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8016e50:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8016e54:	f04f 31ff 	mov.w	r1, #4294967295
 8016e58:	4618      	mov	r0, r3
 8016e5a:	f005 fc7b 	bl	801c754 <_tx_mutex_get>
 8016e5e:	4603      	mov	r3, r0
 8016e60:	2b00      	cmp	r3, #0
 8016e62:	d002      	beq.n	8016e6a <_fx_file_write+0x9a>
 8016e64:	2311      	movs	r3, #17
 8016e66:	f000 beed 	b.w	8017c44 <_fx_file_write+0xe74>

    /* Check for write protect at the media level (set by driver).  */
    if (media_ptr -> fx_media_driver_write_protect)
 8016e6a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8016e6e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8016e72:	2b00      	cmp	r3, #0
 8016e74:	d009      	beq.n	8016e8a <_fx_file_write+0xba>
    {

        /* Release media protection.  */
        FX_UNPROTECT
 8016e76:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8016e7a:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8016e7e:	4618      	mov	r0, r3
 8016e80:	f005 fee0 	bl	801cc44 <_tx_mutex_put>

        /* Return write protect error.  */
        return(FX_WRITE_PROTECT);
 8016e84:	2323      	movs	r3, #35	; 0x23
 8016e86:	f000 bedd 	b.w	8017c44 <_fx_file_write+0xe74>
    }

    /* Make sure this file is open for writing.  */
    if (file_ptr -> fx_file_open_mode != FX_OPEN_FOR_WRITE)
 8016e8a:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8016e8e:	689b      	ldr	r3, [r3, #8]
 8016e90:	2b01      	cmp	r3, #1
 8016e92:	d009      	beq.n	8016ea8 <_fx_file_write+0xd8>
    {

        /* Release media protection.  */
        FX_UNPROTECT
 8016e94:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8016e98:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8016e9c:	4618      	mov	r0, r3
 8016e9e:	f005 fed1 	bl	801cc44 <_tx_mutex_put>

        /* Return the access error exception - a write was attempted from
           a file opened for reading!  */
        return(FX_ACCESS_ERROR);
 8016ea2:	2306      	movs	r3, #6
 8016ea4:	f000 bece 	b.w	8017c44 <_fx_file_write+0xe74>
    /* Start transaction. */
    _fx_fault_tolerant_transaction_start(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

    /* Calculate the number of bytes per cluster.  */
    bytes_per_cluster =  ((ULONG)media_ptr -> fx_media_bytes_per_sector) *
 8016ea8:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8016eac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
        ((ULONG)media_ptr -> fx_media_sectors_per_cluster);
 8016eae:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8016eb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    bytes_per_cluster =  ((ULONG)media_ptr -> fx_media_bytes_per_sector) *
 8016eb4:	fb02 f303 	mul.w	r3, r2, r3
 8016eb8:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8

    /* Check for invalid value.  */
    if (bytes_per_cluster == 0)
 8016ebc:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8016ec0:	2b00      	cmp	r3, #0
 8016ec2:	d109      	bne.n	8016ed8 <_fx_file_write+0x108>
#ifdef FX_ENABLE_FAULT_TOLERANT
        FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

        /* Release media protection.  */
        FX_UNPROTECT
 8016ec4:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8016ec8:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8016ecc:	4618      	mov	r0, r3
 8016ece:	f005 feb9 	bl	801cc44 <_tx_mutex_put>

        /* Invalid media, return error.  */
        return(FX_MEDIA_INVALID);
 8016ed2:	2302      	movs	r3, #2
 8016ed4:	f000 beb6 	b.w	8017c44 <_fx_file_write+0xe74>
    }

    /* Initialized first new cluster. */
    first_new_cluster =  0;
 8016ed8:	2300      	movs	r3, #0
 8016eda:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
    }
#endif /* FX_ENABLE_FAULT_TOLERANT */

    /* Next, determine if there is enough room to write the specified number of
       bytes to the clusters already allocated to this file.  */
    if (((file_ptr -> fx_file_current_available_size - file_ptr -> fx_file_current_file_offset) < size)
 8016ede:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8016ee2:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8016ee6:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8016eea:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8016eee:	ebb0 0a02 	subs.w	sl, r0, r2
 8016ef2:	eb61 0b03 	sbc.w	fp, r1, r3
 8016ef6:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8016efa:	2200      	movs	r2, #0
 8016efc:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8016f00:	f8c7 215c 	str.w	r2, [r7, #348]	; 0x15c
 8016f04:	e9d7 1256 	ldrd	r1, r2, [r7, #344]	; 0x158
 8016f08:	460b      	mov	r3, r1
 8016f0a:	459a      	cmp	sl, r3
 8016f0c:	4613      	mov	r3, r2
 8016f0e:	eb7b 0303 	sbcs.w	r3, fp, r3
 8016f12:	f080 82a9 	bcs.w	8017468 <_fx_file_write+0x698>

        if (file_ptr -> fx_file_current_available_size - file_ptr -> fx_file_current_file_offset < size)
        {
#endif /* FX_ENABLE_FAULT_TOLERANT */
            /* Calculate clusters that are needed for data append except ones overwritten. */
            clusters =  (UINT)((size + (bytes_per_cluster - 1) -
 8016f16:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 8016f1a:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8016f1e:	4413      	add	r3, r2
 8016f20:	3b01      	subs	r3, #1
 8016f22:	2200      	movs	r2, #0
 8016f24:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8016f28:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
                                (file_ptr -> fx_file_current_available_size - file_ptr -> fx_file_current_file_offset)) /
 8016f2c:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8016f30:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8016f34:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8016f38:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
            clusters =  (UINT)((size + (bytes_per_cluster - 1) -
 8016f3c:	1a84      	subs	r4, r0, r2
 8016f3e:	f8c7 4148 	str.w	r4, [r7, #328]	; 0x148
 8016f42:	eb61 0303 	sbc.w	r3, r1, r3
 8016f46:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8016f4a:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	; 0x150
 8016f4e:	4623      	mov	r3, r4
 8016f50:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8016f54:	4602      	mov	r2, r0
 8016f56:	189b      	adds	r3, r3, r2
 8016f58:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8016f5c:	460b      	mov	r3, r1
 8016f5e:	462a      	mov	r2, r5
 8016f60:	eb42 0303 	adc.w	r3, r2, r3
 8016f64:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
                                (file_ptr -> fx_file_current_available_size - file_ptr -> fx_file_current_file_offset)) /
 8016f68:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8016f6c:	2200      	movs	r2, #0
 8016f6e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8016f72:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 8016f76:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8016f7a:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8016f7e:	f7e9 fb2f 	bl	80005e0 <__aeabi_uldivmod>
 8016f82:	4602      	mov	r2, r0
 8016f84:	460b      	mov	r3, r1
            clusters =  (UINT)((size + (bytes_per_cluster - 1) -
 8016f86:	4613      	mov	r3, r2
 8016f88:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0

        /* Determine if we have enough space left.  */
#ifdef FX_ENABLE_FAULT_TOLERANT
        if (clusters + replace_clusters > media_ptr -> fx_media_available_clusters)
#else
        if (clusters > media_ptr -> fx_media_available_clusters)
 8016f8c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8016f90:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8016f92:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8016f96:	4293      	cmp	r3, r2
 8016f98:	d909      	bls.n	8016fae <_fx_file_write+0x1de>
#ifdef FX_ENABLE_FAULT_TOLERANT
            FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

            /* Release media protection.  */
            FX_UNPROTECT
 8016f9a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8016f9e:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8016fa2:	4618      	mov	r0, r3
 8016fa4:	f005 fe4e 	bl	801cc44 <_tx_mutex_put>

            /* Out of disk space.  */
            return(FX_NO_MORE_SPACE);
 8016fa8:	230a      	movs	r3, #10
 8016faa:	f000 be4b 	b.w	8017c44 <_fx_file_write+0xe74>
        }

        /* Update the file total cluster count.  */
        file_ptr -> fx_file_total_clusters =  file_ptr -> fx_file_total_clusters + clusters;
 8016fae:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8016fb2:	691a      	ldr	r2, [r3, #16]
 8016fb4:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8016fb8:	441a      	add	r2, r3
 8016fba:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8016fbe:	611a      	str	r2, [r3, #16]
        /* Check for wrap-around when updating the available size.  */
#ifdef FX_ENABLE_EXFAT
        if ((media_ptr -> fx_media_FAT_type != FX_exFAT) &&
            (file_ptr -> fx_file_current_available_size + (ULONG64)bytes_per_cluster * (ULONG64)clusters > 0xFFFFFFFFULL))
#else
        if (file_ptr -> fx_file_current_available_size + (ULONG64)bytes_per_cluster * (ULONG64)clusters > 0xFFFFFFFFULL)
 8016fc0:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8016fc4:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8016fc8:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8016fcc:	2200      	movs	r2, #0
 8016fce:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8016fd2:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 8016fd6:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8016fda:	2200      	movs	r2, #0
 8016fdc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8016fe0:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 8016fe4:	e9d7 894c 	ldrd	r8, r9, [r7, #304]	; 0x130
 8016fe8:	464b      	mov	r3, r9
 8016fea:	e9d7 ab4a 	ldrd	sl, fp, [r7, #296]	; 0x128
 8016fee:	4652      	mov	r2, sl
 8016ff0:	fb02 f203 	mul.w	r2, r2, r3
 8016ff4:	465b      	mov	r3, fp
 8016ff6:	4644      	mov	r4, r8
 8016ff8:	fb04 f303 	mul.w	r3, r4, r3
 8016ffc:	4413      	add	r3, r2
 8016ffe:	4642      	mov	r2, r8
 8017000:	4654      	mov	r4, sl
 8017002:	fba2 4204 	umull	r4, r2, r2, r4
 8017006:	f8c7 218c 	str.w	r2, [r7, #396]	; 0x18c
 801700a:	4622      	mov	r2, r4
 801700c:	f8c7 2188 	str.w	r2, [r7, #392]	; 0x188
 8017010:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8017014:	4413      	add	r3, r2
 8017016:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 801701a:	e9d7 4562 	ldrd	r4, r5, [r7, #392]	; 0x188
 801701e:	4623      	mov	r3, r4
 8017020:	18c3      	adds	r3, r0, r3
 8017022:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8017026:	462b      	mov	r3, r5
 8017028:	eb41 0303 	adc.w	r3, r1, r3
 801702c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8017030:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8017034:	2b01      	cmp	r3, #1
 8017036:	d308      	bcc.n	801704a <_fx_file_write+0x27a>
#endif /* FX_ENABLE_EXFAT */
        {

            /* 32-bit wrap around condition is present.  Just set the available file size to all ones, which is
               the maximum file size.  */
            file_ptr -> fx_file_current_available_size =  0xFFFFFFFFULL;
 8017038:	f8d7 119c 	ldr.w	r1, [r7, #412]	; 0x19c
 801703c:	f04f 32ff 	mov.w	r2, #4294967295
 8017040:	f04f 0300 	mov.w	r3, #0
 8017044:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8017048:	e03d      	b.n	80170c6 <_fx_file_write+0x2f6>
        else
        {

            /* Normal condition, update the available size.  */
            file_ptr -> fx_file_current_available_size =
                file_ptr -> fx_file_current_available_size + (ULONG64)bytes_per_cluster * (ULONG64)clusters;
 801704a:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 801704e:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8017052:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8017056:	2200      	movs	r2, #0
 8017058:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 801705c:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8017060:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8017064:	2200      	movs	r2, #0
 8017066:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 801706a:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
 801706e:	e9d7 8946 	ldrd	r8, r9, [r7, #280]	; 0x118
 8017072:	464b      	mov	r3, r9
 8017074:	e9d7 ab44 	ldrd	sl, fp, [r7, #272]	; 0x110
 8017078:	4652      	mov	r2, sl
 801707a:	fb02 f203 	mul.w	r2, r2, r3
 801707e:	465b      	mov	r3, fp
 8017080:	4644      	mov	r4, r8
 8017082:	fb04 f303 	mul.w	r3, r4, r3
 8017086:	4413      	add	r3, r2
 8017088:	4642      	mov	r2, r8
 801708a:	4654      	mov	r4, sl
 801708c:	fba2 4204 	umull	r4, r2, r2, r4
 8017090:	f8c7 2184 	str.w	r2, [r7, #388]	; 0x184
 8017094:	4622      	mov	r2, r4
 8017096:	f8c7 2180 	str.w	r2, [r7, #384]	; 0x180
 801709a:	f8d7 2184 	ldr.w	r2, [r7, #388]	; 0x184
 801709e:	4413      	add	r3, r2
 80170a0:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80170a4:	e9d7 4560 	ldrd	r4, r5, [r7, #384]	; 0x180
 80170a8:	4623      	mov	r3, r4
 80170aa:	18c3      	adds	r3, r0, r3
 80170ac:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80170b0:	462b      	mov	r3, r5
 80170b2:	eb41 0303 	adc.w	r3, r1, r3
 80170b6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
            file_ptr -> fx_file_current_available_size =
 80170ba:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80170be:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 80170c2:	e9c3 1214 	strd	r1, r2, [r3, #80]	; 0x50
        /* Account for newly allocated clusters. */
        clusters += replace_clusters;
#endif /* FX_ENABLE_FAULT_TOLERANT */

        /* Decrease the available clusters in the media control block. */
        media_ptr -> fx_media_available_clusters =  media_ptr -> fx_media_available_clusters - clusters;
 80170c6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80170ca:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80170cc:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80170d0:	1ad2      	subs	r2, r2, r3
 80170d2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80170d6:	67da      	str	r2, [r3, #124]	; 0x7c
            dont_use_fat_old = (UCHAR)file_ptr -> fx_file_dir_entry.fx_dir_entry_dont_use_fat;
        }
#endif /* FX_ENABLE_EXFAT && FX_ENABLE_FAULT_TOLERANT */

        /* Search for the additional clusters we need.  */
        total_clusters =     media_ptr -> fx_media_total_clusters;
 80170d8:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80170dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80170de:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
#endif /* FX_ENABLE_EXFAT */
        }
        else
#endif /* FX_ENABLE_FAULT_TOLERANT */
        {
            last_cluster =   file_ptr -> fx_file_last_physical_cluster;
 80170e2:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80170e6:	69db      	ldr	r3, [r3, #28]
 80170e8:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
        }

        FAT_index    =       media_ptr -> fx_media_cluster_search_start;
 80170ec:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80170f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80170f4:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4

        /* Loop to find the needed clusters.  */
        while (clusters)
 80170f8:	e16f      	b.n	80173da <_fx_file_write+0x60a>
        {

            /* Decrease the cluster count.  */
            clusters--;
 80170fa:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80170fe:	3b01      	subs	r3, #1
 8017100:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
                /* Loop to find the first available cluster.  */
                do
                {

                    /* Make sure we stop looking after one pass through the FAT table.  */
                    if (!total_clusters)
 8017104:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8017108:	2b00      	cmp	r3, #0
 801710a:	d109      	bne.n	8017120 <_fx_file_write+0x350>
#ifdef FX_ENABLE_FAULT_TOLERANT
                        FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

                        /* Release media protection.  */
                        FX_UNPROTECT
 801710c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8017110:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8017114:	4618      	mov	r0, r3
 8017116:	f005 fd95 	bl	801cc44 <_tx_mutex_put>

                        /* Something is wrong with the media - the desired clusters were
                           not found in the FAT table.  */
                        return(FX_NO_MORE_SPACE);
 801711a:	230a      	movs	r3, #10
 801711c:	f000 bd92 	b.w	8017c44 <_fx_file_write+0xe74>
                    }

                    /* Read FAT entry.  */
                    status =  _fx_utility_FAT_entry_read(media_ptr, FAT_index, &FAT_value);
 8017120:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8017124:	461a      	mov	r2, r3
 8017126:	f8d7 11c4 	ldr.w	r1, [r7, #452]	; 0x1c4
 801712a:	f8d7 01ac 	ldr.w	r0, [r7, #428]	; 0x1ac
 801712e:	f002 fb17 	bl	8019760 <_fx_utility_FAT_entry_read>
 8017132:	f8c7 01ec 	str.w	r0, [r7, #492]	; 0x1ec

                    /* Check for a bad status.  */
                    if (status != FX_SUCCESS)
 8017136:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 801713a:	2b00      	cmp	r3, #0
 801713c:	d00e      	beq.n	801715c <_fx_file_write+0x38c>
#ifdef FX_ENABLE_FAULT_TOLERANT
                        FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

                        /* Release media protection.  */
                        FX_UNPROTECT
 801713e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8017142:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8017146:	4618      	mov	r0, r3
 8017148:	f005 fd7c 	bl	801cc44 <_tx_mutex_put>

                        /* Return the bad status.  */
                        return(status);
 801714c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8017150:	f000 bd78 	b.w	8017c44 <_fx_file_write+0xe74>
 8017154:	46494c45 	.word	0x46494c45
 8017158:	4d454449 	.word	0x4d454449
                    }

                    /* Decrement the total cluster count.  */
                    total_clusters--;
 801715c:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8017160:	3b01      	subs	r3, #1
 8017162:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc

                    /* Determine if the FAT entry is free.  */
                    if (FAT_value == FX_FREE_CLUSTER)
 8017166:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 801716a:	2b00      	cmp	r3, #0
 801716c:	d116      	bne.n	801719c <_fx_file_write+0x3cc>
                    {

                        /* Move cluster search pointer forward.  */
                        media_ptr -> fx_media_cluster_search_start =  FAT_index + 1;
 801716e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8017172:	1c5a      	adds	r2, r3, #1
 8017174:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8017178:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

                        /* Determine if this needs to be wrapped.  */
                        if (media_ptr -> fx_media_cluster_search_start >= (media_ptr -> fx_media_total_clusters + FX_FAT_ENTRY_START))
 801717c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8017180:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8017184:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8017188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801718a:	3302      	adds	r3, #2
 801718c:	429a      	cmp	r2, r3
 801718e:	d316      	bcc.n	80171be <_fx_file_write+0x3ee>
                        {

                            /* Wrap the search to the beginning FAT entry.  */
                            media_ptr -> fx_media_cluster_search_start =  FX_FAT_ENTRY_START;
 8017190:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 8017194:	2302      	movs	r3, #2
 8017196:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
                        }

                        /* Break this loop.  */
                        break;
 801719a:	e010      	b.n	80171be <_fx_file_write+0x3ee>
                    }
                    else
                    {

                        /* FAT entry is not free... Advance the FAT index.  */
                        FAT_index++;
 801719c:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80171a0:	3301      	adds	r3, #1
 80171a2:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4

                        /* Determine if we need to wrap the FAT index around.  */
                        if (FAT_index >= (media_ptr -> fx_media_total_clusters + FX_FAT_ENTRY_START))
 80171a6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80171aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80171ac:	1c9a      	adds	r2, r3, #2
 80171ae:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80171b2:	4293      	cmp	r3, r2
 80171b4:	d3a6      	bcc.n	8017104 <_fx_file_write+0x334>
                        {

                            /* Wrap the search to the beginning FAT entry.  */
                            FAT_index =  FX_FAT_ENTRY_START;
 80171b6:	2302      	movs	r3, #2
 80171b8:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
                    if (!total_clusters)
 80171bc:	e7a2      	b.n	8017104 <_fx_file_write+0x334>
                        break;
 80171be:	bf00      	nop
#ifdef FX_ENABLE_EXFAT
            }
#endif /* FX_ENABLE_EXFAT */

            /* Determine if we have found the first new cluster yet.  */
            if (first_new_cluster == 0)
 80171c0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80171c4:	2b00      	cmp	r3, #0
 80171c6:	d103      	bne.n	80171d0 <_fx_file_write+0x400>
            {

                /* Remember the first new cluster. */
                first_new_cluster =  FAT_index;
 80171c8:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80171cc:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
#endif /* FX_ENABLE_FAULT_TOLERANT */
            }

            /* Make a quick check to see if an empty, cluster-less file
               is being written to for the first time.  */
            if (last_cluster)
 80171d0:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80171d4:	2b00      	cmp	r3, #0
 80171d6:	f000 808f 	beq.w	80172f8 <_fx_file_write+0x528>
            {

                /* Check for the file's cluster.  We won't perform this link until the
                   entire FAT chain is built.  */
                if (last_cluster != file_ptr -> fx_file_last_physical_cluster)
 80171da:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80171de:	69da      	ldr	r2, [r3, #28]
 80171e0:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80171e4:	4293      	cmp	r3, r2
 80171e6:	d009      	beq.n	80171fc <_fx_file_write+0x42c>
                    {
#endif /* FX_ENABLE_EXFAT */

                        /* Normal condition - link the last cluster with the new
                           found cluster.  */
                        status = _fx_utility_FAT_entry_write(media_ptr, last_cluster, FAT_index);
 80171e8:	f8d7 21c4 	ldr.w	r2, [r7, #452]	; 0x1c4
 80171ec:	f8d7 11cc 	ldr.w	r1, [r7, #460]	; 0x1cc
 80171f0:	f8d7 01ac 	ldr.w	r0, [r7, #428]	; 0x1ac
 80171f4:	f002 fcdd 	bl	8019bb2 <_fx_utility_FAT_entry_write>
 80171f8:	f8c7 01ec 	str.w	r0, [r7, #492]	; 0x1ec
                    }
#endif /* FX_ENABLE_EXFAT */
                }

                /* Check for a bad FAT write status.  */
                if (status !=  FX_SUCCESS)
 80171fc:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8017200:	2b00      	cmp	r3, #0
 8017202:	d00a      	beq.n	801721a <_fx_file_write+0x44a>
#ifdef FX_ENABLE_FAULT_TOLERANT
                    FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

                    /* Release media protection.  */
                    FX_UNPROTECT
 8017204:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8017208:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 801720c:	4618      	mov	r0, r3
 801720e:	f005 fd19 	bl	801cc44 <_tx_mutex_put>

                    /* Return the bad status.  */
                    return(status);
 8017212:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8017216:	f000 bd15 	b.w	8017c44 <_fx_file_write+0xe74>
                }

                /* Determine if we are adding a sector after a write filled the previously
                   allocated cluster exactly.  */
                if ((file_ptr -> fx_file_current_relative_sector >=
 801721a:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 801721e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
                     (media_ptr -> fx_media_sectors_per_cluster - 1)) &&
 8017220:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8017224:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017226:	3b01      	subs	r3, #1
                if ((file_ptr -> fx_file_current_relative_sector >=
 8017228:	429a      	cmp	r2, r3
 801722a:	f0c0 80cc 	bcc.w	80173c6 <_fx_file_write+0x5f6>
                    (file_ptr -> fx_file_current_logical_offset >=
 801722e:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8017232:	6b1a      	ldr	r2, [r3, #48]	; 0x30
                     media_ptr -> fx_media_bytes_per_sector))
 8017234:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8017238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     (media_ptr -> fx_media_sectors_per_cluster - 1)) &&
 801723a:	429a      	cmp	r2, r3
 801723c:	f0c0 80c3 	bcc.w	80173c6 <_fx_file_write+0x5f6>
                {

                    /* Yes, we need to adjust all of the pertinent file parameters for
                       writing into this newly allocated cluster.  */
                    file_ptr -> fx_file_current_physical_cluster =  FAT_index;
 8017240:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8017244:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8017248:	6213      	str	r3, [r2, #32]
                    file_ptr -> fx_file_current_relative_cluster++;
 801724a:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 801724e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017250:	1c5a      	adds	r2, r3, #1
 8017252:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8017256:	635a      	str	r2, [r3, #52]	; 0x34
                    file_ptr -> fx_file_current_relative_sector =   0;
 8017258:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 801725c:	2300      	movs	r3, #0
 801725e:	6393      	str	r3, [r2, #56]	; 0x38
                    file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 8017260:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8017264:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017266:	2200      	movs	r2, #0
 8017268:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 801726c:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
                        (((ULONG64)(FAT_index - FX_FAT_ENTRY_START)) *
 8017270:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8017274:	3b02      	subs	r3, #2
 8017276:	2200      	movs	r2, #0
 8017278:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 801727c:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
                         ((ULONG)media_ptr -> fx_media_sectors_per_cluster));
 8017280:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8017284:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017286:	2200      	movs	r2, #0
 8017288:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 801728c:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
                        (((ULONG64)(FAT_index - FX_FAT_ENTRY_START)) *
 8017290:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 8017294:	462b      	mov	r3, r5
 8017296:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 801729a:	4642      	mov	r2, r8
 801729c:	fb02 f203 	mul.w	r2, r2, r3
 80172a0:	464b      	mov	r3, r9
 80172a2:	4621      	mov	r1, r4
 80172a4:	fb01 f303 	mul.w	r3, r1, r3
 80172a8:	4413      	add	r3, r2
 80172aa:	4622      	mov	r2, r4
 80172ac:	4641      	mov	r1, r8
 80172ae:	fba2 1201 	umull	r1, r2, r2, r1
 80172b2:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80172b6:	460a      	mov	r2, r1
 80172b8:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80172bc:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80172c0:	4413      	add	r3, r2
 80172c2:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
                    file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 80172c6:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 80172ca:	4623      	mov	r3, r4
 80172cc:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 80172d0:	4602      	mov	r2, r0
 80172d2:	189b      	adds	r3, r3, r2
 80172d4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80172d8:	462b      	mov	r3, r5
 80172da:	460a      	mov	r2, r1
 80172dc:	4153      	adcs	r3, r2
 80172de:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80172e2:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80172e6:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80172ea:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
                    file_ptr -> fx_file_current_logical_offset =    0;
 80172ee:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80172f2:	2300      	movs	r3, #0
 80172f4:	6313      	str	r3, [r2, #48]	; 0x30
 80172f6:	e066      	b.n	80173c6 <_fx_file_write+0x5f6>
            {

                /* This is the first cluster allocated for the file.  Just
                   remember it as being the first and setup the other file
                   pointers accordingly.  */
                file_ptr -> fx_file_first_physical_cluster =    FAT_index;
 80172f8:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80172fc:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8017300:	6153      	str	r3, [r2, #20]
                file_ptr -> fx_file_current_physical_cluster =  FAT_index;
 8017302:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8017306:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 801730a:	6213      	str	r3, [r2, #32]
                file_ptr -> fx_file_current_relative_cluster =  0;
 801730c:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8017310:	2300      	movs	r3, #0
 8017312:	6353      	str	r3, [r2, #52]	; 0x34
                file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 8017314:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8017318:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801731a:	2200      	movs	r2, #0
 801731c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8017320:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
                    (((ULONG64)(FAT_index - FX_FAT_ENTRY_START)) *
 8017324:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8017328:	3b02      	subs	r3, #2
 801732a:	2200      	movs	r2, #0
 801732c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8017330:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
                     ((ULONG)media_ptr -> fx_media_sectors_per_cluster));
 8017334:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8017338:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801733a:	2200      	movs	r2, #0
 801733c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8017340:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
                    (((ULONG64)(FAT_index - FX_FAT_ENTRY_START)) *
 8017344:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8017348:	462b      	mov	r3, r5
 801734a:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 801734e:	4642      	mov	r2, r8
 8017350:	fb02 f203 	mul.w	r2, r2, r3
 8017354:	464b      	mov	r3, r9
 8017356:	4621      	mov	r1, r4
 8017358:	fb01 f303 	mul.w	r3, r1, r3
 801735c:	4413      	add	r3, r2
 801735e:	4622      	mov	r2, r4
 8017360:	4641      	mov	r1, r8
 8017362:	fba2 1201 	umull	r1, r2, r2, r1
 8017366:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
 801736a:	460a      	mov	r2, r1
 801736c:	f8c7 2170 	str.w	r2, [r7, #368]	; 0x170
 8017370:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8017374:	4413      	add	r3, r2
 8017376:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
                file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 801737a:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 801737e:	4623      	mov	r3, r4
 8017380:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 8017384:	4602      	mov	r2, r0
 8017386:	189b      	adds	r3, r3, r2
 8017388:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801738c:	462b      	mov	r3, r5
 801738e:	460a      	mov	r2, r1
 8017390:	4153      	adcs	r3, r2
 8017392:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8017396:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 801739a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 801739e:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
#ifdef FX_ENABLE_FAULT_TOLERANT
                if (file_ptr -> fx_file_last_physical_cluster == 0)
#endif /* FX_ENABLE_FAULT_TOLERANT */
                {
                    file_ptr -> fx_file_current_logical_offset =    0;
 80173a2:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80173a6:	2300      	movs	r3, #0
 80173a8:	6313      	str	r3, [r2, #48]	; 0x30
                    file_ptr -> fx_file_current_file_offset =       0;
 80173aa:	f8d7 119c 	ldr.w	r1, [r7, #412]	; 0x19c
 80173ae:	f04f 0200 	mov.w	r2, #0
 80173b2:	f04f 0300 	mov.w	r3, #0
 80173b6:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
                }

                /* Also remember this as the first cluster in the directory
                   entry.  */
                file_ptr -> fx_file_dir_entry.fx_dir_entry_cluster =  FAT_index;
 80173ba:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80173be:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80173c2:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
                }
            }
#endif /* FX_ENABLE_EXFAT */

            /* Otherwise, remember the new FAT index as the last.  */
            last_cluster =  FAT_index;
 80173c6:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80173ca:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc

            /* Move to the next FAT entry.  */
            FAT_index =  media_ptr -> fx_media_cluster_search_start;
 80173ce:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80173d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80173d6:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
        while (clusters)
 80173da:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80173de:	2b00      	cmp	r3, #0
 80173e0:	f47f ae8b 	bne.w	80170fa <_fx_file_write+0x32a>
            else
#endif /* FX_ENABLE_FAULT_TOLERANT */
            {

                /* Place an end-of-file marker on the last cluster.  */
                status = _fx_utility_FAT_entry_write(media_ptr, last_cluster, media_ptr -> fx_media_fat_last);
 80173e4:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80173e8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80173ec:	f8d3 34ac 	ldr.w	r3, [r3, #1196]	; 0x4ac
 80173f0:	461a      	mov	r2, r3
 80173f2:	f8d7 11cc 	ldr.w	r1, [r7, #460]	; 0x1cc
 80173f6:	f8d7 01ac 	ldr.w	r0, [r7, #428]	; 0x1ac
 80173fa:	f002 fbda 	bl	8019bb2 <_fx_utility_FAT_entry_write>
 80173fe:	f8c7 01ec 	str.w	r0, [r7, #492]	; 0x1ec
            }

            /* Check for a bad FAT write status.  */
            if (status !=  FX_SUCCESS)
 8017402:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8017406:	2b00      	cmp	r3, #0
 8017408:	d00a      	beq.n	8017420 <_fx_file_write+0x650>
#ifdef FX_ENABLE_FAULT_TOLERANT
                FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

                /* Release media protection.  */
                FX_UNPROTECT
 801740a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 801740e:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8017412:	4618      	mov	r0, r3
 8017414:	f005 fc16 	bl	801cc44 <_tx_mutex_put>

                /* Return the bad status.  */
                return(status);
 8017418:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 801741c:	f000 bc12 	b.w	8017c44 <_fx_file_write+0xe74>
#ifdef FX_ENABLE_EXFAT
        }
#endif /* FX_ENABLE_EXFAT */

        /* Determine if the file already had clusters.  */
        if (file_ptr -> fx_file_last_physical_cluster)
 8017420:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8017424:	69db      	ldr	r3, [r3, #28]
 8017426:	2b00      	cmp	r3, #0
 8017428:	d019      	beq.n	801745e <_fx_file_write+0x68e>
                         ((replace_clusters == 0) && (first_new_cluster)))
                {
                    status = _fx_utility_FAT_entry_write(media_ptr, file_ptr -> fx_file_last_physical_cluster, first_new_cluster);
                }
#else
                status = _fx_utility_FAT_entry_write(media_ptr, file_ptr -> fx_file_last_physical_cluster, first_new_cluster);
 801742a:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 801742e:	69db      	ldr	r3, [r3, #28]
 8017430:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 8017434:	4619      	mov	r1, r3
 8017436:	f8d7 01ac 	ldr.w	r0, [r7, #428]	; 0x1ac
 801743a:	f002 fbba 	bl	8019bb2 <_fx_utility_FAT_entry_write>
 801743e:	f8c7 01ec 	str.w	r0, [r7, #492]	; 0x1ec
#endif /* FX_ENABLE_FAULT_TOLERANT */

                /* Check for a bad FAT write status.  */
                if (status !=  FX_SUCCESS)
 8017442:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8017446:	2b00      	cmp	r3, #0
 8017448:	d009      	beq.n	801745e <_fx_file_write+0x68e>
#ifdef FX_ENABLE_FAULT_TOLERANT
                    FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

                    /* Release media protection.  */
                    FX_UNPROTECT
 801744a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 801744e:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8017452:	4618      	mov	r0, r3
 8017454:	f005 fbf6 	bl	801cc44 <_tx_mutex_put>

                    /* Return the bad status.  */
                    return(status);
 8017458:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 801745c:	e3f2      	b.n	8017c44 <_fx_file_write+0xe74>
        else
#endif /* FX_ENABLE_FAULT_TOLERANT */
        {

            /* Update the file control block with the last physical cluster.  */
            file_ptr -> fx_file_last_physical_cluster =  last_cluster;
 801745e:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8017462:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8017466:	61d3      	str	r3, [r2, #28]
        }
    }

    /* Check for a need to increment to the next sector within a previously
       allocated cluster.  */
    if (file_ptr -> fx_file_current_logical_offset >=
 8017468:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 801746c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
        media_ptr -> fx_media_bytes_per_sector)
 801746e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8017472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    if (file_ptr -> fx_file_current_logical_offset >=
 8017474:	429a      	cmp	r2, r3
 8017476:	d31b      	bcc.n	80174b0 <_fx_file_write+0x6e0>
    {

        /* Update the sector specific file parameters to start at the
           next logical sector.  */
        file_ptr -> fx_file_current_logical_sector++;
 8017478:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 801747c:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8017480:	1c51      	adds	r1, r2, #1
 8017482:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8017486:	f143 0300 	adc.w	r3, r3, #0
 801748a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 801748e:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8017492:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8017496:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
        file_ptr -> fx_file_current_relative_sector++;
 801749a:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 801749e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80174a0:	1c5a      	adds	r2, r3, #1
 80174a2:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80174a6:	639a      	str	r2, [r3, #56]	; 0x38
        file_ptr -> fx_file_current_logical_offset =  0;
 80174a8:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80174ac:	2300      	movs	r3, #0
 80174ae:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* At this point there is enough room to perform the file write operation.  */

    /* Setup local buffer pointer.  */
    source_ptr =  (UCHAR *)buffer_ptr;
 80174b0:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 80174b4:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4

    /* Setup the remaining number of bytes to write.  */
    bytes_remaining =  size;
 80174b8:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80174bc:	2200      	movs	r2, #0
 80174be:	613b      	str	r3, [r7, #16]
 80174c0:	617a      	str	r2, [r7, #20]
 80174c2:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80174c6:	e9c7 3478 	strd	r3, r4, [r7, #480]	; 0x1e0
        }
    }
#endif /* FX_ENABLE_FAULT_TOLERANT */

    /* Loop to write all of the bytes.  */
    while (bytes_remaining)
 80174ca:	e290      	b.n	80179ee <_fx_file_write+0xc1e>
    {

        /* Determine if a beginning or ending partial write is required.  */
        if ((file_ptr -> fx_file_current_logical_offset) ||
 80174cc:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80174d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80174d2:	2b00      	cmp	r3, #0
 80174d4:	d111      	bne.n	80174fa <_fx_file_write+0x72a>
            (bytes_remaining < media_ptr -> fx_media_bytes_per_sector))
 80174d6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80174da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80174dc:	2200      	movs	r2, #0
 80174de:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80174e2:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
        if ((file_ptr -> fx_file_current_logical_offset) ||
 80174e6:	e9d7 2378 	ldrd	r2, r3, [r7, #480]	; 0x1e0
 80174ea:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	; 0xb8
 80174ee:	4621      	mov	r1, r4
 80174f0:	428a      	cmp	r2, r1
 80174f2:	4629      	mov	r1, r5
 80174f4:	418b      	sbcs	r3, r1
 80174f6:	f080 8096 	bcs.w	8017626 <_fx_file_write+0x856>
                }
            }
            else
#endif /* FX_ENABLE_FAULT_TOLERANT */
            {
                status =  _fx_utility_logical_sector_read(media_ptr,
 80174fa:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80174fe:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
                                                          file_ptr -> fx_file_current_logical_sector,
                                                          media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_DATA_SECTOR);
 8017502:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8017506:	689a      	ldr	r2, [r3, #8]
                status =  _fx_utility_logical_sector_read(media_ptr,
 8017508:	2304      	movs	r3, #4
 801750a:	9302      	str	r3, [sp, #8]
 801750c:	2301      	movs	r3, #1
 801750e:	9301      	str	r3, [sp, #4]
 8017510:	9200      	str	r2, [sp, #0]
 8017512:	4602      	mov	r2, r0
 8017514:	460b      	mov	r3, r1
 8017516:	f8d7 01ac 	ldr.w	r0, [r7, #428]	; 0x1ac
 801751a:	f003 fd2f 	bl	801af7c <_fx_utility_logical_sector_read>
 801751e:	f8c7 01ec 	str.w	r0, [r7, #492]	; 0x1ec
            }

            /* Check for good completion status.  */
            if (status !=  FX_SUCCESS)
 8017522:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8017526:	2b00      	cmp	r3, #0
 8017528:	d009      	beq.n	801753e <_fx_file_write+0x76e>
#ifdef FX_ENABLE_FAULT_TOLERANT
                FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

                /* Release media protection.  */
                FX_UNPROTECT
 801752a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 801752e:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8017532:	4618      	mov	r0, r3
 8017534:	f005 fb86 	bl	801cc44 <_tx_mutex_put>

                /* Return the error status.  */
                return(status);
 8017538:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 801753c:	e382      	b.n	8017c44 <_fx_file_write+0xe74>
            }

            /* Copy the appropriate number of bytes into the destination buffer.  */
            copy_bytes =  media_ptr -> fx_media_bytes_per_sector -
 801753e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8017542:	6a9a      	ldr	r2, [r3, #40]	; 0x28
                file_ptr -> fx_file_current_logical_offset;
 8017544:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8017548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            copy_bytes =  media_ptr -> fx_media_bytes_per_sector -
 801754a:	1ad3      	subs	r3, r2, r3
 801754c:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8

            /* Check to see if only a portion of the sector needs to be
               copied.  */
            if (copy_bytes > bytes_remaining)
 8017550:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 8017554:	2200      	movs	r2, #0
 8017556:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 801755a:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 801755e:	e9d7 2378 	ldrd	r2, r3, [r7, #480]	; 0x1e0
 8017562:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 8017566:	4621      	mov	r1, r4
 8017568:	428a      	cmp	r2, r1
 801756a:	4629      	mov	r1, r5
 801756c:	418b      	sbcs	r3, r1
 801756e:	d203      	bcs.n	8017578 <_fx_file_write+0x7a8>
            {

                /* Adjust the number of bytes to copy.  */
                copy_bytes =  (ULONG)bytes_remaining;
 8017570:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8017574:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
            }

            /* Actually perform the memory copy.  */
            _fx_utility_memory_copy(source_ptr, ((UCHAR *)media_ptr -> fx_media_memory_buffer) +  /* Use case of memcpy is verified. */
 8017578:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 801757c:	689a      	ldr	r2, [r3, #8]
                                    file_ptr -> fx_file_current_logical_offset,
 801757e:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8017582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            _fx_utility_memory_copy(source_ptr, ((UCHAR *)media_ptr -> fx_media_memory_buffer) +  /* Use case of memcpy is verified. */
 8017584:	4413      	add	r3, r2
 8017586:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 801758a:	4619      	mov	r1, r3
 801758c:	f8d7 01d4 	ldr.w	r0, [r7, #468]	; 0x1d4
 8017590:	f004 f8f0 	bl	801b774 <_fx_utility_memory_copy>
                                    copy_bytes);

            /* Write back the current logical sector.  */
            status =  _fx_utility_logical_sector_write(media_ptr, file_ptr -> fx_file_current_logical_sector,
 8017594:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8017598:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
                                                       media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_DATA_SECTOR);
 801759c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80175a0:	689a      	ldr	r2, [r3, #8]
            status =  _fx_utility_logical_sector_write(media_ptr, file_ptr -> fx_file_current_logical_sector,
 80175a2:	2304      	movs	r3, #4
 80175a4:	9302      	str	r3, [sp, #8]
 80175a6:	2301      	movs	r3, #1
 80175a8:	9301      	str	r3, [sp, #4]
 80175aa:	9200      	str	r2, [sp, #0]
 80175ac:	4602      	mov	r2, r0
 80175ae:	460b      	mov	r3, r1
 80175b0:	f8d7 01ac 	ldr.w	r0, [r7, #428]	; 0x1ac
 80175b4:	f003 ff76 	bl	801b4a4 <_fx_utility_logical_sector_write>
 80175b8:	f8c7 01ec 	str.w	r0, [r7, #492]	; 0x1ec

            /* Check for good completion status.  */
            if (status !=  FX_SUCCESS)
 80175bc:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80175c0:	2b00      	cmp	r3, #0
 80175c2:	d009      	beq.n	80175d8 <_fx_file_write+0x808>
#ifdef FX_ENABLE_FAULT_TOLERANT
                FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

                /* Release media protection.  */
                FX_UNPROTECT
 80175c4:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80175c8:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 80175cc:	4618      	mov	r0, r3
 80175ce:	f005 fb39 	bl	801cc44 <_tx_mutex_put>

                /* Return the error status.  */
                return(status);
 80175d2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80175d6:	e335      	b.n	8017c44 <_fx_file_write+0xe74>
            }


            /* Increment the logical sector byte offset.  */
            file_ptr -> fx_file_current_logical_offset =
                file_ptr -> fx_file_current_logical_offset + copy_bytes;
 80175d8:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80175dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80175de:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 80175e2:	441a      	add	r2, r3
            file_ptr -> fx_file_current_logical_offset =
 80175e4:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80175e8:	631a      	str	r2, [r3, #48]	; 0x30

            /* Adjust the remaining bytes to read.  */
            bytes_remaining =  bytes_remaining - copy_bytes;
 80175ea:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 80175ee:	2200      	movs	r2, #0
 80175f0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80175f4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80175f8:	e9d7 2378 	ldrd	r2, r3, [r7, #480]	; 0x1e0
 80175fc:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	; 0xa8
 8017600:	4621      	mov	r1, r4
 8017602:	1a51      	subs	r1, r2, r1
 8017604:	60b9      	str	r1, [r7, #8]
 8017606:	4629      	mov	r1, r5
 8017608:	eb63 0301 	sbc.w	r3, r3, r1
 801760c:	60fb      	str	r3, [r7, #12]
 801760e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8017612:	e9c7 3478 	strd	r3, r4, [r7, #480]	; 0x1e0

            /* Adjust the pointer to the source buffer.  */
            source_ptr =  source_ptr + copy_bytes;
 8017616:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 801761a:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 801761e:	4413      	add	r3, r2
 8017620:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 8017624:	e10d      	b.n	8017842 <_fx_file_write+0xa72>
        {

            /* Attempt to write multiple sectors directly to the media.  */

            /* Calculate the number of whole sectors to write.  */
            sectors =  (UINT)(bytes_remaining / media_ptr -> fx_media_bytes_per_sector);
 8017626:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 801762a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801762c:	2200      	movs	r2, #0
 801762e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8017632:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8017636:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 801763a:	e9d7 0178 	ldrd	r0, r1, [r7, #480]	; 0x1e0
 801763e:	f7e8 ffcf 	bl	80005e0 <__aeabi_uldivmod>
 8017642:	4602      	mov	r2, r0
 8017644:	460b      	mov	r3, r1
 8017646:	4613      	mov	r3, r2
 8017648:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8

            next_cluster = cluster = file_ptr -> fx_file_current_physical_cluster;
 801764c:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8017650:	6a1b      	ldr	r3, [r3, #32]
 8017652:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8017656:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 801765a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4

            for (i = (media_ptr -> fx_media_sectors_per_cluster -
 801765e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8017662:	6d5a      	ldr	r2, [r3, #84]	; 0x54
                      file_ptr -> fx_file_current_relative_sector); i < sectors; i += media_ptr -> fx_media_sectors_per_cluster)
 8017664:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8017668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            for (i = (media_ptr -> fx_media_sectors_per_cluster -
 801766a:	1ad3      	subs	r3, r2, r3
 801766c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8017670:	e03f      	b.n	80176f2 <_fx_file_write+0x922>
                    cluster++;
                }
                else
                {
#endif /* FX_ENABLE_EXFAT */
                    status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &next_cluster);
 8017672:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 8017676:	461a      	mov	r2, r3
 8017678:	f8d7 11c8 	ldr.w	r1, [r7, #456]	; 0x1c8
 801767c:	f8d7 01ac 	ldr.w	r0, [r7, #428]	; 0x1ac
 8017680:	f002 f86e 	bl	8019760 <_fx_utility_FAT_entry_read>
 8017684:	f8c7 01ec 	str.w	r0, [r7, #492]	; 0x1ec

                    /* Determine if an error is present.  */
                    if ((status != FX_SUCCESS) || (next_cluster < FX_FAT_ENTRY_START) ||
 8017688:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 801768c:	2b00      	cmp	r3, #0
 801768e:	d10d      	bne.n	80176ac <_fx_file_write+0x8dc>
 8017690:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8017694:	2b01      	cmp	r3, #1
 8017696:	d909      	bls.n	80176ac <_fx_file_write+0x8dc>
                        (next_cluster > media_ptr -> fx_media_fat_reserved))
 8017698:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 801769c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80176a0:	f8d3 24a8 	ldr.w	r2, [r3, #1192]	; 0x4a8
 80176a4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
                    if ((status != FX_SUCCESS) || (next_cluster < FX_FAT_ENTRY_START) ||
 80176a8:	429a      	cmp	r2, r3
 80176aa:	d20f      	bcs.n	80176cc <_fx_file_write+0x8fc>
#ifdef FX_ENABLE_FAULT_TOLERANT
                        FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

                        /* Release media protection.  */
                        FX_UNPROTECT
 80176ac:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80176b0:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 80176b4:	4618      	mov	r0, r3
 80176b6:	f005 fac5 	bl	801cc44 <_tx_mutex_put>

                        /* Send error message back to caller.  */
                        if (status != FX_SUCCESS)
 80176ba:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80176be:	2b00      	cmp	r3, #0
 80176c0:	d002      	beq.n	80176c8 <_fx_file_write+0x8f8>
                        {
                            return(status);
 80176c2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80176c6:	e2bd      	b.n	8017c44 <_fx_file_write+0xe74>
                        }
                        else
                        {
                            return(FX_FILE_CORRUPT);
 80176c8:	2308      	movs	r3, #8
 80176ca:	e2bb      	b.n	8017c44 <_fx_file_write+0xe74>
                        }
                    }

                    if (next_cluster != cluster + 1)
 80176cc:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80176d0:	1c5a      	adds	r2, r3, #1
 80176d2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80176d6:	429a      	cmp	r2, r3
 80176d8:	d112      	bne.n	8017700 <_fx_file_write+0x930>
                    {
                        break;
                    }
                    else
                    {
                        cluster = next_cluster;
 80176da:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80176de:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
                      file_ptr -> fx_file_current_relative_sector); i < sectors; i += media_ptr -> fx_media_sectors_per_cluster)
 80176e2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80176e6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80176e8:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 80176ec:	4413      	add	r3, r2
 80176ee:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80176f2:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80176f6:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 80176fa:	429a      	cmp	r2, r3
 80176fc:	d3b9      	bcc.n	8017672 <_fx_file_write+0x8a2>
 80176fe:	e000      	b.n	8017702 <_fx_file_write+0x932>
                        break;
 8017700:	bf00      	nop
#ifdef FX_ENABLE_EXFAT
                }
#endif /* FX_ENABLE_EXFAT */
            }

            if (i < sectors)
 8017702:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8017706:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 801770a:	429a      	cmp	r2, r3
 801770c:	d203      	bcs.n	8017716 <_fx_file_write+0x946>
            {
                sectors = i;
 801770e:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 8017712:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
            }

            /* Perform the data write directly from the user's buffer of
               the appropriate number of sectors.  */
            status =  _fx_utility_logical_sector_write(media_ptr, file_ptr -> fx_file_current_logical_sector,
 8017716:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 801771a:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 801771e:	2304      	movs	r3, #4
 8017720:	9302      	str	r3, [sp, #8]
 8017722:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8017726:	9301      	str	r3, [sp, #4]
 8017728:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 801772c:	9300      	str	r3, [sp, #0]
 801772e:	4602      	mov	r2, r0
 8017730:	460b      	mov	r3, r1
 8017732:	f8d7 01ac 	ldr.w	r0, [r7, #428]	; 0x1ac
 8017736:	f003 feb5 	bl	801b4a4 <_fx_utility_logical_sector_write>
 801773a:	f8c7 01ec 	str.w	r0, [r7, #492]	; 0x1ec
                                                       source_ptr, (ULONG) sectors, FX_DATA_SECTOR);

            /* Check for good completion status.  */
            if (status !=  FX_SUCCESS)
 801773e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8017742:	2b00      	cmp	r3, #0
 8017744:	d009      	beq.n	801775a <_fx_file_write+0x98a>
#ifdef FX_ENABLE_FAULT_TOLERANT
                FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

                /* Release media protection.  */
                FX_UNPROTECT
 8017746:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 801774a:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 801774e:	4618      	mov	r0, r3
 8017750:	f005 fa78 	bl	801cc44 <_tx_mutex_put>

                /* Return the error status.  */
                return(status);
 8017754:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8017758:	e274      	b.n	8017c44 <_fx_file_write+0xe74>

            /* Increment the current logical sector.  Subtract one from
               the sector count because we are going to use the logical
               offset to do additional sector/cluster arithmetic below.  */
            file_ptr -> fx_file_current_logical_sector =
                file_ptr -> fx_file_current_logical_sector +
 801775a:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 801775e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
                (sectors - 1);
 8017762:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8017766:	3b01      	subs	r3, #1
 8017768:	2200      	movs	r2, #0
 801776a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 801776e:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
                file_ptr -> fx_file_current_logical_sector +
 8017772:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 8017776:	4623      	mov	r3, r4
 8017778:	18c3      	adds	r3, r0, r3
 801777a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801777e:	462b      	mov	r3, r5
 8017780:	eb41 0303 	adc.w	r3, r1, r3
 8017784:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
            file_ptr -> fx_file_current_logical_sector =
 8017788:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 801778c:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8017790:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28

            /* Move the relative cluster and sector as well.  */
            file_ptr -> fx_file_current_relative_cluster = file_ptr -> fx_file_current_relative_cluster +
 8017794:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8017798:	6b59      	ldr	r1, [r3, #52]	; 0x34
                (file_ptr -> fx_file_current_relative_sector + (sectors - 1)) /
 801779a:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 801779e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80177a0:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 80177a4:	4413      	add	r3, r2
 80177a6:	1e5a      	subs	r2, r3, #1
                media_ptr -> fx_media_sectors_per_cluster;
 80177a8:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80177ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
                (file_ptr -> fx_file_current_relative_sector + (sectors - 1)) /
 80177ae:	fbb2 f3f3 	udiv	r3, r2, r3
            file_ptr -> fx_file_current_relative_cluster = file_ptr -> fx_file_current_relative_cluster +
 80177b2:	18ca      	adds	r2, r1, r3
 80177b4:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80177b8:	635a      	str	r2, [r3, #52]	; 0x34

            file_ptr -> fx_file_current_relative_sector =
                (file_ptr -> fx_file_current_relative_sector + (sectors - 1)) %
 80177ba:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80177be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80177c0:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 80177c4:	4413      	add	r3, r2
 80177c6:	1e59      	subs	r1, r3, #1
                media_ptr -> fx_media_sectors_per_cluster;
 80177c8:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80177cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
                (file_ptr -> fx_file_current_relative_sector + (sectors - 1)) %
 80177ce:	fbb1 f3f2 	udiv	r3, r1, r2
 80177d2:	fb02 f303 	mul.w	r3, r2, r3
 80177d6:	1aca      	subs	r2, r1, r3
            file_ptr -> fx_file_current_relative_sector =
 80177d8:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80177dc:	639a      	str	r2, [r3, #56]	; 0x38

            /* Increment the logical sector byte offset.  */
            file_ptr -> fx_file_current_logical_offset =
                media_ptr -> fx_media_bytes_per_sector;
 80177de:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80177e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
            file_ptr -> fx_file_current_logical_offset =
 80177e4:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80177e8:	631a      	str	r2, [r3, #48]	; 0x30

            file_ptr -> fx_file_current_physical_cluster = cluster;
 80177ea:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80177ee:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80177f2:	6213      	str	r3, [r2, #32]

            /* Adjust the remaining bytes.  */
            bytes_remaining =  bytes_remaining -
                (((ULONG)media_ptr -> fx_media_bytes_per_sector) * sectors);
 80177f4:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80177f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80177fa:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 80177fe:	fb02 f303 	mul.w	r3, r2, r3
 8017802:	2200      	movs	r2, #0
 8017804:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8017808:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
            bytes_remaining =  bytes_remaining -
 801780c:	e9d7 2378 	ldrd	r2, r3, [r7, #480]	; 0x1e0
 8017810:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 8017814:	4621      	mov	r1, r4
 8017816:	1a51      	subs	r1, r2, r1
 8017818:	6039      	str	r1, [r7, #0]
 801781a:	4629      	mov	r1, r5
 801781c:	eb63 0301 	sbc.w	r3, r3, r1
 8017820:	607b      	str	r3, [r7, #4]
 8017822:	e9d7 3400 	ldrd	r3, r4, [r7]
 8017826:	e9c7 3478 	strd	r3, r4, [r7, #480]	; 0x1e0

            /* Adjust the pointer to the source buffer.  */
            source_ptr =  source_ptr +
                (((ULONG)media_ptr -> fx_media_bytes_per_sector) * sectors);
 801782a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 801782e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8017830:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8017834:	fb03 f202 	mul.w	r2, r3, r2
            source_ptr =  source_ptr +
 8017838:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 801783c:	4413      	add	r3, r2
 801783e:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
        }

        /* At this point, we have either written a partial sector or have successfully
           written one or more whole sectors.  Determine if we are at the end of
           the current logical sector.  */
        if (file_ptr -> fx_file_current_logical_offset >=
 8017842:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8017846:	6b1a      	ldr	r2, [r3, #48]	; 0x30
            media_ptr -> fx_media_bytes_per_sector)
 8017848:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 801784c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if (file_ptr -> fx_file_current_logical_offset >=
 801784e:	429a      	cmp	r2, r3
 8017850:	f0c0 80cd 	bcc.w	80179ee <_fx_file_write+0xc1e>
        {

            /* Determine if we are at the exact physical end of the file.  */
            if ((bytes_remaining == 0) &&
 8017854:	e9d7 2378 	ldrd	r2, r3, [r7, #480]	; 0x1e0
 8017858:	4313      	orrs	r3, r2
 801785a:	d11f      	bne.n	801789c <_fx_file_write+0xacc>
                ((file_ptr -> fx_file_current_file_offset + size) >=
 801785c:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8017860:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8017864:	f8d7 1194 	ldr.w	r1, [r7, #404]	; 0x194
 8017868:	2000      	movs	r0, #0
 801786a:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 801786e:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
 8017872:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8017876:	4621      	mov	r1, r4
 8017878:	1851      	adds	r1, r2, r1
 801787a:	67b9      	str	r1, [r7, #120]	; 0x78
 801787c:	4629      	mov	r1, r5
 801787e:	414b      	adcs	r3, r1
 8017880:	67fb      	str	r3, [r7, #124]	; 0x7c
                 file_ptr -> fx_file_current_available_size))
 8017882:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8017886:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
            if ((bytes_remaining == 0) &&
 801788a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 801788e:	4621      	mov	r1, r4
 8017890:	4291      	cmp	r1, r2
 8017892:	4629      	mov	r1, r5
 8017894:	eb71 0303 	sbcs.w	r3, r1, r3
 8017898:	f080 80af 	bcs.w	80179fa <_fx_file_write+0xc2a>
            /* We need to move to the next logical sector, but first
               determine if the next logical sector is within the same
               cluster.  */

            /* Increment the current relative sector in the cluster.  */
            file_ptr -> fx_file_current_relative_sector++;
 801789c:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80178a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80178a2:	1c5a      	adds	r2, r3, #1
 80178a4:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80178a8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Determine if this is in a new cluster.  */
            if (file_ptr -> fx_file_current_relative_sector >=
 80178aa:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80178ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
                media_ptr -> fx_media_sectors_per_cluster)
 80178b0:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80178b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
            if (file_ptr -> fx_file_current_relative_sector >=
 80178b6:	429a      	cmp	r2, r3
 80178b8:	f0c0 8086 	bcc.w	80179c8 <_fx_file_write+0xbf8>
                {
#endif /* FX_ENABLE_EXFAT */

                    /* Read the FAT entry of the current cluster to find
                       the next cluster.  */
                    status =  _fx_utility_FAT_entry_read(media_ptr,
 80178bc:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80178c0:	6a19      	ldr	r1, [r3, #32]
 80178c2:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 80178c6:	461a      	mov	r2, r3
 80178c8:	f8d7 01ac 	ldr.w	r0, [r7, #428]	; 0x1ac
 80178cc:	f001 ff48 	bl	8019760 <_fx_utility_FAT_entry_read>
 80178d0:	f8c7 01ec 	str.w	r0, [r7, #492]	; 0x1ec
                                                         file_ptr -> fx_file_current_physical_cluster, &next_cluster);

                    /* Determine if an error is present.  */
                    if ((status != FX_SUCCESS) || (next_cluster < FX_FAT_ENTRY_START) ||
 80178d4:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80178d8:	2b00      	cmp	r3, #0
 80178da:	d10d      	bne.n	80178f8 <_fx_file_write+0xb28>
 80178dc:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80178e0:	2b01      	cmp	r3, #1
 80178e2:	d909      	bls.n	80178f8 <_fx_file_write+0xb28>
                        (next_cluster > media_ptr -> fx_media_fat_reserved))
 80178e4:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80178e8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80178ec:	f8d3 24a8 	ldr.w	r2, [r3, #1192]	; 0x4a8
 80178f0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
                    if ((status != FX_SUCCESS) || (next_cluster < FX_FAT_ENTRY_START) ||
 80178f4:	429a      	cmp	r2, r3
 80178f6:	d20f      	bcs.n	8017918 <_fx_file_write+0xb48>
#ifdef FX_ENABLE_FAULT_TOLERANT
                        FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

                        /* Release media protection.  */
                        FX_UNPROTECT
 80178f8:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80178fc:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8017900:	4618      	mov	r0, r3
 8017902:	f005 f99f 	bl	801cc44 <_tx_mutex_put>

                        /* Send error message back to caller.  */
                        if (status != FX_SUCCESS)
 8017906:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 801790a:	2b00      	cmp	r3, #0
 801790c:	d002      	beq.n	8017914 <_fx_file_write+0xb44>
                        {
                            return(status);
 801790e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8017912:	e197      	b.n	8017c44 <_fx_file_write+0xe74>
                        }
                        else
                        {
                            return(FX_FILE_CORRUPT);
 8017914:	2308      	movs	r3, #8
 8017916:	e195      	b.n	8017c44 <_fx_file_write+0xe74>
                }
#endif /* FX_ENABLE_EXFAT */

                /* Otherwise, we have a new cluster.  Save it in the file
                   control block and calculate a new logical sector value.  */
                file_ptr -> fx_file_current_physical_cluster =  next_cluster;
 8017918:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 801791c:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8017920:	621a      	str	r2, [r3, #32]
                file_ptr -> fx_file_current_relative_cluster++;
 8017922:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8017926:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017928:	1c5a      	adds	r2, r3, #1
 801792a:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 801792e:	635a      	str	r2, [r3, #52]	; 0x34
                file_ptr -> fx_file_current_logical_sector = ((ULONG)media_ptr -> fx_media_data_sector_start) +
 8017930:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8017934:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017936:	2200      	movs	r2, #0
 8017938:	673b      	str	r3, [r7, #112]	; 0x70
 801793a:	677a      	str	r2, [r7, #116]	; 0x74
                    ((((ULONG64)next_cluster) - FX_FAT_ENTRY_START) *
 801793c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8017940:	2200      	movs	r2, #0
 8017942:	66bb      	str	r3, [r7, #104]	; 0x68
 8017944:	66fa      	str	r2, [r7, #108]	; 0x6c
 8017946:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 801794a:	460b      	mov	r3, r1
 801794c:	3b02      	subs	r3, #2
 801794e:	663b      	str	r3, [r7, #96]	; 0x60
 8017950:	4613      	mov	r3, r2
 8017952:	f143 33ff 	adc.w	r3, r3, #4294967295
 8017956:	667b      	str	r3, [r7, #100]	; 0x64
                     ((ULONG)media_ptr -> fx_media_sectors_per_cluster));
 8017958:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 801795c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801795e:	2200      	movs	r2, #0
 8017960:	65bb      	str	r3, [r7, #88]	; 0x58
 8017962:	65fa      	str	r2, [r7, #92]	; 0x5c
                    ((((ULONG64)next_cluster) - FX_FAT_ENTRY_START) *
 8017964:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8017968:	462b      	mov	r3, r5
 801796a:	e9d7 8916 	ldrd	r8, r9, [r7, #88]	; 0x58
 801796e:	4642      	mov	r2, r8
 8017970:	fb02 f203 	mul.w	r2, r2, r3
 8017974:	464b      	mov	r3, r9
 8017976:	4621      	mov	r1, r4
 8017978:	fb01 f303 	mul.w	r3, r1, r3
 801797c:	4413      	add	r3, r2
 801797e:	4622      	mov	r2, r4
 8017980:	4641      	mov	r1, r8
 8017982:	fba2 1201 	umull	r1, r2, r2, r1
 8017986:	f8c7 216c 	str.w	r2, [r7, #364]	; 0x16c
 801798a:	460a      	mov	r2, r1
 801798c:	f8c7 2168 	str.w	r2, [r7, #360]	; 0x168
 8017990:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 8017994:	4413      	add	r3, r2
 8017996:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
                file_ptr -> fx_file_current_logical_sector = ((ULONG)media_ptr -> fx_media_data_sector_start) +
 801799a:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 801799e:	4623      	mov	r3, r4
 80179a0:	e9d7 015a 	ldrd	r0, r1, [r7, #360]	; 0x168
 80179a4:	4602      	mov	r2, r0
 80179a6:	189b      	adds	r3, r3, r2
 80179a8:	653b      	str	r3, [r7, #80]	; 0x50
 80179aa:	462b      	mov	r3, r5
 80179ac:	460a      	mov	r2, r1
 80179ae:	4153      	adcs	r3, r2
 80179b0:	657b      	str	r3, [r7, #84]	; 0x54
 80179b2:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80179b6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80179ba:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
                file_ptr -> fx_file_current_relative_sector =  0;
 80179be:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80179c2:	2300      	movs	r3, #0
 80179c4:	6393      	str	r3, [r2, #56]	; 0x38
 80179c6:	e00e      	b.n	80179e6 <_fx_file_write+0xc16>
            else
            {

                /* Still within the same cluster so just increment the
                   logical sector.  */
                file_ptr -> fx_file_current_logical_sector++;
 80179c8:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80179cc:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80179d0:	1c51      	adds	r1, r2, #1
 80179d2:	64b9      	str	r1, [r7, #72]	; 0x48
 80179d4:	f143 0300 	adc.w	r3, r3, #0
 80179d8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80179da:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80179de:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80179e2:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
            }

            /* In either case, we are now positioned at a new sector so
               clear the logical sector offset.  */
            file_ptr -> fx_file_current_logical_offset =  0;
 80179e6:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80179ea:	2300      	movs	r3, #0
 80179ec:	6313      	str	r3, [r2, #48]	; 0x30
    while (bytes_remaining)
 80179ee:	e9d7 2378 	ldrd	r2, r3, [r7, #480]	; 0x1e0
 80179f2:	4313      	orrs	r3, r2
 80179f4:	f47f ad6a 	bne.w	80174cc <_fx_file_write+0x6fc>
 80179f8:	e000      	b.n	80179fc <_fx_file_write+0xc2c>
                break;
 80179fa:	bf00      	nop
    }
#endif /* FX_ENABLE_FAULT_TOLERANT */

    /* Adjust the current file offset accordingly.  */
    file_ptr -> fx_file_current_file_offset =
        file_ptr -> fx_file_current_file_offset + size;
 80179fc:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8017a00:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8017a04:	f8d7 1194 	ldr.w	r1, [r7, #404]	; 0x194
 8017a08:	2000      	movs	r0, #0
 8017a0a:	6439      	str	r1, [r7, #64]	; 0x40
 8017a0c:	6478      	str	r0, [r7, #68]	; 0x44
 8017a0e:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 8017a12:	4621      	mov	r1, r4
 8017a14:	1851      	adds	r1, r2, r1
 8017a16:	63b9      	str	r1, [r7, #56]	; 0x38
 8017a18:	4629      	mov	r1, r5
 8017a1a:	eb43 0101 	adc.w	r1, r3, r1
 8017a1e:	63f9      	str	r1, [r7, #60]	; 0x3c
    file_ptr -> fx_file_current_file_offset =
 8017a20:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8017a24:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8017a28:	e9c3 1210 	strd	r1, r2, [r3, #64]	; 0x40

    /* Copy the new file size into the directory entry.  */
    file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size =
        file_ptr -> fx_file_current_file_size;
 8017a2c:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8017a30:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
    file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size =
 8017a34:	f8d7 119c 	ldr.w	r1, [r7, #412]	; 0x19c
 8017a38:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0

    /* Determine if this write was done past the previous file size.  */
    if (file_ptr -> fx_file_current_file_offset >
 8017a3c:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8017a40:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
        file_ptr -> fx_file_current_file_size)
 8017a44:	f8d7 119c 	ldr.w	r1, [r7, #412]	; 0x19c
 8017a48:	e9d1 0112 	ldrd	r0, r1, [r1, #72]	; 0x48
    if (file_ptr -> fx_file_current_file_offset >
 8017a4c:	4290      	cmp	r0, r2
 8017a4e:	eb71 0303 	sbcs.w	r3, r1, r3
 8017a52:	f080 80de 	bcs.w	8017c12 <_fx_file_write+0xe42>
    {

        /* Yes, we have written past the previous end of the file.  Update
           the file size.  */
        file_ptr -> fx_file_current_file_size =  file_ptr -> fx_file_current_file_offset;
 8017a56:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8017a5a:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8017a5e:	f8d7 119c 	ldr.w	r1, [r7, #412]	; 0x19c
 8017a62:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48

#ifndef FX_DONT_UPDATE_OPEN_FILES

        /* Search the opened files list to see if the same file is opened for reading.  */
        open_count =  media_ptr -> fx_media_opened_file_count;
 8017a66:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8017a6a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8017a6e:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
        search_ptr =  media_ptr -> fx_media_opened_file_list;
 8017a72:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8017a76:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8017a7a:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
        while (open_count)
 8017a7e:	e0c3      	b.n	8017c08 <_fx_file_write+0xe38>
        {

            /* Is this file the same file opened for reading?  */
            if ((search_ptr != file_ptr) &&
 8017a80:	f8d7 21b0 	ldr.w	r2, [r7, #432]	; 0x1b0
 8017a84:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8017a88:	429a      	cmp	r2, r3
 8017a8a:	f000 80b3 	beq.w	8017bf4 <_fx_file_write+0xe24>
                (search_ptr -> fx_file_dir_entry.fx_dir_entry_log_sector ==
 8017a8e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8017a92:	e9d3 012a 	ldrd	r0, r1, [r3, #168]	; 0xa8
                 file_ptr -> fx_file_dir_entry.fx_dir_entry_log_sector) &&
 8017a96:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8017a9a:	e9d3 232a 	ldrd	r2, r3, [r3, #168]	; 0xa8
            if ((search_ptr != file_ptr) &&
 8017a9e:	4299      	cmp	r1, r3
 8017aa0:	bf08      	it	eq
 8017aa2:	4290      	cmpeq	r0, r2
 8017aa4:	f040 80a6 	bne.w	8017bf4 <_fx_file_write+0xe24>
                (search_ptr -> fx_file_dir_entry.fx_dir_entry_byte_offset ==
 8017aa8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8017aac:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
                 file_ptr -> fx_file_dir_entry.fx_dir_entry_byte_offset))
 8017ab0:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8017ab4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
                 file_ptr -> fx_file_dir_entry.fx_dir_entry_log_sector) &&
 8017ab8:	429a      	cmp	r2, r3
 8017aba:	f040 809b 	bne.w	8017bf4 <_fx_file_write+0xe24>
            {

                /* Yes, the same file is opened for reading.  */

                /* Setup the new size.  */
                search_ptr -> fx_file_current_file_size =  file_ptr -> fx_file_current_file_offset;
 8017abe:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8017ac2:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8017ac6:	f8d7 11b0 	ldr.w	r1, [r7, #432]	; 0x1b0
 8017aca:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48

                /* Setup the new directory entry.  */
                search_ptr -> fx_file_dir_entry.fx_dir_entry_cluster =      file_ptr -> fx_file_dir_entry.fx_dir_entry_cluster;
 8017ace:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8017ad2:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8017ad6:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8017ada:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
                search_ptr -> fx_file_dir_entry.fx_dir_entry_file_size =    file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size;
 8017ade:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8017ae2:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	; 0xa0
 8017ae6:	f8d7 11b0 	ldr.w	r1, [r7, #432]	; 0x1b0
 8017aea:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0
                search_ptr -> fx_file_dir_entry.fx_dir_entry_log_sector =   file_ptr -> fx_file_dir_entry.fx_dir_entry_log_sector;
 8017aee:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8017af2:	e9d3 232a 	ldrd	r2, r3, [r3, #168]	; 0xa8
 8017af6:	f8d7 11b0 	ldr.w	r1, [r7, #432]	; 0x1b0
 8017afa:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8
                search_ptr -> fx_file_dir_entry.fx_dir_entry_byte_offset =  file_ptr -> fx_file_dir_entry.fx_dir_entry_byte_offset;
 8017afe:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8017b02:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8017b06:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8017b0a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

                /* Setup the last cluster. This really isn't used during reading, but it is nice to keep things
                   consistent.  */
                search_ptr -> fx_file_last_physical_cluster =  file_ptr -> fx_file_last_physical_cluster;
 8017b0e:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8017b12:	69da      	ldr	r2, [r3, #28]
 8017b14:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8017b18:	61da      	str	r2, [r3, #28]

                /* Update the available clusters as well.  */
                search_ptr -> fx_file_current_available_size =  file_ptr -> fx_file_current_available_size;
 8017b1a:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8017b1e:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8017b22:	f8d7 11b0 	ldr.w	r1, [r7, #432]	; 0x1b0
 8017b26:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50

                /* Determine if an empty file was previously opened.  */
                if (search_ptr -> fx_file_total_clusters == 0)
 8017b2a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8017b2e:	691b      	ldr	r3, [r3, #16]
 8017b30:	2b00      	cmp	r3, #0
 8017b32:	d15f      	bne.n	8017bf4 <_fx_file_write+0xe24>
                {

                    /* Setup initial parameters.  */
                    search_ptr -> fx_file_total_clusters =            file_ptr -> fx_file_total_clusters;
 8017b34:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8017b38:	691a      	ldr	r2, [r3, #16]
 8017b3a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8017b3e:	611a      	str	r2, [r3, #16]
                    search_ptr -> fx_file_current_physical_cluster =  file_ptr -> fx_file_first_physical_cluster;
 8017b40:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8017b44:	695a      	ldr	r2, [r3, #20]
 8017b46:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8017b4a:	621a      	str	r2, [r3, #32]
                    search_ptr -> fx_file_current_relative_cluster =  0;
 8017b4c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8017b50:	2200      	movs	r2, #0
 8017b52:	635a      	str	r2, [r3, #52]	; 0x34
                    search_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 8017b54:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8017b58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017b5a:	2200      	movs	r2, #0
 8017b5c:	633b      	str	r3, [r7, #48]	; 0x30
 8017b5e:	637a      	str	r2, [r7, #52]	; 0x34
                        (((ULONG64)(file_ptr -> fx_file_first_physical_cluster - FX_FAT_ENTRY_START)) *
 8017b60:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8017b64:	695b      	ldr	r3, [r3, #20]
 8017b66:	3b02      	subs	r3, #2
 8017b68:	2200      	movs	r2, #0
 8017b6a:	62bb      	str	r3, [r7, #40]	; 0x28
 8017b6c:	62fa      	str	r2, [r7, #44]	; 0x2c
                         ((ULONG)media_ptr -> fx_media_sectors_per_cluster));
 8017b6e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8017b72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017b74:	2200      	movs	r2, #0
 8017b76:	623b      	str	r3, [r7, #32]
 8017b78:	627a      	str	r2, [r7, #36]	; 0x24
                        (((ULONG64)(file_ptr -> fx_file_first_physical_cluster - FX_FAT_ENTRY_START)) *
 8017b7a:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8017b7e:	462b      	mov	r3, r5
 8017b80:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8017b84:	4642      	mov	r2, r8
 8017b86:	fb02 f203 	mul.w	r2, r2, r3
 8017b8a:	464b      	mov	r3, r9
 8017b8c:	4621      	mov	r1, r4
 8017b8e:	fb01 f303 	mul.w	r3, r1, r3
 8017b92:	4413      	add	r3, r2
 8017b94:	4622      	mov	r2, r4
 8017b96:	4641      	mov	r1, r8
 8017b98:	fba2 1201 	umull	r1, r2, r2, r1
 8017b9c:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 8017ba0:	460a      	mov	r2, r1
 8017ba2:	f8c7 2160 	str.w	r2, [r7, #352]	; 0x160
 8017ba6:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 8017baa:	4413      	add	r3, r2
 8017bac:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
                    search_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 8017bb0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8017bb4:	4623      	mov	r3, r4
 8017bb6:	e9d7 0158 	ldrd	r0, r1, [r7, #352]	; 0x160
 8017bba:	4602      	mov	r2, r0
 8017bbc:	189b      	adds	r3, r3, r2
 8017bbe:	61bb      	str	r3, [r7, #24]
 8017bc0:	462b      	mov	r3, r5
 8017bc2:	460a      	mov	r2, r1
 8017bc4:	4153      	adcs	r3, r2
 8017bc6:	61fb      	str	r3, [r7, #28]
 8017bc8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8017bcc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8017bd0:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
                    search_ptr -> fx_file_current_relative_sector =   0;
 8017bd4:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8017bd8:	2200      	movs	r2, #0
 8017bda:	639a      	str	r2, [r3, #56]	; 0x38
                    search_ptr -> fx_file_current_logical_offset =    0;
 8017bdc:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8017be0:	2200      	movs	r2, #0
 8017be2:	631a      	str	r2, [r3, #48]	; 0x30
                    search_ptr -> fx_file_current_file_offset =       0;
 8017be4:	f8d7 11b0 	ldr.w	r1, [r7, #432]	; 0x1b0
 8017be8:	f04f 0200 	mov.w	r2, #0
 8017bec:	f04f 0300 	mov.w	r3, #0
 8017bf0:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
                }
            }

            /* Adjust the pointer and decrement the search count.  */
            search_ptr =  search_ptr -> fx_file_opened_next;
 8017bf4:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8017bf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017bfa:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
            open_count--;
 8017bfe:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8017c02:	3b01      	subs	r3, #1
 8017c04:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
        while (open_count)
 8017c08:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8017c0c:	2b00      	cmp	r3, #0
 8017c0e:	f47f af37 	bne.w	8017a80 <_fx_file_write+0xcb0>
        }
#endif
    }

    /* Finally, mark this file as modified.  */
    file_ptr -> fx_file_modified =  FX_TRUE;
 8017c12:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8017c16:	2201      	movs	r2, #1
 8017c18:	731a      	strb	r2, [r3, #12]
        file_ptr -> fx_file_maximum_size_used = file_ptr -> fx_file_current_file_offset;
    }
#endif /* FX_ENABLE_FAULT_TOLERANT */

    /* Invoke file write callback. */
    if (file_ptr -> fx_file_write_notify)
 8017c1a:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8017c1e:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 8017c22:	2b00      	cmp	r3, #0
 8017c24:	d006      	beq.n	8017c34 <_fx_file_write+0xe64>
    {
        file_ptr -> fx_file_write_notify(file_ptr);
 8017c26:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8017c2a:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 8017c2e:	f8d7 019c 	ldr.w	r0, [r7, #412]	; 0x19c
 8017c32:	4798      	blx	r3
    }

    /* Release media protection.  */
    FX_UNPROTECT
 8017c34:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8017c38:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8017c3c:	4618      	mov	r0, r3
 8017c3e:	f005 f801 	bl	801cc44 <_tx_mutex_put>

    /* Return a successful status to the caller.  */
    return(FX_SUCCESS);
 8017c42:	2300      	movs	r3, #0
}
 8017c44:	4618      	mov	r0, r3
 8017c46:	f507 77f8 	add.w	r7, r7, #496	; 0x1f0
 8017c4a:	46bd      	mov	sp, r7
 8017c4c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08017c50 <_fx_media_abort>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fx_media_abort(FX_MEDIA  *media_ptr)
{
 8017c50:	b580      	push	{r7, lr}
 8017c52:	b088      	sub	sp, #32
 8017c54:	af00      	add	r7, sp, #0
 8017c56:	6078      	str	r0, [r7, #4]


#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of times this service has been called.  */
    media_ptr -> fx_media_aborts++;
 8017c58:	687b      	ldr	r3, [r7, #4]
 8017c5a:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 8017c5e:	1c5a      	adds	r2, r3, #1
 8017c60:	687b      	ldr	r3, [r7, #4]
 8017c62:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
#endif

    /* Check the media to make sure it is open.  */
    if (media_ptr -> fx_media_id != FX_MEDIA_ID)
 8017c66:	687b      	ldr	r3, [r7, #4]
 8017c68:	681b      	ldr	r3, [r3, #0]
 8017c6a:	4a3f      	ldr	r2, [pc, #252]	; (8017d68 <_fx_media_abort+0x118>)
 8017c6c:	4293      	cmp	r3, r2
 8017c6e:	d001      	beq.n	8017c74 <_fx_media_abort+0x24>
    {

        /* Return the media not opened error.  */
        return(FX_MEDIA_NOT_OPEN);
 8017c70:	2311      	movs	r3, #17
 8017c72:	e074      	b.n	8017d5e <_fx_media_abort+0x10e>

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_MEDIA_ABORT, media_ptr, 0, 0, 0, FX_TRACE_MEDIA_EVENTS, 0, 0)

    /* Protect against other threads accessing the media.  */
    FX_PROTECT
 8017c74:	687b      	ldr	r3, [r7, #4]
 8017c76:	681b      	ldr	r3, [r3, #0]
 8017c78:	4a3b      	ldr	r2, [pc, #236]	; (8017d68 <_fx_media_abort+0x118>)
 8017c7a:	4293      	cmp	r3, r2
 8017c7c:	d001      	beq.n	8017c82 <_fx_media_abort+0x32>
 8017c7e:	2311      	movs	r3, #17
 8017c80:	e06d      	b.n	8017d5e <_fx_media_abort+0x10e>
 8017c82:	687b      	ldr	r3, [r7, #4]
 8017c84:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8017c88:	f04f 31ff 	mov.w	r1, #4294967295
 8017c8c:	4618      	mov	r0, r3
 8017c8e:	f004 fd61 	bl	801c754 <_tx_mutex_get>
 8017c92:	4603      	mov	r3, r0
 8017c94:	2b00      	cmp	r3, #0
 8017c96:	d001      	beq.n	8017c9c <_fx_media_abort+0x4c>
 8017c98:	2311      	movs	r3, #17
 8017c9a:	e060      	b.n	8017d5e <_fx_media_abort+0x10e>

    /* Loop through the media's open files.  */
    open_count =  media_ptr -> fx_media_opened_file_count;
 8017c9c:	687b      	ldr	r3, [r7, #4]
 8017c9e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8017ca2:	61fb      	str	r3, [r7, #28]
    file_ptr =    media_ptr -> fx_media_opened_file_list;
 8017ca4:	687b      	ldr	r3, [r7, #4]
 8017ca6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8017caa:	61bb      	str	r3, [r7, #24]
    while (open_count)
 8017cac:	e008      	b.n	8017cc0 <_fx_media_abort+0x70>
    {

        /* Mark the file as aborted.  */
        file_ptr -> fx_file_id =  FX_FILE_ABORTED_ID;
 8017cae:	69bb      	ldr	r3, [r7, #24]
 8017cb0:	4a2e      	ldr	r2, [pc, #184]	; (8017d6c <_fx_media_abort+0x11c>)
 8017cb2:	601a      	str	r2, [r3, #0]

        /* Adjust the pointer and decrement the file opened count.  */
        file_ptr =  file_ptr -> fx_file_opened_next;
 8017cb4:	69bb      	ldr	r3, [r7, #24]
 8017cb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017cb8:	61bb      	str	r3, [r7, #24]
        open_count--;
 8017cba:	69fb      	ldr	r3, [r7, #28]
 8017cbc:	3b01      	subs	r3, #1
 8017cbe:	61fb      	str	r3, [r7, #28]
    while (open_count)
 8017cc0:	69fb      	ldr	r3, [r7, #28]
 8017cc2:	2b00      	cmp	r3, #0
 8017cc4:	d1f3      	bne.n	8017cae <_fx_media_abort+0x5e>
    }

    /* Build the "abort" I/O driver request.  */
    media_ptr -> fx_media_driver_request =      FX_DRIVER_ABORT;
 8017cc6:	687b      	ldr	r3, [r7, #4]
 8017cc8:	2203      	movs	r2, #3
 8017cca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 8017cce:	687b      	ldr	r3, [r7, #4]
 8017cd0:	2290      	movs	r2, #144	; 0x90
 8017cd2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_ABORT, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

    /* Call the specified I/O driver with the abort request.  */
    (media_ptr -> fx_media_driver_entry) (media_ptr);
 8017cd6:	687b      	ldr	r3, [r7, #4]
 8017cd8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8017cdc:	6878      	ldr	r0, [r7, #4]
 8017cde:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8017ce0:	f3ef 8310 	mrs	r3, PRIMASK
 8017ce4:	613b      	str	r3, [r7, #16]
    return(posture);
 8017ce6:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 8017ce8:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 8017cea:	b672      	cpsid	i
    return(int_posture);
 8017cec:	68fb      	ldr	r3, [r7, #12]

    /* Now remove this media from the open list.  */

    /* Lockout interrupts for media removal.  */
    FX_DISABLE_INTS
 8017cee:	617b      	str	r3, [r7, #20]

    /* See if the media is the only one on the media opened list.  */
    if (_fx_system_media_opened_count == ((ULONG) 1))
 8017cf0:	4b1f      	ldr	r3, [pc, #124]	; (8017d70 <_fx_media_abort+0x120>)
 8017cf2:	681b      	ldr	r3, [r3, #0]
 8017cf4:	2b01      	cmp	r3, #1
 8017cf6:	d103      	bne.n	8017d00 <_fx_media_abort+0xb0>
    {

        /* Only opened media, just set the opened list to NULL.  */
        _fx_system_media_opened_ptr =  FX_NULL;
 8017cf8:	4b1e      	ldr	r3, [pc, #120]	; (8017d74 <_fx_media_abort+0x124>)
 8017cfa:	2200      	movs	r2, #0
 8017cfc:	601a      	str	r2, [r3, #0]
 8017cfe:	e019      	b.n	8017d34 <_fx_media_abort+0xe4>
    }
    else
    {

        /* Otherwise, not the only opened media, link-up the neighbors.  */
        (media_ptr -> fx_media_opened_next) -> fx_media_opened_previous =
 8017d00:	687b      	ldr	r3, [r7, #4]
 8017d02:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
            media_ptr -> fx_media_opened_previous;
 8017d06:	687a      	ldr	r2, [r7, #4]
 8017d08:	f8d2 20d4 	ldr.w	r2, [r2, #212]	; 0xd4
        (media_ptr -> fx_media_opened_next) -> fx_media_opened_previous =
 8017d0c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
        (media_ptr -> fx_media_opened_previous) -> fx_media_opened_next =
 8017d10:	687b      	ldr	r3, [r7, #4]
 8017d12:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
            media_ptr -> fx_media_opened_next;
 8017d16:	687a      	ldr	r2, [r7, #4]
 8017d18:	f8d2 20d0 	ldr.w	r2, [r2, #208]	; 0xd0
        (media_ptr -> fx_media_opened_previous) -> fx_media_opened_next =
 8017d1c:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

        /* See if we have to update the opened list head pointer.  */
        if (_fx_system_media_opened_ptr == media_ptr)
 8017d20:	4b14      	ldr	r3, [pc, #80]	; (8017d74 <_fx_media_abort+0x124>)
 8017d22:	681b      	ldr	r3, [r3, #0]
 8017d24:	687a      	ldr	r2, [r7, #4]
 8017d26:	429a      	cmp	r2, r3
 8017d28:	d104      	bne.n	8017d34 <_fx_media_abort+0xe4>
        {

            /* Yes, move the head pointer to the next opened media. */
            _fx_system_media_opened_ptr =  media_ptr -> fx_media_opened_next;
 8017d2a:	687b      	ldr	r3, [r7, #4]
 8017d2c:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8017d30:	4a10      	ldr	r2, [pc, #64]	; (8017d74 <_fx_media_abort+0x124>)
 8017d32:	6013      	str	r3, [r2, #0]
        }
    }

    /* Decrement the opened media counter.  */
    _fx_system_media_opened_count--;
 8017d34:	4b0e      	ldr	r3, [pc, #56]	; (8017d70 <_fx_media_abort+0x120>)
 8017d36:	681b      	ldr	r3, [r3, #0]
 8017d38:	3b01      	subs	r3, #1
 8017d3a:	4a0d      	ldr	r2, [pc, #52]	; (8017d70 <_fx_media_abort+0x120>)
 8017d3c:	6013      	str	r3, [r2, #0]

    /* Finally, Indicate that this media is aborted.  */
    media_ptr -> fx_media_id =  FX_MEDIA_ABORTED_ID;
 8017d3e:	687b      	ldr	r3, [r7, #4]
 8017d40:	4a0d      	ldr	r2, [pc, #52]	; (8017d78 <_fx_media_abort+0x128>)
 8017d42:	601a      	str	r2, [r3, #0]
 8017d44:	697b      	ldr	r3, [r7, #20]
 8017d46:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8017d48:	68bb      	ldr	r3, [r7, #8]
 8017d4a:	f383 8810 	msr	PRIMASK, r3
}
 8017d4e:	bf00      	nop
#ifndef FX_DONT_CREATE_MUTEX

    /* Note that the protection is never released. The mutex delete
       service will handle all threads waiting access to this media
       control block.  */
    tx_mutex_delete(& (media_ptr -> fx_media_protect));
 8017d50:	687b      	ldr	r3, [r7, #4]
 8017d52:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8017d56:	4618      	mov	r0, r3
 8017d58:	f004 fc52 	bl	801c600 <_tx_mutex_delete>
    /* Release media protection.  */
    FX_UNPROTECT
#endif

    /* Return status to the caller.  */
    return(FX_SUCCESS);
 8017d5c:	2300      	movs	r3, #0
}
 8017d5e:	4618      	mov	r0, r3
 8017d60:	3720      	adds	r7, #32
 8017d62:	46bd      	mov	sp, r7
 8017d64:	bd80      	pop	{r7, pc}
 8017d66:	bf00      	nop
 8017d68:	4d454449 	.word	0x4d454449
 8017d6c:	46494c41 	.word	0x46494c41
 8017d70:	24005048 	.word	0x24005048
 8017d74:	24005044 	.word	0x24005044
 8017d78:	4d454441 	.word	0x4d454441

08017d7c <_fx_media_boot_info_extract>:
/*                                            check for bimap cache size, */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _fx_media_boot_info_extract(FX_MEDIA *media_ptr)
{
 8017d7c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8017d80:	b084      	sub	sp, #16
 8017d82:	af00      	add	r7, sp, #0
 8017d84:	6078      	str	r0, [r7, #4]

UCHAR *boot_sector;


    /* Move the buffer pointer into a local copy.  */
    boot_sector =  media_ptr -> fx_media_driver_buffer;
 8017d86:	687b      	ldr	r3, [r7, #4]
 8017d88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017d8c:	60fb      	str	r3, [r7, #12]

    /* Extract the number of bytes per sector.  */
    media_ptr -> fx_media_bytes_per_sector =    _fx_utility_16_unsigned_read(&boot_sector[FX_BYTES_SECTOR]);
 8017d8e:	68fb      	ldr	r3, [r7, #12]
 8017d90:	330b      	adds	r3, #11
 8017d92:	4618      	mov	r0, r3
 8017d94:	f001 fc7e 	bl	8019694 <_fx_utility_16_unsigned_read>
 8017d98:	4602      	mov	r2, r0
 8017d9a:	687b      	ldr	r3, [r7, #4]
 8017d9c:	629a      	str	r2, [r3, #40]	; 0x28
    if (media_ptr -> fx_media_bytes_per_sector == 0)
 8017d9e:	687b      	ldr	r3, [r7, #4]
 8017da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017da2:	2b00      	cmp	r3, #0
 8017da4:	d101      	bne.n	8017daa <_fx_media_boot_info_extract+0x2e>
        return(_fx_utility_exFAT_geometry_check(media_ptr, boot_sector));
    }
    else
    {
#else
        return(FX_MEDIA_INVALID);
 8017da6:	2302      	movs	r3, #2
 8017da8:	e08c      	b.n	8017ec4 <_fx_media_boot_info_extract+0x148>
#endif /* FX_ENABLE_EXFAT */


        /* FAT12/16/32 volume.  */
        /* Extract the number of sectors per track.  */
        media_ptr -> fx_media_sectors_per_track =   _fx_utility_16_unsigned_read(&boot_sector[FX_SECTORS_PER_TRK]);
 8017daa:	68fb      	ldr	r3, [r7, #12]
 8017dac:	3318      	adds	r3, #24
 8017dae:	4618      	mov	r0, r3
 8017db0:	f001 fc70 	bl	8019694 <_fx_utility_16_unsigned_read>
 8017db4:	4602      	mov	r2, r0
 8017db6:	687b      	ldr	r3, [r7, #4]
 8017db8:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Extract the number of heads.  */
        media_ptr -> fx_media_heads =               _fx_utility_16_unsigned_read(&boot_sector[FX_HEADS]);
 8017dba:	68fb      	ldr	r3, [r7, #12]
 8017dbc:	331a      	adds	r3, #26
 8017dbe:	4618      	mov	r0, r3
 8017dc0:	f001 fc68 	bl	8019694 <_fx_utility_16_unsigned_read>
 8017dc4:	4602      	mov	r2, r0
 8017dc6:	687b      	ldr	r3, [r7, #4]
 8017dc8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Extract the total number of sectors.  */
        media_ptr -> fx_media_total_sectors =       _fx_utility_16_unsigned_read(&boot_sector[FX_SECTORS]);
 8017dca:	68fb      	ldr	r3, [r7, #12]
 8017dcc:	3313      	adds	r3, #19
 8017dce:	4618      	mov	r0, r3
 8017dd0:	f001 fc60 	bl	8019694 <_fx_utility_16_unsigned_read>
 8017dd4:	4603      	mov	r3, r0
 8017dd6:	2200      	movs	r2, #0
 8017dd8:	4698      	mov	r8, r3
 8017dda:	4691      	mov	r9, r2
 8017ddc:	687b      	ldr	r3, [r7, #4]
 8017dde:	e9c3 890e 	strd	r8, r9, [r3, #56]	; 0x38
        if (media_ptr -> fx_media_total_sectors == 0)
 8017de2:	687b      	ldr	r3, [r7, #4]
 8017de4:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8017de8:	4313      	orrs	r3, r2
 8017dea:	d10b      	bne.n	8017e04 <_fx_media_boot_info_extract+0x88>
        {
            media_ptr -> fx_media_total_sectors = _fx_utility_32_unsigned_read(&boot_sector[FX_HUGE_SECTORS]);
 8017dec:	68fb      	ldr	r3, [r7, #12]
 8017dee:	3320      	adds	r3, #32
 8017df0:	4618      	mov	r0, r3
 8017df2:	f001 fc77 	bl	80196e4 <_fx_utility_32_unsigned_read>
 8017df6:	4603      	mov	r3, r0
 8017df8:	2200      	movs	r2, #0
 8017dfa:	461c      	mov	r4, r3
 8017dfc:	4615      	mov	r5, r2
 8017dfe:	687b      	ldr	r3, [r7, #4]
 8017e00:	e9c3 450e 	strd	r4, r5, [r3, #56]	; 0x38
        }

        if (media_ptr -> fx_media_total_sectors == 0)
 8017e04:	687b      	ldr	r3, [r7, #4]
 8017e06:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8017e0a:	4313      	orrs	r3, r2
 8017e0c:	d101      	bne.n	8017e12 <_fx_media_boot_info_extract+0x96>
        {
            return(FX_MEDIA_INVALID);
 8017e0e:	2302      	movs	r3, #2
 8017e10:	e058      	b.n	8017ec4 <_fx_media_boot_info_extract+0x148>
        }

        /* Extract the number of reserved sectors before the first FAT.  */
        media_ptr -> fx_media_reserved_sectors =    _fx_utility_16_unsigned_read(&boot_sector[FX_RESERVED_SECTORS]);
 8017e12:	68fb      	ldr	r3, [r7, #12]
 8017e14:	330e      	adds	r3, #14
 8017e16:	4618      	mov	r0, r3
 8017e18:	f001 fc3c 	bl	8019694 <_fx_utility_16_unsigned_read>
 8017e1c:	4602      	mov	r2, r0
 8017e1e:	687b      	ldr	r3, [r7, #4]
 8017e20:	645a      	str	r2, [r3, #68]	; 0x44
        if (media_ptr -> fx_media_reserved_sectors == 0)
 8017e22:	687b      	ldr	r3, [r7, #4]
 8017e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017e26:	2b00      	cmp	r3, #0
 8017e28:	d101      	bne.n	8017e2e <_fx_media_boot_info_extract+0xb2>
        {
            return(FX_MEDIA_INVALID);
 8017e2a:	2302      	movs	r3, #2
 8017e2c:	e04a      	b.n	8017ec4 <_fx_media_boot_info_extract+0x148>
        }

        /* Extract the number of sectors per cluster.  */
        media_ptr -> fx_media_sectors_per_cluster = ((UINT)boot_sector[FX_SECTORS_CLUSTER] & 0xFF);
 8017e2e:	68fb      	ldr	r3, [r7, #12]
 8017e30:	330d      	adds	r3, #13
 8017e32:	781b      	ldrb	r3, [r3, #0]
 8017e34:	461a      	mov	r2, r3
 8017e36:	687b      	ldr	r3, [r7, #4]
 8017e38:	655a      	str	r2, [r3, #84]	; 0x54

        /* There should always be at least one reserved sector, representing the boot record itself.  */
        if (media_ptr -> fx_media_sectors_per_cluster == 0)
 8017e3a:	687b      	ldr	r3, [r7, #4]
 8017e3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017e3e:	2b00      	cmp	r3, #0
 8017e40:	d101      	bne.n	8017e46 <_fx_media_boot_info_extract+0xca>
        {
            return(FX_MEDIA_INVALID);
 8017e42:	2302      	movs	r3, #2
 8017e44:	e03e      	b.n	8017ec4 <_fx_media_boot_info_extract+0x148>
        }

        /* Extract the number of sectors per FAT.  */
        media_ptr -> fx_media_sectors_per_FAT =     _fx_utility_16_unsigned_read(&boot_sector[FX_SECTORS_PER_FAT]);
 8017e46:	68fb      	ldr	r3, [r7, #12]
 8017e48:	3316      	adds	r3, #22
 8017e4a:	4618      	mov	r0, r3
 8017e4c:	f001 fc22 	bl	8019694 <_fx_utility_16_unsigned_read>
 8017e50:	4602      	mov	r2, r0
 8017e52:	687b      	ldr	r3, [r7, #4]
 8017e54:	659a      	str	r2, [r3, #88]	; 0x58
        if (media_ptr -> fx_media_sectors_per_FAT == 0)
 8017e56:	687b      	ldr	r3, [r7, #4]
 8017e58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017e5a:	2b00      	cmp	r3, #0
 8017e5c:	d107      	bne.n	8017e6e <_fx_media_boot_info_extract+0xf2>
        {
            media_ptr -> fx_media_sectors_per_FAT = _fx_utility_32_unsigned_read(&boot_sector[FX_SECTORS_PER_FAT_32]);
 8017e5e:	68fb      	ldr	r3, [r7, #12]
 8017e60:	3324      	adds	r3, #36	; 0x24
 8017e62:	4618      	mov	r0, r3
 8017e64:	f001 fc3e 	bl	80196e4 <_fx_utility_32_unsigned_read>
 8017e68:	4602      	mov	r2, r0
 8017e6a:	687b      	ldr	r3, [r7, #4]
 8017e6c:	659a      	str	r2, [r3, #88]	; 0x58
        }

        if (media_ptr -> fx_media_sectors_per_FAT == 0)
 8017e6e:	687b      	ldr	r3, [r7, #4]
 8017e70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017e72:	2b00      	cmp	r3, #0
 8017e74:	d101      	bne.n	8017e7a <_fx_media_boot_info_extract+0xfe>
        {
            return(FX_MEDIA_INVALID);
 8017e76:	2302      	movs	r3, #2
 8017e78:	e024      	b.n	8017ec4 <_fx_media_boot_info_extract+0x148>
        }

        /* Extract the number of FATs.  */
        media_ptr -> fx_media_number_of_FATs =      ((UINT)boot_sector[FX_NUMBER_OF_FATS] & 0xFF);
 8017e7a:	68fb      	ldr	r3, [r7, #12]
 8017e7c:	3310      	adds	r3, #16
 8017e7e:	781b      	ldrb	r3, [r3, #0]
 8017e80:	461a      	mov	r2, r3
 8017e82:	687b      	ldr	r3, [r7, #4]
 8017e84:	65da      	str	r2, [r3, #92]	; 0x5c
        if (media_ptr -> fx_media_number_of_FATs == 0)
 8017e86:	687b      	ldr	r3, [r7, #4]
 8017e88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017e8a:	2b00      	cmp	r3, #0
 8017e8c:	d101      	bne.n	8017e92 <_fx_media_boot_info_extract+0x116>
        {
            return(FX_BOOT_ERROR);
 8017e8e:	2301      	movs	r3, #1
 8017e90:	e018      	b.n	8017ec4 <_fx_media_boot_info_extract+0x148>

        /* Extract the number of hidden sectors.  */
#ifdef FX_DRIVER_USE_64BIT_LBA
        media_ptr -> fx_media_hidden_sectors =      _fx_utility_64_unsigned_read(&boot_sector[FX_HIDDEN_SECTORS]);
#else
        media_ptr -> fx_media_hidden_sectors =      _fx_utility_32_unsigned_read(&boot_sector[FX_HIDDEN_SECTORS]);
 8017e92:	68fb      	ldr	r3, [r7, #12]
 8017e94:	331c      	adds	r3, #28
 8017e96:	4618      	mov	r0, r3
 8017e98:	f001 fc24 	bl	80196e4 <_fx_utility_32_unsigned_read>
 8017e9c:	4602      	mov	r2, r0
 8017e9e:	687b      	ldr	r3, [r7, #4]
 8017ea0:	671a      	str	r2, [r3, #112]	; 0x70
#endif
        /* Extract the number of root directory entries.  */
        media_ptr -> fx_media_root_directory_entries =  _fx_utility_16_unsigned_read(&boot_sector[FX_ROOT_DIR_ENTRIES]);
 8017ea2:	68fb      	ldr	r3, [r7, #12]
 8017ea4:	3311      	adds	r3, #17
 8017ea6:	4618      	mov	r0, r3
 8017ea8:	f001 fbf4 	bl	8019694 <_fx_utility_16_unsigned_read>
 8017eac:	4602      	mov	r2, r0
 8017eae:	687b      	ldr	r3, [r7, #4]
 8017eb0:	679a      	str	r2, [r3, #120]	; 0x78

        /* Extract root directory starting cluster (32 bit only) and compute start sector */
        media_ptr -> fx_media_root_cluster_32 = _fx_utility_32_unsigned_read(&boot_sector[FX_ROOT_CLUSTER_32]);
 8017eb2:	68fb      	ldr	r3, [r7, #12]
 8017eb4:	332c      	adds	r3, #44	; 0x2c
 8017eb6:	4618      	mov	r0, r3
 8017eb8:	f001 fc14 	bl	80196e4 <_fx_utility_32_unsigned_read>
 8017ebc:	4602      	mov	r2, r0
 8017ebe:	687b      	ldr	r3, [r7, #4]
 8017ec0:	675a      	str	r2, [r3, #116]	; 0x74
#ifdef FX_ENABLE_EXFAT
    }
#endif /* FX_ENABLE_EXFAT */

    /* Return a successful status.  */
    return(FX_SUCCESS);
 8017ec2:	2300      	movs	r3, #0
}
 8017ec4:	4618      	mov	r0, r3
 8017ec6:	3710      	adds	r7, #16
 8017ec8:	46bd      	mov	sp, r7
 8017eca:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

08017ed0 <_fx_media_close>:
/*                                            and cache,                  */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fx_media_close(FX_MEDIA  *media_ptr)
{
 8017ed0:	b580      	push	{r7, lr}
 8017ed2:	b092      	sub	sp, #72	; 0x48
 8017ed4:	af04      	add	r7, sp, #16
 8017ed6:	6078      	str	r0, [r7, #4]
#endif /* FX_DISABLE_FILE_CLOSE */
UINT     status;


    /* Check the media to make sure it is open.  */
    if (media_ptr -> fx_media_id != FX_MEDIA_ID)
 8017ed8:	687b      	ldr	r3, [r7, #4]
 8017eda:	681b      	ldr	r3, [r3, #0]
 8017edc:	4aa6      	ldr	r2, [pc, #664]	; (8018178 <_fx_media_close+0x2a8>)
 8017ede:	4293      	cmp	r3, r2
 8017ee0:	d001      	beq.n	8017ee6 <_fx_media_close+0x16>
    {

        /* Return the media not opened error.  */
        return(FX_MEDIA_NOT_OPEN);
 8017ee2:	2311      	movs	r3, #17
 8017ee4:	e1c2      	b.n	801826c <_fx_media_close+0x39c>

    /* If trace is enabled, unregister this object.  */
    FX_TRACE_OBJECT_UNREGISTER(media_ptr)

    /* Protect against other threads accessing the media.  */
    FX_PROTECT
 8017ee6:	687b      	ldr	r3, [r7, #4]
 8017ee8:	681b      	ldr	r3, [r3, #0]
 8017eea:	4aa3      	ldr	r2, [pc, #652]	; (8018178 <_fx_media_close+0x2a8>)
 8017eec:	4293      	cmp	r3, r2
 8017eee:	d001      	beq.n	8017ef4 <_fx_media_close+0x24>
 8017ef0:	2311      	movs	r3, #17
 8017ef2:	e1bb      	b.n	801826c <_fx_media_close+0x39c>
 8017ef4:	687b      	ldr	r3, [r7, #4]
 8017ef6:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8017efa:	f04f 31ff 	mov.w	r1, #4294967295
 8017efe:	4618      	mov	r0, r3
 8017f00:	f004 fc28 	bl	801c754 <_tx_mutex_get>
 8017f04:	4603      	mov	r3, r0
 8017f06:	2b00      	cmp	r3, #0
 8017f08:	d001      	beq.n	8017f0e <_fx_media_close+0x3e>
 8017f0a:	2311      	movs	r3, #17
 8017f0c:	e1ae      	b.n	801826c <_fx_media_close+0x39c>

#ifndef FX_DISABLE_FILE_CLOSE
    /* Loop through the media's open files.  */
    open_count =  media_ptr -> fx_media_opened_file_count;
 8017f0e:	687b      	ldr	r3, [r7, #4]
 8017f10:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8017f14:	637b      	str	r3, [r7, #52]	; 0x34
    file_ptr =    media_ptr -> fx_media_opened_file_list;
 8017f16:	687b      	ldr	r3, [r7, #4]
 8017f18:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8017f1c:	633b      	str	r3, [r7, #48]	; 0x30
    while (open_count)
 8017f1e:	e046      	b.n	8017fae <_fx_media_close+0xde>
    {

        /* Look at each opened file to see if the same file is opened
           for writing and has been written to.  */
        if ((file_ptr -> fx_file_open_mode == FX_OPEN_FOR_WRITE) &&
 8017f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f22:	689b      	ldr	r3, [r3, #8]
 8017f24:	2b01      	cmp	r3, #1
 8017f26:	d139      	bne.n	8017f9c <_fx_media_close+0xcc>
            (file_ptr -> fx_file_modified))
 8017f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f2a:	7b1b      	ldrb	r3, [r3, #12]
        if ((file_ptr -> fx_file_open_mode == FX_OPEN_FOR_WRITE) &&
 8017f2c:	2b00      	cmp	r3, #0
 8017f2e:	d035      	beq.n	8017f9c <_fx_media_close+0xcc>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8017f30:	f3ef 8310 	mrs	r3, PRIMASK
 8017f34:	61bb      	str	r3, [r7, #24]
    return(posture);
 8017f36:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8017f38:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8017f3a:	b672      	cpsid	i
    return(int_posture);
 8017f3c:	697b      	ldr	r3, [r7, #20]
        {

            /* Lockout interrupts for time/date access.  */
            FX_DISABLE_INTS
 8017f3e:	623b      	str	r3, [r7, #32]

            /* Set the new time and date.  */
            file_ptr -> fx_file_dir_entry.fx_dir_entry_time =  _fx_system_time;
 8017f40:	4b8e      	ldr	r3, [pc, #568]	; (801817c <_fx_media_close+0x2ac>)
 8017f42:	681a      	ldr	r2, [r3, #0]
 8017f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f46:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
            file_ptr -> fx_file_dir_entry.fx_dir_entry_date =  _fx_system_date;
 8017f4a:	4b8d      	ldr	r3, [pc, #564]	; (8018180 <_fx_media_close+0x2b0>)
 8017f4c:	681a      	ldr	r2, [r3, #0]
 8017f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f50:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8017f54:	6a3b      	ldr	r3, [r7, #32]
 8017f56:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8017f58:	69fb      	ldr	r3, [r7, #28]
 8017f5a:	f383 8810 	msr	PRIMASK, r3
}
 8017f5e:	bf00      	nop
            /* Restore interrupt posture.  */
            FX_RESTORE_INTS

            /* Copy the new file size into the directory entry.  */
            file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size =
                file_ptr -> fx_file_current_file_size;
 8017f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f62:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
            file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size =
 8017f66:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8017f68:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0
                status = _fx_directory_exFAT_entry_write(media_ptr, &(file_ptr -> fx_file_dir_entry), UPDATE_STREAM);
            }
            else
            {
#endif /* FX_ENABLE_EXFAT */
                status = _fx_directory_entry_write(media_ptr, &(file_ptr -> fx_file_dir_entry));
 8017f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f6e:	3368      	adds	r3, #104	; 0x68
 8017f70:	4619      	mov	r1, r3
 8017f72:	6878      	ldr	r0, [r7, #4]
 8017f74:	f7fa fe64 	bl	8012c40 <_fx_directory_entry_write>
 8017f78:	62f8      	str	r0, [r7, #44]	; 0x2c
#ifdef FX_ENABLE_EXFAT
            }
#endif /* FX_ENABLE_EXFAT */

            /* Determine if the status was unsuccessful. */
            if (status != FX_SUCCESS)
 8017f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017f7c:	2b00      	cmp	r3, #0
 8017f7e:	d00a      	beq.n	8017f96 <_fx_media_close+0xc6>
            {

                /* Release media protection.  */
                FX_UNPROTECT
 8017f80:	687b      	ldr	r3, [r7, #4]
 8017f82:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8017f86:	4618      	mov	r0, r3
 8017f88:	f004 fe5c 	bl	801cc44 <_tx_mutex_put>

                /* Call the media abort routine.  */
                _fx_media_abort(media_ptr);
 8017f8c:	6878      	ldr	r0, [r7, #4]
 8017f8e:	f7ff fe5f 	bl	8017c50 <_fx_media_abort>

                /* Return the error status.  */
                return(FX_IO_ERROR);
 8017f92:	2390      	movs	r3, #144	; 0x90
 8017f94:	e16a      	b.n	801826c <_fx_media_close+0x39c>
            }

            /* Clear the file modified flag.  */
            file_ptr -> fx_file_modified =  FX_FALSE;
 8017f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f98:	2200      	movs	r2, #0
 8017f9a:	731a      	strb	r2, [r3, #12]
        }

        /* Mark the file as closed.  */
        file_ptr -> fx_file_id =  FX_FILE_CLOSED_ID;
 8017f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f9e:	4a79      	ldr	r2, [pc, #484]	; (8018184 <_fx_media_close+0x2b4>)
 8017fa0:	601a      	str	r2, [r3, #0]

        /* Adjust the pointer and decrement the opened count.  */
        file_ptr =  file_ptr -> fx_file_opened_next;
 8017fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017fa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017fa6:	633b      	str	r3, [r7, #48]	; 0x30
        open_count--;
 8017fa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017faa:	3b01      	subs	r3, #1
 8017fac:	637b      	str	r3, [r7, #52]	; 0x34
    while (open_count)
 8017fae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017fb0:	2b00      	cmp	r3, #0
 8017fb2:	d1b5      	bne.n	8017f20 <_fx_media_close+0x50>
    }
#endif /* FX_DISABLE_FILE_CLOSE */

    /* Flush the cached individual FAT entries */
    _fx_utility_FAT_flush(media_ptr);
 8017fb4:	6878      	ldr	r0, [r7, #4]
 8017fb6:	f001 fef0 	bl	8019d9a <_fx_utility_FAT_flush>

    /* Flush changed sector(s) in the primary FAT to secondary FATs.  */
    _fx_utility_FAT_map_flush(media_ptr);
 8017fba:	6878      	ldr	r0, [r7, #4]
 8017fbc:	f002 fa3e 	bl	801a43c <_fx_utility_FAT_map_flush>
        _fx_utility_exFAT_bitmap_flush(media_ptr);
    }
#endif /* FX_ENABLE_EXFAT */

    /* Flush the internal logical sector cache.  */
    status =  _fx_utility_logical_sector_flush(media_ptr, ((ULONG64) 1), (ULONG64) (media_ptr -> fx_media_total_sectors), FX_FALSE);
 8017fc0:	687b      	ldr	r3, [r7, #4]
 8017fc2:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8017fc6:	2100      	movs	r1, #0
 8017fc8:	9102      	str	r1, [sp, #8]
 8017fca:	e9cd 2300 	strd	r2, r3, [sp]
 8017fce:	f04f 0201 	mov.w	r2, #1
 8017fd2:	f04f 0300 	mov.w	r3, #0
 8017fd6:	6878      	ldr	r0, [r7, #4]
 8017fd8:	f002 fdba 	bl	801ab50 <_fx_utility_logical_sector_flush>
 8017fdc:	62f8      	str	r0, [r7, #44]	; 0x2c

    /* Determine if the flush was unsuccessful. */
    if (status != FX_SUCCESS)
 8017fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017fe0:	2b00      	cmp	r3, #0
 8017fe2:	d00a      	beq.n	8017ffa <_fx_media_close+0x12a>
    {

        /* Release media protection.  */
        FX_UNPROTECT
 8017fe4:	687b      	ldr	r3, [r7, #4]
 8017fe6:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8017fea:	4618      	mov	r0, r3
 8017fec:	f004 fe2a 	bl	801cc44 <_tx_mutex_put>

        /* Call the media abort routine.  */
        _fx_media_abort(media_ptr);
 8017ff0:	6878      	ldr	r0, [r7, #4]
 8017ff2:	f7ff fe2d 	bl	8017c50 <_fx_media_abort>

        /* Return the error status.  */
        return(FX_IO_ERROR);
 8017ff6:	2390      	movs	r3, #144	; 0x90
 8017ff8:	e138      	b.n	801826c <_fx_media_close+0x39c>
    }

    /* Determine if the media needs to have the additional information sector updated. This will
       only be the case for 32-bit FATs. The logic here only needs to be done if the last reported
       available cluster count is different that the currently available clusters.  */
    if ((media_ptr -> fx_media_FAT32_additional_info_sector) &&
 8017ffa:	687b      	ldr	r3, [r7, #4]
 8017ffc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8017ffe:	2b00      	cmp	r3, #0
 8018000:	f000 80ca 	beq.w	8018198 <_fx_media_close+0x2c8>
        (media_ptr -> fx_media_FAT32_additional_info_last_available != media_ptr -> fx_media_available_clusters) &&
 8018004:	687b      	ldr	r3, [r7, #4]
 8018006:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8018008:	687b      	ldr	r3, [r7, #4]
 801800a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    if ((media_ptr -> fx_media_FAT32_additional_info_sector) &&
 801800c:	429a      	cmp	r2, r3
 801800e:	f000 80c3 	beq.w	8018198 <_fx_media_close+0x2c8>
        (media_ptr -> fx_media_driver_write_protect == FX_FALSE))
 8018012:	687b      	ldr	r3, [r7, #4]
 8018014:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
        (media_ptr -> fx_media_FAT32_additional_info_last_available != media_ptr -> fx_media_available_clusters) &&
 8018018:	2b00      	cmp	r3, #0
 801801a:	f040 80bd 	bne.w	8018198 <_fx_media_close+0x2c8>
    ULONG  signature;


#ifndef FX_DISABLE_CACHE
        /* Setup a pointer to the first cached entry's buffer.  */
        buffer_ptr =  (media_ptr -> fx_media_sector_cache_list_ptr) -> fx_cached_sector_memory_buffer;
 801801e:	687b      	ldr	r3, [r7, #4]
 8018020:	69db      	ldr	r3, [r3, #28]
 8018022:	681b      	ldr	r3, [r3, #0]
 8018024:	62bb      	str	r3, [r7, #40]	; 0x28

        /* Invalidate this cache entry.  */
        (media_ptr -> fx_media_sector_cache_list_ptr) -> fx_cached_sector =  (~(ULONG64)0);
 8018026:	687b      	ldr	r3, [r7, #4]
 8018028:	69d9      	ldr	r1, [r3, #28]
 801802a:	f04f 32ff 	mov.w	r2, #4294967295
 801802e:	f04f 33ff 	mov.w	r3, #4294967295
 8018032:	e9c1 2302 	strd	r2, r3, [r1, #8]
        (media_ptr -> fx_media_sector_cache_list_ptr) -> fx_cached_sector_valid =  FX_FALSE;
 8018036:	687b      	ldr	r3, [r7, #4]
 8018038:	69db      	ldr	r3, [r3, #28]
 801803a:	2200      	movs	r2, #0
 801803c:	745a      	strb	r2, [r3, #17]
#else
        buffer_ptr =  media_ptr -> fx_media_memory_buffer;
#endif /* FX_DISABLE_CACHE */

        /* Read the FAT32 additional information sector from the device.  */
        media_ptr -> fx_media_driver_request =          FX_DRIVER_READ;
 801803e:	687b      	ldr	r3, [r7, #4]
 8018040:	2200      	movs	r2, #0
 8018042:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8018046:	687b      	ldr	r3, [r7, #4]
 8018048:	2290      	movs	r2, #144	; 0x90
 801804a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        media_ptr -> fx_media_driver_buffer =           buffer_ptr;
 801804e:	687b      	ldr	r3, [r7, #4]
 8018050:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018052:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        media_ptr -> fx_media_driver_logical_sector =   media_ptr -> fx_media_FAT32_additional_info_sector;
 8018056:	687b      	ldr	r3, [r7, #4]
 8018058:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 801805a:	687b      	ldr	r3, [r7, #4]
 801805c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        media_ptr -> fx_media_driver_sectors =          1;
 8018060:	687b      	ldr	r3, [r7, #4]
 8018062:	2201      	movs	r2, #1
 8018064:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        media_ptr -> fx_media_driver_sector_type =      FX_DIRECTORY_SECTOR;
 8018068:	687b      	ldr	r3, [r7, #4]
 801806a:	2203      	movs	r2, #3
 801806c:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

#ifndef FX_MEDIA_STATISTICS_DISABLE

        /* Increment the number of driver read sector(s) requests.  */
        media_ptr -> fx_media_driver_read_requests++;
 8018070:	687b      	ldr	r3, [r7, #4]
 8018072:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 8018076:	1c5a      	adds	r2, r3, #1
 8018078:	687b      	ldr	r3, [r7, #4]
 801807a:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_READ, media_ptr, media_ptr -> fx_media_FAT32_additional_info_sector, 1, buffer_ptr, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Invoke the driver to read the FAT32 additional information sector.  */
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 801807e:	687b      	ldr	r3, [r7, #4]
 8018080:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8018084:	6878      	ldr	r0, [r7, #4]
 8018086:	4798      	blx	r3

        /* Determine if the FAT32 sector was read correctly. */
        if (media_ptr -> fx_media_driver_status != FX_SUCCESS)
 8018088:	687b      	ldr	r3, [r7, #4]
 801808a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801808e:	2b00      	cmp	r3, #0
 8018090:	d00a      	beq.n	80180a8 <_fx_media_close+0x1d8>
        {

            /* Release media protection.  */
            FX_UNPROTECT
 8018092:	687b      	ldr	r3, [r7, #4]
 8018094:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8018098:	4618      	mov	r0, r3
 801809a:	f004 fdd3 	bl	801cc44 <_tx_mutex_put>

            /* Call the media abort routine.  */
            _fx_media_abort(media_ptr);
 801809e:	6878      	ldr	r0, [r7, #4]
 80180a0:	f7ff fdd6 	bl	8017c50 <_fx_media_abort>

            /* Return the error status.  */
            return(FX_IO_ERROR);
 80180a4:	2390      	movs	r3, #144	; 0x90
 80180a6:	e0e1      	b.n	801826c <_fx_media_close+0x39c>
        }

        /* Setup a pointer into the FAT32 additional information sector.  */
        buffer_ptr =  media_ptr -> fx_media_driver_buffer;
 80180a8:	687b      	ldr	r3, [r7, #4]
 80180aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80180ae:	62bb      	str	r3, [r7, #40]	; 0x28

        /* Pickup the first signature long word.  */
        signature =  _fx_utility_32_unsigned_read(&buffer_ptr[0]);
 80180b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80180b2:	f001 fb17 	bl	80196e4 <_fx_utility_32_unsigned_read>
 80180b6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Determine if the signature is correct.  */
        if (signature == 0x41615252)
 80180b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80180ba:	4a33      	ldr	r2, [pc, #204]	; (8018188 <_fx_media_close+0x2b8>)
 80180bc:	4293      	cmp	r3, r2
 80180be:	d16b      	bne.n	8018198 <_fx_media_close+0x2c8>
        {

            /* Yes, the first signature is correct, now pickup the next signature.  */
            signature =  _fx_utility_32_unsigned_read(&buffer_ptr[484]);
 80180c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80180c2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80180c6:	4618      	mov	r0, r3
 80180c8:	f001 fb0c 	bl	80196e4 <_fx_utility_32_unsigned_read>
 80180cc:	6278      	str	r0, [r7, #36]	; 0x24

            /* Determine if this signature is correct.  */
            if (signature == 0x61417272)
 80180ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80180d0:	4a2e      	ldr	r2, [pc, #184]	; (801818c <_fx_media_close+0x2bc>)
 80180d2:	4293      	cmp	r3, r2
 80180d4:	d160      	bne.n	8018198 <_fx_media_close+0x2c8>
            {

                /* Yes, we have a good FAT32 additional information sector.  */

                /* Set the free cluster count to the available clusters in the media control block.  */
                _fx_utility_32_unsigned_write(&buffer_ptr[488], media_ptr -> fx_media_available_clusters);
 80180d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80180d8:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80180dc:	687b      	ldr	r3, [r7, #4]
 80180de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80180e0:	4619      	mov	r1, r3
 80180e2:	4610      	mov	r0, r2
 80180e4:	f001 fb1b 	bl	801971e <_fx_utility_32_unsigned_write>

                /* Set the next free cluster number hint to starting search cluster in the media control block.  */
                _fx_utility_32_unsigned_write(&buffer_ptr[492], media_ptr -> fx_media_cluster_search_start);
 80180e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80180ea:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80180ee:	687b      	ldr	r3, [r7, #4]
 80180f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80180f4:	4619      	mov	r1, r3
 80180f6:	4610      	mov	r0, r2
 80180f8:	f001 fb11 	bl	801971e <_fx_utility_32_unsigned_write>

                /* Now write the sector back out to the media.  */
                media_ptr -> fx_media_driver_request =          FX_DRIVER_WRITE;
 80180fc:	687b      	ldr	r3, [r7, #4]
 80180fe:	2201      	movs	r2, #1
 8018100:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
                media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8018104:	687b      	ldr	r3, [r7, #4]
 8018106:	2290      	movs	r2, #144	; 0x90
 8018108:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
                media_ptr -> fx_media_driver_buffer =           buffer_ptr;
 801810c:	687b      	ldr	r3, [r7, #4]
 801810e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018110:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
                media_ptr -> fx_media_driver_logical_sector =   media_ptr -> fx_media_FAT32_additional_info_sector;
 8018114:	687b      	ldr	r3, [r7, #4]
 8018116:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8018118:	687b      	ldr	r3, [r7, #4]
 801811a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
                media_ptr -> fx_media_driver_sectors =          1;
 801811e:	687b      	ldr	r3, [r7, #4]
 8018120:	2201      	movs	r2, #1
 8018122:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
                media_ptr -> fx_media_driver_sector_type =      FX_DIRECTORY_SECTOR;
 8018126:	687b      	ldr	r3, [r7, #4]
 8018128:	2203      	movs	r2, #3
 801812a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

                /* Set the system write flag since we are writing a directory sector.  */
                media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 801812e:	687b      	ldr	r3, [r7, #4]
 8018130:	2201      	movs	r2, #1
 8018132:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

#ifndef FX_MEDIA_STATISTICS_DISABLE

                /* Increment the number of driver write sector(s) requests.  */
                media_ptr -> fx_media_driver_write_requests++;
 8018136:	687b      	ldr	r3, [r7, #4]
 8018138:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 801813c:	1c5a      	adds	r2, r3, #1
 801813e:	687b      	ldr	r3, [r7, #4]
 8018140:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0

                /* If trace is enabled, insert this event into the trace buffer.  */
                FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_WRITE, media_ptr, media_ptr -> fx_media_FAT32_additional_info_sector, 1, buffer_ptr, FX_TRACE_INTERNAL_EVENTS, 0, 0)

                /* Invoke the driver to write the FAT32 additional information sector.  */
                (media_ptr -> fx_media_driver_entry) (media_ptr);
 8018144:	687b      	ldr	r3, [r7, #4]
 8018146:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 801814a:	6878      	ldr	r0, [r7, #4]
 801814c:	4798      	blx	r3

                /* Clear the system write flag.  */
                media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 801814e:	687b      	ldr	r3, [r7, #4]
 8018150:	2200      	movs	r2, #0
 8018152:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

                /* Determine if the FAT32 sector was written correctly. */
                if (media_ptr -> fx_media_driver_status != FX_SUCCESS)
 8018156:	687b      	ldr	r3, [r7, #4]
 8018158:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801815c:	2b00      	cmp	r3, #0
 801815e:	d017      	beq.n	8018190 <_fx_media_close+0x2c0>
                {

                    /* Release media protection.  */
                    FX_UNPROTECT
 8018160:	687b      	ldr	r3, [r7, #4]
 8018162:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8018166:	4618      	mov	r0, r3
 8018168:	f004 fd6c 	bl	801cc44 <_tx_mutex_put>

                    /* Call the media abort routine.  */
                    _fx_media_abort(media_ptr);
 801816c:	6878      	ldr	r0, [r7, #4]
 801816e:	f7ff fd6f 	bl	8017c50 <_fx_media_abort>

                    /* Return the sector IO error status.  */
                    return(FX_IO_ERROR);
 8018172:	2390      	movs	r3, #144	; 0x90
 8018174:	e07a      	b.n	801826c <_fx_media_close+0x39c>
 8018176:	bf00      	nop
 8018178:	4d454449 	.word	0x4d454449
 801817c:	24005050 	.word	0x24005050
 8018180:	2400504c 	.word	0x2400504c
 8018184:	46494c43 	.word	0x46494c43
 8018188:	41615252 	.word	0x41615252
 801818c:	61417272 	.word	0x61417272
                }

                /* Successful update of the FAT32 additional information sector. Update the
                   last written available cluster count.  */
                media_ptr -> fx_media_FAT32_additional_info_last_available =  media_ptr -> fx_media_available_clusters;
 8018190:	687b      	ldr	r3, [r7, #4]
 8018192:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8018194:	687b      	ldr	r3, [r7, #4]
 8018196:	66da      	str	r2, [r3, #108]	; 0x6c
    }

#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of driver flush requests.  */
    media_ptr -> fx_media_driver_flush_requests++;
 8018198:	687b      	ldr	r3, [r7, #4]
 801819a:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 801819e:	1c5a      	adds	r2, r3, #1
 80181a0:	687b      	ldr	r3, [r7, #4]
 80181a2:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
#endif

    /* Build the "flush" I/O driver request.  */
    media_ptr -> fx_media_driver_request =      FX_DRIVER_FLUSH;
 80181a6:	687b      	ldr	r3, [r7, #4]
 80181a8:	2202      	movs	r2, #2
 80181aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 80181ae:	687b      	ldr	r3, [r7, #4]
 80181b0:	2290      	movs	r2, #144	; 0x90
 80181b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_FLUSH, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

    /* Call the specified I/O driver with the flush request.  */
    (media_ptr -> fx_media_driver_entry) (media_ptr);
 80181b6:	687b      	ldr	r3, [r7, #4]
 80181b8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80181bc:	6878      	ldr	r0, [r7, #4]
 80181be:	4798      	blx	r3

    /* Build the "uninitialize" I/O driver request.  */
    media_ptr -> fx_media_driver_request =      FX_DRIVER_UNINIT;
 80181c0:	687b      	ldr	r3, [r7, #4]
 80181c2:	2208      	movs	r2, #8
 80181c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 80181c8:	687b      	ldr	r3, [r7, #4]
 80181ca:	2290      	movs	r2, #144	; 0x90
 80181cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_UNINIT, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

    /* Call the specified I/O driver with the uninitialize request.  */
    (media_ptr -> fx_media_driver_entry) (media_ptr);
 80181d0:	687b      	ldr	r3, [r7, #4]
 80181d2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80181d6:	6878      	ldr	r0, [r7, #4]
 80181d8:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80181da:	f3ef 8310 	mrs	r3, PRIMASK
 80181de:	613b      	str	r3, [r7, #16]
    return(posture);
 80181e0:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 80181e2:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 80181e4:	b672      	cpsid	i
    return(int_posture);
 80181e6:	68fb      	ldr	r3, [r7, #12]

    /* Now remove this media from the open list.  */

    /* Lockout interrupts for media removal.  */
    FX_DISABLE_INTS
 80181e8:	623b      	str	r3, [r7, #32]

    /* See if the media is the only one on the media opened list.  */
    if (_fx_system_media_opened_count == ((ULONG) 1))
 80181ea:	4b22      	ldr	r3, [pc, #136]	; (8018274 <_fx_media_close+0x3a4>)
 80181ec:	681b      	ldr	r3, [r3, #0]
 80181ee:	2b01      	cmp	r3, #1
 80181f0:	d103      	bne.n	80181fa <_fx_media_close+0x32a>
    {

        /* Only opened media, just set the opened list to NULL.  */
        _fx_system_media_opened_ptr =  FX_NULL;
 80181f2:	4b21      	ldr	r3, [pc, #132]	; (8018278 <_fx_media_close+0x3a8>)
 80181f4:	2200      	movs	r2, #0
 80181f6:	601a      	str	r2, [r3, #0]
 80181f8:	e019      	b.n	801822e <_fx_media_close+0x35e>
    }
    else
    {

        /* Otherwise, not the only opened media, link-up the neighbors.  */
        (media_ptr -> fx_media_opened_next) -> fx_media_opened_previous =
 80181fa:	687b      	ldr	r3, [r7, #4]
 80181fc:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
            media_ptr -> fx_media_opened_previous;
 8018200:	687a      	ldr	r2, [r7, #4]
 8018202:	f8d2 20d4 	ldr.w	r2, [r2, #212]	; 0xd4
        (media_ptr -> fx_media_opened_next) -> fx_media_opened_previous =
 8018206:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
        (media_ptr -> fx_media_opened_previous) -> fx_media_opened_next =
 801820a:	687b      	ldr	r3, [r7, #4]
 801820c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
            media_ptr -> fx_media_opened_next;
 8018210:	687a      	ldr	r2, [r7, #4]
 8018212:	f8d2 20d0 	ldr.w	r2, [r2, #208]	; 0xd0
        (media_ptr -> fx_media_opened_previous) -> fx_media_opened_next =
 8018216:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

        /* See if we have to update the opened list head pointer.  */
        if (_fx_system_media_opened_ptr == media_ptr)
 801821a:	4b17      	ldr	r3, [pc, #92]	; (8018278 <_fx_media_close+0x3a8>)
 801821c:	681b      	ldr	r3, [r3, #0]
 801821e:	687a      	ldr	r2, [r7, #4]
 8018220:	429a      	cmp	r2, r3
 8018222:	d104      	bne.n	801822e <_fx_media_close+0x35e>
        {

            /* Yes, move the head pointer to the next opened media. */
            _fx_system_media_opened_ptr =  media_ptr -> fx_media_opened_next;
 8018224:	687b      	ldr	r3, [r7, #4]
 8018226:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 801822a:	4a13      	ldr	r2, [pc, #76]	; (8018278 <_fx_media_close+0x3a8>)
 801822c:	6013      	str	r3, [r2, #0]
        }
    }

    /* Decrement the opened media counter.  */
    _fx_system_media_opened_count--;
 801822e:	4b11      	ldr	r3, [pc, #68]	; (8018274 <_fx_media_close+0x3a4>)
 8018230:	681b      	ldr	r3, [r3, #0]
 8018232:	3b01      	subs	r3, #1
 8018234:	4a0f      	ldr	r2, [pc, #60]	; (8018274 <_fx_media_close+0x3a4>)
 8018236:	6013      	str	r3, [r2, #0]

    /* Finally, Indicate that this media is closed.  */
    media_ptr -> fx_media_id =  FX_MEDIA_CLOSED_ID;
 8018238:	687b      	ldr	r3, [r7, #4]
 801823a:	4a10      	ldr	r2, [pc, #64]	; (801827c <_fx_media_close+0x3ac>)
 801823c:	601a      	str	r2, [r3, #0]
 801823e:	6a3b      	ldr	r3, [r7, #32]
 8018240:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8018242:	68bb      	ldr	r3, [r7, #8]
 8018244:	f383 8810 	msr	PRIMASK, r3
}
 8018248:	bf00      	nop
#ifndef FX_DONT_CREATE_MUTEX

    /* Note that the protection is never released. The mutex delete
       service will handle all threads waiting access to this media
       control block.  */
    tx_mutex_delete(& (media_ptr -> fx_media_protect));
 801824a:	687b      	ldr	r3, [r7, #4]
 801824c:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8018250:	4618      	mov	r0, r3
 8018252:	f004 f9d5 	bl	801c600 <_tx_mutex_delete>
#endif
#endif

    /* Invoke media close callback. */
    if (media_ptr -> fx_media_close_notify)
 8018256:	687b      	ldr	r3, [r7, #4]
 8018258:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 801825c:	2b00      	cmp	r3, #0
 801825e:	d004      	beq.n	801826a <_fx_media_close+0x39a>
    {
        media_ptr -> fx_media_close_notify(media_ptr);
 8018260:	687b      	ldr	r3, [r7, #4]
 8018262:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8018266:	6878      	ldr	r0, [r7, #4]
 8018268:	4798      	blx	r3
    /* Release media protection.  */
    FX_UNPROTECT
#endif

    /* Return success status to the caller.  */
    return(FX_SUCCESS);
 801826a:	2300      	movs	r3, #0
}
 801826c:	4618      	mov	r0, r3
 801826e:	3738      	adds	r7, #56	; 0x38
 8018270:	46bd      	mov	sp, r7
 8018272:	bd80      	pop	{r7, pc}
 8018274:	24005048 	.word	0x24005048
 8018278:	24005044 	.word	0x24005044
 801827c:	4d454443 	.word	0x4d454443

08018280 <_fx_media_flush>:
/*                                            disable cache,              */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fx_media_flush(FX_MEDIA  *media_ptr)
{
 8018280:	b580      	push	{r7, lr}
 8018282:	b090      	sub	sp, #64	; 0x40
 8018284:	af04      	add	r7, sp, #16
 8018286:	6078      	str	r0, [r7, #4]


#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of times this service has been called.  */
    media_ptr -> fx_media_flushes++;
 8018288:	687b      	ldr	r3, [r7, #4]
 801828a:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 801828e:	1c5a      	adds	r2, r3, #1
 8018290:	687b      	ldr	r3, [r7, #4]
 8018292:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

    /* Check the media to make sure it is open.  */
    if (media_ptr -> fx_media_id != FX_MEDIA_ID)
 8018296:	687b      	ldr	r3, [r7, #4]
 8018298:	681b      	ldr	r3, [r3, #0]
 801829a:	4aa2      	ldr	r2, [pc, #648]	; (8018524 <_fx_media_flush+0x2a4>)
 801829c:	4293      	cmp	r3, r2
 801829e:	d001      	beq.n	80182a4 <_fx_media_flush+0x24>
    {

        /* Return the media not opened error.  */
        return(FX_MEDIA_NOT_OPEN);
 80182a0:	2311      	movs	r3, #17
 80182a2:	e175      	b.n	8018590 <_fx_media_flush+0x310>

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_MEDIA_FLUSH, media_ptr, 0, 0, 0, FX_TRACE_MEDIA_EVENTS, 0, 0)

    /* Protect against other threads accessing the media.  */
    FX_PROTECT
 80182a4:	687b      	ldr	r3, [r7, #4]
 80182a6:	681b      	ldr	r3, [r3, #0]
 80182a8:	4a9e      	ldr	r2, [pc, #632]	; (8018524 <_fx_media_flush+0x2a4>)
 80182aa:	4293      	cmp	r3, r2
 80182ac:	d001      	beq.n	80182b2 <_fx_media_flush+0x32>
 80182ae:	2311      	movs	r3, #17
 80182b0:	e16e      	b.n	8018590 <_fx_media_flush+0x310>
 80182b2:	687b      	ldr	r3, [r7, #4]
 80182b4:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 80182b8:	f04f 31ff 	mov.w	r1, #4294967295
 80182bc:	4618      	mov	r0, r3
 80182be:	f004 fa49 	bl	801c754 <_tx_mutex_get>
 80182c2:	4603      	mov	r3, r0
 80182c4:	2b00      	cmp	r3, #0
 80182c6:	d001      	beq.n	80182cc <_fx_media_flush+0x4c>
 80182c8:	2311      	movs	r3, #17
 80182ca:	e161      	b.n	8018590 <_fx_media_flush+0x310>

    /* Check for write protect at the media level (set by driver).  */
    if (media_ptr -> fx_media_driver_write_protect)
 80182cc:	687b      	ldr	r3, [r7, #4]
 80182ce:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80182d2:	2b00      	cmp	r3, #0
 80182d4:	d007      	beq.n	80182e6 <_fx_media_flush+0x66>
    {

        /* Release media protection.  */
        FX_UNPROTECT
 80182d6:	687b      	ldr	r3, [r7, #4]
 80182d8:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 80182dc:	4618      	mov	r0, r3
 80182de:	f004 fcb1 	bl	801cc44 <_tx_mutex_put>

        /* Return write protect error.  */
        return(FX_WRITE_PROTECT);
 80182e2:	2323      	movs	r3, #35	; 0x23
 80182e4:	e154      	b.n	8018590 <_fx_media_flush+0x310>
    }

    /* Loop through the media's open files.  */
    open_count =  media_ptr -> fx_media_opened_file_count;
 80182e6:	687b      	ldr	r3, [r7, #4]
 80182e8:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80182ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    file_ptr =    media_ptr -> fx_media_opened_file_list;
 80182ee:	687b      	ldr	r3, [r7, #4]
 80182f0:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80182f4:	62bb      	str	r3, [r7, #40]	; 0x28
    while (open_count)
 80182f6:	e040      	b.n	801837a <_fx_media_flush+0xfa>
    {

        /* Look at each opened file to see if the same file is opened
           for writing and has been written to.  */
        if ((file_ptr -> fx_file_open_mode == FX_OPEN_FOR_WRITE) &&
 80182f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80182fa:	689b      	ldr	r3, [r3, #8]
 80182fc:	2b01      	cmp	r3, #1
 80182fe:	d136      	bne.n	801836e <_fx_media_flush+0xee>
            (file_ptr -> fx_file_modified))
 8018300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018302:	7b1b      	ldrb	r3, [r3, #12]
        if ((file_ptr -> fx_file_open_mode == FX_OPEN_FOR_WRITE) &&
 8018304:	2b00      	cmp	r3, #0
 8018306:	d032      	beq.n	801836e <_fx_media_flush+0xee>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8018308:	f3ef 8310 	mrs	r3, PRIMASK
 801830c:	613b      	str	r3, [r7, #16]
    return(posture);
 801830e:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 8018310:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 8018312:	b672      	cpsid	i
    return(int_posture);
 8018314:	68fb      	ldr	r3, [r7, #12]
        {

            /* Protect against update.  */
            FX_DISABLE_INTS
 8018316:	61bb      	str	r3, [r7, #24]

            /* Set the new time and date.  */
            file_ptr -> fx_file_dir_entry.fx_dir_entry_time =  _fx_system_time;
 8018318:	4b83      	ldr	r3, [pc, #524]	; (8018528 <_fx_media_flush+0x2a8>)
 801831a:	681a      	ldr	r2, [r3, #0]
 801831c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801831e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
            file_ptr -> fx_file_dir_entry.fx_dir_entry_date =  _fx_system_date;
 8018322:	4b82      	ldr	r3, [pc, #520]	; (801852c <_fx_media_flush+0x2ac>)
 8018324:	681a      	ldr	r2, [r3, #0]
 8018326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018328:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 801832c:	69bb      	ldr	r3, [r7, #24]
 801832e:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8018330:	697b      	ldr	r3, [r7, #20]
 8018332:	f383 8810 	msr	PRIMASK, r3
}
 8018336:	bf00      	nop
            /* Restore interrupts.  */
            FX_RESTORE_INTS

            /* Copy the new file size into the directory entry.  */
            file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size =
                file_ptr -> fx_file_current_file_size;
 8018338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801833a:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
            file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size =
 801833e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8018340:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0
                        media_ptr, &(file_ptr -> fx_file_dir_entry), UPDATE_STREAM);
            }
            else
            {
#endif /* FX_ENABLE_EXFAT */
                status = _fx_directory_entry_write(media_ptr, &(file_ptr -> fx_file_dir_entry));
 8018344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018346:	3368      	adds	r3, #104	; 0x68
 8018348:	4619      	mov	r1, r3
 801834a:	6878      	ldr	r0, [r7, #4]
 801834c:	f7fa fc78 	bl	8012c40 <_fx_directory_entry_write>
 8018350:	6278      	str	r0, [r7, #36]	; 0x24
#ifdef FX_ENABLE_EXFAT
            }
#endif /* FX_ENABLE_EXFAT */

            /* Check for a good status.  */
            if (status != FX_SUCCESS)
 8018352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018354:	2b00      	cmp	r3, #0
 8018356:	d007      	beq.n	8018368 <_fx_media_flush+0xe8>
            {

                /* Release media protection.  */
                FX_UNPROTECT
 8018358:	687b      	ldr	r3, [r7, #4]
 801835a:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 801835e:	4618      	mov	r0, r3
 8018360:	f004 fc70 	bl	801cc44 <_tx_mutex_put>

                /* Error writing the directory.  */
                return(status);
 8018364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018366:	e113      	b.n	8018590 <_fx_media_flush+0x310>
            }

            /* Clear the file modified flag.  */
            file_ptr -> fx_file_modified =  FX_FALSE;
 8018368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801836a:	2200      	movs	r2, #0
 801836c:	731a      	strb	r2, [r3, #12]
        }

        /* Adjust the pointer and decrement the opened count.  */
        file_ptr =  file_ptr -> fx_file_opened_next;
 801836e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018370:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018372:	62bb      	str	r3, [r7, #40]	; 0x28
        open_count--;
 8018374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018376:	3b01      	subs	r3, #1
 8018378:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (open_count)
 801837a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801837c:	2b00      	cmp	r3, #0
 801837e:	d1bb      	bne.n	80182f8 <_fx_media_flush+0x78>
    }

    /* Flush the cached individual FAT entries */
    _fx_utility_FAT_flush(media_ptr);
 8018380:	6878      	ldr	r0, [r7, #4]
 8018382:	f001 fd0a 	bl	8019d9a <_fx_utility_FAT_flush>

    /* Flush changed sector(s) in the primary FAT to secondary FATs.  */
    _fx_utility_FAT_map_flush(media_ptr);
 8018386:	6878      	ldr	r0, [r7, #4]
 8018388:	f002 f858 	bl	801a43c <_fx_utility_FAT_map_flush>
        _fx_utility_exFAT_bitmap_flush(media_ptr);
    }
#endif /* FX_ENABLE_EXFAT */

    /* Flush the internal logical sector cache.  */
    status =  _fx_utility_logical_sector_flush(media_ptr, ((ULONG64) 1), (ULONG64) (media_ptr -> fx_media_total_sectors), FX_FALSE);
 801838c:	687b      	ldr	r3, [r7, #4]
 801838e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8018392:	2100      	movs	r1, #0
 8018394:	9102      	str	r1, [sp, #8]
 8018396:	e9cd 2300 	strd	r2, r3, [sp]
 801839a:	f04f 0201 	mov.w	r2, #1
 801839e:	f04f 0300 	mov.w	r3, #0
 80183a2:	6878      	ldr	r0, [r7, #4]
 80183a4:	f002 fbd4 	bl	801ab50 <_fx_utility_logical_sector_flush>
 80183a8:	6278      	str	r0, [r7, #36]	; 0x24

    /* Check for a good status.  */
    if (status != FX_SUCCESS)
 80183aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80183ac:	2b00      	cmp	r3, #0
 80183ae:	d007      	beq.n	80183c0 <_fx_media_flush+0x140>
    {

        /* Release media protection.  */
        FX_UNPROTECT
 80183b0:	687b      	ldr	r3, [r7, #4]
 80183b2:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 80183b6:	4618      	mov	r0, r3
 80183b8:	f004 fc44 	bl	801cc44 <_tx_mutex_put>

        /* Error writing the directory.  */
        return(status);
 80183bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80183be:	e0e7      	b.n	8018590 <_fx_media_flush+0x310>
    }

    /* Determine if the media needs to have the additional information sector updated. This will
       only be the case for 32-bit FATs. The logic here only needs to be done if the last reported
       available cluster count is different that the currently available clusters.  */
    if ((media_ptr -> fx_media_FAT32_additional_info_sector) &&
 80183c0:	687b      	ldr	r3, [r7, #4]
 80183c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80183c4:	2b00      	cmp	r3, #0
 80183c6:	f000 80bb 	beq.w	8018540 <_fx_media_flush+0x2c0>
        (media_ptr -> fx_media_FAT32_additional_info_last_available != media_ptr -> fx_media_available_clusters))
 80183ca:	687b      	ldr	r3, [r7, #4]
 80183cc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80183ce:	687b      	ldr	r3, [r7, #4]
 80183d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    if ((media_ptr -> fx_media_FAT32_additional_info_sector) &&
 80183d2:	429a      	cmp	r2, r3
 80183d4:	f000 80b4 	beq.w	8018540 <_fx_media_flush+0x2c0>
    ULONG  signature;

#ifndef FX_DISABLE_CACHE

        /* Setup a pointer to the first cached entry's buffer.  */
        buffer_ptr =  (media_ptr -> fx_media_sector_cache_list_ptr) -> fx_cached_sector_memory_buffer;
 80183d8:	687b      	ldr	r3, [r7, #4]
 80183da:	69db      	ldr	r3, [r3, #28]
 80183dc:	681b      	ldr	r3, [r3, #0]
 80183de:	623b      	str	r3, [r7, #32]

        /* Invalidate this cache entry.  */
        (media_ptr -> fx_media_sector_cache_list_ptr) -> fx_cached_sector =  (~(ULONG64)0);
 80183e0:	687b      	ldr	r3, [r7, #4]
 80183e2:	69d9      	ldr	r1, [r3, #28]
 80183e4:	f04f 32ff 	mov.w	r2, #4294967295
 80183e8:	f04f 33ff 	mov.w	r3, #4294967295
 80183ec:	e9c1 2302 	strd	r2, r3, [r1, #8]
        (media_ptr -> fx_media_sector_cache_list_ptr) -> fx_cached_sector_valid =  FX_FALSE;
 80183f0:	687b      	ldr	r3, [r7, #4]
 80183f2:	69db      	ldr	r3, [r3, #28]
 80183f4:	2200      	movs	r2, #0
 80183f6:	745a      	strb	r2, [r3, #17]
#else
        buffer_ptr =  media_ptr -> fx_media_memory_buffer;
#endif /* FX_DISABLE_CACHE */

        /* Read the FAT32 additional information sector from the device.  */
        media_ptr -> fx_media_driver_request =          FX_DRIVER_READ;
 80183f8:	687b      	ldr	r3, [r7, #4]
 80183fa:	2200      	movs	r2, #0
 80183fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8018400:	687b      	ldr	r3, [r7, #4]
 8018402:	2290      	movs	r2, #144	; 0x90
 8018404:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        media_ptr -> fx_media_driver_buffer =           buffer_ptr;
 8018408:	687b      	ldr	r3, [r7, #4]
 801840a:	6a3a      	ldr	r2, [r7, #32]
 801840c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        media_ptr -> fx_media_driver_logical_sector =   media_ptr -> fx_media_FAT32_additional_info_sector;
 8018410:	687b      	ldr	r3, [r7, #4]
 8018412:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8018414:	687b      	ldr	r3, [r7, #4]
 8018416:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        media_ptr -> fx_media_driver_sectors =          1;
 801841a:	687b      	ldr	r3, [r7, #4]
 801841c:	2201      	movs	r2, #1
 801841e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        media_ptr -> fx_media_driver_sector_type =      FX_DIRECTORY_SECTOR;
 8018422:	687b      	ldr	r3, [r7, #4]
 8018424:	2203      	movs	r2, #3
 8018426:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

#ifndef FX_MEDIA_STATISTICS_DISABLE

        /* Increment the number of driver read sector(s) requests.  */
        media_ptr -> fx_media_driver_read_requests++;
 801842a:	687b      	ldr	r3, [r7, #4]
 801842c:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 8018430:	1c5a      	adds	r2, r3, #1
 8018432:	687b      	ldr	r3, [r7, #4]
 8018434:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_READ, media_ptr, media_ptr -> fx_media_FAT32_additional_info_sector, 1, buffer_ptr, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Invoke the driver to read the FAT32 additional information sector.  */
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 8018438:	687b      	ldr	r3, [r7, #4]
 801843a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 801843e:	6878      	ldr	r0, [r7, #4]
 8018440:	4798      	blx	r3

        /* Determine if the FAT32 sector was read correctly. */
        if (media_ptr -> fx_media_driver_status != FX_SUCCESS)
 8018442:	687b      	ldr	r3, [r7, #4]
 8018444:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8018448:	2b00      	cmp	r3, #0
 801844a:	d007      	beq.n	801845c <_fx_media_flush+0x1dc>
        {

            /* Release media protection.  */
            FX_UNPROTECT
 801844c:	687b      	ldr	r3, [r7, #4]
 801844e:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8018452:	4618      	mov	r0, r3
 8018454:	f004 fbf6 	bl	801cc44 <_tx_mutex_put>

            /* Return the error status.  */
            return(FX_IO_ERROR);
 8018458:	2390      	movs	r3, #144	; 0x90
 801845a:	e099      	b.n	8018590 <_fx_media_flush+0x310>
        }

        /* Setup a pointer into the FAT32 additional information sector.  */
        buffer_ptr =  media_ptr -> fx_media_driver_buffer;
 801845c:	687b      	ldr	r3, [r7, #4]
 801845e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8018462:	623b      	str	r3, [r7, #32]

        /* Pickup the first signature long word.  */
        signature =  _fx_utility_32_unsigned_read(&buffer_ptr[0]);
 8018464:	6a38      	ldr	r0, [r7, #32]
 8018466:	f001 f93d 	bl	80196e4 <_fx_utility_32_unsigned_read>
 801846a:	61f8      	str	r0, [r7, #28]

        /* Determine if the signature is correct.  */
        if (signature == 0x41615252)
 801846c:	69fb      	ldr	r3, [r7, #28]
 801846e:	4a30      	ldr	r2, [pc, #192]	; (8018530 <_fx_media_flush+0x2b0>)
 8018470:	4293      	cmp	r3, r2
 8018472:	d165      	bne.n	8018540 <_fx_media_flush+0x2c0>
        {

            /* Yes, the first signature is correct, now pickup the next signature.  */
            signature =  _fx_utility_32_unsigned_read(&buffer_ptr[484]);
 8018474:	6a3b      	ldr	r3, [r7, #32]
 8018476:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 801847a:	4618      	mov	r0, r3
 801847c:	f001 f932 	bl	80196e4 <_fx_utility_32_unsigned_read>
 8018480:	61f8      	str	r0, [r7, #28]

            /* Determine if this signature is correct.  */
            if (signature == 0x61417272)
 8018482:	69fb      	ldr	r3, [r7, #28]
 8018484:	4a2b      	ldr	r2, [pc, #172]	; (8018534 <_fx_media_flush+0x2b4>)
 8018486:	4293      	cmp	r3, r2
 8018488:	d15a      	bne.n	8018540 <_fx_media_flush+0x2c0>
            {

                /* Yes, we have a good FAT32 additional information sector.  */

                /* Set the free cluster count to the available clusters in the media control block.  */
                _fx_utility_32_unsigned_write(&buffer_ptr[488], media_ptr -> fx_media_available_clusters);
 801848a:	6a3b      	ldr	r3, [r7, #32]
 801848c:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8018490:	687b      	ldr	r3, [r7, #4]
 8018492:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8018494:	4619      	mov	r1, r3
 8018496:	4610      	mov	r0, r2
 8018498:	f001 f941 	bl	801971e <_fx_utility_32_unsigned_write>

                /* Set the next free cluster number hint to starting search cluster in the media control block.  */
                _fx_utility_32_unsigned_write(&buffer_ptr[492], media_ptr -> fx_media_cluster_search_start);
 801849c:	6a3b      	ldr	r3, [r7, #32]
 801849e:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80184a2:	687b      	ldr	r3, [r7, #4]
 80184a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80184a8:	4619      	mov	r1, r3
 80184aa:	4610      	mov	r0, r2
 80184ac:	f001 f937 	bl	801971e <_fx_utility_32_unsigned_write>

                /* Now write the sector back out to the media.  */
                media_ptr -> fx_media_driver_request =          FX_DRIVER_WRITE;
 80184b0:	687b      	ldr	r3, [r7, #4]
 80184b2:	2201      	movs	r2, #1
 80184b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
                media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 80184b8:	687b      	ldr	r3, [r7, #4]
 80184ba:	2290      	movs	r2, #144	; 0x90
 80184bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
                media_ptr -> fx_media_driver_buffer =           buffer_ptr;
 80184c0:	687b      	ldr	r3, [r7, #4]
 80184c2:	6a3a      	ldr	r2, [r7, #32]
 80184c4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
                media_ptr -> fx_media_driver_logical_sector =   media_ptr -> fx_media_FAT32_additional_info_sector;
 80184c8:	687b      	ldr	r3, [r7, #4]
 80184ca:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80184cc:	687b      	ldr	r3, [r7, #4]
 80184ce:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
                media_ptr -> fx_media_driver_sectors =          1;
 80184d2:	687b      	ldr	r3, [r7, #4]
 80184d4:	2201      	movs	r2, #1
 80184d6:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
                media_ptr -> fx_media_driver_sector_type =      FX_DIRECTORY_SECTOR;
 80184da:	687b      	ldr	r3, [r7, #4]
 80184dc:	2203      	movs	r2, #3
 80184de:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

                /* Set the system write flag since we are writing a directory sector.  */
                media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 80184e2:	687b      	ldr	r3, [r7, #4]
 80184e4:	2201      	movs	r2, #1
 80184e6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

#ifndef FX_MEDIA_STATISTICS_DISABLE

                /* Increment the number of driver write sector(s) requests.  */
                media_ptr -> fx_media_driver_write_requests++;
 80184ea:	687b      	ldr	r3, [r7, #4]
 80184ec:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 80184f0:	1c5a      	adds	r2, r3, #1
 80184f2:	687b      	ldr	r3, [r7, #4]
 80184f4:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0

                /* If trace is enabled, insert this event into the trace buffer.  */
                FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_WRITE, media_ptr, media_ptr -> fx_media_FAT32_additional_info_sector, 1, buffer_ptr, FX_TRACE_INTERNAL_EVENTS, 0, 0)

                /* Invoke the driver to write the FAT32 additional information sector.  */
                (media_ptr -> fx_media_driver_entry) (media_ptr);
 80184f8:	687b      	ldr	r3, [r7, #4]
 80184fa:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80184fe:	6878      	ldr	r0, [r7, #4]
 8018500:	4798      	blx	r3

                /* Clear the system write flag.  */
                media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 8018502:	687b      	ldr	r3, [r7, #4]
 8018504:	2200      	movs	r2, #0
 8018506:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

                /* Determine if the FAT32 sector was written correctly. */
                if (media_ptr -> fx_media_driver_status != FX_SUCCESS)
 801850a:	687b      	ldr	r3, [r7, #4]
 801850c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8018510:	2b00      	cmp	r3, #0
 8018512:	d011      	beq.n	8018538 <_fx_media_flush+0x2b8>
                {

                    /* Release media protection.  */
                    FX_UNPROTECT
 8018514:	687b      	ldr	r3, [r7, #4]
 8018516:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 801851a:	4618      	mov	r0, r3
 801851c:	f004 fb92 	bl	801cc44 <_tx_mutex_put>

                    /* Return the sector IO error status.  */
                    return(FX_IO_ERROR);
 8018520:	2390      	movs	r3, #144	; 0x90
 8018522:	e035      	b.n	8018590 <_fx_media_flush+0x310>
 8018524:	4d454449 	.word	0x4d454449
 8018528:	24005050 	.word	0x24005050
 801852c:	2400504c 	.word	0x2400504c
 8018530:	41615252 	.word	0x41615252
 8018534:	61417272 	.word	0x61417272
                }

                /* Successful update of the FAT32 additional information sector. Update the
                   last written available cluster count.  */
                media_ptr -> fx_media_FAT32_additional_info_last_available =  media_ptr -> fx_media_available_clusters;
 8018538:	687b      	ldr	r3, [r7, #4]
 801853a:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 801853c:	687b      	ldr	r3, [r7, #4]
 801853e:	66da      	str	r2, [r3, #108]	; 0x6c
    }

#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of driver flush requests.  */
    media_ptr -> fx_media_driver_flush_requests++;
 8018540:	687b      	ldr	r3, [r7, #4]
 8018542:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 8018546:	1c5a      	adds	r2, r3, #1
 8018548:	687b      	ldr	r3, [r7, #4]
 801854a:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
#endif

    /* Build the "flush" I/O driver request.  */
    media_ptr -> fx_media_driver_request =      FX_DRIVER_FLUSH;
 801854e:	687b      	ldr	r3, [r7, #4]
 8018550:	2202      	movs	r2, #2
 8018552:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 8018556:	687b      	ldr	r3, [r7, #4]
 8018558:	2290      	movs	r2, #144	; 0x90
 801855a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_FLUSH, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

    /* Call the specified I/O driver with the flush request.  */
    (media_ptr -> fx_media_driver_entry) (media_ptr);
 801855e:	687b      	ldr	r3, [r7, #4]
 8018560:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8018564:	6878      	ldr	r0, [r7, #4]
 8018566:	4798      	blx	r3

    /* Determine if the I/O driver flushed successfully.  */
    if (media_ptr -> fx_media_driver_status != FX_SUCCESS)
 8018568:	687b      	ldr	r3, [r7, #4]
 801856a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801856e:	2b00      	cmp	r3, #0
 8018570:	d007      	beq.n	8018582 <_fx_media_flush+0x302>
    {

        /* Release media protection.  */
        FX_UNPROTECT
 8018572:	687b      	ldr	r3, [r7, #4]
 8018574:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8018578:	4618      	mov	r0, r3
 801857a:	f004 fb63 	bl	801cc44 <_tx_mutex_put>

        /* Return the driver error status.  */
        return(FX_IO_ERROR);
 801857e:	2390      	movs	r3, #144	; 0x90
 8018580:	e006      	b.n	8018590 <_fx_media_flush+0x310>
    }

    /* Release media protection.  */
    FX_UNPROTECT
 8018582:	687b      	ldr	r3, [r7, #4]
 8018584:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8018588:	4618      	mov	r0, r3
 801858a:	f004 fb5b 	bl	801cc44 <_tx_mutex_put>

    /* If we get here, return successful status to the caller.  */
    return(FX_SUCCESS);
 801858e:	2300      	movs	r3, #0
}
 8018590:	4618      	mov	r0, r3
 8018592:	3730      	adds	r7, #48	; 0x30
 8018594:	46bd      	mov	sp, r7
 8018596:	bd80      	pop	{r7, pc}

08018598 <_fx_media_open>:
/*                                                                        */
/**************************************************************************/
UINT  _fx_media_open(FX_MEDIA *media_ptr, CHAR *media_name,
                     VOID (*media_driver)(FX_MEDIA *), VOID *driver_info_ptr,
                     VOID *memory_ptr, ULONG memory_size)
{
 8018598:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801859c:	b09a      	sub	sp, #104	; 0x68
 801859e:	af04      	add	r7, sp, #16
 80185a0:	60f8      	str	r0, [r7, #12]
 80185a2:	60b9      	str	r1, [r7, #8]
 80185a4:	607a      	str	r2, [r7, #4]
 80185a6:	603b      	str	r3, [r7, #0]
FX_INT_SAVE_AREA


#ifndef FX_DISABLE_BUILD_OPTIONS
    /* Reference the version ID and option words to ensure they are linked in.  */
    if ((_fx_system_build_options_1 | _fx_system_build_options_2 | _fx_system_build_options_3) == 0 ||
 80185a8:	4bba      	ldr	r3, [pc, #744]	; (8018894 <_fx_media_open+0x2fc>)
 80185aa:	681a      	ldr	r2, [r3, #0]
 80185ac:	4bba      	ldr	r3, [pc, #744]	; (8018898 <_fx_media_open+0x300>)
 80185ae:	681b      	ldr	r3, [r3, #0]
 80185b0:	431a      	orrs	r2, r3
 80185b2:	4bba      	ldr	r3, [pc, #744]	; (801889c <_fx_media_open+0x304>)
 80185b4:	681b      	ldr	r3, [r3, #0]
 80185b6:	4313      	orrs	r3, r2
 80185b8:	2b00      	cmp	r3, #0
 80185ba:	d003      	beq.n	80185c4 <_fx_media_open+0x2c>
        _fx_version_id[0] == 0)
 80185bc:	4bb8      	ldr	r3, [pc, #736]	; (80188a0 <_fx_media_open+0x308>)
 80185be:	781b      	ldrb	r3, [r3, #0]
    if ((_fx_system_build_options_1 | _fx_system_build_options_2 | _fx_system_build_options_3) == 0 ||
 80185c0:	2b00      	cmp	r3, #0
 80185c2:	d102      	bne.n	80185ca <_fx_media_open+0x32>
    {

        /* We should never get here!  */
        return(FX_NOT_IMPLEMENTED);
 80185c4:	2322      	movs	r3, #34	; 0x22
 80185c6:	f000 bd53 	b.w	8019070 <_fx_media_open+0xad8>
#ifdef FX_DISABLE_CACHE
    media_ptr -> fx_media_memory_buffer_sector = (ULONG64)-1;
#endif /* FX_DISABLE_CACHE */

    /* Save the basic information in the media control block.  */
    media_ptr -> fx_media_name =                        media_name;
 80185ca:	68fb      	ldr	r3, [r7, #12]
 80185cc:	68ba      	ldr	r2, [r7, #8]
 80185ce:	605a      	str	r2, [r3, #4]
    media_ptr -> fx_media_driver_entry =                media_driver;
 80185d0:	68fb      	ldr	r3, [r7, #12]
 80185d2:	687a      	ldr	r2, [r7, #4]
 80185d4:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
    media_ptr -> fx_media_memory_buffer =               (UCHAR *)memory_ptr;
 80185d8:	68fb      	ldr	r3, [r7, #12]
 80185da:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80185dc:	609a      	str	r2, [r3, #8]
    media_ptr -> fx_media_memory_size =                 memory_size;
 80185de:	68fb      	ldr	r3, [r7, #12]
 80185e0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80185e2:	60da      	str	r2, [r3, #12]
#ifndef FX_DISABLE_FORCE_MEMORY_OPERATION
    media_ptr -> fx_media_disable_burst_cache =         FX_FALSE;
 80185e4:	68fb      	ldr	r3, [r7, #12]
 80185e6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80185ea:	461a      	mov	r2, r3
 80185ec:	2300      	movs	r3, #0
 80185ee:	f8c2 34a4 	str.w	r3, [r2, #1188]	; 0x4a4
    media_ptr -> fx_media_FAT_type =                    0;
 80185f2:	68fb      	ldr	r3, [r7, #12]
 80185f4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80185f8:	2200      	movs	r2, #0
 80185fa:	f883 24b0 	strb.w	r2, [r3, #1200]	; 0x4b0
#endif /* FX_DISABLE_FORCE_MEMORY_OPERATION */

    /* Save the original memory pointer.  */
    original_memory_ptr =  (UCHAR *)memory_ptr;
 80185fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8018600:	643b      	str	r3, [r7, #64]	; 0x40

#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Clear the optional media statistics.  */
    media_ptr -> fx_media_directory_attributes_reads =  0;
 8018602:	68fb      	ldr	r3, [r7, #12]
 8018604:	2200      	movs	r2, #0
 8018606:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
    media_ptr -> fx_media_directory_attributes_sets =  0;
 801860a:	68fb      	ldr	r3, [r7, #12]
 801860c:	2200      	movs	r2, #0
 801860e:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    media_ptr -> fx_media_directory_creates =  0;
 8018612:	68fb      	ldr	r3, [r7, #12]
 8018614:	2200      	movs	r2, #0
 8018616:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    media_ptr -> fx_media_directory_default_gets =  0;
 801861a:	68fb      	ldr	r3, [r7, #12]
 801861c:	2200      	movs	r2, #0
 801861e:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    media_ptr -> fx_media_directory_default_sets =  0;
 8018622:	68fb      	ldr	r3, [r7, #12]
 8018624:	2200      	movs	r2, #0
 8018626:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
    media_ptr -> fx_media_directory_deletes =  0;
 801862a:	68fb      	ldr	r3, [r7, #12]
 801862c:	2200      	movs	r2, #0
 801862e:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
    media_ptr -> fx_media_directory_first_entry_finds =  0;
 8018632:	68fb      	ldr	r3, [r7, #12]
 8018634:	2200      	movs	r2, #0
 8018636:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
    media_ptr -> fx_media_directory_first_full_entry_finds =  0;
 801863a:	68fb      	ldr	r3, [r7, #12]
 801863c:	2200      	movs	r2, #0
 801863e:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    media_ptr -> fx_media_directory_information_gets =  0;
 8018642:	68fb      	ldr	r3, [r7, #12]
 8018644:	2200      	movs	r2, #0
 8018646:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
    media_ptr -> fx_media_directory_local_path_clears =  0;
 801864a:	68fb      	ldr	r3, [r7, #12]
 801864c:	2200      	movs	r2, #0
 801864e:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
    media_ptr -> fx_media_directory_local_path_gets =  0;
 8018652:	68fb      	ldr	r3, [r7, #12]
 8018654:	2200      	movs	r2, #0
 8018656:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    media_ptr -> fx_media_directory_local_path_restores =  0;
 801865a:	68fb      	ldr	r3, [r7, #12]
 801865c:	2200      	movs	r2, #0
 801865e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    media_ptr -> fx_media_directory_local_path_sets =  0;
 8018662:	68fb      	ldr	r3, [r7, #12]
 8018664:	2200      	movs	r2, #0
 8018666:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
    media_ptr -> fx_media_directory_name_tests =  0;
 801866a:	68fb      	ldr	r3, [r7, #12]
 801866c:	2200      	movs	r2, #0
 801866e:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    media_ptr -> fx_media_directory_next_entry_finds =  0;
 8018672:	68fb      	ldr	r3, [r7, #12]
 8018674:	2200      	movs	r2, #0
 8018676:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    media_ptr -> fx_media_directory_next_full_entry_finds =  0;
 801867a:	68fb      	ldr	r3, [r7, #12]
 801867c:	2200      	movs	r2, #0
 801867e:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    media_ptr -> fx_media_directory_renames =  0;
 8018682:	68fb      	ldr	r3, [r7, #12]
 8018684:	2200      	movs	r2, #0
 8018686:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    media_ptr -> fx_media_file_allocates =  0;
 801868a:	68fb      	ldr	r3, [r7, #12]
 801868c:	2200      	movs	r2, #0
 801868e:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    media_ptr -> fx_media_file_attributes_reads =  0;
 8018692:	68fb      	ldr	r3, [r7, #12]
 8018694:	2200      	movs	r2, #0
 8018696:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    media_ptr -> fx_media_file_attributes_sets =  0;
 801869a:	68fb      	ldr	r3, [r7, #12]
 801869c:	2200      	movs	r2, #0
 801869e:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    media_ptr -> fx_media_file_best_effort_allocates =  0;
 80186a2:	68fb      	ldr	r3, [r7, #12]
 80186a4:	2200      	movs	r2, #0
 80186a6:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
    media_ptr -> fx_media_file_closes =  0;
 80186aa:	68fb      	ldr	r3, [r7, #12]
 80186ac:	2200      	movs	r2, #0
 80186ae:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
    media_ptr -> fx_media_file_creates =  0;
 80186b2:	68fb      	ldr	r3, [r7, #12]
 80186b4:	2200      	movs	r2, #0
 80186b6:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
    media_ptr -> fx_media_file_deletes =  0;
 80186ba:	68fb      	ldr	r3, [r7, #12]
 80186bc:	2200      	movs	r2, #0
 80186be:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
    media_ptr -> fx_media_file_opens =  0;
 80186c2:	68fb      	ldr	r3, [r7, #12]
 80186c4:	2200      	movs	r2, #0
 80186c6:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
    media_ptr -> fx_media_file_reads =  0;
 80186ca:	68fb      	ldr	r3, [r7, #12]
 80186cc:	2200      	movs	r2, #0
 80186ce:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    media_ptr -> fx_media_file_relative_seeks =  0;
 80186d2:	68fb      	ldr	r3, [r7, #12]
 80186d4:	2200      	movs	r2, #0
 80186d6:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    media_ptr -> fx_media_file_renames =  0;
 80186da:	68fb      	ldr	r3, [r7, #12]
 80186dc:	2200      	movs	r2, #0
 80186de:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
    media_ptr -> fx_media_file_seeks =  0;
 80186e2:	68fb      	ldr	r3, [r7, #12]
 80186e4:	2200      	movs	r2, #0
 80186e6:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
    media_ptr -> fx_media_file_truncates =  0;
 80186ea:	68fb      	ldr	r3, [r7, #12]
 80186ec:	2200      	movs	r2, #0
 80186ee:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
    media_ptr -> fx_media_file_truncate_releases =  0;
 80186f2:	68fb      	ldr	r3, [r7, #12]
 80186f4:	2200      	movs	r2, #0
 80186f6:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
    media_ptr -> fx_media_file_writes =  0;
 80186fa:	68fb      	ldr	r3, [r7, #12]
 80186fc:	2200      	movs	r2, #0
 80186fe:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
    media_ptr -> fx_media_aborts =  0;
 8018702:	68fb      	ldr	r3, [r7, #12]
 8018704:	2200      	movs	r2, #0
 8018706:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
    media_ptr -> fx_media_flushes =  0;
 801870a:	68fb      	ldr	r3, [r7, #12]
 801870c:	2200      	movs	r2, #0
 801870e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
    media_ptr -> fx_media_reads =  0;
 8018712:	68fb      	ldr	r3, [r7, #12]
 8018714:	2200      	movs	r2, #0
 8018716:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
    media_ptr -> fx_media_writes =  0;
 801871a:	68fb      	ldr	r3, [r7, #12]
 801871c:	2200      	movs	r2, #0
 801871e:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
    media_ptr -> fx_media_directory_entry_reads =  0;
 8018722:	68fb      	ldr	r3, [r7, #12]
 8018724:	2200      	movs	r2, #0
 8018726:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
    media_ptr -> fx_media_directory_entry_writes =  0;
 801872a:	68fb      	ldr	r3, [r7, #12]
 801872c:	2200      	movs	r2, #0
 801872e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
    media_ptr -> fx_media_directory_searches =  0;
 8018732:	68fb      	ldr	r3, [r7, #12]
 8018734:	2200      	movs	r2, #0
 8018736:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
#ifndef FX_MEDIA_DISABLE_SEARCH_CACHE
    media_ptr -> fx_media_directory_search_cache_hits =  0;
 801873a:	68fb      	ldr	r3, [r7, #12]
 801873c:	2200      	movs	r2, #0
 801873e:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
#endif
    media_ptr -> fx_media_directory_free_searches =  0;
 8018742:	68fb      	ldr	r3, [r7, #12]
 8018744:	2200      	movs	r2, #0
 8018746:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174
    media_ptr -> fx_media_fat_entry_reads =  0;
 801874a:	68fb      	ldr	r3, [r7, #12]
 801874c:	2200      	movs	r2, #0
 801874e:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
    media_ptr -> fx_media_fat_entry_writes =  0;
 8018752:	68fb      	ldr	r3, [r7, #12]
 8018754:	2200      	movs	r2, #0
 8018756:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    media_ptr -> fx_media_fat_entry_cache_read_hits =  0;
 801875a:	68fb      	ldr	r3, [r7, #12]
 801875c:	2200      	movs	r2, #0
 801875e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    media_ptr -> fx_media_fat_entry_cache_read_misses =  0;
 8018762:	68fb      	ldr	r3, [r7, #12]
 8018764:	2200      	movs	r2, #0
 8018766:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    media_ptr -> fx_media_fat_entry_cache_write_hits =  0;
 801876a:	68fb      	ldr	r3, [r7, #12]
 801876c:	2200      	movs	r2, #0
 801876e:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    media_ptr -> fx_media_fat_entry_cache_write_misses =  0;
 8018772:	68fb      	ldr	r3, [r7, #12]
 8018774:	2200      	movs	r2, #0
 8018776:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    media_ptr -> fx_media_fat_cache_flushes =  0;
 801877a:	68fb      	ldr	r3, [r7, #12]
 801877c:	2200      	movs	r2, #0
 801877e:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    media_ptr -> fx_media_fat_sector_reads =  0;
 8018782:	68fb      	ldr	r3, [r7, #12]
 8018784:	2200      	movs	r2, #0
 8018786:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    media_ptr -> fx_media_fat_sector_writes =  0;
 801878a:	68fb      	ldr	r3, [r7, #12]
 801878c:	2200      	movs	r2, #0
 801878e:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    media_ptr -> fx_media_logical_sector_reads =  0;
 8018792:	68fb      	ldr	r3, [r7, #12]
 8018794:	2200      	movs	r2, #0
 8018796:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
    media_ptr -> fx_media_logical_sector_writes =  0;
 801879a:	68fb      	ldr	r3, [r7, #12]
 801879c:	2200      	movs	r2, #0
 801879e:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
    media_ptr -> fx_media_logical_sector_cache_read_hits =  0;
 80187a2:	68fb      	ldr	r3, [r7, #12]
 80187a4:	2200      	movs	r2, #0
 80187a6:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
    media_ptr -> fx_media_logical_sector_cache_read_misses =  0;
 80187aa:	68fb      	ldr	r3, [r7, #12]
 80187ac:	2200      	movs	r2, #0
 80187ae:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
    media_ptr -> fx_media_driver_read_requests =  0;
 80187b2:	68fb      	ldr	r3, [r7, #12]
 80187b4:	2200      	movs	r2, #0
 80187b6:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
    media_ptr -> fx_media_driver_write_requests =  0;
 80187ba:	68fb      	ldr	r3, [r7, #12]
 80187bc:	2200      	movs	r2, #0
 80187be:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
    media_ptr -> fx_media_driver_boot_read_requests =  0;
 80187c2:	68fb      	ldr	r3, [r7, #12]
 80187c4:	2200      	movs	r2, #0
 80187c6:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
    media_ptr -> fx_media_driver_boot_write_requests =  0;
 80187ca:	68fb      	ldr	r3, [r7, #12]
 80187cc:	2200      	movs	r2, #0
 80187ce:	f8c3 21b8 	str.w	r2, [r3, #440]	; 0x1b8
    media_ptr -> fx_media_driver_release_sectors_requests =  0;
 80187d2:	68fb      	ldr	r3, [r7, #12]
 80187d4:	2200      	movs	r2, #0
 80187d6:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
    media_ptr -> fx_media_driver_flush_requests =  0;
 80187da:	68fb      	ldr	r3, [r7, #12]
 80187dc:	2200      	movs	r2, #0
 80187de:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_MEDIA_OPEN, media_ptr, media_driver, memory_ptr, memory_size, FX_TRACE_MEDIA_EVENTS, 0, 0)

    /* Initialize the supplied media I/O driver.  First, build the
       initialize driver request.  */
    media_ptr -> fx_media_driver_request =              FX_DRIVER_INIT;
 80187e2:	68fb      	ldr	r3, [r7, #12]
 80187e4:	2204      	movs	r2, #4
 80187e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    media_ptr -> fx_media_driver_status =               FX_IO_ERROR;
 80187ea:	68fb      	ldr	r3, [r7, #12]
 80187ec:	2290      	movs	r2, #144	; 0x90
 80187ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    media_ptr -> fx_media_driver_info =                 driver_info_ptr;
 80187f2:	68fb      	ldr	r3, [r7, #12]
 80187f4:	683a      	ldr	r2, [r7, #0]
 80187f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    media_ptr -> fx_media_driver_write_protect =        FX_FALSE;
 80187fa:	68fb      	ldr	r3, [r7, #12]
 80187fc:	2200      	movs	r2, #0
 80187fe:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    media_ptr -> fx_media_driver_free_sector_update =   FX_FALSE;
 8018802:	68fb      	ldr	r3, [r7, #12]
 8018804:	2200      	movs	r2, #0
 8018806:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
    media_ptr -> fx_media_driver_data_sector_read =     FX_FALSE;
 801880a:	68fb      	ldr	r3, [r7, #12]
 801880c:	2200      	movs	r2, #0
 801880e:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_INIT, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

    /* Call the specified I/O driver with the initialize request.  */
    (media_ptr -> fx_media_driver_entry) (media_ptr);
 8018812:	68fb      	ldr	r3, [r7, #12]
 8018814:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8018818:	68f8      	ldr	r0, [r7, #12]
 801881a:	4798      	blx	r3

    /* Determine if the I/O driver initialized successfully.  */
    if (media_ptr -> fx_media_driver_status != FX_SUCCESS)
 801881c:	68fb      	ldr	r3, [r7, #12]
 801881e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8018822:	2b00      	cmp	r3, #0
 8018824:	d002      	beq.n	801882c <_fx_media_open+0x294>
    {

        /* Return the driver error status.  */
        return(FX_IO_ERROR);
 8018826:	2390      	movs	r3, #144	; 0x90
 8018828:	f000 bc22 	b.w	8019070 <_fx_media_open+0xad8>
    }

#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of driver boot read requests.  */
    media_ptr -> fx_media_driver_boot_read_requests++;
 801882c:	68fb      	ldr	r3, [r7, #12]
 801882e:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 8018832:	1c5a      	adds	r2, r3, #1
 8018834:	68fb      	ldr	r3, [r7, #12]
 8018836:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
#endif

    /* Read the boot sector from the device.  Build the read boot sector
       command.  */
    media_ptr -> fx_media_driver_request =          FX_DRIVER_BOOT_READ;
 801883a:	68fb      	ldr	r3, [r7, #12]
 801883c:	2205      	movs	r2, #5
 801883e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8018842:	68fb      	ldr	r3, [r7, #12]
 8018844:	2290      	movs	r2, #144	; 0x90
 8018846:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    media_ptr -> fx_media_driver_buffer =           memory_ptr;
 801884a:	68fb      	ldr	r3, [r7, #12]
 801884c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801884e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    media_ptr -> fx_media_driver_sectors =          1;
 8018852:	68fb      	ldr	r3, [r7, #12]
 8018854:	2201      	movs	r2, #1
 8018856:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    media_ptr -> fx_media_driver_sector_type =      FX_BOOT_SECTOR;
 801885a:	68fb      	ldr	r3, [r7, #12]
 801885c:	2201      	movs	r2, #1
 801885e:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_BOOT_READ, media_ptr, memory_ptr, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

    /* Invoke the driver to read the boot sector.  */
    (media_ptr -> fx_media_driver_entry) (media_ptr);
 8018862:	68fb      	ldr	r3, [r7, #12]
 8018864:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8018868:	68f8      	ldr	r0, [r7, #12]
 801886a:	4798      	blx	r3

    /* Determine if the boot sector was read correctly. */
    if (media_ptr -> fx_media_driver_status != FX_SUCCESS)
 801886c:	68fb      	ldr	r3, [r7, #12]
 801886e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8018872:	2b00      	cmp	r3, #0
 8018874:	d016      	beq.n	80188a4 <_fx_media_open+0x30c>
    {

        /* Build the "uninitialize" I/O driver request.  */
        media_ptr -> fx_media_driver_request =      FX_DRIVER_UNINIT;
 8018876:	68fb      	ldr	r3, [r7, #12]
 8018878:	2208      	movs	r2, #8
 801887a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 801887e:	68fb      	ldr	r3, [r7, #12]
 8018880:	2290      	movs	r2, #144	; 0x90
 8018882:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_UNINIT, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Call the specified I/O driver with the uninitialize request.  */
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 8018886:	68fb      	ldr	r3, [r7, #12]
 8018888:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 801888c:	68f8      	ldr	r0, [r7, #12]
 801888e:	4798      	blx	r3

        /* Return the boot sector error status.  */
        return(FX_BOOT_ERROR);
 8018890:	2301      	movs	r3, #1
 8018892:	e3ed      	b.n	8019070 <_fx_media_open+0xad8>
 8018894:	2400505c 	.word	0x2400505c
 8018898:	24005060 	.word	0x24005060
 801889c:	24005064 	.word	0x24005064
 80188a0:	24000014 	.word	0x24000014
    }

    /* Extract and validate the media parameters from the boot sector.  */
    if (_fx_media_boot_info_extract(media_ptr) != FX_SUCCESS)
 80188a4:	68f8      	ldr	r0, [r7, #12]
 80188a6:	f7ff fa69 	bl	8017d7c <_fx_media_boot_info_extract>
 80188aa:	4603      	mov	r3, r0
 80188ac:	2b00      	cmp	r3, #0
 80188ae:	d00e      	beq.n	80188ce <_fx_media_open+0x336>
    {

        /* Build the "uninitialize" I/O driver request.  */
        media_ptr -> fx_media_driver_request =      FX_DRIVER_UNINIT;
 80188b0:	68fb      	ldr	r3, [r7, #12]
 80188b2:	2208      	movs	r2, #8
 80188b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 80188b8:	68fb      	ldr	r3, [r7, #12]
 80188ba:	2290      	movs	r2, #144	; 0x90
 80188bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_UNINIT, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Call the specified I/O driver with the uninitialize request.  */
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 80188c0:	68fb      	ldr	r3, [r7, #12]
 80188c2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80188c6:	68f8      	ldr	r0, [r7, #12]
 80188c8:	4798      	blx	r3

        /* Return the invalid media error status.  */
        return(FX_MEDIA_INVALID);
 80188ca:	2302      	movs	r3, #2
 80188cc:	e3d0      	b.n	8019070 <_fx_media_open+0xad8>
    }

    /* Pickup the additional info sector number. This will only be used in FAT32 situations.  */
    additional_info_sector =  _fx_utility_16_unsigned_read(&media_ptr -> fx_media_driver_buffer[48]);
 80188ce:	68fb      	ldr	r3, [r7, #12]
 80188d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80188d4:	3330      	adds	r3, #48	; 0x30
 80188d6:	4618      	mov	r0, r3
 80188d8:	f000 fedc 	bl	8019694 <_fx_utility_16_unsigned_read>
 80188dc:	63f8      	str	r0, [r7, #60]	; 0x3c

    /* Is there at least one?  */
    if (memory_size < media_ptr -> fx_media_bytes_per_sector)
 80188de:	68fb      	ldr	r3, [r7, #12]
 80188e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80188e2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80188e4:	429a      	cmp	r2, r3
 80188e6:	d20e      	bcs.n	8018906 <_fx_media_open+0x36e>
    {

        /* Build the "uninitialize" I/O driver request.  */
        media_ptr -> fx_media_driver_request =      FX_DRIVER_UNINIT;
 80188e8:	68fb      	ldr	r3, [r7, #12]
 80188ea:	2208      	movs	r2, #8
 80188ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 80188f0:	68fb      	ldr	r3, [r7, #12]
 80188f2:	2290      	movs	r2, #144	; 0x90
 80188f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_UNINIT, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Call the specified I/O driver with the uninitialize request.  */
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 80188f8:	68fb      	ldr	r3, [r7, #12]
 80188fa:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80188fe:	68f8      	ldr	r0, [r7, #12]
 8018900:	4798      	blx	r3

        /* Error in the buffer size supplied by user.  */
        return(FX_BUFFER_ERROR);
 8018902:	2321      	movs	r3, #33	; 0x21
 8018904:	e3b4      	b.n	8019070 <_fx_media_open+0xad8>
    }

#ifndef FX_DISABLE_CACHE
    /* Determine how many logical sectors can be cached with user's supplied
       buffer area - there must be at least enough for one sector!  */
    media_ptr -> fx_media_sector_cache_size =  memory_size / media_ptr -> fx_media_bytes_per_sector;
 8018906:	68fb      	ldr	r3, [r7, #12]
 8018908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801890a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801890c:	fbb2 f2f3 	udiv	r2, r2, r3
 8018910:	68fb      	ldr	r3, [r7, #12]
 8018912:	615a      	str	r2, [r3, #20]
    /* If trace is enabled, register this object.  */
    FX_TRACE_OBJECT_REGISTER(FX_TRACE_OBJECT_TYPE_MEDIA, media_ptr, media_name, FX_MAX_FAT_CACHE, media_ptr -> fx_media_sector_cache_size)
    
    /* Adjust the internal cache to fit the fixed number of sector cache control blocks
       built into the media control block.  */
    if (media_ptr -> fx_media_sector_cache_size > FX_MAX_SECTOR_CACHE)
 8018914:	68fb      	ldr	r3, [r7, #12]
 8018916:	695b      	ldr	r3, [r3, #20]
 8018918:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801891c:	d903      	bls.n	8018926 <_fx_media_open+0x38e>
    {

        /* Adjust the number of cache sectors downward.  If this is insufficient,
           the FX_MAX_SECTOR_CACHE constant in FX_API.H must be changed and the FileX
           library must be rebuilt.  */
        media_ptr -> fx_media_sector_cache_size =  FX_MAX_SECTOR_CACHE;
 801891e:	68fb      	ldr	r3, [r7, #12]
 8018920:	f44f 7280 	mov.w	r2, #256	; 0x100
 8018924:	615a      	str	r2, [r3, #20]
    }

    /* Otherwise, everything is okay.  Initialize the data structures for managing the
       logical sector cache.  */
    i =  (UINT)media_ptr -> fx_media_sector_cache_size;
 8018926:	68fb      	ldr	r3, [r7, #12]
 8018928:	695b      	ldr	r3, [r3, #20]
 801892a:	64fb      	str	r3, [r7, #76]	; 0x4c
    cache_entry_ptr =  media_ptr -> fx_media_sector_cache;
 801892c:	68fb      	ldr	r3, [r7, #12]
 801892e:	f503 634a 	add.w	r3, r3, #3232	; 0xca0
 8018932:	647b      	str	r3, [r7, #68]	; 0x44
    while (i--)
 8018934:	e01c      	b.n	8018970 <_fx_media_open+0x3d8>
    {

        /* Initialize each of the cache entries.  */
        cache_entry_ptr -> fx_cached_sector_memory_buffer =  (UCHAR *)memory_ptr;
 8018936:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018938:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801893a:	601a      	str	r2, [r3, #0]
        cache_entry_ptr -> fx_cached_sector =                (~(ULONG64)0);
 801893c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801893e:	f04f 32ff 	mov.w	r2, #4294967295
 8018942:	f04f 33ff 	mov.w	r3, #4294967295
 8018946:	e9c1 2302 	strd	r2, r3, [r1, #8]
        cache_entry_ptr -> fx_cached_sector_buffer_dirty =   FX_FALSE;
 801894a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801894c:	2200      	movs	r2, #0
 801894e:	741a      	strb	r2, [r3, #16]
        cache_entry_ptr -> fx_cached_sector_valid =          FX_FALSE;
 8018950:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018952:	2200      	movs	r2, #0
 8018954:	745a      	strb	r2, [r3, #17]
        cache_entry_ptr -> fx_cached_sector_next_used =      cache_entry_ptr + 1;
 8018956:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018958:	f103 0218 	add.w	r2, r3, #24
 801895c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801895e:	615a      	str	r2, [r3, #20]

        /* Move to the next cache sector entry.  */
        cache_entry_ptr++;
 8018960:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018962:	3318      	adds	r3, #24
 8018964:	647b      	str	r3, [r7, #68]	; 0x44

        /* Update the memory pointer to the next buffer slot.  */
        memory_ptr =  (VOID *)(((UCHAR *)memory_ptr) + media_ptr -> fx_media_bytes_per_sector);
 8018966:	68fb      	ldr	r3, [r7, #12]
 8018968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801896a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801896c:	4413      	add	r3, r2
 801896e:	67bb      	str	r3, [r7, #120]	; 0x78
    while (i--)
 8018970:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018972:	1e5a      	subs	r2, r3, #1
 8018974:	64fa      	str	r2, [r7, #76]	; 0x4c
 8018976:	2b00      	cmp	r3, #0
 8018978:	d1dd      	bne.n	8018936 <_fx_media_open+0x39e>
    }

    /* Backup to the last cache entry to set its next pointer to NULL.  */
    cache_entry_ptr--;
 801897a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801897c:	3b18      	subs	r3, #24
 801897e:	647b      	str	r3, [r7, #68]	; 0x44
    cache_entry_ptr -> fx_cached_sector_next_used =  FX_NULL;
 8018980:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018982:	2200      	movs	r2, #0
 8018984:	615a      	str	r2, [r3, #20]

    /* Remember the last memory address used by the caching logic.  */
    media_ptr -> fx_media_sector_cache_end =  ((UCHAR *)memory_ptr) - 1;
 8018986:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8018988:	1e5a      	subs	r2, r3, #1
 801898a:	68fb      	ldr	r3, [r7, #12]
 801898c:	619a      	str	r2, [r3, #24]

    /* Setup the head pointer of the list.  */
    media_ptr -> fx_media_sector_cache_list_ptr =  media_ptr -> fx_media_sector_cache;
 801898e:	68fb      	ldr	r3, [r7, #12]
 8018990:	f503 624a 	add.w	r2, r3, #3232	; 0xca0
 8018994:	68fb      	ldr	r3, [r7, #12]
 8018996:	61da      	str	r2, [r3, #28]

    /* Setup the bit map that keeps track of the valid hashed cache logical sectors.  */
    media_ptr -> fx_media_sector_cache_hashed_sector_valid =  0;
 8018998:	68fb      	ldr	r3, [r7, #12]
 801899a:	2200      	movs	r2, #0
 801899c:	621a      	str	r2, [r3, #32]

    /* Clear the counter of the number of outstanding dirty sectors.  */
    media_ptr -> fx_media_sector_cache_dirty_count =  0;
 801899e:	68fb      	ldr	r3, [r7, #12]
 80189a0:	2200      	movs	r2, #0
 80189a2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Determine if the logical sector cache should be managed by the hash function
       instead of the linear search. The cache must be a power of 2 that is between the
       minimum and maximum cache size.  */
    if ((media_ptr -> fx_media_sector_cache_size >= FX_SECTOR_CACHE_HASH_ENABLE) &&
 80189a4:	68fb      	ldr	r3, [r7, #12]
 80189a6:	695b      	ldr	r3, [r3, #20]
 80189a8:	2b0f      	cmp	r3, #15
 80189aa:	d91a      	bls.n	80189e2 <_fx_media_open+0x44a>
        ((media_ptr -> fx_media_sector_cache_size ^ (media_ptr -> fx_media_sector_cache_size - 1)) ==
 80189ac:	68fb      	ldr	r3, [r7, #12]
 80189ae:	695a      	ldr	r2, [r3, #20]
 80189b0:	68fb      	ldr	r3, [r7, #12]
 80189b2:	695b      	ldr	r3, [r3, #20]
 80189b4:	3b01      	subs	r3, #1
 80189b6:	405a      	eors	r2, r3
         (media_ptr -> fx_media_sector_cache_size | (media_ptr -> fx_media_sector_cache_size - 1))))
 80189b8:	68fb      	ldr	r3, [r7, #12]
 80189ba:	6959      	ldr	r1, [r3, #20]
 80189bc:	68fb      	ldr	r3, [r7, #12]
 80189be:	695b      	ldr	r3, [r3, #20]
 80189c0:	3b01      	subs	r3, #1
 80189c2:	430b      	orrs	r3, r1
    if ((media_ptr -> fx_media_sector_cache_size >= FX_SECTOR_CACHE_HASH_ENABLE) &&
 80189c4:	429a      	cmp	r2, r3
 80189c6:	d10c      	bne.n	80189e2 <_fx_media_open+0x44a>
    {


        /* Set the logical sector cache hash flag. When this flag is set, the logical
           sector cache is accessed with a hash function instead of a linear search.  */
        media_ptr -> fx_media_sector_cache_hashed =  FX_TRUE;
 80189c8:	68fb      	ldr	r3, [r7, #12]
 80189ca:	2201      	movs	r2, #1
 80189cc:	611a      	str	r2, [r3, #16]
        media_ptr -> fx_media_sector_cache_hash_mask =
            ((media_ptr -> fx_media_sector_cache_size / FX_SECTOR_CACHE_DEPTH) - 1);
 80189ce:	68fb      	ldr	r3, [r7, #12]
 80189d0:	695b      	ldr	r3, [r3, #20]
 80189d2:	089b      	lsrs	r3, r3, #2
 80189d4:	3b01      	subs	r3, #1
        media_ptr -> fx_media_sector_cache_hash_mask =
 80189d6:	68fa      	ldr	r2, [r7, #12]
 80189d8:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 80189dc:	f8c2 34a0 	str.w	r3, [r2, #1184]	; 0x4a0
 80189e0:	e002      	b.n	80189e8 <_fx_media_open+0x450>
    }
    else
    {

        /* Clear the logical sector cache flag.  */
        media_ptr -> fx_media_sector_cache_hashed =  FX_FALSE;
 80189e2:	68fb      	ldr	r3, [r7, #12]
 80189e4:	2200      	movs	r2, #0
 80189e6:	611a      	str	r2, [r3, #16]
    media_ptr -> fx_media_memory_buffer = memory_ptr;
#endif /* FX_DISABLE_CACHE */

#ifndef FX_DISABLE_FORCE_MEMORY_OPERATION
    /* Initialize the FAT cache entry array.  */
    for (i = 0; i < FX_MAX_FAT_CACHE; i++)
 80189e8:	2300      	movs	r3, #0
 80189ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80189ec:	e023      	b.n	8018a36 <_fx_media_open+0x49e>
    {

        /* Clear entry in the FAT cache.  */
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_cluster =   0;
 80189ee:	68f9      	ldr	r1, [r7, #12]
 80189f0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80189f2:	4613      	mov	r3, r2
 80189f4:	005b      	lsls	r3, r3, #1
 80189f6:	4413      	add	r3, r2
 80189f8:	009b      	lsls	r3, r3, #2
 80189fa:	440b      	add	r3, r1
 80189fc:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 8018a00:	2200      	movs	r2, #0
 8018a02:	601a      	str	r2, [r3, #0]
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_value   =   0;
 8018a04:	68f9      	ldr	r1, [r7, #12]
 8018a06:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8018a08:	4613      	mov	r3, r2
 8018a0a:	005b      	lsls	r3, r3, #1
 8018a0c:	4413      	add	r3, r2
 8018a0e:	009b      	lsls	r3, r3, #2
 8018a10:	440b      	add	r3, r1
 8018a12:	f203 735c 	addw	r3, r3, #1884	; 0x75c
 8018a16:	2200      	movs	r2, #0
 8018a18:	601a      	str	r2, [r3, #0]
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty   =   0;
 8018a1a:	68f9      	ldr	r1, [r7, #12]
 8018a1c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8018a1e:	4613      	mov	r3, r2
 8018a20:	005b      	lsls	r3, r3, #1
 8018a22:	4413      	add	r3, r2
 8018a24:	009b      	lsls	r3, r3, #2
 8018a26:	440b      	add	r3, r1
 8018a28:	f503 63ec 	add.w	r3, r3, #1888	; 0x760
 8018a2c:	2200      	movs	r2, #0
 8018a2e:	601a      	str	r2, [r3, #0]
    for (i = 0; i < FX_MAX_FAT_CACHE; i++)
 8018a30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018a32:	3301      	adds	r3, #1
 8018a34:	64fb      	str	r3, [r7, #76]	; 0x4c
 8018a36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018a38:	2b0f      	cmp	r3, #15
 8018a3a:	d9d8      	bls.n	80189ee <_fx_media_open+0x456>
    }

    /* Initialize the secondary FAT update map.  */
    for (i = 0; i < FX_FAT_MAP_SIZE; i++)
 8018a3c:	2300      	movs	r3, #0
 8018a3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8018a40:	e009      	b.n	8018a56 <_fx_media_open+0x4be>
    {

        /* Clear bit map entry for secondary FAT update.  */
        media_ptr -> fx_media_fat_secondary_update_map[i] =  0;
 8018a42:	68fa      	ldr	r2, [r7, #12]
 8018a44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018a46:	4413      	add	r3, r2
 8018a48:	f603 0318 	addw	r3, r3, #2072	; 0x818
 8018a4c:	2200      	movs	r2, #0
 8018a4e:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < FX_FAT_MAP_SIZE; i++)
 8018a50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018a52:	3301      	adds	r3, #1
 8018a54:	64fb      	str	r3, [r7, #76]	; 0x4c
 8018a56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018a58:	2b7f      	cmp	r3, #127	; 0x7f
 8018a5a:	d9f2      	bls.n	8018a42 <_fx_media_open+0x4aa>
    if (media_ptr -> fx_media_FAT_type != FX_exFAT)
    {
#endif /* FX_ENABLE_EXFAT */

        /* Root_sector_start has been computed */
        media_ptr -> fx_media_root_sector_start =  media_ptr -> fx_media_reserved_sectors +
 8018a5c:	68fb      	ldr	r3, [r7, #12]
 8018a5e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
            (media_ptr -> fx_media_number_of_FATs *
 8018a60:	68fb      	ldr	r3, [r7, #12]
 8018a62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
             media_ptr -> fx_media_sectors_per_FAT);
 8018a64:	68f9      	ldr	r1, [r7, #12]
 8018a66:	6d89      	ldr	r1, [r1, #88]	; 0x58
            (media_ptr -> fx_media_number_of_FATs *
 8018a68:	fb01 f303 	mul.w	r3, r1, r3
        media_ptr -> fx_media_root_sector_start =  media_ptr -> fx_media_reserved_sectors +
 8018a6c:	441a      	add	r2, r3
 8018a6e:	68fb      	ldr	r3, [r7, #12]
 8018a70:	649a      	str	r2, [r3, #72]	; 0x48

        /* Calculate the number of directory sectors.  */
        media_ptr -> fx_media_root_sectors =
            ((media_ptr -> fx_media_root_directory_entries * FX_DIR_ENTRY_SIZE) +
 8018a72:	68fb      	ldr	r3, [r7, #12]
 8018a74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8018a76:	015a      	lsls	r2, r3, #5
             media_ptr -> fx_media_bytes_per_sector - 1) /
 8018a78:	68fb      	ldr	r3, [r7, #12]
 8018a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
            ((media_ptr -> fx_media_root_directory_entries * FX_DIR_ENTRY_SIZE) +
 8018a7c:	4413      	add	r3, r2
             media_ptr -> fx_media_bytes_per_sector - 1) /
 8018a7e:	1e5a      	subs	r2, r3, #1
            media_ptr -> fx_media_bytes_per_sector;
 8018a80:	68fb      	ldr	r3, [r7, #12]
 8018a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
             media_ptr -> fx_media_bytes_per_sector - 1) /
 8018a84:	fbb2 f2f3 	udiv	r2, r2, r3
        media_ptr -> fx_media_root_sectors =
 8018a88:	68fb      	ldr	r3, [r7, #12]
 8018a8a:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Calculate the starting data sector.  */
        media_ptr -> fx_media_data_sector_start =  media_ptr -> fx_media_root_sector_start +
 8018a8c:	68fb      	ldr	r3, [r7, #12]
 8018a8e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
            media_ptr -> fx_media_root_sectors;
 8018a90:	68fb      	ldr	r3, [r7, #12]
 8018a92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
        media_ptr -> fx_media_data_sector_start =  media_ptr -> fx_media_root_sector_start +
 8018a94:	441a      	add	r2, r3
 8018a96:	68fb      	ldr	r3, [r7, #12]
 8018a98:	651a      	str	r2, [r3, #80]	; 0x50

        /* Calculate the total number of clusters.  */
        media_ptr -> fx_media_total_clusters =  (ULONG)((media_ptr -> fx_media_total_sectors - media_ptr -> fx_media_data_sector_start) /
 8018a9a:	68fb      	ldr	r3, [r7, #12]
 8018a9c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8018aa0:	68f9      	ldr	r1, [r7, #12]
 8018aa2:	6d09      	ldr	r1, [r1, #80]	; 0x50
 8018aa4:	2000      	movs	r0, #0
 8018aa6:	460c      	mov	r4, r1
 8018aa8:	4605      	mov	r5, r0
 8018aaa:	ebb2 0804 	subs.w	r8, r2, r4
 8018aae:	eb63 0905 	sbc.w	r9, r3, r5
                                                            media_ptr -> fx_media_sectors_per_cluster);
 8018ab2:	68fb      	ldr	r3, [r7, #12]
 8018ab4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018ab6:	2200      	movs	r2, #0
 8018ab8:	469a      	mov	sl, r3
 8018aba:	4693      	mov	fp, r2
        media_ptr -> fx_media_total_clusters =  (ULONG)((media_ptr -> fx_media_total_sectors - media_ptr -> fx_media_data_sector_start) /
 8018abc:	4652      	mov	r2, sl
 8018abe:	465b      	mov	r3, fp
 8018ac0:	4640      	mov	r0, r8
 8018ac2:	4649      	mov	r1, r9
 8018ac4:	f7e7 fd8c 	bl	80005e0 <__aeabi_uldivmod>
 8018ac8:	4602      	mov	r2, r0
 8018aca:	460b      	mov	r3, r1
 8018acc:	68fb      	ldr	r3, [r7, #12]
 8018ace:	641a      	str	r2, [r3, #64]	; 0x40

        /* Determine if a 12-bit FAT is in use.  */
        if (media_ptr -> fx_media_total_clusters < FX_12_BIT_FAT_SIZE)
 8018ad0:	68fb      	ldr	r3, [r7, #12]
 8018ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018ad4:	f640 72f5 	movw	r2, #4085	; 0xff5
 8018ad8:	4293      	cmp	r3, r2
 8018ada:	d819      	bhi.n	8018b10 <_fx_media_open+0x578>
        {

            /* Yes, 12-bit FAT is present.  Set flag accordingly.  */
            media_ptr -> fx_media_12_bit_FAT = FX_TRUE;
 8018adc:	68fb      	ldr	r3, [r7, #12]
 8018ade:	2201      	movs	r2, #1
 8018ae0:	661a      	str	r2, [r3, #96]	; 0x60
            media_ptr -> fx_media_32_bit_FAT = FX_FALSE;
 8018ae2:	68fb      	ldr	r3, [r7, #12]
 8018ae4:	2200      	movs	r2, #0
 8018ae6:	665a      	str	r2, [r3, #100]	; 0x64
#ifdef FX_ENABLE_EXFAT
            media_ptr -> fx_media_FAT_type = FX_FAT12;
#endif /* FX_ENABLE_EXFAT */

            /* No additional information sector in FAT12.  */
            media_ptr -> fx_media_FAT32_additional_info_sector =  0;
 8018ae8:	68fb      	ldr	r3, [r7, #12]
 8018aea:	2200      	movs	r2, #0
 8018aec:	669a      	str	r2, [r3, #104]	; 0x68

            /* Set FAT last and FAT reserved. */
            media_ptr -> fx_media_fat_reserved = FX_RESERVED_1;
 8018aee:	68fb      	ldr	r3, [r7, #12]
 8018af0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8018af4:	461a      	mov	r2, r3
 8018af6:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8018afa:	f8c2 34a8 	str.w	r3, [r2, #1192]	; 0x4a8
            media_ptr -> fx_media_fat_last = FX_LAST_CLUSTER_2;
 8018afe:	68fb      	ldr	r3, [r7, #12]
 8018b00:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8018b04:	461a      	mov	r2, r3
 8018b06:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018b0a:	f8c2 34ac 	str.w	r3, [r2, #1196]	; 0x4ac
 8018b0e:	e037      	b.n	8018b80 <_fx_media_open+0x5e8>
        }
        else if (media_ptr -> fx_media_total_clusters < FX_16_BIT_FAT_SIZE)
 8018b10:	68fb      	ldr	r3, [r7, #12]
 8018b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018b14:	f64f 72f4 	movw	r2, #65524	; 0xfff4
 8018b18:	4293      	cmp	r3, r2
 8018b1a:	d819      	bhi.n	8018b50 <_fx_media_open+0x5b8>
        {

            /* A 16-bit FAT is present.  Set flag accordingly.  */
            media_ptr -> fx_media_12_bit_FAT =  FX_FALSE;
 8018b1c:	68fb      	ldr	r3, [r7, #12]
 8018b1e:	2200      	movs	r2, #0
 8018b20:	661a      	str	r2, [r3, #96]	; 0x60
            media_ptr -> fx_media_32_bit_FAT =  FX_FALSE;
 8018b22:	68fb      	ldr	r3, [r7, #12]
 8018b24:	2200      	movs	r2, #0
 8018b26:	665a      	str	r2, [r3, #100]	; 0x64
#ifdef FX_ENABLE_EXFAT
            media_ptr -> fx_media_FAT_type = FX_FAT16;
#endif /* FX_ENABLE_EXFAT */

            /* No additional information sector in FAT16.  */
            media_ptr -> fx_media_FAT32_additional_info_sector =  0;
 8018b28:	68fb      	ldr	r3, [r7, #12]
 8018b2a:	2200      	movs	r2, #0
 8018b2c:	669a      	str	r2, [r3, #104]	; 0x68

            /* Set FAT last and FAT reserved. */
            media_ptr -> fx_media_fat_reserved = FX_RESERVED_1;
 8018b2e:	68fb      	ldr	r3, [r7, #12]
 8018b30:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8018b34:	461a      	mov	r2, r3
 8018b36:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8018b3a:	f8c2 34a8 	str.w	r3, [r2, #1192]	; 0x4a8
            media_ptr -> fx_media_fat_last = FX_LAST_CLUSTER_2;
 8018b3e:	68fb      	ldr	r3, [r7, #12]
 8018b40:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8018b44:	461a      	mov	r2, r3
 8018b46:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018b4a:	f8c2 34ac 	str.w	r3, [r2, #1196]	; 0x4ac
 8018b4e:	e017      	b.n	8018b80 <_fx_media_open+0x5e8>
        }
        else
        {

            /* Yes, a 32-bit FAT is present.  */
            media_ptr -> fx_media_12_bit_FAT =  FX_FALSE;
 8018b50:	68fb      	ldr	r3, [r7, #12]
 8018b52:	2200      	movs	r2, #0
 8018b54:	661a      	str	r2, [r3, #96]	; 0x60
            media_ptr -> fx_media_32_bit_FAT =  FX_TRUE;
 8018b56:	68fb      	ldr	r3, [r7, #12]
 8018b58:	2201      	movs	r2, #1
 8018b5a:	665a      	str	r2, [r3, #100]	; 0x64
            media_ptr -> fx_media_FAT_type = FX_FAT32;
#endif /* FX_ENABLE_EXFAT */

            /* Save the additional information sector FAT32. This was read from the boot
               sector earlier in this routine. */
            media_ptr -> fx_media_FAT32_additional_info_sector =  additional_info_sector;
 8018b5c:	68fb      	ldr	r3, [r7, #12]
 8018b5e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8018b60:	669a      	str	r2, [r3, #104]	; 0x68

            /* Set FAT last and FAT reserved. */
            media_ptr -> fx_media_fat_reserved = FX_RESERVED_1_32;
 8018b62:	68fb      	ldr	r3, [r7, #12]
 8018b64:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8018b68:	461a      	mov	r2, r3
 8018b6a:	4b95      	ldr	r3, [pc, #596]	; (8018dc0 <_fx_media_open+0x828>)
 8018b6c:	f8c2 34a8 	str.w	r3, [r2, #1192]	; 0x4a8
            media_ptr -> fx_media_fat_last = FX_LAST_CLUSTER_2_32;
 8018b70:	68fb      	ldr	r3, [r7, #12]
 8018b72:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8018b76:	461a      	mov	r2, r3
 8018b78:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8018b7c:	f8c2 34ac 	str.w	r3, [r2, #1196]	; 0x4ac
       it is variable in FAT32.  */
#ifdef FX_ENABLE_EXFAT
    if (media_ptr -> fx_media_32_bit_FAT == FX_TRUE || 
        (media_ptr -> fx_media_FAT_type == FX_exFAT))
#else
    if (media_ptr -> fx_media_32_bit_FAT == FX_TRUE)
 8018b80:	68fb      	ldr	r3, [r7, #12]
 8018b82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8018b84:	2b01      	cmp	r3, #1
 8018b86:	d15f      	bne.n	8018c48 <_fx_media_open+0x6b0>
        if (media_ptr -> fx_media_32_bit_FAT == FX_TRUE)
        {
#endif /* FX_ENABLE_EXFAT */

            /* Root First cluster starts from at least cluster 2, or higher. */
            if (media_ptr -> fx_media_root_cluster_32 < FX_FAT_ENTRY_START)
 8018b88:	68fb      	ldr	r3, [r7, #12]
 8018b8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018b8c:	2b01      	cmp	r3, #1
 8018b8e:	d801      	bhi.n	8018b94 <_fx_media_open+0x5fc>
            {
                return(FX_MEDIA_INVALID);
 8018b90:	2302      	movs	r3, #2
 8018b92:	e26d      	b.n	8019070 <_fx_media_open+0xad8>
            }

            /* Calculate logical number of root dir sector.  */
            media_ptr -> fx_media_root_sector_start = media_ptr -> fx_media_data_sector_start +
 8018b94:	68fb      	ldr	r3, [r7, #12]
 8018b96:	6d1a      	ldr	r2, [r3, #80]	; 0x50
                (media_ptr -> fx_media_root_cluster_32 - FX_FAT_ENTRY_START) *
 8018b98:	68fb      	ldr	r3, [r7, #12]
 8018b9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018b9c:	3b02      	subs	r3, #2
                media_ptr -> fx_media_sectors_per_cluster;
 8018b9e:	68f9      	ldr	r1, [r7, #12]
 8018ba0:	6d49      	ldr	r1, [r1, #84]	; 0x54
                (media_ptr -> fx_media_root_cluster_32 - FX_FAT_ENTRY_START) *
 8018ba2:	fb01 f303 	mul.w	r3, r1, r3
            media_ptr -> fx_media_root_sector_start = media_ptr -> fx_media_data_sector_start +
 8018ba6:	441a      	add	r2, r3
 8018ba8:	68fb      	ldr	r3, [r7, #12]
 8018baa:	649a      	str	r2, [r3, #72]	; 0x48
#ifdef FX_ENABLE_EXFAT
        }
#endif /* FX_ENABLE_EXFAT */

        /* Calculate maximum possible value for fx_media_root_directory_entries */
        i = 0;
 8018bac:	2300      	movs	r3, #0
 8018bae:	64fb      	str	r3, [r7, #76]	; 0x4c
        for (cluster_number = media_ptr -> fx_media_root_cluster_32;;)
 8018bb0:	68fb      	ldr	r3, [r7, #12]
 8018bb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018bb4:	657b      	str	r3, [r7, #84]	; 0x54
        {

            status =  _fx_utility_FAT_entry_read(media_ptr, cluster_number, &FAT_entry);
 8018bb6:	f107 0310 	add.w	r3, r7, #16
 8018bba:	461a      	mov	r2, r3
 8018bbc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8018bbe:	68f8      	ldr	r0, [r7, #12]
 8018bc0:	f000 fdce 	bl	8019760 <_fx_utility_FAT_entry_read>
 8018bc4:	63b8      	str	r0, [r7, #56]	; 0x38
            i++;
 8018bc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018bc8:	3301      	adds	r3, #1
 8018bca:	64fb      	str	r3, [r7, #76]	; 0x4c
            /* Determine if the read was successful.  */
            if (status != FX_SUCCESS)
 8018bcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018bce:	2b00      	cmp	r3, #0
 8018bd0:	d00e      	beq.n	8018bf0 <_fx_media_open+0x658>
            {

                /* Build the "uninitialize" I/O driver request.  */
                media_ptr -> fx_media_driver_request =      FX_DRIVER_UNINIT;
 8018bd2:	68fb      	ldr	r3, [r7, #12]
 8018bd4:	2208      	movs	r2, #8
 8018bd6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
                media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 8018bda:	68fb      	ldr	r3, [r7, #12]
 8018bdc:	2290      	movs	r2, #144	; 0x90
 8018bde:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

                /* If trace is enabled, insert this event into the trace buffer.  */
                FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_UNINIT, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

                /* Call the specified I/O driver with the uninitialize request.  */
                (media_ptr -> fx_media_driver_entry) (media_ptr);
 8018be2:	68fb      	ldr	r3, [r7, #12]
 8018be4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8018be8:	68f8      	ldr	r0, [r7, #12]
 8018bea:	4798      	blx	r3

                return(FX_FAT_READ_ERROR);
 8018bec:	2303      	movs	r3, #3
 8018bee:	e23f      	b.n	8019070 <_fx_media_open+0xad8>
            }

            if ((cluster_number == FAT_entry) || (i > media_ptr -> fx_media_total_clusters))
 8018bf0:	693b      	ldr	r3, [r7, #16]
 8018bf2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8018bf4:	429a      	cmp	r2, r3
 8018bf6:	d004      	beq.n	8018c02 <_fx_media_open+0x66a>
 8018bf8:	68fb      	ldr	r3, [r7, #12]
 8018bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018bfc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8018bfe:	429a      	cmp	r2, r3
 8018c00:	d90e      	bls.n	8018c20 <_fx_media_open+0x688>
            {

                /* Build the "uninitialize" I/O driver request.  */
                media_ptr -> fx_media_driver_request =      FX_DRIVER_UNINIT;
 8018c02:	68fb      	ldr	r3, [r7, #12]
 8018c04:	2208      	movs	r2, #8
 8018c06:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
                media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 8018c0a:	68fb      	ldr	r3, [r7, #12]
 8018c0c:	2290      	movs	r2, #144	; 0x90
 8018c0e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

                /* If trace is enabled, insert this event into the trace buffer.  */
                FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_UNINIT, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

                /* Call the specified I/O driver with the uninitialize request.  */
                (media_ptr -> fx_media_driver_entry) (media_ptr);
 8018c12:	68fb      	ldr	r3, [r7, #12]
 8018c14:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8018c18:	68f8      	ldr	r0, [r7, #12]
 8018c1a:	4798      	blx	r3

                return(FX_FAT_READ_ERROR);
 8018c1c:	2303      	movs	r3, #3
 8018c1e:	e227      	b.n	8019070 <_fx_media_open+0xad8>
            }
            if (FAT_entry >= FX_RESERVED_1_32)
 8018c20:	693b      	ldr	r3, [r7, #16]
 8018c22:	4a68      	ldr	r2, [pc, #416]	; (8018dc4 <_fx_media_open+0x82c>)
 8018c24:	4293      	cmp	r3, r2
 8018c26:	d802      	bhi.n	8018c2e <_fx_media_open+0x696>
            {
                break;
            }
            cluster_number = FAT_entry;
 8018c28:	693b      	ldr	r3, [r7, #16]
 8018c2a:	657b      	str	r3, [r7, #84]	; 0x54
            status =  _fx_utility_FAT_entry_read(media_ptr, cluster_number, &FAT_entry);
 8018c2c:	e7c3      	b.n	8018bb6 <_fx_media_open+0x61e>
                break;
 8018c2e:	bf00      	nop
        }

        /* Calculate the number of directory entries.  */
        media_ptr -> fx_media_root_directory_entries =  (i * media_ptr -> fx_media_sectors_per_cluster *
 8018c30:	68fb      	ldr	r3, [r7, #12]
 8018c32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018c34:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8018c36:	fb02 f303 	mul.w	r3, r2, r3
                                                         media_ptr -> fx_media_bytes_per_sector) / FX_DIR_ENTRY_SIZE;
 8018c3a:	68fa      	ldr	r2, [r7, #12]
 8018c3c:	6a92      	ldr	r2, [r2, #40]	; 0x28
        media_ptr -> fx_media_root_directory_entries =  (i * media_ptr -> fx_media_sectors_per_cluster *
 8018c3e:	fb02 f303 	mul.w	r3, r2, r3
                                                         media_ptr -> fx_media_bytes_per_sector) / FX_DIR_ENTRY_SIZE;
 8018c42:	095a      	lsrs	r2, r3, #5
        media_ptr -> fx_media_root_directory_entries =  (i * media_ptr -> fx_media_sectors_per_cluster *
 8018c44:	68fb      	ldr	r3, [r7, #12]
 8018c46:	679a      	str	r2, [r3, #120]	; 0x78
    }

#ifndef FX_DISABLE_FORCE_MEMORY_OPERATION
    /* Calculate the number of available clusters.  */
    media_ptr -> fx_media_available_clusters =  0;
 8018c48:	68fb      	ldr	r3, [r7, #12]
 8018c4a:	2200      	movs	r2, #0
 8018c4c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the cluster search start to an invalid value.  */
    media_ptr -> fx_media_cluster_search_start =  0;
 8018c4e:	68fb      	ldr	r3, [r7, #12]
 8018c50:	2200      	movs	r2, #0
 8018c52:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif /* FX_DISABLE_FORCE_MEMORY_OPERATION */

    /* Determine if there is 32-bit FAT additional information sector. */
    if (media_ptr -> fx_media_FAT32_additional_info_sector)
 8018c56:	68fb      	ldr	r3, [r7, #12]
 8018c58:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8018c5a:	2b00      	cmp	r3, #0
 8018c5c:	f000 808e 	beq.w	8018d7c <_fx_media_open+0x7e4>
        /* Yes, read the FAT32 additional information sector to get the available cluster count and
           the hint for the first available cluster.  */

#ifndef FX_DISABLE_CACHE
        /* Setup a pointer to the first cached entry's buffer.  */
        buffer_ptr =  (media_ptr -> fx_media_sector_cache_list_ptr) -> fx_cached_sector_memory_buffer;
 8018c60:	68fb      	ldr	r3, [r7, #12]
 8018c62:	69db      	ldr	r3, [r3, #28]
 8018c64:	681b      	ldr	r3, [r3, #0]
 8018c66:	637b      	str	r3, [r7, #52]	; 0x34

        /* Invalidate this cache entry.  */
        (media_ptr -> fx_media_sector_cache_list_ptr) -> fx_cached_sector =  (~((ULONG64) 0));
 8018c68:	68fb      	ldr	r3, [r7, #12]
 8018c6a:	69d9      	ldr	r1, [r3, #28]
 8018c6c:	f04f 32ff 	mov.w	r2, #4294967295
 8018c70:	f04f 33ff 	mov.w	r3, #4294967295
 8018c74:	e9c1 2302 	strd	r2, r3, [r1, #8]
        (media_ptr -> fx_media_sector_cache_list_ptr) -> fx_cached_sector_valid =  FX_FALSE;
 8018c78:	68fb      	ldr	r3, [r7, #12]
 8018c7a:	69db      	ldr	r3, [r3, #28]
 8018c7c:	2200      	movs	r2, #0
 8018c7e:	745a      	strb	r2, [r3, #17]
        buffer_ptr =  media_ptr -> fx_media_memory_buffer;
        media_ptr -> fx_media_memory_buffer_sector = (ULONG64)-1;
#endif /* FX_DISABLE_CACHE */

        /* Read the FAT32 additional information sector from the device.  */
        media_ptr -> fx_media_driver_request =          FX_DRIVER_READ;
 8018c80:	68fb      	ldr	r3, [r7, #12]
 8018c82:	2200      	movs	r2, #0
 8018c84:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8018c88:	68fb      	ldr	r3, [r7, #12]
 8018c8a:	2290      	movs	r2, #144	; 0x90
 8018c8c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        media_ptr -> fx_media_driver_buffer =           buffer_ptr;
 8018c90:	68fb      	ldr	r3, [r7, #12]
 8018c92:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8018c94:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        media_ptr -> fx_media_driver_logical_sector =   media_ptr -> fx_media_FAT32_additional_info_sector;
 8018c98:	68fb      	ldr	r3, [r7, #12]
 8018c9a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8018c9c:	68fb      	ldr	r3, [r7, #12]
 8018c9e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        media_ptr -> fx_media_driver_sectors =          1;
 8018ca2:	68fb      	ldr	r3, [r7, #12]
 8018ca4:	2201      	movs	r2, #1
 8018ca6:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        media_ptr -> fx_media_driver_sector_type =      FX_DIRECTORY_SECTOR;
 8018caa:	68fb      	ldr	r3, [r7, #12]
 8018cac:	2203      	movs	r2, #3
 8018cae:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

#ifndef FX_MEDIA_STATISTICS_DISABLE

        /* Increment the number of driver read sector(s) requests.  */
        media_ptr -> fx_media_driver_read_requests++;
 8018cb2:	68fb      	ldr	r3, [r7, #12]
 8018cb4:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 8018cb8:	1c5a      	adds	r2, r3, #1
 8018cba:	68fb      	ldr	r3, [r7, #12]
 8018cbc:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_READ, media_ptr, media_ptr -> fx_media_FAT32_additional_info_sector, 1, buffer_ptr, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Invoke the driver to read the FAT32 additional information sector.  */
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 8018cc0:	68fb      	ldr	r3, [r7, #12]
 8018cc2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8018cc6:	68f8      	ldr	r0, [r7, #12]
 8018cc8:	4798      	blx	r3

        /* Determine if the FAT32 sector was read correctly. */
        if (media_ptr -> fx_media_driver_status == FX_SUCCESS)
 8018cca:	68fb      	ldr	r3, [r7, #12]
 8018ccc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8018cd0:	2b00      	cmp	r3, #0
 8018cd2:	d150      	bne.n	8018d76 <_fx_media_open+0x7de>
        {

            /* Yes, setup a pointer into the FAT32 additional information sector.  */
            buffer_ptr =  media_ptr -> fx_media_driver_buffer;
 8018cd4:	68fb      	ldr	r3, [r7, #12]
 8018cd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8018cda:	637b      	str	r3, [r7, #52]	; 0x34

            /* Pickup the first signature long word.  */
            signature =  _fx_utility_32_unsigned_read(&buffer_ptr[0]);
 8018cdc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8018cde:	f000 fd01 	bl	80196e4 <_fx_utility_32_unsigned_read>
 8018ce2:	6338      	str	r0, [r7, #48]	; 0x30

            /* Determine if the signature is correct.  */
            if (signature == 0x41615252)
 8018ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018ce6:	4a38      	ldr	r2, [pc, #224]	; (8018dc8 <_fx_media_open+0x830>)
 8018ce8:	4293      	cmp	r3, r2
 8018cea:	d140      	bne.n	8018d6e <_fx_media_open+0x7d6>
            {

                /* Yes, the first signature is correct, now pickup the next signature.  */
                signature =  _fx_utility_32_unsigned_read(&buffer_ptr[484]);
 8018cec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018cee:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8018cf2:	4618      	mov	r0, r3
 8018cf4:	f000 fcf6 	bl	80196e4 <_fx_utility_32_unsigned_read>
 8018cf8:	6338      	str	r0, [r7, #48]	; 0x30

                /* Determine if this signature is correct.  */
                if (signature == 0x61417272)
 8018cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018cfc:	4a33      	ldr	r2, [pc, #204]	; (8018dcc <_fx_media_open+0x834>)
 8018cfe:	4293      	cmp	r3, r2
 8018d00:	d131      	bne.n	8018d66 <_fx_media_open+0x7ce>
                {

                    /* Yes, we have a good FAT32 additional information sector.  */

                    /* Pickup the current available cluster count on the media.  */
                    media_ptr -> fx_media_available_clusters =  _fx_utility_32_unsigned_read(&buffer_ptr[488]);
 8018d02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018d04:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8018d08:	4618      	mov	r0, r3
 8018d0a:	f000 fceb 	bl	80196e4 <_fx_utility_32_unsigned_read>
 8018d0e:	4602      	mov	r2, r0
 8018d10:	68fb      	ldr	r3, [r7, #12]
 8018d12:	67da      	str	r2, [r3, #124]	; 0x7c

                    /* Initialize the last reported available cluster count to the same value.  */
                    media_ptr -> fx_media_FAT32_additional_info_last_available =  media_ptr -> fx_media_available_clusters;
 8018d14:	68fb      	ldr	r3, [r7, #12]
 8018d16:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8018d18:	68fb      	ldr	r3, [r7, #12]
 8018d1a:	66da      	str	r2, [r3, #108]	; 0x6c

                    /* Pickup the hint for the starting free cluster search.  */
                    media_ptr -> fx_media_cluster_search_start =  _fx_utility_32_unsigned_read(&buffer_ptr[492]);
 8018d1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018d1e:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8018d22:	4618      	mov	r0, r3
 8018d24:	f000 fcde 	bl	80196e4 <_fx_utility_32_unsigned_read>
 8018d28:	4602      	mov	r2, r0
 8018d2a:	68fb      	ldr	r3, [r7, #12]
 8018d2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

                    /* Perform a quick sanity check on the available cluster count and the starting free
                       cluster search.  */
                    if ((media_ptr -> fx_media_available_clusters > media_ptr -> fx_media_total_clusters) ||
 8018d30:	68fb      	ldr	r3, [r7, #12]
 8018d32:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8018d34:	68fb      	ldr	r3, [r7, #12]
 8018d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018d38:	429a      	cmp	r2, r3
 8018d3a:	d80c      	bhi.n	8018d56 <_fx_media_open+0x7be>
                        (media_ptr -> fx_media_cluster_search_start > media_ptr -> fx_media_total_clusters + FX_FAT_ENTRY_START) ||
 8018d3c:	68fb      	ldr	r3, [r7, #12]
 8018d3e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8018d42:	68fb      	ldr	r3, [r7, #12]
 8018d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018d46:	3302      	adds	r3, #2
                    if ((media_ptr -> fx_media_available_clusters > media_ptr -> fx_media_total_clusters) ||
 8018d48:	429a      	cmp	r2, r3
 8018d4a:	d804      	bhi.n	8018d56 <_fx_media_open+0x7be>
                        (media_ptr -> fx_media_cluster_search_start < FX_FAT_ENTRY_START))
 8018d4c:	68fb      	ldr	r3, [r7, #12]
 8018d4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
                        (media_ptr -> fx_media_cluster_search_start > media_ptr -> fx_media_total_clusters + FX_FAT_ENTRY_START) ||
 8018d52:	2b01      	cmp	r3, #1
 8018d54:	d812      	bhi.n	8018d7c <_fx_media_open+0x7e4>
                    {

                        /* Something is wrong, clear the available cluster count and search so the regular processing
                           is used.  */
                        media_ptr -> fx_media_available_clusters =    0;
 8018d56:	68fb      	ldr	r3, [r7, #12]
 8018d58:	2200      	movs	r2, #0
 8018d5a:	67da      	str	r2, [r3, #124]	; 0x7c
                        media_ptr -> fx_media_cluster_search_start =  0;
 8018d5c:	68fb      	ldr	r3, [r7, #12]
 8018d5e:	2200      	movs	r2, #0
 8018d60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8018d64:	e00a      	b.n	8018d7c <_fx_media_open+0x7e4>
                }
                else
                {

                    /* Signature is bad, invalidate the additional info sector.  */
                    media_ptr -> fx_media_FAT32_additional_info_sector =  0;
 8018d66:	68fb      	ldr	r3, [r7, #12]
 8018d68:	2200      	movs	r2, #0
 8018d6a:	669a      	str	r2, [r3, #104]	; 0x68
 8018d6c:	e006      	b.n	8018d7c <_fx_media_open+0x7e4>
            }
            else
            {

                /* Signature is bad, invalidate the additional info sector.  */
                media_ptr -> fx_media_FAT32_additional_info_sector =  0;
 8018d6e:	68fb      	ldr	r3, [r7, #12]
 8018d70:	2200      	movs	r2, #0
 8018d72:	669a      	str	r2, [r3, #104]	; 0x68
 8018d74:	e002      	b.n	8018d7c <_fx_media_open+0x7e4>
        }
        else
        {

            /* IO error trying to read additional information sector, invalidate the additional info sector.  */
            media_ptr -> fx_media_FAT32_additional_info_sector =  0;
 8018d76:	68fb      	ldr	r3, [r7, #12]
 8018d78:	2200      	movs	r2, #0
 8018d7a:	669a      	str	r2, [r3, #104]	; 0x68

    /* Search the media to find the first available cluster as well as the total
       available clusters.  */

    /* Determine what type of FAT is present.  */
    if (media_ptr -> fx_media_12_bit_FAT)
 8018d7c:	68fb      	ldr	r3, [r7, #12]
 8018d7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8018d80:	2b00      	cmp	r3, #0
 8018d82:	d040      	beq.n	8018e06 <_fx_media_open+0x86e>

        /* A 12-bit FAT is present.  Utilize the FAT entry read utility to pickup
           each FAT entry's contents.  */

        /* Loop to read each cluster entry in the first FAT.  */
        for (cluster_number =  FX_FAT_ENTRY_START;
 8018d84:	2302      	movs	r3, #2
 8018d86:	657b      	str	r3, [r7, #84]	; 0x54
 8018d88:	e036      	b.n	8018df8 <_fx_media_open+0x860>
             cluster_number < (media_ptr -> fx_media_total_clusters) + FX_FAT_ENTRY_START;
             cluster_number++)
        {

            /* Read a FAT entry.  */
            status =  _fx_utility_FAT_entry_read(media_ptr, cluster_number, &FAT_entry);
 8018d8a:	f107 0310 	add.w	r3, r7, #16
 8018d8e:	461a      	mov	r2, r3
 8018d90:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8018d92:	68f8      	ldr	r0, [r7, #12]
 8018d94:	f000 fce4 	bl	8019760 <_fx_utility_FAT_entry_read>
 8018d98:	63b8      	str	r0, [r7, #56]	; 0x38

            /* Determine if the read was successful.  */
            if (status != FX_SUCCESS)
 8018d9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018d9c:	2b00      	cmp	r3, #0
 8018d9e:	d017      	beq.n	8018dd0 <_fx_media_open+0x838>
            {

                /* Build the "uninitialize" I/O driver request.  */
                media_ptr -> fx_media_driver_request =      FX_DRIVER_UNINIT;
 8018da0:	68fb      	ldr	r3, [r7, #12]
 8018da2:	2208      	movs	r2, #8
 8018da4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
                media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 8018da8:	68fb      	ldr	r3, [r7, #12]
 8018daa:	2290      	movs	r2, #144	; 0x90
 8018dac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

                /* If trace is enabled, insert this event into the trace buffer.  */
                FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_UNINIT, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

                /* Call the specified I/O driver with the uninitialize request.  */
                (media_ptr -> fx_media_driver_entry) (media_ptr);
 8018db0:	68fb      	ldr	r3, [r7, #12]
 8018db2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8018db6:	68f8      	ldr	r0, [r7, #12]
 8018db8:	4798      	blx	r3

                return(FX_FAT_READ_ERROR);
 8018dba:	2303      	movs	r3, #3
 8018dbc:	e158      	b.n	8019070 <_fx_media_open+0xad8>
 8018dbe:	bf00      	nop
 8018dc0:	0ffffff0 	.word	0x0ffffff0
 8018dc4:	0fffffef 	.word	0x0fffffef
 8018dc8:	41615252 	.word	0x41615252
 8018dcc:	61417272 	.word	0x61417272
            }

            /* Now determine if the FAT entry is available.  */
            if (FAT_entry == FX_FREE_CLUSTER)
 8018dd0:	693b      	ldr	r3, [r7, #16]
 8018dd2:	2b00      	cmp	r3, #0
 8018dd4:	d10d      	bne.n	8018df2 <_fx_media_open+0x85a>
            {

                /* Increment the number of available clusters.  */
                media_ptr -> fx_media_available_clusters++;
 8018dd6:	68fb      	ldr	r3, [r7, #12]
 8018dd8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8018dda:	1c5a      	adds	r2, r3, #1
 8018ddc:	68fb      	ldr	r3, [r7, #12]
 8018dde:	67da      	str	r2, [r3, #124]	; 0x7c

                /* Determine if the starting free cluster has been found yet.  */
                if (media_ptr -> fx_media_cluster_search_start == 0)
 8018de0:	68fb      	ldr	r3, [r7, #12]
 8018de2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8018de6:	2b00      	cmp	r3, #0
 8018de8:	d103      	bne.n	8018df2 <_fx_media_open+0x85a>
                {

                    /* Remember the first free cluster to start further searches from.  */
                    media_ptr -> fx_media_cluster_search_start =  cluster_number;
 8018dea:	68fb      	ldr	r3, [r7, #12]
 8018dec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8018dee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
             cluster_number++)
 8018df2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018df4:	3301      	adds	r3, #1
 8018df6:	657b      	str	r3, [r7, #84]	; 0x54
             cluster_number < (media_ptr -> fx_media_total_clusters) + FX_FAT_ENTRY_START;
 8018df8:	68fb      	ldr	r3, [r7, #12]
 8018dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018dfc:	3302      	adds	r3, #2
 8018dfe:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8018e00:	429a      	cmp	r2, r3
 8018e02:	d3c2      	bcc.n	8018d8a <_fx_media_open+0x7f2>
 8018e04:	e0b4      	b.n	8018f70 <_fx_media_open+0x9d8>
    }
#ifdef FX_ENABLE_EXFAT
    else if ((media_ptr -> fx_media_available_clusters == 0)
             && (media_ptr -> fx_media_FAT_type != FX_exFAT))
#else
    else if (media_ptr -> fx_media_available_clusters == 0)
 8018e06:	68fb      	ldr	r3, [r7, #12]
 8018e08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8018e0a:	2b00      	cmp	r3, #0
 8018e0c:	f040 80b0 	bne.w	8018f70 <_fx_media_open+0x9d8>
        /* A 16 or 32-bit FAT is present. Read directly into the logical sector
           cache memory to optimize I/O on larger devices. Since we are looking for
           values of zero, endian issues are not important.  */

        /* Invalidate the current logical sector cache.  */
        _fx_utility_logical_sector_flush(media_ptr, ((ULONG64) 1), (ULONG64) (media_ptr -> fx_media_total_sectors), FX_TRUE);
 8018e10:	68fb      	ldr	r3, [r7, #12]
 8018e12:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8018e16:	2101      	movs	r1, #1
 8018e18:	9102      	str	r1, [sp, #8]
 8018e1a:	e9cd 2300 	strd	r2, r3, [sp]
 8018e1e:	f04f 0201 	mov.w	r2, #1
 8018e22:	f04f 0300 	mov.w	r3, #0
 8018e26:	68f8      	ldr	r0, [r7, #12]
 8018e28:	f001 fe92 	bl	801ab50 <_fx_utility_logical_sector_flush>

        /* Reset the memory pointer.  */
        media_ptr -> fx_media_memory_buffer =  original_memory_ptr;
 8018e2c:	68fb      	ldr	r3, [r7, #12]
 8018e2e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8018e30:	609a      	str	r2, [r3, #8]

        /* Loop through all FAT sectors in the primary FAT.  The first two entries are
           examined in this loop, but they are always unavailable.  */
        cluster_number =  0;
 8018e32:	2300      	movs	r3, #0
 8018e34:	657b      	str	r3, [r7, #84]	; 0x54
#ifndef FX_DISABLE_CACHE
        for (i = 0; i < media_ptr -> fx_media_sectors_per_FAT; i = i + media_ptr -> fx_media_sector_cache_size)
 8018e36:	2300      	movs	r3, #0
 8018e38:	64fb      	str	r3, [r7, #76]	; 0x4c
 8018e3a:	e093      	b.n	8018f64 <_fx_media_open+0x9cc>
        {

            /* Calculate the starting next FAT sector.  */
            FAT_sector =  media_ptr -> fx_media_reserved_sectors + i;
 8018e3c:	68fb      	ldr	r3, [r7, #12]
 8018e3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018e40:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8018e42:	4413      	add	r3, r2
 8018e44:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* Calculate how many sectors to read.  */
            FAT_read_sectors =  media_ptr -> fx_media_sectors_per_FAT - i;
 8018e46:	68fb      	ldr	r3, [r7, #12]
 8018e48:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8018e4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018e4c:	1ad3      	subs	r3, r2, r3
 8018e4e:	653b      	str	r3, [r7, #80]	; 0x50

            /* Determine if there is not enough memory to read the remaining FAT sectors.  */
            if (FAT_read_sectors > media_ptr -> fx_media_sector_cache_size)
 8018e50:	68fb      	ldr	r3, [r7, #12]
 8018e52:	695b      	ldr	r3, [r3, #20]
 8018e54:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8018e56:	429a      	cmp	r2, r3
 8018e58:	d902      	bls.n	8018e60 <_fx_media_open+0x8c8>
            {
                FAT_read_sectors =  media_ptr -> fx_media_sector_cache_size;
 8018e5a:	68fb      	ldr	r3, [r7, #12]
 8018e5c:	695b      	ldr	r3, [r3, #20]
 8018e5e:	653b      	str	r3, [r7, #80]	; 0x50
            /* Calculate how many sectors to read.  */
            FAT_read_sectors =  1;
#endif /* FX_DISABLE_CACHE */

            /* Read the FAT sectors directly from the driver.  */
            media_ptr -> fx_media_driver_request =          FX_DRIVER_READ;
 8018e60:	68fb      	ldr	r3, [r7, #12]
 8018e62:	2200      	movs	r2, #0
 8018e64:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
            media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8018e68:	68fb      	ldr	r3, [r7, #12]
 8018e6a:	2290      	movs	r2, #144	; 0x90
 8018e6c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
            media_ptr -> fx_media_driver_buffer =           media_ptr -> fx_media_memory_buffer;
 8018e70:	68fb      	ldr	r3, [r7, #12]
 8018e72:	689a      	ldr	r2, [r3, #8]
 8018e74:	68fb      	ldr	r3, [r7, #12]
 8018e76:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
            media_ptr -> fx_media_driver_logical_sector =   FAT_sector;
 8018e7a:	68fb      	ldr	r3, [r7, #12]
 8018e7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018e7e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
            media_ptr -> fx_media_driver_sectors =          FAT_read_sectors;
 8018e82:	68fb      	ldr	r3, [r7, #12]
 8018e84:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8018e86:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
            media_ptr -> fx_media_driver_sector_type =      FX_FAT_SECTOR;
 8018e8a:	68fb      	ldr	r3, [r7, #12]
 8018e8c:	2202      	movs	r2, #2
 8018e8e:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

            /* If trace is enabled, insert this event into the trace buffer.  */
            FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_READ, media_ptr, FAT_sector, FAT_read_sectors, media_ptr -> fx_media_memory_buffer, FX_TRACE_INTERNAL_EVENTS, 0, 0)

            /* Invoke the driver to read the FAT sectors.  */
            (media_ptr -> fx_media_driver_entry) (media_ptr);
 8018e92:	68fb      	ldr	r3, [r7, #12]
 8018e94:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8018e98:	68f8      	ldr	r0, [r7, #12]
 8018e9a:	4798      	blx	r3

            /* Determine if the read was successful.  */
            if (media_ptr -> fx_media_driver_status != FX_SUCCESS)
 8018e9c:	68fb      	ldr	r3, [r7, #12]
 8018e9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8018ea2:	2b00      	cmp	r3, #0
 8018ea4:	d00e      	beq.n	8018ec4 <_fx_media_open+0x92c>
            {

                /* Build the "uninitialize" I/O driver request.  */
                media_ptr -> fx_media_driver_request =      FX_DRIVER_UNINIT;
 8018ea6:	68fb      	ldr	r3, [r7, #12]
 8018ea8:	2208      	movs	r2, #8
 8018eaa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
                media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 8018eae:	68fb      	ldr	r3, [r7, #12]
 8018eb0:	2290      	movs	r2, #144	; 0x90
 8018eb2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

                /* If trace is enabled, insert this event into the trace buffer.  */
                FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_UNINIT, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

                /* Call the specified I/O driver with the uninitialize request.  */
                (media_ptr -> fx_media_driver_entry) (media_ptr);
 8018eb6:	68fb      	ldr	r3, [r7, #12]
 8018eb8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8018ebc:	68f8      	ldr	r0, [r7, #12]
 8018ebe:	4798      	blx	r3

                return(FX_FAT_READ_ERROR);
 8018ec0:	2303      	movs	r3, #3
 8018ec2:	e0d5      	b.n	8019070 <_fx_media_open+0xad8>
            }

            /* Calculate the number of bytes in the buffer.  */
            bytes_in_buffer =  (media_ptr -> fx_media_bytes_per_sector * FAT_read_sectors);
 8018ec4:	68fb      	ldr	r3, [r7, #12]
 8018ec6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8018ec8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018eca:	fb02 f303 	mul.w	r3, r2, r3
 8018ece:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Walk through the sector cache memory to search for available clusters and the first
               available if not already found.  */
            for (j = 0; j < bytes_in_buffer;)
 8018ed0:	2300      	movs	r3, #0
 8018ed2:	64bb      	str	r3, [r7, #72]	; 0x48
 8018ed4:	e03d      	b.n	8018f52 <_fx_media_open+0x9ba>
            {

                /* Check for a 32-bit FAT.  */
                if (media_ptr -> fx_media_32_bit_FAT)
 8018ed6:	68fb      	ldr	r3, [r7, #12]
 8018ed8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8018eda:	2b00      	cmp	r3, #0
 8018edc:	d009      	beq.n	8018ef2 <_fx_media_open+0x95a>
                {

                    /* Pickup 32-bit FAT entry.  */
                    FAT_entry =  *((ULONG *)&(media_ptr -> fx_media_memory_buffer[j]));
 8018ede:	68fb      	ldr	r3, [r7, #12]
 8018ee0:	689a      	ldr	r2, [r3, #8]
 8018ee2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018ee4:	4413      	add	r3, r2
 8018ee6:	681b      	ldr	r3, [r3, #0]
 8018ee8:	613b      	str	r3, [r7, #16]

                    /* Advance to next FAT entry.  */
                    j = j + 4;
 8018eea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018eec:	3304      	adds	r3, #4
 8018eee:	64bb      	str	r3, [r7, #72]	; 0x48
 8018ef0:	e011      	b.n	8018f16 <_fx_media_open+0x97e>
                }
                else
                {

                    /* Process a 16-bit FAT entry.  */
                    FAT_entry =  (((ULONG)(media_ptr -> fx_media_memory_buffer[j])) & 0xFF) |
 8018ef2:	68fb      	ldr	r3, [r7, #12]
 8018ef4:	689a      	ldr	r2, [r3, #8]
 8018ef6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018ef8:	4413      	add	r3, r2
 8018efa:	781b      	ldrb	r3, [r3, #0]
 8018efc:	4619      	mov	r1, r3
                        ((((ULONG)(media_ptr -> fx_media_memory_buffer[j + 1])) & 0xFF) << 8);
 8018efe:	68fb      	ldr	r3, [r7, #12]
 8018f00:	689a      	ldr	r2, [r3, #8]
 8018f02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018f04:	3301      	adds	r3, #1
 8018f06:	4413      	add	r3, r2
 8018f08:	781b      	ldrb	r3, [r3, #0]
 8018f0a:	021b      	lsls	r3, r3, #8
                    FAT_entry =  (((ULONG)(media_ptr -> fx_media_memory_buffer[j])) & 0xFF) |
 8018f0c:	430b      	orrs	r3, r1
 8018f0e:	613b      	str	r3, [r7, #16]

                    /* Advance to next FAT entry.  */
                    j =  j + 2;
 8018f10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018f12:	3302      	adds	r3, #2
 8018f14:	64bb      	str	r3, [r7, #72]	; 0x48
                }

                /* Determine if the FAT entry is free.  */
                if (FAT_entry == FX_FREE_CLUSTER)
 8018f16:	693b      	ldr	r3, [r7, #16]
 8018f18:	2b00      	cmp	r3, #0
 8018f1a:	d10d      	bne.n	8018f38 <_fx_media_open+0x9a0>
                {

                    /* Entry is free, increment available clusters.  */
                    media_ptr -> fx_media_available_clusters++;
 8018f1c:	68fb      	ldr	r3, [r7, #12]
 8018f1e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8018f20:	1c5a      	adds	r2, r3, #1
 8018f22:	68fb      	ldr	r3, [r7, #12]
 8018f24:	67da      	str	r2, [r3, #124]	; 0x7c

                    /* Determine if the starting free cluster has been found yet.  */
                    if (media_ptr -> fx_media_cluster_search_start == 0)
 8018f26:	68fb      	ldr	r3, [r7, #12]
 8018f28:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8018f2c:	2b00      	cmp	r3, #0
 8018f2e:	d103      	bne.n	8018f38 <_fx_media_open+0x9a0>
                    {

                        /* Remember the first free cluster to start further searches from.  */
                        media_ptr -> fx_media_cluster_search_start =  cluster_number;
 8018f30:	68fb      	ldr	r3, [r7, #12]
 8018f32:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8018f34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                    }
                }

                /* Increment the cluster number.  */
                cluster_number++;
 8018f38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018f3a:	3301      	adds	r3, #1
 8018f3c:	657b      	str	r3, [r7, #84]	; 0x54

                /* Determine if we have reviewed all FAT entries.  */
                if (cluster_number >= (media_ptr -> fx_media_total_clusters + FX_FAT_ENTRY_START))
 8018f3e:	68fb      	ldr	r3, [r7, #12]
 8018f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018f42:	3302      	adds	r3, #2
 8018f44:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8018f46:	429a      	cmp	r2, r3
 8018f48:	d303      	bcc.n	8018f52 <_fx_media_open+0x9ba>
                {

                    /* Yes, we have looked at all the FAT entries.  */

                    /* Ensure that the outer loop terminates as well.  */
                    i = media_ptr -> fx_media_sectors_per_FAT;
 8018f4a:	68fb      	ldr	r3, [r7, #12]
 8018f4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8018f4e:	64fb      	str	r3, [r7, #76]	; 0x4c
                    break;
 8018f50:	e003      	b.n	8018f5a <_fx_media_open+0x9c2>
            for (j = 0; j < bytes_in_buffer;)
 8018f52:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8018f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018f56:	429a      	cmp	r2, r3
 8018f58:	d3bd      	bcc.n	8018ed6 <_fx_media_open+0x93e>
        for (i = 0; i < media_ptr -> fx_media_sectors_per_FAT; i = i + media_ptr -> fx_media_sector_cache_size)
 8018f5a:	68fb      	ldr	r3, [r7, #12]
 8018f5c:	695b      	ldr	r3, [r3, #20]
 8018f5e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8018f60:	4413      	add	r3, r2
 8018f62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8018f64:	68fb      	ldr	r3, [r7, #12]
 8018f66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8018f68:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8018f6a:	429a      	cmp	r2, r3
 8018f6c:	f4ff af66 	bcc.w	8018e3c <_fx_media_open+0x8a4>
    }
#endif /* FX_ENABLE_EXFAT */

    /* If there were no free clusters, just set the search pointer to the
       first cluster number.  */
    if (media_ptr -> fx_media_cluster_search_start == 0)
 8018f70:	68fb      	ldr	r3, [r7, #12]
 8018f72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8018f76:	2b00      	cmp	r3, #0
 8018f78:	d103      	bne.n	8018f82 <_fx_media_open+0x9ea>
    {
        media_ptr -> fx_media_cluster_search_start =  FX_FAT_ENTRY_START;
 8018f7a:	68fb      	ldr	r3, [r7, #12]
 8018f7c:	2202      	movs	r2, #2
 8018f7e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Setup the current working directory fields to default to the root
       directory.  */
    media_ptr -> fx_media_default_path.fx_path_directory.fx_dir_entry_name =
        media_ptr -> fx_media_default_path.fx_path_name_buffer;
 8018f82:	68fb      	ldr	r3, [r7, #12]
 8018f84:	f503 62ca 	add.w	r2, r3, #1616	; 0x650
    media_ptr -> fx_media_default_path.fx_path_directory.fx_dir_entry_name =
 8018f88:	68fb      	ldr	r3, [r7, #12]
 8018f8a:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
    media_ptr -> fx_media_default_path.fx_path_directory.fx_dir_entry_short_name[0] =  0;
 8018f8e:	68fb      	ldr	r3, [r7, #12]
 8018f90:	2200      	movs	r2, #0
 8018f92:	f883 24e4 	strb.w	r2, [r3, #1252]	; 0x4e4
    media_ptr -> fx_media_default_path.fx_path_directory.fx_dir_entry_name[0] =        0;
 8018f96:	68fb      	ldr	r3, [r7, #12]
 8018f98:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8018f9c:	2200      	movs	r2, #0
 8018f9e:	701a      	strb	r2, [r3, #0]
    media_ptr -> fx_media_default_path.fx_path_string[0] =                      (CHAR)0;
 8018fa0:	68fb      	ldr	r3, [r7, #12]
 8018fa2:	2200      	movs	r2, #0
 8018fa4:	f883 2550 	strb.w	r2, [r3, #1360]	; 0x550
    media_ptr -> fx_media_default_path.fx_path_string[FX_MAXIMUM_PATH - 1] =      (CHAR)0;
 8018fa8:	68fb      	ldr	r3, [r7, #12]
 8018faa:	2200      	movs	r2, #0
 8018fac:	f883 264f 	strb.w	r2, [r3, #1615]	; 0x64f
    media_ptr -> fx_media_default_path.fx_path_current_entry =                         0;
 8018fb0:	68fb      	ldr	r3, [r7, #12]
 8018fb2:	2200      	movs	r2, #0
 8018fb4:	f8c3 2750 	str.w	r2, [r3, #1872]	; 0x750

#ifndef FX_MEDIA_DISABLE_SEARCH_CACHE

    /* Invalidate the previously found directory entry.  */
    media_ptr -> fx_media_last_found_name[0] =  0;
 8018fb8:	68fb      	ldr	r3, [r7, #12]
 8018fba:	2200      	movs	r2, #0
 8018fbc:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
#endif

#ifndef FX_DISABLE_FORCE_MEMORY_OPERATION
    /* Initialize the opened file linked list and associated counter.  */
    media_ptr -> fx_media_opened_file_list =      FX_NULL;
 8018fc0:	68fb      	ldr	r3, [r7, #12]
 8018fc2:	2200      	movs	r2, #0
 8018fc4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
    media_ptr -> fx_media_opened_file_count =     0;
 8018fc8:	68fb      	ldr	r3, [r7, #12]
 8018fca:	2200      	movs	r2, #0
 8018fcc:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
#ifndef FX_SINGLE_THREAD

#ifndef FX_DONT_CREATE_MUTEX

    /* Create ThreadX mutex for protection.  */
    tx_mutex_create(&(media_ptr -> fx_media_protect), "FileX Media Mutex", TX_NO_INHERIT);
 8018fd0:	68fb      	ldr	r3, [r7, #12]
 8018fd2:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8018fd6:	2200      	movs	r2, #0
 8018fd8:	4928      	ldr	r1, [pc, #160]	; (801907c <_fx_media_open+0xae4>)
 8018fda:	4618      	mov	r0, r3
 8018fdc:	f003 fab6 	bl	801c54c <_tx_mutex_create>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8018fe0:	f3ef 8310 	mrs	r3, PRIMASK
 8018fe4:	61fb      	str	r3, [r7, #28]
    return(posture);
 8018fe6:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8018fe8:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 8018fea:	b672      	cpsid	i
    return(int_posture);
 8018fec:	69bb      	ldr	r3, [r7, #24]
    /* Protect against other threads accessing the media.  */
    FX_PROTECT
#endif

    /* Lockout interrupts.  */
    FX_DISABLE_INTS
 8018fee:	627b      	str	r3, [r7, #36]	; 0x24

    /* At this point, the media has been opened successfully.  Place the
       media on the linked list of currently opened media.  */

    /* Load the media ID field in the media control block.  */
    media_ptr -> fx_media_id =  (ULONG)FX_MEDIA_ID;
 8018ff0:	68fb      	ldr	r3, [r7, #12]
 8018ff2:	4a23      	ldr	r2, [pc, #140]	; (8019080 <_fx_media_open+0xae8>)
 8018ff4:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of opened media.  First,
       check for an empty list.  */
    if (_fx_system_media_opened_ptr)
 8018ff6:	4b23      	ldr	r3, [pc, #140]	; (8019084 <_fx_media_open+0xaec>)
 8018ff8:	681b      	ldr	r3, [r3, #0]
 8018ffa:	2b00      	cmp	r3, #0
 8018ffc:	d017      	beq.n	801902e <_fx_media_open+0xa96>
    {

        /* Pickup tail pointer.  */
        tail_ptr =  _fx_system_media_opened_ptr -> fx_media_opened_previous;
 8018ffe:	4b21      	ldr	r3, [pc, #132]	; (8019084 <_fx_media_open+0xaec>)
 8019000:	681b      	ldr	r3, [r3, #0]
 8019002:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8019006:	623b      	str	r3, [r7, #32]

        /* Place the new media in the list.  */
        _fx_system_media_opened_ptr -> fx_media_opened_previous =  media_ptr;
 8019008:	4b1e      	ldr	r3, [pc, #120]	; (8019084 <_fx_media_open+0xaec>)
 801900a:	681b      	ldr	r3, [r3, #0]
 801900c:	68fa      	ldr	r2, [r7, #12]
 801900e:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
        tail_ptr -> fx_media_opened_next =  media_ptr;
 8019012:	6a3b      	ldr	r3, [r7, #32]
 8019014:	68fa      	ldr	r2, [r7, #12]
 8019016:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

        /* Setup this media's opened links.  */
        media_ptr -> fx_media_opened_previous =  tail_ptr;
 801901a:	68fb      	ldr	r3, [r7, #12]
 801901c:	6a3a      	ldr	r2, [r7, #32]
 801901e:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
        media_ptr -> fx_media_opened_next =      _fx_system_media_opened_ptr;
 8019022:	4b18      	ldr	r3, [pc, #96]	; (8019084 <_fx_media_open+0xaec>)
 8019024:	681a      	ldr	r2, [r3, #0]
 8019026:	68fb      	ldr	r3, [r7, #12]
 8019028:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
 801902c:	e00a      	b.n	8019044 <_fx_media_open+0xaac>
    }
    else
    {

        /* The opened media list is empty.  Add the media to empty list.  */
        _fx_system_media_opened_ptr =           media_ptr;
 801902e:	4a15      	ldr	r2, [pc, #84]	; (8019084 <_fx_media_open+0xaec>)
 8019030:	68fb      	ldr	r3, [r7, #12]
 8019032:	6013      	str	r3, [r2, #0]
        media_ptr -> fx_media_opened_next =     media_ptr;
 8019034:	68fb      	ldr	r3, [r7, #12]
 8019036:	68fa      	ldr	r2, [r7, #12]
 8019038:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
        media_ptr -> fx_media_opened_previous = media_ptr;
 801903c:	68fb      	ldr	r3, [r7, #12]
 801903e:	68fa      	ldr	r2, [r7, #12]
 8019040:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
    }

    /* Increment the opened media counter.  */
    _fx_system_media_opened_count++;
 8019044:	4b10      	ldr	r3, [pc, #64]	; (8019088 <_fx_media_open+0xaf0>)
 8019046:	681b      	ldr	r3, [r3, #0]
 8019048:	3301      	adds	r3, #1
 801904a:	4a0f      	ldr	r2, [pc, #60]	; (8019088 <_fx_media_open+0xaf0>)
 801904c:	6013      	str	r3, [r2, #0]

    /* Invoke media open callback. */
    if (media_ptr -> fx_media_open_notify)
 801904e:	68fb      	ldr	r3, [r7, #12]
 8019050:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8019054:	2b00      	cmp	r3, #0
 8019056:	d004      	beq.n	8019062 <_fx_media_open+0xaca>
    {
        media_ptr -> fx_media_open_notify(media_ptr);
 8019058:	68fb      	ldr	r3, [r7, #12]
 801905a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 801905e:	68f8      	ldr	r0, [r7, #12]
 8019060:	4798      	blx	r3
 8019062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019064:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8019066:	697b      	ldr	r3, [r7, #20]
 8019068:	f383 8810 	msr	PRIMASK, r3
}
 801906c:	bf00      	nop
    /* Release media protection.  */
    FX_UNPROTECT
#endif

    /* Return a successful status.  */
    return(FX_SUCCESS);
 801906e:	2300      	movs	r3, #0
}
 8019070:	4618      	mov	r0, r3
 8019072:	3758      	adds	r7, #88	; 0x58
 8019074:	46bd      	mov	sp, r7
 8019076:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801907a:	bf00      	nop
 801907c:	08020e54 	.word	0x08020e54
 8019080:	4d454449 	.word	0x4d454449
 8019084:	24005044 	.word	0x24005044
 8019088:	24005048 	.word	0x24005048

0801908c <_fx_partition_offset_calculate>:
/*                                            resulting in version 6.1.6  */
/*                                                                        */
/**************************************************************************/
UINT  _fx_partition_offset_calculate(void  *partition_sector, UINT partition,
                                     ULONG *partition_start, ULONG *partition_size)
{
 801908c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8019090:	b090      	sub	sp, #64	; 0x40
 8019092:	af00      	add	r7, sp, #0
 8019094:	60f8      	str	r0, [r7, #12]
 8019096:	60b9      	str	r1, [r7, #8]
 8019098:	607a      	str	r2, [r7, #4]
 801909a:	603b      	str	r3, [r7, #0]
ULONG64             total_sectors;
UCHAR               *partition_sector_ptr;


    /* Setup working pointer and initialize count.  */
    partition_sector_ptr =  partition_sector;
 801909c:	68fb      	ldr	r3, [r7, #12]
 801909e:	637b      	str	r3, [r7, #52]	; 0x34
    count =  0;
 80190a0:	2300      	movs	r3, #0
 80190a2:	613b      	str	r3, [r7, #16]

    /* Check for a real boot sector instead of a partition table.  */
    if ((partition_sector_ptr[0] == 0xe9) || ((partition_sector_ptr[0] == 0xeb) && (partition_sector_ptr[2] == 0x90)))    
 80190a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80190a6:	781b      	ldrb	r3, [r3, #0]
 80190a8:	2be9      	cmp	r3, #233	; 0xe9
 80190aa:	d008      	beq.n	80190be <_fx_partition_offset_calculate+0x32>
 80190ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80190ae:	781b      	ldrb	r3, [r3, #0]
 80190b0:	2beb      	cmp	r3, #235	; 0xeb
 80190b2:	d17d      	bne.n	80191b0 <_fx_partition_offset_calculate+0x124>
 80190b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80190b6:	3302      	adds	r3, #2
 80190b8:	781b      	ldrb	r3, [r3, #0]
 80190ba:	2b90      	cmp	r3, #144	; 0x90
 80190bc:	d178      	bne.n	80191b0 <_fx_partition_offset_calculate+0x124>
    {
    
        /* Yes, a real boot sector could be present.  */  

        /* See if there are good values for sectors per FAT.  */
        if (partition_sector_ptr[0x16] || partition_sector_ptr[0x17] || partition_sector_ptr[0x24] || partition_sector_ptr[0x25] || partition_sector_ptr[0x26] || partition_sector_ptr[0x27])
 80190be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80190c0:	3316      	adds	r3, #22
 80190c2:	781b      	ldrb	r3, [r3, #0]
 80190c4:	2b00      	cmp	r3, #0
 80190c6:	d118      	bne.n	80190fa <_fx_partition_offset_calculate+0x6e>
 80190c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80190ca:	3317      	adds	r3, #23
 80190cc:	781b      	ldrb	r3, [r3, #0]
 80190ce:	2b00      	cmp	r3, #0
 80190d0:	d113      	bne.n	80190fa <_fx_partition_offset_calculate+0x6e>
 80190d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80190d4:	3324      	adds	r3, #36	; 0x24
 80190d6:	781b      	ldrb	r3, [r3, #0]
 80190d8:	2b00      	cmp	r3, #0
 80190da:	d10e      	bne.n	80190fa <_fx_partition_offset_calculate+0x6e>
 80190dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80190de:	3325      	adds	r3, #37	; 0x25
 80190e0:	781b      	ldrb	r3, [r3, #0]
 80190e2:	2b00      	cmp	r3, #0
 80190e4:	d109      	bne.n	80190fa <_fx_partition_offset_calculate+0x6e>
 80190e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80190e8:	3326      	adds	r3, #38	; 0x26
 80190ea:	781b      	ldrb	r3, [r3, #0]
 80190ec:	2b00      	cmp	r3, #0
 80190ee:	d104      	bne.n	80190fa <_fx_partition_offset_calculate+0x6e>
 80190f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80190f2:	3327      	adds	r3, #39	; 0x27
 80190f4:	781b      	ldrb	r3, [r3, #0]
 80190f6:	2b00      	cmp	r3, #0
 80190f8:	d05a      	beq.n	80191b0 <_fx_partition_offset_calculate+0x124>
        {

            /* There are values for sectors per FAT.  */

            /* Determine if there is a total sector count.  */
            total_sectors =  0;
 80190fa:	f04f 0200 	mov.w	r2, #0
 80190fe:	f04f 0300 	mov.w	r3, #0
 8019102:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

            if (partition_sector_ptr[0x13] || partition_sector_ptr[0x14])
 8019106:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019108:	3313      	adds	r3, #19
 801910a:	781b      	ldrb	r3, [r3, #0]
 801910c:	2b00      	cmp	r3, #0
 801910e:	d104      	bne.n	801911a <_fx_partition_offset_calculate+0x8e>
 8019110:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019112:	3314      	adds	r3, #20
 8019114:	781b      	ldrb	r3, [r3, #0]
 8019116:	2b00      	cmp	r3, #0
 8019118:	d00d      	beq.n	8019136 <_fx_partition_offset_calculate+0xaa>
            {

                /* Calculate the total sectors, FAT12/16.  */
                total_sectors =  (((ULONG) partition_sector_ptr[0x14]) << 8) | ((ULONG) partition_sector_ptr[0x13]);
 801911a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801911c:	3314      	adds	r3, #20
 801911e:	781b      	ldrb	r3, [r3, #0]
 8019120:	021b      	lsls	r3, r3, #8
 8019122:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8019124:	3213      	adds	r2, #19
 8019126:	7812      	ldrb	r2, [r2, #0]
 8019128:	4313      	orrs	r3, r2
 801912a:	2200      	movs	r2, #0
 801912c:	4698      	mov	r8, r3
 801912e:	4691      	mov	r9, r2
 8019130:	e9c7 890e 	strd	r8, r9, [r7, #56]	; 0x38
 8019134:	e02a      	b.n	801918c <_fx_partition_offset_calculate+0x100>
            }
            else if (partition_sector_ptr[0x20] || partition_sector_ptr[0x21] || partition_sector_ptr[0x22] || partition_sector_ptr[0x23])
 8019136:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019138:	3320      	adds	r3, #32
 801913a:	781b      	ldrb	r3, [r3, #0]
 801913c:	2b00      	cmp	r3, #0
 801913e:	d10e      	bne.n	801915e <_fx_partition_offset_calculate+0xd2>
 8019140:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019142:	3321      	adds	r3, #33	; 0x21
 8019144:	781b      	ldrb	r3, [r3, #0]
 8019146:	2b00      	cmp	r3, #0
 8019148:	d109      	bne.n	801915e <_fx_partition_offset_calculate+0xd2>
 801914a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801914c:	3322      	adds	r3, #34	; 0x22
 801914e:	781b      	ldrb	r3, [r3, #0]
 8019150:	2b00      	cmp	r3, #0
 8019152:	d104      	bne.n	801915e <_fx_partition_offset_calculate+0xd2>
 8019154:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019156:	3323      	adds	r3, #35	; 0x23
 8019158:	781b      	ldrb	r3, [r3, #0]
 801915a:	2b00      	cmp	r3, #0
 801915c:	d016      	beq.n	801918c <_fx_partition_offset_calculate+0x100>
            {

                /* Calculate the total sectors, FAT32.  */
                total_sectors =  (((ULONG) partition_sector_ptr[0x23]) << 24) | 
 801915e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019160:	3323      	adds	r3, #35	; 0x23
 8019162:	781b      	ldrb	r3, [r3, #0]
 8019164:	061a      	lsls	r2, r3, #24
                                 (((ULONG) partition_sector_ptr[0x22]) << 16) |
 8019166:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019168:	3322      	adds	r3, #34	; 0x22
 801916a:	781b      	ldrb	r3, [r3, #0]
 801916c:	041b      	lsls	r3, r3, #16
                total_sectors =  (((ULONG) partition_sector_ptr[0x23]) << 24) | 
 801916e:	431a      	orrs	r2, r3
                                 (((ULONG) partition_sector_ptr[0x21]) << 8)  |
 8019170:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019172:	3321      	adds	r3, #33	; 0x21
 8019174:	781b      	ldrb	r3, [r3, #0]
 8019176:	021b      	lsls	r3, r3, #8
                                 (((ULONG) partition_sector_ptr[0x22]) << 16) |
 8019178:	4313      	orrs	r3, r2
                                 ((ULONG) partition_sector_ptr[0x20]);
 801917a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801917c:	3220      	adds	r2, #32
 801917e:	7812      	ldrb	r2, [r2, #0]
                                 (((ULONG) partition_sector_ptr[0x21]) << 8)  |
 8019180:	4313      	orrs	r3, r2
                total_sectors =  (((ULONG) partition_sector_ptr[0x23]) << 24) | 
 8019182:	2200      	movs	r2, #0
 8019184:	461c      	mov	r4, r3
 8019186:	4615      	mov	r5, r2
 8019188:	e9c7 450e 	strd	r4, r5, [r7, #56]	; 0x38
            }       

            /* Determine if there is a total sector count.  */
            if (total_sectors)
 801918c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8019190:	4313      	orrs	r3, r2
 8019192:	d00d      	beq.n	80191b0 <_fx_partition_offset_calculate+0x124>
            {

                if (partition_start != FX_NULL)
 8019194:	687b      	ldr	r3, [r7, #4]
 8019196:	2b00      	cmp	r3, #0
 8019198:	d002      	beq.n	80191a0 <_fx_partition_offset_calculate+0x114>
                {
                    /* Return an offset of 0, size of boot record, and a successful status.  */
                    *partition_start =  0;
 801919a:	687b      	ldr	r3, [r7, #4]
 801919c:	2200      	movs	r2, #0
 801919e:	601a      	str	r2, [r3, #0]
                }

                /* Determine if the total sectors is required.  */
                if (partition_size != FX_NULL)
 80191a0:	683b      	ldr	r3, [r7, #0]
 80191a2:	2b00      	cmp	r3, #0
 80191a4:	d002      	beq.n	80191ac <_fx_partition_offset_calculate+0x120>
                {

                    /* Return the total sectors.  */
                    *partition_size =  (ULONG)(total_sectors & 0xFFFFFFFF);
 80191a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80191a8:	683b      	ldr	r3, [r7, #0]
 80191aa:	601a      	str	r2, [r3, #0]
                }

                /* Return success!  */
                return(FX_SUCCESS);
 80191ac:	2300      	movs	r3, #0
 80191ae:	e032      	b.n	8019216 <_fx_partition_offset_calculate+0x18a>
        }
#endif /* FX_ENABLE_EXFAT */
    }

    /* Check signature to make sure the buffer is valid.  */
    if ((partition_sector_ptr[510] != 0x55) || (partition_sector_ptr[511] != 0xAA))
 80191b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80191b2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80191b6:	781b      	ldrb	r3, [r3, #0]
 80191b8:	2b55      	cmp	r3, #85	; 0x55
 80191ba:	d105      	bne.n	80191c8 <_fx_partition_offset_calculate+0x13c>
 80191bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80191be:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80191c2:	781b      	ldrb	r3, [r3, #0]
 80191c4:	2baa      	cmp	r3, #170	; 0xaa
 80191c6:	d001      	beq.n	80191cc <_fx_partition_offset_calculate+0x140>
    {

        /* Invalid, return an error.  */
        return(FX_NOT_FOUND);
 80191c8:	2304      	movs	r3, #4
 80191ca:	e024      	b.n	8019216 <_fx_partition_offset_calculate+0x18a>
    }
    
    /* Not bootable, look for specific partition.  */
    _fx_utility_partition_get(partition_table, &count, 0, partition_sector_ptr);
 80191cc:	f107 0110 	add.w	r1, r7, #16
 80191d0:	f107 0014 	add.w	r0, r7, #20
 80191d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80191d6:	2200      	movs	r2, #0
 80191d8:	f000 f822 	bl	8019220 <_fx_utility_partition_get>

    /* Determine if return value is valid.  */
    if (partition >= count)
 80191dc:	693b      	ldr	r3, [r7, #16]
 80191de:	68ba      	ldr	r2, [r7, #8]
 80191e0:	429a      	cmp	r2, r3
 80191e2:	d301      	bcc.n	80191e8 <_fx_partition_offset_calculate+0x15c>
    {

        /* No, return an error.  */
        return(FX_NOT_FOUND);
 80191e4:	2304      	movs	r3, #4
 80191e6:	e016      	b.n	8019216 <_fx_partition_offset_calculate+0x18a>
    }

    /* Return the partition starting sector, if non-NULL.  */
    if (partition_start != FX_NULL)
 80191e8:	687b      	ldr	r3, [r7, #4]
 80191ea:	2b00      	cmp	r3, #0
 80191ec:	d007      	beq.n	80191fe <_fx_partition_offset_calculate+0x172>
    {
        *partition_start =  partition_table[partition].fx_media_part_start;
 80191ee:	68bb      	ldr	r3, [r7, #8]
 80191f0:	00db      	lsls	r3, r3, #3
 80191f2:	3340      	adds	r3, #64	; 0x40
 80191f4:	443b      	add	r3, r7
 80191f6:	f853 2c2c 	ldr.w	r2, [r3, #-44]
 80191fa:	687b      	ldr	r3, [r7, #4]
 80191fc:	601a      	str	r2, [r3, #0]
    }

    /* Return the partition size, if non-NULL.  */
    if (partition_size != FX_NULL)
 80191fe:	683b      	ldr	r3, [r7, #0]
 8019200:	2b00      	cmp	r3, #0
 8019202:	d007      	beq.n	8019214 <_fx_partition_offset_calculate+0x188>
    {
        *partition_size =  partition_table[partition].fx_media_part_size;
 8019204:	68bb      	ldr	r3, [r7, #8]
 8019206:	00db      	lsls	r3, r3, #3
 8019208:	3340      	adds	r3, #64	; 0x40
 801920a:	443b      	add	r3, r7
 801920c:	f853 2c28 	ldr.w	r2, [r3, #-40]
 8019210:	683b      	ldr	r3, [r7, #0]
 8019212:	601a      	str	r2, [r3, #0]
    }

    /* Return successful completion.  */
    return(FX_SUCCESS);
 8019214:	2300      	movs	r3, #0
}
 8019216:	4618      	mov	r0, r3
 8019218:	3740      	adds	r7, #64	; 0x40
 801921a:	46bd      	mov	sp, r7
 801921c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08019220 <_fx_utility_partition_get>:
/*                                            resulting in version 6.1.6  */
/*                                                                        */
/**************************************************************************/
UINT  _fx_utility_partition_get(FX_MEDIA_PARTITION *partition_table, 
                                UINT *count, ULONG sector, UCHAR *sector_buffer)
{
 8019220:	b480      	push	{r7}
 8019222:	b089      	sub	sp, #36	; 0x24
 8019224:	af00      	add	r7, sp, #0
 8019226:	60f8      	str	r0, [r7, #12]
 8019228:	60b9      	str	r1, [r7, #8]
 801922a:	607a      	str	r2, [r7, #4]
 801922c:	603b      	str	r3, [r7, #0]

    /* This parameter has not been supported yet. */
    FX_PARAMETER_NOT_USED(sector); 

    /* Initialize base sector.  */
    base_sector =  0;
 801922e:	2300      	movs	r3, #0
 8019230:	61bb      	str	r3, [r7, #24]

    for(i = 446; i <= 494; i+=16)
 8019232:	f44f 73df 	mov.w	r3, #446	; 0x1be
 8019236:	61fb      	str	r3, [r7, #28]
 8019238:	e06f      	b.n	801931a <_fx_utility_partition_get+0xfa>
    {
        if (sector_buffer[i + 4] == 0) /* no partition entry here */
 801923a:	69fb      	ldr	r3, [r7, #28]
 801923c:	3304      	adds	r3, #4
 801923e:	683a      	ldr	r2, [r7, #0]
 8019240:	4413      	add	r3, r2
 8019242:	781b      	ldrb	r3, [r3, #0]
 8019244:	2b00      	cmp	r3, #0
 8019246:	d10e      	bne.n	8019266 <_fx_utility_partition_get+0x46>
        {

            partition_table[*count].fx_media_part_start = 0;
 8019248:	68bb      	ldr	r3, [r7, #8]
 801924a:	681b      	ldr	r3, [r3, #0]
 801924c:	00db      	lsls	r3, r3, #3
 801924e:	68fa      	ldr	r2, [r7, #12]
 8019250:	4413      	add	r3, r2
 8019252:	2200      	movs	r2, #0
 8019254:	601a      	str	r2, [r3, #0]
            partition_table[*count].fx_media_part_size  = 0;
 8019256:	68bb      	ldr	r3, [r7, #8]
 8019258:	681b      	ldr	r3, [r3, #0]
 801925a:	00db      	lsls	r3, r3, #3
 801925c:	68fa      	ldr	r2, [r7, #12]
 801925e:	4413      	add	r3, r2
 8019260:	2200      	movs	r2, #0
 8019262:	605a      	str	r2, [r3, #4]
 8019264:	e051      	b.n	801930a <_fx_utility_partition_get+0xea>
        }
        else
        {

            value =  (ULONG) sector_buffer[i + 8]; /* little endian start value */
 8019266:	69fb      	ldr	r3, [r7, #28]
 8019268:	3308      	adds	r3, #8
 801926a:	683a      	ldr	r2, [r7, #0]
 801926c:	4413      	add	r3, r2
 801926e:	781b      	ldrb	r3, [r3, #0]
 8019270:	617b      	str	r3, [r7, #20]
            value =  (((ULONG) sector_buffer[i + 9]) << 8) | value;
 8019272:	69fb      	ldr	r3, [r7, #28]
 8019274:	3309      	adds	r3, #9
 8019276:	683a      	ldr	r2, [r7, #0]
 8019278:	4413      	add	r3, r2
 801927a:	781b      	ldrb	r3, [r3, #0]
 801927c:	021b      	lsls	r3, r3, #8
 801927e:	697a      	ldr	r2, [r7, #20]
 8019280:	4313      	orrs	r3, r2
 8019282:	617b      	str	r3, [r7, #20]
            value =  (((ULONG) sector_buffer[i + 10]) << 16) | value;
 8019284:	69fb      	ldr	r3, [r7, #28]
 8019286:	330a      	adds	r3, #10
 8019288:	683a      	ldr	r2, [r7, #0]
 801928a:	4413      	add	r3, r2
 801928c:	781b      	ldrb	r3, [r3, #0]
 801928e:	041b      	lsls	r3, r3, #16
 8019290:	697a      	ldr	r2, [r7, #20]
 8019292:	4313      	orrs	r3, r2
 8019294:	617b      	str	r3, [r7, #20]
            value =  (((ULONG) sector_buffer[i + 11]) << 24) | value;
 8019296:	69fb      	ldr	r3, [r7, #28]
 8019298:	330b      	adds	r3, #11
 801929a:	683a      	ldr	r2, [r7, #0]
 801929c:	4413      	add	r3, r2
 801929e:	781b      	ldrb	r3, [r3, #0]
 80192a0:	061b      	lsls	r3, r3, #24
 80192a2:	697a      	ldr	r2, [r7, #20]
 80192a4:	4313      	orrs	r3, r2
 80192a6:	617b      	str	r3, [r7, #20]
            partition_table[*count].fx_media_part_start = value + base_sector;
 80192a8:	68bb      	ldr	r3, [r7, #8]
 80192aa:	681b      	ldr	r3, [r3, #0]
 80192ac:	00db      	lsls	r3, r3, #3
 80192ae:	68fa      	ldr	r2, [r7, #12]
 80192b0:	4413      	add	r3, r2
 80192b2:	6979      	ldr	r1, [r7, #20]
 80192b4:	69ba      	ldr	r2, [r7, #24]
 80192b6:	440a      	add	r2, r1
 80192b8:	601a      	str	r2, [r3, #0]

            value =  (ULONG) sector_buffer[i + 12]; /* little endian size value */
 80192ba:	69fb      	ldr	r3, [r7, #28]
 80192bc:	330c      	adds	r3, #12
 80192be:	683a      	ldr	r2, [r7, #0]
 80192c0:	4413      	add	r3, r2
 80192c2:	781b      	ldrb	r3, [r3, #0]
 80192c4:	617b      	str	r3, [r7, #20]
            value =  (((ULONG) sector_buffer[i + 13]) << 8) | value;
 80192c6:	69fb      	ldr	r3, [r7, #28]
 80192c8:	330d      	adds	r3, #13
 80192ca:	683a      	ldr	r2, [r7, #0]
 80192cc:	4413      	add	r3, r2
 80192ce:	781b      	ldrb	r3, [r3, #0]
 80192d0:	021b      	lsls	r3, r3, #8
 80192d2:	697a      	ldr	r2, [r7, #20]
 80192d4:	4313      	orrs	r3, r2
 80192d6:	617b      	str	r3, [r7, #20]
            value =  (((ULONG) sector_buffer[i + 14]) << 16) | value;
 80192d8:	69fb      	ldr	r3, [r7, #28]
 80192da:	330e      	adds	r3, #14
 80192dc:	683a      	ldr	r2, [r7, #0]
 80192de:	4413      	add	r3, r2
 80192e0:	781b      	ldrb	r3, [r3, #0]
 80192e2:	041b      	lsls	r3, r3, #16
 80192e4:	697a      	ldr	r2, [r7, #20]
 80192e6:	4313      	orrs	r3, r2
 80192e8:	617b      	str	r3, [r7, #20]
            value =  (((ULONG) sector_buffer[i + 15]) << 24) | value;
 80192ea:	69fb      	ldr	r3, [r7, #28]
 80192ec:	330f      	adds	r3, #15
 80192ee:	683a      	ldr	r2, [r7, #0]
 80192f0:	4413      	add	r3, r2
 80192f2:	781b      	ldrb	r3, [r3, #0]
 80192f4:	061b      	lsls	r3, r3, #24
 80192f6:	697a      	ldr	r2, [r7, #20]
 80192f8:	4313      	orrs	r3, r2
 80192fa:	617b      	str	r3, [r7, #20]
            partition_table[*count].fx_media_part_size = value;
 80192fc:	68bb      	ldr	r3, [r7, #8]
 80192fe:	681b      	ldr	r3, [r3, #0]
 8019300:	00db      	lsls	r3, r3, #3
 8019302:	68fa      	ldr	r2, [r7, #12]
 8019304:	4413      	add	r3, r2
 8019306:	697a      	ldr	r2, [r7, #20]
 8019308:	605a      	str	r2, [r3, #4]
        }

        (*count)++;
 801930a:	68bb      	ldr	r3, [r7, #8]
 801930c:	681b      	ldr	r3, [r3, #0]
 801930e:	1c5a      	adds	r2, r3, #1
 8019310:	68bb      	ldr	r3, [r7, #8]
 8019312:	601a      	str	r2, [r3, #0]
    for(i = 446; i <= 494; i+=16)
 8019314:	69fb      	ldr	r3, [r7, #28]
 8019316:	3310      	adds	r3, #16
 8019318:	61fb      	str	r3, [r7, #28]
 801931a:	69fb      	ldr	r3, [r7, #28]
 801931c:	f5b3 7ff7 	cmp.w	r3, #494	; 0x1ee
 8019320:	d98b      	bls.n	801923a <_fx_utility_partition_get+0x1a>
    }

    /* Return success.  */
    return(FX_SUCCESS);
 8019322:	2300      	movs	r3, #0
}
 8019324:	4618      	mov	r0, r3
 8019326:	3724      	adds	r7, #36	; 0x24
 8019328:	46bd      	mov	sp, r7
 801932a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801932e:	4770      	bx	lr

08019330 <_fx_system_initialize>:
/*                                            disable build options,      */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _fx_system_initialize(VOID)
{
 8019330:	b580      	push	{r7, lr}
 8019332:	b084      	sub	sp, #16
 8019334:	af04      	add	r7, sp, #16
    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_SYSTEM_INITIALIZE, 0, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

    /* Initialize the head pointer of the opened media list and the
       number of opened media.  */
    _fx_system_media_opened_ptr =       FX_NULL;
 8019336:	4b27      	ldr	r3, [pc, #156]	; (80193d4 <_fx_system_initialize+0xa4>)
 8019338:	2200      	movs	r2, #0
 801933a:	601a      	str	r2, [r3, #0]
    _fx_system_media_opened_count =     0;
 801933c:	4b26      	ldr	r3, [pc, #152]	; (80193d8 <_fx_system_initialize+0xa8>)
 801933e:	2200      	movs	r2, #0
 8019340:	601a      	str	r2, [r3, #0]

    /* Initialize the time and date fields with their default values.  */
    _fx_system_date =   FX_INITIAL_DATE;
 8019342:	4b26      	ldr	r3, [pc, #152]	; (80193dc <_fx_system_initialize+0xac>)
 8019344:	f644 2221 	movw	r2, #18977	; 0x4a21
 8019348:	601a      	str	r2, [r3, #0]
    _fx_system_time =   FX_INITIAL_TIME;
 801934a:	4b25      	ldr	r3, [pc, #148]	; (80193e0 <_fx_system_initialize+0xb0>)
 801934c:	2200      	movs	r2, #0
 801934e:	601a      	str	r2, [r3, #0]

    /* Initialize the sector and FAT cache sizes.  */
    _fx_system_media_max_sector_cache =  FX_MAX_SECTOR_CACHE;
 8019350:	4b24      	ldr	r3, [pc, #144]	; (80193e4 <_fx_system_initialize+0xb4>)
 8019352:	f44f 7280 	mov.w	r2, #256	; 0x100
 8019356:	601a      	str	r2, [r3, #0]
    _fx_system_media_max_fat_cache =     FX_MAX_FAT_CACHE;
 8019358:	4b23      	ldr	r3, [pc, #140]	; (80193e8 <_fx_system_initialize+0xb8>)
 801935a:	2210      	movs	r2, #16
 801935c:	601a      	str	r2, [r3, #0]
       FX_UPDATE_RATE_IN_TICKS.  Note that the timer is not necessary for
       regular FileX operation - it is only needed for accurate system
       date and time stamps on files.  */

#ifndef FX_NO_TIMER
    tx_timer_create(&_fx_system_timer, "FileX System Timer", _fx_system_timer_entry, FX_TIMER_ID,
 801935e:	2301      	movs	r3, #1
 8019360:	9302      	str	r3, [sp, #8]
 8019362:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8019366:	9301      	str	r3, [sp, #4]
 8019368:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801936c:	9300      	str	r3, [sp, #0]
 801936e:	4b1f      	ldr	r3, [pc, #124]	; (80193ec <_fx_system_initialize+0xbc>)
 8019370:	4a1f      	ldr	r2, [pc, #124]	; (80193f0 <_fx_system_initialize+0xc0>)
 8019372:	4920      	ldr	r1, [pc, #128]	; (80193f4 <_fx_system_initialize+0xc4>)
 8019374:	4820      	ldr	r0, [pc, #128]	; (80193f8 <_fx_system_initialize+0xc8>)
 8019376:	f004 fe61 	bl	801e03c <_tx_timer_create>
    /* Setup the build options variables.  */

    /* Setup the first build options variable.  */
    if (FX_MAX_LONG_NAME_LEN > 0xFF)
    {
        _fx_system_build_options_1 =  _fx_system_build_options_1 | (((ULONG)0xFF) << 24);
 801937a:	4b20      	ldr	r3, [pc, #128]	; (80193fc <_fx_system_initialize+0xcc>)
 801937c:	681b      	ldr	r3, [r3, #0]
 801937e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8019382:	4a1e      	ldr	r2, [pc, #120]	; (80193fc <_fx_system_initialize+0xcc>)
 8019384:	6013      	str	r3, [r2, #0]
    {
        _fx_system_build_options_1 =  _fx_system_build_options_1 | (((ULONG)(FX_MAX_LONG_NAME_LEN & 0xFF)) << 24);
    }
    if (FX_MAX_LAST_NAME_LEN > 0xFF)
    {
        _fx_system_build_options_1 =  _fx_system_build_options_1 | (((ULONG)0xFF) << 16);
 8019386:	4b1d      	ldr	r3, [pc, #116]	; (80193fc <_fx_system_initialize+0xcc>)
 8019388:	681b      	ldr	r3, [r3, #0]
 801938a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801938e:	4a1b      	ldr	r2, [pc, #108]	; (80193fc <_fx_system_initialize+0xcc>)
 8019390:	6013      	str	r3, [r2, #0]
    {
        _fx_system_build_options_2 =  _fx_system_build_options_2 | (((ULONG)0xFFFF) << 16);
    }
    else
    {
        _fx_system_build_options_2 =  _fx_system_build_options_2 | (((ULONG)FX_MAX_SECTOR_CACHE) << 16);
 8019392:	4b1b      	ldr	r3, [pc, #108]	; (8019400 <_fx_system_initialize+0xd0>)
 8019394:	681b      	ldr	r3, [r3, #0]
 8019396:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801939a:	4a19      	ldr	r2, [pc, #100]	; (8019400 <_fx_system_initialize+0xd0>)
 801939c:	6013      	str	r3, [r2, #0]
    {
        _fx_system_build_options_2 =  _fx_system_build_options_2 | (((ULONG)0xFF) << 8);
    }
    else
    {
        _fx_system_build_options_2 =  _fx_system_build_options_2 | (((ULONG)FX_FAT_MAP_SIZE) << 8);
 801939e:	4b18      	ldr	r3, [pc, #96]	; (8019400 <_fx_system_initialize+0xd0>)
 80193a0:	681b      	ldr	r3, [r3, #0]
 80193a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80193a6:	4a16      	ldr	r2, [pc, #88]	; (8019400 <_fx_system_initialize+0xd0>)
 80193a8:	6013      	str	r3, [r2, #0]
    {
        _fx_system_build_options_2 =  _fx_system_build_options_2 | ((ULONG)0xFF);
    }
    else
    {
        _fx_system_build_options_2 =  _fx_system_build_options_2 | ((ULONG)FX_MAX_FAT_CACHE);
 80193aa:	4b15      	ldr	r3, [pc, #84]	; (8019400 <_fx_system_initialize+0xd0>)
 80193ac:	681b      	ldr	r3, [r3, #0]
 80193ae:	f043 0310 	orr.w	r3, r3, #16
 80193b2:	4a13      	ldr	r2, [pc, #76]	; (8019400 <_fx_system_initialize+0xd0>)
 80193b4:	6013      	str	r3, [r2, #0]
    {
        _fx_system_build_options_3 =  _fx_system_build_options_3 | (((ULONG)0xFF) << 16);
    }
    else
    {
        _fx_system_build_options_3 =  _fx_system_build_options_3 | (((ULONG)FX_UPDATE_RATE_IN_SECONDS) << 16);
 80193b6:	4b13      	ldr	r3, [pc, #76]	; (8019404 <_fx_system_initialize+0xd4>)
 80193b8:	681b      	ldr	r3, [r3, #0]
 80193ba:	f443 2320 	orr.w	r3, r3, #655360	; 0xa0000
 80193be:	4a11      	ldr	r2, [pc, #68]	; (8019404 <_fx_system_initialize+0xd4>)
 80193c0:	6013      	str	r3, [r2, #0]
    {
        _fx_system_build_options_3 =  _fx_system_build_options_3 | ((ULONG)0xFFFF);
    }
    else
    {
        _fx_system_build_options_3 =  _fx_system_build_options_3 | ((ULONG)FX_UPDATE_RATE_IN_TICKS);
 80193c2:	4b10      	ldr	r3, [pc, #64]	; (8019404 <_fx_system_initialize+0xd4>)
 80193c4:	681b      	ldr	r3, [r3, #0]
 80193c6:	f443 737a 	orr.w	r3, r3, #1000	; 0x3e8
 80193ca:	4a0e      	ldr	r2, [pc, #56]	; (8019404 <_fx_system_initialize+0xd4>)
 80193cc:	6013      	str	r3, [r2, #0]
    }
#endif /* FX_DISABLE_BUILD_OPTIONS */
}
 80193ce:	bf00      	nop
 80193d0:	46bd      	mov	sp, r7
 80193d2:	bd80      	pop	{r7, pc}
 80193d4:	24005044 	.word	0x24005044
 80193d8:	24005048 	.word	0x24005048
 80193dc:	2400504c 	.word	0x2400504c
 80193e0:	24005050 	.word	0x24005050
 80193e4:	24005054 	.word	0x24005054
 80193e8:	24005058 	.word	0x24005058
 80193ec:	46585359 	.word	0x46585359
 80193f0:	08019409 	.word	0x08019409
 80193f4:	08020e68 	.word	0x08020e68
 80193f8:	24005068 	.word	0x24005068
 80193fc:	2400505c 	.word	0x2400505c
 8019400:	24005060 	.word	0x24005060
 8019404:	24005064 	.word	0x24005064

08019408 <_fx_system_timer_entry>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _fx_system_timer_entry(ULONG id)
{
 8019408:	b480      	push	{r7}
 801940a:	b089      	sub	sp, #36	; 0x24
 801940c:	af00      	add	r7, sp, #0
 801940e:	6078      	str	r0, [r7, #4]
UINT month;
UINT year;


    /* Determine if the ID is valid.  */
    if (id == FX_TIMER_ID)
 8019410:	687b      	ldr	r3, [r7, #4]
 8019412:	4a9c      	ldr	r2, [pc, #624]	; (8019684 <_fx_system_timer_entry+0x27c>)
 8019414:	4293      	cmp	r3, r2
 8019416:	f040 8130 	bne.w	801967a <_fx_system_timer_entry+0x272>
    {

        /* Break the current date time into separate fields for easier work!  */
        second =  (_fx_system_time & FX_SECOND_MASK) * 2;
 801941a:	4b9b      	ldr	r3, [pc, #620]	; (8019688 <_fx_system_timer_entry+0x280>)
 801941c:	681b      	ldr	r3, [r3, #0]
 801941e:	f003 031f 	and.w	r3, r3, #31
 8019422:	005b      	lsls	r3, r3, #1
 8019424:	61fb      	str	r3, [r7, #28]
        minute =  (_fx_system_time >> FX_MINUTE_SHIFT) & FX_MINUTE_MASK;
 8019426:	4b98      	ldr	r3, [pc, #608]	; (8019688 <_fx_system_timer_entry+0x280>)
 8019428:	681b      	ldr	r3, [r3, #0]
 801942a:	095b      	lsrs	r3, r3, #5
 801942c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8019430:	61bb      	str	r3, [r7, #24]
        hour =    (_fx_system_time >> FX_HOUR_SHIFT) & FX_HOUR_MASK;
 8019432:	4b95      	ldr	r3, [pc, #596]	; (8019688 <_fx_system_timer_entry+0x280>)
 8019434:	681b      	ldr	r3, [r3, #0]
 8019436:	0adb      	lsrs	r3, r3, #11
 8019438:	f003 031f 	and.w	r3, r3, #31
 801943c:	617b      	str	r3, [r7, #20]
        day =     _fx_system_date & FX_DAY_MASK;
 801943e:	4b93      	ldr	r3, [pc, #588]	; (801968c <_fx_system_timer_entry+0x284>)
 8019440:	681b      	ldr	r3, [r3, #0]
 8019442:	f003 031f 	and.w	r3, r3, #31
 8019446:	613b      	str	r3, [r7, #16]
        month =   (_fx_system_date >> FX_MONTH_SHIFT) & FX_MONTH_MASK;
 8019448:	4b90      	ldr	r3, [pc, #576]	; (801968c <_fx_system_timer_entry+0x284>)
 801944a:	681b      	ldr	r3, [r3, #0]
 801944c:	095b      	lsrs	r3, r3, #5
 801944e:	f003 030f 	and.w	r3, r3, #15
 8019452:	60fb      	str	r3, [r7, #12]
        year =    ((_fx_system_date >> FX_YEAR_SHIFT) & FX_YEAR_MASK) + FX_BASE_YEAR;
 8019454:	4b8d      	ldr	r3, [pc, #564]	; (801968c <_fx_system_timer_entry+0x284>)
 8019456:	681b      	ldr	r3, [r3, #0]
 8019458:	0a5b      	lsrs	r3, r3, #9
 801945a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801945e:	f203 73bc 	addw	r3, r3, #1980	; 0x7bc
 8019462:	60bb      	str	r3, [r7, #8]

        /* Now apply the "second" update.  */
        second =  second + FX_UPDATE_RATE_IN_SECONDS;
 8019464:	69fb      	ldr	r3, [r7, #28]
 8019466:	330a      	adds	r3, #10
 8019468:	61fb      	str	r3, [r7, #28]

        /* Determine if we need to adjust the minute field.  */
        if (second > FX_MAXIMUM_SECOND)
 801946a:	69fb      	ldr	r3, [r7, #28]
 801946c:	2b3b      	cmp	r3, #59	; 0x3b
 801946e:	f240 80eb 	bls.w	8019648 <_fx_system_timer_entry+0x240>
        {

            /* Yes, we need to adjust the minute field.  */
            minute =  minute + second / 60;
 8019472:	69fb      	ldr	r3, [r7, #28]
 8019474:	4a86      	ldr	r2, [pc, #536]	; (8019690 <_fx_system_timer_entry+0x288>)
 8019476:	fba2 2303 	umull	r2, r3, r2, r3
 801947a:	095b      	lsrs	r3, r3, #5
 801947c:	69ba      	ldr	r2, [r7, #24]
 801947e:	4413      	add	r3, r2
 8019480:	61bb      	str	r3, [r7, #24]
            second =  second % 60;
 8019482:	69fa      	ldr	r2, [r7, #28]
 8019484:	4b82      	ldr	r3, [pc, #520]	; (8019690 <_fx_system_timer_entry+0x288>)
 8019486:	fba3 1302 	umull	r1, r3, r3, r2
 801948a:	0959      	lsrs	r1, r3, #5
 801948c:	460b      	mov	r3, r1
 801948e:	011b      	lsls	r3, r3, #4
 8019490:	1a5b      	subs	r3, r3, r1
 8019492:	009b      	lsls	r3, r3, #2
 8019494:	1ad3      	subs	r3, r2, r3
 8019496:	61fb      	str	r3, [r7, #28]

            /* Determine if we need to adjust the hour field.  */
            if (minute > FX_MAXIMUM_MINUTE)
 8019498:	69bb      	ldr	r3, [r7, #24]
 801949a:	2b3b      	cmp	r3, #59	; 0x3b
 801949c:	f240 80d4 	bls.w	8019648 <_fx_system_timer_entry+0x240>
            {

                /* Yes, we need to adjust the hour field.  */
                hour =    hour + minute / 60;
 80194a0:	69bb      	ldr	r3, [r7, #24]
 80194a2:	4a7b      	ldr	r2, [pc, #492]	; (8019690 <_fx_system_timer_entry+0x288>)
 80194a4:	fba2 2303 	umull	r2, r3, r2, r3
 80194a8:	095b      	lsrs	r3, r3, #5
 80194aa:	697a      	ldr	r2, [r7, #20]
 80194ac:	4413      	add	r3, r2
 80194ae:	617b      	str	r3, [r7, #20]
                minute =  minute % 60;
 80194b0:	69ba      	ldr	r2, [r7, #24]
 80194b2:	4b77      	ldr	r3, [pc, #476]	; (8019690 <_fx_system_timer_entry+0x288>)
 80194b4:	fba3 1302 	umull	r1, r3, r3, r2
 80194b8:	0959      	lsrs	r1, r3, #5
 80194ba:	460b      	mov	r3, r1
 80194bc:	011b      	lsls	r3, r3, #4
 80194be:	1a5b      	subs	r3, r3, r1
 80194c0:	009b      	lsls	r3, r3, #2
 80194c2:	1ad3      	subs	r3, r2, r3
 80194c4:	61bb      	str	r3, [r7, #24]

                /* Determine if we need to adjust the day field.  */
                if (hour > FX_MAXIMUM_HOUR)
 80194c6:	697b      	ldr	r3, [r7, #20]
 80194c8:	2b17      	cmp	r3, #23
 80194ca:	f240 80bd 	bls.w	8019648 <_fx_system_timer_entry+0x240>
                {

                    /* Yes, we need to adjust the day field.  */
                    hour =  0;
 80194ce:	2300      	movs	r3, #0
 80194d0:	617b      	str	r3, [r7, #20]
                    day++;
 80194d2:	693b      	ldr	r3, [r7, #16]
 80194d4:	3301      	adds	r3, #1
 80194d6:	613b      	str	r3, [r7, #16]

                    /* Determine if we need to adjust the month field.  */
                    switch (month)
 80194d8:	68fb      	ldr	r3, [r7, #12]
 80194da:	3b01      	subs	r3, #1
 80194dc:	2b0b      	cmp	r3, #11
 80194de:	f200 80c9 	bhi.w	8019674 <_fx_system_timer_entry+0x26c>
 80194e2:	a201      	add	r2, pc, #4	; (adr r2, 80194e8 <_fx_system_timer_entry+0xe0>)
 80194e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80194e8:	08019519 	.word	0x08019519
 80194ec:	0801952b 	.word	0x0801952b
 80194f0:	08019559 	.word	0x08019559
 80194f4:	0801956b 	.word	0x0801956b
 80194f8:	0801957d 	.word	0x0801957d
 80194fc:	0801958f 	.word	0x0801958f
 8019500:	080195a1 	.word	0x080195a1
 8019504:	080195b3 	.word	0x080195b3
 8019508:	080195c5 	.word	0x080195c5
 801950c:	080195d7 	.word	0x080195d7
 8019510:	080195e9 	.word	0x080195e9
 8019514:	080195fb 	.word	0x080195fb

                    case 1:                 /* January  */
                    {

                        /* Check for end of the month.  */
                        if (day > 31)
 8019518:	693b      	ldr	r3, [r7, #16]
 801951a:	2b1f      	cmp	r3, #31
 801951c:	d97d      	bls.n	801961a <_fx_system_timer_entry+0x212>
                        {

                            /* Move to next month.  */
                            day = 1;
 801951e:	2301      	movs	r3, #1
 8019520:	613b      	str	r3, [r7, #16]
                            month++;
 8019522:	68fb      	ldr	r3, [r7, #12]
 8019524:	3301      	adds	r3, #1
 8019526:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 8019528:	e077      	b.n	801961a <_fx_system_timer_entry+0x212>
                    {

                        /* Check for leap year.  We don't need to check for leap
                           century her (century years divisible by 400) since 2000
                           is and this FAT format only supports years to 2107. */
                        if ((year % 4) == 0)
 801952a:	68bb      	ldr	r3, [r7, #8]
 801952c:	f003 0303 	and.w	r3, r3, #3
 8019530:	2b00      	cmp	r3, #0
 8019532:	d108      	bne.n	8019546 <_fx_system_timer_entry+0x13e>
                        {

                            /* Leap year in February... check for 29 days
                               instead of 28.  */
                            if (day > 29)
 8019534:	693b      	ldr	r3, [r7, #16]
 8019536:	2b1d      	cmp	r3, #29
 8019538:	d971      	bls.n	801961e <_fx_system_timer_entry+0x216>
                            {

                                /* Adjust the month.  */
                                day =  1;
 801953a:	2301      	movs	r3, #1
 801953c:	613b      	str	r3, [r7, #16]
                                month++;
 801953e:	68fb      	ldr	r3, [r7, #12]
 8019540:	3301      	adds	r3, #1
 8019542:	60fb      	str	r3, [r7, #12]
                                /* Adjust the month.  */
                                day = 1;
                                month++;
                            }
                        }
                        break;
 8019544:	e06b      	b.n	801961e <_fx_system_timer_entry+0x216>
                            if (day > 28)
 8019546:	693b      	ldr	r3, [r7, #16]
 8019548:	2b1c      	cmp	r3, #28
 801954a:	d968      	bls.n	801961e <_fx_system_timer_entry+0x216>
                                day = 1;
 801954c:	2301      	movs	r3, #1
 801954e:	613b      	str	r3, [r7, #16]
                                month++;
 8019550:	68fb      	ldr	r3, [r7, #12]
 8019552:	3301      	adds	r3, #1
 8019554:	60fb      	str	r3, [r7, #12]
                        break;
 8019556:	e062      	b.n	801961e <_fx_system_timer_entry+0x216>

                    case 3:                 /* March  */
                    {

                        /* Check for end of the month.  */
                        if (day > 31)
 8019558:	693b      	ldr	r3, [r7, #16]
 801955a:	2b1f      	cmp	r3, #31
 801955c:	d961      	bls.n	8019622 <_fx_system_timer_entry+0x21a>
                        {

                            /* Move to next month.  */
                            day = 1;
 801955e:	2301      	movs	r3, #1
 8019560:	613b      	str	r3, [r7, #16]
                            month++;
 8019562:	68fb      	ldr	r3, [r7, #12]
 8019564:	3301      	adds	r3, #1
 8019566:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 8019568:	e05b      	b.n	8019622 <_fx_system_timer_entry+0x21a>

                    case 4:                 /* April  */
                    {

                        /* Check for end of the month.  */
                        if (day > 30)
 801956a:	693b      	ldr	r3, [r7, #16]
 801956c:	2b1e      	cmp	r3, #30
 801956e:	d95a      	bls.n	8019626 <_fx_system_timer_entry+0x21e>
                        {

                            /* Move to next month.  */
                            day = 1;
 8019570:	2301      	movs	r3, #1
 8019572:	613b      	str	r3, [r7, #16]
                            month++;
 8019574:	68fb      	ldr	r3, [r7, #12]
 8019576:	3301      	adds	r3, #1
 8019578:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 801957a:	e054      	b.n	8019626 <_fx_system_timer_entry+0x21e>

                    case 5:                 /* May  */
                    {

                        /* Check for end of the month.  */
                        if (day > 31)
 801957c:	693b      	ldr	r3, [r7, #16]
 801957e:	2b1f      	cmp	r3, #31
 8019580:	d953      	bls.n	801962a <_fx_system_timer_entry+0x222>
                        {

                            /* Move to next month.  */
                            day = 1;
 8019582:	2301      	movs	r3, #1
 8019584:	613b      	str	r3, [r7, #16]
                            month++;
 8019586:	68fb      	ldr	r3, [r7, #12]
 8019588:	3301      	adds	r3, #1
 801958a:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 801958c:	e04d      	b.n	801962a <_fx_system_timer_entry+0x222>

                    case 6:                 /* June */
                    {

                        /* Check for end of the month.  */
                        if (day > 30)
 801958e:	693b      	ldr	r3, [r7, #16]
 8019590:	2b1e      	cmp	r3, #30
 8019592:	d94c      	bls.n	801962e <_fx_system_timer_entry+0x226>
                        {

                            /* Move to next month.  */
                            day = 1;
 8019594:	2301      	movs	r3, #1
 8019596:	613b      	str	r3, [r7, #16]
                            month++;
 8019598:	68fb      	ldr	r3, [r7, #12]
 801959a:	3301      	adds	r3, #1
 801959c:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 801959e:	e046      	b.n	801962e <_fx_system_timer_entry+0x226>

                    case 7:                 /* July */
                    {

                        /* Check for end of the month.  */
                        if (day > 31)
 80195a0:	693b      	ldr	r3, [r7, #16]
 80195a2:	2b1f      	cmp	r3, #31
 80195a4:	d945      	bls.n	8019632 <_fx_system_timer_entry+0x22a>
                        {

                            /* Move to next month.  */
                            day = 1;
 80195a6:	2301      	movs	r3, #1
 80195a8:	613b      	str	r3, [r7, #16]
                            month++;
 80195aa:	68fb      	ldr	r3, [r7, #12]
 80195ac:	3301      	adds	r3, #1
 80195ae:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 80195b0:	e03f      	b.n	8019632 <_fx_system_timer_entry+0x22a>

                    case 8:                 /* August */
                    {

                        /* Check for end of the month.  */
                        if (day > 31)
 80195b2:	693b      	ldr	r3, [r7, #16]
 80195b4:	2b1f      	cmp	r3, #31
 80195b6:	d93e      	bls.n	8019636 <_fx_system_timer_entry+0x22e>
                        {

                            /* Move to next month.  */
                            day = 1;
 80195b8:	2301      	movs	r3, #1
 80195ba:	613b      	str	r3, [r7, #16]
                            month++;
 80195bc:	68fb      	ldr	r3, [r7, #12]
 80195be:	3301      	adds	r3, #1
 80195c0:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 80195c2:	e038      	b.n	8019636 <_fx_system_timer_entry+0x22e>

                    case 9:                 /* September */
                    {

                        /* Check for end of the month.  */
                        if (day > 30)
 80195c4:	693b      	ldr	r3, [r7, #16]
 80195c6:	2b1e      	cmp	r3, #30
 80195c8:	d937      	bls.n	801963a <_fx_system_timer_entry+0x232>
                        {

                            /* Move to next month.  */
                            day = 1;
 80195ca:	2301      	movs	r3, #1
 80195cc:	613b      	str	r3, [r7, #16]
                            month++;
 80195ce:	68fb      	ldr	r3, [r7, #12]
 80195d0:	3301      	adds	r3, #1
 80195d2:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 80195d4:	e031      	b.n	801963a <_fx_system_timer_entry+0x232>

                    case 10:                /* October */
                    {

                        /* Check for end of the month.  */
                        if (day > 31)
 80195d6:	693b      	ldr	r3, [r7, #16]
 80195d8:	2b1f      	cmp	r3, #31
 80195da:	d930      	bls.n	801963e <_fx_system_timer_entry+0x236>
                        {

                            /* Move to next month.  */
                            day = 1;
 80195dc:	2301      	movs	r3, #1
 80195de:	613b      	str	r3, [r7, #16]
                            month++;
 80195e0:	68fb      	ldr	r3, [r7, #12]
 80195e2:	3301      	adds	r3, #1
 80195e4:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 80195e6:	e02a      	b.n	801963e <_fx_system_timer_entry+0x236>

                    case 11:                /* November */
                    {

                        /* Check for end of the month.  */
                        if (day > 30)
 80195e8:	693b      	ldr	r3, [r7, #16]
 80195ea:	2b1e      	cmp	r3, #30
 80195ec:	d929      	bls.n	8019642 <_fx_system_timer_entry+0x23a>
                        {

                            /* Move to next month.  */
                            day = 1;
 80195ee:	2301      	movs	r3, #1
 80195f0:	613b      	str	r3, [r7, #16]
                            month++;
 80195f2:	68fb      	ldr	r3, [r7, #12]
 80195f4:	3301      	adds	r3, #1
 80195f6:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 80195f8:	e023      	b.n	8019642 <_fx_system_timer_entry+0x23a>

                    case 12:                /* December */
                    {

                        /* Check for end of the month.  */
                        if (day > 31)
 80195fa:	693b      	ldr	r3, [r7, #16]
 80195fc:	2b1f      	cmp	r3, #31
 80195fe:	d922      	bls.n	8019646 <_fx_system_timer_entry+0x23e>
                        {

                            /* Move to next month.  */
                            day = 1;
 8019600:	2301      	movs	r3, #1
 8019602:	613b      	str	r3, [r7, #16]
                            month = 1;
 8019604:	2301      	movs	r3, #1
 8019606:	60fb      	str	r3, [r7, #12]

                            /* Also move to next year.  */
                            year++;
 8019608:	68bb      	ldr	r3, [r7, #8]
 801960a:	3301      	adds	r3, #1
 801960c:	60bb      	str	r3, [r7, #8]

                            /* Check for a year that exceeds the representation
                               in this format.  */
                            if (year > FX_MAXIMUM_YEAR)
 801960e:	68bb      	ldr	r3, [r7, #8]
 8019610:	f640 023b 	movw	r2, #2107	; 0x83b
 8019614:	4293      	cmp	r3, r2
 8019616:	d82f      	bhi.n	8019678 <_fx_system_timer_entry+0x270>
                            {
                                return;
                            }
                        }
                        break;
 8019618:	e015      	b.n	8019646 <_fx_system_timer_entry+0x23e>
                        break;
 801961a:	bf00      	nop
 801961c:	e014      	b.n	8019648 <_fx_system_timer_entry+0x240>
                        break;
 801961e:	bf00      	nop
 8019620:	e012      	b.n	8019648 <_fx_system_timer_entry+0x240>
                        break;
 8019622:	bf00      	nop
 8019624:	e010      	b.n	8019648 <_fx_system_timer_entry+0x240>
                        break;
 8019626:	bf00      	nop
 8019628:	e00e      	b.n	8019648 <_fx_system_timer_entry+0x240>
                        break;
 801962a:	bf00      	nop
 801962c:	e00c      	b.n	8019648 <_fx_system_timer_entry+0x240>
                        break;
 801962e:	bf00      	nop
 8019630:	e00a      	b.n	8019648 <_fx_system_timer_entry+0x240>
                        break;
 8019632:	bf00      	nop
 8019634:	e008      	b.n	8019648 <_fx_system_timer_entry+0x240>
                        break;
 8019636:	bf00      	nop
 8019638:	e006      	b.n	8019648 <_fx_system_timer_entry+0x240>
                        break;
 801963a:	bf00      	nop
 801963c:	e004      	b.n	8019648 <_fx_system_timer_entry+0x240>
                        break;
 801963e:	bf00      	nop
 8019640:	e002      	b.n	8019648 <_fx_system_timer_entry+0x240>
                        break;
 8019642:	bf00      	nop
 8019644:	e000      	b.n	8019648 <_fx_system_timer_entry+0x240>
                        break;
 8019646:	bf00      	nop
        }

        /* Now apply the new setting to the internal representation.  */

        /* Set the system date.  */
        _fx_system_date =  ((year - FX_BASE_YEAR) << FX_YEAR_SHIFT) |
 8019648:	68bb      	ldr	r3, [r7, #8]
 801964a:	f2a3 73bc 	subw	r3, r3, #1980	; 0x7bc
 801964e:	025a      	lsls	r2, r3, #9
                            (month << FX_MONTH_SHIFT) | day;
 8019650:	68fb      	ldr	r3, [r7, #12]
 8019652:	015b      	lsls	r3, r3, #5
        _fx_system_date =  ((year - FX_BASE_YEAR) << FX_YEAR_SHIFT) |
 8019654:	431a      	orrs	r2, r3
                            (month << FX_MONTH_SHIFT) | day;
 8019656:	693b      	ldr	r3, [r7, #16]
 8019658:	4313      	orrs	r3, r2
        _fx_system_date =  ((year - FX_BASE_YEAR) << FX_YEAR_SHIFT) |
 801965a:	4a0c      	ldr	r2, [pc, #48]	; (801968c <_fx_system_timer_entry+0x284>)
 801965c:	6013      	str	r3, [r2, #0]

        /* Set the new system time.  */
        _fx_system_time  =  (hour << FX_HOUR_SHIFT) |
 801965e:	697b      	ldr	r3, [r7, #20]
 8019660:	02da      	lsls	r2, r3, #11
                            (minute << FX_MINUTE_SHIFT) | (second / 2);
 8019662:	69bb      	ldr	r3, [r7, #24]
 8019664:	015b      	lsls	r3, r3, #5
        _fx_system_time  =  (hour << FX_HOUR_SHIFT) |
 8019666:	431a      	orrs	r2, r3
                            (minute << FX_MINUTE_SHIFT) | (second / 2);
 8019668:	69fb      	ldr	r3, [r7, #28]
 801966a:	085b      	lsrs	r3, r3, #1
 801966c:	4313      	orrs	r3, r2
        _fx_system_time  =  (hour << FX_HOUR_SHIFT) |
 801966e:	4a06      	ldr	r2, [pc, #24]	; (8019688 <_fx_system_timer_entry+0x280>)
 8019670:	6013      	str	r3, [r2, #0]
 8019672:	e002      	b.n	801967a <_fx_system_timer_entry+0x272>
                        return;             /* Skip updating date/time!  */
 8019674:	bf00      	nop
 8019676:	e000      	b.n	801967a <_fx_system_timer_entry+0x272>
                                return;
 8019678:	bf00      	nop
    }
}
 801967a:	3724      	adds	r7, #36	; 0x24
 801967c:	46bd      	mov	sp, r7
 801967e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019682:	4770      	bx	lr
 8019684:	46585359 	.word	0x46585359
 8019688:	24005050 	.word	0x24005050
 801968c:	2400504c 	.word	0x2400504c
 8019690:	88888889 	.word	0x88888889

08019694 <_fx_utility_16_unsigned_read>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fx_utility_16_unsigned_read(UCHAR *source_ptr)
{
 8019694:	b480      	push	{r7}
 8019696:	b085      	sub	sp, #20
 8019698:	af00      	add	r7, sp, #0
 801969a:	6078      	str	r0, [r7, #4]

UINT value;

    /* Pickup the UINT from the destination with endian-awareness.  */
    value =  ((((UINT)*(source_ptr + 1)) & 0xFF) << 8) |
 801969c:	687b      	ldr	r3, [r7, #4]
 801969e:	3301      	adds	r3, #1
 80196a0:	781b      	ldrb	r3, [r3, #0]
 80196a2:	021b      	lsls	r3, r3, #8
              ((UINT)*(source_ptr) & 0xFF);
 80196a4:	687a      	ldr	r2, [r7, #4]
 80196a6:	7812      	ldrb	r2, [r2, #0]
    value =  ((((UINT)*(source_ptr + 1)) & 0xFF) << 8) |
 80196a8:	4313      	orrs	r3, r2
 80196aa:	60fb      	str	r3, [r7, #12]

    /* Return value to caller.  */
    return(value);
 80196ac:	68fb      	ldr	r3, [r7, #12]
}
 80196ae:	4618      	mov	r0, r3
 80196b0:	3714      	adds	r7, #20
 80196b2:	46bd      	mov	sp, r7
 80196b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80196b8:	4770      	bx	lr

080196ba <_fx_utility_16_unsigned_write>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _fx_utility_16_unsigned_write(UCHAR *dest_ptr, UINT value)
{
 80196ba:	b480      	push	{r7}
 80196bc:	b083      	sub	sp, #12
 80196be:	af00      	add	r7, sp, #0
 80196c0:	6078      	str	r0, [r7, #4]
 80196c2:	6039      	str	r1, [r7, #0]

    /* Store the UINT into the destination with endian-awareness.  */
    *(dest_ptr) =       (UCHAR)(value & 0xFF);
 80196c4:	683b      	ldr	r3, [r7, #0]
 80196c6:	b2da      	uxtb	r2, r3
 80196c8:	687b      	ldr	r3, [r7, #4]
 80196ca:	701a      	strb	r2, [r3, #0]
    *(dest_ptr + 1) =   (UCHAR)((value >> 8) & 0xFF);
 80196cc:	683b      	ldr	r3, [r7, #0]
 80196ce:	0a1a      	lsrs	r2, r3, #8
 80196d0:	687b      	ldr	r3, [r7, #4]
 80196d2:	3301      	adds	r3, #1
 80196d4:	b2d2      	uxtb	r2, r2
 80196d6:	701a      	strb	r2, [r3, #0]
}
 80196d8:	bf00      	nop
 80196da:	370c      	adds	r7, #12
 80196dc:	46bd      	mov	sp, r7
 80196de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80196e2:	4770      	bx	lr

080196e4 <_fx_utility_32_unsigned_read>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
ULONG  _fx_utility_32_unsigned_read(UCHAR *source_ptr)
{
 80196e4:	b480      	push	{r7}
 80196e6:	b085      	sub	sp, #20
 80196e8:	af00      	add	r7, sp, #0
 80196ea:	6078      	str	r0, [r7, #4]

ULONG value;

    /* Pickup the UINT from the destination with endian-awareness.  */
    value =  ((((ULONG) *(source_ptr+3)) & 0xFF) << 24) |
 80196ec:	687b      	ldr	r3, [r7, #4]
 80196ee:	3303      	adds	r3, #3
 80196f0:	781b      	ldrb	r3, [r3, #0]
 80196f2:	061a      	lsls	r2, r3, #24
             ((((ULONG) *(source_ptr+2)) & 0xFF) << 16) |
 80196f4:	687b      	ldr	r3, [r7, #4]
 80196f6:	3302      	adds	r3, #2
 80196f8:	781b      	ldrb	r3, [r3, #0]
 80196fa:	041b      	lsls	r3, r3, #16
    value =  ((((ULONG) *(source_ptr+3)) & 0xFF) << 24) |
 80196fc:	431a      	orrs	r2, r3
             ((((ULONG) *(source_ptr+1)) & 0xFF) << 8)  |
 80196fe:	687b      	ldr	r3, [r7, #4]
 8019700:	3301      	adds	r3, #1
 8019702:	781b      	ldrb	r3, [r3, #0]
 8019704:	021b      	lsls	r3, r3, #8
             ((((ULONG) *(source_ptr+2)) & 0xFF) << 16) |
 8019706:	4313      	orrs	r3, r2
              (((ULONG) *(source_ptr)) & 0xFF);
 8019708:	687a      	ldr	r2, [r7, #4]
 801970a:	7812      	ldrb	r2, [r2, #0]
    value =  ((((ULONG) *(source_ptr+3)) & 0xFF) << 24) |
 801970c:	4313      	orrs	r3, r2
 801970e:	60fb      	str	r3, [r7, #12]

    /* Return value to caller.  */
    return(value);
 8019710:	68fb      	ldr	r3, [r7, #12]
}
 8019712:	4618      	mov	r0, r3
 8019714:	3714      	adds	r7, #20
 8019716:	46bd      	mov	sp, r7
 8019718:	f85d 7b04 	ldr.w	r7, [sp], #4
 801971c:	4770      	bx	lr

0801971e <_fx_utility_32_unsigned_write>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _fx_utility_32_unsigned_write(UCHAR *dest_ptr, ULONG value)
{
 801971e:	b480      	push	{r7}
 8019720:	b083      	sub	sp, #12
 8019722:	af00      	add	r7, sp, #0
 8019724:	6078      	str	r0, [r7, #4]
 8019726:	6039      	str	r1, [r7, #0]

    /* Store the UINT into the destination with endian-awareness.  */
    *(dest_ptr) =       (UCHAR)(value & 0xFF);
 8019728:	683b      	ldr	r3, [r7, #0]
 801972a:	b2da      	uxtb	r2, r3
 801972c:	687b      	ldr	r3, [r7, #4]
 801972e:	701a      	strb	r2, [r3, #0]
    *(dest_ptr + 1) =   (UCHAR)((value >> 8) & 0xFF);
 8019730:	683b      	ldr	r3, [r7, #0]
 8019732:	0a1a      	lsrs	r2, r3, #8
 8019734:	687b      	ldr	r3, [r7, #4]
 8019736:	3301      	adds	r3, #1
 8019738:	b2d2      	uxtb	r2, r2
 801973a:	701a      	strb	r2, [r3, #0]
    *(dest_ptr + 2) =   (UCHAR)((value >> 16) & 0xFF);
 801973c:	683b      	ldr	r3, [r7, #0]
 801973e:	0c1a      	lsrs	r2, r3, #16
 8019740:	687b      	ldr	r3, [r7, #4]
 8019742:	3302      	adds	r3, #2
 8019744:	b2d2      	uxtb	r2, r2
 8019746:	701a      	strb	r2, [r3, #0]
    *(dest_ptr + 3) =   (UCHAR)((value >> 24) & 0xFF);
 8019748:	683b      	ldr	r3, [r7, #0]
 801974a:	0e1a      	lsrs	r2, r3, #24
 801974c:	687b      	ldr	r3, [r7, #4]
 801974e:	3303      	adds	r3, #3
 8019750:	b2d2      	uxtb	r2, r2
 8019752:	701a      	strb	r2, [r3, #0]
}
 8019754:	bf00      	nop
 8019756:	370c      	adds	r7, #12
 8019758:	46bd      	mov	sp, r7
 801975a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801975e:	4770      	bx	lr

08019760 <_fx_utility_FAT_entry_read>:
/*                                            fixed compiler warning,     */
/*                                            resulting in version 6.2.0  */
/*                                                                        */
/**************************************************************************/
UINT  _fx_utility_FAT_entry_read(FX_MEDIA *media_ptr, ULONG cluster, ULONG *entry_ptr)
{
 8019760:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8019764:	b098      	sub	sp, #96	; 0x60
 8019766:	af04      	add	r7, sp, #16
 8019768:	61f8      	str	r0, [r7, #28]
 801976a:	61b9      	str	r1, [r7, #24]
 801976c:	617a      	str	r2, [r7, #20]
    }
#endif /* FX_ENABLE_FAULT_TOLERANT */

#ifndef FX_MEDIA_STATISTICS_DISABLE
    /* Increment the number of FAT entry reads and cache hits.  */
    media_ptr -> fx_media_fat_entry_reads++;
 801976e:	69fb      	ldr	r3, [r7, #28]
 8019770:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8019774:	1c5a      	adds	r2, r3, #1
 8019776:	69fb      	ldr	r3, [r7, #28]
 8019778:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
    media_ptr -> fx_media_fat_entry_cache_read_hits++;
 801977c:	69fb      	ldr	r3, [r7, #28]
 801977e:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 8019782:	1c5a      	adds	r2, r3, #1
 8019784:	69fb      	ldr	r3, [r7, #28]
 8019786:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

    /* Extended port-specific processing macro, which is by default defined to white space.  */
    FX_UTILITY_FAT_ENTRY_READ_EXTENSION

    /* Calculate the area of the cache for this FAT entry.  */
    index =  (cluster & FX_FAT_CACHE_HASH_MASK) * FX_FAT_CACHE_DEPTH;
 801978a:	69bb      	ldr	r3, [r7, #24]
 801978c:	f003 0303 	and.w	r3, r3, #3
 8019790:	009b      	lsls	r3, r3, #2
 8019792:	647b      	str	r3, [r7, #68]	; 0x44

    /* Build a pointer to the cache entry.  */
    cache_entry_ptr =  &media_ptr -> fx_media_fat_cache[index];
 8019794:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8019796:	4613      	mov	r3, r2
 8019798:	005b      	lsls	r3, r3, #1
 801979a:	4413      	add	r3, r2
 801979c:	009b      	lsls	r3, r3, #2
 801979e:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 80197a2:	69fa      	ldr	r2, [r7, #28]
 80197a4:	4413      	add	r3, r2
 80197a6:	643b      	str	r3, [r7, #64]	; 0x40

#ifndef FX_DISABLE_FAT_ENTRY_REFRESH
    /* Determine if the FAT entry is in the cache - assuming the depth of the FAT cache is
       4 entries.  */
    if ((cache_entry_ptr -> fx_fat_cache_entry_cluster) == cluster)
 80197a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80197aa:	681b      	ldr	r3, [r3, #0]
 80197ac:	69ba      	ldr	r2, [r7, #24]
 80197ae:	429a      	cmp	r2, r3
 80197b0:	d105      	bne.n	80197be <_fx_utility_FAT_entry_read+0x5e>
    {

        /* Yes, return the cached value.  */
        *entry_ptr =  cache_entry_ptr -> fx_fat_cache_entry_value;
 80197b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80197b4:	685a      	ldr	r2, [r3, #4]
 80197b6:	697b      	ldr	r3, [r7, #20]
 80197b8:	601a      	str	r2, [r3, #0]

        /* Don't move anything since we found the entry.  */

        /* Return a successful status.  */
        return(FX_SUCCESS);
 80197ba:	2300      	movs	r3, #0
 80197bc:	e1f4      	b.n	8019ba8 <_fx_utility_FAT_entry_read+0x448>
    }
    else if (((cache_entry_ptr + 1) -> fx_fat_cache_entry_cluster) == cluster)
 80197be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80197c0:	330c      	adds	r3, #12
 80197c2:	681b      	ldr	r3, [r3, #0]
 80197c4:	69ba      	ldr	r2, [r7, #24]
 80197c6:	429a      	cmp	r2, r3
 80197c8:	d11d      	bne.n	8019806 <_fx_utility_FAT_entry_read+0xa6>
    {

        /* Yes, return the cached value.  */
        *entry_ptr =  (cache_entry_ptr + 1) -> fx_fat_cache_entry_value;
 80197ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80197cc:	330c      	adds	r3, #12
 80197ce:	685a      	ldr	r2, [r3, #4]
 80197d0:	697b      	ldr	r3, [r7, #20]
 80197d2:	601a      	str	r2, [r3, #0]

        /* Just swap the first and second entry.  */
        temp_cache_entry =        *(cache_entry_ptr);
 80197d4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80197d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80197da:	ca07      	ldmia	r2, {r0, r1, r2}
 80197dc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        *(cache_entry_ptr) =      *(cache_entry_ptr + 1);
 80197e0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80197e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80197e4:	4614      	mov	r4, r2
 80197e6:	330c      	adds	r3, #12
 80197e8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80197ec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        *(cache_entry_ptr + 1) =  temp_cache_entry;
 80197f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80197f2:	330c      	adds	r3, #12
 80197f4:	461c      	mov	r4, r3
 80197f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80197fa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80197fe:	e884 0007 	stmia.w	r4, {r0, r1, r2}

        /* Return a successful status.  */
        return(FX_SUCCESS);
 8019802:	2300      	movs	r3, #0
 8019804:	e1d0      	b.n	8019ba8 <_fx_utility_FAT_entry_read+0x448>
    }
    else if (((cache_entry_ptr + 2) -> fx_fat_cache_entry_cluster) == cluster)
 8019806:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019808:	3318      	adds	r3, #24
 801980a:	681b      	ldr	r3, [r3, #0]
 801980c:	69ba      	ldr	r2, [r7, #24]
 801980e:	429a      	cmp	r2, r3
 8019810:	d127      	bne.n	8019862 <_fx_utility_FAT_entry_read+0x102>
    {

        /* Yes, return the cached value.  */
        *entry_ptr =  (cache_entry_ptr + 2) -> fx_fat_cache_entry_value;
 8019812:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019814:	3318      	adds	r3, #24
 8019816:	685a      	ldr	r2, [r3, #4]
 8019818:	697b      	ldr	r3, [r7, #20]
 801981a:	601a      	str	r2, [r3, #0]

        /* Move the third entry to the top and the first two entries down.  */
        temp_cache_entry =        *(cache_entry_ptr);
 801981c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801981e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8019822:	ca07      	ldmia	r2, {r0, r1, r2}
 8019824:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        *(cache_entry_ptr) =      *(cache_entry_ptr + 2);
 8019828:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801982a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801982c:	4614      	mov	r4, r2
 801982e:	3318      	adds	r3, #24
 8019830:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8019834:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        *(cache_entry_ptr + 2) =  *(cache_entry_ptr + 1);
 8019838:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801983a:	f103 0218 	add.w	r2, r3, #24
 801983e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019840:	4614      	mov	r4, r2
 8019842:	330c      	adds	r3, #12
 8019844:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8019848:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        *(cache_entry_ptr + 1) =  temp_cache_entry;
 801984c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801984e:	330c      	adds	r3, #12
 8019850:	461c      	mov	r4, r3
 8019852:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8019856:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801985a:	e884 0007 	stmia.w	r4, {r0, r1, r2}

        /* Return a successful status.  */
        return(FX_SUCCESS);
 801985e:	2300      	movs	r3, #0
 8019860:	e1a2      	b.n	8019ba8 <_fx_utility_FAT_entry_read+0x448>
    }
    else if (((cache_entry_ptr + 3) -> fx_fat_cache_entry_cluster) == cluster)
 8019862:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019864:	3324      	adds	r3, #36	; 0x24
 8019866:	681b      	ldr	r3, [r3, #0]
 8019868:	69ba      	ldr	r2, [r7, #24]
 801986a:	429a      	cmp	r2, r3
 801986c:	d131      	bne.n	80198d2 <_fx_utility_FAT_entry_read+0x172>
    {

        /* Yes, return the cached value.  */
        *entry_ptr =  (cache_entry_ptr + 3) -> fx_fat_cache_entry_value;
 801986e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019870:	3324      	adds	r3, #36	; 0x24
 8019872:	685a      	ldr	r2, [r3, #4]
 8019874:	697b      	ldr	r3, [r7, #20]
 8019876:	601a      	str	r2, [r3, #0]

        /* Move the last entry to the top and the first three entries down.  */
        temp_cache_entry =        *(cache_entry_ptr);
 8019878:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801987a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801987e:	ca07      	ldmia	r2, {r0, r1, r2}
 8019880:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        *(cache_entry_ptr) =      *(cache_entry_ptr + 3);
 8019884:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8019886:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019888:	4614      	mov	r4, r2
 801988a:	3324      	adds	r3, #36	; 0x24
 801988c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8019890:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        *(cache_entry_ptr + 3) =  *(cache_entry_ptr + 2);
 8019894:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019896:	f103 0224 	add.w	r2, r3, #36	; 0x24
 801989a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801989c:	4614      	mov	r4, r2
 801989e:	3318      	adds	r3, #24
 80198a0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80198a4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        *(cache_entry_ptr + 2) =  *(cache_entry_ptr + 1);
 80198a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80198aa:	f103 0218 	add.w	r2, r3, #24
 80198ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80198b0:	4614      	mov	r4, r2
 80198b2:	330c      	adds	r3, #12
 80198b4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80198b8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        *(cache_entry_ptr + 1) =  temp_cache_entry;
 80198bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80198be:	330c      	adds	r3, #12
 80198c0:	461c      	mov	r4, r3
 80198c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80198c6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80198ca:	e884 0007 	stmia.w	r4, {r0, r1, r2}

        /* Return a successful status.  */
        return(FX_SUCCESS);
 80198ce:	2300      	movs	r3, #0
 80198d0:	e16a      	b.n	8019ba8 <_fx_utility_FAT_entry_read+0x448>
    }
#endif /* FX_DISABLE_FAT_ENTRY_REFRESH */

    /* Determine if the oldest entry was modified, i.e. whether or not it is
       dirty.  */
    if (media_ptr -> fx_media_fat_cache[index + 3].fx_fat_cache_entry_dirty)
 80198d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80198d4:	1cda      	adds	r2, r3, #3
 80198d6:	69f9      	ldr	r1, [r7, #28]
 80198d8:	4613      	mov	r3, r2
 80198da:	005b      	lsls	r3, r3, #1
 80198dc:	4413      	add	r3, r2
 80198de:	009b      	lsls	r3, r3, #2
 80198e0:	440b      	add	r3, r1
 80198e2:	f503 63ec 	add.w	r3, r3, #1888	; 0x760
 80198e6:	681b      	ldr	r3, [r3, #0]
 80198e8:	2b00      	cmp	r3, #0
 80198ea:	d008      	beq.n	80198fe <_fx_utility_FAT_entry_read+0x19e>
    {

        /* Yes, the entry is dirty and needs to be flushed out.  */
        status = _fx_utility_FAT_flush(media_ptr);
 80198ec:	69f8      	ldr	r0, [r7, #28]
 80198ee:	f000 fa54 	bl	8019d9a <_fx_utility_FAT_flush>
 80198f2:	63f8      	str	r0, [r7, #60]	; 0x3c

        /* Check for completion status.  */
        if (status != FX_SUCCESS)
 80198f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80198f6:	2b00      	cmp	r3, #0
 80198f8:	d001      	beq.n	80198fe <_fx_utility_FAT_entry_read+0x19e>
        {

            /* Return error status.  */
            return(status);
 80198fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80198fc:	e154      	b.n	8019ba8 <_fx_utility_FAT_entry_read+0x448>
       actually read the FAT entry.  */

#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Decrement the number of cache hits.  */
    media_ptr -> fx_media_fat_entry_cache_read_hits--;
 80198fe:	69fb      	ldr	r3, [r7, #28]
 8019900:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 8019904:	1e5a      	subs	r2, r3, #1
 8019906:	69fb      	ldr	r3, [r7, #28]
 8019908:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

    /* Increment the number of cache misses.  */
    media_ptr -> fx_media_fat_entry_cache_read_misses++;
 801990c:	69fb      	ldr	r3, [r7, #28]
 801990e:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 8019912:	1c5a      	adds	r2, r3, #1
 8019914:	69fb      	ldr	r3, [r7, #28]
 8019916:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
#endif

    /* Determine which type of FAT is present.  */
    if (media_ptr -> fx_media_12_bit_FAT)
 801991a:	69fb      	ldr	r3, [r7, #28]
 801991c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801991e:	2b00      	cmp	r3, #0
 8019920:	f000 80a7 	beq.w	8019a72 <_fx_utility_FAT_entry_read+0x312>
    {

        /* Calculate the byte offset to the cluster entry.  */
        byte_offset =  (((ULONG)cluster << 1) + cluster) >> 1;
 8019924:	69bb      	ldr	r3, [r7, #24]
 8019926:	005a      	lsls	r2, r3, #1
 8019928:	69bb      	ldr	r3, [r7, #24]
 801992a:	4413      	add	r3, r2
 801992c:	085b      	lsrs	r3, r3, #1
 801992e:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Calculate the FAT sector the requested FAT entry resides in.  */
        FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 8019930:	69fb      	ldr	r3, [r7, #28]
 8019932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019934:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8019936:	fbb2 f2f3 	udiv	r2, r2, r3
            (ULONG)media_ptr -> fx_media_reserved_sectors;
 801993a:	69fb      	ldr	r3, [r7, #28]
 801993c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
        FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 801993e:	4413      	add	r3, r2
 8019940:	637b      	str	r3, [r7, #52]	; 0x34

        /* Read the sector in.  */
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 8019942:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019944:	2200      	movs	r2, #0
 8019946:	60bb      	str	r3, [r7, #8]
 8019948:	60fa      	str	r2, [r7, #12]
                                                  media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 801994a:	69fb      	ldr	r3, [r7, #28]
 801994c:	689b      	ldr	r3, [r3, #8]
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 801994e:	2202      	movs	r2, #2
 8019950:	9202      	str	r2, [sp, #8]
 8019952:	2201      	movs	r2, #1
 8019954:	9201      	str	r2, [sp, #4]
 8019956:	9300      	str	r3, [sp, #0]
 8019958:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801995c:	69f8      	ldr	r0, [r7, #28]
 801995e:	f001 fb0d 	bl	801af7c <_fx_utility_logical_sector_read>
 8019962:	63f8      	str	r0, [r7, #60]	; 0x3c

        /* Determine if an error occurred.  */
        if (status != FX_SUCCESS)
 8019964:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019966:	2b00      	cmp	r3, #0
 8019968:	d001      	beq.n	801996e <_fx_utility_FAT_entry_read+0x20e>
        {
            /* Return the error status.  */
            return(status);
 801996a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801996c:	e11c      	b.n	8019ba8 <_fx_utility_FAT_entry_read+0x448>
        }

        /* Now calculate the byte offset into this FAT sector.  */
        byte_offset =  byte_offset -
            ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 801996e:	69fb      	ldr	r3, [r7, #28]
 8019970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019972:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8019974:	1ad3      	subs	r3, r2, r3
             media_ptr -> fx_media_bytes_per_sector);
 8019976:	69fa      	ldr	r2, [r7, #28]
 8019978:	6a92      	ldr	r2, [r2, #40]	; 0x28
            ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 801997a:	fb02 f303 	mul.w	r3, r2, r3
        byte_offset =  byte_offset -
 801997e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8019980:	1ad3      	subs	r3, r2, r3
 8019982:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Setup a pointer into the buffer.  */
        FAT_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer + (UINT)byte_offset;
 8019984:	69fb      	ldr	r3, [r7, #28]
 8019986:	689a      	ldr	r2, [r3, #8]
 8019988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801998a:	4413      	add	r3, r2
 801998c:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Determine if the cluster entry is odd or even.  */
        if (cluster & 1)
 801998e:	69bb      	ldr	r3, [r7, #24]
 8019990:	f003 0301 	and.w	r3, r3, #1
 8019994:	2b00      	cmp	r3, #0
 8019996:	d030      	beq.n	80199fa <_fx_utility_FAT_entry_read+0x29a>
        {

            /* Odd cluster number.  */

            /* Pickup the lower nibble of the FAT entry.  */
            entry =  (((UINT)*FAT_ptr) & 0xF0) >> 4;
 8019998:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801999a:	781b      	ldrb	r3, [r3, #0]
 801999c:	091b      	lsrs	r3, r3, #4
 801999e:	b2db      	uxtb	r3, r3
 80199a0:	64bb      	str	r3, [r7, #72]	; 0x48

            /* Move to the next byte of the FAT entry.  */
            FAT_ptr++;
 80199a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80199a4:	3301      	adds	r3, #1
 80199a6:	64fb      	str	r3, [r7, #76]	; 0x4c

            /* Determine if we are now past the end of the FAT buffer in memory.  */
            if (byte_offset == (ULONG)(media_ptr -> fx_media_bytes_per_sector - 1))
 80199a8:	69fb      	ldr	r3, [r7, #28]
 80199aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80199ac:	3b01      	subs	r3, #1
 80199ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80199b0:	429a      	cmp	r2, r3
 80199b2:	d11b      	bne.n	80199ec <_fx_utility_FAT_entry_read+0x28c>
            {

                /* Yes, we need to read the next sector.  */
                FAT_sector++;
 80199b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80199b6:	3301      	adds	r3, #1
 80199b8:	637b      	str	r3, [r7, #52]	; 0x34
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 80199ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80199bc:	2200      	movs	r2, #0
 80199be:	603b      	str	r3, [r7, #0]
 80199c0:	607a      	str	r2, [r7, #4]
                                                          media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 80199c2:	69fb      	ldr	r3, [r7, #28]
 80199c4:	689b      	ldr	r3, [r3, #8]
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 80199c6:	2202      	movs	r2, #2
 80199c8:	9202      	str	r2, [sp, #8]
 80199ca:	2201      	movs	r2, #1
 80199cc:	9201      	str	r2, [sp, #4]
 80199ce:	9300      	str	r3, [sp, #0]
 80199d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80199d4:	69f8      	ldr	r0, [r7, #28]
 80199d6:	f001 fad1 	bl	801af7c <_fx_utility_logical_sector_read>
 80199da:	63f8      	str	r0, [r7, #60]	; 0x3c

                /* Determine if an error occurred.  */
                if (status != FX_SUCCESS)
 80199dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80199de:	2b00      	cmp	r3, #0
 80199e0:	d001      	beq.n	80199e6 <_fx_utility_FAT_entry_read+0x286>
                {

                    /* Return the error status.  */
                    return(status);
 80199e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80199e4:	e0e0      	b.n	8019ba8 <_fx_utility_FAT_entry_read+0x448>
                }

                /* Setup a pointer into the buffer.  */
                FAT_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer;
 80199e6:	69fb      	ldr	r3, [r7, #28]
 80199e8:	689b      	ldr	r3, [r3, #8]
 80199ea:	64fb      	str	r3, [r7, #76]	; 0x4c
            }

            /* Pickup the upper 8 bits of the FAT entry.  */
            entry =  entry | (((UINT)*FAT_ptr) << 4);
 80199ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80199ee:	781b      	ldrb	r3, [r3, #0]
 80199f0:	011b      	lsls	r3, r3, #4
 80199f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80199f4:	4313      	orrs	r3, r2
 80199f6:	64bb      	str	r3, [r7, #72]	; 0x48
 80199f8:	e02f      	b.n	8019a5a <_fx_utility_FAT_entry_read+0x2fa>
        {

            /* Even cluster number.  */

            /* Pickup the lower byte of the FAT entry.  */
            entry =  (UINT)(((UINT)*FAT_ptr) & 0xFF);
 80199fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80199fc:	781b      	ldrb	r3, [r3, #0]
 80199fe:	64bb      	str	r3, [r7, #72]	; 0x48

            /* Move to the next nibble of the FAT entry.  */
            FAT_ptr++;
 8019a00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019a02:	3301      	adds	r3, #1
 8019a04:	64fb      	str	r3, [r7, #76]	; 0x4c

            /* Determine if we are now past the end of the FAT buffer in memory.  */
            if (byte_offset == (ULONG)(media_ptr -> fx_media_bytes_per_sector - 1))
 8019a06:	69fb      	ldr	r3, [r7, #28]
 8019a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019a0a:	3b01      	subs	r3, #1
 8019a0c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8019a0e:	429a      	cmp	r2, r3
 8019a10:	d11b      	bne.n	8019a4a <_fx_utility_FAT_entry_read+0x2ea>
            {

                /* Yes, we need to read the next sector.  */
                FAT_sector++;
 8019a12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019a14:	3301      	adds	r3, #1
 8019a16:	637b      	str	r3, [r7, #52]	; 0x34
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 8019a18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019a1a:	2200      	movs	r2, #0
 8019a1c:	469a      	mov	sl, r3
 8019a1e:	4693      	mov	fp, r2
                                                          media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 8019a20:	69fb      	ldr	r3, [r7, #28]
 8019a22:	689b      	ldr	r3, [r3, #8]
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 8019a24:	2202      	movs	r2, #2
 8019a26:	9202      	str	r2, [sp, #8]
 8019a28:	2201      	movs	r2, #1
 8019a2a:	9201      	str	r2, [sp, #4]
 8019a2c:	9300      	str	r3, [sp, #0]
 8019a2e:	4652      	mov	r2, sl
 8019a30:	465b      	mov	r3, fp
 8019a32:	69f8      	ldr	r0, [r7, #28]
 8019a34:	f001 faa2 	bl	801af7c <_fx_utility_logical_sector_read>
 8019a38:	63f8      	str	r0, [r7, #60]	; 0x3c

                /* Determine if an error occurred.  */
                if (status != FX_SUCCESS)
 8019a3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019a3c:	2b00      	cmp	r3, #0
 8019a3e:	d001      	beq.n	8019a44 <_fx_utility_FAT_entry_read+0x2e4>
                {
                    return(status);
 8019a40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019a42:	e0b1      	b.n	8019ba8 <_fx_utility_FAT_entry_read+0x448>
                }

                /* Setup a pointer into the buffer.  */
                FAT_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer;
 8019a44:	69fb      	ldr	r3, [r7, #28]
 8019a46:	689b      	ldr	r3, [r3, #8]
 8019a48:	64fb      	str	r3, [r7, #76]	; 0x4c
            }

            /* Pickup the upper 4 bits of the FAT entry.  */
            entry =  entry | ((((UINT)*FAT_ptr) & 0x0F) << 8);
 8019a4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019a4c:	781b      	ldrb	r3, [r3, #0]
 8019a4e:	021b      	lsls	r3, r3, #8
 8019a50:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8019a54:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8019a56:	4313      	orrs	r3, r2
 8019a58:	64bb      	str	r3, [r7, #72]	; 0x48
        }

        /* Determine if we need to do sign extension on the 12-bit eof value.  */
        if (entry >= FX_MAX_12BIT_CLUST)
 8019a5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019a5c:	f5b3 6f7f 	cmp.w	r3, #4080	; 0xff0
 8019a60:	d303      	bcc.n	8019a6a <_fx_utility_FAT_entry_read+0x30a>
        {

            /* Yes, we need to sign extend.  */
            entry =  entry | FX_SIGN_EXTEND;
 8019a62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019a64:	f443 4370 	orr.w	r3, r3, #61440	; 0xf000
 8019a68:	64bb      	str	r3, [r7, #72]	; 0x48
        }

        *entry_ptr =  entry;
 8019a6a:	697b      	ldr	r3, [r7, #20]
 8019a6c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8019a6e:	601a      	str	r2, [r3, #0]
 8019a70:	e078      	b.n	8019b64 <_fx_utility_FAT_entry_read+0x404>

    /* Check for a 16-bit FAT.  */
#ifdef FX_ENABLE_EXFAT
    else if (FX_FAT16  == media_ptr -> fx_media_FAT_type)
#else
    else if (!media_ptr -> fx_media_32_bit_FAT)
 8019a72:	69fb      	ldr	r3, [r7, #28]
 8019a74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8019a76:	2b00      	cmp	r3, #0
 8019a78:	d139      	bne.n	8019aee <_fx_utility_FAT_entry_read+0x38e>
    {

        /* 16-bit FAT is present.  */

        /* Calculate the byte offset to the cluster entry.  */
        byte_offset =  (((ULONG)cluster) * 2);
 8019a7a:	69bb      	ldr	r3, [r7, #24]
 8019a7c:	005b      	lsls	r3, r3, #1
 8019a7e:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Calculate the FAT sector the requested FAT entry resides in.  */
        FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 8019a80:	69fb      	ldr	r3, [r7, #28]
 8019a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019a84:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8019a86:	fbb2 f2f3 	udiv	r2, r2, r3
            (ULONG)media_ptr -> fx_media_reserved_sectors;
 8019a8a:	69fb      	ldr	r3, [r7, #28]
 8019a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
        FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 8019a8e:	4413      	add	r3, r2
 8019a90:	637b      	str	r3, [r7, #52]	; 0x34

        /* Read the FAT sector.  */
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 8019a92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019a94:	2200      	movs	r2, #0
 8019a96:	4698      	mov	r8, r3
 8019a98:	4691      	mov	r9, r2
                                                  media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 8019a9a:	69fb      	ldr	r3, [r7, #28]
 8019a9c:	689b      	ldr	r3, [r3, #8]
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 8019a9e:	2202      	movs	r2, #2
 8019aa0:	9202      	str	r2, [sp, #8]
 8019aa2:	2201      	movs	r2, #1
 8019aa4:	9201      	str	r2, [sp, #4]
 8019aa6:	9300      	str	r3, [sp, #0]
 8019aa8:	4642      	mov	r2, r8
 8019aaa:	464b      	mov	r3, r9
 8019aac:	69f8      	ldr	r0, [r7, #28]
 8019aae:	f001 fa65 	bl	801af7c <_fx_utility_logical_sector_read>
 8019ab2:	63f8      	str	r0, [r7, #60]	; 0x3c

        /* Determine if an error occurred.  */
        if (status != FX_SUCCESS)
 8019ab4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019ab6:	2b00      	cmp	r3, #0
 8019ab8:	d001      	beq.n	8019abe <_fx_utility_FAT_entry_read+0x35e>
        {

            /* Return the error code.  */
            return(status);
 8019aba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019abc:	e074      	b.n	8019ba8 <_fx_utility_FAT_entry_read+0x448>
        }

        /* Now calculate the byte offset into this FAT sector.  */
        byte_offset =  byte_offset -
            ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 8019abe:	69fb      	ldr	r3, [r7, #28]
 8019ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019ac2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8019ac4:	1ad3      	subs	r3, r2, r3
             media_ptr -> fx_media_bytes_per_sector);
 8019ac6:	69fa      	ldr	r2, [r7, #28]
 8019ac8:	6a92      	ldr	r2, [r2, #40]	; 0x28
            ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 8019aca:	fb02 f303 	mul.w	r3, r2, r3
        byte_offset =  byte_offset -
 8019ace:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8019ad0:	1ad3      	subs	r3, r2, r3
 8019ad2:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Setup a pointer into the buffer.  */
        FAT_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer + (UINT)byte_offset;
 8019ad4:	69fb      	ldr	r3, [r7, #28]
 8019ad6:	689a      	ldr	r2, [r3, #8]
 8019ad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019ada:	4413      	add	r3, r2
 8019adc:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Pickup the FAT entry.  */
        entry =  _fx_utility_16_unsigned_read(FAT_ptr);
 8019ade:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8019ae0:	f7ff fdd8 	bl	8019694 <_fx_utility_16_unsigned_read>
 8019ae4:	64b8      	str	r0, [r7, #72]	; 0x48

        *entry_ptr =  entry;
 8019ae6:	697b      	ldr	r3, [r7, #20]
 8019ae8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8019aea:	601a      	str	r2, [r3, #0]
 8019aec:	e03a      	b.n	8019b64 <_fx_utility_FAT_entry_read+0x404>
    else
#endif /* FX_ENABLE_EXFAT */
    {

        /* Otherwise, a 32 bit FAT present.  */
        byte_offset =  (((ULONG)cluster) * 4);
 8019aee:	69bb      	ldr	r3, [r7, #24]
 8019af0:	009b      	lsls	r3, r3, #2
 8019af2:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Calculate the FAT sector the requested FAT entry resides in.  */
        FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 8019af4:	69fb      	ldr	r3, [r7, #28]
 8019af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019af8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8019afa:	fbb2 f2f3 	udiv	r2, r2, r3
            (ULONG)media_ptr -> fx_media_reserved_sectors;
 8019afe:	69fb      	ldr	r3, [r7, #28]
 8019b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
        FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 8019b02:	4413      	add	r3, r2
 8019b04:	637b      	str	r3, [r7, #52]	; 0x34

        /* Calculate the byte offset to the FAT entry.  */
        byte_offset = (byte_offset % media_ptr -> fx_media_bytes_per_sector);
 8019b06:	69fb      	ldr	r3, [r7, #28]
 8019b08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8019b0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019b0c:	fbb3 f1f2 	udiv	r1, r3, r2
 8019b10:	fb01 f202 	mul.w	r2, r1, r2
 8019b14:	1a9b      	subs	r3, r3, r2
 8019b16:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Read the appropriate FAT sector.  */
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 8019b18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019b1a:	2200      	movs	r2, #0
 8019b1c:	461c      	mov	r4, r3
 8019b1e:	4615      	mov	r5, r2
                                                  media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 8019b20:	69fb      	ldr	r3, [r7, #28]
 8019b22:	689b      	ldr	r3, [r3, #8]
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 8019b24:	2202      	movs	r2, #2
 8019b26:	9202      	str	r2, [sp, #8]
 8019b28:	2201      	movs	r2, #1
 8019b2a:	9201      	str	r2, [sp, #4]
 8019b2c:	9300      	str	r3, [sp, #0]
 8019b2e:	4622      	mov	r2, r4
 8019b30:	462b      	mov	r3, r5
 8019b32:	69f8      	ldr	r0, [r7, #28]
 8019b34:	f001 fa22 	bl	801af7c <_fx_utility_logical_sector_read>
 8019b38:	63f8      	str	r0, [r7, #60]	; 0x3c

        /* Determine if an error occurred.  */
        if (status != FX_SUCCESS)
 8019b3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019b3c:	2b00      	cmp	r3, #0
 8019b3e:	d001      	beq.n	8019b44 <_fx_utility_FAT_entry_read+0x3e4>
        {

            /* Return the error code.  */
            return(status);
 8019b40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019b42:	e031      	b.n	8019ba8 <_fx_utility_FAT_entry_read+0x448>
        }

        /* Setup a pointer into the buffer.  */
        FAT_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer + (ULONG)byte_offset;
 8019b44:	69fb      	ldr	r3, [r7, #28]
 8019b46:	689a      	ldr	r2, [r3, #8]
 8019b48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019b4a:	4413      	add	r3, r2
 8019b4c:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Pickup the FAT entry.  */
        entry32 =  _fx_utility_32_unsigned_read(FAT_ptr);
 8019b4e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8019b50:	f7ff fdc8 	bl	80196e4 <_fx_utility_32_unsigned_read>
 8019b54:	6338      	str	r0, [r7, #48]	; 0x30
        if (media_ptr -> fx_media_FAT_type == FX_FAT32)
        {
#endif /* FX_ENABLE_EXFAT */

            /* Clear upper nibble.  */
            entry32 = entry32 & 0x0FFFFFFF;
 8019b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019b58:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8019b5c:	633b      	str	r3, [r7, #48]	; 0x30
#ifdef FX_ENABLE_EXFAT
        }
#endif /* FX_ENABLE_EXFAT */

        *entry_ptr =  entry32;
 8019b5e:	697b      	ldr	r3, [r7, #20]
 8019b60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019b62:	601a      	str	r2, [r3, #0]
    }

    /* Move all the cache entries down so the oldest is at the bottom.  */
    *(cache_entry_ptr + 3) =  *(cache_entry_ptr + 2);
 8019b64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019b66:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8019b6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019b6c:	4614      	mov	r4, r2
 8019b6e:	3318      	adds	r3, #24
 8019b70:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8019b74:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    *(cache_entry_ptr + 2) =  *(cache_entry_ptr + 1);
 8019b78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019b7a:	f103 0218 	add.w	r2, r3, #24
 8019b7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019b80:	4614      	mov	r4, r2
 8019b82:	330c      	adds	r3, #12
 8019b84:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8019b88:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    *(cache_entry_ptr + 1) =  *(cache_entry_ptr);
 8019b8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019b8e:	330c      	adds	r3, #12
 8019b90:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8019b92:	ca07      	ldmia	r2, {r0, r1, r2}
 8019b94:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    /* Setup the new FAT entry in the cache.  */
    cache_entry_ptr -> fx_fat_cache_entry_cluster =  cluster;
 8019b98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019b9a:	69ba      	ldr	r2, [r7, #24]
 8019b9c:	601a      	str	r2, [r3, #0]
    cache_entry_ptr -> fx_fat_cache_entry_value   =  *entry_ptr;
 8019b9e:	697b      	ldr	r3, [r7, #20]
 8019ba0:	681a      	ldr	r2, [r3, #0]
 8019ba2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019ba4:	605a      	str	r2, [r3, #4]

    /* Return success to the caller.  */
    return(FX_SUCCESS);
 8019ba6:	2300      	movs	r3, #0
}
 8019ba8:	4618      	mov	r0, r3
 8019baa:	3750      	adds	r7, #80	; 0x50
 8019bac:	46bd      	mov	sp, r7
 8019bae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08019bb2 <_fx_utility_FAT_entry_write>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fx_utility_FAT_entry_write(FX_MEDIA *media_ptr, ULONG cluster, ULONG next_cluster)
{
 8019bb2:	b590      	push	{r4, r7, lr}
 8019bb4:	b089      	sub	sp, #36	; 0x24
 8019bb6:	af00      	add	r7, sp, #0
 8019bb8:	60f8      	str	r0, [r7, #12]
 8019bba:	60b9      	str	r1, [r7, #8]
 8019bbc:	607a      	str	r2, [r7, #4]
    }
#endif /* FX_ENABLE_FAULT_TOLERANT */

#ifndef FX_MEDIA_STATISTICS_DISABLE
    /* Increment the number of FAT entry writes and cache hits.  */
    media_ptr -> fx_media_fat_entry_writes++;
 8019bbe:	68fb      	ldr	r3, [r7, #12]
 8019bc0:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 8019bc4:	1c5a      	adds	r2, r3, #1
 8019bc6:	68fb      	ldr	r3, [r7, #12]
 8019bc8:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    media_ptr -> fx_media_fat_entry_cache_write_hits++;
 8019bcc:	68fb      	ldr	r3, [r7, #12]
 8019bce:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 8019bd2:	1c5a      	adds	r2, r3, #1
 8019bd4:	68fb      	ldr	r3, [r7, #12]
 8019bd6:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188

    /* Extended port-specific processing macro, which is by default defined to white space.  */
    FX_UTILITY_FAT_ENTRY_WRITE_EXTENSION

    /* Calculate the area of the cache for this FAT entry.  */
    index =  (cluster & FX_FAT_CACHE_HASH_MASK) * FX_FAT_CACHE_DEPTH;
 8019bda:	68bb      	ldr	r3, [r7, #8]
 8019bdc:	f003 0303 	and.w	r3, r3, #3
 8019be0:	009b      	lsls	r3, r3, #2
 8019be2:	61bb      	str	r3, [r7, #24]

    /* Build a pointer to the cache entry.  */
    cache_entry_ptr =  &media_ptr -> fx_media_fat_cache[index];
 8019be4:	69ba      	ldr	r2, [r7, #24]
 8019be6:	4613      	mov	r3, r2
 8019be8:	005b      	lsls	r3, r3, #1
 8019bea:	4413      	add	r3, r2
 8019bec:	009b      	lsls	r3, r3, #2
 8019bee:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 8019bf2:	68fa      	ldr	r2, [r7, #12]
 8019bf4:	4413      	add	r3, r2
 8019bf6:	617b      	str	r3, [r7, #20]

    /* First search for the entry in the FAT entry cache.  */
    for (i = 0; i < FX_FAT_CACHE_DEPTH; i++)
 8019bf8:	2300      	movs	r3, #0
 8019bfa:	61fb      	str	r3, [r7, #28]
 8019bfc:	e051      	b.n	8019ca2 <_fx_utility_FAT_entry_write+0xf0>
    {

        /* See if the entry matches the write request.  */
        if (((cache_entry_ptr + i) -> fx_fat_cache_entry_cluster) == cluster)
 8019bfe:	69fa      	ldr	r2, [r7, #28]
 8019c00:	4613      	mov	r3, r2
 8019c02:	005b      	lsls	r3, r3, #1
 8019c04:	4413      	add	r3, r2
 8019c06:	009b      	lsls	r3, r3, #2
 8019c08:	461a      	mov	r2, r3
 8019c0a:	697b      	ldr	r3, [r7, #20]
 8019c0c:	4413      	add	r3, r2
 8019c0e:	681b      	ldr	r3, [r3, #0]
 8019c10:	68ba      	ldr	r2, [r7, #8]
 8019c12:	429a      	cmp	r2, r3
 8019c14:	d142      	bne.n	8019c9c <_fx_utility_FAT_entry_write+0xea>
        {

            /* Yes, we have a matching entry.  Save the new information in the FAT
               cache and mark this entry as dirty.  */
            (cache_entry_ptr + i) -> fx_fat_cache_entry_value =     next_cluster;
 8019c16:	69fa      	ldr	r2, [r7, #28]
 8019c18:	4613      	mov	r3, r2
 8019c1a:	005b      	lsls	r3, r3, #1
 8019c1c:	4413      	add	r3, r2
 8019c1e:	009b      	lsls	r3, r3, #2
 8019c20:	461a      	mov	r2, r3
 8019c22:	697b      	ldr	r3, [r7, #20]
 8019c24:	4413      	add	r3, r2
 8019c26:	687a      	ldr	r2, [r7, #4]
 8019c28:	605a      	str	r2, [r3, #4]
            (cache_entry_ptr + i) -> fx_fat_cache_entry_dirty =     1;
 8019c2a:	69fa      	ldr	r2, [r7, #28]
 8019c2c:	4613      	mov	r3, r2
 8019c2e:	005b      	lsls	r3, r3, #1
 8019c30:	4413      	add	r3, r2
 8019c32:	009b      	lsls	r3, r3, #2
 8019c34:	461a      	mov	r2, r3
 8019c36:	697b      	ldr	r3, [r7, #20]
 8019c38:	4413      	add	r3, r2
 8019c3a:	2201      	movs	r2, #1
 8019c3c:	609a      	str	r2, [r3, #8]

            /* Determine if the driver has requested notification when data sectors in the media
               become free.  This can be useful to FLASH manager software.  */
            if ((media_ptr -> fx_media_driver_free_sector_update) && (next_cluster == FX_FREE_CLUSTER))
 8019c3e:	68fb      	ldr	r3, [r7, #12]
 8019c40:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8019c44:	2b00      	cmp	r3, #0
 8019c46:	d027      	beq.n	8019c98 <_fx_utility_FAT_entry_write+0xe6>
 8019c48:	687b      	ldr	r3, [r7, #4]
 8019c4a:	2b00      	cmp	r3, #0
 8019c4c:	d124      	bne.n	8019c98 <_fx_utility_FAT_entry_write+0xe6>
                   not in use.  */

#ifndef FX_MEDIA_STATISTICS_DISABLE

                /* Increment the number of driver release sectors requests.  */
                media_ptr -> fx_media_driver_release_sectors_requests++;
 8019c4e:	68fb      	ldr	r3, [r7, #12]
 8019c50:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 8019c54:	1c5a      	adds	r2, r3, #1
 8019c56:	68fb      	ldr	r3, [r7, #12]
 8019c58:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
#endif

                /* This cluster is being released so inform the driver that the
                   corresponding sectors are now available.  */
                media_ptr -> fx_media_driver_request =          FX_DRIVER_RELEASE_SECTORS;
 8019c5c:	68fb      	ldr	r3, [r7, #12]
 8019c5e:	2206      	movs	r2, #6
 8019c60:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
                media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8019c64:	68fb      	ldr	r3, [r7, #12]
 8019c66:	2290      	movs	r2, #144	; 0x90
 8019c68:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
                media_ptr -> fx_media_driver_logical_sector =   (media_ptr -> fx_media_data_sector_start +
 8019c6c:	68fb      	ldr	r3, [r7, #12]
 8019c6e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
                                                                 ((cluster - FX_FAT_ENTRY_START) * media_ptr -> fx_media_sectors_per_cluster));
 8019c70:	68bb      	ldr	r3, [r7, #8]
 8019c72:	3b02      	subs	r3, #2
 8019c74:	68f9      	ldr	r1, [r7, #12]
 8019c76:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8019c78:	fb01 f303 	mul.w	r3, r1, r3
                media_ptr -> fx_media_driver_logical_sector =   (media_ptr -> fx_media_data_sector_start +
 8019c7c:	441a      	add	r2, r3
 8019c7e:	68fb      	ldr	r3, [r7, #12]
 8019c80:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
                media_ptr -> fx_media_driver_sectors =          media_ptr -> fx_media_sectors_per_cluster;
 8019c84:	68fb      	ldr	r3, [r7, #12]
 8019c86:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8019c88:	68fb      	ldr	r3, [r7, #12]
 8019c8a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

                /* If trace is enabled, insert this event into the trace buffer.  */
                FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_RELEASE_SECTORS, media_ptr, media_ptr -> fx_media_driver_logical_sector, media_ptr -> fx_media_driver_sectors, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

                /* Call the driver.  */
                (media_ptr -> fx_media_driver_entry)(media_ptr);
 8019c8e:	68fb      	ldr	r3, [r7, #12]
 8019c90:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8019c94:	68f8      	ldr	r0, [r7, #12]
 8019c96:	4798      	blx	r3
            }

            /* Done, return successful status.  */
            return(FX_SUCCESS);
 8019c98:	2300      	movs	r3, #0
 8019c9a:	e07a      	b.n	8019d92 <_fx_utility_FAT_entry_write+0x1e0>
    for (i = 0; i < FX_FAT_CACHE_DEPTH; i++)
 8019c9c:	69fb      	ldr	r3, [r7, #28]
 8019c9e:	3301      	adds	r3, #1
 8019ca0:	61fb      	str	r3, [r7, #28]
 8019ca2:	69fb      	ldr	r3, [r7, #28]
 8019ca4:	2b03      	cmp	r3, #3
 8019ca6:	d9aa      	bls.n	8019bfe <_fx_utility_FAT_entry_write+0x4c>
    /* If we reach this point, we know that the FAT write request is not in
       the cache.  */

#ifndef FX_MEDIA_STATISTICS_DISABLE
    /* Decrement the number of cache hits.  */
    media_ptr -> fx_media_fat_entry_cache_write_hits--;
 8019ca8:	68fb      	ldr	r3, [r7, #12]
 8019caa:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 8019cae:	1e5a      	subs	r2, r3, #1
 8019cb0:	68fb      	ldr	r3, [r7, #12]
 8019cb2:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188

    /* Increment the number of cache misses.  */
    media_ptr -> fx_media_fat_entry_cache_write_misses++;
 8019cb6:	68fb      	ldr	r3, [r7, #12]
 8019cb8:	f8d3 318c 	ldr.w	r3, [r3, #396]	; 0x18c
 8019cbc:	1c5a      	adds	r2, r3, #1
 8019cbe:	68fb      	ldr	r3, [r7, #12]
 8019cc0:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
#endif

    /* Determine if the oldest entry is dirty and needs to be flushed.  */
    if (media_ptr -> fx_media_fat_cache[index + 3].fx_fat_cache_entry_dirty == 1)
 8019cc4:	69bb      	ldr	r3, [r7, #24]
 8019cc6:	1cda      	adds	r2, r3, #3
 8019cc8:	68f9      	ldr	r1, [r7, #12]
 8019cca:	4613      	mov	r3, r2
 8019ccc:	005b      	lsls	r3, r3, #1
 8019cce:	4413      	add	r3, r2
 8019cd0:	009b      	lsls	r3, r3, #2
 8019cd2:	440b      	add	r3, r1
 8019cd4:	f503 63ec 	add.w	r3, r3, #1888	; 0x760
 8019cd8:	681b      	ldr	r3, [r3, #0]
 8019cda:	2b01      	cmp	r3, #1
 8019cdc:	d108      	bne.n	8019cf0 <_fx_utility_FAT_entry_write+0x13e>
    {

        /* Flush the dirty entry so it can be used to hold the current
           FAT entry write request.  */
        status = _fx_utility_FAT_flush(media_ptr);
 8019cde:	68f8      	ldr	r0, [r7, #12]
 8019ce0:	f000 f85b 	bl	8019d9a <_fx_utility_FAT_flush>
 8019ce4:	6138      	str	r0, [r7, #16]

        /* Determine if the write was successful.  */
        if (status != FX_SUCCESS)
 8019ce6:	693b      	ldr	r3, [r7, #16]
 8019ce8:	2b00      	cmp	r3, #0
 8019cea:	d001      	beq.n	8019cf0 <_fx_utility_FAT_entry_write+0x13e>
        {

            /* No, return error status to caller.  */
            return(status);
 8019cec:	693b      	ldr	r3, [r7, #16]
 8019cee:	e050      	b.n	8019d92 <_fx_utility_FAT_entry_write+0x1e0>
        }

    }

    /* Move all the cache entries down so the oldest is at the bottom.  */
    *(cache_entry_ptr + 3) =  *(cache_entry_ptr + 2);
 8019cf0:	697b      	ldr	r3, [r7, #20]
 8019cf2:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8019cf6:	697b      	ldr	r3, [r7, #20]
 8019cf8:	4614      	mov	r4, r2
 8019cfa:	3318      	adds	r3, #24
 8019cfc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8019d00:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    *(cache_entry_ptr + 2) =  *(cache_entry_ptr + 1);
 8019d04:	697b      	ldr	r3, [r7, #20]
 8019d06:	f103 0218 	add.w	r2, r3, #24
 8019d0a:	697b      	ldr	r3, [r7, #20]
 8019d0c:	4614      	mov	r4, r2
 8019d0e:	330c      	adds	r3, #12
 8019d10:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8019d14:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    *(cache_entry_ptr + 1) =  *(cache_entry_ptr);
 8019d18:	697b      	ldr	r3, [r7, #20]
 8019d1a:	330c      	adds	r3, #12
 8019d1c:	697a      	ldr	r2, [r7, #20]
 8019d1e:	ca07      	ldmia	r2, {r0, r1, r2}
 8019d20:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    /* Save the current FAT entry write request and mark as dirty.  */
    cache_entry_ptr -> fx_fat_cache_entry_dirty =    1;
 8019d24:	697b      	ldr	r3, [r7, #20]
 8019d26:	2201      	movs	r2, #1
 8019d28:	609a      	str	r2, [r3, #8]
    cache_entry_ptr -> fx_fat_cache_entry_cluster =  cluster;
 8019d2a:	697b      	ldr	r3, [r7, #20]
 8019d2c:	68ba      	ldr	r2, [r7, #8]
 8019d2e:	601a      	str	r2, [r3, #0]
    cache_entry_ptr -> fx_fat_cache_entry_value =    next_cluster;
 8019d30:	697b      	ldr	r3, [r7, #20]
 8019d32:	687a      	ldr	r2, [r7, #4]
 8019d34:	605a      	str	r2, [r3, #4]

    /* Determine if the driver has requested notification when data sectors in the media
       become free.  This can be useful to FLASH manager software.  */
    if ((media_ptr -> fx_media_driver_free_sector_update) && (next_cluster == FX_FREE_CLUSTER))
 8019d36:	68fb      	ldr	r3, [r7, #12]
 8019d38:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8019d3c:	2b00      	cmp	r3, #0
 8019d3e:	d027      	beq.n	8019d90 <_fx_utility_FAT_entry_write+0x1de>
 8019d40:	687b      	ldr	r3, [r7, #4]
 8019d42:	2b00      	cmp	r3, #0
 8019d44:	d124      	bne.n	8019d90 <_fx_utility_FAT_entry_write+0x1de>
           not in use.  */

#ifndef FX_MEDIA_STATISTICS_DISABLE

        /* Increment the number of driver release sectors requests.  */
        media_ptr -> fx_media_driver_release_sectors_requests++;
 8019d46:	68fb      	ldr	r3, [r7, #12]
 8019d48:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 8019d4c:	1c5a      	adds	r2, r3, #1
 8019d4e:	68fb      	ldr	r3, [r7, #12]
 8019d50:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
#endif

        /* This cluster is being released so inform the driver that the
              corresponding sectors are now available.  */
        media_ptr -> fx_media_driver_request =          FX_DRIVER_RELEASE_SECTORS;
 8019d54:	68fb      	ldr	r3, [r7, #12]
 8019d56:	2206      	movs	r2, #6
 8019d58:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8019d5c:	68fb      	ldr	r3, [r7, #12]
 8019d5e:	2290      	movs	r2, #144	; 0x90
 8019d60:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        media_ptr -> fx_media_driver_logical_sector =   (media_ptr -> fx_media_data_sector_start +
 8019d64:	68fb      	ldr	r3, [r7, #12]
 8019d66:	6d1a      	ldr	r2, [r3, #80]	; 0x50
                                                         ((cluster - FX_FAT_ENTRY_START) * media_ptr -> fx_media_sectors_per_cluster));
 8019d68:	68bb      	ldr	r3, [r7, #8]
 8019d6a:	3b02      	subs	r3, #2
 8019d6c:	68f9      	ldr	r1, [r7, #12]
 8019d6e:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8019d70:	fb01 f303 	mul.w	r3, r1, r3
        media_ptr -> fx_media_driver_logical_sector =   (media_ptr -> fx_media_data_sector_start +
 8019d74:	441a      	add	r2, r3
 8019d76:	68fb      	ldr	r3, [r7, #12]
 8019d78:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        media_ptr -> fx_media_driver_sectors =          media_ptr -> fx_media_sectors_per_cluster;
 8019d7c:	68fb      	ldr	r3, [r7, #12]
 8019d7e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8019d80:	68fb      	ldr	r3, [r7, #12]
 8019d82:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_RELEASE_SECTORS, media_ptr, media_ptr -> fx_media_driver_logical_sector, media_ptr -> fx_media_driver_sectors, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Call the driver.  */
        (media_ptr -> fx_media_driver_entry)(media_ptr);
 8019d86:	68fb      	ldr	r3, [r7, #12]
 8019d88:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8019d8c:	68f8      	ldr	r0, [r7, #12]
 8019d8e:	4798      	blx	r3
    }

    /* Return success to caller.  */
    return(FX_SUCCESS);
 8019d90:	2300      	movs	r3, #0
}
 8019d92:	4618      	mov	r0, r3
 8019d94:	3724      	adds	r7, #36	; 0x24
 8019d96:	46bd      	mov	sp, r7
 8019d98:	bd90      	pop	{r4, r7, pc}

08019d9a <_fx_utility_FAT_flush>:
/*                                            FAT secondary update map,   */
/*                                            resulting in version 6.1.2  */
/*                                                                        */
/**************************************************************************/
UINT  _fx_utility_FAT_flush(FX_MEDIA *media_ptr)
{
 8019d9a:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8019d9e:	b09a      	sub	sp, #104	; 0x68
 8019da0:	af04      	add	r7, sp, #16
 8019da2:	61f8      	str	r0, [r7, #28]
INT    multi_sector_entry;
ULONG  sector;

#ifndef FX_MEDIA_STATISTICS_DISABLE
    /* Increment the number of cache flush requests.  */
    media_ptr -> fx_media_fat_cache_flushes++;
 8019da4:	69fb      	ldr	r3, [r7, #28]
 8019da6:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 8019daa:	1c5a      	adds	r2, r3, #1
 8019dac:	69fb      	ldr	r3, [r7, #28]
 8019dae:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
#endif

    /* Loop through the media's FAT cache and flush out dirty entries.  */
    for (index = 0; index < FX_MAX_FAT_CACHE; index++)
 8019db2:	2300      	movs	r3, #0
 8019db4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8019db6:	e337      	b.n	801a428 <_fx_utility_FAT_flush+0x68e>
    {

        /* Determine if the entry is dirty.  */
        if ((media_ptr -> fx_media_fat_cache[index].fx_fat_cache_entry_dirty) == 0)
 8019db8:	69f9      	ldr	r1, [r7, #28]
 8019dba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8019dbc:	4613      	mov	r3, r2
 8019dbe:	005b      	lsls	r3, r3, #1
 8019dc0:	4413      	add	r3, r2
 8019dc2:	009b      	lsls	r3, r3, #2
 8019dc4:	440b      	add	r3, r1
 8019dc6:	f503 63ec 	add.w	r3, r3, #1888	; 0x760
 8019dca:	681b      	ldr	r3, [r3, #0]
 8019dcc:	2b00      	cmp	r3, #0
 8019dce:	f000 8325 	beq.w	801a41c <_fx_utility_FAT_flush+0x682>

        /* Otherwise, the entry is indeed dirty and must be flushed out.  Process
           relative to the type of FAT that is being used.  */

        /* Pickup the contents of the FAT cache entry.  */
        cluster =       media_ptr -> fx_media_fat_cache[index].fx_fat_cache_entry_cluster;
 8019dd2:	69f9      	ldr	r1, [r7, #28]
 8019dd4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8019dd6:	4613      	mov	r3, r2
 8019dd8:	005b      	lsls	r3, r3, #1
 8019dda:	4413      	add	r3, r2
 8019ddc:	009b      	lsls	r3, r3, #2
 8019dde:	440b      	add	r3, r1
 8019de0:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 8019de4:	681b      	ldr	r3, [r3, #0]
 8019de6:	643b      	str	r3, [r7, #64]	; 0x40

        /* Determine which type of FAT is present.  */
#ifdef FX_ENABLE_EXFAT
        if (media_ptr -> fx_media_FAT_type == FX_FAT12)
#else
        if (media_ptr -> fx_media_12_bit_FAT)
 8019de8:	69fb      	ldr	r3, [r7, #28]
 8019dea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8019dec:	2b00      	cmp	r3, #0
 8019dee:	f000 816c 	beq.w	801a0ca <_fx_utility_FAT_flush+0x330>
#endif /* FX_ENABLE_EXFAT */
        {

            /* Calculate the byte offset to the cluster entry.  */
            byte_offset =  (((ULONG)cluster << 1) + cluster) >> 1;
 8019df2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019df4:	005a      	lsls	r2, r3, #1
 8019df6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019df8:	4413      	add	r3, r2
 8019dfa:	085b      	lsrs	r3, r3, #1
 8019dfc:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Calculate the FAT sector the requested FAT entry resides in.  */
            FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 8019dfe:	69fb      	ldr	r3, [r7, #28]
 8019e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019e02:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8019e04:	fbb2 f2f3 	udiv	r2, r2, r3
                (ULONG)media_ptr -> fx_media_reserved_sectors;
 8019e08:	69fb      	ldr	r3, [r7, #28]
 8019e0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 8019e0c:	4413      	add	r3, r2
 8019e0e:	657b      	str	r3, [r7, #84]	; 0x54

            /* Initialize as not written.  */
            multi_sector_entry = -1;
 8019e10:	f04f 33ff 	mov.w	r3, #4294967295
 8019e14:	647b      	str	r3, [r7, #68]	; 0x44

            for (;;)
            {

                /* Pickup the FAT sector.  */
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 8019e16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019e18:	2200      	movs	r2, #0
 8019e1a:	461c      	mov	r4, r3
 8019e1c:	4615      	mov	r5, r2
                                                          media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 8019e1e:	69fb      	ldr	r3, [r7, #28]
 8019e20:	689a      	ldr	r2, [r3, #8]
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 8019e22:	2302      	movs	r3, #2
 8019e24:	9302      	str	r3, [sp, #8]
 8019e26:	2301      	movs	r3, #1
 8019e28:	9301      	str	r3, [sp, #4]
 8019e2a:	9200      	str	r2, [sp, #0]
 8019e2c:	4622      	mov	r2, r4
 8019e2e:	462b      	mov	r3, r5
 8019e30:	69f8      	ldr	r0, [r7, #28]
 8019e32:	f001 f8a3 	bl	801af7c <_fx_utility_logical_sector_read>
 8019e36:	63b8      	str	r0, [r7, #56]	; 0x38

                /* Determine if an error occurred.  */
                if (status != FX_SUCCESS)
 8019e38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019e3a:	2b00      	cmp	r3, #0
 8019e3c:	d001      	beq.n	8019e42 <_fx_utility_FAT_flush+0xa8>
                {

                    /* Return the error status.  */
                    return(status);
 8019e3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019e40:	e2f7      	b.n	801a432 <_fx_utility_FAT_flush+0x698>
                }

                /* Determine if a mulit-sector FAT update is present.  */
                if (multi_sector_entry != -1)
 8019e42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019e44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019e48:	d037      	beq.n	8019eba <_fx_utility_FAT_flush+0x120>

                    /* Yes, store the remaining portion of the new FAT entry in the
                       next FAT sector.  */

                    /* Setup a pointer into the buffer.  */
                    FAT_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer;
 8019e4a:	69fb      	ldr	r3, [r7, #28]
 8019e4c:	689b      	ldr	r3, [r3, #8]
 8019e4e:	62fb      	str	r3, [r7, #44]	; 0x2c

                    /* Pickup the cluster and next cluster.  */
                    cluster = (media_ptr -> fx_media_fat_cache[multi_sector_entry].fx_fat_cache_entry_cluster);
 8019e50:	69f9      	ldr	r1, [r7, #28]
 8019e52:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8019e54:	4613      	mov	r3, r2
 8019e56:	005b      	lsls	r3, r3, #1
 8019e58:	4413      	add	r3, r2
 8019e5a:	009b      	lsls	r3, r3, #2
 8019e5c:	440b      	add	r3, r1
 8019e5e:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 8019e62:	681b      	ldr	r3, [r3, #0]
 8019e64:	643b      	str	r3, [r7, #64]	; 0x40
                    next_cluster = media_ptr -> fx_media_fat_cache[multi_sector_entry].fx_fat_cache_entry_value;
 8019e66:	69f9      	ldr	r1, [r7, #28]
 8019e68:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8019e6a:	4613      	mov	r3, r2
 8019e6c:	005b      	lsls	r3, r3, #1
 8019e6e:	4413      	add	r3, r2
 8019e70:	009b      	lsls	r3, r3, #2
 8019e72:	440b      	add	r3, r1
 8019e74:	f203 735c 	addw	r3, r3, #1884	; 0x75c
 8019e78:	681b      	ldr	r3, [r3, #0]
 8019e7a:	62bb      	str	r3, [r7, #40]	; 0x28

                    /* Determine if the cluster entry is odd or even.  */
                    if (cluster & 1)
 8019e7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019e7e:	f003 0301 	and.w	r3, r3, #1
 8019e82:	2b00      	cmp	r3, #0
 8019e84:	d005      	beq.n	8019e92 <_fx_utility_FAT_flush+0xf8>
                    {

                        /* Store the upper 8 bits of the FAT entry.  */
                        *FAT_ptr =  (UCHAR)((next_cluster >> 4) & 0xFF);
 8019e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019e88:	091b      	lsrs	r3, r3, #4
 8019e8a:	b2db      	uxtb	r3, r3
 8019e8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019e8e:	7013      	strb	r3, [r2, #0]
 8019e90:	e010      	b.n	8019eb4 <_fx_utility_FAT_flush+0x11a>
                    }
                    else
                    {

                        /* Store the upper 4 bits of the FAT entry.  */
                        temp =  ((UINT)*FAT_ptr) & 0xF0;
 8019e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e94:	781b      	ldrb	r3, [r3, #0]
 8019e96:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8019e9a:	627b      	str	r3, [r7, #36]	; 0x24
                        *FAT_ptr =  (UCHAR)(temp | ((next_cluster >> 8) & 0xF));
 8019e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019e9e:	b2da      	uxtb	r2, r3
 8019ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019ea2:	0a1b      	lsrs	r3, r3, #8
 8019ea4:	b2db      	uxtb	r3, r3
 8019ea6:	f003 030f 	and.w	r3, r3, #15
 8019eaa:	b2db      	uxtb	r3, r3
 8019eac:	4313      	orrs	r3, r2
 8019eae:	b2db      	uxtb	r3, r3
 8019eb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019eb2:	7013      	strb	r3, [r2, #0]
                    }

                    /* Clear the multi-sector flag.  */
                    multi_sector_entry = -1;
 8019eb4:	f04f 33ff 	mov.w	r3, #4294967295
 8019eb8:	647b      	str	r3, [r7, #68]	; 0x44
                }

                /* Loop through the remainder of the cache to check for multiple entries
                   within the same FAT sector being written out.  */
                for (i = index; i < FX_MAX_FAT_CACHE; i++)
 8019eba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019ebc:	653b      	str	r3, [r7, #80]	; 0x50
 8019ebe:	e0a0      	b.n	801a002 <_fx_utility_FAT_flush+0x268>
                {

                    /* Is the cache entry dirty?  */
                    if ((media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty) == 0)
 8019ec0:	69f9      	ldr	r1, [r7, #28]
 8019ec2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8019ec4:	4613      	mov	r3, r2
 8019ec6:	005b      	lsls	r3, r3, #1
 8019ec8:	4413      	add	r3, r2
 8019eca:	009b      	lsls	r3, r3, #2
 8019ecc:	440b      	add	r3, r1
 8019ece:	f503 63ec 	add.w	r3, r3, #1888	; 0x760
 8019ed2:	681b      	ldr	r3, [r3, #0]
 8019ed4:	2b00      	cmp	r3, #0
 8019ed6:	f000 808a 	beq.w	8019fee <_fx_utility_FAT_flush+0x254>
                        /* Not dirty, does not need to be flushed.  */
                        continue;
                    }

                    /* Isolate the cluster.  */
                    cluster = (media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_cluster);
 8019eda:	69f9      	ldr	r1, [r7, #28]
 8019edc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8019ede:	4613      	mov	r3, r2
 8019ee0:	005b      	lsls	r3, r3, #1
 8019ee2:	4413      	add	r3, r2
 8019ee4:	009b      	lsls	r3, r3, #2
 8019ee6:	440b      	add	r3, r1
 8019ee8:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 8019eec:	681b      	ldr	r3, [r3, #0]
 8019eee:	643b      	str	r3, [r7, #64]	; 0x40

                    /* Calculate the byte offset to the cluster entry.  */
                    byte_offset =  (((ULONG)cluster << 1) + cluster) >> 1;
 8019ef0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019ef2:	005a      	lsls	r2, r3, #1
 8019ef4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019ef6:	4413      	add	r3, r2
 8019ef8:	085b      	lsrs	r3, r3, #1
 8019efa:	63fb      	str	r3, [r7, #60]	; 0x3c

                    /* Pickup the sector.  */
                    sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 8019efc:	69fb      	ldr	r3, [r7, #28]
 8019efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019f00:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8019f02:	fbb2 f2f3 	udiv	r2, r2, r3
                        (ULONG)media_ptr -> fx_media_reserved_sectors;
 8019f06:	69fb      	ldr	r3, [r7, #28]
 8019f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                    sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 8019f0a:	4413      	add	r3, r2
 8019f0c:	633b      	str	r3, [r7, #48]	; 0x30

                    /* Is it the current FAT sector?  */
                    if (sector != FAT_sector)
 8019f0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019f10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019f12:	429a      	cmp	r2, r3
 8019f14:	d16d      	bne.n	8019ff2 <_fx_utility_FAT_flush+0x258>
                        /* Different FAT sector - not in this pass of the loop.  */
                        continue;
                    }

                    /* Pickup new value for this FAT entry.  */
                    next_cluster =  media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_value;
 8019f16:	69f9      	ldr	r1, [r7, #28]
 8019f18:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8019f1a:	4613      	mov	r3, r2
 8019f1c:	005b      	lsls	r3, r3, #1
 8019f1e:	4413      	add	r3, r2
 8019f20:	009b      	lsls	r3, r3, #2
 8019f22:	440b      	add	r3, r1
 8019f24:	f203 735c 	addw	r3, r3, #1884	; 0x75c
 8019f28:	681b      	ldr	r3, [r3, #0]
 8019f2a:	62bb      	str	r3, [r7, #40]	; 0x28

                    /* Now calculate the byte offset into this FAT sector.  */
                    byte_offset =  byte_offset -
                        ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 8019f2c:	69fb      	ldr	r3, [r7, #28]
 8019f2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019f30:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8019f32:	1ad2      	subs	r2, r2, r3
                         media_ptr -> fx_media_bytes_per_sector);
 8019f34:	69fb      	ldr	r3, [r7, #28]
 8019f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                        ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 8019f38:	fb02 f303 	mul.w	r3, r2, r3
                    byte_offset =  byte_offset -
 8019f3c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8019f3e:	1ad3      	subs	r3, r2, r3
 8019f40:	63fb      	str	r3, [r7, #60]	; 0x3c

                    /* Determine if we are now past the end of the FAT buffer in memory.  */
                    if (byte_offset == (ULONG)(media_ptr -> fx_media_bytes_per_sector - 1))
 8019f42:	69fb      	ldr	r3, [r7, #28]
 8019f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019f46:	3b01      	subs	r3, #1
 8019f48:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8019f4a:	429a      	cmp	r2, r3
 8019f4c:	d101      	bne.n	8019f52 <_fx_utility_FAT_flush+0x1b8>
                    {

                        /* Yes, we need to read the next sector */
                        multi_sector_entry = (INT)i;
 8019f4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019f50:	647b      	str	r3, [r7, #68]	; 0x44
                    }

                    /* Setup a pointer into the buffer.  */
                    FAT_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer + (UINT)byte_offset;
 8019f52:	69fb      	ldr	r3, [r7, #28]
 8019f54:	689a      	ldr	r2, [r3, #8]
 8019f56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019f58:	4413      	add	r3, r2
 8019f5a:	62fb      	str	r3, [r7, #44]	; 0x2c

                    /* Clear the dirty flag.  */
                    media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty = 0;
 8019f5c:	69f9      	ldr	r1, [r7, #28]
 8019f5e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8019f60:	4613      	mov	r3, r2
 8019f62:	005b      	lsls	r3, r3, #1
 8019f64:	4413      	add	r3, r2
 8019f66:	009b      	lsls	r3, r3, #2
 8019f68:	440b      	add	r3, r1
 8019f6a:	f503 63ec 	add.w	r3, r3, #1888	; 0x760
 8019f6e:	2200      	movs	r2, #0
 8019f70:	601a      	str	r2, [r3, #0]

                    /* Determine if the cluster entry is odd or even.  */
                    if (cluster & 1)
 8019f72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019f74:	f003 0301 	and.w	r3, r3, #1
 8019f78:	2b00      	cmp	r3, #0
 8019f7a:	d01b      	beq.n	8019fb4 <_fx_utility_FAT_flush+0x21a>
                        /* Odd cluster number.  */

                        /* Pickup the upper nibble of the FAT entry.  */

                        /* First, set the lower nibble of the FAT entry.  */
                        temp =      (((UINT)*FAT_ptr) & 0x0F);
 8019f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f7e:	781b      	ldrb	r3, [r3, #0]
 8019f80:	f003 030f 	and.w	r3, r3, #15
 8019f84:	627b      	str	r3, [r7, #36]	; 0x24
                        *FAT_ptr =  (UCHAR)(temp | ((next_cluster << 4) & 0xF0));
 8019f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f88:	b2da      	uxtb	r2, r3
 8019f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019f8c:	b2db      	uxtb	r3, r3
 8019f8e:	011b      	lsls	r3, r3, #4
 8019f90:	b2db      	uxtb	r3, r3
 8019f92:	4313      	orrs	r3, r2
 8019f94:	b2db      	uxtb	r3, r3
 8019f96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019f98:	7013      	strb	r3, [r2, #0]

                        /* Determine if this is a mulit-sector entry.  */
                        if ((multi_sector_entry) == (INT)i)
 8019f9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019f9c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8019f9e:	429a      	cmp	r2, r3
 8019fa0:	d029      	beq.n	8019ff6 <_fx_utility_FAT_flush+0x25c>
                            /* Yes, requires multiple sector - will write rest of the part later.  */
                            continue;
                        }

                        /* Move to the next byte of the FAT entry.  */
                        FAT_ptr++;
 8019fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019fa4:	3301      	adds	r3, #1
 8019fa6:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Store the upper 8 bits of the FAT entry.  */
                        *FAT_ptr =  (UCHAR)((next_cluster >> 4) & 0xFF);
 8019fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019faa:	091b      	lsrs	r3, r3, #4
 8019fac:	b2db      	uxtb	r3, r3
 8019fae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019fb0:	7013      	strb	r3, [r2, #0]
 8019fb2:	e023      	b.n	8019ffc <_fx_utility_FAT_flush+0x262>
                    {

                        /* Even cluster number.  */

                        /* Store the lower byte of the FAT entry.  */
                        *FAT_ptr =  (UCHAR)(next_cluster & 0xFF);
 8019fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019fb6:	b2db      	uxtb	r3, r3
 8019fb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019fba:	7013      	strb	r3, [r2, #0]

                        /* Determine if this is a mulit-sector entry.  */
                        if ((multi_sector_entry) == (INT)i)
 8019fbc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019fbe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8019fc0:	429a      	cmp	r2, r3
 8019fc2:	d01a      	beq.n	8019ffa <_fx_utility_FAT_flush+0x260>
                            /* Yes, requires multiple sector - will write rest of the part later.  */
                            continue;
                        }

                        /* Move to the next nibble of the FAT entry.  */
                        FAT_ptr++;
 8019fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019fc6:	3301      	adds	r3, #1
 8019fc8:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Store the upper 4 bits of the FAT entry.  */
                        temp =  ((UINT)*FAT_ptr) & 0xF0;
 8019fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019fcc:	781b      	ldrb	r3, [r3, #0]
 8019fce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8019fd2:	627b      	str	r3, [r7, #36]	; 0x24
                        *FAT_ptr =  (UCHAR)(temp | ((next_cluster >> 8) & 0xF));
 8019fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019fd6:	b2da      	uxtb	r2, r3
 8019fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019fda:	0a1b      	lsrs	r3, r3, #8
 8019fdc:	b2db      	uxtb	r3, r3
 8019fde:	f003 030f 	and.w	r3, r3, #15
 8019fe2:	b2db      	uxtb	r3, r3
 8019fe4:	4313      	orrs	r3, r2
 8019fe6:	b2db      	uxtb	r3, r3
 8019fe8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019fea:	7013      	strb	r3, [r2, #0]
 8019fec:	e006      	b.n	8019ffc <_fx_utility_FAT_flush+0x262>
                        continue;
 8019fee:	bf00      	nop
 8019ff0:	e004      	b.n	8019ffc <_fx_utility_FAT_flush+0x262>
                        continue;
 8019ff2:	bf00      	nop
 8019ff4:	e002      	b.n	8019ffc <_fx_utility_FAT_flush+0x262>
                            continue;
 8019ff6:	bf00      	nop
 8019ff8:	e000      	b.n	8019ffc <_fx_utility_FAT_flush+0x262>
                            continue;
 8019ffa:	bf00      	nop
                for (i = index; i < FX_MAX_FAT_CACHE; i++)
 8019ffc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019ffe:	3301      	adds	r3, #1
 801a000:	653b      	str	r3, [r7, #80]	; 0x50
 801a002:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a004:	2b0f      	cmp	r3, #15
 801a006:	f67f af5b 	bls.w	8019ec0 <_fx_utility_FAT_flush+0x126>
                    }
                }

                /* First, write out the current sector. */
                status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) FAT_sector,
 801a00a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a00c:	2200      	movs	r2, #0
 801a00e:	4698      	mov	r8, r3
 801a010:	4691      	mov	r9, r2
                                                           media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 801a012:	69fb      	ldr	r3, [r7, #28]
 801a014:	689a      	ldr	r2, [r3, #8]
                status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) FAT_sector,
 801a016:	2302      	movs	r3, #2
 801a018:	9302      	str	r3, [sp, #8]
 801a01a:	2301      	movs	r3, #1
 801a01c:	9301      	str	r3, [sp, #4]
 801a01e:	9200      	str	r2, [sp, #0]
 801a020:	4642      	mov	r2, r8
 801a022:	464b      	mov	r3, r9
 801a024:	69f8      	ldr	r0, [r7, #28]
 801a026:	f001 fa3d 	bl	801b4a4 <_fx_utility_logical_sector_write>
 801a02a:	63b8      	str	r0, [r7, #56]	; 0x38
                /* Determine if an error occurred.  */
                if (status != FX_SUCCESS)
 801a02c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a02e:	2b00      	cmp	r3, #0
 801a030:	d001      	beq.n	801a036 <_fx_utility_FAT_flush+0x29c>
                {

                    /* Return the error status.  */
                    return(status);
 801a032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a034:	e1fd      	b.n	801a432 <_fx_utility_FAT_flush+0x698>
                }

                /* Mark the FAT sector update bit map to indicate this sector has been written.  */
                if (media_ptr -> fx_media_sectors_per_FAT % (FX_FAT_MAP_SIZE << 3) == 0)
 801a036:	69fb      	ldr	r3, [r7, #28]
 801a038:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801a03a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801a03e:	2b00      	cmp	r3, #0
 801a040:	d105      	bne.n	801a04e <_fx_utility_FAT_flush+0x2b4>
                {
                    sectors_per_bit =  (UCHAR)((UINT)media_ptr -> fx_media_sectors_per_FAT / (FX_FAT_MAP_SIZE << 3));
 801a042:	69fb      	ldr	r3, [r7, #28]
 801a044:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801a046:	0a9b      	lsrs	r3, r3, #10
 801a048:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 801a04c:	e006      	b.n	801a05c <_fx_utility_FAT_flush+0x2c2>
                }
                else
                {
                    sectors_per_bit =  (UCHAR)((UINT)media_ptr -> fx_media_sectors_per_FAT / (FX_FAT_MAP_SIZE << 3) + 1);
 801a04e:	69fb      	ldr	r3, [r7, #28]
 801a050:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801a052:	0a9b      	lsrs	r3, r3, #10
 801a054:	b2db      	uxtb	r3, r3
 801a056:	3301      	adds	r3, #1
 801a058:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
                }

                /* Check for invalid value.  */
                if (sectors_per_bit == 0)
 801a05c:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 801a060:	2b00      	cmp	r3, #0
 801a062:	d101      	bne.n	801a068 <_fx_utility_FAT_flush+0x2ce>
                {

                    /* Invalid media, return error.  */
                    return(FX_MEDIA_INVALID);
 801a064:	2302      	movs	r3, #2
 801a066:	e1e4      	b.n	801a432 <_fx_utility_FAT_flush+0x698>
                }

                ind = ((FAT_sector - media_ptr -> fx_media_reserved_sectors) / sectors_per_bit) >> 3;
 801a068:	69fb      	ldr	r3, [r7, #28]
 801a06a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a06c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801a06e:	1ad2      	subs	r2, r2, r3
 801a070:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 801a074:	fbb2 f3f3 	udiv	r3, r2, r3
 801a078:	08db      	lsrs	r3, r3, #3
 801a07a:	637b      	str	r3, [r7, #52]	; 0x34
                media_ptr -> fx_media_fat_secondary_update_map[ind] = 
                    (UCHAR)((INT)media_ptr -> fx_media_fat_secondary_update_map[ind]
 801a07c:	69fa      	ldr	r2, [r7, #28]
 801a07e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a080:	4413      	add	r3, r2
 801a082:	f603 0318 	addw	r3, r3, #2072	; 0x818
 801a086:	781b      	ldrb	r3, [r3, #0]
 801a088:	b259      	sxtb	r1, r3
                    | (1 <<(((FAT_sector - media_ptr -> fx_media_reserved_sectors) / sectors_per_bit) & 7)));
 801a08a:	69fb      	ldr	r3, [r7, #28]
 801a08c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801a08e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a090:	1a9a      	subs	r2, r3, r2
 801a092:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 801a096:	fbb2 f3f3 	udiv	r3, r2, r3
 801a09a:	f003 0207 	and.w	r2, r3, #7
 801a09e:	2301      	movs	r3, #1
 801a0a0:	4093      	lsls	r3, r2
 801a0a2:	b25b      	sxtb	r3, r3
 801a0a4:	430b      	orrs	r3, r1
 801a0a6:	b25b      	sxtb	r3, r3
                    (UCHAR)((INT)media_ptr -> fx_media_fat_secondary_update_map[ind]
 801a0a8:	b2d9      	uxtb	r1, r3
                media_ptr -> fx_media_fat_secondary_update_map[ind] = 
 801a0aa:	69fa      	ldr	r2, [r7, #28]
 801a0ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a0ae:	4413      	add	r3, r2
 801a0b0:	f603 0218 	addw	r2, r3, #2072	; 0x818
 801a0b4:	460b      	mov	r3, r1
 801a0b6:	7013      	strb	r3, [r2, #0]

                /* Determine if the multi-sector flag is set.  */
                if (multi_sector_entry != -1)
 801a0b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a0ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a0be:	f000 81af 	beq.w	801a420 <_fx_utility_FAT_flush+0x686>
                {

                    /* Yes, position to the next sector and read it in.  */
                    FAT_sector++;
 801a0c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a0c4:	3301      	adds	r3, #1
 801a0c6:	657b      	str	r3, [r7, #84]	; 0x54
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 801a0c8:	e6a5      	b.n	8019e16 <_fx_utility_FAT_flush+0x7c>
            }
        }
#ifdef FX_ENABLE_EXFAT
        else if (media_ptr -> fx_media_FAT_type == FX_FAT16)
#else
        else if (!media_ptr -> fx_media_32_bit_FAT)
 801a0ca:	69fb      	ldr	r3, [r7, #28]
 801a0cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801a0ce:	2b00      	cmp	r3, #0
 801a0d0:	f040 80d2 	bne.w	801a278 <_fx_utility_FAT_flush+0x4de>
        {

            /* 16-bit FAT is present.  */

            /* Calculate the byte offset to the cluster entry.  */
            byte_offset =  (((ULONG)cluster) << 1);
 801a0d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a0d6:	005b      	lsls	r3, r3, #1
 801a0d8:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Calculate the FAT sector the requested FAT entry resides in.  */
            FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 801a0da:	69fb      	ldr	r3, [r7, #28]
 801a0dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a0de:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801a0e0:	fbb2 f2f3 	udiv	r2, r2, r3
                (ULONG)media_ptr -> fx_media_reserved_sectors;
 801a0e4:	69fb      	ldr	r3, [r7, #28]
 801a0e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 801a0e8:	4413      	add	r3, r2
 801a0ea:	657b      	str	r3, [r7, #84]	; 0x54

            /* Read the FAT sector.  */
            status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 801a0ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a0ee:	2200      	movs	r2, #0
 801a0f0:	469a      	mov	sl, r3
 801a0f2:	4693      	mov	fp, r2
                                                      media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 801a0f4:	69fb      	ldr	r3, [r7, #28]
 801a0f6:	689a      	ldr	r2, [r3, #8]
            status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 801a0f8:	2302      	movs	r3, #2
 801a0fa:	9302      	str	r3, [sp, #8]
 801a0fc:	2301      	movs	r3, #1
 801a0fe:	9301      	str	r3, [sp, #4]
 801a100:	9200      	str	r2, [sp, #0]
 801a102:	4652      	mov	r2, sl
 801a104:	465b      	mov	r3, fp
 801a106:	69f8      	ldr	r0, [r7, #28]
 801a108:	f000 ff38 	bl	801af7c <_fx_utility_logical_sector_read>
 801a10c:	63b8      	str	r0, [r7, #56]	; 0x38

            /* Determine if an error occurred.  */
            if (status != FX_SUCCESS)
 801a10e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a110:	2b00      	cmp	r3, #0
 801a112:	d001      	beq.n	801a118 <_fx_utility_FAT_flush+0x37e>
            {

                /* Return the error status.  */
                return(status);
 801a114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a116:	e18c      	b.n	801a432 <_fx_utility_FAT_flush+0x698>
            }

            /* Loop through the remainder of the cache to check for multiple entries
               within the same FAT sector being written out.  */
            for (i = index; i < FX_MAX_FAT_CACHE; i++)
 801a118:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a11a:	653b      	str	r3, [r7, #80]	; 0x50
 801a11c:	e057      	b.n	801a1ce <_fx_utility_FAT_flush+0x434>
            {

                /* Determine if the entry is dirty.  */
                if (media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty == 0)
 801a11e:	69f9      	ldr	r1, [r7, #28]
 801a120:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801a122:	4613      	mov	r3, r2
 801a124:	005b      	lsls	r3, r3, #1
 801a126:	4413      	add	r3, r2
 801a128:	009b      	lsls	r3, r3, #2
 801a12a:	440b      	add	r3, r1
 801a12c:	f503 63ec 	add.w	r3, r3, #1888	; 0x760
 801a130:	681b      	ldr	r3, [r3, #0]
 801a132:	2b00      	cmp	r3, #0
 801a134:	d045      	beq.n	801a1c2 <_fx_utility_FAT_flush+0x428>
                    /* Not dirty, does not need to be flushed.  */
                    continue;
                }

                /* Isolate the cluster.  */
                cluster = (media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_cluster);
 801a136:	69f9      	ldr	r1, [r7, #28]
 801a138:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801a13a:	4613      	mov	r3, r2
 801a13c:	005b      	lsls	r3, r3, #1
 801a13e:	4413      	add	r3, r2
 801a140:	009b      	lsls	r3, r3, #2
 801a142:	440b      	add	r3, r1
 801a144:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 801a148:	681b      	ldr	r3, [r3, #0]
 801a14a:	643b      	str	r3, [r7, #64]	; 0x40

                /* Calculate the byte offset to the cluster entry.  */
                byte_offset =  (((ULONG)cluster) * 2);
 801a14c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a14e:	005b      	lsls	r3, r3, #1
 801a150:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* Pickup the sector.  */
                sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 801a152:	69fb      	ldr	r3, [r7, #28]
 801a154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a156:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801a158:	fbb2 f2f3 	udiv	r2, r2, r3
                    (ULONG)media_ptr -> fx_media_reserved_sectors;
 801a15c:	69fb      	ldr	r3, [r7, #28]
 801a15e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 801a160:	4413      	add	r3, r2
 801a162:	633b      	str	r3, [r7, #48]	; 0x30

                /* Is it the current FAT sector?  */
                if (sector != FAT_sector)
 801a164:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a166:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a168:	429a      	cmp	r2, r3
 801a16a:	d12c      	bne.n	801a1c6 <_fx_utility_FAT_flush+0x42c>
                    continue;
                }

                /* Now calculate the byte offset into this FAT sector.  */
                byte_offset =  byte_offset -
                    ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 801a16c:	69fb      	ldr	r3, [r7, #28]
 801a16e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a170:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801a172:	1ad2      	subs	r2, r2, r3
                     media_ptr -> fx_media_bytes_per_sector);
 801a174:	69fb      	ldr	r3, [r7, #28]
 801a176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                    ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 801a178:	fb02 f303 	mul.w	r3, r2, r3
                byte_offset =  byte_offset -
 801a17c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801a17e:	1ad3      	subs	r3, r2, r3
 801a180:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* Setup a pointer into the buffer.  */
                FAT_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer + (UINT)byte_offset;
 801a182:	69fb      	ldr	r3, [r7, #28]
 801a184:	689a      	ldr	r2, [r3, #8]
 801a186:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a188:	4413      	add	r3, r2
 801a18a:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Pickup new value for this FAT entry.  */
                next_cluster =  media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_value;
 801a18c:	69f9      	ldr	r1, [r7, #28]
 801a18e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801a190:	4613      	mov	r3, r2
 801a192:	005b      	lsls	r3, r3, #1
 801a194:	4413      	add	r3, r2
 801a196:	009b      	lsls	r3, r3, #2
 801a198:	440b      	add	r3, r1
 801a19a:	f203 735c 	addw	r3, r3, #1884	; 0x75c
 801a19e:	681b      	ldr	r3, [r3, #0]
 801a1a0:	62bb      	str	r3, [r7, #40]	; 0x28

                /* Store the FAT entry.  */
                _fx_utility_16_unsigned_write(FAT_ptr, (UINT)next_cluster);
 801a1a2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801a1a4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801a1a6:	f7ff fa88 	bl	80196ba <_fx_utility_16_unsigned_write>

                /* Clear the dirty flag.  */
                media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty = 0;
 801a1aa:	69f9      	ldr	r1, [r7, #28]
 801a1ac:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801a1ae:	4613      	mov	r3, r2
 801a1b0:	005b      	lsls	r3, r3, #1
 801a1b2:	4413      	add	r3, r2
 801a1b4:	009b      	lsls	r3, r3, #2
 801a1b6:	440b      	add	r3, r1
 801a1b8:	f503 63ec 	add.w	r3, r3, #1888	; 0x760
 801a1bc:	2200      	movs	r2, #0
 801a1be:	601a      	str	r2, [r3, #0]
 801a1c0:	e002      	b.n	801a1c8 <_fx_utility_FAT_flush+0x42e>
                    continue;
 801a1c2:	bf00      	nop
 801a1c4:	e000      	b.n	801a1c8 <_fx_utility_FAT_flush+0x42e>
                    continue;
 801a1c6:	bf00      	nop
            for (i = index; i < FX_MAX_FAT_CACHE; i++)
 801a1c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a1ca:	3301      	adds	r3, #1
 801a1cc:	653b      	str	r3, [r7, #80]	; 0x50
 801a1ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a1d0:	2b0f      	cmp	r3, #15
 801a1d2:	d9a4      	bls.n	801a11e <_fx_utility_FAT_flush+0x384>
            }

            /* Write the last written FAT sector out.  */
            status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) FAT_sector,
 801a1d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a1d6:	2200      	movs	r2, #0
 801a1d8:	613b      	str	r3, [r7, #16]
 801a1da:	617a      	str	r2, [r7, #20]
                                                       media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 801a1dc:	69fb      	ldr	r3, [r7, #28]
 801a1de:	689a      	ldr	r2, [r3, #8]
            status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) FAT_sector,
 801a1e0:	2302      	movs	r3, #2
 801a1e2:	9302      	str	r3, [sp, #8]
 801a1e4:	2301      	movs	r3, #1
 801a1e6:	9301      	str	r3, [sp, #4]
 801a1e8:	9200      	str	r2, [sp, #0]
 801a1ea:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801a1ee:	69f8      	ldr	r0, [r7, #28]
 801a1f0:	f001 f958 	bl	801b4a4 <_fx_utility_logical_sector_write>
 801a1f4:	63b8      	str	r0, [r7, #56]	; 0x38

            /* Determine if an error occurred.  */
            if (status != FX_SUCCESS)
 801a1f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a1f8:	2b00      	cmp	r3, #0
 801a1fa:	d001      	beq.n	801a200 <_fx_utility_FAT_flush+0x466>
            {
                /* Return the error status.  */
                return(status);
 801a1fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a1fe:	e118      	b.n	801a432 <_fx_utility_FAT_flush+0x698>
            }

            /* Mark the FAT sector update bit map to indicate this sector has been
               written.  */
            if (media_ptr -> fx_media_sectors_per_FAT % (FX_FAT_MAP_SIZE << 3) == 0)
 801a200:	69fb      	ldr	r3, [r7, #28]
 801a202:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801a204:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801a208:	2b00      	cmp	r3, #0
 801a20a:	d105      	bne.n	801a218 <_fx_utility_FAT_flush+0x47e>
            {
                sectors_per_bit =  (UCHAR)(media_ptr -> fx_media_sectors_per_FAT / (FX_FAT_MAP_SIZE << 3));
 801a20c:	69fb      	ldr	r3, [r7, #28]
 801a20e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801a210:	0a9b      	lsrs	r3, r3, #10
 801a212:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 801a216:	e006      	b.n	801a226 <_fx_utility_FAT_flush+0x48c>
            }
            else
            {
                sectors_per_bit =  (UCHAR)((media_ptr -> fx_media_sectors_per_FAT / (FX_FAT_MAP_SIZE << 3)) + 1);
 801a218:	69fb      	ldr	r3, [r7, #28]
 801a21a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801a21c:	0a9b      	lsrs	r3, r3, #10
 801a21e:	b2db      	uxtb	r3, r3
 801a220:	3301      	adds	r3, #1
 801a222:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
            }
            ind = ((FAT_sector - media_ptr -> fx_media_reserved_sectors) / sectors_per_bit) >> 3;
 801a226:	69fb      	ldr	r3, [r7, #28]
 801a228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a22a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801a22c:	1ad2      	subs	r2, r2, r3
 801a22e:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 801a232:	fbb2 f3f3 	udiv	r3, r2, r3
 801a236:	08db      	lsrs	r3, r3, #3
 801a238:	637b      	str	r3, [r7, #52]	; 0x34
            media_ptr -> fx_media_fat_secondary_update_map[ind] = 
                (UCHAR)((INT)media_ptr -> fx_media_fat_secondary_update_map[ind]
 801a23a:	69fa      	ldr	r2, [r7, #28]
 801a23c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a23e:	4413      	add	r3, r2
 801a240:	f603 0318 	addw	r3, r3, #2072	; 0x818
 801a244:	781b      	ldrb	r3, [r3, #0]
 801a246:	b259      	sxtb	r1, r3
                | (1 <<(((FAT_sector - media_ptr -> fx_media_reserved_sectors) / sectors_per_bit) & 7)));
 801a248:	69fb      	ldr	r3, [r7, #28]
 801a24a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801a24c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a24e:	1a9a      	subs	r2, r3, r2
 801a250:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 801a254:	fbb2 f3f3 	udiv	r3, r2, r3
 801a258:	f003 0207 	and.w	r2, r3, #7
 801a25c:	2301      	movs	r3, #1
 801a25e:	4093      	lsls	r3, r2
 801a260:	b25b      	sxtb	r3, r3
 801a262:	430b      	orrs	r3, r1
 801a264:	b25b      	sxtb	r3, r3
                (UCHAR)((INT)media_ptr -> fx_media_fat_secondary_update_map[ind]
 801a266:	b2d9      	uxtb	r1, r3
            media_ptr -> fx_media_fat_secondary_update_map[ind] = 
 801a268:	69fa      	ldr	r2, [r7, #28]
 801a26a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a26c:	4413      	add	r3, r2
 801a26e:	f603 0218 	addw	r2, r3, #2072	; 0x818
 801a272:	460b      	mov	r3, r1
 801a274:	7013      	strb	r3, [r2, #0]
 801a276:	e0d4      	b.n	801a422 <_fx_utility_FAT_flush+0x688>
        {

            /* 32-bit FAT or exFAT are present.  */

            /* Calculate the byte offset to the cluster entry.  */
            byte_offset =  (((ULONG)cluster) * 4);
 801a278:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a27a:	009b      	lsls	r3, r3, #2
 801a27c:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Calculate the FAT sector the requested FAT entry resides in.  */
            FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 801a27e:	69fb      	ldr	r3, [r7, #28]
 801a280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a282:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801a284:	fbb2 f2f3 	udiv	r2, r2, r3
                (ULONG)media_ptr -> fx_media_reserved_sectors;
 801a288:	69fb      	ldr	r3, [r7, #28]
 801a28a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 801a28c:	4413      	add	r3, r2
 801a28e:	657b      	str	r3, [r7, #84]	; 0x54

            /* Read the FAT sector.  */
            status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 801a290:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a292:	2200      	movs	r2, #0
 801a294:	60bb      	str	r3, [r7, #8]
 801a296:	60fa      	str	r2, [r7, #12]
                                                      media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 801a298:	69fb      	ldr	r3, [r7, #28]
 801a29a:	689a      	ldr	r2, [r3, #8]
            status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 801a29c:	2302      	movs	r3, #2
 801a29e:	9302      	str	r3, [sp, #8]
 801a2a0:	2301      	movs	r3, #1
 801a2a2:	9301      	str	r3, [sp, #4]
 801a2a4:	9200      	str	r2, [sp, #0]
 801a2a6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801a2aa:	69f8      	ldr	r0, [r7, #28]
 801a2ac:	f000 fe66 	bl	801af7c <_fx_utility_logical_sector_read>
 801a2b0:	63b8      	str	r0, [r7, #56]	; 0x38

            /* Determine if an error occurred.  */
            if (status != FX_SUCCESS)
 801a2b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a2b4:	2b00      	cmp	r3, #0
 801a2b6:	d001      	beq.n	801a2bc <_fx_utility_FAT_flush+0x522>
            {

                /* Return the error status.  */
                return(status);
 801a2b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a2ba:	e0ba      	b.n	801a432 <_fx_utility_FAT_flush+0x698>
            }

            /* Loop through the remainder of the cache to check for multiple entries
               within the same FAT sector being written out.  */
            for (i = index; i < FX_MAX_FAT_CACHE; i++)
 801a2bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a2be:	653b      	str	r3, [r7, #80]	; 0x50
 801a2c0:	e057      	b.n	801a372 <_fx_utility_FAT_flush+0x5d8>
            {

                /* Determine if the entry is dirty.  */
                if (media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty == 0)
 801a2c2:	69f9      	ldr	r1, [r7, #28]
 801a2c4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801a2c6:	4613      	mov	r3, r2
 801a2c8:	005b      	lsls	r3, r3, #1
 801a2ca:	4413      	add	r3, r2
 801a2cc:	009b      	lsls	r3, r3, #2
 801a2ce:	440b      	add	r3, r1
 801a2d0:	f503 63ec 	add.w	r3, r3, #1888	; 0x760
 801a2d4:	681b      	ldr	r3, [r3, #0]
 801a2d6:	2b00      	cmp	r3, #0
 801a2d8:	d045      	beq.n	801a366 <_fx_utility_FAT_flush+0x5cc>
                    /* Not dirty, does not need to be flushed.  */
                    continue;
                }

                /* Isolate the cluster.  */
                cluster = (media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_cluster);
 801a2da:	69f9      	ldr	r1, [r7, #28]
 801a2dc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801a2de:	4613      	mov	r3, r2
 801a2e0:	005b      	lsls	r3, r3, #1
 801a2e2:	4413      	add	r3, r2
 801a2e4:	009b      	lsls	r3, r3, #2
 801a2e6:	440b      	add	r3, r1
 801a2e8:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 801a2ec:	681b      	ldr	r3, [r3, #0]
 801a2ee:	643b      	str	r3, [r7, #64]	; 0x40

                /* Calculate the byte offset to the cluster entry.  */
                byte_offset =  (((ULONG)cluster) * 4);
 801a2f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a2f2:	009b      	lsls	r3, r3, #2
 801a2f4:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* Pickup the sector.  */
                sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 801a2f6:	69fb      	ldr	r3, [r7, #28]
 801a2f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a2fa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801a2fc:	fbb2 f2f3 	udiv	r2, r2, r3
                    (ULONG)media_ptr -> fx_media_reserved_sectors;
 801a300:	69fb      	ldr	r3, [r7, #28]
 801a302:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 801a304:	4413      	add	r3, r2
 801a306:	633b      	str	r3, [r7, #48]	; 0x30

                /* Is it the current FAT sector?  */
                if (sector != FAT_sector)
 801a308:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a30a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a30c:	429a      	cmp	r2, r3
 801a30e:	d12c      	bne.n	801a36a <_fx_utility_FAT_flush+0x5d0>
                    continue;
                }

                /* Now calculate the byte offset into this FAT sector.  */
                byte_offset =  byte_offset -
                    ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 801a310:	69fb      	ldr	r3, [r7, #28]
 801a312:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a314:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801a316:	1ad2      	subs	r2, r2, r3
                     media_ptr -> fx_media_bytes_per_sector);
 801a318:	69fb      	ldr	r3, [r7, #28]
 801a31a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                    ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 801a31c:	fb02 f303 	mul.w	r3, r2, r3
                byte_offset =  byte_offset -
 801a320:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801a322:	1ad3      	subs	r3, r2, r3
 801a324:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* Setup a pointer into the buffer.  */
                FAT_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer + (UINT)byte_offset;
 801a326:	69fb      	ldr	r3, [r7, #28]
 801a328:	689a      	ldr	r2, [r3, #8]
 801a32a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a32c:	4413      	add	r3, r2
 801a32e:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Pickup new value for this FAT entry.  */
                next_cluster =  media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_value;
 801a330:	69f9      	ldr	r1, [r7, #28]
 801a332:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801a334:	4613      	mov	r3, r2
 801a336:	005b      	lsls	r3, r3, #1
 801a338:	4413      	add	r3, r2
 801a33a:	009b      	lsls	r3, r3, #2
 801a33c:	440b      	add	r3, r1
 801a33e:	f203 735c 	addw	r3, r3, #1884	; 0x75c
 801a342:	681b      	ldr	r3, [r3, #0]
 801a344:	62bb      	str	r3, [r7, #40]	; 0x28

                /* Store the FAT entry.  */
                _fx_utility_32_unsigned_write(FAT_ptr, next_cluster);
 801a346:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801a348:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801a34a:	f7ff f9e8 	bl	801971e <_fx_utility_32_unsigned_write>

                /* Clear the dirty flag.  */
                media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty = 0;
 801a34e:	69f9      	ldr	r1, [r7, #28]
 801a350:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801a352:	4613      	mov	r3, r2
 801a354:	005b      	lsls	r3, r3, #1
 801a356:	4413      	add	r3, r2
 801a358:	009b      	lsls	r3, r3, #2
 801a35a:	440b      	add	r3, r1
 801a35c:	f503 63ec 	add.w	r3, r3, #1888	; 0x760
 801a360:	2200      	movs	r2, #0
 801a362:	601a      	str	r2, [r3, #0]
 801a364:	e002      	b.n	801a36c <_fx_utility_FAT_flush+0x5d2>
                    continue;
 801a366:	bf00      	nop
 801a368:	e000      	b.n	801a36c <_fx_utility_FAT_flush+0x5d2>
                    continue;
 801a36a:	bf00      	nop
            for (i = index; i < FX_MAX_FAT_CACHE; i++)
 801a36c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a36e:	3301      	adds	r3, #1
 801a370:	653b      	str	r3, [r7, #80]	; 0x50
 801a372:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a374:	2b0f      	cmp	r3, #15
 801a376:	d9a4      	bls.n	801a2c2 <_fx_utility_FAT_flush+0x528>
            }

            /* Write the last written FAT sector out.  */
            status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) FAT_sector,
 801a378:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a37a:	2200      	movs	r2, #0
 801a37c:	603b      	str	r3, [r7, #0]
 801a37e:	607a      	str	r2, [r7, #4]
                                                       media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 801a380:	69fb      	ldr	r3, [r7, #28]
 801a382:	689a      	ldr	r2, [r3, #8]
            status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) FAT_sector,
 801a384:	2302      	movs	r3, #2
 801a386:	9302      	str	r3, [sp, #8]
 801a388:	2301      	movs	r3, #1
 801a38a:	9301      	str	r3, [sp, #4]
 801a38c:	9200      	str	r2, [sp, #0]
 801a38e:	e9d7 2300 	ldrd	r2, r3, [r7]
 801a392:	69f8      	ldr	r0, [r7, #28]
 801a394:	f001 f886 	bl	801b4a4 <_fx_utility_logical_sector_write>
 801a398:	63b8      	str	r0, [r7, #56]	; 0x38

            /* Determine if an error occurred.  */
            if (status != FX_SUCCESS)
 801a39a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a39c:	2b00      	cmp	r3, #0
 801a39e:	d001      	beq.n	801a3a4 <_fx_utility_FAT_flush+0x60a>
            {

                /* Return the error status.  */
                return(status);
 801a3a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a3a2:	e046      	b.n	801a432 <_fx_utility_FAT_flush+0x698>
            {
#endif /* FX_ENABLE_EXFAT */

                /* Mark the FAT sector update bit map to indicate this sector has been
                   written.  */
                if (media_ptr -> fx_media_sectors_per_FAT % (FX_FAT_MAP_SIZE << 3) == 0)
 801a3a4:	69fb      	ldr	r3, [r7, #28]
 801a3a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801a3a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801a3ac:	2b00      	cmp	r3, #0
 801a3ae:	d105      	bne.n	801a3bc <_fx_utility_FAT_flush+0x622>
                {
                    sectors_per_bit =  (UCHAR)(media_ptr -> fx_media_sectors_per_FAT / (FX_FAT_MAP_SIZE << 3));
 801a3b0:	69fb      	ldr	r3, [r7, #28]
 801a3b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801a3b4:	0a9b      	lsrs	r3, r3, #10
 801a3b6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 801a3ba:	e006      	b.n	801a3ca <_fx_utility_FAT_flush+0x630>
                }
                else
                {
                    sectors_per_bit =  (UCHAR)((media_ptr -> fx_media_sectors_per_FAT / (FX_FAT_MAP_SIZE << 3)) + 1);
 801a3bc:	69fb      	ldr	r3, [r7, #28]
 801a3be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801a3c0:	0a9b      	lsrs	r3, r3, #10
 801a3c2:	b2db      	uxtb	r3, r3
 801a3c4:	3301      	adds	r3, #1
 801a3c6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
                }
                ind = ((FAT_sector - media_ptr -> fx_media_reserved_sectors) / sectors_per_bit) >> 3;
 801a3ca:	69fb      	ldr	r3, [r7, #28]
 801a3cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a3ce:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801a3d0:	1ad2      	subs	r2, r2, r3
 801a3d2:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 801a3d6:	fbb2 f3f3 	udiv	r3, r2, r3
 801a3da:	08db      	lsrs	r3, r3, #3
 801a3dc:	637b      	str	r3, [r7, #52]	; 0x34
                media_ptr -> fx_media_fat_secondary_update_map[ind] = 
                    (UCHAR)((INT)media_ptr -> fx_media_fat_secondary_update_map[ind]
 801a3de:	69fa      	ldr	r2, [r7, #28]
 801a3e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a3e2:	4413      	add	r3, r2
 801a3e4:	f603 0318 	addw	r3, r3, #2072	; 0x818
 801a3e8:	781b      	ldrb	r3, [r3, #0]
 801a3ea:	b259      	sxtb	r1, r3
                    | (1 <<(((FAT_sector - media_ptr -> fx_media_reserved_sectors) / sectors_per_bit) & 7)));
 801a3ec:	69fb      	ldr	r3, [r7, #28]
 801a3ee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801a3f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a3f2:	1a9a      	subs	r2, r3, r2
 801a3f4:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 801a3f8:	fbb2 f3f3 	udiv	r3, r2, r3
 801a3fc:	f003 0207 	and.w	r2, r3, #7
 801a400:	2301      	movs	r3, #1
 801a402:	4093      	lsls	r3, r2
 801a404:	b25b      	sxtb	r3, r3
 801a406:	430b      	orrs	r3, r1
 801a408:	b25b      	sxtb	r3, r3
                    (UCHAR)((INT)media_ptr -> fx_media_fat_secondary_update_map[ind]
 801a40a:	b2d9      	uxtb	r1, r3
                media_ptr -> fx_media_fat_secondary_update_map[ind] = 
 801a40c:	69fa      	ldr	r2, [r7, #28]
 801a40e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a410:	4413      	add	r3, r2
 801a412:	f603 0218 	addw	r2, r3, #2072	; 0x818
 801a416:	460b      	mov	r3, r1
 801a418:	7013      	strb	r3, [r2, #0]
 801a41a:	e002      	b.n	801a422 <_fx_utility_FAT_flush+0x688>
            continue;
 801a41c:	bf00      	nop
 801a41e:	e000      	b.n	801a422 <_fx_utility_FAT_flush+0x688>
                    break;
 801a420:	bf00      	nop
    for (index = 0; index < FX_MAX_FAT_CACHE; index++)
 801a422:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a424:	3301      	adds	r3, #1
 801a426:	64fb      	str	r3, [r7, #76]	; 0x4c
 801a428:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a42a:	2b0f      	cmp	r3, #15
 801a42c:	f67f acc4 	bls.w	8019db8 <_fx_utility_FAT_flush+0x1e>
        media_ptr -> fx_media_fault_tolerant_cached_FAT_sector = 0;
    }
#endif /* FX_ENABLE_FAULT_TOLERANT */

    /* Return successful status.  */
    return(FX_SUCCESS);
 801a430:	2300      	movs	r3, #0
}
 801a432:	4618      	mov	r0, r3
 801a434:	3758      	adds	r7, #88	; 0x58
 801a436:	46bd      	mov	sp, r7
 801a438:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0801a43c <_fx_utility_FAT_map_flush>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fx_utility_FAT_map_flush(FX_MEDIA *media_ptr)
{
 801a43c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801a440:	b092      	sub	sp, #72	; 0x48
 801a442:	af04      	add	r7, sp, #16
 801a444:	61f8      	str	r0, [r7, #28]
       or more primary FAT sectors. Because of this, it is possible some FAT sectors that
       were not changed may get flushed out to the secondary FAT.  However, this method
       provides very nice performance benefits during normal operation and is much more
       reasonable than performing a total copy of the primary FAT to each secondary FAT
       on media flush and media close.  */
    if (media_ptr -> fx_media_sectors_per_FAT % (FX_FAT_MAP_SIZE << 3) == 0)
 801a446:	69fb      	ldr	r3, [r7, #28]
 801a448:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801a44a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801a44e:	2b00      	cmp	r3, #0
 801a450:	d105      	bne.n	801a45e <_fx_utility_FAT_map_flush+0x22>
    {
        sectors_per_bit =  (UCHAR)(media_ptr -> fx_media_sectors_per_FAT / (FX_FAT_MAP_SIZE << 3));
 801a452:	69fb      	ldr	r3, [r7, #28]
 801a454:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801a456:	0a9b      	lsrs	r3, r3, #10
 801a458:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801a45c:	e006      	b.n	801a46c <_fx_utility_FAT_map_flush+0x30>
    }
    else
    {
        sectors_per_bit =  (UCHAR)(media_ptr -> fx_media_sectors_per_FAT / (FX_FAT_MAP_SIZE << 3) + 1);
 801a45e:	69fb      	ldr	r3, [r7, #28]
 801a460:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801a462:	0a9b      	lsrs	r3, r3, #10
 801a464:	b2db      	uxtb	r3, r3
 801a466:	3301      	adds	r3, #1
 801a468:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* Loop through the FAT update map to mirror primary FAT sectors to secondary FAT(s).  */
    for (i = 0; i < FX_FAT_MAP_SIZE << 3; i++)
 801a46c:	2300      	movs	r3, #0
 801a46e:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a470:	e089      	b.n	801a586 <_fx_utility_FAT_map_flush+0x14a>
    {

        /* Determine if there are FAT changes specified by this entry.  */
        if ((media_ptr -> fx_media_fat_secondary_update_map[i >> 3] & (1 << (i & 7))) == 0)
 801a472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a474:	08db      	lsrs	r3, r3, #3
 801a476:	69fa      	ldr	r2, [r7, #28]
 801a478:	4413      	add	r3, r2
 801a47a:	f893 3818 	ldrb.w	r3, [r3, #2072]	; 0x818
 801a47e:	461a      	mov	r2, r3
 801a480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a482:	f003 0307 	and.w	r3, r3, #7
 801a486:	fa42 f303 	asr.w	r3, r2, r3
 801a48a:	f003 0301 	and.w	r3, r3, #1
 801a48e:	2b00      	cmp	r3, #0
 801a490:	d075      	beq.n	801a57e <_fx_utility_FAT_map_flush+0x142>
            /* No, look at the next bit map entry.  */
            continue;
        }

        /* Setup the parameters for performing the update.  */
        FAT_sector =    i * sectors_per_bit + media_ptr -> fx_media_reserved_sectors;
 801a492:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a496:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a498:	fb03 f202 	mul.w	r2, r3, r2
 801a49c:	69fb      	ldr	r3, [r7, #28]
 801a49e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a4a0:	4413      	add	r3, r2
 801a4a2:	637b      	str	r3, [r7, #52]	; 0x34
        last_sector =   FAT_sector + sectors_per_bit;
 801a4a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a4a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801a4aa:	4413      	add	r3, r2
 801a4ac:	633b      	str	r3, [r7, #48]	; 0x30

        /* Make sure the last update sector is within range.  */
        if (last_sector > (media_ptr -> fx_media_sectors_per_FAT + media_ptr -> fx_media_reserved_sectors))
 801a4ae:	69fb      	ldr	r3, [r7, #28]
 801a4b0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801a4b2:	69fb      	ldr	r3, [r7, #28]
 801a4b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a4b6:	4413      	add	r3, r2
 801a4b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a4ba:	429a      	cmp	r2, r3
 801a4bc:	d95a      	bls.n	801a574 <_fx_utility_FAT_map_flush+0x138>
        {
            last_sector =  media_ptr -> fx_media_sectors_per_FAT + media_ptr -> fx_media_reserved_sectors;
 801a4be:	69fb      	ldr	r3, [r7, #28]
 801a4c0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801a4c2:	69fb      	ldr	r3, [r7, #28]
 801a4c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a4c6:	4413      	add	r3, r2
 801a4c8:	633b      	str	r3, [r7, #48]	; 0x30
        }

        /* Loop to mirror primary FAT sectors to secondary FAT(s).  */
        for (; FAT_sector < last_sector; FAT_sector++)
 801a4ca:	e053      	b.n	801a574 <_fx_utility_FAT_map_flush+0x138>
        {

            /* Read the FAT sector.  */
            status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 801a4cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a4ce:	2200      	movs	r2, #0
 801a4d0:	613b      	str	r3, [r7, #16]
 801a4d2:	617a      	str	r2, [r7, #20]
                                                      media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 801a4d4:	69fb      	ldr	r3, [r7, #28]
 801a4d6:	689a      	ldr	r2, [r3, #8]
            status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 801a4d8:	2302      	movs	r3, #2
 801a4da:	9302      	str	r3, [sp, #8]
 801a4dc:	2301      	movs	r3, #1
 801a4de:	9301      	str	r3, [sp, #4]
 801a4e0:	9200      	str	r2, [sp, #0]
 801a4e2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801a4e6:	69f8      	ldr	r0, [r7, #28]
 801a4e8:	f000 fd48 	bl	801af7c <_fx_utility_logical_sector_read>
 801a4ec:	6238      	str	r0, [r7, #32]

            /* Determine if an error occurred.  */
            if (status != FX_SUCCESS)
 801a4ee:	6a3b      	ldr	r3, [r7, #32]
 801a4f0:	2b00      	cmp	r3, #0
 801a4f2:	d001      	beq.n	801a4f8 <_fx_utility_FAT_map_flush+0xbc>
            {
                /* Return the error status.  */
                return(status);
 801a4f4:	6a3b      	ldr	r3, [r7, #32]
 801a4f6:	e05c      	b.n	801a5b2 <_fx_utility_FAT_map_flush+0x176>
            }

            /* Pickup how many secondary FATs there are.  */
            FATs =  media_ptr -> fx_media_number_of_FATs - 1;
 801a4f8:	69fb      	ldr	r3, [r7, #28]
 801a4fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a4fc:	3b01      	subs	r3, #1
 801a4fe:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Loop to update additional FAT entries.  */
            while (FATs)
 801a500:	e032      	b.n	801a568 <_fx_utility_FAT_map_flush+0x12c>
            {

                /* Mirror main FAT sector write into the additional FATs.  */
                status =  _fx_utility_logical_sector_write(media_ptr,
                                                           ((ULONG64) FAT_sector) + ((ULONG64)FATs * (ULONG64)(media_ptr -> fx_media_sectors_per_FAT)),
 801a502:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a504:	2200      	movs	r2, #0
 801a506:	60bb      	str	r3, [r7, #8]
 801a508:	60fa      	str	r2, [r7, #12]
 801a50a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a50c:	2200      	movs	r2, #0
 801a50e:	4698      	mov	r8, r3
 801a510:	4691      	mov	r9, r2
 801a512:	69fb      	ldr	r3, [r7, #28]
 801a514:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801a516:	2200      	movs	r2, #0
 801a518:	469a      	mov	sl, r3
 801a51a:	4693      	mov	fp, r2
 801a51c:	fb0a f209 	mul.w	r2, sl, r9
 801a520:	fb08 f30b 	mul.w	r3, r8, fp
 801a524:	4413      	add	r3, r2
 801a526:	fba8 450a 	umull	r4, r5, r8, sl
 801a52a:	442b      	add	r3, r5
 801a52c:	461d      	mov	r5, r3
                status =  _fx_utility_logical_sector_write(media_ptr,
 801a52e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 801a532:	460b      	mov	r3, r1
 801a534:	191b      	adds	r3, r3, r4
 801a536:	603b      	str	r3, [r7, #0]
 801a538:	4613      	mov	r3, r2
 801a53a:	416b      	adcs	r3, r5
 801a53c:	607b      	str	r3, [r7, #4]
                                                           media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 801a53e:	69fb      	ldr	r3, [r7, #28]
 801a540:	689a      	ldr	r2, [r3, #8]
                status =  _fx_utility_logical_sector_write(media_ptr,
 801a542:	2302      	movs	r3, #2
 801a544:	9302      	str	r3, [sp, #8]
 801a546:	2301      	movs	r3, #1
 801a548:	9301      	str	r3, [sp, #4]
 801a54a:	9200      	str	r2, [sp, #0]
 801a54c:	e9d7 2300 	ldrd	r2, r3, [r7]
 801a550:	69f8      	ldr	r0, [r7, #28]
 801a552:	f000 ffa7 	bl	801b4a4 <_fx_utility_logical_sector_write>
 801a556:	6238      	str	r0, [r7, #32]

                /* Determine if an error occurred.  */
                if (status != FX_SUCCESS)
 801a558:	6a3b      	ldr	r3, [r7, #32]
 801a55a:	2b00      	cmp	r3, #0
 801a55c:	d001      	beq.n	801a562 <_fx_utility_FAT_map_flush+0x126>
                {

                    /* Return the error status.  */
                    return(status);
 801a55e:	6a3b      	ldr	r3, [r7, #32]
 801a560:	e027      	b.n	801a5b2 <_fx_utility_FAT_map_flush+0x176>
                }

                /* Decrement the number of FATs.  */
                FATs--;
 801a562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a564:	3b01      	subs	r3, #1
 801a566:	62bb      	str	r3, [r7, #40]	; 0x28
            while (FATs)
 801a568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a56a:	2b00      	cmp	r3, #0
 801a56c:	d1c9      	bne.n	801a502 <_fx_utility_FAT_map_flush+0xc6>
        for (; FAT_sector < last_sector; FAT_sector++)
 801a56e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a570:	3301      	adds	r3, #1
 801a572:	637b      	str	r3, [r7, #52]	; 0x34
 801a574:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801a576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a578:	429a      	cmp	r2, r3
 801a57a:	d3a7      	bcc.n	801a4cc <_fx_utility_FAT_map_flush+0x90>
 801a57c:	e000      	b.n	801a580 <_fx_utility_FAT_map_flush+0x144>
            continue;
 801a57e:	bf00      	nop
    for (i = 0; i < FX_FAT_MAP_SIZE << 3; i++)
 801a580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a582:	3301      	adds	r3, #1
 801a584:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a588:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801a58c:	f4ff af71 	bcc.w	801a472 <_fx_utility_FAT_map_flush+0x36>
            }
        }
    }

    /* Clear the bit map that indicates primary FAT updates.  */
    for (i = 0; i < FX_FAT_MAP_SIZE; i++)
 801a590:	2300      	movs	r3, #0
 801a592:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a594:	e009      	b.n	801a5aa <_fx_utility_FAT_map_flush+0x16e>
    {

        /* Clear each entry in the bit map.  */
        media_ptr -> fx_media_fat_secondary_update_map[i] =  0;
 801a596:	69fa      	ldr	r2, [r7, #28]
 801a598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a59a:	4413      	add	r3, r2
 801a59c:	f603 0318 	addw	r3, r3, #2072	; 0x818
 801a5a0:	2200      	movs	r2, #0
 801a5a2:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < FX_FAT_MAP_SIZE; i++)
 801a5a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a5a6:	3301      	adds	r3, #1
 801a5a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a5aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a5ac:	2b7f      	cmp	r3, #127	; 0x7f
 801a5ae:	d9f2      	bls.n	801a596 <_fx_utility_FAT_map_flush+0x15a>
    }

    /* Return a successful completion.  */
    return(FX_SUCCESS);
 801a5b0:	2300      	movs	r3, #0
}
 801a5b2:	4618      	mov	r0, r3
 801a5b4:	3738      	adds	r7, #56	; 0x38
 801a5b6:	46bd      	mov	sp, r7
 801a5b8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0801a5bc <_fx_utility_logical_sector_cache_entry_read>:
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
FX_CACHED_SECTOR  *_fx_utility_logical_sector_cache_entry_read(FX_MEDIA *media_ptr, ULONG64 logical_sector,
                                                               FX_CACHED_SECTOR **previous_cache_entry)
{
 801a5bc:	b480      	push	{r7}
 801a5be:	b08f      	sub	sp, #60	; 0x3c
 801a5c0:	af00      	add	r7, sp, #0
 801a5c2:	60f8      	str	r0, [r7, #12]
 801a5c4:	e9c7 2300 	strd	r2, r3, [r7]
ULONG             cache_size;
ULONG             index;


    /* Determine if the logical sector cache access should use the hash function.  */
    if (media_ptr -> fx_media_sector_cache_hashed)
 801a5c8:	68fb      	ldr	r3, [r7, #12]
 801a5ca:	691b      	ldr	r3, [r3, #16]
 801a5cc:	2b00      	cmp	r3, #0
 801a5ce:	f000 8275 	beq.w	801aabc <_fx_utility_logical_sector_cache_entry_read+0x500>

        /* Calculate the area of the cache for this logical sector.  */

        /* First compute the hashed value of this index by simply using the lower bits of
           the sector number.  */
        index =  (ULONG)(logical_sector & media_ptr -> fx_media_sector_cache_hash_mask);
 801a5d2:	683a      	ldr	r2, [r7, #0]
 801a5d4:	68fb      	ldr	r3, [r7, #12]
 801a5d6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 801a5da:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 801a5de:	4013      	ands	r3, r2
 801a5e0:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Set the bit indicating there is one or more valid sectors at this cache index.  */
        media_ptr -> fx_media_sector_cache_hashed_sector_valid |=  ((ULONG)1) << (index % 32);
 801a5e2:	68fb      	ldr	r3, [r7, #12]
 801a5e4:	6a1a      	ldr	r2, [r3, #32]
 801a5e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a5e8:	f003 031f 	and.w	r3, r3, #31
 801a5ec:	2101      	movs	r1, #1
 801a5ee:	fa01 f303 	lsl.w	r3, r1, r3
 801a5f2:	431a      	orrs	r2, r3
 801a5f4:	68fb      	ldr	r3, [r7, #12]
 801a5f6:	621a      	str	r2, [r3, #32]

        /* Compute the actual array index by multiplying by the cache depth.  */
        index =  index * FX_SECTOR_CACHE_DEPTH;
 801a5f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a5fa:	009b      	lsls	r3, r3, #2
 801a5fc:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Build a pointer to the cache entry.  */
        cache_entry =  &(media_ptr -> fx_media_sector_cache[index]);
 801a5fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a600:	4613      	mov	r3, r2
 801a602:	005b      	lsls	r3, r3, #1
 801a604:	4413      	add	r3, r2
 801a606:	00db      	lsls	r3, r3, #3
 801a608:	f503 634a 	add.w	r3, r3, #3232	; 0xca0
 801a60c:	68fa      	ldr	r2, [r7, #12]
 801a60e:	4413      	add	r3, r2
 801a610:	637b      	str	r3, [r7, #52]	; 0x34

        /* Determine if the logical sector is in the cache - assuming the depth of the
           sector cache is 4 entries.  */
        if ((cache_entry -> fx_cached_sector_valid) && (cache_entry -> fx_cached_sector == logical_sector))
 801a612:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a614:	7c5b      	ldrb	r3, [r3, #17]
 801a616:	2b00      	cmp	r3, #0
 801a618:	d015      	beq.n	801a646 <_fx_utility_logical_sector_cache_entry_read+0x8a>
 801a61a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a61c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801a620:	e9d7 0100 	ldrd	r0, r1, [r7]
 801a624:	4299      	cmp	r1, r3
 801a626:	bf08      	it	eq
 801a628:	4290      	cmpeq	r0, r2
 801a62a:	d10c      	bne.n	801a646 <_fx_utility_logical_sector_cache_entry_read+0x8a>
        {

            /* Yes, we found a match.  Simply setup the pointer to this
               buffer and return.  */
            media_ptr -> fx_media_memory_buffer =  cache_entry -> fx_cached_sector_memory_buffer;
 801a62c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a62e:	681a      	ldr	r2, [r3, #0]
 801a630:	68fb      	ldr	r3, [r7, #12]
 801a632:	609a      	str	r2, [r3, #8]

#ifndef FX_MEDIA_STATISTICS_DISABLE

            /* Increment the number of logical sectors cache read hits.  */
            media_ptr -> fx_media_logical_sector_cache_read_hits++;
 801a634:	68fb      	ldr	r3, [r7, #12]
 801a636:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 801a63a:	1c5a      	adds	r2, r3, #1
 801a63c:	68fb      	ldr	r3, [r7, #12]
 801a63e:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
#endif
            /* Success, return to caller immediately!  */
            return(FX_NULL);
 801a642:	2300      	movs	r3, #0
 801a644:	e27e      	b.n	801ab44 <_fx_utility_logical_sector_cache_entry_read+0x588>
        }
        else if (((cache_entry + 1) -> fx_cached_sector_valid) && ((cache_entry + 1) -> fx_cached_sector == logical_sector))
 801a646:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a648:	3318      	adds	r3, #24
 801a64a:	7c5b      	ldrb	r3, [r3, #17]
 801a64c:	2b00      	cmp	r3, #0
 801a64e:	d060      	beq.n	801a712 <_fx_utility_logical_sector_cache_entry_read+0x156>
 801a650:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a652:	3318      	adds	r3, #24
 801a654:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801a658:	e9d7 0100 	ldrd	r0, r1, [r7]
 801a65c:	4299      	cmp	r1, r3
 801a65e:	bf08      	it	eq
 801a660:	4290      	cmpeq	r0, r2
 801a662:	d156      	bne.n	801a712 <_fx_utility_logical_sector_cache_entry_read+0x156>
        {

            /* Yes, we found a match.  Simply setup the pointer to this
               buffer and return.  */
            media_ptr -> fx_media_memory_buffer =  (cache_entry + 1) -> fx_cached_sector_memory_buffer;
 801a664:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a666:	3318      	adds	r3, #24
 801a668:	681a      	ldr	r2, [r3, #0]
 801a66a:	68fb      	ldr	r3, [r7, #12]
 801a66c:	609a      	str	r2, [r3, #8]

#ifndef FX_MEDIA_STATISTICS_DISABLE

            /* Increment the number of logical sectors cache read hits.  */
            media_ptr -> fx_media_logical_sector_cache_read_hits++;
 801a66e:	68fb      	ldr	r3, [r7, #12]
 801a670:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 801a674:	1c5a      	adds	r2, r3, #1
 801a676:	68fb      	ldr	r3, [r7, #12]
 801a678:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
#endif

            /* Swap the first and second cache entries to keep the most recently used
               at the top.  */
            temp_storage.fx_cached_sector_memory_buffer =           (cache_entry) -> fx_cached_sector_memory_buffer;
 801a67c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a67e:	681b      	ldr	r3, [r3, #0]
 801a680:	613b      	str	r3, [r7, #16]
            temp_storage.fx_cached_sector =                         (cache_entry) -> fx_cached_sector;
 801a682:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a684:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801a688:	e9c7 2306 	strd	r2, r3, [r7, #24]
            temp_storage.fx_cached_sector_buffer_dirty =            (cache_entry) -> fx_cached_sector_buffer_dirty;
 801a68c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a68e:	7c1b      	ldrb	r3, [r3, #16]
 801a690:	f887 3020 	strb.w	r3, [r7, #32]
            temp_storage.fx_cached_sector_valid =                   (cache_entry) -> fx_cached_sector_valid;
 801a694:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a696:	7c5b      	ldrb	r3, [r3, #17]
 801a698:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
            temp_storage.fx_cached_sector_type =                    (cache_entry) -> fx_cached_sector_type;
 801a69c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a69e:	7c9b      	ldrb	r3, [r3, #18]
 801a6a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

            (cache_entry) -> fx_cached_sector_memory_buffer =       (cache_entry + 1) -> fx_cached_sector_memory_buffer;
 801a6a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a6a6:	3318      	adds	r3, #24
 801a6a8:	681a      	ldr	r2, [r3, #0]
 801a6aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a6ac:	601a      	str	r2, [r3, #0]
            (cache_entry) -> fx_cached_sector =                     (cache_entry + 1) -> fx_cached_sector;
 801a6ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a6b0:	3318      	adds	r3, #24
 801a6b2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801a6b6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801a6b8:	e9c1 2302 	strd	r2, r3, [r1, #8]
            (cache_entry) -> fx_cached_sector_buffer_dirty =        (cache_entry + 1) -> fx_cached_sector_buffer_dirty;
 801a6bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a6be:	3318      	adds	r3, #24
 801a6c0:	7c1a      	ldrb	r2, [r3, #16]
 801a6c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a6c4:	741a      	strb	r2, [r3, #16]
            (cache_entry) -> fx_cached_sector_valid =               (cache_entry + 1) -> fx_cached_sector_valid;
 801a6c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a6c8:	3318      	adds	r3, #24
 801a6ca:	7c5a      	ldrb	r2, [r3, #17]
 801a6cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a6ce:	745a      	strb	r2, [r3, #17]
            (cache_entry) -> fx_cached_sector_type =                (cache_entry + 1) -> fx_cached_sector_type;
 801a6d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a6d2:	3318      	adds	r3, #24
 801a6d4:	7c9a      	ldrb	r2, [r3, #18]
 801a6d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a6d8:	749a      	strb	r2, [r3, #18]

            (cache_entry + 1) -> fx_cached_sector_memory_buffer =   temp_storage.fx_cached_sector_memory_buffer;
 801a6da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a6dc:	3318      	adds	r3, #24
 801a6de:	693a      	ldr	r2, [r7, #16]
 801a6e0:	601a      	str	r2, [r3, #0]
            (cache_entry + 1) -> fx_cached_sector =                 temp_storage.fx_cached_sector;
 801a6e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a6e4:	f103 0118 	add.w	r1, r3, #24
 801a6e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801a6ec:	e9c1 2302 	strd	r2, r3, [r1, #8]
            (cache_entry + 1) -> fx_cached_sector_buffer_dirty =    temp_storage.fx_cached_sector_buffer_dirty;
 801a6f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a6f2:	3318      	adds	r3, #24
 801a6f4:	f897 2020 	ldrb.w	r2, [r7, #32]
 801a6f8:	741a      	strb	r2, [r3, #16]
            (cache_entry + 1) -> fx_cached_sector_valid =           temp_storage.fx_cached_sector_valid;
 801a6fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a6fc:	3318      	adds	r3, #24
 801a6fe:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 801a702:	745a      	strb	r2, [r3, #17]
            (cache_entry + 1) -> fx_cached_sector_type =            temp_storage.fx_cached_sector_type;
 801a704:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a706:	3318      	adds	r3, #24
 801a708:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 801a70c:	749a      	strb	r2, [r3, #18]

            /* Success, return to caller immediately!  */
            return(FX_NULL);
 801a70e:	2300      	movs	r3, #0
 801a710:	e218      	b.n	801ab44 <_fx_utility_logical_sector_cache_entry_read+0x588>
        }
        else if (((cache_entry + 2) -> fx_cached_sector_valid) && ((cache_entry + 2) -> fx_cached_sector == logical_sector))
 801a712:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a714:	3330      	adds	r3, #48	; 0x30
 801a716:	7c5b      	ldrb	r3, [r3, #17]
 801a718:	2b00      	cmp	r3, #0
 801a71a:	f000 8086 	beq.w	801a82a <_fx_utility_logical_sector_cache_entry_read+0x26e>
 801a71e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a720:	3330      	adds	r3, #48	; 0x30
 801a722:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801a726:	e9d7 0100 	ldrd	r0, r1, [r7]
 801a72a:	4299      	cmp	r1, r3
 801a72c:	bf08      	it	eq
 801a72e:	4290      	cmpeq	r0, r2
 801a730:	d17b      	bne.n	801a82a <_fx_utility_logical_sector_cache_entry_read+0x26e>
        {

            /* Yes, we found a match.  Simply setup the pointer to this
               buffer and return.  */
            media_ptr -> fx_media_memory_buffer =  (cache_entry + 2) -> fx_cached_sector_memory_buffer;
 801a732:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a734:	3330      	adds	r3, #48	; 0x30
 801a736:	681a      	ldr	r2, [r3, #0]
 801a738:	68fb      	ldr	r3, [r7, #12]
 801a73a:	609a      	str	r2, [r3, #8]

#ifndef FX_MEDIA_STATISTICS_DISABLE

            /* Increment the number of logical sectors cache read hits.  */
            media_ptr -> fx_media_logical_sector_cache_read_hits++;
 801a73c:	68fb      	ldr	r3, [r7, #12]
 801a73e:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 801a742:	1c5a      	adds	r2, r3, #1
 801a744:	68fb      	ldr	r3, [r7, #12]
 801a746:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
#endif

            /* Move the third entry to the top and the first two entries down.  */
            temp_storage.fx_cached_sector_memory_buffer =           (cache_entry) -> fx_cached_sector_memory_buffer;
 801a74a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a74c:	681b      	ldr	r3, [r3, #0]
 801a74e:	613b      	str	r3, [r7, #16]
            temp_storage.fx_cached_sector =                         (cache_entry) -> fx_cached_sector;
 801a750:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a752:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801a756:	e9c7 2306 	strd	r2, r3, [r7, #24]
            temp_storage.fx_cached_sector_buffer_dirty =            (cache_entry) -> fx_cached_sector_buffer_dirty;
 801a75a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a75c:	7c1b      	ldrb	r3, [r3, #16]
 801a75e:	f887 3020 	strb.w	r3, [r7, #32]
            temp_storage.fx_cached_sector_valid =                   (cache_entry) -> fx_cached_sector_valid;
 801a762:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a764:	7c5b      	ldrb	r3, [r3, #17]
 801a766:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
            temp_storage.fx_cached_sector_type =                    (cache_entry) -> fx_cached_sector_type;
 801a76a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a76c:	7c9b      	ldrb	r3, [r3, #18]
 801a76e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

            (cache_entry) -> fx_cached_sector_memory_buffer =       (cache_entry + 2) -> fx_cached_sector_memory_buffer;
 801a772:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a774:	3330      	adds	r3, #48	; 0x30
 801a776:	681a      	ldr	r2, [r3, #0]
 801a778:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a77a:	601a      	str	r2, [r3, #0]
            (cache_entry) -> fx_cached_sector =                     (cache_entry + 2) -> fx_cached_sector;
 801a77c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a77e:	3330      	adds	r3, #48	; 0x30
 801a780:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801a784:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801a786:	e9c1 2302 	strd	r2, r3, [r1, #8]
            (cache_entry) -> fx_cached_sector_buffer_dirty =        (cache_entry + 2) -> fx_cached_sector_buffer_dirty;
 801a78a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a78c:	3330      	adds	r3, #48	; 0x30
 801a78e:	7c1a      	ldrb	r2, [r3, #16]
 801a790:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a792:	741a      	strb	r2, [r3, #16]
            (cache_entry) -> fx_cached_sector_valid =               (cache_entry + 2) -> fx_cached_sector_valid;
 801a794:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a796:	3330      	adds	r3, #48	; 0x30
 801a798:	7c5a      	ldrb	r2, [r3, #17]
 801a79a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a79c:	745a      	strb	r2, [r3, #17]
            (cache_entry) -> fx_cached_sector_type =                (cache_entry + 2) -> fx_cached_sector_type;
 801a79e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a7a0:	3330      	adds	r3, #48	; 0x30
 801a7a2:	7c9a      	ldrb	r2, [r3, #18]
 801a7a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a7a6:	749a      	strb	r2, [r3, #18]

            (cache_entry + 2) -> fx_cached_sector_memory_buffer =   (cache_entry + 1) -> fx_cached_sector_memory_buffer;
 801a7a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a7aa:	f103 0218 	add.w	r2, r3, #24
 801a7ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a7b0:	3330      	adds	r3, #48	; 0x30
 801a7b2:	6812      	ldr	r2, [r2, #0]
 801a7b4:	601a      	str	r2, [r3, #0]
            (cache_entry + 2) -> fx_cached_sector =                 (cache_entry + 1) -> fx_cached_sector;
 801a7b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a7b8:	3318      	adds	r3, #24
 801a7ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801a7bc:	f102 0130 	add.w	r1, r2, #48	; 0x30
 801a7c0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801a7c4:	e9c1 2302 	strd	r2, r3, [r1, #8]
            (cache_entry + 2) -> fx_cached_sector_buffer_dirty =    (cache_entry + 1) -> fx_cached_sector_buffer_dirty;
 801a7c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a7ca:	f103 0218 	add.w	r2, r3, #24
 801a7ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a7d0:	3330      	adds	r3, #48	; 0x30
 801a7d2:	7c12      	ldrb	r2, [r2, #16]
 801a7d4:	741a      	strb	r2, [r3, #16]
            (cache_entry + 2) -> fx_cached_sector_valid =           (cache_entry + 1) -> fx_cached_sector_valid;
 801a7d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a7d8:	f103 0218 	add.w	r2, r3, #24
 801a7dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a7de:	3330      	adds	r3, #48	; 0x30
 801a7e0:	7c52      	ldrb	r2, [r2, #17]
 801a7e2:	745a      	strb	r2, [r3, #17]
            (cache_entry + 2) -> fx_cached_sector_type =            (cache_entry + 1) -> fx_cached_sector_type;
 801a7e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a7e6:	f103 0218 	add.w	r2, r3, #24
 801a7ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a7ec:	3330      	adds	r3, #48	; 0x30
 801a7ee:	7c92      	ldrb	r2, [r2, #18]
 801a7f0:	749a      	strb	r2, [r3, #18]

            (cache_entry + 1) -> fx_cached_sector_memory_buffer =   temp_storage.fx_cached_sector_memory_buffer;
 801a7f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a7f4:	3318      	adds	r3, #24
 801a7f6:	693a      	ldr	r2, [r7, #16]
 801a7f8:	601a      	str	r2, [r3, #0]
            (cache_entry + 1) -> fx_cached_sector =                 temp_storage.fx_cached_sector;
 801a7fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a7fc:	f103 0118 	add.w	r1, r3, #24
 801a800:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801a804:	e9c1 2302 	strd	r2, r3, [r1, #8]
            (cache_entry + 1) -> fx_cached_sector_buffer_dirty =    temp_storage.fx_cached_sector_buffer_dirty;
 801a808:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a80a:	3318      	adds	r3, #24
 801a80c:	f897 2020 	ldrb.w	r2, [r7, #32]
 801a810:	741a      	strb	r2, [r3, #16]
            (cache_entry + 1) -> fx_cached_sector_valid =           temp_storage.fx_cached_sector_valid;
 801a812:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a814:	3318      	adds	r3, #24
 801a816:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 801a81a:	745a      	strb	r2, [r3, #17]
            (cache_entry + 1) -> fx_cached_sector_type =            temp_storage.fx_cached_sector_type;
 801a81c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a81e:	3318      	adds	r3, #24
 801a820:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 801a824:	749a      	strb	r2, [r3, #18]

            /* Success, return to caller immediately!  */
            return(FX_NULL);
 801a826:	2300      	movs	r3, #0
 801a828:	e18c      	b.n	801ab44 <_fx_utility_logical_sector_cache_entry_read+0x588>
        }
        else if (((cache_entry + 3) -> fx_cached_sector_valid) && ((cache_entry + 3) -> fx_cached_sector == logical_sector))
 801a82a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a82c:	3348      	adds	r3, #72	; 0x48
 801a82e:	7c5b      	ldrb	r3, [r3, #17]
 801a830:	2b00      	cmp	r3, #0
 801a832:	f000 80ac 	beq.w	801a98e <_fx_utility_logical_sector_cache_entry_read+0x3d2>
 801a836:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a838:	3348      	adds	r3, #72	; 0x48
 801a83a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801a83e:	e9d7 0100 	ldrd	r0, r1, [r7]
 801a842:	4299      	cmp	r1, r3
 801a844:	bf08      	it	eq
 801a846:	4290      	cmpeq	r0, r2
 801a848:	f040 80a1 	bne.w	801a98e <_fx_utility_logical_sector_cache_entry_read+0x3d2>
        {

            /* Yes, we found a match.  Simply setup the pointer to this
               buffer and return.  */
            media_ptr -> fx_media_memory_buffer =  (cache_entry + 3) -> fx_cached_sector_memory_buffer;
 801a84c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a84e:	3348      	adds	r3, #72	; 0x48
 801a850:	681a      	ldr	r2, [r3, #0]
 801a852:	68fb      	ldr	r3, [r7, #12]
 801a854:	609a      	str	r2, [r3, #8]

#ifndef FX_MEDIA_STATISTICS_DISABLE

            /* Increment the number of logical sectors cache read hits.  */
            media_ptr -> fx_media_logical_sector_cache_read_hits++;
 801a856:	68fb      	ldr	r3, [r7, #12]
 801a858:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 801a85c:	1c5a      	adds	r2, r3, #1
 801a85e:	68fb      	ldr	r3, [r7, #12]
 801a860:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
#endif

            /* Move the last entry to the top and the first three entries down.  */
            temp_storage.fx_cached_sector_memory_buffer =           (cache_entry) -> fx_cached_sector_memory_buffer;
 801a864:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a866:	681b      	ldr	r3, [r3, #0]
 801a868:	613b      	str	r3, [r7, #16]
            temp_storage.fx_cached_sector =                         (cache_entry) -> fx_cached_sector;
 801a86a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a86c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801a870:	e9c7 2306 	strd	r2, r3, [r7, #24]
            temp_storage.fx_cached_sector_buffer_dirty =            (cache_entry) -> fx_cached_sector_buffer_dirty;
 801a874:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a876:	7c1b      	ldrb	r3, [r3, #16]
 801a878:	f887 3020 	strb.w	r3, [r7, #32]
            temp_storage.fx_cached_sector_valid =                   (cache_entry) -> fx_cached_sector_valid;
 801a87c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a87e:	7c5b      	ldrb	r3, [r3, #17]
 801a880:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
            temp_storage.fx_cached_sector_type =                    (cache_entry) -> fx_cached_sector_type;
 801a884:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a886:	7c9b      	ldrb	r3, [r3, #18]
 801a888:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

            (cache_entry) -> fx_cached_sector_memory_buffer =       (cache_entry + 3) -> fx_cached_sector_memory_buffer;
 801a88c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a88e:	3348      	adds	r3, #72	; 0x48
 801a890:	681a      	ldr	r2, [r3, #0]
 801a892:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a894:	601a      	str	r2, [r3, #0]
            (cache_entry) -> fx_cached_sector =                     (cache_entry + 3) -> fx_cached_sector;
 801a896:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a898:	3348      	adds	r3, #72	; 0x48
 801a89a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801a89e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801a8a0:	e9c1 2302 	strd	r2, r3, [r1, #8]
            (cache_entry) -> fx_cached_sector_buffer_dirty =        (cache_entry + 3) -> fx_cached_sector_buffer_dirty;
 801a8a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a8a6:	3348      	adds	r3, #72	; 0x48
 801a8a8:	7c1a      	ldrb	r2, [r3, #16]
 801a8aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a8ac:	741a      	strb	r2, [r3, #16]
            (cache_entry) -> fx_cached_sector_valid =               (cache_entry + 3) -> fx_cached_sector_valid;
 801a8ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a8b0:	3348      	adds	r3, #72	; 0x48
 801a8b2:	7c5a      	ldrb	r2, [r3, #17]
 801a8b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a8b6:	745a      	strb	r2, [r3, #17]
            (cache_entry) -> fx_cached_sector_type =                (cache_entry + 3) -> fx_cached_sector_type;
 801a8b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a8ba:	3348      	adds	r3, #72	; 0x48
 801a8bc:	7c9a      	ldrb	r2, [r3, #18]
 801a8be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a8c0:	749a      	strb	r2, [r3, #18]

            (cache_entry + 3) -> fx_cached_sector_memory_buffer =   (cache_entry + 2) -> fx_cached_sector_memory_buffer;
 801a8c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a8c4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801a8c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a8ca:	3348      	adds	r3, #72	; 0x48
 801a8cc:	6812      	ldr	r2, [r2, #0]
 801a8ce:	601a      	str	r2, [r3, #0]
            (cache_entry + 3) -> fx_cached_sector =                 (cache_entry + 2) -> fx_cached_sector;
 801a8d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a8d2:	3330      	adds	r3, #48	; 0x30
 801a8d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801a8d6:	f102 0148 	add.w	r1, r2, #72	; 0x48
 801a8da:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801a8de:	e9c1 2302 	strd	r2, r3, [r1, #8]
            (cache_entry + 3) -> fx_cached_sector_buffer_dirty =    (cache_entry + 2) -> fx_cached_sector_buffer_dirty;
 801a8e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a8e4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801a8e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a8ea:	3348      	adds	r3, #72	; 0x48
 801a8ec:	7c12      	ldrb	r2, [r2, #16]
 801a8ee:	741a      	strb	r2, [r3, #16]
            (cache_entry + 3) -> fx_cached_sector_valid =           (cache_entry + 2) -> fx_cached_sector_valid;
 801a8f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a8f2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801a8f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a8f8:	3348      	adds	r3, #72	; 0x48
 801a8fa:	7c52      	ldrb	r2, [r2, #17]
 801a8fc:	745a      	strb	r2, [r3, #17]
            (cache_entry + 3) -> fx_cached_sector_type =            (cache_entry + 2) -> fx_cached_sector_type;
 801a8fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a900:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801a904:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a906:	3348      	adds	r3, #72	; 0x48
 801a908:	7c92      	ldrb	r2, [r2, #18]
 801a90a:	749a      	strb	r2, [r3, #18]

            (cache_entry + 2) -> fx_cached_sector_memory_buffer =   (cache_entry + 1) -> fx_cached_sector_memory_buffer;
 801a90c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a90e:	f103 0218 	add.w	r2, r3, #24
 801a912:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a914:	3330      	adds	r3, #48	; 0x30
 801a916:	6812      	ldr	r2, [r2, #0]
 801a918:	601a      	str	r2, [r3, #0]
            (cache_entry + 2) -> fx_cached_sector =                 (cache_entry + 1) -> fx_cached_sector;
 801a91a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a91c:	3318      	adds	r3, #24
 801a91e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801a920:	f102 0130 	add.w	r1, r2, #48	; 0x30
 801a924:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801a928:	e9c1 2302 	strd	r2, r3, [r1, #8]
            (cache_entry + 2) -> fx_cached_sector_buffer_dirty =    (cache_entry + 1) -> fx_cached_sector_buffer_dirty;
 801a92c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a92e:	f103 0218 	add.w	r2, r3, #24
 801a932:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a934:	3330      	adds	r3, #48	; 0x30
 801a936:	7c12      	ldrb	r2, [r2, #16]
 801a938:	741a      	strb	r2, [r3, #16]
            (cache_entry + 2) -> fx_cached_sector_valid =           (cache_entry + 1) -> fx_cached_sector_valid;
 801a93a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a93c:	f103 0218 	add.w	r2, r3, #24
 801a940:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a942:	3330      	adds	r3, #48	; 0x30
 801a944:	7c52      	ldrb	r2, [r2, #17]
 801a946:	745a      	strb	r2, [r3, #17]
            (cache_entry + 2) -> fx_cached_sector_type =            (cache_entry + 1) -> fx_cached_sector_type;
 801a948:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a94a:	f103 0218 	add.w	r2, r3, #24
 801a94e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a950:	3330      	adds	r3, #48	; 0x30
 801a952:	7c92      	ldrb	r2, [r2, #18]
 801a954:	749a      	strb	r2, [r3, #18]

            (cache_entry + 1) -> fx_cached_sector_memory_buffer =   temp_storage.fx_cached_sector_memory_buffer;
 801a956:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a958:	3318      	adds	r3, #24
 801a95a:	693a      	ldr	r2, [r7, #16]
 801a95c:	601a      	str	r2, [r3, #0]
            (cache_entry + 1) -> fx_cached_sector =                 temp_storage.fx_cached_sector;
 801a95e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a960:	f103 0118 	add.w	r1, r3, #24
 801a964:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801a968:	e9c1 2302 	strd	r2, r3, [r1, #8]
            (cache_entry + 1) -> fx_cached_sector_buffer_dirty =    temp_storage.fx_cached_sector_buffer_dirty;
 801a96c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a96e:	3318      	adds	r3, #24
 801a970:	f897 2020 	ldrb.w	r2, [r7, #32]
 801a974:	741a      	strb	r2, [r3, #16]
            (cache_entry + 1) -> fx_cached_sector_valid =           temp_storage.fx_cached_sector_valid;
 801a976:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a978:	3318      	adds	r3, #24
 801a97a:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 801a97e:	745a      	strb	r2, [r3, #17]
            (cache_entry + 1) -> fx_cached_sector_type =            temp_storage.fx_cached_sector_type;
 801a980:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a982:	3318      	adds	r3, #24
 801a984:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 801a988:	749a      	strb	r2, [r3, #18]

            /* Success, return to caller immediately!  */
            return(FX_NULL);
 801a98a:	2300      	movs	r3, #0
 801a98c:	e0da      	b.n	801ab44 <_fx_utility_logical_sector_cache_entry_read+0x588>
        }

        /* At this point we have a cache miss.  We need to move all of the sectors down one slot, swapping
           the 4th entry with the first.  */
        temp_storage.fx_cached_sector_memory_buffer =           (cache_entry + 3) -> fx_cached_sector_memory_buffer;
 801a98e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a990:	3348      	adds	r3, #72	; 0x48
 801a992:	681b      	ldr	r3, [r3, #0]
 801a994:	613b      	str	r3, [r7, #16]
        temp_storage.fx_cached_sector =                         (cache_entry + 3) -> fx_cached_sector;
 801a996:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a998:	3348      	adds	r3, #72	; 0x48
 801a99a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801a99e:	e9c7 2306 	strd	r2, r3, [r7, #24]
        temp_storage.fx_cached_sector_buffer_dirty =            (cache_entry + 3) -> fx_cached_sector_buffer_dirty;
 801a9a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a9a4:	3348      	adds	r3, #72	; 0x48
 801a9a6:	7c1b      	ldrb	r3, [r3, #16]
 801a9a8:	f887 3020 	strb.w	r3, [r7, #32]
        temp_storage.fx_cached_sector_valid =                   (cache_entry + 3) -> fx_cached_sector_valid;
 801a9ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a9ae:	3348      	adds	r3, #72	; 0x48
 801a9b0:	7c5b      	ldrb	r3, [r3, #17]
 801a9b2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        temp_storage.fx_cached_sector_type =                    (cache_entry + 3) -> fx_cached_sector_type;
 801a9b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a9b8:	3348      	adds	r3, #72	; 0x48
 801a9ba:	7c9b      	ldrb	r3, [r3, #18]
 801a9bc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

        (cache_entry + 3) -> fx_cached_sector_memory_buffer =   (cache_entry + 2) -> fx_cached_sector_memory_buffer;
 801a9c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a9c2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801a9c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a9c8:	3348      	adds	r3, #72	; 0x48
 801a9ca:	6812      	ldr	r2, [r2, #0]
 801a9cc:	601a      	str	r2, [r3, #0]
        (cache_entry + 3) -> fx_cached_sector =                 (cache_entry + 2) -> fx_cached_sector;
 801a9ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a9d0:	3330      	adds	r3, #48	; 0x30
 801a9d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801a9d4:	f102 0148 	add.w	r1, r2, #72	; 0x48
 801a9d8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801a9dc:	e9c1 2302 	strd	r2, r3, [r1, #8]
        (cache_entry + 3) -> fx_cached_sector_buffer_dirty =    (cache_entry + 2) -> fx_cached_sector_buffer_dirty;
 801a9e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a9e2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801a9e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a9e8:	3348      	adds	r3, #72	; 0x48
 801a9ea:	7c12      	ldrb	r2, [r2, #16]
 801a9ec:	741a      	strb	r2, [r3, #16]
        (cache_entry + 3) -> fx_cached_sector_valid =           (cache_entry + 2) -> fx_cached_sector_valid;
 801a9ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a9f0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801a9f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a9f6:	3348      	adds	r3, #72	; 0x48
 801a9f8:	7c52      	ldrb	r2, [r2, #17]
 801a9fa:	745a      	strb	r2, [r3, #17]
        (cache_entry + 3) -> fx_cached_sector_type =            (cache_entry + 2) -> fx_cached_sector_type;
 801a9fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a9fe:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801aa02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801aa04:	3348      	adds	r3, #72	; 0x48
 801aa06:	7c92      	ldrb	r2, [r2, #18]
 801aa08:	749a      	strb	r2, [r3, #18]

        (cache_entry + 2) -> fx_cached_sector_memory_buffer =   (cache_entry + 1) -> fx_cached_sector_memory_buffer;
 801aa0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801aa0c:	f103 0218 	add.w	r2, r3, #24
 801aa10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801aa12:	3330      	adds	r3, #48	; 0x30
 801aa14:	6812      	ldr	r2, [r2, #0]
 801aa16:	601a      	str	r2, [r3, #0]
        (cache_entry + 2) -> fx_cached_sector =                 (cache_entry + 1) -> fx_cached_sector;
 801aa18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801aa1a:	3318      	adds	r3, #24
 801aa1c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801aa1e:	f102 0130 	add.w	r1, r2, #48	; 0x30
 801aa22:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801aa26:	e9c1 2302 	strd	r2, r3, [r1, #8]
        (cache_entry + 2) -> fx_cached_sector_buffer_dirty =    (cache_entry + 1) -> fx_cached_sector_buffer_dirty;
 801aa2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801aa2c:	f103 0218 	add.w	r2, r3, #24
 801aa30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801aa32:	3330      	adds	r3, #48	; 0x30
 801aa34:	7c12      	ldrb	r2, [r2, #16]
 801aa36:	741a      	strb	r2, [r3, #16]
        (cache_entry + 2) -> fx_cached_sector_valid =           (cache_entry + 1) -> fx_cached_sector_valid;
 801aa38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801aa3a:	f103 0218 	add.w	r2, r3, #24
 801aa3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801aa40:	3330      	adds	r3, #48	; 0x30
 801aa42:	7c52      	ldrb	r2, [r2, #17]
 801aa44:	745a      	strb	r2, [r3, #17]
        (cache_entry + 2) -> fx_cached_sector_type =            (cache_entry + 1) -> fx_cached_sector_type;
 801aa46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801aa48:	f103 0218 	add.w	r2, r3, #24
 801aa4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801aa4e:	3330      	adds	r3, #48	; 0x30
 801aa50:	7c92      	ldrb	r2, [r2, #18]
 801aa52:	749a      	strb	r2, [r3, #18]

        (cache_entry + 1) -> fx_cached_sector_memory_buffer =   (cache_entry) -> fx_cached_sector_memory_buffer;
 801aa54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801aa56:	3318      	adds	r3, #24
 801aa58:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801aa5a:	6812      	ldr	r2, [r2, #0]
 801aa5c:	601a      	str	r2, [r3, #0]
        (cache_entry + 1) -> fx_cached_sector =                 (cache_entry) -> fx_cached_sector;
 801aa5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801aa60:	f103 0118 	add.w	r1, r3, #24
 801aa64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801aa66:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801aa6a:	e9c1 2302 	strd	r2, r3, [r1, #8]
        (cache_entry + 1) -> fx_cached_sector_buffer_dirty =    (cache_entry) -> fx_cached_sector_buffer_dirty;
 801aa6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801aa70:	3318      	adds	r3, #24
 801aa72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801aa74:	7c12      	ldrb	r2, [r2, #16]
 801aa76:	741a      	strb	r2, [r3, #16]
        (cache_entry + 1) -> fx_cached_sector_valid =           (cache_entry) -> fx_cached_sector_valid;
 801aa78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801aa7a:	3318      	adds	r3, #24
 801aa7c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801aa7e:	7c52      	ldrb	r2, [r2, #17]
 801aa80:	745a      	strb	r2, [r3, #17]
        (cache_entry + 1) -> fx_cached_sector_type =            (cache_entry) -> fx_cached_sector_type;
 801aa82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801aa84:	3318      	adds	r3, #24
 801aa86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801aa88:	7c92      	ldrb	r2, [r2, #18]
 801aa8a:	749a      	strb	r2, [r3, #18]

        (cache_entry) -> fx_cached_sector_memory_buffer =       temp_storage.fx_cached_sector_memory_buffer;
 801aa8c:	693a      	ldr	r2, [r7, #16]
 801aa8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801aa90:	601a      	str	r2, [r3, #0]
        (cache_entry) -> fx_cached_sector =                     temp_storage.fx_cached_sector;
 801aa92:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801aa96:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801aa98:	e9c1 2302 	strd	r2, r3, [r1, #8]
        (cache_entry) -> fx_cached_sector_buffer_dirty =        temp_storage.fx_cached_sector_buffer_dirty;
 801aa9c:	f897 2020 	ldrb.w	r2, [r7, #32]
 801aaa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801aaa2:	741a      	strb	r2, [r3, #16]
        (cache_entry) -> fx_cached_sector_valid =               temp_storage.fx_cached_sector_valid;
 801aaa4:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 801aaa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801aaaa:	745a      	strb	r2, [r3, #17]
        (cache_entry) -> fx_cached_sector_type =                temp_storage.fx_cached_sector_type;
 801aaac:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 801aab0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801aab2:	749a      	strb	r2, [r3, #18]

        /* Set the previous pointer to NULL to avoid the linked list update below.  */
        *previous_cache_entry =  FX_NULL;
 801aab4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801aab6:	2200      	movs	r2, #0
 801aab8:	601a      	str	r2, [r3, #0]
 801aaba:	e042      	b.n	801ab42 <_fx_utility_logical_sector_cache_entry_read+0x586>
    }
    else
    {

        /* Search for an entry in the cache that matches this request.  */
        cache_size =            media_ptr -> fx_media_sector_cache_size;
 801aabc:	68fb      	ldr	r3, [r7, #12]
 801aabe:	695b      	ldr	r3, [r3, #20]
 801aac0:	633b      	str	r3, [r7, #48]	; 0x30
        cache_entry =           media_ptr -> fx_media_sector_cache_list_ptr;
 801aac2:	68fb      	ldr	r3, [r7, #12]
 801aac4:	69db      	ldr	r3, [r3, #28]
 801aac6:	637b      	str	r3, [r7, #52]	; 0x34
        *previous_cache_entry =  FX_NULL;
 801aac8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801aaca:	2200      	movs	r2, #0
 801aacc:	601a      	str	r2, [r3, #0]

        /* Look at the cache entries until a match is found or the end of
           the cache is reached.  */
        while (cache_size--)
 801aace:	e033      	b.n	801ab38 <_fx_utility_logical_sector_cache_entry_read+0x57c>
        {

            /* Determine if the requested sector has been found.  */
            if ((cache_entry -> fx_cached_sector_valid) && (cache_entry -> fx_cached_sector == logical_sector))
 801aad0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801aad2:	7c5b      	ldrb	r3, [r3, #17]
 801aad4:	2b00      	cmp	r3, #0
 801aad6:	d025      	beq.n	801ab24 <_fx_utility_logical_sector_cache_entry_read+0x568>
 801aad8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801aada:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801aade:	e9d7 0100 	ldrd	r0, r1, [r7]
 801aae2:	4299      	cmp	r1, r3
 801aae4:	bf08      	it	eq
 801aae6:	4290      	cmpeq	r0, r2
 801aae8:	d11c      	bne.n	801ab24 <_fx_utility_logical_sector_cache_entry_read+0x568>
            {

                /* Yes, we found a match.  Simply setup the pointer to this
                   buffer and return.  */
                media_ptr -> fx_media_memory_buffer =  cache_entry -> fx_cached_sector_memory_buffer;
 801aaea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801aaec:	681a      	ldr	r2, [r3, #0]
 801aaee:	68fb      	ldr	r3, [r7, #12]
 801aaf0:	609a      	str	r2, [r3, #8]

                /* Determine if we need to update the last used list.  */
                if (*previous_cache_entry)
 801aaf2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801aaf4:	681b      	ldr	r3, [r3, #0]
 801aaf6:	2b00      	cmp	r3, #0
 801aaf8:	d00b      	beq.n	801ab12 <_fx_utility_logical_sector_cache_entry_read+0x556>

                    /* Yes, the current entry is not at the front of the list
                       so we need to change the order.  */

                    /* Link the previous entry to this entry's next pointer.  */
                    (*previous_cache_entry) -> fx_cached_sector_next_used =
 801aafa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801aafc:	681b      	ldr	r3, [r3, #0]
                        cache_entry -> fx_cached_sector_next_used;
 801aafe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801ab00:	6952      	ldr	r2, [r2, #20]
                    (*previous_cache_entry) -> fx_cached_sector_next_used =
 801ab02:	615a      	str	r2, [r3, #20]

                    /* Place this entry at the head of the list.  */
                    cache_entry -> fx_cached_sector_next_used =
                        media_ptr -> fx_media_sector_cache_list_ptr;
 801ab04:	68fb      	ldr	r3, [r7, #12]
 801ab06:	69da      	ldr	r2, [r3, #28]
                    cache_entry -> fx_cached_sector_next_used =
 801ab08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ab0a:	615a      	str	r2, [r3, #20]
                    media_ptr -> fx_media_sector_cache_list_ptr =  cache_entry;
 801ab0c:	68fb      	ldr	r3, [r7, #12]
 801ab0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801ab10:	61da      	str	r2, [r3, #28]
                }

#ifndef FX_MEDIA_STATISTICS_DISABLE

                /* Increment the number of logical sectors cache read hits.  */
                media_ptr -> fx_media_logical_sector_cache_read_hits++;
 801ab12:	68fb      	ldr	r3, [r7, #12]
 801ab14:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 801ab18:	1c5a      	adds	r2, r3, #1
 801ab1a:	68fb      	ldr	r3, [r7, #12]
 801ab1c:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
#endif

                /* Success, return to caller immediately!  */
                return(FX_NULL);
 801ab20:	2300      	movs	r3, #0
 801ab22:	e00f      	b.n	801ab44 <_fx_utility_logical_sector_cache_entry_read+0x588>
            }

            /* Otherwise, we have not found the cached entry yet.  */

            /* If there are more entries, move to the next one.  */
            if (cache_entry -> fx_cached_sector_next_used)
 801ab24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ab26:	695b      	ldr	r3, [r3, #20]
 801ab28:	2b00      	cmp	r3, #0
 801ab2a:	d005      	beq.n	801ab38 <_fx_utility_logical_sector_cache_entry_read+0x57c>
            {

                *previous_cache_entry =  cache_entry;
 801ab2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801ab2e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801ab30:	601a      	str	r2, [r3, #0]
                cache_entry =           cache_entry -> fx_cached_sector_next_used;
 801ab32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ab34:	695b      	ldr	r3, [r3, #20]
 801ab36:	637b      	str	r3, [r7, #52]	; 0x34
        while (cache_size--)
 801ab38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ab3a:	1e5a      	subs	r2, r3, #1
 801ab3c:	633a      	str	r2, [r7, #48]	; 0x30
 801ab3e:	2b00      	cmp	r3, #0
 801ab40:	d1c6      	bne.n	801aad0 <_fx_utility_logical_sector_cache_entry_read+0x514>
            }
        }
    }

    /* The requested sector is not in cache, return the last cache entry.  */
    return(cache_entry);
 801ab42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    FX_PARAMETER_NOT_USED(media_ptr);
    FX_PARAMETER_NOT_USED(logical_sector);
    FX_PARAMETER_NOT_USED(previous_cache_entry);
    return(FX_NULL);
#endif /* FX_DISABLE_CACHE */
}
 801ab44:	4618      	mov	r0, r3
 801ab46:	373c      	adds	r7, #60	; 0x3c
 801ab48:	46bd      	mov	sp, r7
 801ab4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab4e:	4770      	bx	lr

0801ab50 <_fx_utility_logical_sector_flush>:
/*                                            errors without cache,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _fx_utility_logical_sector_flush(FX_MEDIA *media_ptr, ULONG64 starting_sector, ULONG64 sectors, UINT invalidate)
{
 801ab50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801ab54:	b094      	sub	sp, #80	; 0x50
 801ab56:	af00      	add	r7, sp, #0
 801ab58:	61f8      	str	r0, [r7, #28]
 801ab5a:	e9c7 2304 	strd	r2, r3, [r7, #16]

    /* Extended port-specific processing macro, which is by default defined to white space.  */
    FX_UTILITY_LOGICAL_SECTOR_FLUSH_EXTENSION

    /* Calculate the ending sector.  */
    ending_sector =  starting_sector + sectors - 1;
 801ab5e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801ab62:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 801ab66:	1884      	adds	r4, r0, r2
 801ab68:	eb41 0503 	adc.w	r5, r1, r3
 801ab6c:	1e63      	subs	r3, r4, #1
 801ab6e:	60bb      	str	r3, [r7, #8]
 801ab70:	f145 33ff 	adc.w	r3, r5, #4294967295
 801ab74:	60fb      	str	r3, [r7, #12]
 801ab76:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 801ab7a:	e9c7 3408 	strd	r3, r4, [r7, #32]

    /* Pickup the number of dirty sectors currently in the cache.  */
    remaining_dirty =  media_ptr -> fx_media_sector_cache_dirty_count;
 801ab7e:	69fb      	ldr	r3, [r7, #28]
 801ab80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ab82:	633b      	str	r3, [r7, #48]	; 0x30

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_MEDIA_FLUSH, media_ptr, media_ptr -> fx_media_sector_cache_dirty_count, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

    /* Determine what type of cache configuration we have.  */
    if (media_ptr -> fx_media_sector_cache_hashed == FX_FALSE)
 801ab84:	69fb      	ldr	r3, [r7, #28]
 801ab86:	691b      	ldr	r3, [r3, #16]
 801ab88:	2b00      	cmp	r3, #0
 801ab8a:	f040 80b4 	bne.w	801acf6 <_fx_utility_logical_sector_flush+0x1a6>

        /* Linear cache present, simply walk through the search list until
           an unused cache entry is present.  */

        /* Flush and invalidate the internal logical sector cache.  */
        cache_size =            media_ptr -> fx_media_sector_cache_size;
 801ab8e:	69fb      	ldr	r3, [r7, #28]
 801ab90:	695b      	ldr	r3, [r3, #20]
 801ab92:	64bb      	str	r3, [r7, #72]	; 0x48
        cache_entry =           media_ptr -> fx_media_sector_cache_list_ptr;
 801ab94:	69fb      	ldr	r3, [r7, #28]
 801ab96:	69db      	ldr	r3, [r3, #28]
 801ab98:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Look at the cache entries that have been written to.  */
        while ((cache_size--) && (cache_entry -> fx_cached_sector))
 801ab9a:	e09f      	b.n	801acdc <_fx_utility_logical_sector_flush+0x18c>
        {

            /* Determine if invalidation is not required and there are no
               more dirty sectors. */
            if ((remaining_dirty == 0) && (invalidate == FX_FALSE))
 801ab9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ab9e:	2b00      	cmp	r3, #0
 801aba0:	d103      	bne.n	801abaa <_fx_utility_logical_sector_flush+0x5a>
 801aba2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801aba4:	2b00      	cmp	r3, #0
 801aba6:	f000 81de 	beq.w	801af66 <_fx_utility_logical_sector_flush+0x416>
                /* Yes, nothing left to do.  */
                break;
            }

            /* Determine if there are any more sectors to process.  */
            if (sectors == 0)
 801abaa:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 801abae:	4313      	orrs	r3, r2
 801abb0:	f000 81db 	beq.w	801af6a <_fx_utility_logical_sector_flush+0x41a>
                /* No more sectors required to process.  */
                break;
            }

            /* Determine if this cached sector is within the specified range and is valid.  */
            if ((cache_entry -> fx_cached_sector_valid) &&
 801abb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801abb6:	7c5b      	ldrb	r3, [r3, #17]
 801abb8:	2b00      	cmp	r3, #0
 801abba:	f000 808c 	beq.w	801acd6 <_fx_utility_logical_sector_flush+0x186>
                (cache_entry -> fx_cached_sector >= starting_sector) &&
 801abbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801abc0:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
            if ((cache_entry -> fx_cached_sector_valid) &&
 801abc4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801abc8:	4290      	cmp	r0, r2
 801abca:	eb71 0303 	sbcs.w	r3, r1, r3
 801abce:	f0c0 8082 	bcc.w	801acd6 <_fx_utility_logical_sector_flush+0x186>
                (cache_entry -> fx_cached_sector <= ending_sector))
 801abd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801abd4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
                (cache_entry -> fx_cached_sector >= starting_sector) &&
 801abd8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 801abdc:	4290      	cmp	r0, r2
 801abde:	eb71 0303 	sbcs.w	r3, r1, r3
 801abe2:	d378      	bcc.n	801acd6 <_fx_utility_logical_sector_flush+0x186>
            {

                /* Yes, the cache entry is valid and within the specified range. Determine if
                   the requested sector has been written to.  */
                if (cache_entry -> fx_cached_sector_buffer_dirty)
 801abe4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801abe6:	7c1b      	ldrb	r3, [r3, #16]
 801abe8:	2b00      	cmp	r3, #0
 801abea:	d04d      	beq.n	801ac88 <_fx_utility_logical_sector_flush+0x138>
                {

                    /* Yes, write the cached sector out to the media.  */

                    /* Check for write protect at the media level (set by driver).  */
                    if (media_ptr -> fx_media_driver_write_protect == FX_FALSE)
 801abec:	69fb      	ldr	r3, [r7, #28]
 801abee:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 801abf2:	2b00      	cmp	r3, #0
 801abf4:	d148      	bne.n	801ac88 <_fx_utility_logical_sector_flush+0x138>
                    {

#ifndef FX_MEDIA_STATISTICS_DISABLE

                        /* Increment the number of driver write sector(s) requests.  */
                        media_ptr -> fx_media_driver_write_requests++;
 801abf6:	69fb      	ldr	r3, [r7, #28]
 801abf8:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 801abfc:	1c5a      	adds	r2, r3, #1
 801abfe:	69fb      	ldr	r3, [r7, #28]
 801ac00:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
#endif

                        /* Build write request to the driver.  */
                        media_ptr -> fx_media_driver_request =          FX_DRIVER_WRITE;
 801ac04:	69fb      	ldr	r3, [r7, #28]
 801ac06:	2201      	movs	r2, #1
 801ac08:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
                        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 801ac0c:	69fb      	ldr	r3, [r7, #28]
 801ac0e:	2290      	movs	r2, #144	; 0x90
 801ac10:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
                        media_ptr -> fx_media_driver_buffer =           cache_entry -> fx_cached_sector_memory_buffer;
 801ac14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801ac16:	681a      	ldr	r2, [r3, #0]
 801ac18:	69fb      	ldr	r3, [r7, #28]
 801ac1a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#ifdef FX_DRIVER_USE_64BIT_LBA
                        media_ptr -> fx_media_driver_logical_sector =   cache_entry -> fx_cached_sector;
#else
                        media_ptr -> fx_media_driver_logical_sector =   (ULONG)cache_entry -> fx_cached_sector;
 801ac1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801ac20:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801ac24:	69fb      	ldr	r3, [r7, #28]
 801ac26:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#endif
                        media_ptr -> fx_media_driver_sectors =          1;
 801ac2a:	69fb      	ldr	r3, [r7, #28]
 801ac2c:	2201      	movs	r2, #1
 801ac2e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
                        media_ptr -> fx_media_driver_sector_type =      cache_entry -> fx_cached_sector_type;
 801ac32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801ac34:	7c9b      	ldrb	r3, [r3, #18]
 801ac36:	461a      	mov	r2, r3
 801ac38:	69fb      	ldr	r3, [r7, #28]
 801ac3a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

                        /* Sectors other than FX_DATA_SECTOR will never be dirty when FX_FAULT_TOLERANT is defined. */
#ifndef FX_FAULT_TOLERANT
                        /* Determine if the system write flag needs to be set.  */
                        if (cache_entry -> fx_cached_sector_type != FX_DATA_SECTOR)
 801ac3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801ac40:	7c9b      	ldrb	r3, [r3, #18]
 801ac42:	2b04      	cmp	r3, #4
 801ac44:	d003      	beq.n	801ac4e <_fx_utility_logical_sector_flush+0xfe>
                        {

                            /* Yes, a system sector write is present so set the flag.  The driver
                               can use this flag to make extra safeguards in writing the sector
                               out, yielding more fault tolerance.  */
                            media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 801ac46:	69fb      	ldr	r3, [r7, #28]
 801ac48:	2201      	movs	r2, #1
 801ac4a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

                        /* If trace is enabled, insert this event into the trace buffer.  */
                        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_WRITE, media_ptr, cache_entry -> fx_cached_sector, 1, cache_entry -> fx_cached_sector_memory_buffer, FX_TRACE_INTERNAL_EVENTS, 0, 0)

                        /* Invoke the driver to write the sector.  */
                        (media_ptr -> fx_media_driver_entry) (media_ptr);
 801ac4e:	69fb      	ldr	r3, [r7, #28]
 801ac50:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 801ac54:	69f8      	ldr	r0, [r7, #28]
 801ac56:	4798      	blx	r3

                        /* Clear the system write flag.  */
                        media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 801ac58:	69fb      	ldr	r3, [r7, #28]
 801ac5a:	2200      	movs	r2, #0
 801ac5c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

                        /* Check for successful completion.  */
                        if (media_ptr -> fx_media_driver_status)
 801ac60:	69fb      	ldr	r3, [r7, #28]
 801ac62:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801ac66:	2b00      	cmp	r3, #0
 801ac68:	d003      	beq.n	801ac72 <_fx_utility_logical_sector_flush+0x122>
                        {

                            /* Error writing a cached sector out.  Return the
                               error status.  */
                            return(media_ptr -> fx_media_driver_status);
 801ac6a:	69fb      	ldr	r3, [r7, #28]
 801ac6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801ac70:	e17f      	b.n	801af72 <_fx_utility_logical_sector_flush+0x422>
                        }

                        /* Clear the buffer dirty flag since it has been flushed
                           out.  */
                        cache_entry -> fx_cached_sector_buffer_dirty =  FX_FALSE;
 801ac72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801ac74:	2200      	movs	r2, #0
 801ac76:	741a      	strb	r2, [r3, #16]

                        /* Decrement the number of dirty sectors currently in the cache.  */
                        media_ptr -> fx_media_sector_cache_dirty_count--;
 801ac78:	69fb      	ldr	r3, [r7, #28]
 801ac7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ac7c:	1e5a      	subs	r2, r3, #1
 801ac7e:	69fb      	ldr	r3, [r7, #28]
 801ac80:	625a      	str	r2, [r3, #36]	; 0x24
                        remaining_dirty--;
 801ac82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ac84:	3b01      	subs	r3, #1
 801ac86:	633b      	str	r3, [r7, #48]	; 0x30
                    }
                }

                /* Determine if the invalidate option is specified.  */
                if (invalidate)
 801ac88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801ac8a:	2b00      	cmp	r3, #0
 801ac8c:	d018      	beq.n	801acc0 <_fx_utility_logical_sector_flush+0x170>
                {

                    /* Invalidate the cache entry.  */
                    cache_entry -> fx_cached_sector_valid =  FX_FALSE;
 801ac8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801ac90:	2200      	movs	r2, #0
 801ac92:	745a      	strb	r2, [r3, #17]

                    /* Place all ones in the sector number.  */
                    cache_entry -> fx_cached_sector =  (~(ULONG64)0);
 801ac94:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801ac96:	f04f 32ff 	mov.w	r2, #4294967295
 801ac9a:	f04f 33ff 	mov.w	r3, #4294967295
 801ac9e:	e9c1 2302 	strd	r2, r3, [r1, #8]

                    /* Determine if this sector is still dirty, this could be the case if
                       write protection was turned on.  */
                    if (cache_entry -> fx_cached_sector_buffer_dirty)
 801aca2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801aca4:	7c1b      	ldrb	r3, [r3, #16]
 801aca6:	2b00      	cmp	r3, #0
 801aca8:	d00a      	beq.n	801acc0 <_fx_utility_logical_sector_flush+0x170>
                    {

                        /* Yes, clear the dirty flag.  */
                        cache_entry -> fx_cached_sector_buffer_dirty =  FX_FALSE;
 801acaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801acac:	2200      	movs	r2, #0
 801acae:	741a      	strb	r2, [r3, #16]

                        /* Decrement the number of dirty sectors currently in the cache.  */
                        media_ptr -> fx_media_sector_cache_dirty_count--;
 801acb0:	69fb      	ldr	r3, [r7, #28]
 801acb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801acb4:	1e5a      	subs	r2, r3, #1
 801acb6:	69fb      	ldr	r3, [r7, #28]
 801acb8:	625a      	str	r2, [r3, #36]	; 0x24
                        remaining_dirty--;
 801acba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801acbc:	3b01      	subs	r3, #1
 801acbe:	633b      	str	r3, [r7, #48]	; 0x30
                    }
                }

                /* Decrement the number of sectors in the range that have been processed.  */
                sectors--;
 801acc0:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 801acc4:	1e51      	subs	r1, r2, #1
 801acc6:	6039      	str	r1, [r7, #0]
 801acc8:	f143 33ff 	adc.w	r3, r3, #4294967295
 801accc:	607b      	str	r3, [r7, #4]
 801acce:	e9d7 3400 	ldrd	r3, r4, [r7]
 801acd2:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
            }

            /* Move to the next entry in the sector cache.  */
            cache_entry =  cache_entry -> fx_cached_sector_next_used;
 801acd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801acd8:	695b      	ldr	r3, [r3, #20]
 801acda:	64fb      	str	r3, [r7, #76]	; 0x4c
        while ((cache_size--) && (cache_entry -> fx_cached_sector))
 801acdc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801acde:	1e5a      	subs	r2, r3, #1
 801ace0:	64ba      	str	r2, [r7, #72]	; 0x48
 801ace2:	2b00      	cmp	r3, #0
 801ace4:	f000 8144 	beq.w	801af70 <_fx_utility_logical_sector_flush+0x420>
 801ace8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801acea:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801acee:	4313      	orrs	r3, r2
 801acf0:	f47f af54 	bne.w	801ab9c <_fx_utility_logical_sector_flush+0x4c>
 801acf4:	e13c      	b.n	801af70 <_fx_utility_logical_sector_flush+0x420>
    }
    else
    {

        /* Hashed cache is present. Pickup the cache size.  */
        cache_size =            media_ptr -> fx_media_sector_cache_size;
 801acf6:	69fb      	ldr	r3, [r7, #28]
 801acf8:	695b      	ldr	r3, [r3, #20]
 801acfa:	64bb      	str	r3, [r7, #72]	; 0x48

        /* Initialize the loop control parameters.  */
        bit_set =  0;
 801acfc:	2300      	movs	r3, #0
 801acfe:	643b      	str	r3, [r7, #64]	; 0x40
        valid_bit_map =  media_ptr -> fx_media_sector_cache_hashed_sector_valid;
 801ad00:	69fb      	ldr	r3, [r7, #28]
 801ad02:	6a1b      	ldr	r3, [r3, #32]
 801ad04:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Determine how to process the hashed cache based on the number of sectors
           to process. If the sequential sector range is less than the bit map size,
           simply use the starting sector to derive the index into the cache.  */
        if (sectors < 32)
 801ad06:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 801ad0a:	2a20      	cmp	r2, #32
 801ad0c:	f173 0300 	sbcs.w	r3, r3, #0
 801ad10:	d202      	bcs.n	801ad18 <_fx_utility_logical_sector_flush+0x1c8>
        {
            use_starting_sector =  FX_TRUE;
 801ad12:	2301      	movs	r3, #1
 801ad14:	63fb      	str	r3, [r7, #60]	; 0x3c
 801ad16:	e121      	b.n	801af5c <_fx_utility_logical_sector_flush+0x40c>
        }
        else
        {
            use_starting_sector =  FX_FALSE;
 801ad18:	2300      	movs	r3, #0
 801ad1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        /* Determine if there is anything valid in the cache.  */
        while (valid_bit_map)
 801ad1c:	e11e      	b.n	801af5c <_fx_utility_logical_sector_flush+0x40c>
        {

            /* Determine if invalidation is not required and there are no
               more dirty sectors. */
            if ((remaining_dirty == 0) && (invalidate == FX_FALSE))
 801ad1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ad20:	2b00      	cmp	r3, #0
 801ad22:	d103      	bne.n	801ad2c <_fx_utility_logical_sector_flush+0x1dc>
 801ad24:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801ad26:	2b00      	cmp	r3, #0
 801ad28:	f000 8121 	beq.w	801af6e <_fx_utility_logical_sector_flush+0x41e>
                /* Yes, nothing left to do.  */
                break;
            }

            /* Determine if there are any more sectors to process.  */
            if ((sectors == 0) || (starting_sector > ending_sector))
 801ad2c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 801ad30:	4313      	orrs	r3, r2
 801ad32:	f000 811d 	beq.w	801af70 <_fx_utility_logical_sector_flush+0x420>
 801ad36:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801ad3a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 801ad3e:	4290      	cmp	r0, r2
 801ad40:	eb71 0303 	sbcs.w	r3, r1, r3
 801ad44:	f0c0 8114 	bcc.w	801af70 <_fx_utility_logical_sector_flush+0x420>
                /* No more sectors required to process.  */
                break;
            }

            /* Determine how to compute the hash index.  */
            if (use_starting_sector)
 801ad48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ad4a:	2b00      	cmp	r3, #0
 801ad4c:	d015      	beq.n	801ad7a <_fx_utility_logical_sector_flush+0x22a>
            {

                /* Calculate the hash value of this sector using the lower bits.  */
                index =  (ULONG)(starting_sector & media_ptr -> fx_media_sector_cache_hash_mask);
 801ad4e:	693a      	ldr	r2, [r7, #16]
 801ad50:	69fb      	ldr	r3, [r7, #28]
 801ad52:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 801ad56:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 801ad5a:	4013      	ands	r3, r2
 801ad5c:	63bb      	str	r3, [r7, #56]	; 0x38

                /* Calculate the bit set indicating there is one or more valid sectors at this cache index.  */
                bit_set =  (index % 32);
 801ad5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ad60:	f003 031f 	and.w	r3, r3, #31
 801ad64:	643b      	str	r3, [r7, #64]	; 0x40

                /* Compute the actual array index by multiplying by the cache depth.  */
                index =  (bit_set * FX_SECTOR_CACHE_DEPTH);
 801ad66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801ad68:	009b      	lsls	r3, r3, #2
 801ad6a:	63bb      	str	r3, [r7, #56]	; 0x38
 801ad6c:	e00d      	b.n	801ad8a <_fx_utility_logical_sector_flush+0x23a>
                /* Find the next set bit.  */
                while ((valid_bit_map & 1) == 0)
                {

                    /* Otherwise, shift down the bit in the bit map.  */
                    valid_bit_map =  valid_bit_map >> 1;
 801ad6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ad70:	085b      	lsrs	r3, r3, #1
 801ad72:	62fb      	str	r3, [r7, #44]	; 0x2c

                    /* Increment the set bit marker.  */
                    bit_set++;
 801ad74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801ad76:	3301      	adds	r3, #1
 801ad78:	643b      	str	r3, [r7, #64]	; 0x40
                while ((valid_bit_map & 1) == 0)
 801ad7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ad7c:	f003 0301 	and.w	r3, r3, #1
 801ad80:	2b00      	cmp	r3, #0
 801ad82:	d0f4      	beq.n	801ad6e <_fx_utility_logical_sector_flush+0x21e>
                }

                /* Compute the first actual index into the hashed cache.  */
                index =  (bit_set * FX_SECTOR_CACHE_DEPTH);
 801ad84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801ad86:	009b      	lsls	r3, r3, #2
 801ad88:	63bb      	str	r3, [r7, #56]	; 0x38
            /* At this point, bit_set represents the next group of hashed sectors that could
               have valid cache entries and index represents the index into the sector cache
               of that sector group.  */

            /* Clear the remaining valid sectors for this entry in the bit map.  */
            remaining_valid =  0;
 801ad8a:	2300      	movs	r3, #0
 801ad8c:	637b      	str	r3, [r7, #52]	; 0x34
            /* Loop to check the corresponding hash entries.  */
            do
            {

                /* Setup pointer to the cache entry.  */
                cache_entry =  &(media_ptr -> fx_media_sector_cache[index]);
 801ad8e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801ad90:	4613      	mov	r3, r2
 801ad92:	005b      	lsls	r3, r3, #1
 801ad94:	4413      	add	r3, r2
 801ad96:	00db      	lsls	r3, r3, #3
 801ad98:	f503 634a 	add.w	r3, r3, #3232	; 0xca0
 801ad9c:	69fa      	ldr	r2, [r7, #28]
 801ad9e:	4413      	add	r3, r2
 801ada0:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Loop to examine the full depth of the hashed cache.  */
                for (i = 0; i < 4; i++)
 801ada2:	2300      	movs	r3, #0
 801ada4:	647b      	str	r3, [r7, #68]	; 0x44
 801ada6:	e0a7      	b.n	801aef8 <_fx_utility_logical_sector_flush+0x3a8>
                {

                    /* Determine if this cached sector is within the specified range and is valid.  */
                    if ((cache_entry -> fx_cached_sector_valid) &&
 801ada8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801adaa:	7c5b      	ldrb	r3, [r3, #17]
 801adac:	2b00      	cmp	r3, #0
 801adae:	f000 8089 	beq.w	801aec4 <_fx_utility_logical_sector_flush+0x374>
                        (cache_entry -> fx_cached_sector >= starting_sector) &&
 801adb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801adb4:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
                    if ((cache_entry -> fx_cached_sector_valid) &&
 801adb8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801adbc:	4290      	cmp	r0, r2
 801adbe:	eb71 0303 	sbcs.w	r3, r1, r3
 801adc2:	d37f      	bcc.n	801aec4 <_fx_utility_logical_sector_flush+0x374>
                        (cache_entry -> fx_cached_sector <= ending_sector))
 801adc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801adc6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
                        (cache_entry -> fx_cached_sector >= starting_sector) &&
 801adca:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 801adce:	4290      	cmp	r0, r2
 801add0:	eb71 0303 	sbcs.w	r3, r1, r3
 801add4:	d376      	bcc.n	801aec4 <_fx_utility_logical_sector_flush+0x374>
                    {

                        /* Determine if the requested sector has been written to.  */
                        if (cache_entry -> fx_cached_sector_buffer_dirty)
 801add6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801add8:	7c1b      	ldrb	r3, [r3, #16]
 801adda:	2b00      	cmp	r3, #0
 801addc:	d04d      	beq.n	801ae7a <_fx_utility_logical_sector_flush+0x32a>


                            /* Yes, write the cached sector out to the media.  */

                            /* Check for write protect at the media level (set by driver).  */
                            if (media_ptr -> fx_media_driver_write_protect == FX_FALSE)
 801adde:	69fb      	ldr	r3, [r7, #28]
 801ade0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 801ade4:	2b00      	cmp	r3, #0
 801ade6:	d148      	bne.n	801ae7a <_fx_utility_logical_sector_flush+0x32a>
                            {

#ifndef FX_MEDIA_STATISTICS_DISABLE

                                /* Increment the number of driver write sector(s) requests.  */
                                media_ptr -> fx_media_driver_write_requests++;
 801ade8:	69fb      	ldr	r3, [r7, #28]
 801adea:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 801adee:	1c5a      	adds	r2, r3, #1
 801adf0:	69fb      	ldr	r3, [r7, #28]
 801adf2:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
#endif

                                /* Build Write request to the driver.  */
                                media_ptr -> fx_media_driver_request =          FX_DRIVER_WRITE;
 801adf6:	69fb      	ldr	r3, [r7, #28]
 801adf8:	2201      	movs	r2, #1
 801adfa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
                                media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 801adfe:	69fb      	ldr	r3, [r7, #28]
 801ae00:	2290      	movs	r2, #144	; 0x90
 801ae02:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
                                media_ptr -> fx_media_driver_buffer =           cache_entry -> fx_cached_sector_memory_buffer;
 801ae06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801ae08:	681a      	ldr	r2, [r3, #0]
 801ae0a:	69fb      	ldr	r3, [r7, #28]
 801ae0c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#ifdef FX_DRIVER_USE_64BIT_LBA
                                media_ptr -> fx_media_driver_logical_sector =   cache_entry -> fx_cached_sector;
#else
                                media_ptr -> fx_media_driver_logical_sector =   (ULONG)cache_entry -> fx_cached_sector;
 801ae10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801ae12:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801ae16:	69fb      	ldr	r3, [r7, #28]
 801ae18:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#endif
                                media_ptr -> fx_media_driver_sectors =          1;
 801ae1c:	69fb      	ldr	r3, [r7, #28]
 801ae1e:	2201      	movs	r2, #1
 801ae20:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
                                media_ptr -> fx_media_driver_sector_type =      cache_entry -> fx_cached_sector_type;
 801ae24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801ae26:	7c9b      	ldrb	r3, [r3, #18]
 801ae28:	461a      	mov	r2, r3
 801ae2a:	69fb      	ldr	r3, [r7, #28]
 801ae2c:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

                                /* Sectors other than FX_DATA_SECTOR will never be dirty when FX_FAULT_TOLERANT is defined. */
#ifndef FX_FAULT_TOLERANT
                                /* Determine if the system write flag needs to be set.  */
                                if (cache_entry -> fx_cached_sector_type != FX_DATA_SECTOR)
 801ae30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801ae32:	7c9b      	ldrb	r3, [r3, #18]
 801ae34:	2b04      	cmp	r3, #4
 801ae36:	d003      	beq.n	801ae40 <_fx_utility_logical_sector_flush+0x2f0>
                                {

                                    /* Yes, a system sector write is present so set the flag.  The driver
                                       can use this flag to make extra safeguards in writing the sector
                                       out, yielding more fault tolerance.  */
                                    media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 801ae38:	69fb      	ldr	r3, [r7, #28]
 801ae3a:	2201      	movs	r2, #1
 801ae3c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

                                /* If trace is enabled, insert this event into the trace buffer.  */
                                FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_WRITE, media_ptr, cache_entry -> fx_cached_sector, 1, cache_entry -> fx_cached_sector_memory_buffer, FX_TRACE_INTERNAL_EVENTS, 0, 0)

                                /* Invoke the driver to write the sector.  */
                                (media_ptr -> fx_media_driver_entry) (media_ptr);
 801ae40:	69fb      	ldr	r3, [r7, #28]
 801ae42:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 801ae46:	69f8      	ldr	r0, [r7, #28]
 801ae48:	4798      	blx	r3

                                /* Clear the system write flag.  */
                                media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 801ae4a:	69fb      	ldr	r3, [r7, #28]
 801ae4c:	2200      	movs	r2, #0
 801ae4e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

                                /* Check for successful completion.  */
                                if (media_ptr -> fx_media_driver_status)
 801ae52:	69fb      	ldr	r3, [r7, #28]
 801ae54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801ae58:	2b00      	cmp	r3, #0
 801ae5a:	d003      	beq.n	801ae64 <_fx_utility_logical_sector_flush+0x314>
                                {

                                    /* Error writing a cached sector out.  Return the
                                       error status.  */
                                    return(media_ptr -> fx_media_driver_status);
 801ae5c:	69fb      	ldr	r3, [r7, #28]
 801ae5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801ae62:	e086      	b.n	801af72 <_fx_utility_logical_sector_flush+0x422>
                                }

                                /* Clear the buffer dirty flag since it has been flushed
                                   out.  */
                                cache_entry -> fx_cached_sector_buffer_dirty =  FX_FALSE;
 801ae64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801ae66:	2200      	movs	r2, #0
 801ae68:	741a      	strb	r2, [r3, #16]

                                /* Decrement the number of dirty sectors currently in the cache.  */
                                media_ptr -> fx_media_sector_cache_dirty_count--;
 801ae6a:	69fb      	ldr	r3, [r7, #28]
 801ae6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ae6e:	1e5a      	subs	r2, r3, #1
 801ae70:	69fb      	ldr	r3, [r7, #28]
 801ae72:	625a      	str	r2, [r3, #36]	; 0x24
                                remaining_dirty--;
 801ae74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ae76:	3b01      	subs	r3, #1
 801ae78:	633b      	str	r3, [r7, #48]	; 0x30
                            }
                        }

                        /* Determine if the invalidate option is specified.  */
                        if (invalidate)
 801ae7a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801ae7c:	2b00      	cmp	r3, #0
 801ae7e:	d018      	beq.n	801aeb2 <_fx_utility_logical_sector_flush+0x362>
                        {

                            /* Invalidate the cache entry.  */
                            cache_entry -> fx_cached_sector_valid =  FX_FALSE;
 801ae80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801ae82:	2200      	movs	r2, #0
 801ae84:	745a      	strb	r2, [r3, #17]

                            /* Place all ones in the sector number.  */
                            cache_entry -> fx_cached_sector =  (~(ULONG64)0);
 801ae86:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801ae88:	f04f 32ff 	mov.w	r2, #4294967295
 801ae8c:	f04f 33ff 	mov.w	r3, #4294967295
 801ae90:	e9c1 2302 	strd	r2, r3, [r1, #8]

                            /* Determine if this sector is still dirty, this could be the case if
                               write protection was turned on.  */
                            if (cache_entry -> fx_cached_sector_buffer_dirty)
 801ae94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801ae96:	7c1b      	ldrb	r3, [r3, #16]
 801ae98:	2b00      	cmp	r3, #0
 801ae9a:	d00a      	beq.n	801aeb2 <_fx_utility_logical_sector_flush+0x362>
                            {

                                /* Yes, clear the dirty flag.  */
                                cache_entry -> fx_cached_sector_buffer_dirty =  FX_FALSE;
 801ae9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801ae9e:	2200      	movs	r2, #0
 801aea0:	741a      	strb	r2, [r3, #16]

                                /* Decrement the number of dirty sectors currently in the cache.  */
                                media_ptr -> fx_media_sector_cache_dirty_count--;
 801aea2:	69fb      	ldr	r3, [r7, #28]
 801aea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801aea6:	1e5a      	subs	r2, r3, #1
 801aea8:	69fb      	ldr	r3, [r7, #28]
 801aeaa:	625a      	str	r2, [r3, #36]	; 0x24
                                remaining_dirty--;
 801aeac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801aeae:	3b01      	subs	r3, #1
 801aeb0:	633b      	str	r3, [r7, #48]	; 0x30
                            }
                        }

                        /* Decrement the number of sectors in the range that have been processed.  */
                        sectors--;
 801aeb2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 801aeb6:	f112 38ff 	adds.w	r8, r2, #4294967295
 801aeba:	f143 39ff 	adc.w	r9, r3, #4294967295
 801aebe:	e9c7 891c 	strd	r8, r9, [r7, #112]	; 0x70
 801aec2:	e006      	b.n	801aed2 <_fx_utility_logical_sector_flush+0x382>
                    }
                    else
                    {

                        /* Determine if the sector is valid.  */
                        if (cache_entry -> fx_cached_sector_valid)
 801aec4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801aec6:	7c5b      	ldrb	r3, [r3, #17]
 801aec8:	2b00      	cmp	r3, #0
 801aeca:	d002      	beq.n	801aed2 <_fx_utility_logical_sector_flush+0x382>
                        {

                            /* Increment the number of still remaining but out of range sectors.  */
                            remaining_valid++;
 801aecc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801aece:	3301      	adds	r3, #1
 801aed0:	637b      	str	r3, [r7, #52]	; 0x34
                        }
                    }

                    /* Determine if invalidation is not required and there are no
                       more dirty sectors. */
                    if ((remaining_dirty == 0) && (invalidate == FX_FALSE))
 801aed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801aed4:	2b00      	cmp	r3, #0
 801aed6:	d102      	bne.n	801aede <_fx_utility_logical_sector_flush+0x38e>
 801aed8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801aeda:	2b00      	cmp	r3, #0
 801aedc:	d011      	beq.n	801af02 <_fx_utility_logical_sector_flush+0x3b2>
                        /* Yes, nothing left to do.  */
                        break;
                    }

                    /* Determine if there are any more sectors to process.  */
                    if ((sectors == 0) && (invalidate == FX_FALSE))
 801aede:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 801aee2:	4313      	orrs	r3, r2
 801aee4:	d102      	bne.n	801aeec <_fx_utility_logical_sector_flush+0x39c>
 801aee6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801aee8:	2b00      	cmp	r3, #0
 801aeea:	d00c      	beq.n	801af06 <_fx_utility_logical_sector_flush+0x3b6>
                        /* No more sectors required to process.  */
                        break;
                    }

                    /* Move to the next cache entry.  */
                    cache_entry++;
 801aeec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801aeee:	3318      	adds	r3, #24
 801aef0:	64fb      	str	r3, [r7, #76]	; 0x4c
                for (i = 0; i < 4; i++)
 801aef2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801aef4:	3301      	adds	r3, #1
 801aef6:	647b      	str	r3, [r7, #68]	; 0x44
 801aef8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801aefa:	2b03      	cmp	r3, #3
 801aefc:	f67f af54 	bls.w	801ada8 <_fx_utility_logical_sector_flush+0x258>
 801af00:	e002      	b.n	801af08 <_fx_utility_logical_sector_flush+0x3b8>
                        break;
 801af02:	bf00      	nop
 801af04:	e000      	b.n	801af08 <_fx_utility_logical_sector_flush+0x3b8>
                        break;
 801af06:	bf00      	nop
                }

                /* Move the index to the next position since the bit map can only represent 32
                   cache entries.  */
                index =  index + (32 * FX_SECTOR_CACHE_DEPTH);
 801af08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801af0a:	3380      	adds	r3, #128	; 0x80
 801af0c:	63bb      	str	r3, [r7, #56]	; 0x38
            } while (index < cache_size);
 801af0e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801af10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801af12:	429a      	cmp	r2, r3
 801af14:	f4ff af3b 	bcc.w	801ad8e <_fx_utility_logical_sector_flush+0x23e>

            /* Determine if invalidation was required and there are no more valid sectors
               associated with this bit position.  */
            if ((invalidate) && (remaining_valid == 0))
 801af18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801af1a:	2b00      	cmp	r3, #0
 801af1c:	d00c      	beq.n	801af38 <_fx_utility_logical_sector_flush+0x3e8>
 801af1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801af20:	2b00      	cmp	r3, #0
 801af22:	d109      	bne.n	801af38 <_fx_utility_logical_sector_flush+0x3e8>
            {

                /* Clear this bit position.  */
                media_ptr -> fx_media_sector_cache_hashed_sector_valid &=  ~(((ULONG)1) << bit_set);
 801af24:	69fb      	ldr	r3, [r7, #28]
 801af26:	6a1a      	ldr	r2, [r3, #32]
 801af28:	2101      	movs	r1, #1
 801af2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801af2c:	fa01 f303 	lsl.w	r3, r1, r3
 801af30:	43db      	mvns	r3, r3
 801af32:	401a      	ands	r2, r3
 801af34:	69fb      	ldr	r3, [r7, #28]
 801af36:	621a      	str	r2, [r3, #32]
            }

            /* Determine if the starting sector is being used for examination of the hash.  */
            if (use_starting_sector)
 801af38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801af3a:	2b00      	cmp	r3, #0
 801af3c:	d008      	beq.n	801af50 <_fx_utility_logical_sector_flush+0x400>
            {

                /* Move to the next sector.  */
                starting_sector++;
 801af3e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801af42:	f112 0a01 	adds.w	sl, r2, #1
 801af46:	f143 0b00 	adc.w	fp, r3, #0
 801af4a:	e9c7 ab04 	strd	sl, fp, [r7, #16]
 801af4e:	e005      	b.n	801af5c <_fx_utility_logical_sector_flush+0x40c>
            }
            else
            {

                /* Move to next bit in the map.  */
                valid_bit_map =  valid_bit_map >> 1;
 801af50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801af52:	085b      	lsrs	r3, r3, #1
 801af54:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Increment the set bit marker.  */
                bit_set++;
 801af56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801af58:	3301      	adds	r3, #1
 801af5a:	643b      	str	r3, [r7, #64]	; 0x40
        while (valid_bit_map)
 801af5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801af5e:	2b00      	cmp	r3, #0
 801af60:	f47f aedd 	bne.w	801ad1e <_fx_utility_logical_sector_flush+0x1ce>
 801af64:	e004      	b.n	801af70 <_fx_utility_logical_sector_flush+0x420>
                break;
 801af66:	bf00      	nop
 801af68:	e002      	b.n	801af70 <_fx_utility_logical_sector_flush+0x420>
                break;
 801af6a:	bf00      	nop
 801af6c:	e000      	b.n	801af70 <_fx_utility_logical_sector_flush+0x420>
                break;
 801af6e:	bf00      	nop
    FX_PARAMETER_NOT_USED(sectors);
    FX_PARAMETER_NOT_USED(invalidate);
#endif /* FX_DISABLE_CACHE */

    /* If we get here, return successful status to the caller.  */
    return(FX_SUCCESS);
 801af70:	2300      	movs	r3, #0
}
 801af72:	4618      	mov	r0, r3
 801af74:	3750      	adds	r7, #80	; 0x50
 801af76:	46bd      	mov	sp, r7
 801af78:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0801af7c <_fx_utility_logical_sector_read>:
/*                                            resulting in version 6.2.0  */
/*                                                                        */
/**************************************************************************/
UINT  _fx_utility_logical_sector_read(FX_MEDIA *media_ptr, ULONG64 logical_sector,
                                      VOID *buffer_ptr, ULONG sectors, UCHAR sector_type)
{
 801af7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801af80:	b09c      	sub	sp, #112	; 0x70
 801af82:	af04      	add	r7, sp, #16
 801af84:	64f8      	str	r0, [r7, #76]	; 0x4c
 801af86:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40


#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Determine if the request is for FAT sector.  */
    if (sector_type == FX_FAT_SECTOR)
 801af8a:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 801af8e:	2b02      	cmp	r3, #2
 801af90:	d106      	bne.n	801afa0 <_fx_utility_logical_sector_read+0x24>
    {

        /* Increment the number of FAT sector reads.  */
        media_ptr -> fx_media_fat_sector_reads++;
 801af92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801af94:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 801af98:	1c5a      	adds	r2, r3, #1
 801af9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801af9c:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    }

    /* Increment the number of logical sectors read.  */
    media_ptr -> fx_media_logical_sector_reads++;
 801afa0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801afa2:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 801afa6:	1c5a      	adds	r2, r3, #1
 801afa8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801afaa:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
    /* Extended port-specific processing macro, which is by default defined to white space.  */
    FX_UTILITY_LOGICAL_SECTOR_READ_EXTENSION

#ifndef FX_DISABLE_CACHE
    /* Determine if the request is for the internal media buffer area.  */
    if ((((UCHAR *)buffer_ptr) >= media_ptr -> fx_media_memory_buffer) &&
 801afae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801afb0:	689a      	ldr	r2, [r3, #8]
 801afb2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801afb6:	4293      	cmp	r3, r2
 801afb8:	f0c0 80d9 	bcc.w	801b16e <_fx_utility_logical_sector_read+0x1f2>
        (((UCHAR *)buffer_ptr) <= media_ptr -> fx_media_sector_cache_end))
 801afbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801afbe:	699a      	ldr	r2, [r3, #24]
    if ((((UCHAR *)buffer_ptr) >= media_ptr -> fx_media_memory_buffer) &&
 801afc0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801afc4:	4293      	cmp	r3, r2
 801afc6:	f200 80d2 	bhi.w	801b16e <_fx_utility_logical_sector_read+0x1f2>
    {

        /* Internal cache buffer is requested.  */

        /* Examine the logical sector cache.  */
        cache_entry = _fx_utility_logical_sector_cache_entry_read(media_ptr, logical_sector, &previous_cache_entry);
 801afca:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801afce:	9300      	str	r3, [sp, #0]
 801afd0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 801afd4:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801afd6:	f7ff faf1 	bl	801a5bc <_fx_utility_logical_sector_cache_entry_read>
 801afda:	6578      	str	r0, [r7, #84]	; 0x54

        /* Was the sector found?  */
        if (cache_entry == FX_NULL)
 801afdc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801afde:	2b00      	cmp	r3, #0
 801afe0:	d101      	bne.n	801afe6 <_fx_utility_logical_sector_read+0x6a>
        {

            /* Yes, the sector was found. Return success!  */
            return(FX_SUCCESS);
 801afe2:	2300      	movs	r3, #0
 801afe4:	e259      	b.n	801b49a <_fx_utility_logical_sector_read+0x51e>
        /* At this point, we need to read in a sector from the media.  */

#ifndef FX_MEDIA_STATISTICS_DISABLE

        /* Increment the number of logical sectors cache read misses.  */
        media_ptr -> fx_media_logical_sector_cache_read_misses++;
 801afe6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801afe8:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 801afec:	1c5a      	adds	r2, r3, #1
 801afee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801aff0:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_LOG_SECTOR_CACHE_MISS, media_ptr, logical_sector, 0, media_ptr -> fx_media_sector_cache_size, FX_TRACE_INTERNAL_EVENTS, 0, 0)
#endif

        /* First, check and see if the last used entry has been
           modified.  */
        if ((cache_entry -> fx_cached_sector_valid) &&
 801aff4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801aff6:	7c5b      	ldrb	r3, [r3, #17]
 801aff8:	2b00      	cmp	r3, #0
 801affa:	d049      	beq.n	801b090 <_fx_utility_logical_sector_read+0x114>
            (cache_entry -> fx_cached_sector_buffer_dirty))
 801affc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801affe:	7c1b      	ldrb	r3, [r3, #16]
        if ((cache_entry -> fx_cached_sector_valid) &&
 801b000:	2b00      	cmp	r3, #0
 801b002:	d045      	beq.n	801b090 <_fx_utility_logical_sector_read+0x114>
               before we read in the new buffer.  */

#ifndef FX_MEDIA_STATISTICS_DISABLE

            /* Increment the number of driver write sector(s) requests.  */
            media_ptr -> fx_media_driver_write_requests++;
 801b004:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b006:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 801b00a:	1c5a      	adds	r2, r3, #1
 801b00c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b00e:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
#endif

            /* Build write request to the driver.  */
            media_ptr -> fx_media_driver_request =          FX_DRIVER_WRITE;
 801b012:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b014:	2201      	movs	r2, #1
 801b016:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
            media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 801b01a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b01c:	2290      	movs	r2, #144	; 0x90
 801b01e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
            media_ptr -> fx_media_driver_buffer =           cache_entry -> fx_cached_sector_memory_buffer;
 801b022:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801b024:	681a      	ldr	r2, [r3, #0]
 801b026:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b028:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#ifdef FX_DRIVER_USE_64BIT_LBA
            media_ptr -> fx_media_driver_logical_sector =   cache_entry -> fx_cached_sector;
#else
            media_ptr -> fx_media_driver_logical_sector =   (ULONG)cache_entry -> fx_cached_sector;
 801b02c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801b02e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801b032:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b034:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#endif
            media_ptr -> fx_media_driver_sectors =          1;
 801b038:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b03a:	2201      	movs	r2, #1
 801b03c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
            media_ptr -> fx_media_driver_sector_type =      cache_entry -> fx_cached_sector_type;
 801b040:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801b042:	7c9b      	ldrb	r3, [r3, #18]
 801b044:	461a      	mov	r2, r3
 801b046:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b048:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

            /* Determine if the sector is a data sector or a system sector.  */
            if (cache_entry -> fx_cached_sector_type != FX_DATA_SECTOR)
 801b04c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801b04e:	7c9b      	ldrb	r3, [r3, #18]
 801b050:	2b04      	cmp	r3, #4
 801b052:	d003      	beq.n	801b05c <_fx_utility_logical_sector_read+0xe0>
            {

                /* System sector is present.  */
                media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 801b054:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b056:	2201      	movs	r2, #1
 801b058:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

            /* If trace is enabled, insert this event into the trace buffer.  */
            FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_WRITE, media_ptr, cache_entry -> fx_cached_sector, 1, cache_entry -> fx_cached_sector_memory_buffer, FX_TRACE_INTERNAL_EVENTS, 0, 0)

            /* Invoke the driver to write the sector.  */
            (media_ptr -> fx_media_driver_entry) (media_ptr);
 801b05c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b05e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 801b062:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801b064:	4798      	blx	r3

            /* Clear the system write flag.  */
            media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 801b066:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b068:	2200      	movs	r2, #0
 801b06a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

            /* Check for successful completion.  */
            if (media_ptr -> fx_media_driver_status)
 801b06e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b070:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801b074:	2b00      	cmp	r3, #0
 801b076:	d003      	beq.n	801b080 <_fx_utility_logical_sector_read+0x104>
            {

                /* Error writing a cached sector out.  Return the
                   error status.  */
                return(media_ptr -> fx_media_driver_status);
 801b078:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b07a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801b07e:	e20c      	b.n	801b49a <_fx_utility_logical_sector_read+0x51e>
            }

            /* Clear the buffer dirty flag since it has been flushed
               out.  */
            cache_entry -> fx_cached_sector_buffer_dirty =  FX_FALSE;
 801b080:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801b082:	2200      	movs	r2, #0
 801b084:	741a      	strb	r2, [r3, #16]

            /* Decrement the number of outstanding dirty cache entries.  */
            media_ptr -> fx_media_sector_cache_dirty_count--;
 801b086:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b08a:	1e5a      	subs	r2, r3, #1
 801b08c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b08e:	625a      	str	r2, [r3, #36]	; 0x24

        /* At this point, we can go out and setup this cached sector
           entry.  */

        /* Compare against logical sector to make sure it is valid.  */
        if (logical_sector >= media_ptr -> fx_media_total_sectors)
 801b090:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b092:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 801b096:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 801b09a:	4290      	cmp	r0, r2
 801b09c:	eb71 0303 	sbcs.w	r3, r1, r3
 801b0a0:	d301      	bcc.n	801b0a6 <_fx_utility_logical_sector_read+0x12a>
        {
            return(FX_SECTOR_INVALID);
 801b0a2:	2389      	movs	r3, #137	; 0x89
 801b0a4:	e1f9      	b.n	801b49a <_fx_utility_logical_sector_read+0x51e>
        }

#ifndef FX_MEDIA_STATISTICS_DISABLE

        /* Increment the number of driver read sector(s) requests.  */
        media_ptr -> fx_media_driver_read_requests++;
 801b0a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b0a8:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 801b0ac:	1c5a      	adds	r2, r3, #1
 801b0ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b0b0:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
#endif

        /* Build Read request to the driver.  */
        media_ptr -> fx_media_driver_request =          FX_DRIVER_READ;
 801b0b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b0b6:	2200      	movs	r2, #0
 801b0b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 801b0bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b0be:	2290      	movs	r2, #144	; 0x90
 801b0c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        media_ptr -> fx_media_driver_buffer =           cache_entry -> fx_cached_sector_memory_buffer;
 801b0c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801b0c6:	681a      	ldr	r2, [r3, #0]
 801b0c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b0ca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#ifdef FX_DRIVER_USE_64BIT_LBA
        media_ptr -> fx_media_driver_logical_sector =   logical_sector;
#else
        media_ptr -> fx_media_driver_logical_sector =   (ULONG)logical_sector;
 801b0ce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801b0d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b0d2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#endif
        media_ptr -> fx_media_driver_sectors =          1;
 801b0d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b0d8:	2201      	movs	r2, #1
 801b0da:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        media_ptr -> fx_media_driver_sector_type =      sector_type;
 801b0de:	f897 2088 	ldrb.w	r2, [r7, #136]	; 0x88
 801b0e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b0e4:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

        /* Determine if the sector is a data sector or a system sector.  */
        if (sector_type == FX_DATA_SECTOR)
 801b0e8:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 801b0ec:	2b04      	cmp	r3, #4
 801b0ee:	d103      	bne.n	801b0f8 <_fx_utility_logical_sector_read+0x17c>
        {

            /* Data sector is present.  */
            media_ptr -> fx_media_driver_data_sector_read =  FX_TRUE;
 801b0f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b0f2:	2201      	movs	r2, #1
 801b0f4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_READ, media_ptr, logical_sector, 1, cache_entry -> fx_cached_sector_memory_buffer, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Invoke the driver to read the sector.  */
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 801b0f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b0fa:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 801b0fe:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801b100:	4798      	blx	r3

        /* Clear data sector is present flag.  */
        media_ptr -> fx_media_driver_data_sector_read =  FX_FALSE;
 801b102:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b104:	2200      	movs	r2, #0
 801b106:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

        /* Determine if the read was successful.  */
        if (media_ptr -> fx_media_driver_status == FX_SUCCESS)
 801b10a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b10c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801b110:	2b00      	cmp	r3, #0
 801b112:	d11a      	bne.n	801b14a <_fx_utility_logical_sector_read+0x1ce>
        {

            /* Remember the sector number.  */
            cache_entry -> fx_cached_sector =  logical_sector;
 801b114:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801b116:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 801b11a:	e9c1 2302 	strd	r2, r3, [r1, #8]

            /* Make the cache entry valid.  */
            cache_entry -> fx_cached_sector_valid =  FX_TRUE;
 801b11e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801b120:	2201      	movs	r2, #1
 801b122:	745a      	strb	r2, [r3, #17]

            /* Remember the sector type.  */
            cache_entry -> fx_cached_sector_type =  sector_type;
 801b124:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801b126:	f897 2088 	ldrb.w	r2, [r7, #136]	; 0x88
 801b12a:	749a      	strb	r2, [r3, #18]

            /* Place this entry that the head of the cached sector
               list.  */

            /* Determine if we need to update the last used list.  */
            if (previous_cache_entry)
 801b12c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b12e:	2b00      	cmp	r3, #0
 801b130:	d015      	beq.n	801b15e <_fx_utility_logical_sector_read+0x1e2>

                /* Yes, the current entry is not at the front of the list
                   so we need to change the order.  */

                /* Link the previous entry to this entry's next pointer.  */
                previous_cache_entry -> fx_cached_sector_next_used =
 801b132:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                    cache_entry -> fx_cached_sector_next_used;
 801b134:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801b136:	6952      	ldr	r2, [r2, #20]
                previous_cache_entry -> fx_cached_sector_next_used =
 801b138:	615a      	str	r2, [r3, #20]

                /* Place this entry at the head of the list.  */
                cache_entry -> fx_cached_sector_next_used =
                    media_ptr -> fx_media_sector_cache_list_ptr;
 801b13a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b13c:	69da      	ldr	r2, [r3, #28]
                cache_entry -> fx_cached_sector_next_used =
 801b13e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801b140:	615a      	str	r2, [r3, #20]
                media_ptr -> fx_media_sector_cache_list_ptr =  cache_entry;
 801b142:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b144:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801b146:	61da      	str	r2, [r3, #28]
 801b148:	e009      	b.n	801b15e <_fx_utility_logical_sector_read+0x1e2>
        }
        else
        {

            /* Invalidate the cache entry on read errors.  */
            cache_entry -> fx_cached_sector_valid =  FX_FALSE;
 801b14a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801b14c:	2200      	movs	r2, #0
 801b14e:	745a      	strb	r2, [r3, #17]

            /* Put all ones in the sector value.  */
            cache_entry -> fx_cached_sector =  (~(ULONG64)0);
 801b150:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801b152:	f04f 32ff 	mov.w	r2, #4294967295
 801b156:	f04f 33ff 	mov.w	r3, #4294967295
 801b15a:	e9c1 2302 	strd	r2, r3, [r1, #8]
        }

        /* Simply setup the pointer to this buffer and return.  */
        media_ptr -> fx_media_memory_buffer =  cache_entry -> fx_cached_sector_memory_buffer;
 801b15e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801b160:	681a      	ldr	r2, [r3, #0]
 801b162:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b164:	609a      	str	r2, [r3, #8]

        /* Return the driver status.  */
        return(media_ptr -> fx_media_driver_status);
 801b166:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b168:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801b16c:	e195      	b.n	801b49a <_fx_utility_logical_sector_read+0x51e>
    {

        /* Direct I/O to application buffer area.  */

        /* Compare against logical sector to make sure it is valid.  */
        if ((logical_sector + sectors - 1) > (ULONG)media_ptr -> fx_media_total_sectors)
 801b16e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801b172:	2200      	movs	r2, #0
 801b174:	469a      	mov	sl, r3
 801b176:	4693      	mov	fp, r2
 801b178:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 801b17c:	eb1a 0402 	adds.w	r4, sl, r2
 801b180:	eb4b 0503 	adc.w	r5, fp, r3
 801b184:	f114 38ff 	adds.w	r8, r4, #4294967295
 801b188:	f145 39ff 	adc.w	r9, r5, #4294967295
 801b18c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b18e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 801b192:	2300      	movs	r3, #0
 801b194:	63ba      	str	r2, [r7, #56]	; 0x38
 801b196:	63fb      	str	r3, [r7, #60]	; 0x3c
 801b198:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 801b19c:	460b      	mov	r3, r1
 801b19e:	4543      	cmp	r3, r8
 801b1a0:	4613      	mov	r3, r2
 801b1a2:	eb73 0309 	sbcs.w	r3, r3, r9
 801b1a6:	d22c      	bcs.n	801b202 <_fx_utility_logical_sector_read+0x286>
        {
            return(FX_SECTOR_INVALID);
 801b1a8:	2389      	movs	r3, #137	; 0x89
 801b1aa:	e176      	b.n	801b49a <_fx_utility_logical_sector_read+0x51e>
        /* Attempt to fill the beginning of the buffer from cached sectors.  */
        while (sectors)
        {

            /* Determine if the sector is in the cache.  */
            if (_fx_utility_logical_sector_cache_entry_read(media_ptr, logical_sector, &previous_cache_entry))
 801b1ac:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801b1b0:	9300      	str	r3, [sp, #0]
 801b1b2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 801b1b6:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801b1b8:	f7ff fa00 	bl	801a5bc <_fx_utility_logical_sector_cache_entry_read>
 801b1bc:	4603      	mov	r3, r0
 801b1be:	2b00      	cmp	r3, #0
 801b1c0:	d124      	bne.n	801b20c <_fx_utility_logical_sector_read+0x290>
                /* Not in the cache - get out of the loop!  */
                break;
            }

            /* Yes, sector is in the cache. Copy the data from the cache to the destination buffer.  */
            _fx_utility_memory_copy(media_ptr -> fx_media_memory_buffer, buffer_ptr, media_ptr -> fx_media_bytes_per_sector); /* Use case of memcpy is verified. */
 801b1c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b1c4:	6898      	ldr	r0, [r3, #8]
 801b1c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b1c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b1ca:	461a      	mov	r2, r3
 801b1cc:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 801b1d0:	f000 fad0 	bl	801b774 <_fx_utility_memory_copy>

            /* Advance the destination buffer.  */
            buffer_ptr =  ((UCHAR *)buffer_ptr) + media_ptr -> fx_media_bytes_per_sector;
 801b1d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b1d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801b1d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801b1dc:	4413      	add	r3, r2
 801b1de:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

            /* Advance the sector and decrement the number of sectors left.  */
            logical_sector++;
 801b1e2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 801b1e6:	1c51      	adds	r1, r2, #1
 801b1e8:	61b9      	str	r1, [r7, #24]
 801b1ea:	f143 0300 	adc.w	r3, r3, #0
 801b1ee:	61fb      	str	r3, [r7, #28]
 801b1f0:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 801b1f4:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
            sectors--;
 801b1f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801b1fc:	3b01      	subs	r3, #1
 801b1fe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        while (sectors)
 801b202:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801b206:	2b00      	cmp	r3, #0
 801b208:	d1d0      	bne.n	801b1ac <_fx_utility_logical_sector_read+0x230>
 801b20a:	e000      	b.n	801b20e <_fx_utility_logical_sector_read+0x292>
                break;
 801b20c:	bf00      	nop
        }

        /* Calculate the end sector.  */
        end_sector = logical_sector + sectors - 1;
 801b20e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801b212:	2200      	movs	r2, #0
 801b214:	633b      	str	r3, [r7, #48]	; 0x30
 801b216:	637a      	str	r2, [r7, #52]	; 0x34
 801b218:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 801b21c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 801b220:	4621      	mov	r1, r4
 801b222:	1889      	adds	r1, r1, r2
 801b224:	62b9      	str	r1, [r7, #40]	; 0x28
 801b226:	4629      	mov	r1, r5
 801b228:	eb43 0101 	adc.w	r1, r3, r1
 801b22c:	62f9      	str	r1, [r7, #44]	; 0x2c
 801b22e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 801b232:	460b      	mov	r3, r1
 801b234:	3b01      	subs	r3, #1
 801b236:	613b      	str	r3, [r7, #16]
 801b238:	4613      	mov	r3, r2
 801b23a:	f143 33ff 	adc.w	r3, r3, #4294967295
 801b23e:	617b      	str	r3, [r7, #20]
 801b240:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 801b244:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58

        /* Attempt to fill the end of the buffer from the opposite direction.  */
        while (sectors)
 801b248:	e02b      	b.n	801b2a2 <_fx_utility_logical_sector_read+0x326>
        {

            /* Determine if the sector is in the cache.  */
            if (_fx_utility_logical_sector_cache_entry_read(media_ptr, end_sector, &previous_cache_entry))
 801b24a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801b24e:	9300      	str	r3, [sp, #0]
 801b250:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 801b254:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801b256:	f7ff f9b1 	bl	801a5bc <_fx_utility_logical_sector_cache_entry_read>
 801b25a:	4603      	mov	r3, r0
 801b25c:	2b00      	cmp	r3, #0
 801b25e:	d125      	bne.n	801b2ac <_fx_utility_logical_sector_read+0x330>
                /* Not in the cache - get out of the loop!  */
                break;
            }

            /* Yes, sector is in the cache. Copy the data from the cache to the destination buffer.  */
            _fx_utility_memory_copy(media_ptr -> fx_media_memory_buffer, /* Use case of memcpy is verified. */
 801b260:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b262:	6898      	ldr	r0, [r3, #8]
                                    ((UCHAR *)buffer_ptr) + ((sectors - 1) * media_ptr -> fx_media_bytes_per_sector),
 801b264:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801b268:	3b01      	subs	r3, #1
 801b26a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801b26c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 801b26e:	fb02 f303 	mul.w	r3, r2, r3
            _fx_utility_memory_copy(media_ptr -> fx_media_memory_buffer, /* Use case of memcpy is verified. */
 801b272:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801b276:	18d1      	adds	r1, r2, r3
                                    media_ptr -> fx_media_bytes_per_sector);
 801b278:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b27a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
            _fx_utility_memory_copy(media_ptr -> fx_media_memory_buffer, /* Use case of memcpy is verified. */
 801b27c:	461a      	mov	r2, r3
 801b27e:	f000 fa79 	bl	801b774 <_fx_utility_memory_copy>

            /* Move sector to previous sector and decrement the number of sectors left.  */
            end_sector--;
 801b282:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 801b286:	1e51      	subs	r1, r2, #1
 801b288:	60b9      	str	r1, [r7, #8]
 801b28a:	f143 33ff 	adc.w	r3, r3, #4294967295
 801b28e:	60fb      	str	r3, [r7, #12]
 801b290:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 801b294:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
            sectors--;
 801b298:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801b29c:	3b01      	subs	r3, #1
 801b29e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        while (sectors)
 801b2a2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801b2a6:	2b00      	cmp	r3, #0
 801b2a8:	d1cf      	bne.n	801b24a <_fx_utility_logical_sector_read+0x2ce>
 801b2aa:	e000      	b.n	801b2ae <_fx_utility_logical_sector_read+0x332>
                break;
 801b2ac:	bf00      	nop
        }

        /* Determine if there are still sectors left to read.  */
        if (sectors == 0)
 801b2ae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801b2b2:	2b00      	cmp	r3, #0
 801b2b4:	d101      	bne.n	801b2ba <_fx_utility_logical_sector_read+0x33e>
        {

            /* No more sectors to read - return success!  */
            return(FX_SUCCESS);
 801b2b6:	2300      	movs	r3, #0
 801b2b8:	e0ef      	b.n	801b49a <_fx_utility_logical_sector_read+0x51e>
        }

        /* Flush and invalidate any entries in the cache that are in this direct I/O read request range.  */
        _fx_utility_logical_sector_flush(media_ptr, logical_sector, (ULONG64) sectors, FX_TRUE);
 801b2ba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801b2be:	2200      	movs	r2, #0
 801b2c0:	623b      	str	r3, [r7, #32]
 801b2c2:	627a      	str	r2, [r7, #36]	; 0x24
 801b2c4:	2301      	movs	r3, #1
 801b2c6:	9302      	str	r3, [sp, #8]
 801b2c8:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 801b2cc:	e9cd 3400 	strd	r3, r4, [sp]
 801b2d0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 801b2d4:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801b2d6:	f7ff fc3b 	bl	801ab50 <_fx_utility_logical_sector_flush>
#endif /* FX_DISABLE_CACHE */

#ifndef FX_MEDIA_STATISTICS_DISABLE

        /* Increment the number of driver read sector(s) requests.  */
        media_ptr -> fx_media_driver_read_requests++;
 801b2da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b2dc:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 801b2e0:	1c5a      	adds	r2, r3, #1
 801b2e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b2e4:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
#endif

        /* Build read request to the driver.  */
        media_ptr -> fx_media_driver_request =          FX_DRIVER_READ;
 801b2e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b2ea:	2200      	movs	r2, #0
 801b2ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 801b2f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b2f2:	2290      	movs	r2, #144	; 0x90
 801b2f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        media_ptr -> fx_media_driver_buffer =           buffer_ptr;
 801b2f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b2fa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801b2fe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#ifdef FX_DRIVER_USE_64BIT_LBA
        media_ptr -> fx_media_driver_logical_sector =   logical_sector;
#else
        media_ptr -> fx_media_driver_logical_sector =   (ULONG)logical_sector;
 801b302:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801b304:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b306:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#endif
        media_ptr -> fx_media_driver_sectors =          sectors;
 801b30a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b30c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 801b310:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        media_ptr -> fx_media_driver_sector_type =      sector_type;
 801b314:	f897 2088 	ldrb.w	r2, [r7, #136]	; 0x88
 801b318:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b31a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

        /* Determine if the sector is a data sector or a system sector.  */
        if (sector_type == FX_DATA_SECTOR)
 801b31e:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 801b322:	2b04      	cmp	r3, #4
 801b324:	d103      	bne.n	801b32e <_fx_utility_logical_sector_read+0x3b2>
        {

            /* Data sector is present.  */
            media_ptr -> fx_media_driver_data_sector_read =  FX_TRUE;
 801b326:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b328:	2201      	movs	r2, #1
 801b32a:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_READ, media_ptr, logical_sector, sectors, buffer_ptr, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Invoke the driver to read the sector.  */
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 801b32e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b330:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 801b334:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801b336:	4798      	blx	r3

        /* Clear data sector is present flag.  */
        media_ptr -> fx_media_driver_data_sector_read =  FX_FALSE;
 801b338:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b33a:	2200      	movs	r2, #0
 801b33c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

#ifndef FX_DISABLE_DIRECT_DATA_READ_CACHE_FILL

        /* Determine if the read was successful and if number of sectors just read will
           reasonably fit into the cache.  */
        if ((media_ptr -> fx_media_driver_status == FX_SUCCESS) && (sectors < (media_ptr -> fx_media_sector_cache_size / 4)))
 801b340:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b342:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801b346:	2b00      	cmp	r3, #0
 801b348:	f040 80a4 	bne.w	801b494 <_fx_utility_logical_sector_read+0x518>
 801b34c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b34e:	695b      	ldr	r3, [r3, #20]
 801b350:	089b      	lsrs	r3, r3, #2
 801b352:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 801b356:	429a      	cmp	r2, r3
 801b358:	f080 809c 	bcs.w	801b494 <_fx_utility_logical_sector_read+0x518>

            /* Yes, read of direct sectors was successful.  */

            /* Copy the sectors directly read into the cache so they are available on
               subsequent read requests.  */
            while (sectors)
 801b35c:	e095      	b.n	801b48a <_fx_utility_logical_sector_read+0x50e>
            {

                /* Attempt to read the cache entry.  */
                cache_entry =  _fx_utility_logical_sector_cache_entry_read(media_ptr, logical_sector, &previous_cache_entry);
 801b35e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801b362:	9300      	str	r3, [sp, #0]
 801b364:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 801b368:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801b36a:	f7ff f927 	bl	801a5bc <_fx_utility_logical_sector_cache_entry_read>
 801b36e:	6578      	str	r0, [r7, #84]	; 0x54
                FX_UTILITY_LOGICAL_SECTOR_READ_EXTENSION_1

                /* At this point, a cache entry should always be present since we invalidated
                   the cache over this sector range previously. In any case, check for the error
                   condition.  */
                if (cache_entry == FX_NULL)
 801b370:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801b372:	2b00      	cmp	r3, #0
 801b374:	d101      	bne.n	801b37a <_fx_utility_logical_sector_read+0x3fe>
                {

                    /* This case should never happen, however, if it does simply give up on updating the
                       cache with the sectors from the direct read.  */
                    return(FX_SUCCESS);
 801b376:	2300      	movs	r3, #0
 801b378:	e08f      	b.n	801b49a <_fx_utility_logical_sector_read+0x51e>
                }

                /* Determine if the cache entry is dirty and needs to be written out before it is used.  */
                if ((cache_entry -> fx_cached_sector_valid) &&
 801b37a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801b37c:	7c5b      	ldrb	r3, [r3, #17]
 801b37e:	2b00      	cmp	r3, #0
 801b380:	d049      	beq.n	801b416 <_fx_utility_logical_sector_read+0x49a>
                    (cache_entry -> fx_cached_sector_buffer_dirty))
 801b382:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801b384:	7c1b      	ldrb	r3, [r3, #16]
                if ((cache_entry -> fx_cached_sector_valid) &&
 801b386:	2b00      	cmp	r3, #0
 801b388:	d045      	beq.n	801b416 <_fx_utility_logical_sector_read+0x49a>
                       before we read in the new buffer.  */

#ifndef FX_MEDIA_STATISTICS_DISABLE

                    /* Increment the number of driver write sector(s) requests.  */
                    media_ptr -> fx_media_driver_write_requests++;
 801b38a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b38c:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 801b390:	1c5a      	adds	r2, r3, #1
 801b392:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b394:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
#endif

                    /* Build write request to the driver.  */
                    media_ptr -> fx_media_driver_request =          FX_DRIVER_WRITE;
 801b398:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b39a:	2201      	movs	r2, #1
 801b39c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
                    media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 801b3a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b3a2:	2290      	movs	r2, #144	; 0x90
 801b3a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
                    media_ptr -> fx_media_driver_buffer =           cache_entry -> fx_cached_sector_memory_buffer;
 801b3a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801b3aa:	681a      	ldr	r2, [r3, #0]
 801b3ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b3ae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#ifdef FX_DRIVER_USE_64BIT_LBA
                    media_ptr -> fx_media_driver_logical_sector =   cache_entry -> fx_cached_sector;
#else
                    media_ptr -> fx_media_driver_logical_sector =   (ULONG)cache_entry -> fx_cached_sector;
 801b3b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801b3b4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801b3b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b3ba:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#endif
                    media_ptr -> fx_media_driver_sectors =          1;
 801b3be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b3c0:	2201      	movs	r2, #1
 801b3c2:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
                    media_ptr -> fx_media_driver_sector_type =      cache_entry -> fx_cached_sector_type;
 801b3c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801b3c8:	7c9b      	ldrb	r3, [r3, #18]
 801b3ca:	461a      	mov	r2, r3
 801b3cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b3ce:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

                    /* Only data sectors may be dirty when FX_FAULT_TOLERANT is defined */
#ifndef FX_FAULT_TOLERANT
                    /* Determine if the sector is a data sector or a system sector.  */
                    if (cache_entry -> fx_cached_sector_type != FX_DATA_SECTOR)
 801b3d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801b3d4:	7c9b      	ldrb	r3, [r3, #18]
 801b3d6:	2b04      	cmp	r3, #4
 801b3d8:	d003      	beq.n	801b3e2 <_fx_utility_logical_sector_read+0x466>
                    {

                        /* System sector is present.  */
                        media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 801b3da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b3dc:	2201      	movs	r2, #1
 801b3de:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

                    /* If trace is enabled, insert this event into the trace buffer.  */
                    FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_WRITE, media_ptr, cache_entry -> fx_cached_sector, 1, cache_entry -> fx_cached_sector_memory_buffer, FX_TRACE_INTERNAL_EVENTS, 0, 0)

                    /* Invoke the driver to write the sector.  */
                    (media_ptr -> fx_media_driver_entry) (media_ptr);
 801b3e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b3e4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 801b3e8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801b3ea:	4798      	blx	r3

                    /* Clear the system write flag.  */
                    media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 801b3ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b3ee:	2200      	movs	r2, #0
 801b3f0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

                    /* Check for successful completion.  */
                    if (media_ptr -> fx_media_driver_status)
 801b3f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b3f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801b3fa:	2b00      	cmp	r3, #0
 801b3fc:	d003      	beq.n	801b406 <_fx_utility_logical_sector_read+0x48a>
                    {

                        /* Error writing a cached sector out.  Return the
                           error status.  */
                        return(media_ptr -> fx_media_driver_status);
 801b3fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b400:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801b404:	e049      	b.n	801b49a <_fx_utility_logical_sector_read+0x51e>
                    }

                    /* Clear the buffer dirty flag since it has been flushed
                       out.  */
                    cache_entry -> fx_cached_sector_buffer_dirty =  FX_FALSE;
 801b406:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801b408:	2200      	movs	r2, #0
 801b40a:	741a      	strb	r2, [r3, #16]

                    /* Decrement the number of outstanding dirty cache entries.  */
                    media_ptr -> fx_media_sector_cache_dirty_count--;
 801b40c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b40e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b410:	1e5a      	subs	r2, r3, #1
 801b412:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b414:	625a      	str	r2, [r3, #36]	; 0x24
                }

                /* Now setup the cache entry with information from the new sector.  */

                /* Remember the sector number.  */
                cache_entry -> fx_cached_sector =  logical_sector;
 801b416:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801b418:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 801b41c:	e9c1 2302 	strd	r2, r3, [r1, #8]

                /* Make the cache entry valid.  */
                cache_entry -> fx_cached_sector_valid =  FX_TRUE;
 801b420:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801b422:	2201      	movs	r2, #1
 801b424:	745a      	strb	r2, [r3, #17]

                /* Remember the sector type.  */
                cache_entry -> fx_cached_sector_type =  sector_type;
 801b426:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801b428:	f897 2088 	ldrb.w	r2, [r7, #136]	; 0x88
 801b42c:	749a      	strb	r2, [r3, #18]

                /* Place this entry that the head of the cached sector
                   list.  */

                /* Determine if we need to update the last used list.  */
                if (previous_cache_entry)
 801b42e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b430:	2b00      	cmp	r3, #0
 801b432:	d00a      	beq.n	801b44a <_fx_utility_logical_sector_read+0x4ce>

                    /* Yes, the current entry is not at the front of the list
                       so we need to change the order.  */

                    /* Link the previous entry to this entry's next pointer.  */
                    previous_cache_entry -> fx_cached_sector_next_used =
 801b434:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                        cache_entry -> fx_cached_sector_next_used;
 801b436:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801b438:	6952      	ldr	r2, [r2, #20]
                    previous_cache_entry -> fx_cached_sector_next_used =
 801b43a:	615a      	str	r2, [r3, #20]

                    /* Place this entry at the head of the list.  */
                    cache_entry -> fx_cached_sector_next_used =
                        media_ptr -> fx_media_sector_cache_list_ptr;
 801b43c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b43e:	69da      	ldr	r2, [r3, #28]
                    cache_entry -> fx_cached_sector_next_used =
 801b440:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801b442:	615a      	str	r2, [r3, #20]
                    media_ptr -> fx_media_sector_cache_list_ptr =  cache_entry;
 801b444:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b446:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801b448:	61da      	str	r2, [r3, #28]
                }

                /* Copy the data from the destination buffer to the cache entry.  */
                _fx_utility_memory_copy(buffer_ptr, /* Use case of memcpy is verified. */
 801b44a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801b44c:	6819      	ldr	r1, [r3, #0]
                                        cache_entry -> fx_cached_sector_memory_buffer,
                                        media_ptr -> fx_media_bytes_per_sector);
 801b44e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                _fx_utility_memory_copy(buffer_ptr, /* Use case of memcpy is verified. */
 801b452:	461a      	mov	r2, r3
 801b454:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 801b458:	f000 f98c 	bl	801b774 <_fx_utility_memory_copy>

                /* Advance the destination buffer.  */
                buffer_ptr =  ((UCHAR *)buffer_ptr) + media_ptr -> fx_media_bytes_per_sector;
 801b45c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b45e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b460:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801b464:	4413      	add	r3, r2
 801b466:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                /* Advance the source sector and decrement the sector count.  */
                logical_sector++;
 801b46a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 801b46e:	1c51      	adds	r1, r2, #1
 801b470:	6039      	str	r1, [r7, #0]
 801b472:	f143 0300 	adc.w	r3, r3, #0
 801b476:	607b      	str	r3, [r7, #4]
 801b478:	e9d7 3400 	ldrd	r3, r4, [r7]
 801b47c:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                sectors--;
 801b480:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801b484:	3b01      	subs	r3, #1
 801b486:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
            while (sectors)
 801b48a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801b48e:	2b00      	cmp	r3, #0
 801b490:	f47f af65 	bne.w	801b35e <_fx_utility_logical_sector_read+0x3e2>
            }
        }
#endif

        /* Return the driver status.  */
        return(media_ptr -> fx_media_driver_status);
 801b494:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b496:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    }
}
 801b49a:	4618      	mov	r0, r3
 801b49c:	3760      	adds	r7, #96	; 0x60
 801b49e:	46bd      	mov	sp, r7
 801b4a0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0801b4a4 <_fx_utility_logical_sector_write>:
/*                                            resulting in version 6.1.6  */
/*                                                                        */
/**************************************************************************/
UINT  _fx_utility_logical_sector_write(FX_MEDIA *media_ptr, ULONG64 logical_sector,
                                       VOID *buffer_ptr, ULONG sectors, UCHAR sector_type)
{
 801b4a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801b4a8:	b096      	sub	sp, #88	; 0x58
 801b4aa:	af04      	add	r7, sp, #16
 801b4ac:	62f8      	str	r0, [r7, #44]	; 0x2c
 801b4ae:	e9c7 2308 	strd	r2, r3, [r7, #32]
#ifndef FX_DISABLE_CACHE
FX_CACHED_SECTOR *cache_entry;
UINT              cache_size;
UINT              index;
UINT              i;
UCHAR             cache_found = FX_FALSE;
 801b4b2:	2300      	movs	r3, #0
 801b4b4:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
#endif /* FX_DISABLE_CACHE */

#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Determine if the request is for FAT sector.  */
    if (sector_type == FX_FAT_SECTOR)
 801b4b8:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 801b4bc:	2b02      	cmp	r3, #2
 801b4be:	d106      	bne.n	801b4ce <_fx_utility_logical_sector_write+0x2a>
    {

        /* Increment the number of FAT sector writes.  */
        media_ptr -> fx_media_fat_sector_writes++;
 801b4c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b4c2:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 801b4c6:	1c5a      	adds	r2, r3, #1
 801b4c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b4ca:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    }

    /* Increment the number of logical sectors written.  */
    media_ptr -> fx_media_logical_sector_writes++;
 801b4ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b4d0:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 801b4d4:	1c5a      	adds	r2, r3, #1
 801b4d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b4d8:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
    /* Extended port-specific processing macro, which is by default defined to white space.  */
    FX_UTILITY_LOGICAL_SECTOR_WRITE_EXTENSION

#ifndef FX_DISABLE_CACHE
    /* Determine if the request is from the internal media buffer area.  */
    if ((((UCHAR *)buffer_ptr) >= media_ptr -> fx_media_memory_buffer) &&
 801b4dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b4de:	689a      	ldr	r2, [r3, #8]
 801b4e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801b4e2:	4293      	cmp	r3, r2
 801b4e4:	f0c0 80d8 	bcc.w	801b698 <_fx_utility_logical_sector_write+0x1f4>
        (((UCHAR *)buffer_ptr) <= media_ptr -> fx_media_sector_cache_end))
 801b4e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b4ea:	699a      	ldr	r2, [r3, #24]
    if ((((UCHAR *)buffer_ptr) >= media_ptr -> fx_media_memory_buffer) &&
 801b4ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801b4ee:	4293      	cmp	r3, r2
 801b4f0:	f200 80d2 	bhi.w	801b698 <_fx_utility_logical_sector_write+0x1f4>
    {

        /* Internal cache buffer is requested.  */

        /* Determine if the logical sector cache access should use the hash function.  */
        if (media_ptr -> fx_media_sector_cache_hashed)
 801b4f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b4f6:	691b      	ldr	r3, [r3, #16]
 801b4f8:	2b00      	cmp	r3, #0
 801b4fa:	d030      	beq.n	801b55e <_fx_utility_logical_sector_write+0xba>
        {

            /* Calculate the area of the cache for this logical sector.  */
            index =  (ULONG)(logical_sector & media_ptr -> fx_media_sector_cache_hash_mask) * FX_SECTOR_CACHE_DEPTH;
 801b4fc:	6a3a      	ldr	r2, [r7, #32]
 801b4fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b500:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 801b504:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 801b508:	4013      	ands	r3, r2
 801b50a:	009b      	lsls	r3, r3, #2
 801b50c:	637b      	str	r3, [r7, #52]	; 0x34

            /* Build a pointer to the cache entry.  */
            cache_entry =  &(media_ptr -> fx_media_sector_cache[index]);
 801b50e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801b510:	4613      	mov	r3, r2
 801b512:	005b      	lsls	r3, r3, #1
 801b514:	4413      	add	r3, r2
 801b516:	00db      	lsls	r3, r3, #3
 801b518:	f503 634a 	add.w	r3, r3, #3232	; 0xca0
 801b51c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801b51e:	4413      	add	r3, r2
 801b520:	647b      	str	r3, [r7, #68]	; 0x44

            for (i = 0; i < FX_SECTOR_CACHE_DEPTH; i++, cache_entry++)
 801b522:	2300      	movs	r3, #0
 801b524:	63fb      	str	r3, [r7, #60]	; 0x3c
 801b526:	e016      	b.n	801b556 <_fx_utility_logical_sector_write+0xb2>
            {


                /* Determine if the logical sector is in the cache - assuming the depth of the
                   sector cache is 4 entries.  */
                if ((cache_entry -> fx_cached_sector_valid) && (cache_entry -> fx_cached_sector == logical_sector))
 801b528:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b52a:	7c5b      	ldrb	r3, [r3, #17]
 801b52c:	2b00      	cmp	r3, #0
 801b52e:	d00c      	beq.n	801b54a <_fx_utility_logical_sector_write+0xa6>
 801b530:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b532:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801b536:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 801b53a:	4299      	cmp	r1, r3
 801b53c:	bf08      	it	eq
 801b53e:	4290      	cmpeq	r0, r2
 801b540:	d103      	bne.n	801b54a <_fx_utility_logical_sector_write+0xa6>
                {
                    cache_found = FX_TRUE;
 801b542:	2301      	movs	r3, #1
 801b544:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
                    break;
 801b548:	e02d      	b.n	801b5a6 <_fx_utility_logical_sector_write+0x102>
            for (i = 0; i < FX_SECTOR_CACHE_DEPTH; i++, cache_entry++)
 801b54a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b54c:	3301      	adds	r3, #1
 801b54e:	63fb      	str	r3, [r7, #60]	; 0x3c
 801b550:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b552:	3318      	adds	r3, #24
 801b554:	647b      	str	r3, [r7, #68]	; 0x44
 801b556:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b558:	2b03      	cmp	r3, #3
 801b55a:	d9e5      	bls.n	801b528 <_fx_utility_logical_sector_write+0x84>
 801b55c:	e023      	b.n	801b5a6 <_fx_utility_logical_sector_write+0x102>
        }
        else
        {

            /* Search for an entry in the cache that matches this request.  */
            cache_size =            media_ptr -> fx_media_sector_cache_size;
 801b55e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b560:	695b      	ldr	r3, [r3, #20]
 801b562:	643b      	str	r3, [r7, #64]	; 0x40
            cache_entry =           media_ptr -> fx_media_sector_cache_list_ptr;
 801b564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b566:	69db      	ldr	r3, [r3, #28]
 801b568:	647b      	str	r3, [r7, #68]	; 0x44

            /* Look at the cache entries until a match is found or the end of
               the cache is reached.  */
            while (cache_size--)
 801b56a:	e017      	b.n	801b59c <_fx_utility_logical_sector_write+0xf8>
            {

                /* Determine if the requested sector has been found.  */
                if ((cache_entry -> fx_cached_sector_valid) && (cache_entry -> fx_cached_sector == logical_sector))
 801b56c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b56e:	7c5b      	ldrb	r3, [r3, #17]
 801b570:	2b00      	cmp	r3, #0
 801b572:	d00c      	beq.n	801b58e <_fx_utility_logical_sector_write+0xea>
 801b574:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b576:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801b57a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 801b57e:	4299      	cmp	r1, r3
 801b580:	bf08      	it	eq
 801b582:	4290      	cmpeq	r0, r2
 801b584:	d103      	bne.n	801b58e <_fx_utility_logical_sector_write+0xea>
                {
                    cache_found = FX_TRUE;
 801b586:	2301      	movs	r3, #1
 801b588:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
                    break;
 801b58c:	e00b      	b.n	801b5a6 <_fx_utility_logical_sector_write+0x102>
                }

                /* Otherwise, we have not found the cached entry yet.  */

                /* If there are more entries, move to the next one.  */
                if (cache_entry -> fx_cached_sector_next_used)
 801b58e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b590:	695b      	ldr	r3, [r3, #20]
 801b592:	2b00      	cmp	r3, #0
 801b594:	d002      	beq.n	801b59c <_fx_utility_logical_sector_write+0xf8>
                {

                    /* Move to the next cache entry.  */
                    cache_entry =  cache_entry -> fx_cached_sector_next_used;
 801b596:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b598:	695b      	ldr	r3, [r3, #20]
 801b59a:	647b      	str	r3, [r7, #68]	; 0x44
            while (cache_size--)
 801b59c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801b59e:	1e5a      	subs	r2, r3, #1
 801b5a0:	643a      	str	r2, [r7, #64]	; 0x40
 801b5a2:	2b00      	cmp	r3, #0
 801b5a4:	d1e2      	bne.n	801b56c <_fx_utility_logical_sector_write+0xc8>
                }
            }
        }
#endif /* FX_ENABLE_FAULT_TOLERANT */

        if (cache_found)
 801b5a6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 801b5aa:	2b00      	cmp	r3, #0
 801b5ac:	d00d      	beq.n	801b5ca <_fx_utility_logical_sector_write+0x126>
                return(media_ptr -> fx_media_driver_status);
            }
#endif

            /* Determine if this is the first write of this logical sector.  */
            if (cache_entry -> fx_cached_sector_buffer_dirty == FX_FALSE)
 801b5ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b5b0:	7c1b      	ldrb	r3, [r3, #16]
 801b5b2:	2b00      	cmp	r3, #0
 801b5b4:	d107      	bne.n	801b5c6 <_fx_utility_logical_sector_write+0x122>
            {

                /* Yes, increment the number of outstanding dirty sectors.  */
                media_ptr -> fx_media_sector_cache_dirty_count++;
 801b5b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b5b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b5ba:	1c5a      	adds	r2, r3, #1
 801b5bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b5be:	625a      	str	r2, [r3, #36]	; 0x24

                /* Simply mark this entry as dirty.  */
                cache_entry -> fx_cached_sector_buffer_dirty =  FX_TRUE;
 801b5c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b5c2:	2201      	movs	r2, #1
 801b5c4:	741a      	strb	r2, [r3, #16]

            /* Don't bother updating the cache linked list since writes are
               preceded by reads anyway.  */

            /* Success, return to caller immediately!  */
            return(FX_SUCCESS);
 801b5c6:	2300      	movs	r3, #0
 801b5c8:	e0cf      	b.n	801b76a <_fx_utility_logical_sector_write+0x2c6>

        /* Okay, so if we are here the request must be for the additional FAT writes, since this is the
           only time a write request is made without a preceding read request.  */

        /* Is the logical sector valid?  */
        if ((logical_sector == 0) || (logical_sector == ((ULONG)0xFFFFFFFF)))
 801b5ca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801b5ce:	4313      	orrs	r3, r2
 801b5d0:	d004      	beq.n	801b5dc <_fx_utility_logical_sector_write+0x138>
 801b5d2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801b5d6:	1c51      	adds	r1, r2, #1
 801b5d8:	430b      	orrs	r3, r1
 801b5da:	d101      	bne.n	801b5e0 <_fx_utility_logical_sector_write+0x13c>
        {
            return(FX_SECTOR_INVALID);
 801b5dc:	2389      	movs	r3, #137	; 0x89
 801b5de:	e0c4      	b.n	801b76a <_fx_utility_logical_sector_write+0x2c6>
        }

        /* Compare logical sector against total sectors to make sure it is valid.  */
        if ((logical_sector + sectors - 1) >= media_ptr -> fx_media_total_sectors)
 801b5e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801b5e2:	2200      	movs	r2, #0
 801b5e4:	61bb      	str	r3, [r7, #24]
 801b5e6:	61fa      	str	r2, [r7, #28]
 801b5e8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801b5ec:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 801b5f0:	4621      	mov	r1, r4
 801b5f2:	1889      	adds	r1, r1, r2
 801b5f4:	6139      	str	r1, [r7, #16]
 801b5f6:	4629      	mov	r1, r5
 801b5f8:	eb43 0101 	adc.w	r1, r3, r1
 801b5fc:	6179      	str	r1, [r7, #20]
 801b5fe:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 801b602:	460b      	mov	r3, r1
 801b604:	f113 3aff 	adds.w	sl, r3, #4294967295
 801b608:	4613      	mov	r3, r2
 801b60a:	f143 3bff 	adc.w	fp, r3, #4294967295
 801b60e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b610:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 801b614:	4592      	cmp	sl, r2
 801b616:	eb7b 0303 	sbcs.w	r3, fp, r3
 801b61a:	d301      	bcc.n	801b620 <_fx_utility_logical_sector_write+0x17c>
        {
            return(FX_SECTOR_INVALID);
 801b61c:	2389      	movs	r3, #137	; 0x89
 801b61e:	e0a4      	b.n	801b76a <_fx_utility_logical_sector_write+0x2c6>
        /* Just write the buffer to the media.  */

#ifndef FX_MEDIA_STATISTICS_DISABLE

        /* Increment the number of driver write sector(s) requests.  */
        media_ptr -> fx_media_driver_write_requests++;
 801b620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b622:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 801b626:	1c5a      	adds	r2, r3, #1
 801b628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b62a:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
#endif

        /* Build write request to the driver.  */
        media_ptr -> fx_media_driver_request =          FX_DRIVER_WRITE;
 801b62e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b630:	2201      	movs	r2, #1
 801b632:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 801b636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b638:	2290      	movs	r2, #144	; 0x90
 801b63a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        media_ptr -> fx_media_driver_buffer =           buffer_ptr;
 801b63e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b640:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801b642:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#ifdef FX_DRIVER_USE_64BIT_LBA
        media_ptr -> fx_media_driver_logical_sector =   logical_sector;
#else
        media_ptr -> fx_media_driver_logical_sector =   (ULONG)logical_sector;
 801b646:	6a3a      	ldr	r2, [r7, #32]
 801b648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b64a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#endif
        media_ptr -> fx_media_driver_sectors =          sectors;
 801b64e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b650:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801b652:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        media_ptr -> fx_media_driver_sector_type =      sector_type;
 801b656:	f897 2070 	ldrb.w	r2, [r7, #112]	; 0x70
 801b65a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b65c:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

        /* Determine if the system write flag needs to be set.  */
        if (sector_type != FX_DATA_SECTOR)
 801b660:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 801b664:	2b04      	cmp	r3, #4
 801b666:	d003      	beq.n	801b670 <_fx_utility_logical_sector_write+0x1cc>
        {

            /* Yes, a system sector write is present so set the flag.  The driver
               can use this flag to make extra safeguards in writing the sector
               out, yielding more fault tolerance.  */
            media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 801b668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b66a:	2201      	movs	r2, #1
 801b66c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_WRITE, media_ptr, logical_sector, sectors, buffer_ptr, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Invoke the driver to write the sector(s).  */
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 801b670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b672:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 801b676:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801b678:	4798      	blx	r3

        /* Clear the system write flag.  */
        media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 801b67a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b67c:	2200      	movs	r2, #0
 801b67e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

        /* Check for successful completion.  */
        if (media_ptr -> fx_media_driver_status)
 801b682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b684:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801b688:	2b00      	cmp	r3, #0
 801b68a:	d003      	beq.n	801b694 <_fx_utility_logical_sector_write+0x1f0>
        {

            /* Error writing a internal sector out.  Return the
               error status.  */
            return(media_ptr -> fx_media_driver_status);
 801b68c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b68e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801b692:	e06a      	b.n	801b76a <_fx_utility_logical_sector_write+0x2c6>
        }

        /* At this point, we have a successful write.  */
        return(FX_SUCCESS);
 801b694:	2300      	movs	r3, #0
 801b696:	e068      	b.n	801b76a <_fx_utility_logical_sector_write+0x2c6>

        /* Otherwise, the write request is being made directly from an application
           buffer. Determine if the logical sector is valid.  */

        /* Is the logical sector valid? */
        if ((logical_sector == 0) || (logical_sector == ((ULONG)0xFFFFFFFF)))
 801b698:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801b69c:	4313      	orrs	r3, r2
 801b69e:	d004      	beq.n	801b6aa <_fx_utility_logical_sector_write+0x206>
 801b6a0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801b6a4:	1c51      	adds	r1, r2, #1
 801b6a6:	430b      	orrs	r3, r1
 801b6a8:	d101      	bne.n	801b6ae <_fx_utility_logical_sector_write+0x20a>
        {
            return(FX_SECTOR_INVALID);
 801b6aa:	2389      	movs	r3, #137	; 0x89
 801b6ac:	e05d      	b.n	801b76a <_fx_utility_logical_sector_write+0x2c6>
        }

        /* Compare logical sector against total sectors to make sure it is valid.  */
        if ((logical_sector + sectors - 1) >= media_ptr -> fx_media_total_sectors)
 801b6ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801b6b0:	2200      	movs	r2, #0
 801b6b2:	60bb      	str	r3, [r7, #8]
 801b6b4:	60fa      	str	r2, [r7, #12]
 801b6b6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801b6ba:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 801b6be:	4651      	mov	r1, sl
 801b6c0:	eb11 0802 	adds.w	r8, r1, r2
 801b6c4:	4659      	mov	r1, fp
 801b6c6:	eb41 0903 	adc.w	r9, r1, r3
 801b6ca:	f118 34ff 	adds.w	r4, r8, #4294967295
 801b6ce:	f149 35ff 	adc.w	r5, r9, #4294967295
 801b6d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b6d4:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 801b6d8:	4294      	cmp	r4, r2
 801b6da:	eb75 0303 	sbcs.w	r3, r5, r3
 801b6de:	d301      	bcc.n	801b6e4 <_fx_utility_logical_sector_write+0x240>
        {
            return(FX_SECTOR_INVALID);
 801b6e0:	2389      	movs	r3, #137	; 0x89
 801b6e2:	e042      	b.n	801b76a <_fx_utility_logical_sector_write+0x2c6>
        }

        /* Flush and invalidate for any entries in the cache that are in this direct I/O read request range.  */
        _fx_utility_logical_sector_flush(media_ptr, logical_sector, (ULONG64) sectors, FX_TRUE);
 801b6e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801b6e6:	2200      	movs	r2, #0
 801b6e8:	603b      	str	r3, [r7, #0]
 801b6ea:	607a      	str	r2, [r7, #4]
 801b6ec:	2301      	movs	r3, #1
 801b6ee:	9302      	str	r3, [sp, #8]
 801b6f0:	e9d7 3400 	ldrd	r3, r4, [r7]
 801b6f4:	e9cd 3400 	strd	r3, r4, [sp]
 801b6f8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801b6fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801b6fe:	f7ff fa27 	bl	801ab50 <_fx_utility_logical_sector_flush>
#endif /* FX_DISABLE_CACHE */

#ifndef FX_MEDIA_STATISTICS_DISABLE

        /* Increment the number of driver write sector(s) requests.  */
        media_ptr -> fx_media_driver_write_requests++;
 801b702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b704:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 801b708:	1c5a      	adds	r2, r3, #1
 801b70a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b70c:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
#endif

        /* Build request to the driver.  */
        media_ptr -> fx_media_driver_request =          FX_DRIVER_WRITE;
 801b710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b712:	2201      	movs	r2, #1
 801b714:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 801b718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b71a:	2290      	movs	r2, #144	; 0x90
 801b71c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        media_ptr -> fx_media_driver_buffer =           buffer_ptr;
 801b720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b722:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801b724:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#ifdef FX_DRIVER_USE_64BIT_LBA
        media_ptr -> fx_media_driver_logical_sector =   logical_sector;
#else
        media_ptr -> fx_media_driver_logical_sector =   (ULONG)logical_sector;
 801b728:	6a3a      	ldr	r2, [r7, #32]
 801b72a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b72c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#endif
        media_ptr -> fx_media_driver_sectors =          sectors;
 801b730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b732:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801b734:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        media_ptr -> fx_media_driver_sector_type =      sector_type;
 801b738:	f897 2070 	ldrb.w	r2, [r7, #112]	; 0x70
 801b73c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b73e:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

        /* Determine if the system write flag needs to be set.  */
        if (sector_type != FX_DATA_SECTOR)
 801b742:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 801b746:	2b04      	cmp	r3, #4
 801b748:	d003      	beq.n	801b752 <_fx_utility_logical_sector_write+0x2ae>
        {

            /* Yes, a system sector write is present so set the flag.  The driver
               can use this flag to make extra safeguards in writing the sector
               out, yielding more fault tolerance.  */
            media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 801b74a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b74c:	2201      	movs	r2, #1
 801b74e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_WRITE, media_ptr, logical_sector, sectors, buffer_ptr, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Invoke the driver to write the sector(s).  */
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 801b752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b754:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 801b758:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801b75a:	4798      	blx	r3

        /* Clear the system write flag.  */
        media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 801b75c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b75e:	2200      	movs	r2, #0
 801b760:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

        /* Return driver status.  */
        return(media_ptr -> fx_media_driver_status);
 801b764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b766:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    }
}
 801b76a:	4618      	mov	r0, r3
 801b76c:	3748      	adds	r7, #72	; 0x48
 801b76e:	46bd      	mov	sp, r7
 801b770:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0801b774 <_fx_utility_memory_copy>:
/*                                            memcpy usage,               */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _fx_utility_memory_copy(UCHAR *source_ptr, UCHAR *dest_ptr, ULONG size)
{
 801b774:	b580      	push	{r7, lr}
 801b776:	b084      	sub	sp, #16
 801b778:	af00      	add	r7, sp, #0
 801b77a:	60f8      	str	r0, [r7, #12]
 801b77c:	60b9      	str	r1, [r7, #8]
 801b77e:	607a      	str	r2, [r7, #4]

    /* Copy the memory.  */
    memcpy(dest_ptr, source_ptr, size); /* Use case of memcpy is verified. */
 801b780:	687a      	ldr	r2, [r7, #4]
 801b782:	68f9      	ldr	r1, [r7, #12]
 801b784:	68b8      	ldr	r0, [r7, #8]
 801b786:	f004 f8c9 	bl	801f91c <memcpy>
}
 801b78a:	bf00      	nop
 801b78c:	3710      	adds	r7, #16
 801b78e:	46bd      	mov	sp, r7
 801b790:	bd80      	pop	{r7, pc}
	...

0801b794 <_fxe_file_close>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fxe_file_close(FX_FILE *file_ptr)
{
 801b794:	b580      	push	{r7, lr}
 801b796:	b084      	sub	sp, #16
 801b798:	af00      	add	r7, sp, #0
 801b79a:	6078      	str	r0, [r7, #4]

UINT status;


    /* Check for a null file pointer.  */
    if (file_ptr == FX_NULL)
 801b79c:	687b      	ldr	r3, [r7, #4]
 801b79e:	2b00      	cmp	r3, #0
 801b7a0:	d101      	bne.n	801b7a6 <_fxe_file_close+0x12>
    {
        return(FX_PTR_ERROR);
 801b7a2:	2318      	movs	r3, #24
 801b7a4:	e018      	b.n	801b7d8 <_fxe_file_close+0x44>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801b7a6:	f3ef 8305 	mrs	r3, IPSR
 801b7aa:	60bb      	str	r3, [r7, #8]
    return(ipsr_value);
 801b7ac:	68ba      	ldr	r2, [r7, #8]
    }

    /* Check for a valid caller.  */
    FX_CALLER_CHECKING_CODE
 801b7ae:	4b0c      	ldr	r3, [pc, #48]	; (801b7e0 <_fxe_file_close+0x4c>)
 801b7b0:	681b      	ldr	r3, [r3, #0]
 801b7b2:	4313      	orrs	r3, r2
 801b7b4:	2b00      	cmp	r3, #0
 801b7b6:	d108      	bne.n	801b7ca <_fxe_file_close+0x36>
 801b7b8:	4b0a      	ldr	r3, [pc, #40]	; (801b7e4 <_fxe_file_close+0x50>)
 801b7ba:	681b      	ldr	r3, [r3, #0]
 801b7bc:	2b00      	cmp	r3, #0
 801b7be:	d004      	beq.n	801b7ca <_fxe_file_close+0x36>
 801b7c0:	4b08      	ldr	r3, [pc, #32]	; (801b7e4 <_fxe_file_close+0x50>)
 801b7c2:	681b      	ldr	r3, [r3, #0]
 801b7c4:	4a08      	ldr	r2, [pc, #32]	; (801b7e8 <_fxe_file_close+0x54>)
 801b7c6:	4293      	cmp	r3, r2
 801b7c8:	d101      	bne.n	801b7ce <_fxe_file_close+0x3a>
 801b7ca:	2320      	movs	r3, #32
 801b7cc:	e004      	b.n	801b7d8 <_fxe_file_close+0x44>

    /* Call actual file close service.  */
    status =  _fx_file_close(file_ptr);
 801b7ce:	6878      	ldr	r0, [r7, #4]
 801b7d0:	f7f9 fa4e 	bl	8014c70 <_fx_file_close>
 801b7d4:	60f8      	str	r0, [r7, #12]

    /* Return status to the caller.  */
    return(status);
 801b7d6:	68fb      	ldr	r3, [r7, #12]
}
 801b7d8:	4618      	mov	r0, r3
 801b7da:	3710      	adds	r7, #16
 801b7dc:	46bd      	mov	sp, r7
 801b7de:	bd80      	pop	{r7, pc}
 801b7e0:	24000070 	.word	0x24000070
 801b7e4:	240050cc 	.word	0x240050cc
 801b7e8:	24005214 	.word	0x24005214

0801b7ec <_fxe_file_create>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fxe_file_create(FX_MEDIA *media_ptr, CHAR *file_name)
{
 801b7ec:	b580      	push	{r7, lr}
 801b7ee:	b084      	sub	sp, #16
 801b7f0:	af00      	add	r7, sp, #0
 801b7f2:	6078      	str	r0, [r7, #4]
 801b7f4:	6039      	str	r1, [r7, #0]

UINT status;


    /* Check for a null media pointer.  */
    if (media_ptr == FX_NULL)
 801b7f6:	687b      	ldr	r3, [r7, #4]
 801b7f8:	2b00      	cmp	r3, #0
 801b7fa:	d101      	bne.n	801b800 <_fxe_file_create+0x14>
    {
        return(FX_PTR_ERROR);
 801b7fc:	2318      	movs	r3, #24
 801b7fe:	e019      	b.n	801b834 <_fxe_file_create+0x48>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801b800:	f3ef 8305 	mrs	r3, IPSR
 801b804:	60bb      	str	r3, [r7, #8]
    return(ipsr_value);
 801b806:	68ba      	ldr	r2, [r7, #8]
    }

    /* Check for a valid caller.  */
    FX_CALLER_CHECKING_CODE
 801b808:	4b0c      	ldr	r3, [pc, #48]	; (801b83c <_fxe_file_create+0x50>)
 801b80a:	681b      	ldr	r3, [r3, #0]
 801b80c:	4313      	orrs	r3, r2
 801b80e:	2b00      	cmp	r3, #0
 801b810:	d108      	bne.n	801b824 <_fxe_file_create+0x38>
 801b812:	4b0b      	ldr	r3, [pc, #44]	; (801b840 <_fxe_file_create+0x54>)
 801b814:	681b      	ldr	r3, [r3, #0]
 801b816:	2b00      	cmp	r3, #0
 801b818:	d004      	beq.n	801b824 <_fxe_file_create+0x38>
 801b81a:	4b09      	ldr	r3, [pc, #36]	; (801b840 <_fxe_file_create+0x54>)
 801b81c:	681b      	ldr	r3, [r3, #0]
 801b81e:	4a09      	ldr	r2, [pc, #36]	; (801b844 <_fxe_file_create+0x58>)
 801b820:	4293      	cmp	r3, r2
 801b822:	d101      	bne.n	801b828 <_fxe_file_create+0x3c>
 801b824:	2320      	movs	r3, #32
 801b826:	e005      	b.n	801b834 <_fxe_file_create+0x48>

    /* Call actual file create service.  */
    status =  _fx_file_create(media_ptr, file_name);
 801b828:	6839      	ldr	r1, [r7, #0]
 801b82a:	6878      	ldr	r0, [r7, #4]
 801b82c:	f7f9 fac4 	bl	8014db8 <_fx_file_create>
 801b830:	60f8      	str	r0, [r7, #12]

    /* File create is complete, return status.  */
    return(status);
 801b832:	68fb      	ldr	r3, [r7, #12]
}
 801b834:	4618      	mov	r0, r3
 801b836:	3710      	adds	r7, #16
 801b838:	46bd      	mov	sp, r7
 801b83a:	bd80      	pop	{r7, pc}
 801b83c:	24000070 	.word	0x24000070
 801b840:	240050cc 	.word	0x240050cc
 801b844:	24005214 	.word	0x24005214

0801b848 <_fxe_file_delete>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fxe_file_delete(FX_MEDIA *media_ptr, CHAR *file_name)
{
 801b848:	b580      	push	{r7, lr}
 801b84a:	b084      	sub	sp, #16
 801b84c:	af00      	add	r7, sp, #0
 801b84e:	6078      	str	r0, [r7, #4]
 801b850:	6039      	str	r1, [r7, #0]

UINT status;


    /* Check for a null media pointer.  */
    if (media_ptr == FX_NULL)
 801b852:	687b      	ldr	r3, [r7, #4]
 801b854:	2b00      	cmp	r3, #0
 801b856:	d101      	bne.n	801b85c <_fxe_file_delete+0x14>
    {
        return(FX_PTR_ERROR);
 801b858:	2318      	movs	r3, #24
 801b85a:	e019      	b.n	801b890 <_fxe_file_delete+0x48>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801b85c:	f3ef 8305 	mrs	r3, IPSR
 801b860:	60bb      	str	r3, [r7, #8]
    return(ipsr_value);
 801b862:	68ba      	ldr	r2, [r7, #8]
    }

    /* Check for a valid caller.  */
    FX_CALLER_CHECKING_CODE
 801b864:	4b0c      	ldr	r3, [pc, #48]	; (801b898 <_fxe_file_delete+0x50>)
 801b866:	681b      	ldr	r3, [r3, #0]
 801b868:	4313      	orrs	r3, r2
 801b86a:	2b00      	cmp	r3, #0
 801b86c:	d108      	bne.n	801b880 <_fxe_file_delete+0x38>
 801b86e:	4b0b      	ldr	r3, [pc, #44]	; (801b89c <_fxe_file_delete+0x54>)
 801b870:	681b      	ldr	r3, [r3, #0]
 801b872:	2b00      	cmp	r3, #0
 801b874:	d004      	beq.n	801b880 <_fxe_file_delete+0x38>
 801b876:	4b09      	ldr	r3, [pc, #36]	; (801b89c <_fxe_file_delete+0x54>)
 801b878:	681b      	ldr	r3, [r3, #0]
 801b87a:	4a09      	ldr	r2, [pc, #36]	; (801b8a0 <_fxe_file_delete+0x58>)
 801b87c:	4293      	cmp	r3, r2
 801b87e:	d101      	bne.n	801b884 <_fxe_file_delete+0x3c>
 801b880:	2320      	movs	r3, #32
 801b882:	e005      	b.n	801b890 <_fxe_file_delete+0x48>

    /* Call actual file delete service.  */
    status =  _fx_file_delete(media_ptr, file_name);
 801b884:	6839      	ldr	r1, [r7, #0]
 801b886:	6878      	ldr	r0, [r7, #4]
 801b888:	f7f9 fc04 	bl	8015094 <_fx_file_delete>
 801b88c:	60f8      	str	r0, [r7, #12]

    /* File delete is complete, return status.  */
    return(status);
 801b88e:	68fb      	ldr	r3, [r7, #12]
}
 801b890:	4618      	mov	r0, r3
 801b892:	3710      	adds	r7, #16
 801b894:	46bd      	mov	sp, r7
 801b896:	bd80      	pop	{r7, pc}
 801b898:	24000070 	.word	0x24000070
 801b89c:	240050cc 	.word	0x240050cc
 801b8a0:	24005214 	.word	0x24005214

0801b8a4 <_fxe_file_open>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fxe_file_open(FX_MEDIA *media_ptr, FX_FILE *file_ptr, CHAR *file_name, UINT open_type, UINT file_control_block_size)
{
 801b8a4:	b580      	push	{r7, lr}
 801b8a6:	b088      	sub	sp, #32
 801b8a8:	af00      	add	r7, sp, #0
 801b8aa:	60f8      	str	r0, [r7, #12]
 801b8ac:	60b9      	str	r1, [r7, #8]
 801b8ae:	607a      	str	r2, [r7, #4]
 801b8b0:	603b      	str	r3, [r7, #0]
FX_FILE *current_file;
ULONG    open_count;


    /* Check for a null media or file pointer.  */
    if ((media_ptr == FX_NULL) || (media_ptr -> fx_media_id != FX_MEDIA_ID) || (file_ptr == FX_NULL) || (file_control_block_size != sizeof(FX_FILE)))
 801b8b2:	68fb      	ldr	r3, [r7, #12]
 801b8b4:	2b00      	cmp	r3, #0
 801b8b6:	d00b      	beq.n	801b8d0 <_fxe_file_open+0x2c>
 801b8b8:	68fb      	ldr	r3, [r7, #12]
 801b8ba:	681b      	ldr	r3, [r3, #0]
 801b8bc:	4a36      	ldr	r2, [pc, #216]	; (801b998 <_fxe_file_open+0xf4>)
 801b8be:	4293      	cmp	r3, r2
 801b8c0:	d106      	bne.n	801b8d0 <_fxe_file_open+0x2c>
 801b8c2:	68bb      	ldr	r3, [r7, #8]
 801b8c4:	2b00      	cmp	r3, #0
 801b8c6:	d003      	beq.n	801b8d0 <_fxe_file_open+0x2c>
 801b8c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b8ca:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 801b8ce:	d001      	beq.n	801b8d4 <_fxe_file_open+0x30>
    {
        return(FX_PTR_ERROR);
 801b8d0:	2318      	movs	r3, #24
 801b8d2:	e05d      	b.n	801b990 <_fxe_file_open+0xec>
    }

    /* Check for an invalid open type.  */
    if ((open_type != FX_OPEN_FOR_READ) && (open_type != FX_OPEN_FOR_READ_FAST) && (open_type != FX_OPEN_FOR_WRITE))
 801b8d4:	683b      	ldr	r3, [r7, #0]
 801b8d6:	2b00      	cmp	r3, #0
 801b8d8:	d007      	beq.n	801b8ea <_fxe_file_open+0x46>
 801b8da:	683b      	ldr	r3, [r7, #0]
 801b8dc:	2b02      	cmp	r3, #2
 801b8de:	d004      	beq.n	801b8ea <_fxe_file_open+0x46>
 801b8e0:	683b      	ldr	r3, [r7, #0]
 801b8e2:	2b01      	cmp	r3, #1
 801b8e4:	d001      	beq.n	801b8ea <_fxe_file_open+0x46>
    {
        return(FX_ACCESS_ERROR);
 801b8e6:	2306      	movs	r3, #6
 801b8e8:	e052      	b.n	801b990 <_fxe_file_open+0xec>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801b8ea:	f3ef 8305 	mrs	r3, IPSR
 801b8ee:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 801b8f0:	693a      	ldr	r2, [r7, #16]
    }

    /* Check for a valid caller.  */
    FX_CALLER_CHECKING_CODE
 801b8f2:	4b2a      	ldr	r3, [pc, #168]	; (801b99c <_fxe_file_open+0xf8>)
 801b8f4:	681b      	ldr	r3, [r3, #0]
 801b8f6:	4313      	orrs	r3, r2
 801b8f8:	2b00      	cmp	r3, #0
 801b8fa:	d108      	bne.n	801b90e <_fxe_file_open+0x6a>
 801b8fc:	4b28      	ldr	r3, [pc, #160]	; (801b9a0 <_fxe_file_open+0xfc>)
 801b8fe:	681b      	ldr	r3, [r3, #0]
 801b900:	2b00      	cmp	r3, #0
 801b902:	d004      	beq.n	801b90e <_fxe_file_open+0x6a>
 801b904:	4b26      	ldr	r3, [pc, #152]	; (801b9a0 <_fxe_file_open+0xfc>)
 801b906:	681b      	ldr	r3, [r3, #0]
 801b908:	4a26      	ldr	r2, [pc, #152]	; (801b9a4 <_fxe_file_open+0x100>)
 801b90a:	4293      	cmp	r3, r2
 801b90c:	d101      	bne.n	801b912 <_fxe_file_open+0x6e>
 801b90e:	2320      	movs	r3, #32
 801b910:	e03e      	b.n	801b990 <_fxe_file_open+0xec>

    /* Get protection.  */
    FX_PROTECT
 801b912:	68fb      	ldr	r3, [r7, #12]
 801b914:	681b      	ldr	r3, [r3, #0]
 801b916:	4a20      	ldr	r2, [pc, #128]	; (801b998 <_fxe_file_open+0xf4>)
 801b918:	4293      	cmp	r3, r2
 801b91a:	d001      	beq.n	801b920 <_fxe_file_open+0x7c>
 801b91c:	2311      	movs	r3, #17
 801b91e:	e037      	b.n	801b990 <_fxe_file_open+0xec>
 801b920:	68fb      	ldr	r3, [r7, #12]
 801b922:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 801b926:	f04f 31ff 	mov.w	r1, #4294967295
 801b92a:	4618      	mov	r0, r3
 801b92c:	f000 ff12 	bl	801c754 <_tx_mutex_get>
 801b930:	4603      	mov	r3, r0
 801b932:	2b00      	cmp	r3, #0
 801b934:	d001      	beq.n	801b93a <_fxe_file_open+0x96>
 801b936:	2311      	movs	r3, #17
 801b938:	e02a      	b.n	801b990 <_fxe_file_open+0xec>

    /* Check for a duplicate file open.  */

    /* Loop to search the list for the same file handle.  */
    current_file =  media_ptr -> fx_media_opened_file_list;
 801b93a:	68fb      	ldr	r3, [r7, #12]
 801b93c:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 801b940:	61fb      	str	r3, [r7, #28]
    open_count =    media_ptr -> fx_media_opened_file_count;
 801b942:	68fb      	ldr	r3, [r7, #12]
 801b944:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 801b948:	61bb      	str	r3, [r7, #24]

    while (open_count--)
 801b94a:	e00e      	b.n	801b96a <_fxe_file_open+0xc6>
    {

        /* See if a match exists.  */
        if (file_ptr == current_file)
 801b94c:	68ba      	ldr	r2, [r7, #8]
 801b94e:	69fb      	ldr	r3, [r7, #28]
 801b950:	429a      	cmp	r2, r3
 801b952:	d107      	bne.n	801b964 <_fxe_file_open+0xc0>
        {

            /* Release protection.  */
            FX_UNPROTECT
 801b954:	68fb      	ldr	r3, [r7, #12]
 801b956:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 801b95a:	4618      	mov	r0, r3
 801b95c:	f001 f972 	bl	801cc44 <_tx_mutex_put>

            /* Return error.  */
            return(FX_PTR_ERROR);
 801b960:	2318      	movs	r3, #24
 801b962:	e015      	b.n	801b990 <_fxe_file_open+0xec>
        }

        /* Move to the next opened file.  */
        current_file =  current_file -> fx_file_opened_next;
 801b964:	69fb      	ldr	r3, [r7, #28]
 801b966:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b968:	61fb      	str	r3, [r7, #28]
    while (open_count--)
 801b96a:	69bb      	ldr	r3, [r7, #24]
 801b96c:	1e5a      	subs	r2, r3, #1
 801b96e:	61ba      	str	r2, [r7, #24]
 801b970:	2b00      	cmp	r3, #0
 801b972:	d1eb      	bne.n	801b94c <_fxe_file_open+0xa8>
    }

    /* Release protection.  */
    FX_UNPROTECT
 801b974:	68fb      	ldr	r3, [r7, #12]
 801b976:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 801b97a:	4618      	mov	r0, r3
 801b97c:	f001 f962 	bl	801cc44 <_tx_mutex_put>

    /* Call actual file open service.  */
    status =  _fx_file_open(media_ptr, file_ptr, file_name, open_type);
 801b980:	683b      	ldr	r3, [r7, #0]
 801b982:	687a      	ldr	r2, [r7, #4]
 801b984:	68b9      	ldr	r1, [r7, #8]
 801b986:	68f8      	ldr	r0, [r7, #12]
 801b988:	f7f9 ff88 	bl	801589c <_fx_file_open>
 801b98c:	6178      	str	r0, [r7, #20]

    /* Open is complete, return status.  */
    return(status);
 801b98e:	697b      	ldr	r3, [r7, #20]
}
 801b990:	4618      	mov	r0, r3
 801b992:	3720      	adds	r7, #32
 801b994:	46bd      	mov	sp, r7
 801b996:	bd80      	pop	{r7, pc}
 801b998:	4d454449 	.word	0x4d454449
 801b99c:	24000070 	.word	0x24000070
 801b9a0:	240050cc 	.word	0x240050cc
 801b9a4:	24005214 	.word	0x24005214

0801b9a8 <_fxe_file_read>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fxe_file_read(FX_FILE *file_ptr, VOID *buffer_ptr, ULONG request_size, ULONG *actual_size)
{
 801b9a8:	b580      	push	{r7, lr}
 801b9aa:	b086      	sub	sp, #24
 801b9ac:	af00      	add	r7, sp, #0
 801b9ae:	60f8      	str	r0, [r7, #12]
 801b9b0:	60b9      	str	r1, [r7, #8]
 801b9b2:	607a      	str	r2, [r7, #4]
 801b9b4:	603b      	str	r3, [r7, #0]

UINT status;


    /* Check for a null file or buffer pointer.  */
    if ((file_ptr == FX_NULL) || (buffer_ptr == FX_NULL) || (actual_size == FX_NULL))
 801b9b6:	68fb      	ldr	r3, [r7, #12]
 801b9b8:	2b00      	cmp	r3, #0
 801b9ba:	d005      	beq.n	801b9c8 <_fxe_file_read+0x20>
 801b9bc:	68bb      	ldr	r3, [r7, #8]
 801b9be:	2b00      	cmp	r3, #0
 801b9c0:	d002      	beq.n	801b9c8 <_fxe_file_read+0x20>
 801b9c2:	683b      	ldr	r3, [r7, #0]
 801b9c4:	2b00      	cmp	r3, #0
 801b9c6:	d101      	bne.n	801b9cc <_fxe_file_read+0x24>
    {
        return(FX_PTR_ERROR);
 801b9c8:	2318      	movs	r3, #24
 801b9ca:	e01b      	b.n	801ba04 <_fxe_file_read+0x5c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801b9cc:	f3ef 8305 	mrs	r3, IPSR
 801b9d0:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 801b9d2:	693a      	ldr	r2, [r7, #16]
    }

    /* Check for a valid caller.  */
    FX_CALLER_CHECKING_CODE
 801b9d4:	4b0d      	ldr	r3, [pc, #52]	; (801ba0c <_fxe_file_read+0x64>)
 801b9d6:	681b      	ldr	r3, [r3, #0]
 801b9d8:	4313      	orrs	r3, r2
 801b9da:	2b00      	cmp	r3, #0
 801b9dc:	d108      	bne.n	801b9f0 <_fxe_file_read+0x48>
 801b9de:	4b0c      	ldr	r3, [pc, #48]	; (801ba10 <_fxe_file_read+0x68>)
 801b9e0:	681b      	ldr	r3, [r3, #0]
 801b9e2:	2b00      	cmp	r3, #0
 801b9e4:	d004      	beq.n	801b9f0 <_fxe_file_read+0x48>
 801b9e6:	4b0a      	ldr	r3, [pc, #40]	; (801ba10 <_fxe_file_read+0x68>)
 801b9e8:	681b      	ldr	r3, [r3, #0]
 801b9ea:	4a0a      	ldr	r2, [pc, #40]	; (801ba14 <_fxe_file_read+0x6c>)
 801b9ec:	4293      	cmp	r3, r2
 801b9ee:	d101      	bne.n	801b9f4 <_fxe_file_read+0x4c>
 801b9f0:	2320      	movs	r3, #32
 801b9f2:	e007      	b.n	801ba04 <_fxe_file_read+0x5c>

    /* Call actual file read service.  */
    status =  _fx_file_read(file_ptr, buffer_ptr, request_size, actual_size);
 801b9f4:	683b      	ldr	r3, [r7, #0]
 801b9f6:	687a      	ldr	r2, [r7, #4]
 801b9f8:	68b9      	ldr	r1, [r7, #8]
 801b9fa:	68f8      	ldr	r0, [r7, #12]
 801b9fc:	f7fa fc30 	bl	8016260 <_fx_file_read>
 801ba00:	6178      	str	r0, [r7, #20]

    /* Return status to the caller.  */
    return(status);
 801ba02:	697b      	ldr	r3, [r7, #20]
}
 801ba04:	4618      	mov	r0, r3
 801ba06:	3718      	adds	r7, #24
 801ba08:	46bd      	mov	sp, r7
 801ba0a:	bd80      	pop	{r7, pc}
 801ba0c:	24000070 	.word	0x24000070
 801ba10:	240050cc 	.word	0x240050cc
 801ba14:	24005214 	.word	0x24005214

0801ba18 <_fxe_file_rename>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fxe_file_rename(FX_MEDIA *media_ptr, CHAR *old_file_name, CHAR *new_file_name)
{
 801ba18:	b580      	push	{r7, lr}
 801ba1a:	b086      	sub	sp, #24
 801ba1c:	af00      	add	r7, sp, #0
 801ba1e:	60f8      	str	r0, [r7, #12]
 801ba20:	60b9      	str	r1, [r7, #8]
 801ba22:	607a      	str	r2, [r7, #4]

UINT status;


    /* Check for a null media pointer.  */
    if (media_ptr == FX_NULL)
 801ba24:	68fb      	ldr	r3, [r7, #12]
 801ba26:	2b00      	cmp	r3, #0
 801ba28:	d101      	bne.n	801ba2e <_fxe_file_rename+0x16>
    {
        return(FX_PTR_ERROR);
 801ba2a:	2318      	movs	r3, #24
 801ba2c:	e01a      	b.n	801ba64 <_fxe_file_rename+0x4c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801ba2e:	f3ef 8305 	mrs	r3, IPSR
 801ba32:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 801ba34:	693a      	ldr	r2, [r7, #16]
    }

    /* Check for a valid caller.  */
    FX_CALLER_CHECKING_CODE
 801ba36:	4b0d      	ldr	r3, [pc, #52]	; (801ba6c <_fxe_file_rename+0x54>)
 801ba38:	681b      	ldr	r3, [r3, #0]
 801ba3a:	4313      	orrs	r3, r2
 801ba3c:	2b00      	cmp	r3, #0
 801ba3e:	d108      	bne.n	801ba52 <_fxe_file_rename+0x3a>
 801ba40:	4b0b      	ldr	r3, [pc, #44]	; (801ba70 <_fxe_file_rename+0x58>)
 801ba42:	681b      	ldr	r3, [r3, #0]
 801ba44:	2b00      	cmp	r3, #0
 801ba46:	d004      	beq.n	801ba52 <_fxe_file_rename+0x3a>
 801ba48:	4b09      	ldr	r3, [pc, #36]	; (801ba70 <_fxe_file_rename+0x58>)
 801ba4a:	681b      	ldr	r3, [r3, #0]
 801ba4c:	4a09      	ldr	r2, [pc, #36]	; (801ba74 <_fxe_file_rename+0x5c>)
 801ba4e:	4293      	cmp	r3, r2
 801ba50:	d101      	bne.n	801ba56 <_fxe_file_rename+0x3e>
 801ba52:	2320      	movs	r3, #32
 801ba54:	e006      	b.n	801ba64 <_fxe_file_rename+0x4c>

    /* Call actual file rename service.  */
    status =  _fx_file_rename(media_ptr, old_file_name, new_file_name);
 801ba56:	687a      	ldr	r2, [r7, #4]
 801ba58:	68b9      	ldr	r1, [r7, #8]
 801ba5a:	68f8      	ldr	r0, [r7, #12]
 801ba5c:	f7fa fea4 	bl	80167a8 <_fx_file_rename>
 801ba60:	6178      	str	r0, [r7, #20]

    /* File rename is complete, return status.  */
    return(status);
 801ba62:	697b      	ldr	r3, [r7, #20]
}
 801ba64:	4618      	mov	r0, r3
 801ba66:	3718      	adds	r7, #24
 801ba68:	46bd      	mov	sp, r7
 801ba6a:	bd80      	pop	{r7, pc}
 801ba6c:	24000070 	.word	0x24000070
 801ba70:	240050cc 	.word	0x240050cc
 801ba74:	24005214 	.word	0x24005214

0801ba78 <_fxe_file_seek>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fxe_file_seek(FX_FILE *file_ptr, ULONG byte_offset)
{
 801ba78:	b580      	push	{r7, lr}
 801ba7a:	b084      	sub	sp, #16
 801ba7c:	af00      	add	r7, sp, #0
 801ba7e:	6078      	str	r0, [r7, #4]
 801ba80:	6039      	str	r1, [r7, #0]

UINT status;


    /* Check for a null file pointer.  */
    if (file_ptr == FX_NULL)
 801ba82:	687b      	ldr	r3, [r7, #4]
 801ba84:	2b00      	cmp	r3, #0
 801ba86:	d101      	bne.n	801ba8c <_fxe_file_seek+0x14>
    {
        return(FX_PTR_ERROR);
 801ba88:	2318      	movs	r3, #24
 801ba8a:	e019      	b.n	801bac0 <_fxe_file_seek+0x48>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801ba8c:	f3ef 8305 	mrs	r3, IPSR
 801ba90:	60bb      	str	r3, [r7, #8]
    return(ipsr_value);
 801ba92:	68ba      	ldr	r2, [r7, #8]
    }

    /* Check for a valid caller.  */
    FX_CALLER_CHECKING_CODE
 801ba94:	4b0c      	ldr	r3, [pc, #48]	; (801bac8 <_fxe_file_seek+0x50>)
 801ba96:	681b      	ldr	r3, [r3, #0]
 801ba98:	4313      	orrs	r3, r2
 801ba9a:	2b00      	cmp	r3, #0
 801ba9c:	d108      	bne.n	801bab0 <_fxe_file_seek+0x38>
 801ba9e:	4b0b      	ldr	r3, [pc, #44]	; (801bacc <_fxe_file_seek+0x54>)
 801baa0:	681b      	ldr	r3, [r3, #0]
 801baa2:	2b00      	cmp	r3, #0
 801baa4:	d004      	beq.n	801bab0 <_fxe_file_seek+0x38>
 801baa6:	4b09      	ldr	r3, [pc, #36]	; (801bacc <_fxe_file_seek+0x54>)
 801baa8:	681b      	ldr	r3, [r3, #0]
 801baaa:	4a09      	ldr	r2, [pc, #36]	; (801bad0 <_fxe_file_seek+0x58>)
 801baac:	4293      	cmp	r3, r2
 801baae:	d101      	bne.n	801bab4 <_fxe_file_seek+0x3c>
 801bab0:	2320      	movs	r3, #32
 801bab2:	e005      	b.n	801bac0 <_fxe_file_seek+0x48>

    /* Call actual file seek service.  */
    status =  _fx_file_seek(file_ptr, byte_offset);
 801bab4:	6839      	ldr	r1, [r7, #0]
 801bab6:	6878      	ldr	r0, [r7, #4]
 801bab8:	f7fb f978 	bl	8016dac <_fx_file_seek>
 801babc:	60f8      	str	r0, [r7, #12]

    /* Seek is complete, return status.  */
    return(status);
 801babe:	68fb      	ldr	r3, [r7, #12]
}
 801bac0:	4618      	mov	r0, r3
 801bac2:	3710      	adds	r7, #16
 801bac4:	46bd      	mov	sp, r7
 801bac6:	bd80      	pop	{r7, pc}
 801bac8:	24000070 	.word	0x24000070
 801bacc:	240050cc 	.word	0x240050cc
 801bad0:	24005214 	.word	0x24005214

0801bad4 <_fxe_file_write>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fxe_file_write(FX_FILE *file_ptr, VOID *buffer_ptr, ULONG size)
{
 801bad4:	b580      	push	{r7, lr}
 801bad6:	b086      	sub	sp, #24
 801bad8:	af00      	add	r7, sp, #0
 801bada:	60f8      	str	r0, [r7, #12]
 801badc:	60b9      	str	r1, [r7, #8]
 801bade:	607a      	str	r2, [r7, #4]

UINT status;


    /* Check for a null file or buffer pointer.  */
    if ((file_ptr == FX_NULL) || (buffer_ptr == FX_NULL))
 801bae0:	68fb      	ldr	r3, [r7, #12]
 801bae2:	2b00      	cmp	r3, #0
 801bae4:	d002      	beq.n	801baec <_fxe_file_write+0x18>
 801bae6:	68bb      	ldr	r3, [r7, #8]
 801bae8:	2b00      	cmp	r3, #0
 801baea:	d101      	bne.n	801baf0 <_fxe_file_write+0x1c>
    {
        return(FX_PTR_ERROR);
 801baec:	2318      	movs	r3, #24
 801baee:	e01a      	b.n	801bb26 <_fxe_file_write+0x52>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801baf0:	f3ef 8305 	mrs	r3, IPSR
 801baf4:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 801baf6:	693a      	ldr	r2, [r7, #16]
    }

    /* Check for a valid caller.  */
    FX_CALLER_CHECKING_CODE
 801baf8:	4b0d      	ldr	r3, [pc, #52]	; (801bb30 <_fxe_file_write+0x5c>)
 801bafa:	681b      	ldr	r3, [r3, #0]
 801bafc:	4313      	orrs	r3, r2
 801bafe:	2b00      	cmp	r3, #0
 801bb00:	d108      	bne.n	801bb14 <_fxe_file_write+0x40>
 801bb02:	4b0c      	ldr	r3, [pc, #48]	; (801bb34 <_fxe_file_write+0x60>)
 801bb04:	681b      	ldr	r3, [r3, #0]
 801bb06:	2b00      	cmp	r3, #0
 801bb08:	d004      	beq.n	801bb14 <_fxe_file_write+0x40>
 801bb0a:	4b0a      	ldr	r3, [pc, #40]	; (801bb34 <_fxe_file_write+0x60>)
 801bb0c:	681b      	ldr	r3, [r3, #0]
 801bb0e:	4a0a      	ldr	r2, [pc, #40]	; (801bb38 <_fxe_file_write+0x64>)
 801bb10:	4293      	cmp	r3, r2
 801bb12:	d101      	bne.n	801bb18 <_fxe_file_write+0x44>
 801bb14:	2320      	movs	r3, #32
 801bb16:	e006      	b.n	801bb26 <_fxe_file_write+0x52>

    /* Call actual file write service.  */
    status =  _fx_file_write(file_ptr, buffer_ptr, size);
 801bb18:	687a      	ldr	r2, [r7, #4]
 801bb1a:	68b9      	ldr	r1, [r7, #8]
 801bb1c:	68f8      	ldr	r0, [r7, #12]
 801bb1e:	f7fb f957 	bl	8016dd0 <_fx_file_write>
 801bb22:	6178      	str	r0, [r7, #20]

    /* Return status to the caller.  */
    return(status);
 801bb24:	697b      	ldr	r3, [r7, #20]
}
 801bb26:	4618      	mov	r0, r3
 801bb28:	3718      	adds	r7, #24
 801bb2a:	46bd      	mov	sp, r7
 801bb2c:	bd80      	pop	{r7, pc}
 801bb2e:	bf00      	nop
 801bb30:	24000070 	.word	0x24000070
 801bb34:	240050cc 	.word	0x240050cc
 801bb38:	24005214 	.word	0x24005214

0801bb3c <_fxe_media_close>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fxe_media_close(FX_MEDIA  *media_ptr)
{
 801bb3c:	b580      	push	{r7, lr}
 801bb3e:	b084      	sub	sp, #16
 801bb40:	af00      	add	r7, sp, #0
 801bb42:	6078      	str	r0, [r7, #4]

UINT status;


    /* Check for a null media pointer.  */
    if (media_ptr == FX_NULL)
 801bb44:	687b      	ldr	r3, [r7, #4]
 801bb46:	2b00      	cmp	r3, #0
 801bb48:	d101      	bne.n	801bb4e <_fxe_media_close+0x12>
    {
        return(FX_PTR_ERROR);
 801bb4a:	2318      	movs	r3, #24
 801bb4c:	e018      	b.n	801bb80 <_fxe_media_close+0x44>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801bb4e:	f3ef 8305 	mrs	r3, IPSR
 801bb52:	60bb      	str	r3, [r7, #8]
    return(ipsr_value);
 801bb54:	68ba      	ldr	r2, [r7, #8]
    }

    /* Check for a valid caller.  */
    FX_CALLER_CHECKING_CODE
 801bb56:	4b0c      	ldr	r3, [pc, #48]	; (801bb88 <_fxe_media_close+0x4c>)
 801bb58:	681b      	ldr	r3, [r3, #0]
 801bb5a:	4313      	orrs	r3, r2
 801bb5c:	2b00      	cmp	r3, #0
 801bb5e:	d108      	bne.n	801bb72 <_fxe_media_close+0x36>
 801bb60:	4b0a      	ldr	r3, [pc, #40]	; (801bb8c <_fxe_media_close+0x50>)
 801bb62:	681b      	ldr	r3, [r3, #0]
 801bb64:	2b00      	cmp	r3, #0
 801bb66:	d004      	beq.n	801bb72 <_fxe_media_close+0x36>
 801bb68:	4b08      	ldr	r3, [pc, #32]	; (801bb8c <_fxe_media_close+0x50>)
 801bb6a:	681b      	ldr	r3, [r3, #0]
 801bb6c:	4a08      	ldr	r2, [pc, #32]	; (801bb90 <_fxe_media_close+0x54>)
 801bb6e:	4293      	cmp	r3, r2
 801bb70:	d101      	bne.n	801bb76 <_fxe_media_close+0x3a>
 801bb72:	2320      	movs	r3, #32
 801bb74:	e004      	b.n	801bb80 <_fxe_media_close+0x44>

    /* Call actual media close service.  */
    status =  _fx_media_close(media_ptr);
 801bb76:	6878      	ldr	r0, [r7, #4]
 801bb78:	f7fc f9aa 	bl	8017ed0 <_fx_media_close>
 801bb7c:	60f8      	str	r0, [r7, #12]

    /* Return status to the caller.  */
    return(status);
 801bb7e:	68fb      	ldr	r3, [r7, #12]
}
 801bb80:	4618      	mov	r0, r3
 801bb82:	3710      	adds	r7, #16
 801bb84:	46bd      	mov	sp, r7
 801bb86:	bd80      	pop	{r7, pc}
 801bb88:	24000070 	.word	0x24000070
 801bb8c:	240050cc 	.word	0x240050cc
 801bb90:	24005214 	.word	0x24005214

0801bb94 <_fxe_media_flush>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fxe_media_flush(FX_MEDIA  *media_ptr)
{
 801bb94:	b580      	push	{r7, lr}
 801bb96:	b084      	sub	sp, #16
 801bb98:	af00      	add	r7, sp, #0
 801bb9a:	6078      	str	r0, [r7, #4]

UINT status;


    /* Check for a null media pointer.  */
    if (media_ptr == FX_NULL)
 801bb9c:	687b      	ldr	r3, [r7, #4]
 801bb9e:	2b00      	cmp	r3, #0
 801bba0:	d101      	bne.n	801bba6 <_fxe_media_flush+0x12>
    {
        return(FX_PTR_ERROR);
 801bba2:	2318      	movs	r3, #24
 801bba4:	e018      	b.n	801bbd8 <_fxe_media_flush+0x44>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801bba6:	f3ef 8305 	mrs	r3, IPSR
 801bbaa:	60bb      	str	r3, [r7, #8]
    return(ipsr_value);
 801bbac:	68ba      	ldr	r2, [r7, #8]
    }

    /* Check for a valid caller.  */
    FX_CALLER_CHECKING_CODE
 801bbae:	4b0c      	ldr	r3, [pc, #48]	; (801bbe0 <_fxe_media_flush+0x4c>)
 801bbb0:	681b      	ldr	r3, [r3, #0]
 801bbb2:	4313      	orrs	r3, r2
 801bbb4:	2b00      	cmp	r3, #0
 801bbb6:	d108      	bne.n	801bbca <_fxe_media_flush+0x36>
 801bbb8:	4b0a      	ldr	r3, [pc, #40]	; (801bbe4 <_fxe_media_flush+0x50>)
 801bbba:	681b      	ldr	r3, [r3, #0]
 801bbbc:	2b00      	cmp	r3, #0
 801bbbe:	d004      	beq.n	801bbca <_fxe_media_flush+0x36>
 801bbc0:	4b08      	ldr	r3, [pc, #32]	; (801bbe4 <_fxe_media_flush+0x50>)
 801bbc2:	681b      	ldr	r3, [r3, #0]
 801bbc4:	4a08      	ldr	r2, [pc, #32]	; (801bbe8 <_fxe_media_flush+0x54>)
 801bbc6:	4293      	cmp	r3, r2
 801bbc8:	d101      	bne.n	801bbce <_fxe_media_flush+0x3a>
 801bbca:	2320      	movs	r3, #32
 801bbcc:	e004      	b.n	801bbd8 <_fxe_media_flush+0x44>

    /* Call actual media flush service.  */
    status =  _fx_media_flush(media_ptr);
 801bbce:	6878      	ldr	r0, [r7, #4]
 801bbd0:	f7fc fb56 	bl	8018280 <_fx_media_flush>
 801bbd4:	60f8      	str	r0, [r7, #12]

    /* Return status to the caller.  */
    return(status);
 801bbd6:	68fb      	ldr	r3, [r7, #12]
}
 801bbd8:	4618      	mov	r0, r3
 801bbda:	3710      	adds	r7, #16
 801bbdc:	46bd      	mov	sp, r7
 801bbde:	bd80      	pop	{r7, pc}
 801bbe0:	24000070 	.word	0x24000070
 801bbe4:	240050cc 	.word	0x240050cc
 801bbe8:	24005214 	.word	0x24005214

0801bbec <_fxe_media_open>:
/*                                                                        */
/**************************************************************************/
UINT  _fxe_media_open(FX_MEDIA *media_ptr, CHAR *media_name,
                      VOID (*media_driver)(FX_MEDIA *), VOID *driver_info_ptr,
                      VOID *memory_ptr, ULONG memory_size, UINT media_control_block_size)
{
 801bbec:	b580      	push	{r7, lr}
 801bbee:	b08e      	sub	sp, #56	; 0x38
 801bbf0:	af02      	add	r7, sp, #8
 801bbf2:	60f8      	str	r0, [r7, #12]
 801bbf4:	60b9      	str	r1, [r7, #8]
 801bbf6:	607a      	str	r2, [r7, #4]
 801bbf8:	603b      	str	r3, [r7, #0]
UINT       old_threshold;
#endif


    /* Check for invalid input pointers.  */
    if ((media_ptr == FX_NULL) || (media_driver == FX_NULL) || (memory_ptr == FX_NULL) || (media_control_block_size != sizeof(FX_MEDIA)))
 801bbfa:	68fb      	ldr	r3, [r7, #12]
 801bbfc:	2b00      	cmp	r3, #0
 801bbfe:	d00a      	beq.n	801bc16 <_fxe_media_open+0x2a>
 801bc00:	687b      	ldr	r3, [r7, #4]
 801bc02:	2b00      	cmp	r3, #0
 801bc04:	d007      	beq.n	801bc16 <_fxe_media_open+0x2a>
 801bc06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801bc08:	2b00      	cmp	r3, #0
 801bc0a:	d004      	beq.n	801bc16 <_fxe_media_open+0x2a>
 801bc0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801bc0e:	f242 42b8 	movw	r2, #9400	; 0x24b8
 801bc12:	4293      	cmp	r3, r2
 801bc14:	d001      	beq.n	801bc1a <_fxe_media_open+0x2e>
    {
        return(FX_PTR_ERROR);
 801bc16:	2318      	movs	r3, #24
 801bc18:	e071      	b.n	801bcfe <_fxe_media_open+0x112>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801bc1a:	f3ef 8305 	mrs	r3, IPSR
 801bc1e:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 801bc20:	69ba      	ldr	r2, [r7, #24]
    }

    /* Check for a valid caller.  */
    FX_CALLER_CHECKING_CODE
 801bc22:	4b39      	ldr	r3, [pc, #228]	; (801bd08 <_fxe_media_open+0x11c>)
 801bc24:	681b      	ldr	r3, [r3, #0]
 801bc26:	4313      	orrs	r3, r2
 801bc28:	2b00      	cmp	r3, #0
 801bc2a:	d108      	bne.n	801bc3e <_fxe_media_open+0x52>
 801bc2c:	4b37      	ldr	r3, [pc, #220]	; (801bd0c <_fxe_media_open+0x120>)
 801bc2e:	681b      	ldr	r3, [r3, #0]
 801bc30:	2b00      	cmp	r3, #0
 801bc32:	d004      	beq.n	801bc3e <_fxe_media_open+0x52>
 801bc34:	4b35      	ldr	r3, [pc, #212]	; (801bd0c <_fxe_media_open+0x120>)
 801bc36:	681b      	ldr	r3, [r3, #0]
 801bc38:	4a35      	ldr	r2, [pc, #212]	; (801bd10 <_fxe_media_open+0x124>)
 801bc3a:	4293      	cmp	r3, r2
 801bc3c:	d101      	bne.n	801bc42 <_fxe_media_open+0x56>
 801bc3e:	2320      	movs	r3, #32
 801bc40:	e05d      	b.n	801bcfe <_fxe_media_open+0x112>

    /* Check for proper size of the logical sector cache.  */
    temp =  _fx_system_media_max_sector_cache;
 801bc42:	4b34      	ldr	r3, [pc, #208]	; (801bd14 <_fxe_media_open+0x128>)
 801bc44:	681b      	ldr	r3, [r3, #0]
 801bc46:	627b      	str	r3, [r7, #36]	; 0x24

    /* Isolate the lowest set bit.  */
    temp =  (temp & ((~temp) + ((ULONG) 1)));
 801bc48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bc4a:	425b      	negs	r3, r3
 801bc4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801bc4e:	4013      	ands	r3, r2
 801bc50:	627b      	str	r3, [r7, #36]	; 0x24

    /* If FX_MAX_SECTOR_CACHE is a power of 2, the value of temp should be unchanged.  */
    if ((temp == 1) || (temp != _fx_system_media_max_sector_cache))
 801bc52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bc54:	2b01      	cmp	r3, #1
 801bc56:	d004      	beq.n	801bc62 <_fxe_media_open+0x76>
 801bc58:	4b2e      	ldr	r3, [pc, #184]	; (801bd14 <_fxe_media_open+0x128>)
 801bc5a:	681b      	ldr	r3, [r3, #0]
 801bc5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801bc5e:	429a      	cmp	r2, r3
 801bc60:	d001      	beq.n	801bc66 <_fxe_media_open+0x7a>
    {

        /* Not a power of 2, return an error.  */
        return(FX_MEDIA_INVALID);
 801bc62:	2302      	movs	r3, #2
 801bc64:	e04b      	b.n	801bcfe <_fxe_media_open+0x112>
    }

    /* Check for proper size of the FAT cache.  */
    temp =  _fx_system_media_max_fat_cache;
 801bc66:	4b2c      	ldr	r3, [pc, #176]	; (801bd18 <_fxe_media_open+0x12c>)
 801bc68:	681b      	ldr	r3, [r3, #0]
 801bc6a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Isolate the lowest set bit.  */
    temp =  (temp & ((~temp) + ((ULONG) 1)));
 801bc6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bc6e:	425b      	negs	r3, r3
 801bc70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801bc72:	4013      	ands	r3, r2
 801bc74:	627b      	str	r3, [r7, #36]	; 0x24

    /* If FX_MAX_FAT_CACHE is a power of 2, the value of temp should be unchanged.  */
    if ((temp == 1) || (temp != _fx_system_media_max_fat_cache))
 801bc76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bc78:	2b01      	cmp	r3, #1
 801bc7a:	d004      	beq.n	801bc86 <_fxe_media_open+0x9a>
 801bc7c:	4b26      	ldr	r3, [pc, #152]	; (801bd18 <_fxe_media_open+0x12c>)
 801bc7e:	681b      	ldr	r3, [r3, #0]
 801bc80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801bc82:	429a      	cmp	r2, r3
 801bc84:	d001      	beq.n	801bc8a <_fxe_media_open+0x9e>
    {

        /* Not a power of 2, return an error.  */
        return(FX_MEDIA_INVALID);
 801bc86:	2302      	movs	r3, #2
 801bc88:	e039      	b.n	801bcfe <_fxe_media_open+0x112>

#ifndef FX_SINGLE_THREAD

    /* Pickup current thread pointer. At this point we know the current thread pointer is non-null since 
       it was checked by code in FX_CALLER_CHECKING_CODE macro.  */
    current_thread =  tx_thread_identify();
 801bc8a:	f001 fd3f 	bl	801d70c <_tx_thread_identify>
 801bc8e:	6238      	str	r0, [r7, #32]

    /* Disable preemption temporarily.  */
    tx_thread_preemption_change(current_thread, 0, &old_threshold);
 801bc90:	f107 0314 	add.w	r3, r7, #20
 801bc94:	461a      	mov	r2, r3
 801bc96:	2100      	movs	r1, #0
 801bc98:	6a38      	ldr	r0, [r7, #32]
 801bc9a:	f001 fd91 	bl	801d7c0 <_tx_thread_preemption_change>
#endif

    /* Loop to check for the media already opened.  */
    current_media =  _fx_system_media_opened_ptr;
 801bc9e:	4b1f      	ldr	r3, [pc, #124]	; (801bd1c <_fxe_media_open+0x130>)
 801bca0:	681b      	ldr	r3, [r3, #0]
 801bca2:	62fb      	str	r3, [r7, #44]	; 0x2c
    open_count =     _fx_system_media_opened_count;
 801bca4:	4b1e      	ldr	r3, [pc, #120]	; (801bd20 <_fxe_media_open+0x134>)
 801bca6:	681b      	ldr	r3, [r3, #0]
 801bca8:	62bb      	str	r3, [r7, #40]	; 0x28
    while (open_count--)
 801bcaa:	e010      	b.n	801bcce <_fxe_media_open+0xe2>
    {

        /* Is the new media pointer already open?  */
        if (media_ptr == current_media)
 801bcac:	68fa      	ldr	r2, [r7, #12]
 801bcae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bcb0:	429a      	cmp	r2, r3
 801bcb2:	d108      	bne.n	801bcc6 <_fxe_media_open+0xda>
        {

#ifndef FX_SINGLE_THREAD

            /* Restore preemption.  */
            tx_thread_preemption_change(current_thread, old_threshold, &old_threshold);
 801bcb4:	697b      	ldr	r3, [r7, #20]
 801bcb6:	f107 0214 	add.w	r2, r7, #20
 801bcba:	4619      	mov	r1, r3
 801bcbc:	6a38      	ldr	r0, [r7, #32]
 801bcbe:	f001 fd7f 	bl	801d7c0 <_tx_thread_preemption_change>
#endif

            /* Duplicate media open, return an error!  */
            return(FX_PTR_ERROR);
 801bcc2:	2318      	movs	r3, #24
 801bcc4:	e01b      	b.n	801bcfe <_fxe_media_open+0x112>
        }

        /* Move to next entry.  */
        current_media =  current_media -> fx_media_opened_next;
 801bcc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bcc8:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 801bccc:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (open_count--)
 801bcce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bcd0:	1e5a      	subs	r2, r3, #1
 801bcd2:	62ba      	str	r2, [r7, #40]	; 0x28
 801bcd4:	2b00      	cmp	r3, #0
 801bcd6:	d1e9      	bne.n	801bcac <_fxe_media_open+0xc0>
    }

#ifndef FX_SINGLE_THREAD

    /* Restore preemption.  */
    tx_thread_preemption_change(current_thread, old_threshold, &old_threshold);
 801bcd8:	697b      	ldr	r3, [r7, #20]
 801bcda:	f107 0214 	add.w	r2, r7, #20
 801bcde:	4619      	mov	r1, r3
 801bce0:	6a38      	ldr	r0, [r7, #32]
 801bce2:	f001 fd6d 	bl	801d7c0 <_tx_thread_preemption_change>
#endif

    /* Call actual media open service.  */
    status =  _fx_media_open(media_ptr, media_name, media_driver, driver_info_ptr,
 801bce6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801bce8:	9301      	str	r3, [sp, #4]
 801bcea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801bcec:	9300      	str	r3, [sp, #0]
 801bcee:	683b      	ldr	r3, [r7, #0]
 801bcf0:	687a      	ldr	r2, [r7, #4]
 801bcf2:	68b9      	ldr	r1, [r7, #8]
 801bcf4:	68f8      	ldr	r0, [r7, #12]
 801bcf6:	f7fc fc4f 	bl	8018598 <_fx_media_open>
 801bcfa:	61f8      	str	r0, [r7, #28]
                             memory_ptr, memory_size);

    /* Return status.  */
    return(status);
 801bcfc:	69fb      	ldr	r3, [r7, #28]
}
 801bcfe:	4618      	mov	r0, r3
 801bd00:	3730      	adds	r7, #48	; 0x30
 801bd02:	46bd      	mov	sp, r7
 801bd04:	bd80      	pop	{r7, pc}
 801bd06:	bf00      	nop
 801bd08:	24000070 	.word	0x24000070
 801bd0c:	240050cc 	.word	0x240050cc
 801bd10:	24005214 	.word	0x24005214
 801bd14:	24005054 	.word	0x24005054
 801bd18:	24005058 	.word	0x24005058
 801bd1c:	24005044 	.word	0x24005044
 801bd20:	24005048 	.word	0x24005048

0801bd24 <_tx_byte_allocate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr, ULONG memory_size,  ULONG wait_option)
{
 801bd24:	b580      	push	{r7, lr}
 801bd26:	b096      	sub	sp, #88	; 0x58
 801bd28:	af00      	add	r7, sp, #0
 801bd2a:	60f8      	str	r0, [r7, #12]
 801bd2c:	60b9      	str	r1, [r7, #8]
 801bd2e:	607a      	str	r2, [r7, #4]
 801bd30:	603b      	str	r3, [r7, #0]
#endif


    /* Round the memory size up to the next size that is evenly divisible by
       an ALIGN_TYPE (this is typically a 32-bit ULONG).  This guarantees proper alignment.  */
    memory_size = (((memory_size + (sizeof(ALIGN_TYPE)))-((ALIGN_TYPE) 1))/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 801bd32:	687b      	ldr	r3, [r7, #4]
 801bd34:	3303      	adds	r3, #3
 801bd36:	f023 0303 	bic.w	r3, r3, #3
 801bd3a:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801bd3c:	f3ef 8310 	mrs	r3, PRIMASK
 801bd40:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 801bd42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 801bd44:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 801bd46:	b672      	cpsid	i
    return(int_posture);
 801bd48:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable interrupts.  */
    TX_DISABLE
 801bd4a:	657b      	str	r3, [r7, #84]	; 0x54

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 801bd4c:	4b55      	ldr	r3, [pc, #340]	; (801bea4 <_tx_byte_allocate+0x180>)
 801bd4e:	681b      	ldr	r3, [r3, #0]
 801bd50:	64bb      	str	r3, [r7, #72]	; 0x48
    lower_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_LOWER_OFFSET));
    upper_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_UPPER_OFFSET));
#endif

    /* Set the search finished flag to false.  */
    finished =  TX_FALSE;
 801bd52:	2300      	movs	r3, #0
 801bd54:	64fb      	str	r3, [r7, #76]	; 0x4c
    /* Loop to handle cases where the owner of the pool changed.  */
    do
    {

        /* Indicate that this thread is the current owner.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 801bd56:	68fb      	ldr	r3, [r7, #12]
 801bd58:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801bd5a:	621a      	str	r2, [r3, #32]
 801bd5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801bd5e:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801bd60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bd62:	f383 8810 	msr	PRIMASK, r3
}
 801bd66:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE

        /* At this point, the executing thread owns the pool and can perform a search
           for free memory.  */
        work_ptr =  _tx_byte_pool_search(pool_ptr, memory_size);
 801bd68:	6879      	ldr	r1, [r7, #4]
 801bd6a:	68f8      	ldr	r0, [r7, #12]
 801bd6c:	f000 f9b2 	bl	801c0d4 <_tx_byte_pool_search>
 801bd70:	6478      	str	r0, [r7, #68]	; 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801bd72:	f3ef 8310 	mrs	r3, PRIMASK
 801bd76:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 801bd78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 801bd7a:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 801bd7c:	b672      	cpsid	i
    return(int_posture);
 801bd7e:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Optional processing extension.  */
        TX_BYTE_ALLOCATE_EXTENSION

        /* Lockout interrupts.  */
        TX_DISABLE
 801bd80:	657b      	str	r3, [r7, #84]	; 0x54

        /* Determine if we are finished.  */
        if (work_ptr != TX_NULL)
 801bd82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801bd84:	2b00      	cmp	r3, #0
 801bd86:	d002      	beq.n	801bd8e <_tx_byte_allocate+0x6a>
        {

            /* Yes, we have found a block the search is finished.  */
            finished =  TX_TRUE;
 801bd88:	2301      	movs	r3, #1
 801bd8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 801bd8c:	e006      	b.n	801bd9c <_tx_byte_allocate+0x78>
        }
        else
        {

            /* No block was found, does this thread still own the pool?  */
            if (pool_ptr -> tx_byte_pool_owner == thread_ptr)
 801bd8e:	68fb      	ldr	r3, [r7, #12]
 801bd90:	6a1b      	ldr	r3, [r3, #32]
 801bd92:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801bd94:	429a      	cmp	r2, r3
 801bd96:	d101      	bne.n	801bd9c <_tx_byte_allocate+0x78>
            {

                /* Yes, then we have looked through the entire pool and haven't found the memory.  */
                finished =  TX_TRUE;
 801bd98:	2301      	movs	r3, #1
 801bd9a:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
        }

    } while (finished == TX_FALSE);
 801bd9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801bd9e:	2b00      	cmp	r3, #0
 801bda0:	d0d9      	beq.n	801bd56 <_tx_byte_allocate+0x32>

    /* Copy the pointer into the return destination.  */
    *memory_ptr =  (VOID *) work_ptr;
 801bda2:	68bb      	ldr	r3, [r7, #8]
 801bda4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801bda6:	601a      	str	r2, [r3, #0]

    /* Determine if memory was found.  */
    if (work_ptr != TX_NULL)
 801bda8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801bdaa:	2b00      	cmp	r3, #0
 801bdac:	d008      	beq.n	801bdc0 <_tx_byte_allocate+0x9c>
 801bdae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801bdb0:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801bdb2:	6a3b      	ldr	r3, [r7, #32]
 801bdb4:	f383 8810 	msr	PRIMASK, r3
}
 801bdb8:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Set the status to success.  */
        status =  TX_SUCCESS;
 801bdba:	2300      	movs	r3, #0
 801bdbc:	653b      	str	r3, [r7, #80]	; 0x50
 801bdbe:	e06c      	b.n	801be9a <_tx_byte_allocate+0x176>
    {

        /* No memory of sufficient size was found...  */

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 801bdc0:	683b      	ldr	r3, [r7, #0]
 801bdc2:	2b00      	cmp	r3, #0
 801bdc4:	d061      	beq.n	801be8a <_tx_byte_allocate+0x166>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 801bdc6:	4b38      	ldr	r3, [pc, #224]	; (801bea8 <_tx_byte_allocate+0x184>)
 801bdc8:	681b      	ldr	r3, [r3, #0]
 801bdca:	2b00      	cmp	r3, #0
 801bdcc:	d007      	beq.n	801bdde <_tx_byte_allocate+0xba>
            {

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
                status =  TX_NO_MEMORY;
 801bdce:	2310      	movs	r3, #16
 801bdd0:	653b      	str	r3, [r7, #80]	; 0x50
 801bdd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801bdd4:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801bdd6:	69fb      	ldr	r3, [r7, #28]
 801bdd8:	f383 8810 	msr	PRIMASK, r3
}
 801bddc:	e05d      	b.n	801be9a <_tx_byte_allocate+0x176>
                /* Increment the number of suspensions on this pool.  */
                pool_ptr -> tx_byte_pool_performance_suspension_count++;
#endif

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_byte_pool_cleanup);
 801bdde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801bde0:	4a32      	ldr	r2, [pc, #200]	; (801beac <_tx_byte_allocate+0x188>)
 801bde2:	669a      	str	r2, [r3, #104]	; 0x68

                /* Setup cleanup information, i.e. this pool control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) pool_ptr;
 801bde4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801bde6:	68fa      	ldr	r2, [r7, #12]
 801bde8:	66da      	str	r2, [r3, #108]	; 0x6c

                /* Save the return memory pointer address as well.  */
                thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) memory_ptr;
 801bdea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801bdec:	68ba      	ldr	r2, [r7, #8]
 801bdee:	67da      	str	r2, [r3, #124]	; 0x7c

                /* Save the byte size requested.  */
                thread_ptr -> tx_thread_suspend_info =  memory_size;
 801bdf0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801bdf2:	687a      	ldr	r2, [r7, #4]
 801bdf4:	679a      	str	r2, [r3, #120]	; 0x78

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 801bdf6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801bdf8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801bdfc:	1c5a      	adds	r2, r3, #1
 801bdfe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801be00:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

                /* Pickup the number of suspended threads.  */
                suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 801be04:	68fb      	ldr	r3, [r7, #12]
 801be06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801be08:	643b      	str	r3, [r7, #64]	; 0x40

                /* Increment the suspension count.  */
                (pool_ptr -> tx_byte_pool_suspended_count)++;
 801be0a:	68fb      	ldr	r3, [r7, #12]
 801be0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801be0e:	1c5a      	adds	r2, r3, #1
 801be10:	68fb      	ldr	r3, [r7, #12]
 801be12:	629a      	str	r2, [r3, #40]	; 0x28

                /* Setup suspension list.  */
                if (suspended_count == TX_NO_SUSPENSIONS)
 801be14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801be16:	2b00      	cmp	r3, #0
 801be18:	d109      	bne.n	801be2e <_tx_byte_allocate+0x10a>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    pool_ptr -> tx_byte_pool_suspension_list =      thread_ptr;
 801be1a:	68fb      	ldr	r3, [r7, #12]
 801be1c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801be1e:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 801be20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801be22:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801be24:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 801be26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801be28:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801be2a:	675a      	str	r2, [r3, #116]	; 0x74
 801be2c:	e011      	b.n	801be52 <_tx_byte_allocate+0x12e>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   pool_ptr -> tx_byte_pool_suspension_list;
 801be2e:	68fb      	ldr	r3, [r7, #12]
 801be30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801be32:	63fb      	str	r3, [r7, #60]	; 0x3c
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 801be34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801be36:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801be38:	671a      	str	r2, [r3, #112]	; 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 801be3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801be3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801be3e:	63bb      	str	r3, [r7, #56]	; 0x38
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 801be40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801be42:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801be44:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 801be46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801be48:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801be4a:	671a      	str	r2, [r3, #112]	; 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 801be4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801be4e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801be50:	675a      	str	r2, [r3, #116]	; 0x74
                }

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =       TX_BYTE_MEMORY;
 801be52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801be54:	2209      	movs	r2, #9
 801be56:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 801be58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801be5a:	2201      	movs	r2, #1
 801be5c:	639a      	str	r2, [r3, #56]	; 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 801be5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801be60:	683a      	ldr	r2, [r7, #0]
 801be62:	64da      	str	r2, [r3, #76]	; 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 801be64:	4b10      	ldr	r3, [pc, #64]	; (801bea8 <_tx_byte_allocate+0x184>)
 801be66:	681b      	ldr	r3, [r3, #0]
 801be68:	3301      	adds	r3, #1
 801be6a:	4a0f      	ldr	r2, [pc, #60]	; (801bea8 <_tx_byte_allocate+0x184>)
 801be6c:	6013      	str	r3, [r2, #0]
 801be6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801be70:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801be72:	69bb      	ldr	r3, [r7, #24]
 801be74:	f383 8810 	msr	PRIMASK, r3
}
 801be78:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 801be7a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 801be7c:	f001 ff1a 	bl	801dcb4 <_tx_thread_system_suspend>
                    *((ULONG *) (log_entry_ptr + TX_EL_EVENT_INFO_4_OFFSET)) =  (ULONG) *memory_ptr;
                }
#endif

                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 801be80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801be82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801be86:	653b      	str	r3, [r7, #80]	; 0x50
 801be88:	e007      	b.n	801be9a <_tx_byte_allocate+0x176>
 801be8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801be8c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801be8e:	697b      	ldr	r3, [r7, #20]
 801be90:	f383 8810 	msr	PRIMASK, r3
}
 801be94:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Immediate return, return error completion.  */
            status =  TX_NO_MEMORY;
 801be96:	2310      	movs	r3, #16
 801be98:	653b      	str	r3, [r7, #80]	; 0x50
        }
    }

    /* Return completion status.  */
    return(status);
 801be9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 801be9c:	4618      	mov	r0, r3
 801be9e:	3758      	adds	r7, #88	; 0x58
 801bea0:	46bd      	mov	sp, r7
 801bea2:	bd80      	pop	{r7, pc}
 801bea4:	240050cc 	.word	0x240050cc
 801bea8:	24005164 	.word	0x24005164
 801beac:	0801beb1 	.word	0x0801beb1

0801beb0 <_tx_byte_pool_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_byte_pool_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 801beb0:	b580      	push	{r7, lr}
 801beb2:	b08e      	sub	sp, #56	; 0x38
 801beb4:	af00      	add	r7, sp, #0
 801beb6:	6078      	str	r0, [r7, #4]
 801beb8:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801beba:	f3ef 8310 	mrs	r3, PRIMASK
 801bebe:	623b      	str	r3, [r7, #32]
    return(posture);
 801bec0:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 801bec2:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 801bec4:	b672      	cpsid	i
    return(int_posture);
 801bec6:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the byte pool.  */
    TX_DISABLE
 801bec8:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_byte_pool_cleanup))
 801beca:	687b      	ldr	r3, [r7, #4]
 801becc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801bece:	4a33      	ldr	r2, [pc, #204]	; (801bf9c <_tx_byte_pool_cleanup+0xec>)
 801bed0:	4293      	cmp	r3, r2
 801bed2:	d158      	bne.n	801bf86 <_tx_byte_pool_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 801bed4:	687b      	ldr	r3, [r7, #4]
 801bed6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801beda:	683a      	ldr	r2, [r7, #0]
 801bedc:	429a      	cmp	r2, r3
 801bede:	d152      	bne.n	801bf86 <_tx_byte_pool_cleanup+0xd6>
        {

            /* Setup pointer to byte pool control block.  */
            pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 801bee0:	687b      	ldr	r3, [r7, #4]
 801bee2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801bee4:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for a NULL byte pool pointer.  */
            if (pool_ptr != TX_NULL)
 801bee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bee8:	2b00      	cmp	r3, #0
 801beea:	d04c      	beq.n	801bf86 <_tx_byte_pool_cleanup+0xd6>
            {

                /* Check for valid pool ID.  */
                if (pool_ptr -> tx_byte_pool_id == TX_BYTE_POOL_ID)
 801beec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801beee:	681b      	ldr	r3, [r3, #0]
 801bef0:	4a2b      	ldr	r2, [pc, #172]	; (801bfa0 <_tx_byte_pool_cleanup+0xf0>)
 801bef2:	4293      	cmp	r3, r2
 801bef4:	d147      	bne.n	801bf86 <_tx_byte_pool_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (pool_ptr -> tx_byte_pool_suspended_count != TX_NO_SUSPENSIONS)
 801bef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801befa:	2b00      	cmp	r3, #0
 801befc:	d043      	beq.n	801bf86 <_tx_byte_pool_cleanup+0xd6>
                        /* Setup pointer to byte pool control block.  */
                        pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
#endif

                        /* Thread suspended for memory... Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 801befe:	687b      	ldr	r3, [r7, #4]
 801bf00:	2200      	movs	r2, #0
 801bf02:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspension count.  */
                        pool_ptr -> tx_byte_pool_suspended_count--;
 801bf04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bf06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801bf08:	1e5a      	subs	r2, r3, #1
 801bf0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bf0c:	629a      	str	r2, [r3, #40]	; 0x28

                        /* Pickup the suspended count.  */
                        suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 801bf0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bf10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801bf12:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 801bf14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bf16:	2b00      	cmp	r3, #0
 801bf18:	d103      	bne.n	801bf22 <_tx_byte_pool_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            pool_ptr -> tx_byte_pool_suspension_list =  TX_NULL;
 801bf1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bf1c:	2200      	movs	r2, #0
 801bf1e:	625a      	str	r2, [r3, #36]	; 0x24
 801bf20:	e013      	b.n	801bf4a <_tx_byte_pool_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 801bf22:	687b      	ldr	r3, [r7, #4]
 801bf24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801bf26:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 801bf28:	687b      	ldr	r3, [r7, #4]
 801bf2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801bf2c:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 801bf2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bf30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801bf32:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 801bf34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bf36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801bf38:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (pool_ptr -> tx_byte_pool_suspension_list == thread_ptr)
 801bf3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bf3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bf3e:	687a      	ldr	r2, [r7, #4]
 801bf40:	429a      	cmp	r2, r3
 801bf42:	d102      	bne.n	801bf4a <_tx_byte_pool_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                pool_ptr -> tx_byte_pool_suspension_list =      next_thread;
 801bf44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bf46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801bf48:	625a      	str	r2, [r3, #36]	; 0x24
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_BYTE_MEMORY)
 801bf4a:	687b      	ldr	r3, [r7, #4]
 801bf4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bf4e:	2b09      	cmp	r3, #9
 801bf50:	d119      	bne.n	801bf86 <_tx_byte_pool_cleanup+0xd6>
                            /* Increment the number of timeouts on this byte pool.  */
                            pool_ptr -> tx_byte_pool_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_MEMORY;
 801bf52:	687b      	ldr	r3, [r7, #4]
 801bf54:	2210      	movs	r2, #16
 801bf56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 801bf5a:	4b12      	ldr	r3, [pc, #72]	; (801bfa4 <_tx_byte_pool_cleanup+0xf4>)
 801bf5c:	681b      	ldr	r3, [r3, #0]
 801bf5e:	3301      	adds	r3, #1
 801bf60:	4a10      	ldr	r2, [pc, #64]	; (801bfa4 <_tx_byte_pool_cleanup+0xf4>)
 801bf62:	6013      	str	r3, [r2, #0]
 801bf64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801bf66:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801bf68:	693b      	ldr	r3, [r7, #16]
 801bf6a:	f383 8810 	msr	PRIMASK, r3
}
 801bf6e:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 801bf70:	6878      	ldr	r0, [r7, #4]
 801bf72:	f001 fd9f 	bl	801dab4 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801bf76:	f3ef 8310 	mrs	r3, PRIMASK
 801bf7a:	61bb      	str	r3, [r7, #24]
    return(posture);
 801bf7c:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 801bf7e:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 801bf80:	b672      	cpsid	i
    return(int_posture);
 801bf82:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 801bf84:	637b      	str	r3, [r7, #52]	; 0x34
 801bf86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801bf88:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801bf8a:	68fb      	ldr	r3, [r7, #12]
 801bf8c:	f383 8810 	msr	PRIMASK, r3
}
 801bf90:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 801bf92:	bf00      	nop
 801bf94:	3738      	adds	r7, #56	; 0x38
 801bf96:	46bd      	mov	sp, r7
 801bf98:	bd80      	pop	{r7, pc}
 801bf9a:	bf00      	nop
 801bf9c:	0801beb1 	.word	0x0801beb1
 801bfa0:	42595445 	.word	0x42595445
 801bfa4:	24005164 	.word	0x24005164

0801bfa8 <_tx_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size)
{
 801bfa8:	b580      	push	{r7, lr}
 801bfaa:	b08e      	sub	sp, #56	; 0x38
 801bfac:	af00      	add	r7, sp, #0
 801bfae:	60f8      	str	r0, [r7, #12]
 801bfb0:	60b9      	str	r1, [r7, #8]
 801bfb2:	607a      	str	r2, [r7, #4]
 801bfb4:	603b      	str	r3, [r7, #0]
TX_BYTE_POOL        *previous_pool;
ALIGN_TYPE          *free_ptr;


    /* Initialize the byte pool control block to all zeros.  */
    TX_MEMSET(pool_ptr, 0, (sizeof(TX_BYTE_POOL)));
 801bfb6:	2234      	movs	r2, #52	; 0x34
 801bfb8:	2100      	movs	r1, #0
 801bfba:	68f8      	ldr	r0, [r7, #12]
 801bfbc:	f003 fc50 	bl	801f860 <memset>

    /* Round the pool size down to something that is evenly divisible by
       an ULONG.  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 801bfc0:	683b      	ldr	r3, [r7, #0]
 801bfc2:	f023 0303 	bic.w	r3, r3, #3
 801bfc6:	603b      	str	r3, [r7, #0]

    /* Setup the basic byte pool fields.  */
    pool_ptr -> tx_byte_pool_name =              name_ptr;
 801bfc8:	68fb      	ldr	r3, [r7, #12]
 801bfca:	68ba      	ldr	r2, [r7, #8]
 801bfcc:	605a      	str	r2, [r3, #4]

    /* Save the start and size of the pool.  */
    pool_ptr -> tx_byte_pool_start =   TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 801bfce:	68fb      	ldr	r3, [r7, #12]
 801bfd0:	687a      	ldr	r2, [r7, #4]
 801bfd2:	619a      	str	r2, [r3, #24]
    pool_ptr -> tx_byte_pool_size =    pool_size;
 801bfd4:	68fb      	ldr	r3, [r7, #12]
 801bfd6:	683a      	ldr	r2, [r7, #0]
 801bfd8:	61da      	str	r2, [r3, #28]

    /* Setup memory list to the beginning as well as the search pointer.  */
    pool_ptr -> tx_byte_pool_list =    TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 801bfda:	68fb      	ldr	r3, [r7, #12]
 801bfdc:	687a      	ldr	r2, [r7, #4]
 801bfde:	611a      	str	r2, [r3, #16]
    pool_ptr -> tx_byte_pool_search =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 801bfe0:	68fb      	ldr	r3, [r7, #12]
 801bfe2:	687a      	ldr	r2, [r7, #4]
 801bfe4:	615a      	str	r2, [r3, #20]

    /* Initially, the pool will have two blocks.  One large block at the
       beginning that is available and a small allocated block at the end
       of the pool that is there just for the algorithm.  Be sure to count
       the available block's header in the available bytes count.  */
    pool_ptr -> tx_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
 801bfe6:	683b      	ldr	r3, [r7, #0]
 801bfe8:	f1a3 0208 	sub.w	r2, r3, #8
 801bfec:	68fb      	ldr	r3, [r7, #12]
 801bfee:	609a      	str	r2, [r3, #8]
    pool_ptr -> tx_byte_pool_fragments =   ((UINT) 2);
 801bff0:	68fb      	ldr	r3, [r7, #12]
 801bff2:	2202      	movs	r2, #2
 801bff4:	60da      	str	r2, [r3, #12]
    /* Each block contains a "next" pointer that points to the next block in the pool followed by a ALIGN_TYPE
       field that contains either the constant TX_BYTE_BLOCK_FREE (if the block is free) or a pointer to the
       owning pool (if the block is allocated).  */

    /* Calculate the end of the pool's memory area.  */
    block_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 801bff6:	687b      	ldr	r3, [r7, #4]
 801bff8:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =  TX_UCHAR_POINTER_ADD(block_ptr, pool_size);
 801bffa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801bffc:	683b      	ldr	r3, [r7, #0]
 801bffe:	4413      	add	r3, r2
 801c000:	637b      	str	r3, [r7, #52]	; 0x34

    /* Backup the end of the pool pointer and build the pre-allocated block.  */
    block_ptr =  TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(ALIGN_TYPE)));
 801c002:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c004:	3b04      	subs	r3, #4
 801c006:	637b      	str	r3, [r7, #52]	; 0x34

    /* Cast the pool pointer into a ULONG.  */
    temp_ptr =             TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 801c008:	68fb      	ldr	r3, [r7, #12]
 801c00a:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 801c00c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c00e:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  temp_ptr;
 801c010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c012:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801c014:	601a      	str	r2, [r3, #0]

    block_ptr =            TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(UCHAR *)));
 801c016:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c018:	3b04      	subs	r3, #4
 801c01a:	637b      	str	r3, [r7, #52]	; 0x34
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 801c01c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c01e:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 801c020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c022:	687a      	ldr	r2, [r7, #4]
 801c024:	601a      	str	r2, [r3, #0]

    /* Now setup the large available block in the pool.  */
    temp_ptr =             TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 801c026:	687b      	ldr	r3, [r7, #4]
 801c028:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);
 801c02a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c02c:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  block_ptr;
 801c02e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c030:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801c032:	601a      	str	r2, [r3, #0]
    block_ptr =            TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 801c034:	687b      	ldr	r3, [r7, #4]
 801c036:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =            TX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));
 801c038:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c03a:	3304      	adds	r3, #4
 801c03c:	637b      	str	r3, [r7, #52]	; 0x34
    free_ptr =             TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);
 801c03e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c040:	62bb      	str	r3, [r7, #40]	; 0x28
    *free_ptr =            TX_BYTE_BLOCK_FREE;
 801c042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c044:	4a1f      	ldr	r2, [pc, #124]	; (801c0c4 <_tx_byte_pool_create+0x11c>)
 801c046:	601a      	str	r2, [r3, #0]

    /* Clear the owner id.  */
    pool_ptr -> tx_byte_pool_owner =  TX_NULL;
 801c048:	68fb      	ldr	r3, [r7, #12]
 801c04a:	2200      	movs	r2, #0
 801c04c:	621a      	str	r2, [r3, #32]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801c04e:	f3ef 8310 	mrs	r3, PRIMASK
 801c052:	61bb      	str	r3, [r7, #24]
    return(posture);
 801c054:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 801c056:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 801c058:	b672      	cpsid	i
    return(int_posture);
 801c05a:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the byte pool on the created list.  */
    TX_DISABLE
 801c05c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the byte pool ID to make it valid.  */
    pool_ptr -> tx_byte_pool_id =  TX_BYTE_POOL_ID;
 801c05e:	68fb      	ldr	r3, [r7, #12]
 801c060:	4a19      	ldr	r2, [pc, #100]	; (801c0c8 <_tx_byte_pool_create+0x120>)
 801c062:	601a      	str	r2, [r3, #0]

    /* Place the byte pool on the list of created byte pools.  First,
       check for an empty list.  */
    if (_tx_byte_pool_created_count == TX_EMPTY)
 801c064:	4b19      	ldr	r3, [pc, #100]	; (801c0cc <_tx_byte_pool_create+0x124>)
 801c066:	681b      	ldr	r3, [r3, #0]
 801c068:	2b00      	cmp	r3, #0
 801c06a:	d109      	bne.n	801c080 <_tx_byte_pool_create+0xd8>
    {

        /* The created byte pool list is empty.  Add byte pool to empty list.  */
        _tx_byte_pool_created_ptr =                  pool_ptr;
 801c06c:	4a18      	ldr	r2, [pc, #96]	; (801c0d0 <_tx_byte_pool_create+0x128>)
 801c06e:	68fb      	ldr	r3, [r7, #12]
 801c070:	6013      	str	r3, [r2, #0]
        pool_ptr -> tx_byte_pool_created_next =      pool_ptr;
 801c072:	68fb      	ldr	r3, [r7, #12]
 801c074:	68fa      	ldr	r2, [r7, #12]
 801c076:	62da      	str	r2, [r3, #44]	; 0x2c
        pool_ptr -> tx_byte_pool_created_previous =  pool_ptr;
 801c078:	68fb      	ldr	r3, [r7, #12]
 801c07a:	68fa      	ldr	r2, [r7, #12]
 801c07c:	631a      	str	r2, [r3, #48]	; 0x30
 801c07e:	e011      	b.n	801c0a4 <_tx_byte_pool_create+0xfc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_pool =      _tx_byte_pool_created_ptr;
 801c080:	4b13      	ldr	r3, [pc, #76]	; (801c0d0 <_tx_byte_pool_create+0x128>)
 801c082:	681b      	ldr	r3, [r3, #0]
 801c084:	623b      	str	r3, [r7, #32]
        previous_pool =  next_pool -> tx_byte_pool_created_previous;
 801c086:	6a3b      	ldr	r3, [r7, #32]
 801c088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c08a:	61fb      	str	r3, [r7, #28]

        /* Place the new byte pool in the list.  */
        next_pool -> tx_byte_pool_created_previous =  pool_ptr;
 801c08c:	6a3b      	ldr	r3, [r7, #32]
 801c08e:	68fa      	ldr	r2, [r7, #12]
 801c090:	631a      	str	r2, [r3, #48]	; 0x30
        previous_pool -> tx_byte_pool_created_next =  pool_ptr;
 801c092:	69fb      	ldr	r3, [r7, #28]
 801c094:	68fa      	ldr	r2, [r7, #12]
 801c096:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Setup this byte pool's created links.  */
        pool_ptr -> tx_byte_pool_created_previous =  previous_pool;
 801c098:	68fb      	ldr	r3, [r7, #12]
 801c09a:	69fa      	ldr	r2, [r7, #28]
 801c09c:	631a      	str	r2, [r3, #48]	; 0x30
        pool_ptr -> tx_byte_pool_created_next =      next_pool;
 801c09e:	68fb      	ldr	r3, [r7, #12]
 801c0a0:	6a3a      	ldr	r2, [r7, #32]
 801c0a2:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    /* Increment the number of created byte pools.  */
    _tx_byte_pool_created_count++;
 801c0a4:	4b09      	ldr	r3, [pc, #36]	; (801c0cc <_tx_byte_pool_create+0x124>)
 801c0a6:	681b      	ldr	r3, [r3, #0]
 801c0a8:	3301      	adds	r3, #1
 801c0aa:	4a08      	ldr	r2, [pc, #32]	; (801c0cc <_tx_byte_pool_create+0x124>)
 801c0ac:	6013      	str	r3, [r2, #0]
 801c0ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c0b0:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801c0b2:	693b      	ldr	r3, [r7, #16]
 801c0b4:	f383 8810 	msr	PRIMASK, r3
}
 801c0b8:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 801c0ba:	2300      	movs	r3, #0
}
 801c0bc:	4618      	mov	r0, r3
 801c0be:	3738      	adds	r7, #56	; 0x38
 801c0c0:	46bd      	mov	sp, r7
 801c0c2:	bd80      	pop	{r7, pc}
 801c0c4:	ffffeeee 	.word	0xffffeeee
 801c0c8:	42595445 	.word	0x42595445
 801c0cc:	240050c0 	.word	0x240050c0
 801c0d0:	240050bc 	.word	0x240050bc

0801c0d4 <_tx_byte_pool_search>:
/*                                            calculation,                */
/*                                            resulting in version 6.1.7  */
/*                                                                        */
/**************************************************************************/
UCHAR  *_tx_byte_pool_search(TX_BYTE_POOL *pool_ptr, ULONG memory_size)
{
 801c0d4:	b480      	push	{r7}
 801c0d6:	b097      	sub	sp, #92	; 0x5c
 801c0d8:	af00      	add	r7, sp, #0
 801c0da:	6078      	str	r0, [r7, #4]
 801c0dc:	6039      	str	r1, [r7, #0]
UCHAR           *next_ptr;
UCHAR           **this_block_link_ptr;
UCHAR           **next_block_link_ptr;
ULONG           available_bytes;
UINT            examine_blocks;
UINT            first_free_block_found =  TX_FALSE;
 801c0de:	2300      	movs	r3, #0
 801c0e0:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801c0e2:	f3ef 8310 	mrs	r3, PRIMASK
 801c0e6:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 801c0e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 801c0ea:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 801c0ec:	b672      	cpsid	i
    return(int_posture);
 801c0ee:	6a3b      	ldr	r3, [r7, #32]
UCHAR           *work_ptr;
ULONG           total_theoretical_available;


    /* Disable interrupts.  */
    TX_DISABLE
 801c0f0:	657b      	str	r3, [r7, #84]	; 0x54

    /* First, determine if there are enough bytes in the pool.  */
    /* Theoretical bytes available = free bytes + ((fragments-2) * overhead of each block) */
    total_theoretical_available = pool_ptr -> tx_byte_pool_available + ((pool_ptr -> tx_byte_pool_fragments - 2) * ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE))));
 801c0f2:	687b      	ldr	r3, [r7, #4]
 801c0f4:	689a      	ldr	r2, [r3, #8]
 801c0f6:	687b      	ldr	r3, [r7, #4]
 801c0f8:	68db      	ldr	r3, [r3, #12]
 801c0fa:	3b02      	subs	r3, #2
 801c0fc:	00db      	lsls	r3, r3, #3
 801c0fe:	4413      	add	r3, r2
 801c100:	643b      	str	r3, [r7, #64]	; 0x40
    if (memory_size >= total_theoretical_available)
 801c102:	683a      	ldr	r2, [r7, #0]
 801c104:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c106:	429a      	cmp	r2, r3
 801c108:	d308      	bcc.n	801c11c <_tx_byte_pool_search+0x48>
 801c10a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801c10c:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801c10e:	69fb      	ldr	r3, [r7, #28]
 801c110:	f383 8810 	msr	PRIMASK, r3
}
 801c114:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Not enough memory, return a NULL pointer.  */
        current_ptr =  TX_NULL;
 801c116:	2300      	movs	r3, #0
 801c118:	653b      	str	r3, [r7, #80]	; 0x50
 801c11a:	e0dd      	b.n	801c2d8 <_tx_byte_pool_search+0x204>
    }
    else
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 801c11c:	4b72      	ldr	r3, [pc, #456]	; (801c2e8 <_tx_byte_pool_search+0x214>)
 801c11e:	681b      	ldr	r3, [r3, #0]
 801c120:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Setup ownership of the byte pool.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 801c122:	687b      	ldr	r3, [r7, #4]
 801c124:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801c126:	621a      	str	r2, [r3, #32]

        /* Walk through the memory pool in search for a large enough block.  */
        current_ptr =      pool_ptr -> tx_byte_pool_search;
 801c128:	687b      	ldr	r3, [r7, #4]
 801c12a:	695b      	ldr	r3, [r3, #20]
 801c12c:	653b      	str	r3, [r7, #80]	; 0x50
        examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 801c12e:	687b      	ldr	r3, [r7, #4]
 801c130:	68db      	ldr	r3, [r3, #12]
 801c132:	3301      	adds	r3, #1
 801c134:	64bb      	str	r3, [r7, #72]	; 0x48
        available_bytes =  ((ULONG) 0);
 801c136:	2300      	movs	r3, #0
 801c138:	64fb      	str	r3, [r7, #76]	; 0x4c
            /* Increment the number of fragments searched on this pool.  */
            pool_ptr -> tx_byte_pool_performance_search_count++;
#endif

            /* Check to see if this block is free.  */
            work_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 801c13a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c13c:	3304      	adds	r3, #4
 801c13e:	63bb      	str	r3, [r7, #56]	; 0x38
            free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 801c140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c142:	637b      	str	r3, [r7, #52]	; 0x34
            if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 801c144:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c146:	681b      	ldr	r3, [r3, #0]
 801c148:	4a68      	ldr	r2, [pc, #416]	; (801c2ec <_tx_byte_pool_search+0x218>)
 801c14a:	4293      	cmp	r3, r2
 801c14c:	d143      	bne.n	801c1d6 <_tx_byte_pool_search+0x102>
            {

                /* Determine if this is the first free block.  */
                if (first_free_block_found == TX_FALSE)
 801c14e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801c150:	2b00      	cmp	r3, #0
 801c152:	d104      	bne.n	801c15e <_tx_byte_pool_search+0x8a>
                {
                    /* This is the first free block.  */
                    pool_ptr->tx_byte_pool_search =  current_ptr;
 801c154:	687b      	ldr	r3, [r7, #4]
 801c156:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801c158:	615a      	str	r2, [r3, #20]

                    /* Set the flag to indicate we have found the first free
                       block.  */
                    first_free_block_found =  TX_TRUE;
 801c15a:	2301      	movs	r3, #1
 801c15c:	647b      	str	r3, [r7, #68]	; 0x44
                }

                /* Block is free, see if it is large enough.  */

                /* Pickup the next block's pointer.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 801c15e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c160:	633b      	str	r3, [r7, #48]	; 0x30
                next_ptr =             *this_block_link_ptr;
 801c162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c164:	681b      	ldr	r3, [r3, #0]
 801c166:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Calculate the number of bytes available in this block.  */
                available_bytes =   TX_UCHAR_POINTER_DIF(next_ptr, current_ptr);
 801c168:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801c16a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c16c:	1ad3      	subs	r3, r2, r3
 801c16e:	64fb      	str	r3, [r7, #76]	; 0x4c
                available_bytes =   available_bytes - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 801c170:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c172:	3b08      	subs	r3, #8
 801c174:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* If this is large enough, we are done because our first-fit algorithm
                   has been satisfied!  */
                if (available_bytes >= memory_size)
 801c176:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801c178:	683b      	ldr	r3, [r7, #0]
 801c17a:	429a      	cmp	r2, r3
 801c17c:	d257      	bcs.n	801c22e <_tx_byte_pool_search+0x15a>
                }
                else
                {

                    /* Clear the available bytes variable.  */
                    available_bytes =  ((ULONG) 0);
 801c17e:	2300      	movs	r3, #0
 801c180:	64fb      	str	r3, [r7, #76]	; 0x4c

                    /* Not enough memory, check to see if the neighbor is
                       free and can be merged.  */
                    work_ptr =  TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 801c182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c184:	3304      	adds	r3, #4
 801c186:	63bb      	str	r3, [r7, #56]	; 0x38
                    free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 801c188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c18a:	637b      	str	r3, [r7, #52]	; 0x34
                    if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 801c18c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c18e:	681b      	ldr	r3, [r3, #0]
 801c190:	4a56      	ldr	r2, [pc, #344]	; (801c2ec <_tx_byte_pool_search+0x218>)
 801c192:	4293      	cmp	r3, r2
 801c194:	d113      	bne.n	801c1be <_tx_byte_pool_search+0xea>
                    {

                        /* Yes, neighbor block can be merged!  This is quickly accomplished
                           by updating the current block with the next blocks pointer.  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 801c196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c198:	62bb      	str	r3, [r7, #40]	; 0x28
                        *this_block_link_ptr =  *next_block_link_ptr;
 801c19a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c19c:	681a      	ldr	r2, [r3, #0]
 801c19e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c1a0:	601a      	str	r2, [r3, #0]

                        /* Reduce the fragment total.  We don't need to increase the bytes
                           available because all free headers are also included in the available
                           count.  */
                        pool_ptr -> tx_byte_pool_fragments--;
 801c1a2:	687b      	ldr	r3, [r7, #4]
 801c1a4:	68db      	ldr	r3, [r3, #12]
 801c1a6:	1e5a      	subs	r2, r3, #1
 801c1a8:	687b      	ldr	r3, [r7, #4]
 801c1aa:	60da      	str	r2, [r3, #12]
                        /* Increment the number of blocks merged on this pool.  */
                        pool_ptr -> tx_byte_pool_performance_merge_count++;
#endif

                        /* See if the search pointer is affected.  */
                        if (pool_ptr -> tx_byte_pool_search ==  next_ptr)
 801c1ac:	687b      	ldr	r3, [r7, #4]
 801c1ae:	695b      	ldr	r3, [r3, #20]
 801c1b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801c1b2:	429a      	cmp	r2, r3
 801c1b4:	d114      	bne.n	801c1e0 <_tx_byte_pool_search+0x10c>
                        {
                            /* Yes, update the search pointer.   */
                            pool_ptr -> tx_byte_pool_search =  current_ptr;
 801c1b6:	687b      	ldr	r3, [r7, #4]
 801c1b8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801c1ba:	615a      	str	r2, [r3, #20]
 801c1bc:	e010      	b.n	801c1e0 <_tx_byte_pool_search+0x10c>
                        }
                    }
                    else
                    {
                        /* Neighbor is not free so we can skip over it!  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 801c1be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c1c0:	62bb      	str	r3, [r7, #40]	; 0x28
                        current_ptr =  *next_block_link_ptr;
 801c1c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c1c4:	681b      	ldr	r3, [r3, #0]
 801c1c6:	653b      	str	r3, [r7, #80]	; 0x50

                        /* Decrement the examined block count to account for this one.  */
                        if (examine_blocks != ((UINT) 0))
 801c1c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801c1ca:	2b00      	cmp	r3, #0
 801c1cc:	d008      	beq.n	801c1e0 <_tx_byte_pool_search+0x10c>
                        {
                            examine_blocks--;
 801c1ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801c1d0:	3b01      	subs	r3, #1
 801c1d2:	64bb      	str	r3, [r7, #72]	; 0x48
 801c1d4:	e004      	b.n	801c1e0 <_tx_byte_pool_search+0x10c>
            }
            else
            {

                /* Block is not free, move to next block.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 801c1d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c1d8:	633b      	str	r3, [r7, #48]	; 0x30
                current_ptr =  *this_block_link_ptr;
 801c1da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c1dc:	681b      	ldr	r3, [r3, #0]
 801c1de:	653b      	str	r3, [r7, #80]	; 0x50
            }

            /* Another block has been searched... decrement counter.  */
            if (examine_blocks != ((UINT) 0))
 801c1e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801c1e2:	2b00      	cmp	r3, #0
 801c1e4:	d002      	beq.n	801c1ec <_tx_byte_pool_search+0x118>
            {

                examine_blocks--;
 801c1e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801c1e8:	3b01      	subs	r3, #1
 801c1ea:	64bb      	str	r3, [r7, #72]	; 0x48
 801c1ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801c1ee:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801c1f0:	693b      	ldr	r3, [r7, #16]
 801c1f2:	f383 8810 	msr	PRIMASK, r3
}
 801c1f6:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801c1f8:	f3ef 8310 	mrs	r3, PRIMASK
 801c1fc:	61bb      	str	r3, [r7, #24]
    return(posture);
 801c1fe:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 801c200:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 801c202:	b672      	cpsid	i
    return(int_posture);
 801c204:	697b      	ldr	r3, [r7, #20]

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts.  */
            TX_DISABLE
 801c206:	657b      	str	r3, [r7, #84]	; 0x54

            /* Determine if anything has changed in terms of pool ownership.  */
            if (pool_ptr -> tx_byte_pool_owner != thread_ptr)
 801c208:	687b      	ldr	r3, [r7, #4]
 801c20a:	6a1b      	ldr	r3, [r3, #32]
 801c20c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801c20e:	429a      	cmp	r2, r3
 801c210:	d009      	beq.n	801c226 <_tx_byte_pool_search+0x152>
            {

                /* Pool changed ownership in the brief period interrupts were
                   enabled.  Reset the search.  */
                current_ptr =      pool_ptr -> tx_byte_pool_search;
 801c212:	687b      	ldr	r3, [r7, #4]
 801c214:	695b      	ldr	r3, [r3, #20]
 801c216:	653b      	str	r3, [r7, #80]	; 0x50
                examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 801c218:	687b      	ldr	r3, [r7, #4]
 801c21a:	68db      	ldr	r3, [r3, #12]
 801c21c:	3301      	adds	r3, #1
 801c21e:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Setup our ownership again.  */
                pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 801c220:	687b      	ldr	r3, [r7, #4]
 801c222:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801c224:	621a      	str	r2, [r3, #32]
            }
        } while(examine_blocks != ((UINT) 0));
 801c226:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801c228:	2b00      	cmp	r3, #0
 801c22a:	d186      	bne.n	801c13a <_tx_byte_pool_search+0x66>
 801c22c:	e000      	b.n	801c230 <_tx_byte_pool_search+0x15c>
                    break;
 801c22e:	bf00      	nop

        /* Determine if a block was found.  If so, determine if it needs to be
           split.  */
        if (available_bytes != ((ULONG) 0))
 801c230:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c232:	2b00      	cmp	r3, #0
 801c234:	d048      	beq.n	801c2c8 <_tx_byte_pool_search+0x1f4>
        {

            /* Determine if we need to split this block.  */
            if ((available_bytes - memory_size) >= ((ULONG) TX_BYTE_BLOCK_MIN))
 801c236:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801c238:	683b      	ldr	r3, [r7, #0]
 801c23a:	1ad3      	subs	r3, r2, r3
 801c23c:	2b13      	cmp	r3, #19
 801c23e:	d91e      	bls.n	801c27e <_tx_byte_pool_search+0x1aa>
            {

                /* Split the block.  */
                next_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (memory_size + ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 801c240:	683b      	ldr	r3, [r7, #0]
 801c242:	3308      	adds	r3, #8
 801c244:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801c246:	4413      	add	r3, r2
 801c248:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Setup the new free block.  */
                next_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 801c24a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c24c:	62bb      	str	r3, [r7, #40]	; 0x28
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 801c24e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c250:	633b      	str	r3, [r7, #48]	; 0x30
                *next_block_link_ptr =  *this_block_link_ptr;
 801c252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c254:	681a      	ldr	r2, [r3, #0]
 801c256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c258:	601a      	str	r2, [r3, #0]
                work_ptr =              TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 801c25a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c25c:	3304      	adds	r3, #4
 801c25e:	63bb      	str	r3, [r7, #56]	; 0x38
                free_ptr =              TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 801c260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c262:	637b      	str	r3, [r7, #52]	; 0x34
                *free_ptr =             TX_BYTE_BLOCK_FREE;
 801c264:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c266:	4a21      	ldr	r2, [pc, #132]	; (801c2ec <_tx_byte_pool_search+0x218>)
 801c268:	601a      	str	r2, [r3, #0]

                /* Increase the total fragment counter.  */
                pool_ptr -> tx_byte_pool_fragments++;
 801c26a:	687b      	ldr	r3, [r7, #4]
 801c26c:	68db      	ldr	r3, [r3, #12]
 801c26e:	1c5a      	adds	r2, r3, #1
 801c270:	687b      	ldr	r3, [r7, #4]
 801c272:	60da      	str	r2, [r3, #12]

                /* Update the current pointer to point at the newly created block.  */
                *this_block_link_ptr =  next_ptr;
 801c274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c276:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801c278:	601a      	str	r2, [r3, #0]

                /* Set available equal to memory size for subsequent calculation.  */
                available_bytes =  memory_size;
 801c27a:	683b      	ldr	r3, [r7, #0]
 801c27c:	64fb      	str	r3, [r7, #76]	; 0x4c
                pool_ptr -> tx_byte_pool_performance_split_count++;
#endif
            }

            /* In any case, mark the current block as allocated.  */
            work_ptr =              TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 801c27e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c280:	3304      	adds	r3, #4
 801c282:	63bb      	str	r3, [r7, #56]	; 0x38
            this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(work_ptr);
 801c284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c286:	633b      	str	r3, [r7, #48]	; 0x30
            *this_block_link_ptr =  TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 801c288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c28a:	687a      	ldr	r2, [r7, #4]
 801c28c:	601a      	str	r2, [r3, #0]

            /* Reduce the number of available bytes in the pool.  */
            pool_ptr -> tx_byte_pool_available =  (pool_ptr -> tx_byte_pool_available - available_bytes) - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 801c28e:	687b      	ldr	r3, [r7, #4]
 801c290:	689a      	ldr	r2, [r3, #8]
 801c292:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c294:	1ad3      	subs	r3, r2, r3
 801c296:	f1a3 0208 	sub.w	r2, r3, #8
 801c29a:	687b      	ldr	r3, [r7, #4]
 801c29c:	609a      	str	r2, [r3, #8]

            /* Determine if the search pointer needs to be updated. This is only done
               if the search pointer matches the block to be returned.  */
            if (current_ptr == pool_ptr -> tx_byte_pool_search)
 801c29e:	687b      	ldr	r3, [r7, #4]
 801c2a0:	695b      	ldr	r3, [r3, #20]
 801c2a2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801c2a4:	429a      	cmp	r2, r3
 801c2a6:	d105      	bne.n	801c2b4 <_tx_byte_pool_search+0x1e0>
            {

                /* Yes, update the search pointer to the next block.  */
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 801c2a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c2aa:	633b      	str	r3, [r7, #48]	; 0x30
                pool_ptr -> tx_byte_pool_search =  *this_block_link_ptr;
 801c2ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c2ae:	681a      	ldr	r2, [r3, #0]
 801c2b0:	687b      	ldr	r3, [r7, #4]
 801c2b2:	615a      	str	r2, [r3, #20]
 801c2b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801c2b6:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801c2b8:	68fb      	ldr	r3, [r7, #12]
 801c2ba:	f383 8810 	msr	PRIMASK, r3
}
 801c2be:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Adjust the pointer for the application.  */
            current_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 801c2c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c2c2:	3308      	adds	r3, #8
 801c2c4:	653b      	str	r3, [r7, #80]	; 0x50
 801c2c6:	e007      	b.n	801c2d8 <_tx_byte_pool_search+0x204>
 801c2c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801c2ca:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801c2cc:	68bb      	ldr	r3, [r7, #8]
 801c2ce:	f383 8810 	msr	PRIMASK, r3
}
 801c2d2:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Set current pointer to NULL to indicate nothing was found.  */
            current_ptr =  TX_NULL;
 801c2d4:	2300      	movs	r3, #0
 801c2d6:	653b      	str	r3, [r7, #80]	; 0x50
        }
    }

    /* Return the search pointer.  */
    return(current_ptr);
 801c2d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 801c2da:	4618      	mov	r0, r3
 801c2dc:	375c      	adds	r7, #92	; 0x5c
 801c2de:	46bd      	mov	sp, r7
 801c2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c2e4:	4770      	bx	lr
 801c2e6:	bf00      	nop
 801c2e8:	240050cc 	.word	0x240050cc
 801c2ec:	ffffeeee 	.word	0xffffeeee

0801c2f0 <_tx_initialize_high_level>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _tx_initialize_high_level(VOID)
{
 801c2f0:	b580      	push	{r7, lr}
 801c2f2:	af00      	add	r7, sp, #0

    /* Initialize the event log, if enabled.  */
    TX_EL_INITIALIZE

    /* Call the thread control initialization function.  */
    _tx_thread_initialize();
 801c2f4:	f001 fa28 	bl	801d748 <_tx_thread_initialize>

#ifndef TX_NO_TIMER

    /* Call the timer control initialization function.  */
    _tx_timer_initialize();
 801c2f8:	f001 ff26 	bl	801e148 <_tx_timer_initialize>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Call the semaphore initialization function.  */
    _tx_semaphore_initialize();
 801c2fc:	4b12      	ldr	r3, [pc, #72]	; (801c348 <_tx_initialize_high_level+0x58>)
 801c2fe:	2200      	movs	r2, #0
 801c300:	601a      	str	r2, [r3, #0]
 801c302:	4b12      	ldr	r3, [pc, #72]	; (801c34c <_tx_initialize_high_level+0x5c>)
 801c304:	2200      	movs	r2, #0
 801c306:	601a      	str	r2, [r3, #0]

    /* Call the queue initialization function.  */
    _tx_queue_initialize();
 801c308:	4b11      	ldr	r3, [pc, #68]	; (801c350 <_tx_initialize_high_level+0x60>)
 801c30a:	2200      	movs	r2, #0
 801c30c:	601a      	str	r2, [r3, #0]
 801c30e:	4b11      	ldr	r3, [pc, #68]	; (801c354 <_tx_initialize_high_level+0x64>)
 801c310:	2200      	movs	r2, #0
 801c312:	601a      	str	r2, [r3, #0]

    /* Call the event flag initialization function.  */
    _tx_event_flags_initialize();
 801c314:	4b10      	ldr	r3, [pc, #64]	; (801c358 <_tx_initialize_high_level+0x68>)
 801c316:	2200      	movs	r2, #0
 801c318:	601a      	str	r2, [r3, #0]
 801c31a:	4b10      	ldr	r3, [pc, #64]	; (801c35c <_tx_initialize_high_level+0x6c>)
 801c31c:	2200      	movs	r2, #0
 801c31e:	601a      	str	r2, [r3, #0]

    /* Call the block pool initialization function.  */
    _tx_block_pool_initialize();
 801c320:	4b0f      	ldr	r3, [pc, #60]	; (801c360 <_tx_initialize_high_level+0x70>)
 801c322:	2200      	movs	r2, #0
 801c324:	601a      	str	r2, [r3, #0]
 801c326:	4b0f      	ldr	r3, [pc, #60]	; (801c364 <_tx_initialize_high_level+0x74>)
 801c328:	2200      	movs	r2, #0
 801c32a:	601a      	str	r2, [r3, #0]

    /* Call the byte pool initialization function.  */
    _tx_byte_pool_initialize();
 801c32c:	4b0e      	ldr	r3, [pc, #56]	; (801c368 <_tx_initialize_high_level+0x78>)
 801c32e:	2200      	movs	r2, #0
 801c330:	601a      	str	r2, [r3, #0]
 801c332:	4b0e      	ldr	r3, [pc, #56]	; (801c36c <_tx_initialize_high_level+0x7c>)
 801c334:	2200      	movs	r2, #0
 801c336:	601a      	str	r2, [r3, #0]

    /* Call the mutex initialization function.  */
    _tx_mutex_initialize();
 801c338:	4b0d      	ldr	r3, [pc, #52]	; (801c370 <_tx_initialize_high_level+0x80>)
 801c33a:	2200      	movs	r2, #0
 801c33c:	601a      	str	r2, [r3, #0]
 801c33e:	4b0d      	ldr	r3, [pc, #52]	; (801c374 <_tx_initialize_high_level+0x84>)
 801c340:	2200      	movs	r2, #0
 801c342:	601a      	str	r2, [r3, #0]
#endif
}
 801c344:	bf00      	nop
 801c346:	bd80      	pop	{r7, pc}
 801c348:	24005094 	.word	0x24005094
 801c34c:	24005098 	.word	0x24005098
 801c350:	2400509c 	.word	0x2400509c
 801c354:	240050a0 	.word	0x240050a0
 801c358:	240050a4 	.word	0x240050a4
 801c35c:	240050a8 	.word	0x240050a8
 801c360:	240050b4 	.word	0x240050b4
 801c364:	240050b8 	.word	0x240050b8
 801c368:	240050bc 	.word	0x240050bc
 801c36c:	240050c0 	.word	0x240050c0
 801c370:	240050ac 	.word	0x240050ac
 801c374:	240050b0 	.word	0x240050b0

0801c378 <_tx_initialize_kernel_enter>:
/*                                            added EPK initialization,   */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
VOID  _tx_initialize_kernel_enter(VOID)
{
 801c378:	b580      	push	{r7, lr}
 801c37a:	af00      	add	r7, sp, #0

    /* Determine if the compiler has pre-initialized ThreadX.  */
    if (_tx_thread_system_state != TX_INITIALIZE_ALMOST_DONE)
 801c37c:	4b10      	ldr	r3, [pc, #64]	; (801c3c0 <_tx_initialize_kernel_enter+0x48>)
 801c37e:	681b      	ldr	r3, [r3, #0]
 801c380:	f113 3f0f 	cmn.w	r3, #252645135	; 0xf0f0f0f
 801c384:	d00c      	beq.n	801c3a0 <_tx_initialize_kernel_enter+0x28>
        /* No, the initialization still needs to take place.  */

        /* Ensure that the system state variable is set to indicate
           initialization is in progress.  Note that this variable is
           later used to represent interrupt nesting.  */
        _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 801c386:	4b0e      	ldr	r3, [pc, #56]	; (801c3c0 <_tx_initialize_kernel_enter+0x48>)
 801c388:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 801c38c:	601a      	str	r2, [r3, #0]
        /* Call any port specific preprocessing.  */
        TX_PORT_SPECIFIC_PRE_INITIALIZATION

        /* Invoke the low-level initialization to handle all processor specific
           initialization issues.  */
        _tx_initialize_low_level();
 801c38e:	f7e3 ffa7 	bl	80002e0 <_tx_initialize_low_level>

        /* Invoke the high-level initialization to exercise all of the
           ThreadX components and the application's initialization
           function.  */
        _tx_initialize_high_level();
 801c392:	f7ff ffad 	bl	801c2f0 <_tx_initialize_high_level>

        /* Call any port specific post-processing.  */
        TX_PORT_SPECIFIC_POST_INITIALIZATION
 801c396:	4b0b      	ldr	r3, [pc, #44]	; (801c3c4 <_tx_initialize_kernel_enter+0x4c>)
 801c398:	681b      	ldr	r3, [r3, #0]
 801c39a:	3301      	adds	r3, #1
 801c39c:	4a09      	ldr	r2, [pc, #36]	; (801c3c4 <_tx_initialize_kernel_enter+0x4c>)
 801c39e:	6013      	str	r3, [r2, #0]
    TX_INITIALIZE_KERNEL_ENTER_EXTENSION

    /* Ensure that the system state variable is set to indicate
       initialization is in progress.  Note that this variable is
       later used to represent interrupt nesting.  */
    _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 801c3a0:	4b07      	ldr	r3, [pc, #28]	; (801c3c0 <_tx_initialize_kernel_enter+0x48>)
 801c3a2:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 801c3a6:	601a      	str	r2, [r3, #0]

    /* Call the application provided initialization function.  Pass the
       first available memory address to it.  */
    tx_application_define(_tx_initialize_unused_memory);
 801c3a8:	4b07      	ldr	r3, [pc, #28]	; (801c3c8 <_tx_initialize_kernel_enter+0x50>)
 801c3aa:	681b      	ldr	r3, [r3, #0]
 801c3ac:	4618      	mov	r0, r3
 801c3ae:	f7e4 fa95 	bl	80008dc <tx_application_define>

    /* Set the system state in preparation for entering the thread
       scheduler.  */
    _tx_thread_system_state =  TX_INITIALIZE_IS_FINISHED;
 801c3b2:	4b03      	ldr	r3, [pc, #12]	; (801c3c0 <_tx_initialize_kernel_enter+0x48>)
 801c3b4:	2200      	movs	r2, #0
 801c3b6:	601a      	str	r2, [r3, #0]
    /* Initialize Execution Profile Kit.  */
    _tx_execution_initialize();
#endif

    /* Enter the scheduling loop to start executing threads!  */
    _tx_thread_schedule();
 801c3b8:	f7e3 ffd2 	bl	8000360 <_tx_thread_schedule>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 801c3bc:	bf00      	nop
 801c3be:	bd80      	pop	{r7, pc}
 801c3c0:	24000070 	.word	0x24000070
 801c3c4:	24005164 	.word	0x24005164
 801c3c8:	240050c4 	.word	0x240050c4

0801c3cc <_tx_mutex_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_cleanup(TX_THREAD  *thread_ptr, ULONG suspension_sequence)
{
 801c3cc:	b580      	push	{r7, lr}
 801c3ce:	b08e      	sub	sp, #56	; 0x38
 801c3d0:	af00      	add	r7, sp, #0
 801c3d2:	6078      	str	r0, [r7, #4]
 801c3d4:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801c3d6:	f3ef 8310 	mrs	r3, PRIMASK
 801c3da:	623b      	str	r3, [r7, #32]
    return(posture);
 801c3dc:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 801c3de:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 801c3e0:	b672      	cpsid	i
    return(int_posture);
 801c3e2:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the mutex.  */
    TX_DISABLE
 801c3e4:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_mutex_cleanup))
 801c3e6:	687b      	ldr	r3, [r7, #4]
 801c3e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801c3ea:	4a33      	ldr	r2, [pc, #204]	; (801c4b8 <_tx_mutex_cleanup+0xec>)
 801c3ec:	4293      	cmp	r3, r2
 801c3ee:	d158      	bne.n	801c4a2 <_tx_mutex_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 801c3f0:	687b      	ldr	r3, [r7, #4]
 801c3f2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801c3f6:	683a      	ldr	r2, [r7, #0]
 801c3f8:	429a      	cmp	r2, r3
 801c3fa:	d152      	bne.n	801c4a2 <_tx_mutex_cleanup+0xd6>
        {

            /* Setup pointer to mutex control block.  */
            mutex_ptr =  TX_VOID_TO_MUTEX_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 801c3fc:	687b      	ldr	r3, [r7, #4]
 801c3fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c400:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for NULL mutex pointer.  */
            if (mutex_ptr != TX_NULL)
 801c402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c404:	2b00      	cmp	r3, #0
 801c406:	d04c      	beq.n	801c4a2 <_tx_mutex_cleanup+0xd6>
            {

                /* Determine if the mutex ID is valid.  */
                if (mutex_ptr -> tx_mutex_id == TX_MUTEX_ID)
 801c408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c40a:	681b      	ldr	r3, [r3, #0]
 801c40c:	4a2b      	ldr	r2, [pc, #172]	; (801c4bc <_tx_mutex_cleanup+0xf0>)
 801c40e:	4293      	cmp	r3, r2
 801c410:	d147      	bne.n	801c4a2 <_tx_mutex_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (mutex_ptr -> tx_mutex_suspended_count != TX_NO_SUSPENSIONS)
 801c412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c414:	69db      	ldr	r3, [r3, #28]
 801c416:	2b00      	cmp	r3, #0
 801c418:	d043      	beq.n	801c4a2 <_tx_mutex_cleanup+0xd6>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 801c41a:	687b      	ldr	r3, [r7, #4]
 801c41c:	2200      	movs	r2, #0
 801c41e:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspension count.  */
                        mutex_ptr -> tx_mutex_suspended_count--;
 801c420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c422:	69db      	ldr	r3, [r3, #28]
 801c424:	1e5a      	subs	r2, r3, #1
 801c426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c428:	61da      	str	r2, [r3, #28]

                        /* Pickup the suspended count.  */
                        suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 801c42a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c42c:	69db      	ldr	r3, [r3, #28]
 801c42e:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 801c430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c432:	2b00      	cmp	r3, #0
 801c434:	d103      	bne.n	801c43e <_tx_mutex_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            mutex_ptr -> tx_mutex_suspension_list =  TX_NULL;
 801c436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c438:	2200      	movs	r2, #0
 801c43a:	619a      	str	r2, [r3, #24]
 801c43c:	e013      	b.n	801c466 <_tx_mutex_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 801c43e:	687b      	ldr	r3, [r7, #4]
 801c440:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c442:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 801c444:	687b      	ldr	r3, [r7, #4]
 801c446:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801c448:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 801c44a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c44c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c44e:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 801c450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c452:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801c454:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (mutex_ptr -> tx_mutex_suspension_list == thread_ptr)
 801c456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c458:	699b      	ldr	r3, [r3, #24]
 801c45a:	687a      	ldr	r2, [r7, #4]
 801c45c:	429a      	cmp	r2, r3
 801c45e:	d102      	bne.n	801c466 <_tx_mutex_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                mutex_ptr -> tx_mutex_suspension_list =         next_thread;
 801c460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c462:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801c464:	619a      	str	r2, [r3, #24]
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_MUTEX_SUSP)
 801c466:	687b      	ldr	r3, [r7, #4]
 801c468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c46a:	2b0d      	cmp	r3, #13
 801c46c:	d119      	bne.n	801c4a2 <_tx_mutex_cleanup+0xd6>
                            /* Increment the number of timeouts on this semaphore.  */
                            mutex_ptr -> tx_mutex_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NOT_AVAILABLE;
 801c46e:	687b      	ldr	r3, [r7, #4]
 801c470:	221d      	movs	r2, #29
 801c472:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 801c476:	4b12      	ldr	r3, [pc, #72]	; (801c4c0 <_tx_mutex_cleanup+0xf4>)
 801c478:	681b      	ldr	r3, [r3, #0]
 801c47a:	3301      	adds	r3, #1
 801c47c:	4a10      	ldr	r2, [pc, #64]	; (801c4c0 <_tx_mutex_cleanup+0xf4>)
 801c47e:	6013      	str	r3, [r2, #0]
 801c480:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c482:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801c484:	693b      	ldr	r3, [r7, #16]
 801c486:	f383 8810 	msr	PRIMASK, r3
}
 801c48a:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 801c48c:	6878      	ldr	r0, [r7, #4]
 801c48e:	f001 fb11 	bl	801dab4 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801c492:	f3ef 8310 	mrs	r3, PRIMASK
 801c496:	61bb      	str	r3, [r7, #24]
    return(posture);
 801c498:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 801c49a:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 801c49c:	b672      	cpsid	i
    return(int_posture);
 801c49e:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 801c4a0:	637b      	str	r3, [r7, #52]	; 0x34
 801c4a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c4a4:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801c4a6:	68fb      	ldr	r3, [r7, #12]
 801c4a8:	f383 8810 	msr	PRIMASK, r3
}
 801c4ac:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 801c4ae:	bf00      	nop
 801c4b0:	3738      	adds	r7, #56	; 0x38
 801c4b2:	46bd      	mov	sp, r7
 801c4b4:	bd80      	pop	{r7, pc}
 801c4b6:	bf00      	nop
 801c4b8:	0801c3cd 	.word	0x0801c3cd
 801c4bc:	4d555445 	.word	0x4d555445
 801c4c0:	24005164 	.word	0x24005164

0801c4c4 <_tx_mutex_thread_release>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_thread_release(TX_THREAD  *thread_ptr)
{
 801c4c4:	b580      	push	{r7, lr}
 801c4c6:	b08a      	sub	sp, #40	; 0x28
 801c4c8:	af00      	add	r7, sp, #0
 801c4ca:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801c4cc:	f3ef 8310 	mrs	r3, PRIMASK
 801c4d0:	61fb      	str	r3, [r7, #28]
    return(posture);
 801c4d2:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 801c4d4:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 801c4d6:	b672      	cpsid	i
    return(int_posture);
 801c4d8:	69bb      	ldr	r3, [r7, #24]
UINT        status;
#endif


    /* Disable interrupts.  */
    TX_DISABLE
 801c4da:	627b      	str	r3, [r7, #36]	; 0x24

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 801c4dc:	4b1a      	ldr	r3, [pc, #104]	; (801c548 <_tx_mutex_thread_release+0x84>)
 801c4de:	681b      	ldr	r3, [r3, #0]
 801c4e0:	3301      	adds	r3, #1
 801c4e2:	4a19      	ldr	r2, [pc, #100]	; (801c548 <_tx_mutex_thread_release+0x84>)
 801c4e4:	6013      	str	r3, [r2, #0]
    /* Loop to look at all the mutexes.  */
    do
    {

        /* Pickup the mutex head pointer.  */
        mutex_ptr =  thread_ptr -> tx_thread_owned_mutex_list;
 801c4e6:	687b      	ldr	r3, [r7, #4]
 801c4e8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801c4ec:	623b      	str	r3, [r7, #32]

        /* Determine if there is a mutex.  */
        if (mutex_ptr != TX_NULL)
 801c4ee:	6a3b      	ldr	r3, [r7, #32]
 801c4f0:	2b00      	cmp	r3, #0
 801c4f2:	d017      	beq.n	801c524 <_tx_mutex_thread_release+0x60>
        {

            /* Yes, set the ownership count to 1.  */
            mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 801c4f4:	6a3b      	ldr	r3, [r7, #32]
 801c4f6:	2201      	movs	r2, #1
 801c4f8:	609a      	str	r2, [r3, #8]
 801c4fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c4fc:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801c4fe:	68fb      	ldr	r3, [r7, #12]
 801c500:	f383 8810 	msr	PRIMASK, r3
}
 801c504:	bf00      	nop
            do
            {
                status =  _tx_mutex_put(mutex_ptr);
            } while (status != TX_SUCCESS);
#else
            _tx_mutex_put(mutex_ptr);
 801c506:	6a38      	ldr	r0, [r7, #32]
 801c508:	f000 fb9c 	bl	801cc44 <_tx_mutex_put>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801c50c:	f3ef 8310 	mrs	r3, PRIMASK
 801c510:	617b      	str	r3, [r7, #20]
    return(posture);
 801c512:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 801c514:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 801c516:	b672      	cpsid	i
    return(int_posture);
 801c518:	693b      	ldr	r3, [r7, #16]
#endif

            /* Disable interrupts.  */
            TX_DISABLE
 801c51a:	627b      	str	r3, [r7, #36]	; 0x24

            /* Move to the next mutex.  */
            mutex_ptr =  thread_ptr -> tx_thread_owned_mutex_list;
 801c51c:	687b      	ldr	r3, [r7, #4]
 801c51e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801c522:	623b      	str	r3, [r7, #32]
        }
    } while (mutex_ptr != TX_NULL);
 801c524:	6a3b      	ldr	r3, [r7, #32]
 801c526:	2b00      	cmp	r3, #0
 801c528:	d1dd      	bne.n	801c4e6 <_tx_mutex_thread_release+0x22>

    /* Restore preemption.  */
    _tx_thread_preempt_disable--;
 801c52a:	4b07      	ldr	r3, [pc, #28]	; (801c548 <_tx_mutex_thread_release+0x84>)
 801c52c:	681b      	ldr	r3, [r3, #0]
 801c52e:	3b01      	subs	r3, #1
 801c530:	4a05      	ldr	r2, [pc, #20]	; (801c548 <_tx_mutex_thread_release+0x84>)
 801c532:	6013      	str	r3, [r2, #0]
 801c534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c536:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801c538:	68bb      	ldr	r3, [r7, #8]
 801c53a:	f383 8810 	msr	PRIMASK, r3
}
 801c53e:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE
}
 801c540:	bf00      	nop
 801c542:	3728      	adds	r7, #40	; 0x28
 801c544:	46bd      	mov	sp, r7
 801c546:	bd80      	pop	{r7, pc}
 801c548:	24005164 	.word	0x24005164

0801c54c <_tx_mutex_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_create(TX_MUTEX *mutex_ptr, CHAR *name_ptr, UINT inherit)
{
 801c54c:	b580      	push	{r7, lr}
 801c54e:	b08a      	sub	sp, #40	; 0x28
 801c550:	af00      	add	r7, sp, #0
 801c552:	60f8      	str	r0, [r7, #12]
 801c554:	60b9      	str	r1, [r7, #8]
 801c556:	607a      	str	r2, [r7, #4]
TX_MUTEX        *next_mutex;
TX_MUTEX        *previous_mutex;


    /* Initialize mutex control block to all zeros.  */
    TX_MEMSET(mutex_ptr, 0, (sizeof(TX_MUTEX)));
 801c558:	2234      	movs	r2, #52	; 0x34
 801c55a:	2100      	movs	r1, #0
 801c55c:	68f8      	ldr	r0, [r7, #12]
 801c55e:	f003 f97f 	bl	801f860 <memset>

    /* Setup the basic mutex fields.  */
    mutex_ptr -> tx_mutex_name =             name_ptr;
 801c562:	68fb      	ldr	r3, [r7, #12]
 801c564:	68ba      	ldr	r2, [r7, #8]
 801c566:	605a      	str	r2, [r3, #4]
    mutex_ptr -> tx_mutex_inherit =          inherit;
 801c568:	68fb      	ldr	r3, [r7, #12]
 801c56a:	687a      	ldr	r2, [r7, #4]
 801c56c:	611a      	str	r2, [r3, #16]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801c56e:	f3ef 8310 	mrs	r3, PRIMASK
 801c572:	61bb      	str	r3, [r7, #24]
    return(posture);
 801c574:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 801c576:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 801c578:	b672      	cpsid	i
    return(int_posture);
 801c57a:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the mutex on the created list.  */
    TX_DISABLE
 801c57c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the mutex ID to make it valid.  */
    mutex_ptr -> tx_mutex_id =  TX_MUTEX_ID;
 801c57e:	68fb      	ldr	r3, [r7, #12]
 801c580:	4a1a      	ldr	r2, [pc, #104]	; (801c5ec <_tx_mutex_create+0xa0>)
 801c582:	601a      	str	r2, [r3, #0]

    /* Setup the thread mutex release function pointer.  */
    _tx_thread_mutex_release =  &(_tx_mutex_thread_release);
 801c584:	4b1a      	ldr	r3, [pc, #104]	; (801c5f0 <_tx_mutex_create+0xa4>)
 801c586:	4a1b      	ldr	r2, [pc, #108]	; (801c5f4 <_tx_mutex_create+0xa8>)
 801c588:	601a      	str	r2, [r3, #0]

    /* Place the mutex on the list of created mutexes.  First,
       check for an empty list.  */
    if (_tx_mutex_created_count == TX_EMPTY)
 801c58a:	4b1b      	ldr	r3, [pc, #108]	; (801c5f8 <_tx_mutex_create+0xac>)
 801c58c:	681b      	ldr	r3, [r3, #0]
 801c58e:	2b00      	cmp	r3, #0
 801c590:	d109      	bne.n	801c5a6 <_tx_mutex_create+0x5a>
    {

        /* The created mutex list is empty.  Add mutex to empty list.  */
        _tx_mutex_created_ptr =                   mutex_ptr;
 801c592:	4a1a      	ldr	r2, [pc, #104]	; (801c5fc <_tx_mutex_create+0xb0>)
 801c594:	68fb      	ldr	r3, [r7, #12]
 801c596:	6013      	str	r3, [r2, #0]
        mutex_ptr -> tx_mutex_created_next =      mutex_ptr;
 801c598:	68fb      	ldr	r3, [r7, #12]
 801c59a:	68fa      	ldr	r2, [r7, #12]
 801c59c:	621a      	str	r2, [r3, #32]
        mutex_ptr -> tx_mutex_created_previous =  mutex_ptr;
 801c59e:	68fb      	ldr	r3, [r7, #12]
 801c5a0:	68fa      	ldr	r2, [r7, #12]
 801c5a2:	625a      	str	r2, [r3, #36]	; 0x24
 801c5a4:	e011      	b.n	801c5ca <_tx_mutex_create+0x7e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_mutex =      _tx_mutex_created_ptr;
 801c5a6:	4b15      	ldr	r3, [pc, #84]	; (801c5fc <_tx_mutex_create+0xb0>)
 801c5a8:	681b      	ldr	r3, [r3, #0]
 801c5aa:	623b      	str	r3, [r7, #32]
        previous_mutex =  next_mutex -> tx_mutex_created_previous;
 801c5ac:	6a3b      	ldr	r3, [r7, #32]
 801c5ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c5b0:	61fb      	str	r3, [r7, #28]

        /* Place the new mutex in the list.  */
        next_mutex -> tx_mutex_created_previous =  mutex_ptr;
 801c5b2:	6a3b      	ldr	r3, [r7, #32]
 801c5b4:	68fa      	ldr	r2, [r7, #12]
 801c5b6:	625a      	str	r2, [r3, #36]	; 0x24
        previous_mutex -> tx_mutex_created_next =  mutex_ptr;
 801c5b8:	69fb      	ldr	r3, [r7, #28]
 801c5ba:	68fa      	ldr	r2, [r7, #12]
 801c5bc:	621a      	str	r2, [r3, #32]

        /* Setup this mutex's next and previous created links.  */
        mutex_ptr -> tx_mutex_created_previous =  previous_mutex;
 801c5be:	68fb      	ldr	r3, [r7, #12]
 801c5c0:	69fa      	ldr	r2, [r7, #28]
 801c5c2:	625a      	str	r2, [r3, #36]	; 0x24
        mutex_ptr -> tx_mutex_created_next =      next_mutex;
 801c5c4:	68fb      	ldr	r3, [r7, #12]
 801c5c6:	6a3a      	ldr	r2, [r7, #32]
 801c5c8:	621a      	str	r2, [r3, #32]
    }

    /* Increment the ownership count.  */
    _tx_mutex_created_count++;
 801c5ca:	4b0b      	ldr	r3, [pc, #44]	; (801c5f8 <_tx_mutex_create+0xac>)
 801c5cc:	681b      	ldr	r3, [r3, #0]
 801c5ce:	3301      	adds	r3, #1
 801c5d0:	4a09      	ldr	r2, [pc, #36]	; (801c5f8 <_tx_mutex_create+0xac>)
 801c5d2:	6013      	str	r3, [r2, #0]
 801c5d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c5d6:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801c5d8:	693b      	ldr	r3, [r7, #16]
 801c5da:	f383 8810 	msr	PRIMASK, r3
}
 801c5de:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 801c5e0:	2300      	movs	r3, #0
}
 801c5e2:	4618      	mov	r0, r3
 801c5e4:	3728      	adds	r7, #40	; 0x28
 801c5e6:	46bd      	mov	sp, r7
 801c5e8:	bd80      	pop	{r7, pc}
 801c5ea:	bf00      	nop
 801c5ec:	4d555445 	.word	0x4d555445
 801c5f0:	24005168 	.word	0x24005168
 801c5f4:	0801c4c5 	.word	0x0801c4c5
 801c5f8:	240050b0 	.word	0x240050b0
 801c5fc:	240050ac 	.word	0x240050ac

0801c600 <_tx_mutex_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_delete(TX_MUTEX *mutex_ptr)
{
 801c600:	b580      	push	{r7, lr}
 801c602:	b096      	sub	sp, #88	; 0x58
 801c604:	af00      	add	r7, sp, #0
 801c606:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801c608:	f3ef 8310 	mrs	r3, PRIMASK
 801c60c:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 801c60e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 801c610:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 801c612:	b672      	cpsid	i
    return(int_posture);
 801c614:	6b7b      	ldr	r3, [r7, #52]	; 0x34
#ifdef TX_MISRA_ENABLE
UINT            status;
#endif

    /* Disable interrupts to remove the mutex from the created list.  */
    TX_DISABLE
 801c616:	657b      	str	r3, [r7, #84]	; 0x54

    /* Log this kernel call.  */
    TX_EL_MUTEX_DELETE_INSERT

    /* Clear the mutex ID to make it invalid.  */
    mutex_ptr -> tx_mutex_id =  TX_CLEAR_ID;
 801c618:	687b      	ldr	r3, [r7, #4]
 801c61a:	2200      	movs	r2, #0
 801c61c:	601a      	str	r2, [r3, #0]

    /* Decrement the created count.  */
    _tx_mutex_created_count--;
 801c61e:	4b4a      	ldr	r3, [pc, #296]	; (801c748 <_tx_mutex_delete+0x148>)
 801c620:	681b      	ldr	r3, [r3, #0]
 801c622:	3b01      	subs	r3, #1
 801c624:	4a48      	ldr	r2, [pc, #288]	; (801c748 <_tx_mutex_delete+0x148>)
 801c626:	6013      	str	r3, [r2, #0]

    /* See if the mutex is the only one on the list.  */
    if (_tx_mutex_created_count == TX_EMPTY)
 801c628:	4b47      	ldr	r3, [pc, #284]	; (801c748 <_tx_mutex_delete+0x148>)
 801c62a:	681b      	ldr	r3, [r3, #0]
 801c62c:	2b00      	cmp	r3, #0
 801c62e:	d103      	bne.n	801c638 <_tx_mutex_delete+0x38>
    {

        /* Only created mutex, just set the created list to NULL.  */
        _tx_mutex_created_ptr =  TX_NULL;
 801c630:	4b46      	ldr	r3, [pc, #280]	; (801c74c <_tx_mutex_delete+0x14c>)
 801c632:	2200      	movs	r2, #0
 801c634:	601a      	str	r2, [r3, #0]
 801c636:	e013      	b.n	801c660 <_tx_mutex_delete+0x60>
    }
    else
    {

        /* Link-up the neighbors.  */
        next_mutex =                               mutex_ptr -> tx_mutex_created_next;
 801c638:	687b      	ldr	r3, [r7, #4]
 801c63a:	6a1b      	ldr	r3, [r3, #32]
 801c63c:	64bb      	str	r3, [r7, #72]	; 0x48
        previous_mutex =                           mutex_ptr -> tx_mutex_created_previous;
 801c63e:	687b      	ldr	r3, [r7, #4]
 801c640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c642:	647b      	str	r3, [r7, #68]	; 0x44
        next_mutex -> tx_mutex_created_previous =  previous_mutex;
 801c644:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801c646:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801c648:	625a      	str	r2, [r3, #36]	; 0x24
        previous_mutex -> tx_mutex_created_next =  next_mutex;
 801c64a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801c64c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801c64e:	621a      	str	r2, [r3, #32]

        /* See if we have to update the created list head pointer.  */
        if (_tx_mutex_created_ptr == mutex_ptr)
 801c650:	4b3e      	ldr	r3, [pc, #248]	; (801c74c <_tx_mutex_delete+0x14c>)
 801c652:	681b      	ldr	r3, [r3, #0]
 801c654:	687a      	ldr	r2, [r7, #4]
 801c656:	429a      	cmp	r2, r3
 801c658:	d102      	bne.n	801c660 <_tx_mutex_delete+0x60>
        {

            /* Yes, move the head pointer to the next link. */
            _tx_mutex_created_ptr =  next_mutex;
 801c65a:	4a3c      	ldr	r2, [pc, #240]	; (801c74c <_tx_mutex_delete+0x14c>)
 801c65c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801c65e:	6013      	str	r3, [r2, #0]
        }
    }

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 801c660:	4b3b      	ldr	r3, [pc, #236]	; (801c750 <_tx_mutex_delete+0x150>)
 801c662:	681b      	ldr	r3, [r3, #0]
 801c664:	3301      	adds	r3, #1
 801c666:	4a3a      	ldr	r2, [pc, #232]	; (801c750 <_tx_mutex_delete+0x150>)
 801c668:	6013      	str	r3, [r2, #0]

    /* Pickup the suspension information.  */
    thread_ptr =                             mutex_ptr -> tx_mutex_suspension_list;
 801c66a:	687b      	ldr	r3, [r7, #4]
 801c66c:	699b      	ldr	r3, [r3, #24]
 801c66e:	653b      	str	r3, [r7, #80]	; 0x50
    mutex_ptr -> tx_mutex_suspension_list =  TX_NULL;
 801c670:	687b      	ldr	r3, [r7, #4]
 801c672:	2200      	movs	r2, #0
 801c674:	619a      	str	r2, [r3, #24]
    suspended_count =                        mutex_ptr -> tx_mutex_suspended_count;
 801c676:	687b      	ldr	r3, [r7, #4]
 801c678:	69db      	ldr	r3, [r3, #28]
 801c67a:	64fb      	str	r3, [r7, #76]	; 0x4c
    mutex_ptr -> tx_mutex_suspended_count =  TX_NO_SUSPENSIONS;
 801c67c:	687b      	ldr	r3, [r7, #4]
 801c67e:	2200      	movs	r2, #0
 801c680:	61da      	str	r2, [r3, #28]


    /* Determine if the mutex is currently on a thread's ownership list.  */

    /* Setup pointer to owner of mutex.  */
    owner_thread =  mutex_ptr -> tx_mutex_owner;
 801c682:	687b      	ldr	r3, [r7, #4]
 801c684:	68db      	ldr	r3, [r3, #12]
 801c686:	643b      	str	r3, [r7, #64]	; 0x40

    /* Determine if there is a valid thread pointer.  */
    if (owner_thread != TX_NULL)
 801c688:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c68a:	2b00      	cmp	r3, #0
 801c68c:	d013      	beq.n	801c6b6 <_tx_mutex_delete+0xb6>
    {

        /* Yes, remove this mutex from the owned list.  */

        /* Set the ownership count to 1.  */
        mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 801c68e:	687b      	ldr	r3, [r7, #4]
 801c690:	2201      	movs	r2, #1
 801c692:	609a      	str	r2, [r3, #8]
 801c694:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801c696:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801c698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c69a:	f383 8810 	msr	PRIMASK, r3
}
 801c69e:	bf00      	nop
        do
        {
            status =  _tx_mutex_put(mutex_ptr);
        } while (status != TX_SUCCESS);
#else
        _tx_mutex_put(mutex_ptr);
 801c6a0:	6878      	ldr	r0, [r7, #4]
 801c6a2:	f000 facf 	bl	801cc44 <_tx_mutex_put>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801c6a6:	f3ef 8310 	mrs	r3, PRIMASK
 801c6aa:	633b      	str	r3, [r7, #48]	; 0x30
    return(posture);
 801c6ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    int_posture = __get_interrupt_posture();
 801c6ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("CPSID i" : : : "memory");
 801c6b0:	b672      	cpsid	i
    return(int_posture);
 801c6b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
#endif

        /* Disable interrupts.  */
        TX_DISABLE
 801c6b4:	657b      	str	r3, [r7, #84]	; 0x54
 801c6b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801c6b8:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801c6ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c6bc:	f383 8810 	msr	PRIMASK, r3
}
 801c6c0:	bf00      	nop
    /* Restore interrupts.  */
    TX_RESTORE

    /* Walk through the mutex list to resume any and all threads suspended
       on this mutex.  */
    while (suspended_count != ((ULONG) 0))
 801c6c2:	e024      	b.n	801c70e <_tx_mutex_delete+0x10e>
    {

        /* Decrement the suspension count.  */
        suspended_count--;
 801c6c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c6c6:	3b01      	subs	r3, #1
 801c6c8:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801c6ca:	f3ef 8310 	mrs	r3, PRIMASK
 801c6ce:	61fb      	str	r3, [r7, #28]
    return(posture);
 801c6d0:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 801c6d2:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 801c6d4:	b672      	cpsid	i
    return(int_posture);
 801c6d6:	69bb      	ldr	r3, [r7, #24]

        /* Lockout interrupts.  */
        TX_DISABLE
 801c6d8:	657b      	str	r3, [r7, #84]	; 0x54

        /* Clear the cleanup pointer, this prevents the timeout from doing
           anything.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 801c6da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c6dc:	2200      	movs	r2, #0
 801c6de:	669a      	str	r2, [r3, #104]	; 0x68

        /* Set the return status in the thread to TX_DELETED.  */
        thread_ptr -> tx_thread_suspend_status =  TX_DELETED;
 801c6e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c6e2:	2201      	movs	r2, #1
 801c6e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Move the thread pointer ahead.  */
        next_thread =  thread_ptr -> tx_thread_suspended_next;
 801c6e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c6ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c6ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption again.  */
        _tx_thread_preempt_disable++;
 801c6ee:	4b18      	ldr	r3, [pc, #96]	; (801c750 <_tx_mutex_delete+0x150>)
 801c6f0:	681b      	ldr	r3, [r3, #0]
 801c6f2:	3301      	adds	r3, #1
 801c6f4:	4a16      	ldr	r2, [pc, #88]	; (801c750 <_tx_mutex_delete+0x150>)
 801c6f6:	6013      	str	r3, [r2, #0]
 801c6f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801c6fa:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801c6fc:	6a3b      	ldr	r3, [r7, #32]
 801c6fe:	f383 8810 	msr	PRIMASK, r3
}
 801c702:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume the thread.  */
        _tx_thread_system_resume(thread_ptr);
 801c704:	6d38      	ldr	r0, [r7, #80]	; 0x50
 801c706:	f001 f9d5 	bl	801dab4 <_tx_thread_system_resume>
#endif

        /* Move to next thread.  */
        thread_ptr =  next_thread;
 801c70a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c70c:	653b      	str	r3, [r7, #80]	; 0x50
    while (suspended_count != ((ULONG) 0))
 801c70e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c710:	2b00      	cmp	r3, #0
 801c712:	d1d7      	bne.n	801c6c4 <_tx_mutex_delete+0xc4>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801c714:	f3ef 8310 	mrs	r3, PRIMASK
 801c718:	613b      	str	r3, [r7, #16]
    return(posture);
 801c71a:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 801c71c:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 801c71e:	b672      	cpsid	i
    return(int_posture);
 801c720:	68fb      	ldr	r3, [r7, #12]

    /* Execute Port-Specific completion processing. If needed, it is typically defined in tx_port.h.  */
    TX_MUTEX_DELETE_PORT_COMPLETION(mutex_ptr)

    /* Disable interrupts.  */
    TX_DISABLE
 801c722:	657b      	str	r3, [r7, #84]	; 0x54

    /* Release previous preempt disable.  */
    _tx_thread_preempt_disable--;
 801c724:	4b0a      	ldr	r3, [pc, #40]	; (801c750 <_tx_mutex_delete+0x150>)
 801c726:	681b      	ldr	r3, [r3, #0]
 801c728:	3b01      	subs	r3, #1
 801c72a:	4a09      	ldr	r2, [pc, #36]	; (801c750 <_tx_mutex_delete+0x150>)
 801c72c:	6013      	str	r3, [r2, #0]
 801c72e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801c730:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801c732:	697b      	ldr	r3, [r7, #20]
 801c734:	f383 8810 	msr	PRIMASK, r3
}
 801c738:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 801c73a:	f001 f981 	bl	801da40 <_tx_thread_system_preempt_check>

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 801c73e:	2300      	movs	r3, #0
}
 801c740:	4618      	mov	r0, r3
 801c742:	3758      	adds	r7, #88	; 0x58
 801c744:	46bd      	mov	sp, r7
 801c746:	bd80      	pop	{r7, pc}
 801c748:	240050b0 	.word	0x240050b0
 801c74c:	240050ac 	.word	0x240050ac
 801c750:	24005164 	.word	0x24005164

0801c754 <_tx_mutex_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_get(TX_MUTEX *mutex_ptr, ULONG wait_option)
{
 801c754:	b580      	push	{r7, lr}
 801c756:	b092      	sub	sp, #72	; 0x48
 801c758:	af00      	add	r7, sp, #0
 801c75a:	6078      	str	r0, [r7, #4]
 801c75c:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801c75e:	f3ef 8310 	mrs	r3, PRIMASK
 801c762:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 801c764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 801c766:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 801c768:	b672      	cpsid	i
    return(int_posture);
 801c76a:	6a3b      	ldr	r3, [r7, #32]
TX_THREAD       *previous_thread;
UINT            status;


    /* Disable interrupts to get an instance from the mutex.  */
    TX_DISABLE
 801c76c:	643b      	str	r3, [r7, #64]	; 0x40

    /* Log this kernel call.  */
    TX_EL_MUTEX_GET_INSERT

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 801c76e:	4b7a      	ldr	r3, [pc, #488]	; (801c958 <_tx_mutex_get+0x204>)
 801c770:	681b      	ldr	r3, [r3, #0]
 801c772:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Determine if this mutex is available.  */
    if (mutex_ptr -> tx_mutex_ownership_count == ((UINT) 0))
 801c774:	687b      	ldr	r3, [r7, #4]
 801c776:	689b      	ldr	r3, [r3, #8]
 801c778:	2b00      	cmp	r3, #0
 801c77a:	d144      	bne.n	801c806 <_tx_mutex_get+0xb2>
    {

        /* Set the ownership count to 1.  */
        mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 801c77c:	687b      	ldr	r3, [r7, #4]
 801c77e:	2201      	movs	r2, #1
 801c780:	609a      	str	r2, [r3, #8]

        /* Remember that the calling thread owns the mutex.  */
        mutex_ptr -> tx_mutex_owner =  thread_ptr;
 801c782:	687b      	ldr	r3, [r7, #4]
 801c784:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801c786:	60da      	str	r2, [r3, #12]

        /* Determine if the thread pointer is valid.  */
        if (thread_ptr != TX_NULL)
 801c788:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c78a:	2b00      	cmp	r3, #0
 801c78c:	d032      	beq.n	801c7f4 <_tx_mutex_get+0xa0>
        {

            /* Determine if priority inheritance is required.  */
            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 801c78e:	687b      	ldr	r3, [r7, #4]
 801c790:	691b      	ldr	r3, [r3, #16]
 801c792:	2b01      	cmp	r3, #1
 801c794:	d106      	bne.n	801c7a4 <_tx_mutex_get+0x50>
            {

                /* Remember the current priority of thread.  */
                mutex_ptr -> tx_mutex_original_priority =   thread_ptr -> tx_thread_priority;
 801c796:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c798:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801c79a:	687b      	ldr	r3, [r7, #4]
 801c79c:	615a      	str	r2, [r3, #20]

                /* Setup the highest priority waiting thread.  */
                mutex_ptr -> tx_mutex_highest_priority_waiting =  ((UINT) TX_MAX_PRIORITIES);
 801c79e:	687b      	ldr	r3, [r7, #4]
 801c7a0:	2220      	movs	r2, #32
 801c7a2:	629a      	str	r2, [r3, #40]	; 0x28
            }

            /* Pickup next mutex pointer, which is the head of the list.  */
            next_mutex =  thread_ptr -> tx_thread_owned_mutex_list;
 801c7a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c7a6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801c7aa:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* Determine if this thread owns any other mutexes that have priority inheritance.  */
            if (next_mutex != TX_NULL)
 801c7ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c7ae:	2b00      	cmp	r3, #0
 801c7b0:	d00f      	beq.n	801c7d2 <_tx_mutex_get+0x7e>
            {

                /* Non-empty list. Link up the mutex.  */

                /* Pickup the next and previous mutex pointer.  */
                previous_mutex =  next_mutex -> tx_mutex_owned_previous;
 801c7b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c7b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c7b6:	62bb      	str	r3, [r7, #40]	; 0x28

                /* Place the owned mutex in the list.  */
                next_mutex -> tx_mutex_owned_previous =  mutex_ptr;
 801c7b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c7ba:	687a      	ldr	r2, [r7, #4]
 801c7bc:	631a      	str	r2, [r3, #48]	; 0x30
                previous_mutex -> tx_mutex_owned_next =  mutex_ptr;
 801c7be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c7c0:	687a      	ldr	r2, [r7, #4]
 801c7c2:	62da      	str	r2, [r3, #44]	; 0x2c

                /* Setup this mutex's next and previous created links.  */
                mutex_ptr -> tx_mutex_owned_previous =  previous_mutex;
 801c7c4:	687b      	ldr	r3, [r7, #4]
 801c7c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801c7c8:	631a      	str	r2, [r3, #48]	; 0x30
                mutex_ptr -> tx_mutex_owned_next =      next_mutex;
 801c7ca:	687b      	ldr	r3, [r7, #4]
 801c7cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801c7ce:	62da      	str	r2, [r3, #44]	; 0x2c
 801c7d0:	e009      	b.n	801c7e6 <_tx_mutex_get+0x92>
            }
            else
            {

                /* The owned mutex list is empty.  Add mutex to empty list.  */
                thread_ptr -> tx_thread_owned_mutex_list =     mutex_ptr;
 801c7d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c7d4:	687a      	ldr	r2, [r7, #4]
 801c7d6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
                mutex_ptr -> tx_mutex_owned_next =             mutex_ptr;
 801c7da:	687b      	ldr	r3, [r7, #4]
 801c7dc:	687a      	ldr	r2, [r7, #4]
 801c7de:	62da      	str	r2, [r3, #44]	; 0x2c
                mutex_ptr -> tx_mutex_owned_previous =         mutex_ptr;
 801c7e0:	687b      	ldr	r3, [r7, #4]
 801c7e2:	687a      	ldr	r2, [r7, #4]
 801c7e4:	631a      	str	r2, [r3, #48]	; 0x30
            }

            /* Increment the number of mutexes owned counter.  */
            thread_ptr -> tx_thread_owned_mutex_count++;
 801c7e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c7e8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801c7ec:	1c5a      	adds	r2, r3, #1
 801c7ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c7f0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 801c7f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c7f6:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801c7f8:	69fb      	ldr	r3, [r7, #28]
 801c7fa:	f383 8810 	msr	PRIMASK, r3
}
 801c7fe:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return success.  */
        status =  TX_SUCCESS;
 801c800:	2300      	movs	r3, #0
 801c802:	647b      	str	r3, [r7, #68]	; 0x44
 801c804:	e0a2      	b.n	801c94c <_tx_mutex_get+0x1f8>
    }

    /* Otherwise, see if the owning thread is trying to obtain the same mutex.  */
    else if (mutex_ptr -> tx_mutex_owner == thread_ptr)
 801c806:	687b      	ldr	r3, [r7, #4]
 801c808:	68db      	ldr	r3, [r3, #12]
 801c80a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801c80c:	429a      	cmp	r2, r3
 801c80e:	d10d      	bne.n	801c82c <_tx_mutex_get+0xd8>
    {

        /* The owning thread is requesting the mutex again, just
           increment the ownership count.  */
        mutex_ptr -> tx_mutex_ownership_count++;
 801c810:	687b      	ldr	r3, [r7, #4]
 801c812:	689b      	ldr	r3, [r3, #8]
 801c814:	1c5a      	adds	r2, r3, #1
 801c816:	687b      	ldr	r3, [r7, #4]
 801c818:	609a      	str	r2, [r3, #8]
 801c81a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c81c:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801c81e:	69bb      	ldr	r3, [r7, #24]
 801c820:	f383 8810 	msr	PRIMASK, r3
}
 801c824:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return success.  */
        status =  TX_SUCCESS;
 801c826:	2300      	movs	r3, #0
 801c828:	647b      	str	r3, [r7, #68]	; 0x44
 801c82a:	e08f      	b.n	801c94c <_tx_mutex_get+0x1f8>
    }
    else
    {

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 801c82c:	683b      	ldr	r3, [r7, #0]
 801c82e:	2b00      	cmp	r3, #0
 801c830:	f000 8084 	beq.w	801c93c <_tx_mutex_get+0x1e8>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 801c834:	4b49      	ldr	r3, [pc, #292]	; (801c95c <_tx_mutex_get+0x208>)
 801c836:	681b      	ldr	r3, [r3, #0]
 801c838:	2b00      	cmp	r3, #0
 801c83a:	d008      	beq.n	801c84e <_tx_mutex_get+0xfa>
 801c83c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c83e:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801c840:	697b      	ldr	r3, [r7, #20]
 801c842:	f383 8810 	msr	PRIMASK, r3
}
 801c846:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
                status =  TX_NOT_AVAILABLE;
 801c848:	231d      	movs	r3, #29
 801c84a:	647b      	str	r3, [r7, #68]	; 0x44
 801c84c:	e07e      	b.n	801c94c <_tx_mutex_get+0x1f8>
            {

                /* Prepare for suspension of this thread.  */

                /* Pickup the mutex owner.  */
                mutex_owner =  mutex_ptr -> tx_mutex_owner;
 801c84e:	687b      	ldr	r3, [r7, #4]
 801c850:	68db      	ldr	r3, [r3, #12]
 801c852:	63bb      	str	r3, [r7, #56]	; 0x38
#endif
                }
#endif

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_mutex_cleanup);
 801c854:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c856:	4a42      	ldr	r2, [pc, #264]	; (801c960 <_tx_mutex_get+0x20c>)
 801c858:	669a      	str	r2, [r3, #104]	; 0x68

                /* Setup cleanup information, i.e. this mutex control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) mutex_ptr;
 801c85a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c85c:	687a      	ldr	r2, [r7, #4]
 801c85e:	66da      	str	r2, [r3, #108]	; 0x6c

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 801c860:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c862:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801c866:	1c5a      	adds	r2, r3, #1
 801c868:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c86a:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

                /* Setup suspension list.  */
                if (mutex_ptr -> tx_mutex_suspended_count == TX_NO_SUSPENSIONS)
 801c86e:	687b      	ldr	r3, [r7, #4]
 801c870:	69db      	ldr	r3, [r3, #28]
 801c872:	2b00      	cmp	r3, #0
 801c874:	d109      	bne.n	801c88a <_tx_mutex_get+0x136>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    mutex_ptr -> tx_mutex_suspension_list =         thread_ptr;
 801c876:	687b      	ldr	r3, [r7, #4]
 801c878:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801c87a:	619a      	str	r2, [r3, #24]
                    thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 801c87c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c87e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801c880:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 801c882:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c884:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801c886:	675a      	str	r2, [r3, #116]	; 0x74
 801c888:	e011      	b.n	801c8ae <_tx_mutex_get+0x15a>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   mutex_ptr -> tx_mutex_suspension_list;
 801c88a:	687b      	ldr	r3, [r7, #4]
 801c88c:	699b      	ldr	r3, [r3, #24]
 801c88e:	637b      	str	r3, [r7, #52]	; 0x34
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 801c890:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c892:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801c894:	671a      	str	r2, [r3, #112]	; 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 801c896:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c898:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801c89a:	633b      	str	r3, [r7, #48]	; 0x30
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 801c89c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c89e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801c8a0:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 801c8a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c8a4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801c8a6:	671a      	str	r2, [r3, #112]	; 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 801c8a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c8aa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801c8ac:	675a      	str	r2, [r3, #116]	; 0x74
                }

                /* Increment the suspension count.  */
                mutex_ptr -> tx_mutex_suspended_count++;
 801c8ae:	687b      	ldr	r3, [r7, #4]
 801c8b0:	69db      	ldr	r3, [r3, #28]
 801c8b2:	1c5a      	adds	r2, r3, #1
 801c8b4:	687b      	ldr	r3, [r7, #4]
 801c8b6:	61da      	str	r2, [r3, #28]

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =    TX_MUTEX_SUSP;
 801c8b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c8ba:	220d      	movs	r2, #13
 801c8bc:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 801c8be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c8c0:	2201      	movs	r2, #1
 801c8c2:	639a      	str	r2, [r3, #56]	; 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 801c8c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c8c6:	683a      	ldr	r2, [r7, #0]
 801c8c8:	64da      	str	r2, [r3, #76]	; 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 801c8ca:	4b24      	ldr	r3, [pc, #144]	; (801c95c <_tx_mutex_get+0x208>)
 801c8cc:	681b      	ldr	r3, [r3, #0]
 801c8ce:	3301      	adds	r3, #1
 801c8d0:	4a22      	ldr	r2, [pc, #136]	; (801c95c <_tx_mutex_get+0x208>)
 801c8d2:	6013      	str	r3, [r2, #0]
 801c8d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c8d6:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801c8d8:	693b      	ldr	r3, [r7, #16]
 801c8da:	f383 8810 	msr	PRIMASK, r3
}
 801c8de:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if we need to raise the priority of the thread
                   owning the mutex.  */
                if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 801c8e0:	687b      	ldr	r3, [r7, #4]
 801c8e2:	691b      	ldr	r3, [r3, #16]
 801c8e4:	2b01      	cmp	r3, #1
 801c8e6:	d121      	bne.n	801c92c <_tx_mutex_get+0x1d8>
                {

                    /* Determine if this is the highest priority to raise for this mutex.  */
                    if (mutex_ptr -> tx_mutex_highest_priority_waiting > thread_ptr -> tx_thread_priority)
 801c8e8:	687b      	ldr	r3, [r7, #4]
 801c8ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801c8ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c8ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c8f0:	429a      	cmp	r2, r3
 801c8f2:	d903      	bls.n	801c8fc <_tx_mutex_get+0x1a8>
                    {

                        /* Remember this priority.  */
                        mutex_ptr -> tx_mutex_highest_priority_waiting =  thread_ptr -> tx_thread_priority;
 801c8f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c8f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801c8f8:	687b      	ldr	r3, [r7, #4]
 801c8fa:	629a      	str	r2, [r3, #40]	; 0x28
                    }

                    /* Determine if we have to update inherit priority level of the mutex owner.  */
                    if (thread_ptr -> tx_thread_priority < mutex_owner -> tx_thread_inherit_priority)
 801c8fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c8fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801c900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c902:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801c906:	429a      	cmp	r2, r3
 801c908:	d204      	bcs.n	801c914 <_tx_mutex_get+0x1c0>
                    {

                        /* Remember the new priority inheritance priority.  */
                        mutex_owner -> tx_thread_inherit_priority =  thread_ptr -> tx_thread_priority;
 801c90a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c90c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801c90e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c910:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
                    }

                    /* Priority inheritance is requested, check to see if the thread that owns the mutex is lower priority.  */
                    if (mutex_owner -> tx_thread_priority > thread_ptr -> tx_thread_priority)
 801c914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c916:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801c918:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c91a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c91c:	429a      	cmp	r2, r3
 801c91e:	d905      	bls.n	801c92c <_tx_mutex_get+0x1d8>
                    {

                        /* Yes, raise the suspended, owning thread's priority to that
                           of the current thread.  */
                        _tx_mutex_priority_change(mutex_owner, thread_ptr -> tx_thread_priority);
 801c920:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c924:	4619      	mov	r1, r3
 801c926:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801c928:	f000 f8ce 	bl	801cac8 <_tx_mutex_priority_change>
#endif
                    }
                }

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 801c92c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801c92e:	f001 f9c1 	bl	801dcb4 <_tx_thread_system_suspend>
#endif
                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 801c932:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c934:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801c938:	647b      	str	r3, [r7, #68]	; 0x44
 801c93a:	e007      	b.n	801c94c <_tx_mutex_get+0x1f8>
 801c93c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c93e:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801c940:	68fb      	ldr	r3, [r7, #12]
 801c942:	f383 8810 	msr	PRIMASK, r3
}
 801c946:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Immediate return, return error completion.  */
            status =  TX_NOT_AVAILABLE;
 801c948:	231d      	movs	r3, #29
 801c94a:	647b      	str	r3, [r7, #68]	; 0x44
        }
    }

    /* Return completion status.  */
    return(status);
 801c94c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 801c94e:	4618      	mov	r0, r3
 801c950:	3748      	adds	r7, #72	; 0x48
 801c952:	46bd      	mov	sp, r7
 801c954:	bd80      	pop	{r7, pc}
 801c956:	bf00      	nop
 801c958:	240050cc 	.word	0x240050cc
 801c95c:	24005164 	.word	0x24005164
 801c960:	0801c3cd 	.word	0x0801c3cd

0801c964 <_tx_mutex_prioritize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_prioritize(TX_MUTEX *mutex_ptr)
{
 801c964:	b580      	push	{r7, lr}
 801c966:	b092      	sub	sp, #72	; 0x48
 801c968:	af00      	add	r7, sp, #0
 801c96a:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801c96c:	f3ef 8310 	mrs	r3, PRIMASK
 801c970:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 801c972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 801c974:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 801c976:	b672      	cpsid	i
    return(int_posture);
 801c978:	6a3b      	ldr	r3, [r7, #32]
UINT            status;
#endif


    /* Disable interrupts.  */
    TX_DISABLE
 801c97a:	647b      	str	r3, [r7, #68]	; 0x44

    /* Log this kernel call.  */
    TX_EL_MUTEX_PRIORITIZE_INSERT

    /* Pickup the suspended count.  */
    suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 801c97c:	687b      	ldr	r3, [r7, #4]
 801c97e:	69db      	ldr	r3, [r3, #28]
 801c980:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if there are fewer than 2 suspended threads.  */
    if (suspended_count < ((UINT) 2))
 801c982:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c984:	2b01      	cmp	r3, #1
 801c986:	d805      	bhi.n	801c994 <_tx_mutex_prioritize+0x30>
 801c988:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801c98a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801c98c:	69fb      	ldr	r3, [r7, #28]
 801c98e:	f383 8810 	msr	PRIMASK, r3
}
 801c992:	e092      	b.n	801caba <_tx_mutex_prioritize+0x156>
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Determine if there how many threads are suspended on this mutex.  */
    else if (suspended_count == ((UINT) 2))
 801c994:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c996:	2b02      	cmp	r3, #2
 801c998:	d114      	bne.n	801c9c4 <_tx_mutex_prioritize+0x60>
    {

        /* Pickup the head pointer and the next pointer.  */
        head_ptr =  mutex_ptr -> tx_mutex_suspension_list;
 801c99a:	687b      	ldr	r3, [r7, #4]
 801c99c:	699b      	ldr	r3, [r3, #24]
 801c99e:	63bb      	str	r3, [r7, #56]	; 0x38
        next_thread =  head_ptr -> tx_thread_suspended_next;
 801c9a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c9a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c9a4:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Determine if the next suspended thread has a higher priority.  */
        if ((next_thread -> tx_thread_priority) < (head_ptr -> tx_thread_priority))
 801c9a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c9a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801c9aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c9ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c9ae:	429a      	cmp	r2, r3
 801c9b0:	d202      	bcs.n	801c9b8 <_tx_mutex_prioritize+0x54>
        {

            /* Yes, move the list head to the next thread.  */
            mutex_ptr -> tx_mutex_suspension_list =  next_thread;
 801c9b2:	687b      	ldr	r3, [r7, #4]
 801c9b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801c9b6:	619a      	str	r2, [r3, #24]
 801c9b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801c9ba:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801c9bc:	69bb      	ldr	r3, [r7, #24]
 801c9be:	f383 8810 	msr	PRIMASK, r3
}
 801c9c2:	e07a      	b.n	801caba <_tx_mutex_prioritize+0x156>
    }
    else
    {

        /* Remember the suspension count and head pointer.  */
        head_ptr =   mutex_ptr -> tx_mutex_suspension_list;
 801c9c4:	687b      	ldr	r3, [r7, #4]
 801c9c6:	699b      	ldr	r3, [r3, #24]
 801c9c8:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Default the highest priority thread to the thread at the front of the list.  */
        priority_thread_ptr =  head_ptr;
 801c9ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c9cc:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Setup search pointer.  */
        thread_ptr =  priority_thread_ptr -> tx_thread_suspended_next;
 801c9ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c9d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c9d2:	643b      	str	r3, [r7, #64]	; 0x40

        /* Disable preemption.  */
        _tx_thread_preempt_disable++;
 801c9d4:	4b3b      	ldr	r3, [pc, #236]	; (801cac4 <_tx_mutex_prioritize+0x160>)
 801c9d6:	681b      	ldr	r3, [r3, #0]
 801c9d8:	3301      	adds	r3, #1
 801c9da:	4a3a      	ldr	r2, [pc, #232]	; (801cac4 <_tx_mutex_prioritize+0x160>)
 801c9dc:	6013      	str	r3, [r2, #0]

        /* Set the list changed flag to false.  */
        list_changed =  TX_FALSE;
 801c9de:	2300      	movs	r3, #0
 801c9e0:	633b      	str	r3, [r7, #48]	; 0x30
        /* Search through the list to find the highest priority thread.  */
        do
        {

            /* Is the current thread higher priority?  */
            if (thread_ptr -> tx_thread_priority < priority_thread_ptr -> tx_thread_priority)
 801c9e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c9e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801c9e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c9e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c9ea:	429a      	cmp	r2, r3
 801c9ec:	d201      	bcs.n	801c9f2 <_tx_mutex_prioritize+0x8e>
            {

                /* Yes, remember that this thread is the highest priority.  */
                priority_thread_ptr =  thread_ptr;
 801c9ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c9f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 801c9f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801c9f4:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801c9f6:	68fb      	ldr	r3, [r7, #12]
 801c9f8:	f383 8810 	msr	PRIMASK, r3
}
 801c9fc:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801c9fe:	f3ef 8310 	mrs	r3, PRIMASK
 801ca02:	617b      	str	r3, [r7, #20]
    return(posture);
 801ca04:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 801ca06:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 801ca08:	b672      	cpsid	i
    return(int_posture);
 801ca0a:	693b      	ldr	r3, [r7, #16]

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 801ca0c:	647b      	str	r3, [r7, #68]	; 0x44

            /* Determine if any changes to the list have occurred while
               interrupts were enabled.  */

            /* Is the list head the same?  */
            if (head_ptr != mutex_ptr -> tx_mutex_suspension_list)
 801ca0e:	687b      	ldr	r3, [r7, #4]
 801ca10:	699b      	ldr	r3, [r3, #24]
 801ca12:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801ca14:	429a      	cmp	r2, r3
 801ca16:	d002      	beq.n	801ca1e <_tx_mutex_prioritize+0xba>
            {

                /* The list head has changed, set the list changed flag.  */
                list_changed =  TX_TRUE;
 801ca18:	2301      	movs	r3, #1
 801ca1a:	633b      	str	r3, [r7, #48]	; 0x30
 801ca1c:	e006      	b.n	801ca2c <_tx_mutex_prioritize+0xc8>
            }
            else
            {

                /* Is the suspended count the same?  */
                if (suspended_count != mutex_ptr -> tx_mutex_suspended_count)
 801ca1e:	687b      	ldr	r3, [r7, #4]
 801ca20:	69db      	ldr	r3, [r3, #28]
 801ca22:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801ca24:	429a      	cmp	r2, r3
 801ca26:	d001      	beq.n	801ca2c <_tx_mutex_prioritize+0xc8>
                {

                    /* The list head has changed, set the list changed flag.  */
                    list_changed =  TX_TRUE;
 801ca28:	2301      	movs	r3, #1
 801ca2a:	633b      	str	r3, [r7, #48]	; 0x30
                }
            }

            /* Determine if the list has changed.  */
            if (list_changed == TX_FALSE)
 801ca2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ca2e:	2b00      	cmp	r3, #0
 801ca30:	d103      	bne.n	801ca3a <_tx_mutex_prioritize+0xd6>
            {

                /* Move the thread pointer to the next thread.  */
                thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 801ca32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801ca34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801ca36:	643b      	str	r3, [r7, #64]	; 0x40
 801ca38:	e00c      	b.n	801ca54 <_tx_mutex_prioritize+0xf0>
            }
            else
            {

                /* Remember the suspension count and head pointer.  */
                head_ptr =   mutex_ptr -> tx_mutex_suspension_list;
 801ca3a:	687b      	ldr	r3, [r7, #4]
 801ca3c:	699b      	ldr	r3, [r3, #24]
 801ca3e:	63bb      	str	r3, [r7, #56]	; 0x38
                suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 801ca40:	687b      	ldr	r3, [r7, #4]
 801ca42:	69db      	ldr	r3, [r3, #28]
 801ca44:	637b      	str	r3, [r7, #52]	; 0x34

                /* Default the highest priority thread to the thread at the front of the list.  */
                priority_thread_ptr =  head_ptr;
 801ca46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ca48:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* Setup search pointer.  */
                thread_ptr =  priority_thread_ptr -> tx_thread_suspended_next;
 801ca4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ca4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801ca4e:	643b      	str	r3, [r7, #64]	; 0x40

                /* Reset the list changed flag.  */
                list_changed =  TX_FALSE;
 801ca50:	2300      	movs	r3, #0
 801ca52:	633b      	str	r3, [r7, #48]	; 0x30
            }

        } while (thread_ptr != head_ptr);
 801ca54:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801ca56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ca58:	429a      	cmp	r2, r3
 801ca5a:	d1c2      	bne.n	801c9e2 <_tx_mutex_prioritize+0x7e>

        /* Release preemption.  */
        _tx_thread_preempt_disable--;
 801ca5c:	4b19      	ldr	r3, [pc, #100]	; (801cac4 <_tx_mutex_prioritize+0x160>)
 801ca5e:	681b      	ldr	r3, [r3, #0]
 801ca60:	3b01      	subs	r3, #1
 801ca62:	4a18      	ldr	r2, [pc, #96]	; (801cac4 <_tx_mutex_prioritize+0x160>)
 801ca64:	6013      	str	r3, [r2, #0]

        /* Now determine if the highest priority thread is at the front
           of the list.  */
        if (priority_thread_ptr != head_ptr)
 801ca66:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801ca68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ca6a:	429a      	cmp	r2, r3
 801ca6c:	d01d      	beq.n	801caaa <_tx_mutex_prioritize+0x146>
            /* No, we need to move the highest priority suspended thread to the
               front of the list.  */

            /* First, remove the highest priority thread by updating the
               adjacent suspended threads.  */
            next_thread =                                  priority_thread_ptr -> tx_thread_suspended_next;
 801ca6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ca70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801ca72:	62fb      	str	r3, [r7, #44]	; 0x2c
            previous_thread =                              priority_thread_ptr -> tx_thread_suspended_previous;
 801ca74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ca76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801ca78:	62bb      	str	r3, [r7, #40]	; 0x28
            next_thread -> tx_thread_suspended_previous =  previous_thread;
 801ca7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ca7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801ca7e:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =  next_thread;
 801ca80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ca82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801ca84:	671a      	str	r2, [r3, #112]	; 0x70

            /* Now, link the highest priority thread at the front of the list.  */
            previous_thread =                                      head_ptr -> tx_thread_suspended_previous;
 801ca86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ca88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801ca8a:	62bb      	str	r3, [r7, #40]	; 0x28
            priority_thread_ptr -> tx_thread_suspended_next =      head_ptr;
 801ca8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ca8e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801ca90:	671a      	str	r2, [r3, #112]	; 0x70
            priority_thread_ptr -> tx_thread_suspended_previous =  previous_thread;
 801ca92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ca94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801ca96:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =          priority_thread_ptr;
 801ca98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ca9a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801ca9c:	671a      	str	r2, [r3, #112]	; 0x70
            head_ptr -> tx_thread_suspended_previous =             priority_thread_ptr;
 801ca9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801caa0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801caa2:	675a      	str	r2, [r3, #116]	; 0x74

            /* Move the list head pointer to the highest priority suspended thread.  */
            mutex_ptr -> tx_mutex_suspension_list =  priority_thread_ptr;
 801caa4:	687b      	ldr	r3, [r7, #4]
 801caa6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801caa8:	619a      	str	r2, [r3, #24]
 801caaa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801caac:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801caae:	68bb      	ldr	r3, [r7, #8]
 801cab0:	f383 8810 	msr	PRIMASK, r3
}
 801cab4:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 801cab6:	f000 ffc3 	bl	801da40 <_tx_thread_system_preempt_check>
    /* Return completion status.  */
    return(status);
#else

    /* Return successful completion.  */
    return(TX_SUCCESS);
 801caba:	2300      	movs	r3, #0
#endif
}
 801cabc:	4618      	mov	r0, r3
 801cabe:	3748      	adds	r7, #72	; 0x48
 801cac0:	46bd      	mov	sp, r7
 801cac2:	bd80      	pop	{r7, pc}
 801cac4:	24005164 	.word	0x24005164

0801cac8 <_tx_mutex_priority_change>:
/*                                            priority rather than next,  */
/*                                            resulting in version 6.1.6  */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_priority_change(TX_THREAD *thread_ptr, UINT new_priority)
{
 801cac8:	b580      	push	{r7, lr}
 801caca:	b090      	sub	sp, #64	; 0x40
 801cacc:	af00      	add	r7, sp, #0
 801cace:	6078      	str	r0, [r7, #4]
 801cad0:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801cad2:	f3ef 8310 	mrs	r3, PRIMASK
 801cad6:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 801cad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 801cada:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 801cadc:	b672      	cpsid	i
    return(int_posture);
 801cade:	6abb      	ldr	r3, [r7, #40]	; 0x28


#ifndef TX_NOT_INTERRUPTABLE

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 801cae0:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif

    /* Determine if this thread is currently ready.  */
    if (thread_ptr -> tx_thread_state != TX_READY)
 801cae2:	687b      	ldr	r3, [r7, #4]
 801cae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801cae6:	2b00      	cmp	r3, #0
 801cae8:	d017      	beq.n	801cb1a <_tx_mutex_priority_change+0x52>
    {

        /* Change thread priority to the new mutex priority-inheritance priority.  */
        thread_ptr -> tx_thread_priority =  new_priority;
 801caea:	687b      	ldr	r3, [r7, #4]
 801caec:	683a      	ldr	r2, [r7, #0]
 801caee:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Determine how to setup the thread's preemption-threshold.  */
        if (thread_ptr -> tx_thread_user_preempt_threshold < new_priority)
 801caf0:	687b      	ldr	r3, [r7, #4]
 801caf2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801caf6:	683a      	ldr	r2, [r7, #0]
 801caf8:	429a      	cmp	r2, r3
 801cafa:	d905      	bls.n	801cb08 <_tx_mutex_priority_change+0x40>
        {

            /* Change thread preemption-threshold to the user's preemption-threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  thread_ptr -> tx_thread_user_preempt_threshold;
 801cafc:	687b      	ldr	r3, [r7, #4]
 801cafe:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 801cb02:	687b      	ldr	r3, [r7, #4]
 801cb04:	63da      	str	r2, [r3, #60]	; 0x3c
 801cb06:	e002      	b.n	801cb0e <_tx_mutex_priority_change+0x46>
        }
        else
        {

            /* Change the thread preemption-threshold to the new threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  new_priority;
 801cb08:	687b      	ldr	r3, [r7, #4]
 801cb0a:	683a      	ldr	r2, [r7, #0]
 801cb0c:	63da      	str	r2, [r3, #60]	; 0x3c
 801cb0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801cb10:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801cb12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cb14:	f383 8810 	msr	PRIMASK, r3
}
 801cb18:	e089      	b.n	801cc2e <_tx_mutex_priority_change+0x166>
    }
    else
    {

        /* Pickup the next thread to execute.  */
        execute_ptr =  _tx_thread_execute_ptr;
 801cb1a:	4b47      	ldr	r3, [pc, #284]	; (801cc38 <_tx_mutex_priority_change+0x170>)
 801cb1c:	681b      	ldr	r3, [r3, #0]
 801cb1e:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Save the original priority.  */
        original_priority =  thread_ptr -> tx_thread_priority;
 801cb20:	687b      	ldr	r3, [r7, #4]
 801cb22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cb24:	637b      	str	r3, [r7, #52]	; 0x34
        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
#else

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable =  _tx_thread_preempt_disable + ((UINT) 2);
 801cb26:	4b45      	ldr	r3, [pc, #276]	; (801cc3c <_tx_mutex_priority_change+0x174>)
 801cb28:	681b      	ldr	r3, [r3, #0]
 801cb2a:	3302      	adds	r3, #2
 801cb2c:	4a43      	ldr	r2, [pc, #268]	; (801cc3c <_tx_mutex_priority_change+0x174>)
 801cb2e:	6013      	str	r3, [r2, #0]

        /* Set the state to priority change.  */
        thread_ptr -> tx_thread_state =    TX_PRIORITY_CHANGE;
 801cb30:	687b      	ldr	r3, [r7, #4]
 801cb32:	220e      	movs	r2, #14
 801cb34:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the suspending flag. */
        thread_ptr -> tx_thread_suspending =  TX_TRUE;
 801cb36:	687b      	ldr	r3, [r7, #4]
 801cb38:	2201      	movs	r2, #1
 801cb3a:	639a      	str	r2, [r3, #56]	; 0x38

        /* Setup the timeout period.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 801cb3c:	687b      	ldr	r3, [r7, #4]
 801cb3e:	2200      	movs	r2, #0
 801cb40:	64da      	str	r2, [r3, #76]	; 0x4c
 801cb42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801cb44:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801cb46:	69bb      	ldr	r3, [r7, #24]
 801cb48:	f383 8810 	msr	PRIMASK, r3
}
 801cb4c:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE

        /* The thread is ready and must first be removed from the list.  Call the
           system suspend function to accomplish this.  */
        _tx_thread_system_suspend(thread_ptr);
 801cb4e:	6878      	ldr	r0, [r7, #4]
 801cb50:	f001 f8b0 	bl	801dcb4 <_tx_thread_system_suspend>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801cb54:	f3ef 8310 	mrs	r3, PRIMASK
 801cb58:	623b      	str	r3, [r7, #32]
    return(posture);
 801cb5a:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 801cb5c:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 801cb5e:	b672      	cpsid	i
    return(int_posture);
 801cb60:	69fb      	ldr	r3, [r7, #28]

        /* Disable interrupts.  */
        TX_DISABLE
 801cb62:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* At this point, the preempt disable flag is still set, so we still have
           protection against all preemption.  */

        /* Change thread priority to the new mutex priority-inheritance priority.  */
        thread_ptr -> tx_thread_priority =  new_priority;
 801cb64:	687b      	ldr	r3, [r7, #4]
 801cb66:	683a      	ldr	r2, [r7, #0]
 801cb68:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Determine how to setup the thread's preemption-threshold.  */
        if (thread_ptr -> tx_thread_user_preempt_threshold < new_priority)
 801cb6a:	687b      	ldr	r3, [r7, #4]
 801cb6c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801cb70:	683a      	ldr	r2, [r7, #0]
 801cb72:	429a      	cmp	r2, r3
 801cb74:	d905      	bls.n	801cb82 <_tx_mutex_priority_change+0xba>
        {

            /* Change thread preemption-threshold to the user's preemption-threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  thread_ptr -> tx_thread_user_preempt_threshold;
 801cb76:	687b      	ldr	r3, [r7, #4]
 801cb78:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 801cb7c:	687b      	ldr	r3, [r7, #4]
 801cb7e:	63da      	str	r2, [r3, #60]	; 0x3c
 801cb80:	e002      	b.n	801cb88 <_tx_mutex_priority_change+0xc0>
        }
        else
        {

            /* Change the thread preemption-threshold to the new threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  new_priority;
 801cb82:	687b      	ldr	r3, [r7, #4]
 801cb84:	683a      	ldr	r2, [r7, #0]
 801cb86:	63da      	str	r2, [r3, #60]	; 0x3c
 801cb88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801cb8a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801cb8c:	68fb      	ldr	r3, [r7, #12]
 801cb8e:	f383 8810 	msr	PRIMASK, r3
}
 801cb92:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume the thread with the new priority.  */
        _tx_thread_system_resume(thread_ptr);
 801cb94:	6878      	ldr	r0, [r7, #4]
 801cb96:	f000 ff8d 	bl	801dab4 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801cb9a:	f3ef 8310 	mrs	r3, PRIMASK
 801cb9e:	617b      	str	r3, [r7, #20]
    return(posture);
 801cba0:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 801cba2:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 801cba4:	b672      	cpsid	i
    return(int_posture);
 801cba6:	693b      	ldr	r3, [r7, #16]
        TX_MUTEX_PRIORITY_CHANGE_EXTENSION

#ifndef TX_NOT_INTERRUPTABLE

        /* Disable interrupts.  */
        TX_DISABLE
 801cba8:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif

        /* Pickup the next thread to execute.  */
        next_execute_ptr =  _tx_thread_execute_ptr;
 801cbaa:	4b23      	ldr	r3, [pc, #140]	; (801cc38 <_tx_mutex_priority_change+0x170>)
 801cbac:	681b      	ldr	r3, [r3, #0]
 801cbae:	633b      	str	r3, [r7, #48]	; 0x30

        /* Determine if this thread is not the next thread to execute.  */
        if (thread_ptr != next_execute_ptr)
 801cbb0:	687a      	ldr	r2, [r7, #4]
 801cbb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cbb4:	429a      	cmp	r2, r3
 801cbb6:	d034      	beq.n	801cc22 <_tx_mutex_priority_change+0x15a>
        {

            /* Make sure the thread is still ready.  */
            if (thread_ptr -> tx_thread_state == TX_READY)
 801cbb8:	687b      	ldr	r3, [r7, #4]
 801cbba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801cbbc:	2b00      	cmp	r3, #0
 801cbbe:	d130      	bne.n	801cc22 <_tx_mutex_priority_change+0x15a>
            {

                /* Now check and see if this thread has an equal or higher priority.  */
                if (thread_ptr -> tx_thread_priority <= next_execute_ptr -> tx_thread_priority)
 801cbc0:	687b      	ldr	r3, [r7, #4]
 801cbc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801cbc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cbc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cbc8:	429a      	cmp	r2, r3
 801cbca:	d811      	bhi.n	801cbf0 <_tx_mutex_priority_change+0x128>
                {

                    /* Now determine if this thread was the previously executing thread.  */
                    if (thread_ptr == execute_ptr)
 801cbcc:	687a      	ldr	r2, [r7, #4]
 801cbce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cbd0:	429a      	cmp	r2, r3
 801cbd2:	d126      	bne.n	801cc22 <_tx_mutex_priority_change+0x15a>

                        /* Yes, this thread was previously executing before we temporarily suspended and resumed
                           it in order to change the priority. A lower or same priority thread cannot be the next thread
                           to execute in this case since this thread really didn't suspend.  Simply reset the execute
                           pointer to this thread.  */
                        _tx_thread_execute_ptr =  thread_ptr;
 801cbd4:	4a18      	ldr	r2, [pc, #96]	; (801cc38 <_tx_mutex_priority_change+0x170>)
 801cbd6:	687b      	ldr	r3, [r7, #4]
 801cbd8:	6013      	str	r3, [r2, #0]

                        /* Determine if we moved to a lower priority. If so, move the thread to the front of its priority list.  */
                        if (original_priority < new_priority)
 801cbda:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801cbdc:	683b      	ldr	r3, [r7, #0]
 801cbde:	429a      	cmp	r2, r3
 801cbe0:	d21f      	bcs.n	801cc22 <_tx_mutex_priority_change+0x15a>
                        {

                            /* Ensure that this thread is placed at the front of the priority list.  */
                            _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr;
 801cbe2:	687b      	ldr	r3, [r7, #4]
 801cbe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cbe6:	4916      	ldr	r1, [pc, #88]	; (801cc40 <_tx_mutex_priority_change+0x178>)
 801cbe8:	687a      	ldr	r2, [r7, #4]
 801cbea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 801cbee:	e018      	b.n	801cc22 <_tx_mutex_priority_change+0x15a>
                }
                else
                {

                    /* Now determine if this thread's preemption-threshold needs to be enforced.  */
                    if (thread_ptr -> tx_thread_preempt_threshold < thread_ptr -> tx_thread_priority)
 801cbf0:	687b      	ldr	r3, [r7, #4]
 801cbf2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801cbf4:	687b      	ldr	r3, [r7, #4]
 801cbf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cbf8:	429a      	cmp	r2, r3
 801cbfa:	d212      	bcs.n	801cc22 <_tx_mutex_priority_change+0x15a>
                    {

                        /* Yes, preemption-threshold is in force for this thread. */

                        /* Compare the next thread to execute thread's priority against the thread's preemption-threshold.  */
                        if (thread_ptr -> tx_thread_preempt_threshold <= next_execute_ptr -> tx_thread_priority)
 801cbfc:	687b      	ldr	r3, [r7, #4]
 801cbfe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801cc00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cc02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cc04:	429a      	cmp	r2, r3
 801cc06:	d80c      	bhi.n	801cc22 <_tx_mutex_priority_change+0x15a>
                        {

                            /* We must swap execute pointers to enforce the preemption-threshold of a thread coming out of
                               priority inheritance.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 801cc08:	4a0b      	ldr	r2, [pc, #44]	; (801cc38 <_tx_mutex_priority_change+0x170>)
 801cc0a:	687b      	ldr	r3, [r7, #4]
 801cc0c:	6013      	str	r3, [r2, #0]

                            /* Determine if we moved to a lower priority. If so, move the thread to the front of its priority list.  */
                            if (original_priority < new_priority)
 801cc0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801cc10:	683b      	ldr	r3, [r7, #0]
 801cc12:	429a      	cmp	r2, r3
 801cc14:	d205      	bcs.n	801cc22 <_tx_mutex_priority_change+0x15a>
                            {

                                /* Ensure that this thread is placed at the front of the priority list.  */
                                _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr;
 801cc16:	687b      	ldr	r3, [r7, #4]
 801cc18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cc1a:	4909      	ldr	r1, [pc, #36]	; (801cc40 <_tx_mutex_priority_change+0x178>)
 801cc1c:	687a      	ldr	r2, [r7, #4]
 801cc1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 801cc22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801cc24:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801cc26:	68bb      	ldr	r3, [r7, #8]
 801cc28:	f383 8810 	msr	PRIMASK, r3
}
 801cc2c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 801cc2e:	bf00      	nop
 801cc30:	3740      	adds	r7, #64	; 0x40
 801cc32:	46bd      	mov	sp, r7
 801cc34:	bd80      	pop	{r7, pc}
 801cc36:	bf00      	nop
 801cc38:	240050d0 	.word	0x240050d0
 801cc3c:	24005164 	.word	0x24005164
 801cc40:	240050e4 	.word	0x240050e4

0801cc44 <_tx_mutex_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_put(TX_MUTEX *mutex_ptr)
{
 801cc44:	b580      	push	{r7, lr}
 801cc46:	b0a6      	sub	sp, #152	; 0x98
 801cc48:	af00      	add	r7, sp, #0
 801cc4a:	6078      	str	r0, [r7, #4]
TX_THREAD       *suspended_thread;
UINT            inheritance_priority;


    /* Setup status to indicate the processing is not complete.  */
    status =  TX_NOT_DONE;
 801cc4c:	2320      	movs	r3, #32
 801cc4e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801cc52:	f3ef 8310 	mrs	r3, PRIMASK
 801cc56:	65fb      	str	r3, [r7, #92]	; 0x5c
    return(posture);
 801cc58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    int_posture = __get_interrupt_posture();
 801cc5a:	65bb      	str	r3, [r7, #88]	; 0x58
    __asm__ volatile ("CPSID i" : : : "memory");
 801cc5c:	b672      	cpsid	i
    return(int_posture);
 801cc5e:	6dbb      	ldr	r3, [r7, #88]	; 0x58

    /* Disable interrupts to put an instance back to the mutex.  */
    TX_DISABLE
 801cc60:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    /* Log this kernel call.  */
    TX_EL_MUTEX_PUT_INSERT

    /* Determine if this mutex is owned.  */
    if (mutex_ptr -> tx_mutex_ownership_count != ((UINT) 0))
 801cc64:	687b      	ldr	r3, [r7, #4]
 801cc66:	689b      	ldr	r3, [r3, #8]
 801cc68:	2b00      	cmp	r3, #0
 801cc6a:	f000 81ff 	beq.w	801d06c <_tx_mutex_put+0x428>
    {

        /* Pickup the owning thread pointer.  */
        thread_ptr =  mutex_ptr -> tx_mutex_owner;
 801cc6e:	687b      	ldr	r3, [r7, #4]
 801cc70:	68db      	ldr	r3, [r3, #12]
 801cc72:	67fb      	str	r3, [r7, #124]	; 0x7c

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 801cc74:	4ba3      	ldr	r3, [pc, #652]	; (801cf04 <_tx_mutex_put+0x2c0>)
 801cc76:	681b      	ldr	r3, [r3, #0]
 801cc78:	67bb      	str	r3, [r7, #120]	; 0x78

        /* Check to see if the mutex is owned by the calling thread.  */
        if (mutex_ptr -> tx_mutex_owner != current_thread)
 801cc7a:	687b      	ldr	r3, [r7, #4]
 801cc7c:	68db      	ldr	r3, [r3, #12]
 801cc7e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801cc80:	429a      	cmp	r2, r3
 801cc82:	d00d      	beq.n	801cca0 <_tx_mutex_put+0x5c>
        {

            /* Determine if the preempt disable flag is set, indicating that
               the caller is not the application but from ThreadX. In such
               cases, the thread mutex owner does not need to match.  */
            if (_tx_thread_preempt_disable == ((UINT) 0))
 801cc84:	4ba0      	ldr	r3, [pc, #640]	; (801cf08 <_tx_mutex_put+0x2c4>)
 801cc86:	681b      	ldr	r3, [r3, #0]
 801cc88:	2b00      	cmp	r3, #0
 801cc8a:	d109      	bne.n	801cca0 <_tx_mutex_put+0x5c>
 801cc8c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801cc90:	657b      	str	r3, [r7, #84]	; 0x54
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801cc92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801cc94:	f383 8810 	msr	PRIMASK, r3
}
 801cc98:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Caller does not own the mutex.  */
                status =  TX_NOT_OWNED;
 801cc9a:	231e      	movs	r3, #30
 801cc9c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
            }
        }

        /* Determine if we should continue.  */
        if (status == TX_NOT_DONE)
 801cca0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801cca4:	2b20      	cmp	r3, #32
 801cca6:	f040 81eb 	bne.w	801d080 <_tx_mutex_put+0x43c>
        {

            /* Decrement the mutex ownership count.  */
            mutex_ptr -> tx_mutex_ownership_count--;
 801ccaa:	687b      	ldr	r3, [r7, #4]
 801ccac:	689b      	ldr	r3, [r3, #8]
 801ccae:	1e5a      	subs	r2, r3, #1
 801ccb0:	687b      	ldr	r3, [r7, #4]
 801ccb2:	609a      	str	r2, [r3, #8]

            /* Determine if the mutex is still owned by the current thread.  */
            if (mutex_ptr -> tx_mutex_ownership_count != ((UINT) 0))
 801ccb4:	687b      	ldr	r3, [r7, #4]
 801ccb6:	689b      	ldr	r3, [r3, #8]
 801ccb8:	2b00      	cmp	r3, #0
 801ccba:	d00a      	beq.n	801ccd2 <_tx_mutex_put+0x8e>
 801ccbc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801ccc0:	653b      	str	r3, [r7, #80]	; 0x50
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801ccc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ccc4:	f383 8810 	msr	PRIMASK, r3
}
 801ccc8:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Mutex is still owned, just return successful status.  */
                status =  TX_SUCCESS;
 801ccca:	2300      	movs	r3, #0
 801cccc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 801ccd0:	e1d6      	b.n	801d080 <_tx_mutex_put+0x43c>
            }
            else
            {

                /* Check for a NULL thread pointer, which can only happen during initialization.   */
                if (thread_ptr == TX_NULL)
 801ccd2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801ccd4:	2b00      	cmp	r3, #0
 801ccd6:	d10a      	bne.n	801ccee <_tx_mutex_put+0xaa>
 801ccd8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801ccdc:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801ccde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801cce0:	f383 8810 	msr	PRIMASK, r3
}
 801cce4:	bf00      	nop

                    /* Restore interrupts.  */
                    TX_RESTORE

                    /* Mutex is now available, return successful status.  */
                    status =  TX_SUCCESS;
 801cce6:	2300      	movs	r3, #0
 801cce8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 801ccec:	e1c8      	b.n	801d080 <_tx_mutex_put+0x43c>
                    /* The mutex is now available.   */

                    /* Remove this mutex from the owned mutex list.  */

                    /* Decrement the ownership count.  */
                    thread_ptr -> tx_thread_owned_mutex_count--;
 801ccee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801ccf0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801ccf4:	1e5a      	subs	r2, r3, #1
 801ccf6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801ccf8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

                    /* Determine if this mutex was the only one on the list.  */
                    if (thread_ptr -> tx_thread_owned_mutex_count == ((UINT) 0))
 801ccfc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801ccfe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801cd02:	2b00      	cmp	r3, #0
 801cd04:	d104      	bne.n	801cd10 <_tx_mutex_put+0xcc>
                    {

                        /* Yes, the list is empty.  Simply set the head pointer to NULL.  */
                        thread_ptr -> tx_thread_owned_mutex_list =  TX_NULL;
 801cd06:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801cd08:	2200      	movs	r2, #0
 801cd0a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
 801cd0e:	e019      	b.n	801cd44 <_tx_mutex_put+0x100>
                    {

                        /* No, there are more mutexes on the list.  */

                        /* Link-up the neighbors.  */
                        next_mutex =                             mutex_ptr -> tx_mutex_owned_next;
 801cd10:	687b      	ldr	r3, [r7, #4]
 801cd12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cd14:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                        previous_mutex =                         mutex_ptr -> tx_mutex_owned_previous;
 801cd18:	687b      	ldr	r3, [r7, #4]
 801cd1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801cd1c:	677b      	str	r3, [r7, #116]	; 0x74
                        next_mutex -> tx_mutex_owned_previous =  previous_mutex;
 801cd1e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801cd22:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801cd24:	631a      	str	r2, [r3, #48]	; 0x30
                        previous_mutex -> tx_mutex_owned_next =  next_mutex;
 801cd26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801cd28:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 801cd2c:	62da      	str	r2, [r3, #44]	; 0x2c

                        /* See if we have to update the created list head pointer.  */
                        if (thread_ptr -> tx_thread_owned_mutex_list == mutex_ptr)
 801cd2e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801cd30:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801cd34:	687a      	ldr	r2, [r7, #4]
 801cd36:	429a      	cmp	r2, r3
 801cd38:	d104      	bne.n	801cd44 <_tx_mutex_put+0x100>
                        {

                            /* Yes, move the head pointer to the next link. */
                            thread_ptr -> tx_thread_owned_mutex_list =  next_mutex;
 801cd3a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801cd3c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 801cd40:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
                        }
                    }

                    /* Determine if the simple, non-suspension, non-priority inheritance case is present.  */
                    if (mutex_ptr -> tx_mutex_suspension_list == TX_NULL)
 801cd44:	687b      	ldr	r3, [r7, #4]
 801cd46:	699b      	ldr	r3, [r3, #24]
 801cd48:	2b00      	cmp	r3, #0
 801cd4a:	d110      	bne.n	801cd6e <_tx_mutex_put+0x12a>
                    {

                        /* Is this a priority inheritance mutex?  */
                        if (mutex_ptr -> tx_mutex_inherit == TX_FALSE)
 801cd4c:	687b      	ldr	r3, [r7, #4]
 801cd4e:	691b      	ldr	r3, [r3, #16]
 801cd50:	2b00      	cmp	r3, #0
 801cd52:	d10c      	bne.n	801cd6e <_tx_mutex_put+0x12a>
                        {

                            /* Yes, we are done - set the mutex owner to NULL.   */
                            mutex_ptr -> tx_mutex_owner =  TX_NULL;
 801cd54:	687b      	ldr	r3, [r7, #4]
 801cd56:	2200      	movs	r2, #0
 801cd58:	60da      	str	r2, [r3, #12]
 801cd5a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801cd5e:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801cd60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801cd62:	f383 8810 	msr	PRIMASK, r3
}
 801cd66:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Mutex is now available, return successful status.  */
                            status =  TX_SUCCESS;
 801cd68:	2300      	movs	r3, #0
 801cd6a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                        }
                    }

                    /* Determine if the processing is complete.  */
                    if (status == TX_NOT_DONE)
 801cd6e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801cd72:	2b20      	cmp	r3, #32
 801cd74:	f040 8184 	bne.w	801d080 <_tx_mutex_put+0x43c>
                    {

                        /* Initialize original owner and thread priority.  */
                        old_owner =      TX_NULL;
 801cd78:	2300      	movs	r3, #0
 801cd7a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                        old_priority =   thread_ptr -> tx_thread_user_priority;
 801cd7e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801cd80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801cd84:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

                        /* Does this mutex support priority inheritance?  */
                        if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 801cd88:	687b      	ldr	r3, [r7, #4]
 801cd8a:	691b      	ldr	r3, [r3, #16]
 801cd8c:	2b01      	cmp	r3, #1
 801cd8e:	d155      	bne.n	801ce3c <_tx_mutex_put+0x1f8>
                        {

#ifndef TX_NOT_INTERRUPTABLE

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 801cd90:	4b5d      	ldr	r3, [pc, #372]	; (801cf08 <_tx_mutex_put+0x2c4>)
 801cd92:	681b      	ldr	r3, [r3, #0]
 801cd94:	3301      	adds	r3, #1
 801cd96:	4a5c      	ldr	r2, [pc, #368]	; (801cf08 <_tx_mutex_put+0x2c4>)
 801cd98:	6013      	str	r3, [r2, #0]
 801cd9a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801cd9e:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801cda0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801cda2:	f383 8810 	msr	PRIMASK, r3
}
 801cda6:	bf00      	nop
                            /* Restore interrupts.  */
                            TX_RESTORE
#endif

                            /* Default the inheritance priority to disabled.  */
                            inheritance_priority =  ((UINT) TX_MAX_PRIORITIES);
 801cda8:	2320      	movs	r3, #32
 801cdaa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                            /* Search the owned mutexes for this thread to determine the highest priority for this
                               former mutex owner to return to.  */
                            next_mutex =  thread_ptr -> tx_thread_owned_mutex_list;
 801cdae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801cdb0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801cdb4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                            while (next_mutex != TX_NULL)
 801cdb8:	e01f      	b.n	801cdfa <_tx_mutex_put+0x1b6>
                            {

                                /* Does this mutex support priority inheritance?  */
                                if (next_mutex -> tx_mutex_inherit == TX_TRUE)
 801cdba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801cdbe:	691b      	ldr	r3, [r3, #16]
 801cdc0:	2b01      	cmp	r3, #1
 801cdc2:	d10b      	bne.n	801cddc <_tx_mutex_put+0x198>
                                {

                                    /* Determine if highest priority field of the mutex is higher than the priority to
                                       restore.  */
                                    if (next_mutex -> tx_mutex_highest_priority_waiting < inheritance_priority)
 801cdc4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801cdc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cdca:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801cdce:	429a      	cmp	r2, r3
 801cdd0:	d904      	bls.n	801cddc <_tx_mutex_put+0x198>
                                    {

                                        /* Use this priority to return releasing thread to.  */
                                        inheritance_priority =   next_mutex -> tx_mutex_highest_priority_waiting;
 801cdd2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801cdd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cdd8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                                    }
                                }

                                /* Move mutex pointer to the next mutex in the list.  */
                                next_mutex =  next_mutex -> tx_mutex_owned_next;
 801cddc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801cde0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cde2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

                                /* Are we at the end of the list?  */
                                if (next_mutex == thread_ptr -> tx_thread_owned_mutex_list)
 801cde6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801cde8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801cdec:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 801cdf0:	429a      	cmp	r2, r3
 801cdf2:	d102      	bne.n	801cdfa <_tx_mutex_put+0x1b6>
                                {

                                    /* Yes, set the next mutex to NULL.  */
                                    next_mutex =  TX_NULL;
 801cdf4:	2300      	movs	r3, #0
 801cdf6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                            while (next_mutex != TX_NULL)
 801cdfa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801cdfe:	2b00      	cmp	r3, #0
 801ce00:	d1db      	bne.n	801cdba <_tx_mutex_put+0x176>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801ce02:	f3ef 8310 	mrs	r3, PRIMASK
 801ce06:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 801ce08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 801ce0a:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 801ce0c:	b672      	cpsid	i
    return(int_posture);
 801ce0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                            }

#ifndef TX_NOT_INTERRUPTABLE

                            /* Disable interrupts.  */
                            TX_DISABLE
 801ce10:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                            /* Undo the temporarily preemption disable.  */
                            _tx_thread_preempt_disable--;
 801ce14:	4b3c      	ldr	r3, [pc, #240]	; (801cf08 <_tx_mutex_put+0x2c4>)
 801ce16:	681b      	ldr	r3, [r3, #0]
 801ce18:	3b01      	subs	r3, #1
 801ce1a:	4a3b      	ldr	r2, [pc, #236]	; (801cf08 <_tx_mutex_put+0x2c4>)
 801ce1c:	6013      	str	r3, [r2, #0]
#endif

                            /* Set the inherit priority to that of the highest priority thread waiting on the mutex.  */
                            thread_ptr -> tx_thread_inherit_priority =  inheritance_priority;
 801ce1e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801ce20:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801ce24:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

                            /* Determine if the inheritance priority is less than the default old priority.  */
                            if (inheritance_priority < old_priority)
 801ce28:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801ce2c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801ce30:	429a      	cmp	r2, r3
 801ce32:	d203      	bcs.n	801ce3c <_tx_mutex_put+0x1f8>
                            {

                                /* Yes, update the old priority.  */
                                old_priority =  inheritance_priority;
 801ce34:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801ce38:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                            }
                        }

                        /* Determine if priority inheritance is in effect and there are one or more
                           threads suspended on the mutex.  */
                        if (mutex_ptr -> tx_mutex_suspended_count > ((UINT) 1))
 801ce3c:	687b      	ldr	r3, [r7, #4]
 801ce3e:	69db      	ldr	r3, [r3, #28]
 801ce40:	2b01      	cmp	r3, #1
 801ce42:	d920      	bls.n	801ce86 <_tx_mutex_put+0x242>
                        {

                            /* Is priority inheritance in effect?  */
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 801ce44:	687b      	ldr	r3, [r7, #4]
 801ce46:	691b      	ldr	r3, [r3, #16]
 801ce48:	2b01      	cmp	r3, #1
 801ce4a:	d11c      	bne.n	801ce86 <_tx_mutex_put+0x242>
                                   at the front of the suspension list.  */

#ifndef TX_NOT_INTERRUPTABLE

                                /* Temporarily disable preemption.  */
                                _tx_thread_preempt_disable++;
 801ce4c:	4b2e      	ldr	r3, [pc, #184]	; (801cf08 <_tx_mutex_put+0x2c4>)
 801ce4e:	681b      	ldr	r3, [r3, #0]
 801ce50:	3301      	adds	r3, #1
 801ce52:	4a2d      	ldr	r2, [pc, #180]	; (801cf08 <_tx_mutex_put+0x2c4>)
 801ce54:	6013      	str	r3, [r2, #0]
 801ce56:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801ce5a:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801ce5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ce5e:	f383 8810 	msr	PRIMASK, r3
}
 801ce62:	bf00      	nop
                                do
                                {
                                    status =  _tx_mutex_prioritize(mutex_ptr);
                                } while (status != TX_SUCCESS);
#else
                                _tx_mutex_prioritize(mutex_ptr);
 801ce64:	6878      	ldr	r0, [r7, #4]
 801ce66:	f7ff fd7d 	bl	801c964 <_tx_mutex_prioritize>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801ce6a:	f3ef 8310 	mrs	r3, PRIMASK
 801ce6e:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 801ce70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 801ce72:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 801ce74:	b672      	cpsid	i
    return(int_posture);
 801ce76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                TX_MUTEX_PUT_EXTENSION_1

#ifndef TX_NOT_INTERRUPTABLE

                                /* Disable interrupts.  */
                                TX_DISABLE
 801ce78:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                                /* Back off the preemption disable.  */
                                _tx_thread_preempt_disable--;
 801ce7c:	4b22      	ldr	r3, [pc, #136]	; (801cf08 <_tx_mutex_put+0x2c4>)
 801ce7e:	681b      	ldr	r3, [r3, #0]
 801ce80:	3b01      	subs	r3, #1
 801ce82:	4a21      	ldr	r2, [pc, #132]	; (801cf08 <_tx_mutex_put+0x2c4>)
 801ce84:	6013      	str	r3, [r2, #0]
#endif
                            }
                        }

                        /* Now determine if there are any threads still waiting on the mutex.  */
                        if (mutex_ptr -> tx_mutex_suspension_list == TX_NULL)
 801ce86:	687b      	ldr	r3, [r7, #4]
 801ce88:	699b      	ldr	r3, [r3, #24]
 801ce8a:	2b00      	cmp	r3, #0
 801ce8c:	d13e      	bne.n	801cf0c <_tx_mutex_put+0x2c8>
                            /* No, there are no longer any threads waiting on the mutex.  */

#ifndef TX_NOT_INTERRUPTABLE

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 801ce8e:	4b1e      	ldr	r3, [pc, #120]	; (801cf08 <_tx_mutex_put+0x2c4>)
 801ce90:	681b      	ldr	r3, [r3, #0]
 801ce92:	3301      	adds	r3, #1
 801ce94:	4a1c      	ldr	r2, [pc, #112]	; (801cf08 <_tx_mutex_put+0x2c4>)
 801ce96:	6013      	str	r3, [r2, #0]
 801ce98:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801ce9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801ce9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cea0:	f383 8810 	msr	PRIMASK, r3
}
 801cea4:	bf00      	nop
                            /* Mutex is not owned, but it is possible that a thread that
                               caused a priority inheritance to occur is no longer waiting
                               on the mutex.  */

                            /* Setup the highest priority waiting thread.  */
                            mutex_ptr -> tx_mutex_highest_priority_waiting =  (UINT) TX_MAX_PRIORITIES;
 801cea6:	687b      	ldr	r3, [r7, #4]
 801cea8:	2220      	movs	r2, #32
 801ceaa:	629a      	str	r2, [r3, #40]	; 0x28

                            /* Determine if we need to restore priority.  */
                            if ((mutex_ptr -> tx_mutex_owner) -> tx_thread_priority != old_priority)
 801ceac:	687b      	ldr	r3, [r7, #4]
 801ceae:	68db      	ldr	r3, [r3, #12]
 801ceb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ceb2:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 801ceb6:	429a      	cmp	r2, r3
 801ceb8:	d006      	beq.n	801cec8 <_tx_mutex_put+0x284>
                            {

                                /* Yes, restore the priority of thread.  */
                                _tx_mutex_priority_change(mutex_ptr -> tx_mutex_owner, old_priority);
 801ceba:	687b      	ldr	r3, [r7, #4]
 801cebc:	68db      	ldr	r3, [r3, #12]
 801cebe:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 801cec2:	4618      	mov	r0, r3
 801cec4:	f7ff fe00 	bl	801cac8 <_tx_mutex_priority_change>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801cec8:	f3ef 8310 	mrs	r3, PRIMASK
 801cecc:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 801cece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 801ced0:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 801ced2:	b672      	cpsid	i
    return(int_posture);
 801ced4:	6a3b      	ldr	r3, [r7, #32]
                            }

#ifndef TX_NOT_INTERRUPTABLE

                            /* Disable interrupts again.  */
                            TX_DISABLE
 801ced6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                            /* Back off the preemption disable.  */
                            _tx_thread_preempt_disable--;
 801ceda:	4b0b      	ldr	r3, [pc, #44]	; (801cf08 <_tx_mutex_put+0x2c4>)
 801cedc:	681b      	ldr	r3, [r3, #0]
 801cede:	3b01      	subs	r3, #1
 801cee0:	4a09      	ldr	r2, [pc, #36]	; (801cf08 <_tx_mutex_put+0x2c4>)
 801cee2:	6013      	str	r3, [r2, #0]
#endif

                            /* Set the mutex owner to NULL.  */
                            mutex_ptr -> tx_mutex_owner =  TX_NULL;
 801cee4:	687b      	ldr	r3, [r7, #4]
 801cee6:	2200      	movs	r2, #0
 801cee8:	60da      	str	r2, [r3, #12]
 801ceea:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801ceee:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801cef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cef2:	f383 8810 	msr	PRIMASK, r3
}
 801cef6:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Check for preemption.  */
                            _tx_thread_system_preempt_check();
 801cef8:	f000 fda2 	bl	801da40 <_tx_thread_system_preempt_check>

                            /* Set status to success.  */
                            status =  TX_SUCCESS;
 801cefc:	2300      	movs	r3, #0
 801cefe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 801cf02:	e0bd      	b.n	801d080 <_tx_mutex_put+0x43c>
 801cf04:	240050cc 	.word	0x240050cc
 801cf08:	24005164 	.word	0x24005164
                        }
                        else
                        {

                            /* Pickup the thread at the front of the suspension list.  */
                            thread_ptr =  mutex_ptr -> tx_mutex_suspension_list;
 801cf0c:	687b      	ldr	r3, [r7, #4]
 801cf0e:	699b      	ldr	r3, [r3, #24]
 801cf10:	67fb      	str	r3, [r7, #124]	; 0x7c

                            /* Save the previous ownership information, if inheritance is
                               in effect.  */
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 801cf12:	687b      	ldr	r3, [r7, #4]
 801cf14:	691b      	ldr	r3, [r3, #16]
 801cf16:	2b01      	cmp	r3, #1
 801cf18:	d10a      	bne.n	801cf30 <_tx_mutex_put+0x2ec>
                            {

                                /* Remember the old mutex owner.  */
                                old_owner =  mutex_ptr -> tx_mutex_owner;
 801cf1a:	687b      	ldr	r3, [r7, #4]
 801cf1c:	68db      	ldr	r3, [r3, #12]
 801cf1e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

                                /* Setup owner thread priority information.  */
                                mutex_ptr -> tx_mutex_original_priority =   thread_ptr -> tx_thread_priority;
 801cf22:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801cf24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801cf26:	687b      	ldr	r3, [r7, #4]
 801cf28:	615a      	str	r2, [r3, #20]

                                /* Setup the highest priority waiting thread.  */
                                mutex_ptr -> tx_mutex_highest_priority_waiting =  (UINT) TX_MAX_PRIORITIES;
 801cf2a:	687b      	ldr	r3, [r7, #4]
 801cf2c:	2220      	movs	r2, #32
 801cf2e:	629a      	str	r2, [r3, #40]	; 0x28
                            }

                            /* Determine how many mutexes are owned by this thread.  */
                            owned_count =  thread_ptr -> tx_thread_owned_mutex_count;
 801cf30:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801cf32:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801cf36:	673b      	str	r3, [r7, #112]	; 0x70

                            /* Determine if this thread owns any other mutexes that have priority inheritance.  */
                            if (owned_count == ((UINT) 0))
 801cf38:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801cf3a:	2b00      	cmp	r3, #0
 801cf3c:	d10a      	bne.n	801cf54 <_tx_mutex_put+0x310>
                            {

                                /* The owned mutex list is empty.  Add mutex to empty list.  */
                                thread_ptr -> tx_thread_owned_mutex_list =     mutex_ptr;
 801cf3e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801cf40:	687a      	ldr	r2, [r7, #4]
 801cf42:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
                                mutex_ptr -> tx_mutex_owned_next =             mutex_ptr;
 801cf46:	687b      	ldr	r3, [r7, #4]
 801cf48:	687a      	ldr	r2, [r7, #4]
 801cf4a:	62da      	str	r2, [r3, #44]	; 0x2c
                                mutex_ptr -> tx_mutex_owned_previous =         mutex_ptr;
 801cf4c:	687b      	ldr	r3, [r7, #4]
 801cf4e:	687a      	ldr	r2, [r7, #4]
 801cf50:	631a      	str	r2, [r3, #48]	; 0x30
 801cf52:	e016      	b.n	801cf82 <_tx_mutex_put+0x33e>
                            {

                                /* Non-empty list. Link up the mutex.  */

                                /* Pickup tail pointer.  */
                                next_mutex =                            thread_ptr -> tx_thread_owned_mutex_list;
 801cf54:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801cf56:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801cf5a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                                previous_mutex =                        next_mutex -> tx_mutex_owned_previous;
 801cf5e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801cf62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801cf64:	677b      	str	r3, [r7, #116]	; 0x74

                                /* Place the owned mutex in the list.  */
                                next_mutex -> tx_mutex_owned_previous =  mutex_ptr;
 801cf66:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801cf6a:	687a      	ldr	r2, [r7, #4]
 801cf6c:	631a      	str	r2, [r3, #48]	; 0x30
                                previous_mutex -> tx_mutex_owned_next =  mutex_ptr;
 801cf6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801cf70:	687a      	ldr	r2, [r7, #4]
 801cf72:	62da      	str	r2, [r3, #44]	; 0x2c

                                /* Setup this mutex's next and previous created links.  */
                                mutex_ptr -> tx_mutex_owned_previous =   previous_mutex;
 801cf74:	687b      	ldr	r3, [r7, #4]
 801cf76:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801cf78:	631a      	str	r2, [r3, #48]	; 0x30
                                mutex_ptr -> tx_mutex_owned_next =       next_mutex;
 801cf7a:	687b      	ldr	r3, [r7, #4]
 801cf7c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 801cf80:	62da      	str	r2, [r3, #44]	; 0x2c
                            }

                            /* Increment the number of mutexes owned counter.  */
                            thread_ptr -> tx_thread_owned_mutex_count =  owned_count + ((UINT) 1);
 801cf82:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801cf84:	1c5a      	adds	r2, r3, #1
 801cf86:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801cf88:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

                            /* Mark the Mutex as owned and fill in the corresponding information.  */
                            mutex_ptr -> tx_mutex_ownership_count =  (UINT) 1;
 801cf8c:	687b      	ldr	r3, [r7, #4]
 801cf8e:	2201      	movs	r2, #1
 801cf90:	609a      	str	r2, [r3, #8]
                            mutex_ptr -> tx_mutex_owner =            thread_ptr;
 801cf92:	687b      	ldr	r3, [r7, #4]
 801cf94:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801cf96:	60da      	str	r2, [r3, #12]

                            /* Remove the suspended thread from the list.  */

                            /* Decrement the suspension count.  */
                            mutex_ptr -> tx_mutex_suspended_count--;
 801cf98:	687b      	ldr	r3, [r7, #4]
 801cf9a:	69db      	ldr	r3, [r3, #28]
 801cf9c:	1e5a      	subs	r2, r3, #1
 801cf9e:	687b      	ldr	r3, [r7, #4]
 801cfa0:	61da      	str	r2, [r3, #28]

                            /* Pickup the suspended count.  */
                            suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 801cfa2:	687b      	ldr	r3, [r7, #4]
 801cfa4:	69db      	ldr	r3, [r3, #28]
 801cfa6:	66fb      	str	r3, [r7, #108]	; 0x6c

                            /* See if this is the only suspended thread on the list.  */
                            if (suspended_count == TX_NO_SUSPENSIONS)
 801cfa8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801cfaa:	2b00      	cmp	r3, #0
 801cfac:	d103      	bne.n	801cfb6 <_tx_mutex_put+0x372>
                            {

                                /* Yes, the only suspended thread.  */

                                /* Update the head pointer.  */
                                mutex_ptr -> tx_mutex_suspension_list =  TX_NULL;
 801cfae:	687b      	ldr	r3, [r7, #4]
 801cfb0:	2200      	movs	r2, #0
 801cfb2:	619a      	str	r2, [r3, #24]
 801cfb4:	e00e      	b.n	801cfd4 <_tx_mutex_put+0x390>
                            {

                                /* At least one more thread is on the same expiration list.  */

                                /* Update the list head pointer.  */
                                next_thread =                                  thread_ptr -> tx_thread_suspended_next;
 801cfb6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801cfb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801cfba:	66bb      	str	r3, [r7, #104]	; 0x68
                                mutex_ptr -> tx_mutex_suspension_list =        next_thread;
 801cfbc:	687b      	ldr	r3, [r7, #4]
 801cfbe:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801cfc0:	619a      	str	r2, [r3, #24]

                                /* Update the links of the adjacent threads.  */
                                previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 801cfc2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801cfc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801cfc6:	667b      	str	r3, [r7, #100]	; 0x64
                                next_thread -> tx_thread_suspended_previous =  previous_thread;
 801cfc8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801cfca:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801cfcc:	675a      	str	r2, [r3, #116]	; 0x74
                                previous_thread -> tx_thread_suspended_next =  next_thread;
 801cfce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801cfd0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801cfd2:	671a      	str	r2, [r3, #112]	; 0x70
                            }

                            /* Prepare for resumption of the first thread.  */

                            /* Clear cleanup routine to avoid timeout.  */
                            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 801cfd4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801cfd6:	2200      	movs	r2, #0
 801cfd8:	669a      	str	r2, [r3, #104]	; 0x68

                            /* Put return status into the thread control block.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 801cfda:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801cfdc:	2200      	movs	r2, #0
 801cfde:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Restore interrupts.  */
                            TX_RESTORE
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 801cfe2:	4b2a      	ldr	r3, [pc, #168]	; (801d08c <_tx_mutex_put+0x448>)
 801cfe4:	681b      	ldr	r3, [r3, #0]
 801cfe6:	3301      	adds	r3, #1
 801cfe8:	4a28      	ldr	r2, [pc, #160]	; (801d08c <_tx_mutex_put+0x448>)
 801cfea:	6013      	str	r3, [r2, #0]
 801cfec:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801cff0:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801cff2:	69fb      	ldr	r3, [r7, #28]
 801cff4:	f383 8810 	msr	PRIMASK, r3
}
 801cff8:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Determine if priority inheritance is enabled for this mutex.  */
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 801cffa:	687b      	ldr	r3, [r7, #4]
 801cffc:	691b      	ldr	r3, [r3, #16]
 801cffe:	2b01      	cmp	r3, #1
 801d000:	d12d      	bne.n	801d05e <_tx_mutex_put+0x41a>
                            {

                                /* Yes, priority inheritance is requested.  */

                                /* Determine if there are any more threads still suspended on the mutex.  */
                                if (mutex_ptr -> tx_mutex_suspended_count != TX_NO_SUSPENSIONS)
 801d002:	687b      	ldr	r3, [r7, #4]
 801d004:	69db      	ldr	r3, [r3, #28]
 801d006:	2b00      	cmp	r3, #0
 801d008:	d01c      	beq.n	801d044 <_tx_mutex_put+0x400>
                                    do
                                    {
                                        status =  _tx_mutex_prioritize(mutex_ptr);
                                    } while (status != TX_SUCCESS);
#else
                                    _tx_mutex_prioritize(mutex_ptr);
 801d00a:	6878      	ldr	r0, [r7, #4]
 801d00c:	f7ff fcaa 	bl	801c964 <_tx_mutex_prioritize>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801d010:	f3ef 8310 	mrs	r3, PRIMASK
 801d014:	61bb      	str	r3, [r7, #24]
    return(posture);
 801d016:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 801d018:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 801d01a:	b672      	cpsid	i
    return(int_posture);
 801d01c:	697b      	ldr	r3, [r7, #20]

                                    /* Optional processing extension.  */
                                    TX_MUTEX_PUT_EXTENSION_2

                                    /* Disable interrupts.  */
                                    TX_DISABLE
 801d01e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                                    /* Determine if there still are threads suspended for this mutex.  */
                                    suspended_thread =  mutex_ptr -> tx_mutex_suspension_list;
 801d022:	687b      	ldr	r3, [r7, #4]
 801d024:	699b      	ldr	r3, [r3, #24]
 801d026:	663b      	str	r3, [r7, #96]	; 0x60
                                    if (suspended_thread != TX_NULL)
 801d028:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801d02a:	2b00      	cmp	r3, #0
 801d02c:	d003      	beq.n	801d036 <_tx_mutex_put+0x3f2>
                                    {

                                        /* Setup the highest priority thread waiting on this mutex.  */
                                        mutex_ptr -> tx_mutex_highest_priority_waiting =  suspended_thread -> tx_thread_priority;
 801d02e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801d030:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801d032:	687b      	ldr	r3, [r7, #4]
 801d034:	629a      	str	r2, [r3, #40]	; 0x28
 801d036:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801d03a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801d03c:	693b      	ldr	r3, [r7, #16]
 801d03e:	f383 8810 	msr	PRIMASK, r3
}
 801d042:	bf00      	nop

                                /* Restore previous priority needs to be restored after priority
                                   inheritance.  */

                                /* Is the priority different?  */
                                if (old_owner -> tx_thread_priority != old_priority)
 801d044:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801d048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d04a:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 801d04e:	429a      	cmp	r2, r3
 801d050:	d005      	beq.n	801d05e <_tx_mutex_put+0x41a>
                                {

                                    /* Restore the priority of thread.  */
                                    _tx_mutex_priority_change(old_owner, old_priority);
 801d052:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 801d056:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 801d05a:	f7ff fd35 	bl	801cac8 <_tx_mutex_priority_change>
                                }
                            }

                            /* Resume thread.  */
                            _tx_thread_system_resume(thread_ptr);
 801d05e:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 801d060:	f000 fd28 	bl	801dab4 <_tx_thread_system_resume>
#endif

                            /* Return a successful status.  */
                            status =  TX_SUCCESS;
 801d064:	2300      	movs	r3, #0
 801d066:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 801d06a:	e009      	b.n	801d080 <_tx_mutex_put+0x43c>
 801d06c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801d070:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801d072:	68fb      	ldr	r3, [r7, #12]
 801d074:	f383 8810 	msr	PRIMASK, r3
}
 801d078:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Caller does not own the mutex.  */
        status =  TX_NOT_OWNED;
 801d07a:	231e      	movs	r3, #30
 801d07c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    }

    /* Return the completion status.  */
    return(status);
 801d080:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
}
 801d084:	4618      	mov	r0, r3
 801d086:	3798      	adds	r7, #152	; 0x98
 801d088:	46bd      	mov	sp, r7
 801d08a:	bd80      	pop	{r7, pc}
 801d08c:	24005164 	.word	0x24005164

0801d090 <_tx_semaphore_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_semaphore_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 801d090:	b580      	push	{r7, lr}
 801d092:	b08e      	sub	sp, #56	; 0x38
 801d094:	af00      	add	r7, sp, #0
 801d096:	6078      	str	r0, [r7, #4]
 801d098:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801d09a:	f3ef 8310 	mrs	r3, PRIMASK
 801d09e:	623b      	str	r3, [r7, #32]
    return(posture);
 801d0a0:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 801d0a2:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 801d0a4:	b672      	cpsid	i
    return(int_posture);
 801d0a6:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the semaphore.  */
    TX_DISABLE
 801d0a8:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_semaphore_cleanup))
 801d0aa:	687b      	ldr	r3, [r7, #4]
 801d0ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801d0ae:	4a33      	ldr	r2, [pc, #204]	; (801d17c <_tx_semaphore_cleanup+0xec>)
 801d0b0:	4293      	cmp	r3, r2
 801d0b2:	d158      	bne.n	801d166 <_tx_semaphore_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 801d0b4:	687b      	ldr	r3, [r7, #4]
 801d0b6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801d0ba:	683a      	ldr	r2, [r7, #0]
 801d0bc:	429a      	cmp	r2, r3
 801d0be:	d152      	bne.n	801d166 <_tx_semaphore_cleanup+0xd6>
        {

            /* Setup pointer to semaphore control block.  */
            semaphore_ptr =  TX_VOID_TO_SEMAPHORE_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 801d0c0:	687b      	ldr	r3, [r7, #4]
 801d0c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801d0c4:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for a NULL semaphore pointer.  */
            if (semaphore_ptr != TX_NULL)
 801d0c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d0c8:	2b00      	cmp	r3, #0
 801d0ca:	d04c      	beq.n	801d166 <_tx_semaphore_cleanup+0xd6>
            {

                /* Check for a valid semaphore ID.  */
                if (semaphore_ptr -> tx_semaphore_id == TX_SEMAPHORE_ID)
 801d0cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d0ce:	681b      	ldr	r3, [r3, #0]
 801d0d0:	4a2b      	ldr	r2, [pc, #172]	; (801d180 <_tx_semaphore_cleanup+0xf0>)
 801d0d2:	4293      	cmp	r3, r2
 801d0d4:	d147      	bne.n	801d166 <_tx_semaphore_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (semaphore_ptr -> tx_semaphore_suspended_count != TX_NO_SUSPENSIONS)
 801d0d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d0d8:	691b      	ldr	r3, [r3, #16]
 801d0da:	2b00      	cmp	r3, #0
 801d0dc:	d043      	beq.n	801d166 <_tx_semaphore_cleanup+0xd6>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 801d0de:	687b      	ldr	r3, [r7, #4]
 801d0e0:	2200      	movs	r2, #0
 801d0e2:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspended count.  */
                        semaphore_ptr -> tx_semaphore_suspended_count--;
 801d0e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d0e6:	691b      	ldr	r3, [r3, #16]
 801d0e8:	1e5a      	subs	r2, r3, #1
 801d0ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d0ec:	611a      	str	r2, [r3, #16]

                        /* Pickup the suspended count.  */
                        suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 801d0ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d0f0:	691b      	ldr	r3, [r3, #16]
 801d0f2:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 801d0f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d0f6:	2b00      	cmp	r3, #0
 801d0f8:	d103      	bne.n	801d102 <_tx_semaphore_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 801d0fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d0fc:	2200      	movs	r2, #0
 801d0fe:	60da      	str	r2, [r3, #12]
 801d100:	e013      	b.n	801d12a <_tx_semaphore_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 801d102:	687b      	ldr	r3, [r7, #4]
 801d104:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801d106:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 801d108:	687b      	ldr	r3, [r7, #4]
 801d10a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801d10c:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 801d10e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d110:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801d112:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 801d114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d116:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801d118:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (semaphore_ptr -> tx_semaphore_suspension_list == thread_ptr)
 801d11a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d11c:	68db      	ldr	r3, [r3, #12]
 801d11e:	687a      	ldr	r2, [r7, #4]
 801d120:	429a      	cmp	r2, r3
 801d122:	d102      	bne.n	801d12a <_tx_semaphore_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 801d124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d126:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801d128:	60da      	str	r2, [r3, #12]
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_SEMAPHORE_SUSP)
 801d12a:	687b      	ldr	r3, [r7, #4]
 801d12c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d12e:	2b06      	cmp	r3, #6
 801d130:	d119      	bne.n	801d166 <_tx_semaphore_cleanup+0xd6>
                            /* Increment the number of timeouts on this semaphore.  */
                            semaphore_ptr -> tx_semaphore_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_INSTANCE;
 801d132:	687b      	ldr	r3, [r7, #4]
 801d134:	220d      	movs	r2, #13
 801d136:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 801d13a:	4b12      	ldr	r3, [pc, #72]	; (801d184 <_tx_semaphore_cleanup+0xf4>)
 801d13c:	681b      	ldr	r3, [r3, #0]
 801d13e:	3301      	adds	r3, #1
 801d140:	4a10      	ldr	r2, [pc, #64]	; (801d184 <_tx_semaphore_cleanup+0xf4>)
 801d142:	6013      	str	r3, [r2, #0]
 801d144:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d146:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801d148:	693b      	ldr	r3, [r7, #16]
 801d14a:	f383 8810 	msr	PRIMASK, r3
}
 801d14e:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 801d150:	6878      	ldr	r0, [r7, #4]
 801d152:	f000 fcaf 	bl	801dab4 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801d156:	f3ef 8310 	mrs	r3, PRIMASK
 801d15a:	61bb      	str	r3, [r7, #24]
    return(posture);
 801d15c:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 801d15e:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 801d160:	b672      	cpsid	i
    return(int_posture);
 801d162:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 801d164:	637b      	str	r3, [r7, #52]	; 0x34
 801d166:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d168:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801d16a:	68fb      	ldr	r3, [r7, #12]
 801d16c:	f383 8810 	msr	PRIMASK, r3
}
 801d170:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 801d172:	bf00      	nop
 801d174:	3738      	adds	r7, #56	; 0x38
 801d176:	46bd      	mov	sp, r7
 801d178:	bd80      	pop	{r7, pc}
 801d17a:	bf00      	nop
 801d17c:	0801d091 	.word	0x0801d091
 801d180:	53454d41 	.word	0x53454d41
 801d184:	24005164 	.word	0x24005164

0801d188 <_tx_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count)
{
 801d188:	b580      	push	{r7, lr}
 801d18a:	b08a      	sub	sp, #40	; 0x28
 801d18c:	af00      	add	r7, sp, #0
 801d18e:	60f8      	str	r0, [r7, #12]
 801d190:	60b9      	str	r1, [r7, #8]
 801d192:	607a      	str	r2, [r7, #4]
TX_SEMAPHORE    *next_semaphore;
TX_SEMAPHORE    *previous_semaphore;


    /* Initialize semaphore control block to all zeros.  */
    TX_MEMSET(semaphore_ptr, 0, (sizeof(TX_SEMAPHORE)));
 801d194:	221c      	movs	r2, #28
 801d196:	2100      	movs	r1, #0
 801d198:	68f8      	ldr	r0, [r7, #12]
 801d19a:	f002 fb61 	bl	801f860 <memset>

    /* Setup the basic semaphore fields.  */
    semaphore_ptr -> tx_semaphore_name =             name_ptr;
 801d19e:	68fb      	ldr	r3, [r7, #12]
 801d1a0:	68ba      	ldr	r2, [r7, #8]
 801d1a2:	605a      	str	r2, [r3, #4]
    semaphore_ptr -> tx_semaphore_count =            initial_count;
 801d1a4:	68fb      	ldr	r3, [r7, #12]
 801d1a6:	687a      	ldr	r2, [r7, #4]
 801d1a8:	609a      	str	r2, [r3, #8]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801d1aa:	f3ef 8310 	mrs	r3, PRIMASK
 801d1ae:	61bb      	str	r3, [r7, #24]
    return(posture);
 801d1b0:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 801d1b2:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 801d1b4:	b672      	cpsid	i
    return(int_posture);
 801d1b6:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the semaphore on the created list.  */
    TX_DISABLE
 801d1b8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the semaphore ID to make it valid.  */
    semaphore_ptr -> tx_semaphore_id =  TX_SEMAPHORE_ID;
 801d1ba:	68fb      	ldr	r3, [r7, #12]
 801d1bc:	4a18      	ldr	r2, [pc, #96]	; (801d220 <_tx_semaphore_create+0x98>)
 801d1be:	601a      	str	r2, [r3, #0]

    /* Place the semaphore on the list of created semaphores.  First,
       check for an empty list.  */
    if (_tx_semaphore_created_count == TX_EMPTY)
 801d1c0:	4b18      	ldr	r3, [pc, #96]	; (801d224 <_tx_semaphore_create+0x9c>)
 801d1c2:	681b      	ldr	r3, [r3, #0]
 801d1c4:	2b00      	cmp	r3, #0
 801d1c6:	d109      	bne.n	801d1dc <_tx_semaphore_create+0x54>
    {

        /* The created semaphore list is empty.  Add semaphore to empty list.  */
        _tx_semaphore_created_ptr =                       semaphore_ptr;
 801d1c8:	4a17      	ldr	r2, [pc, #92]	; (801d228 <_tx_semaphore_create+0xa0>)
 801d1ca:	68fb      	ldr	r3, [r7, #12]
 801d1cc:	6013      	str	r3, [r2, #0]
        semaphore_ptr -> tx_semaphore_created_next =      semaphore_ptr;
 801d1ce:	68fb      	ldr	r3, [r7, #12]
 801d1d0:	68fa      	ldr	r2, [r7, #12]
 801d1d2:	615a      	str	r2, [r3, #20]
        semaphore_ptr -> tx_semaphore_created_previous =  semaphore_ptr;
 801d1d4:	68fb      	ldr	r3, [r7, #12]
 801d1d6:	68fa      	ldr	r2, [r7, #12]
 801d1d8:	619a      	str	r2, [r3, #24]
 801d1da:	e011      	b.n	801d200 <_tx_semaphore_create+0x78>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_semaphore =      _tx_semaphore_created_ptr;
 801d1dc:	4b12      	ldr	r3, [pc, #72]	; (801d228 <_tx_semaphore_create+0xa0>)
 801d1de:	681b      	ldr	r3, [r3, #0]
 801d1e0:	623b      	str	r3, [r7, #32]
        previous_semaphore =  next_semaphore -> tx_semaphore_created_previous;
 801d1e2:	6a3b      	ldr	r3, [r7, #32]
 801d1e4:	699b      	ldr	r3, [r3, #24]
 801d1e6:	61fb      	str	r3, [r7, #28]

        /* Place the new semaphore in the list.  */
        next_semaphore -> tx_semaphore_created_previous =  semaphore_ptr;
 801d1e8:	6a3b      	ldr	r3, [r7, #32]
 801d1ea:	68fa      	ldr	r2, [r7, #12]
 801d1ec:	619a      	str	r2, [r3, #24]
        previous_semaphore -> tx_semaphore_created_next =  semaphore_ptr;
 801d1ee:	69fb      	ldr	r3, [r7, #28]
 801d1f0:	68fa      	ldr	r2, [r7, #12]
 801d1f2:	615a      	str	r2, [r3, #20]

        /* Setup this semaphore's next and previous created links.  */
        semaphore_ptr -> tx_semaphore_created_previous =  previous_semaphore;
 801d1f4:	68fb      	ldr	r3, [r7, #12]
 801d1f6:	69fa      	ldr	r2, [r7, #28]
 801d1f8:	619a      	str	r2, [r3, #24]
        semaphore_ptr -> tx_semaphore_created_next =      next_semaphore;
 801d1fa:	68fb      	ldr	r3, [r7, #12]
 801d1fc:	6a3a      	ldr	r2, [r7, #32]
 801d1fe:	615a      	str	r2, [r3, #20]
    }

    /* Increment the created count.  */
    _tx_semaphore_created_count++;
 801d200:	4b08      	ldr	r3, [pc, #32]	; (801d224 <_tx_semaphore_create+0x9c>)
 801d202:	681b      	ldr	r3, [r3, #0]
 801d204:	3301      	adds	r3, #1
 801d206:	4a07      	ldr	r2, [pc, #28]	; (801d224 <_tx_semaphore_create+0x9c>)
 801d208:	6013      	str	r3, [r2, #0]
 801d20a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d20c:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801d20e:	693b      	ldr	r3, [r7, #16]
 801d210:	f383 8810 	msr	PRIMASK, r3
}
 801d214:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 801d216:	2300      	movs	r3, #0
}
 801d218:	4618      	mov	r0, r3
 801d21a:	3728      	adds	r7, #40	; 0x28
 801d21c:	46bd      	mov	sp, r7
 801d21e:	bd80      	pop	{r7, pc}
 801d220:	53454d41 	.word	0x53454d41
 801d224:	24005098 	.word	0x24005098
 801d228:	24005094 	.word	0x24005094

0801d22c <_tx_semaphore_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_delete(TX_SEMAPHORE *semaphore_ptr)
{
 801d22c:	b580      	push	{r7, lr}
 801d22e:	b092      	sub	sp, #72	; 0x48
 801d230:	af00      	add	r7, sp, #0
 801d232:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801d234:	f3ef 8310 	mrs	r3, PRIMASK
 801d238:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 801d23a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 801d23c:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 801d23e:	b672      	cpsid	i
    return(int_posture);
 801d240:	6abb      	ldr	r3, [r7, #40]	; 0x28
TX_SEMAPHORE    *next_semaphore;
TX_SEMAPHORE    *previous_semaphore;


    /* Disable interrupts to remove the semaphore from the created list.  */
    TX_DISABLE
 801d242:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_DELETE_INSERT

    /* Clear the semaphore ID to make it invalid.  */
    semaphore_ptr -> tx_semaphore_id =  TX_CLEAR_ID;
 801d244:	687b      	ldr	r3, [r7, #4]
 801d246:	2200      	movs	r2, #0
 801d248:	601a      	str	r2, [r3, #0]

    /* Decrement the number of semaphores.  */
    _tx_semaphore_created_count--;
 801d24a:	4b3d      	ldr	r3, [pc, #244]	; (801d340 <_tx_semaphore_delete+0x114>)
 801d24c:	681b      	ldr	r3, [r3, #0]
 801d24e:	3b01      	subs	r3, #1
 801d250:	4a3b      	ldr	r2, [pc, #236]	; (801d340 <_tx_semaphore_delete+0x114>)
 801d252:	6013      	str	r3, [r2, #0]

    /* See if the semaphore is the only one on the list.  */
    if (_tx_semaphore_created_count == TX_EMPTY)
 801d254:	4b3a      	ldr	r3, [pc, #232]	; (801d340 <_tx_semaphore_delete+0x114>)
 801d256:	681b      	ldr	r3, [r3, #0]
 801d258:	2b00      	cmp	r3, #0
 801d25a:	d103      	bne.n	801d264 <_tx_semaphore_delete+0x38>
    {

        /* Only created semaphore, just set the created list to NULL.  */
        _tx_semaphore_created_ptr =  TX_NULL;
 801d25c:	4b39      	ldr	r3, [pc, #228]	; (801d344 <_tx_semaphore_delete+0x118>)
 801d25e:	2200      	movs	r2, #0
 801d260:	601a      	str	r2, [r3, #0]
 801d262:	e013      	b.n	801d28c <_tx_semaphore_delete+0x60>
    }
    else
    {

        /* Link-up the neighbors.  */
        next_semaphore =                                   semaphore_ptr -> tx_semaphore_created_next;
 801d264:	687b      	ldr	r3, [r7, #4]
 801d266:	695b      	ldr	r3, [r3, #20]
 801d268:	63bb      	str	r3, [r7, #56]	; 0x38
        previous_semaphore =                               semaphore_ptr -> tx_semaphore_created_previous;
 801d26a:	687b      	ldr	r3, [r7, #4]
 801d26c:	699b      	ldr	r3, [r3, #24]
 801d26e:	637b      	str	r3, [r7, #52]	; 0x34
        next_semaphore -> tx_semaphore_created_previous =  previous_semaphore;
 801d270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d272:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801d274:	619a      	str	r2, [r3, #24]
        previous_semaphore -> tx_semaphore_created_next =  next_semaphore;
 801d276:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d278:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801d27a:	615a      	str	r2, [r3, #20]

        /* See if we have to update the created list head pointer.  */
        if (_tx_semaphore_created_ptr == semaphore_ptr)
 801d27c:	4b31      	ldr	r3, [pc, #196]	; (801d344 <_tx_semaphore_delete+0x118>)
 801d27e:	681b      	ldr	r3, [r3, #0]
 801d280:	687a      	ldr	r2, [r7, #4]
 801d282:	429a      	cmp	r2, r3
 801d284:	d102      	bne.n	801d28c <_tx_semaphore_delete+0x60>
        {

            /* Yes, move the head pointer to the next link. */
            _tx_semaphore_created_ptr =  next_semaphore;
 801d286:	4a2f      	ldr	r2, [pc, #188]	; (801d344 <_tx_semaphore_delete+0x118>)
 801d288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d28a:	6013      	str	r3, [r2, #0]
        }
    }

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 801d28c:	4b2e      	ldr	r3, [pc, #184]	; (801d348 <_tx_semaphore_delete+0x11c>)
 801d28e:	681b      	ldr	r3, [r3, #0]
 801d290:	3301      	adds	r3, #1
 801d292:	4a2d      	ldr	r2, [pc, #180]	; (801d348 <_tx_semaphore_delete+0x11c>)
 801d294:	6013      	str	r3, [r2, #0]

    /* Pickup the suspension information.  */
    thread_ptr =                                     semaphore_ptr -> tx_semaphore_suspension_list;
 801d296:	687b      	ldr	r3, [r7, #4]
 801d298:	68db      	ldr	r3, [r3, #12]
 801d29a:	647b      	str	r3, [r7, #68]	; 0x44
    semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 801d29c:	687b      	ldr	r3, [r7, #4]
 801d29e:	2200      	movs	r2, #0
 801d2a0:	60da      	str	r2, [r3, #12]
    suspended_count =                                semaphore_ptr -> tx_semaphore_suspended_count;
 801d2a2:	687b      	ldr	r3, [r7, #4]
 801d2a4:	691b      	ldr	r3, [r3, #16]
 801d2a6:	643b      	str	r3, [r7, #64]	; 0x40
    semaphore_ptr -> tx_semaphore_suspended_count =  TX_NO_SUSPENSIONS;
 801d2a8:	687b      	ldr	r3, [r7, #4]
 801d2aa:	2200      	movs	r2, #0
 801d2ac:	611a      	str	r2, [r3, #16]
 801d2ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d2b0:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801d2b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d2b4:	f383 8810 	msr	PRIMASK, r3
}
 801d2b8:	bf00      	nop
    /* Restore interrupts.  */
    TX_RESTORE

    /* Walk through the semaphore list to resume any and all threads suspended
       on this semaphore.  */
    while (suspended_count != TX_NO_SUSPENSIONS)
 801d2ba:	e024      	b.n	801d306 <_tx_semaphore_delete+0xda>
    {

        /* Decrement the suspension count.  */
        suspended_count--;
 801d2bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801d2be:	3b01      	subs	r3, #1
 801d2c0:	643b      	str	r3, [r7, #64]	; 0x40
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801d2c2:	f3ef 8310 	mrs	r3, PRIMASK
 801d2c6:	61fb      	str	r3, [r7, #28]
    return(posture);
 801d2c8:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 801d2ca:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 801d2cc:	b672      	cpsid	i
    return(int_posture);
 801d2ce:	69bb      	ldr	r3, [r7, #24]

        /* Lockout interrupts.  */
        TX_DISABLE
 801d2d0:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Clear the cleanup pointer, this prevents the timeout from doing
           anything.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 801d2d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801d2d4:	2200      	movs	r2, #0
 801d2d6:	669a      	str	r2, [r3, #104]	; 0x68

        /* Set the return status in the thread to TX_DELETED.  */
        thread_ptr -> tx_thread_suspend_status =  TX_DELETED;
 801d2d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801d2da:	2201      	movs	r2, #1
 801d2dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Move the thread pointer ahead.  */
        next_thread =  thread_ptr -> tx_thread_suspended_next;
 801d2e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801d2e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801d2e4:	633b      	str	r3, [r7, #48]	; 0x30
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption again.  */
        _tx_thread_preempt_disable++;
 801d2e6:	4b18      	ldr	r3, [pc, #96]	; (801d348 <_tx_semaphore_delete+0x11c>)
 801d2e8:	681b      	ldr	r3, [r3, #0]
 801d2ea:	3301      	adds	r3, #1
 801d2ec:	4a16      	ldr	r2, [pc, #88]	; (801d348 <_tx_semaphore_delete+0x11c>)
 801d2ee:	6013      	str	r3, [r2, #0]
 801d2f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d2f2:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801d2f4:	6a3b      	ldr	r3, [r7, #32]
 801d2f6:	f383 8810 	msr	PRIMASK, r3
}
 801d2fa:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume the thread.  */
        _tx_thread_system_resume(thread_ptr);
 801d2fc:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801d2fe:	f000 fbd9 	bl	801dab4 <_tx_thread_system_resume>
#endif

        /* Move to next thread.  */
        thread_ptr =  next_thread;
 801d302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d304:	647b      	str	r3, [r7, #68]	; 0x44
    while (suspended_count != TX_NO_SUSPENSIONS)
 801d306:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801d308:	2b00      	cmp	r3, #0
 801d30a:	d1d7      	bne.n	801d2bc <_tx_semaphore_delete+0x90>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801d30c:	f3ef 8310 	mrs	r3, PRIMASK
 801d310:	613b      	str	r3, [r7, #16]
    return(posture);
 801d312:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 801d314:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 801d316:	b672      	cpsid	i
    return(int_posture);
 801d318:	68fb      	ldr	r3, [r7, #12]

    /* Execute Port-Specific completion processing. If needed, it is typically defined in tx_port.h.  */
    TX_SEMAPHORE_DELETE_PORT_COMPLETION(semaphore_ptr)

    /* Disable interrupts.  */
    TX_DISABLE
 801d31a:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Release previous preempt disable.  */
    _tx_thread_preempt_disable--;
 801d31c:	4b0a      	ldr	r3, [pc, #40]	; (801d348 <_tx_semaphore_delete+0x11c>)
 801d31e:	681b      	ldr	r3, [r3, #0]
 801d320:	3b01      	subs	r3, #1
 801d322:	4a09      	ldr	r2, [pc, #36]	; (801d348 <_tx_semaphore_delete+0x11c>)
 801d324:	6013      	str	r3, [r2, #0]
 801d326:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d328:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801d32a:	697b      	ldr	r3, [r7, #20]
 801d32c:	f383 8810 	msr	PRIMASK, r3
}
 801d330:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 801d332:	f000 fb85 	bl	801da40 <_tx_thread_system_preempt_check>

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 801d336:	2300      	movs	r3, #0
}
 801d338:	4618      	mov	r0, r3
 801d33a:	3748      	adds	r7, #72	; 0x48
 801d33c:	46bd      	mov	sp, r7
 801d33e:	bd80      	pop	{r7, pc}
 801d340:	24005098 	.word	0x24005098
 801d344:	24005094 	.word	0x24005094
 801d348:	24005164 	.word	0x24005164

0801d34c <_tx_semaphore_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 801d34c:	b580      	push	{r7, lr}
 801d34e:	b08e      	sub	sp, #56	; 0x38
 801d350:	af00      	add	r7, sp, #0
 801d352:	6078      	str	r0, [r7, #4]
 801d354:	6039      	str	r1, [r7, #0]
TX_THREAD       *previous_thread;
UINT            status;


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 801d356:	2300      	movs	r3, #0
 801d358:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801d35a:	f3ef 8310 	mrs	r3, PRIMASK
 801d35e:	623b      	str	r3, [r7, #32]
    return(posture);
 801d360:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 801d362:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 801d364:	b672      	cpsid	i
    return(int_posture);
 801d366:	69fb      	ldr	r3, [r7, #28]

    /* Disable interrupts to get an instance from the semaphore.  */
    TX_DISABLE
 801d368:	633b      	str	r3, [r7, #48]	; 0x30

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_GET_INSERT

    /* Determine if there is an instance of the semaphore.  */
    if (semaphore_ptr -> tx_semaphore_count != ((ULONG) 0))
 801d36a:	687b      	ldr	r3, [r7, #4]
 801d36c:	689b      	ldr	r3, [r3, #8]
 801d36e:	2b00      	cmp	r3, #0
 801d370:	d00a      	beq.n	801d388 <_tx_semaphore_get+0x3c>
    {

        /* Decrement the semaphore count.  */
        semaphore_ptr -> tx_semaphore_count--;
 801d372:	687b      	ldr	r3, [r7, #4]
 801d374:	689b      	ldr	r3, [r3, #8]
 801d376:	1e5a      	subs	r2, r3, #1
 801d378:	687b      	ldr	r3, [r7, #4]
 801d37a:	609a      	str	r2, [r3, #8]
 801d37c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d37e:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801d380:	69bb      	ldr	r3, [r7, #24]
 801d382:	f383 8810 	msr	PRIMASK, r3
}
 801d386:	e068      	b.n	801d45a <_tx_semaphore_get+0x10e>
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Determine if the request specifies suspension.  */
    else if (wait_option != TX_NO_WAIT)
 801d388:	683b      	ldr	r3, [r7, #0]
 801d38a:	2b00      	cmp	r3, #0
 801d38c:	d05d      	beq.n	801d44a <_tx_semaphore_get+0xfe>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 801d38e:	4b35      	ldr	r3, [pc, #212]	; (801d464 <_tx_semaphore_get+0x118>)
 801d390:	681b      	ldr	r3, [r3, #0]
 801d392:	2b00      	cmp	r3, #0
 801d394:	d008      	beq.n	801d3a8 <_tx_semaphore_get+0x5c>
 801d396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d398:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801d39a:	697b      	ldr	r3, [r7, #20]
 801d39c:	f383 8810 	msr	PRIMASK, r3
}
 801d3a0:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_NO_INSTANCE;
 801d3a2:	230d      	movs	r3, #13
 801d3a4:	637b      	str	r3, [r7, #52]	; 0x34
 801d3a6:	e058      	b.n	801d45a <_tx_semaphore_get+0x10e>
            /* Increment the number of suspensions on this semaphore.  */
            semaphore_ptr -> tx_semaphore_performance_suspension_count++;
#endif

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 801d3a8:	4b2f      	ldr	r3, [pc, #188]	; (801d468 <_tx_semaphore_get+0x11c>)
 801d3aa:	681b      	ldr	r3, [r3, #0]
 801d3ac:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_semaphore_cleanup);
 801d3ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d3b0:	4a2e      	ldr	r2, [pc, #184]	; (801d46c <_tx_semaphore_get+0x120>)
 801d3b2:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup cleanup information, i.e. this semaphore control
               block.  */
            thread_ptr -> tx_thread_suspend_control_block =  (VOID *) semaphore_ptr;
 801d3b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d3b6:	687a      	ldr	r2, [r7, #4]
 801d3b8:	66da      	str	r2, [r3, #108]	; 0x6c

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 801d3ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d3bc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801d3c0:	1c5a      	adds	r2, r3, #1
 801d3c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d3c4:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

            /* Setup suspension list.  */
            if (semaphore_ptr -> tx_semaphore_suspended_count == TX_NO_SUSPENSIONS)
 801d3c8:	687b      	ldr	r3, [r7, #4]
 801d3ca:	691b      	ldr	r3, [r3, #16]
 801d3cc:	2b00      	cmp	r3, #0
 801d3ce:	d109      	bne.n	801d3e4 <_tx_semaphore_get+0x98>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                semaphore_ptr -> tx_semaphore_suspension_list =         thread_ptr;
 801d3d0:	687b      	ldr	r3, [r7, #4]
 801d3d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801d3d4:	60da      	str	r2, [r3, #12]
                thread_ptr -> tx_thread_suspended_next =                thread_ptr;
 801d3d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d3d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801d3da:	671a      	str	r2, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous =            thread_ptr;
 801d3dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d3de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801d3e0:	675a      	str	r2, [r3, #116]	; 0x74
 801d3e2:	e011      	b.n	801d408 <_tx_semaphore_get+0xbc>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   semaphore_ptr -> tx_semaphore_suspension_list;
 801d3e4:	687b      	ldr	r3, [r7, #4]
 801d3e6:	68db      	ldr	r3, [r3, #12]
 801d3e8:	62bb      	str	r3, [r7, #40]	; 0x28
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 801d3ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d3ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801d3ee:	671a      	str	r2, [r3, #112]	; 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 801d3f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d3f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801d3f4:	627b      	str	r3, [r7, #36]	; 0x24
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 801d3f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d3f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801d3fa:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 801d3fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d3fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801d400:	671a      	str	r2, [r3, #112]	; 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 801d402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d404:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801d406:	675a      	str	r2, [r3, #116]	; 0x74
            }

            /* Increment the number of suspensions.  */
            semaphore_ptr -> tx_semaphore_suspended_count++;
 801d408:	687b      	ldr	r3, [r7, #4]
 801d40a:	691b      	ldr	r3, [r3, #16]
 801d40c:	1c5a      	adds	r2, r3, #1
 801d40e:	687b      	ldr	r3, [r7, #4]
 801d410:	611a      	str	r2, [r3, #16]

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SEMAPHORE_SUSP;
 801d412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d414:	2206      	movs	r2, #6
 801d416:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 801d418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d41a:	2201      	movs	r2, #1
 801d41c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 801d41e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d420:	683a      	ldr	r2, [r7, #0]
 801d422:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 801d424:	4b0f      	ldr	r3, [pc, #60]	; (801d464 <_tx_semaphore_get+0x118>)
 801d426:	681b      	ldr	r3, [r3, #0]
 801d428:	3301      	adds	r3, #1
 801d42a:	4a0e      	ldr	r2, [pc, #56]	; (801d464 <_tx_semaphore_get+0x118>)
 801d42c:	6013      	str	r3, [r2, #0]
 801d42e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d430:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801d432:	693b      	ldr	r3, [r7, #16]
 801d434:	f383 8810 	msr	PRIMASK, r3
}
 801d438:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 801d43a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801d43c:	f000 fc3a 	bl	801dcb4 <_tx_thread_system_suspend>
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 801d440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d442:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801d446:	637b      	str	r3, [r7, #52]	; 0x34
 801d448:	e007      	b.n	801d45a <_tx_semaphore_get+0x10e>
 801d44a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d44c:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801d44e:	68fb      	ldr	r3, [r7, #12]
 801d450:	f383 8810 	msr	PRIMASK, r3
}
 801d454:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Immediate return, return error completion.  */
        status =  TX_NO_INSTANCE;
 801d456:	230d      	movs	r3, #13
 801d458:	637b      	str	r3, [r7, #52]	; 0x34
    }

    /* Return completion status.  */
    return(status);
 801d45a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801d45c:	4618      	mov	r0, r3
 801d45e:	3738      	adds	r7, #56	; 0x38
 801d460:	46bd      	mov	sp, r7
 801d462:	bd80      	pop	{r7, pc}
 801d464:	24005164 	.word	0x24005164
 801d468:	240050cc 	.word	0x240050cc
 801d46c:	0801d091 	.word	0x0801d091

0801d470 <_tx_semaphore_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 801d470:	b580      	push	{r7, lr}
 801d472:	b08c      	sub	sp, #48	; 0x30
 801d474:	af00      	add	r7, sp, #0
 801d476:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801d478:	f3ef 8310 	mrs	r3, PRIMASK
 801d47c:	61bb      	str	r3, [r7, #24]
    return(posture);
 801d47e:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 801d480:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 801d482:	b672      	cpsid	i
    return(int_posture);
 801d484:	697b      	ldr	r3, [r7, #20]
TX_THREAD       *next_thread;
TX_THREAD       *previous_thread;


    /* Disable interrupts to put an instance back to the semaphore.  */
    TX_DISABLE
 801d486:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_PUT_INSERT

    /* Pickup the number of suspended threads.  */
    suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 801d488:	687b      	ldr	r3, [r7, #4]
 801d48a:	691b      	ldr	r3, [r3, #16]
 801d48c:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Determine if there are any threads suspended on the semaphore.  */
    if (suspended_count == TX_NO_SUSPENSIONS)
 801d48e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d490:	2b00      	cmp	r3, #0
 801d492:	d10a      	bne.n	801d4aa <_tx_semaphore_put+0x3a>
    {

        /* Increment the semaphore count.  */
        semaphore_ptr -> tx_semaphore_count++;
 801d494:	687b      	ldr	r3, [r7, #4]
 801d496:	689b      	ldr	r3, [r3, #8]
 801d498:	1c5a      	adds	r2, r3, #1
 801d49a:	687b      	ldr	r3, [r7, #4]
 801d49c:	609a      	str	r2, [r3, #8]
 801d49e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d4a0:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801d4a2:	693b      	ldr	r3, [r7, #16]
 801d4a4:	f383 8810 	msr	PRIMASK, r3
}
 801d4a8:	e033      	b.n	801d512 <_tx_semaphore_put+0xa2>
    {

        /* A thread is suspended on this semaphore.  */

        /* Pickup the pointer to the first suspended thread.  */
        thread_ptr =  semaphore_ptr -> tx_semaphore_suspension_list;
 801d4aa:	687b      	ldr	r3, [r7, #4]
 801d4ac:	68db      	ldr	r3, [r3, #12]
 801d4ae:	627b      	str	r3, [r7, #36]	; 0x24

        /* Remove the suspended thread from the list.  */

        /* See if this is the only suspended thread on the list.  */
        suspended_count--;
 801d4b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d4b2:	3b01      	subs	r3, #1
 801d4b4:	62bb      	str	r3, [r7, #40]	; 0x28
        if (suspended_count == TX_NO_SUSPENSIONS)
 801d4b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d4b8:	2b00      	cmp	r3, #0
 801d4ba:	d103      	bne.n	801d4c4 <_tx_semaphore_put+0x54>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 801d4bc:	687b      	ldr	r3, [r7, #4]
 801d4be:	2200      	movs	r2, #0
 801d4c0:	60da      	str	r2, [r3, #12]
 801d4c2:	e00e      	b.n	801d4e2 <_tx_semaphore_put+0x72>
        {

            /* At least one more thread is on the same expiration list.  */

            /* Update the list head pointer.  */
            next_thread =                                     thread_ptr -> tx_thread_suspended_next;
 801d4c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d4c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801d4c8:	623b      	str	r3, [r7, #32]
            semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 801d4ca:	687b      	ldr	r3, [r7, #4]
 801d4cc:	6a3a      	ldr	r2, [r7, #32]
 801d4ce:	60da      	str	r2, [r3, #12]

            /* Update the links of the adjacent threads.  */
            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 801d4d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d4d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801d4d4:	61fb      	str	r3, [r7, #28]
            next_thread -> tx_thread_suspended_previous =   previous_thread;
 801d4d6:	6a3b      	ldr	r3, [r7, #32]
 801d4d8:	69fa      	ldr	r2, [r7, #28]
 801d4da:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =   next_thread;
 801d4dc:	69fb      	ldr	r3, [r7, #28]
 801d4de:	6a3a      	ldr	r2, [r7, #32]
 801d4e0:	671a      	str	r2, [r3, #112]	; 0x70
        }

        /* Decrement the suspension count.  */
        semaphore_ptr -> tx_semaphore_suspended_count =  suspended_count;
 801d4e2:	687b      	ldr	r3, [r7, #4]
 801d4e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801d4e6:	611a      	str	r2, [r3, #16]

        /* Prepare for resumption of the first thread.  */

        /* Clear cleanup routine to avoid timeout.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 801d4e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d4ea:	2200      	movs	r2, #0
 801d4ec:	669a      	str	r2, [r3, #104]	; 0x68
        /* Pickup the application notify function.  */
        semaphore_put_notify =  semaphore_ptr -> tx_semaphore_put_notify;
#endif

        /* Put return status into the thread control block.  */
        thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 801d4ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d4f0:	2200      	movs	r2, #0
 801d4f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 801d4f6:	4b09      	ldr	r3, [pc, #36]	; (801d51c <_tx_semaphore_put+0xac>)
 801d4f8:	681b      	ldr	r3, [r3, #0]
 801d4fa:	3301      	adds	r3, #1
 801d4fc:	4a07      	ldr	r2, [pc, #28]	; (801d51c <_tx_semaphore_put+0xac>)
 801d4fe:	6013      	str	r3, [r2, #0]
 801d500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d502:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801d504:	68fb      	ldr	r3, [r7, #12]
 801d506:	f383 8810 	msr	PRIMASK, r3
}
 801d50a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume thread.  */
        _tx_thread_system_resume(thread_ptr);
 801d50c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801d50e:	f000 fad1 	bl	801dab4 <_tx_thread_system_resume>
        }
#endif
    }

    /* Return successful completion.  */
    return(TX_SUCCESS);
 801d512:	2300      	movs	r3, #0
}
 801d514:	4618      	mov	r0, r3
 801d516:	3730      	adds	r7, #48	; 0x30
 801d518:	46bd      	mov	sp, r7
 801d51a:	bd80      	pop	{r7, pc}
 801d51c:	24005164 	.word	0x24005164

0801d520 <_tx_thread_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG id), ULONG entry_input,
                            VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold,
                            ULONG time_slice, UINT auto_start)
{
 801d520:	b580      	push	{r7, lr}
 801d522:	b092      	sub	sp, #72	; 0x48
 801d524:	af00      	add	r7, sp, #0
 801d526:	60f8      	str	r0, [r7, #12]
 801d528:	60b9      	str	r1, [r7, #8]
 801d52a:	607a      	str	r2, [r7, #4]
 801d52c:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA

TX_THREAD               *next_thread;
TX_THREAD               *previous_thread;
TX_THREAD               *saved_thread_ptr;
UINT                    saved_threshold =  ((UINT) 0);
 801d52e:	2300      	movs	r3, #0
 801d530:	643b      	str	r3, [r7, #64]	; 0x40
#ifndef TX_DISABLE_STACK_FILLING

    /* Set the thread stack to a pattern prior to creating the initial
       stack frame.  This pattern is used by the stack checking routines
       to see how much has been used.  */
    TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 801d532:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801d534:	21ef      	movs	r1, #239	; 0xef
 801d536:	6d38      	ldr	r0, [r7, #80]	; 0x50
 801d538:	f002 f992 	bl	801f860 <memset>

    /* Prepare the thread control block prior to placing it on the created
       list.  */

    /* Initialize thread control block to all zeros.  */
    TX_MEMSET(thread_ptr, 0, (sizeof(TX_THREAD)));
 801d53c:	22b0      	movs	r2, #176	; 0xb0
 801d53e:	2100      	movs	r1, #0
 801d540:	68f8      	ldr	r0, [r7, #12]
 801d542:	f002 f98d 	bl	801f860 <memset>

    /* Place the supplied parameters into the thread's control block.  */
    thread_ptr -> tx_thread_name =              name_ptr;
 801d546:	68fb      	ldr	r3, [r7, #12]
 801d548:	68ba      	ldr	r2, [r7, #8]
 801d54a:	629a      	str	r2, [r3, #40]	; 0x28
    thread_ptr -> tx_thread_entry =             entry_function;
 801d54c:	68fb      	ldr	r3, [r7, #12]
 801d54e:	687a      	ldr	r2, [r7, #4]
 801d550:	645a      	str	r2, [r3, #68]	; 0x44
    thread_ptr -> tx_thread_entry_parameter =   entry_input;
 801d552:	68fb      	ldr	r3, [r7, #12]
 801d554:	683a      	ldr	r2, [r7, #0]
 801d556:	649a      	str	r2, [r3, #72]	; 0x48
    thread_ptr -> tx_thread_stack_start =       stack_start;
 801d558:	68fb      	ldr	r3, [r7, #12]
 801d55a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801d55c:	60da      	str	r2, [r3, #12]
    thread_ptr -> tx_thread_stack_size =        stack_size;
 801d55e:	68fb      	ldr	r3, [r7, #12]
 801d560:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801d562:	615a      	str	r2, [r3, #20]
    thread_ptr -> tx_thread_priority =          priority;
 801d564:	68fb      	ldr	r3, [r7, #12]
 801d566:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801d568:	62da      	str	r2, [r3, #44]	; 0x2c
    thread_ptr -> tx_thread_user_priority =     priority;
 801d56a:	68fb      	ldr	r3, [r7, #12]
 801d56c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801d56e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    thread_ptr -> tx_thread_time_slice =        time_slice;
 801d572:	68fb      	ldr	r3, [r7, #12]
 801d574:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801d576:	619a      	str	r2, [r3, #24]
    thread_ptr -> tx_thread_new_time_slice =    time_slice;
 801d578:	68fb      	ldr	r3, [r7, #12]
 801d57a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801d57c:	61da      	str	r2, [r3, #28]
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);
 801d57e:	68fb      	ldr	r3, [r7, #12]
 801d580:	2220      	movs	r2, #32
 801d582:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Calculate the end of the thread's stack area.  */
    temp_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 801d586:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d588:	63fb      	str	r3, [r7, #60]	; 0x3c
    temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
 801d58a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d58c:	3b01      	subs	r3, #1
 801d58e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801d590:	4413      	add	r3, r2
 801d592:	63fb      	str	r3, [r7, #60]	; 0x3c
    thread_ptr -> tx_thread_stack_end =         TX_UCHAR_TO_VOID_POINTER_CONVERT(temp_ptr);
 801d594:	68fb      	ldr	r3, [r7, #12]
 801d596:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801d598:	611a      	str	r2, [r3, #16]
    thread_ptr -> tx_thread_preempt_threshold =       preempt_threshold;
    thread_ptr -> tx_thread_user_preempt_threshold =  preempt_threshold;
#else

    /* Preemption-threshold is disabled, determine if preemption-threshold was required.  */
    if (priority != preempt_threshold)
 801d59a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801d59c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801d59e:	429a      	cmp	r2, r3
 801d5a0:	d007      	beq.n	801d5b2 <_tx_thread_create+0x92>
    {

        /* Preemption-threshold specified. Since specific preemption-threshold is not supported,
           disable all preemption.  */
        thread_ptr -> tx_thread_preempt_threshold =       ((UINT) 0);
 801d5a2:	68fb      	ldr	r3, [r7, #12]
 801d5a4:	2200      	movs	r2, #0
 801d5a6:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  ((UINT) 0);
 801d5a8:	68fb      	ldr	r3, [r7, #12]
 801d5aa:	2200      	movs	r2, #0
 801d5ac:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 801d5b0:	e006      	b.n	801d5c0 <_tx_thread_create+0xa0>
    }
    else
    {

        /* Preemption-threshold is not specified, just setup with the priority.  */
        thread_ptr -> tx_thread_preempt_threshold =       priority;
 801d5b2:	68fb      	ldr	r3, [r7, #12]
 801d5b4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801d5b6:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  priority;
 801d5b8:	68fb      	ldr	r3, [r7, #12]
 801d5ba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801d5bc:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    }
#endif

    /* Now fill in the values that are required for thread initialization.  */
    thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 801d5c0:	68fb      	ldr	r3, [r7, #12]
 801d5c2:	2203      	movs	r2, #3
 801d5c4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Setup the necessary fields in the thread timer block.  */
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 801d5c6:	68fb      	ldr	r3, [r7, #12]
 801d5c8:	4a48      	ldr	r2, [pc, #288]	; (801d6ec <_tx_thread_create+0x1cc>)
 801d5ca:	655a      	str	r2, [r3, #84]	; 0x54
 801d5cc:	68fa      	ldr	r2, [r7, #12]
 801d5ce:	68fb      	ldr	r3, [r7, #12]
 801d5d0:	659a      	str	r2, [r3, #88]	; 0x58
    TX_THREAD_CREATE_INTERNAL_EXTENSION(thread_ptr)

    /* Call the target specific stack frame building routine to build the
       thread's initial stack and to setup the actual stack pointer in the
       control block.  */
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 801d5d2:	4947      	ldr	r1, [pc, #284]	; (801d6f0 <_tx_thread_create+0x1d0>)
 801d5d4:	68f8      	ldr	r0, [r7, #12]
 801d5d6:	f7e2 ff23 	bl	8000420 <_tx_thread_stack_build>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801d5da:	f3ef 8310 	mrs	r3, PRIMASK
 801d5de:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 801d5e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 801d5e2:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 801d5e4:	b672      	cpsid	i
    return(int_posture);
 801d5e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /* Setup the highest usage stack pointer.  */
    thread_ptr -> tx_thread_stack_highest_ptr =  thread_ptr -> tx_thread_stack_ptr;
#endif

    /* Prepare to make this thread a member of the created thread list.  */
    TX_DISABLE
 801d5e8:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Load the thread ID field in the thread control block.  */
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;
 801d5ea:	68fb      	ldr	r3, [r7, #12]
 801d5ec:	4a41      	ldr	r2, [pc, #260]	; (801d6f4 <_tx_thread_create+0x1d4>)
 801d5ee:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of created threads.  First,
       check for an empty list.  */
    if (_tx_thread_created_count == TX_EMPTY)
 801d5f0:	4b41      	ldr	r3, [pc, #260]	; (801d6f8 <_tx_thread_create+0x1d8>)
 801d5f2:	681b      	ldr	r3, [r3, #0]
 801d5f4:	2b00      	cmp	r3, #0
 801d5f6:	d10b      	bne.n	801d610 <_tx_thread_create+0xf0>
    {

        /* The created thread list is empty.  Add thread to empty list.  */
        _tx_thread_created_ptr =                    thread_ptr;
 801d5f8:	4a40      	ldr	r2, [pc, #256]	; (801d6fc <_tx_thread_create+0x1dc>)
 801d5fa:	68fb      	ldr	r3, [r7, #12]
 801d5fc:	6013      	str	r3, [r2, #0]
        thread_ptr -> tx_thread_created_next =      thread_ptr;
 801d5fe:	68fb      	ldr	r3, [r7, #12]
 801d600:	68fa      	ldr	r2, [r7, #12]
 801d602:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        thread_ptr -> tx_thread_created_previous =  thread_ptr;
 801d606:	68fb      	ldr	r3, [r7, #12]
 801d608:	68fa      	ldr	r2, [r7, #12]
 801d60a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 801d60e:	e016      	b.n	801d63e <_tx_thread_create+0x11e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_thread =  _tx_thread_created_ptr;
 801d610:	4b3a      	ldr	r3, [pc, #232]	; (801d6fc <_tx_thread_create+0x1dc>)
 801d612:	681b      	ldr	r3, [r3, #0]
 801d614:	637b      	str	r3, [r7, #52]	; 0x34
        previous_thread =  next_thread -> tx_thread_created_previous;
 801d616:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d618:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801d61c:	633b      	str	r3, [r7, #48]	; 0x30

        /* Place the new thread in the list.  */
        next_thread -> tx_thread_created_previous =  thread_ptr;
 801d61e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d620:	68fa      	ldr	r2, [r7, #12]
 801d622:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        previous_thread -> tx_thread_created_next =  thread_ptr;
 801d626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d628:	68fa      	ldr	r2, [r7, #12]
 801d62a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Setup this thread's created links.  */
        thread_ptr -> tx_thread_created_previous =  previous_thread;
 801d62e:	68fb      	ldr	r3, [r7, #12]
 801d630:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801d632:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        thread_ptr -> tx_thread_created_next =      next_thread;
 801d636:	68fb      	ldr	r3, [r7, #12]
 801d638:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801d63a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Increment the thread created count.  */
    _tx_thread_created_count++;
 801d63e:	4b2e      	ldr	r3, [pc, #184]	; (801d6f8 <_tx_thread_create+0x1d8>)
 801d640:	681b      	ldr	r3, [r3, #0]
 801d642:	3301      	adds	r3, #1
 801d644:	4a2c      	ldr	r2, [pc, #176]	; (801d6f8 <_tx_thread_create+0x1d8>)
 801d646:	6013      	str	r3, [r2, #0]
    TX_EL_THREAD_CREATE_INSERT

#ifndef TX_NOT_INTERRUPTABLE

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 801d648:	4b2d      	ldr	r3, [pc, #180]	; (801d700 <_tx_thread_create+0x1e0>)
 801d64a:	681b      	ldr	r3, [r3, #0]
 801d64c:	3301      	adds	r3, #1
 801d64e:	4a2c      	ldr	r2, [pc, #176]	; (801d700 <_tx_thread_create+0x1e0>)
 801d650:	6013      	str	r3, [r2, #0]
#endif

    /* Determine if an automatic start was requested.  If so, call the resume
       thread function and then check for a preemption condition.  */
    if (auto_start == TX_AUTO_START)
 801d652:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801d654:	2b01      	cmp	r3, #1
 801d656:	d129      	bne.n	801d6ac <_tx_thread_create+0x18c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801d658:	f3ef 8305 	mrs	r3, IPSR
 801d65c:	627b      	str	r3, [r7, #36]	; 0x24
    return(ipsr_value);
 801d65e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 801d660:	4b28      	ldr	r3, [pc, #160]	; (801d704 <_tx_thread_create+0x1e4>)
 801d662:	681b      	ldr	r3, [r3, #0]
 801d664:	4313      	orrs	r3, r2
 801d666:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 801d66a:	d30d      	bcc.n	801d688 <_tx_thread_create+0x168>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is
               not required, since interrupts are assumed to be disabled during
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 801d66c:	4b26      	ldr	r3, [pc, #152]	; (801d708 <_tx_thread_create+0x1e8>)
 801d66e:	681b      	ldr	r3, [r3, #0]
 801d670:	647b      	str	r3, [r7, #68]	; 0x44

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 801d672:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801d674:	2b00      	cmp	r3, #0
 801d676:	d009      	beq.n	801d68c <_tx_thread_create+0x16c>
            {

                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 801d678:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801d67a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801d67c:	643b      	str	r3, [r7, #64]	; 0x40

                /* For initialization, temporarily set the preemption-threshold to the
                   priority level to make sure the highest-priority thread runs once
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 801d67e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801d680:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801d682:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801d684:	63da      	str	r2, [r3, #60]	; 0x3c
 801d686:	e001      	b.n	801d68c <_tx_thread_create+0x16c>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 801d688:	2300      	movs	r3, #0
 801d68a:	647b      	str	r3, [r7, #68]	; 0x44
 801d68c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d68e:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801d690:	6a3b      	ldr	r3, [r7, #32]
 801d692:	f383 8810 	msr	PRIMASK, r3
}
 801d696:	bf00      	nop

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Call the resume thread function to make this thread ready.  */
        _tx_thread_system_resume(thread_ptr);
 801d698:	68f8      	ldr	r0, [r7, #12]
 801d69a:	f000 fa0b 	bl	801dab4 <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 801d69e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801d6a0:	2b00      	cmp	r3, #0
 801d6a2:	d01e      	beq.n	801d6e2 <_tx_thread_create+0x1c2>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 801d6a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801d6a6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801d6a8:	63da      	str	r2, [r3, #60]	; 0x3c
 801d6aa:	e01a      	b.n	801d6e2 <_tx_thread_create+0x1c2>
 801d6ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d6ae:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801d6b0:	693b      	ldr	r3, [r7, #16]
 801d6b2:	f383 8810 	msr	PRIMASK, r3
}
 801d6b6:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801d6b8:	f3ef 8310 	mrs	r3, PRIMASK
 801d6bc:	61bb      	str	r3, [r7, #24]
    return(posture);
 801d6be:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 801d6c0:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 801d6c2:	b672      	cpsid	i
    return(int_posture);
 801d6c4:	697b      	ldr	r3, [r7, #20]

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Disable interrupts.  */
        TX_DISABLE
 801d6c6:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Re-enable preemption.  */
        _tx_thread_preempt_disable--;
 801d6c8:	4b0d      	ldr	r3, [pc, #52]	; (801d700 <_tx_thread_create+0x1e0>)
 801d6ca:	681b      	ldr	r3, [r3, #0]
 801d6cc:	3b01      	subs	r3, #1
 801d6ce:	4a0c      	ldr	r2, [pc, #48]	; (801d700 <_tx_thread_create+0x1e0>)
 801d6d0:	6013      	str	r3, [r2, #0]
 801d6d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d6d4:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801d6d6:	69fb      	ldr	r3, [r7, #28]
 801d6d8:	f383 8810 	msr	PRIMASK, r3
}
 801d6dc:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 801d6de:	f000 f9af 	bl	801da40 <_tx_thread_system_preempt_check>
#endif
    }

    /* Always return a success.  */
    return(TX_SUCCESS);
 801d6e2:	2300      	movs	r3, #0
}
 801d6e4:	4618      	mov	r0, r3
 801d6e6:	3748      	adds	r7, #72	; 0x48
 801d6e8:	46bd      	mov	sp, r7
 801d6ea:	bd80      	pop	{r7, pc}
 801d6ec:	0801df89 	.word	0x0801df89
 801d6f0:	0801d8a9 	.word	0x0801d8a9
 801d6f4:	54485244 	.word	0x54485244
 801d6f8:	240050d8 	.word	0x240050d8
 801d6fc:	240050d4 	.word	0x240050d4
 801d700:	24005164 	.word	0x24005164
 801d704:	24000070 	.word	0x24000070
 801d708:	240050d0 	.word	0x240050d0

0801d70c <_tx_thread_identify>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
TX_THREAD  *_tx_thread_identify(VOID)
{
 801d70c:	b480      	push	{r7}
 801d70e:	b087      	sub	sp, #28
 801d710:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801d712:	f3ef 8310 	mrs	r3, PRIMASK
 801d716:	60bb      	str	r3, [r7, #8]
    return(posture);
 801d718:	68bb      	ldr	r3, [r7, #8]
    int_posture = __get_interrupt_posture();
 801d71a:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("CPSID i" : : : "memory");
 801d71c:	b672      	cpsid	i
    return(int_posture);
 801d71e:	687b      	ldr	r3, [r7, #4]

TX_INTERRUPT_SAVE_AREA


    /* Disable interrupts to put the timer on the created list.  */
    TX_DISABLE
 801d720:	617b      	str	r3, [r7, #20]

   /* Log this kernel call.  */
    TX_EL_THREAD_IDENTIFY_INSERT

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 801d722:	4b08      	ldr	r3, [pc, #32]	; (801d744 <_tx_thread_identify+0x38>)
 801d724:	681b      	ldr	r3, [r3, #0]
 801d726:	613b      	str	r3, [r7, #16]
 801d728:	697b      	ldr	r3, [r7, #20]
 801d72a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801d72c:	68fb      	ldr	r3, [r7, #12]
 801d72e:	f383 8810 	msr	PRIMASK, r3
}
 801d732:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return the current thread pointer.  */
    return(thread_ptr);
 801d734:	693b      	ldr	r3, [r7, #16]
}
 801d736:	4618      	mov	r0, r3
 801d738:	371c      	adds	r7, #28
 801d73a:	46bd      	mov	sp, r7
 801d73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d740:	4770      	bx	lr
 801d742:	bf00      	nop
 801d744:	240050cc 	.word	0x240050cc

0801d748 <_tx_thread_initialize>:
/*                                            stack check error handling, */
/*                                            resulting in version 6.1.9  */   
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_initialize(VOID)
{
 801d748:	b580      	push	{r7, lr}
 801d74a:	af00      	add	r7, sp, #0
       respectively.  */

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Set current thread pointer to NULL.  */
    TX_THREAD_SET_CURRENT(TX_NULL)
 801d74c:	4b12      	ldr	r3, [pc, #72]	; (801d798 <_tx_thread_initialize+0x50>)
 801d74e:	2200      	movs	r2, #0
 801d750:	601a      	str	r2, [r3, #0]

    /* Initialize the execute thread pointer to NULL.  */
    _tx_thread_execute_ptr =  TX_NULL;
 801d752:	4b12      	ldr	r3, [pc, #72]	; (801d79c <_tx_thread_initialize+0x54>)
 801d754:	2200      	movs	r2, #0
 801d756:	601a      	str	r2, [r3, #0]
 801d758:	4b11      	ldr	r3, [pc, #68]	; (801d7a0 <_tx_thread_initialize+0x58>)
 801d75a:	2200      	movs	r2, #0
 801d75c:	601a      	str	r2, [r3, #0]
#endif
#endif

    /* Setup the highest priority variable to the max, indicating no thread is currently
       ready.  */
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 801d75e:	4b11      	ldr	r3, [pc, #68]	; (801d7a4 <_tx_thread_initialize+0x5c>)
 801d760:	2220      	movs	r2, #32
 801d762:	601a      	str	r2, [r3, #0]


#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the array of priority head pointers.  */
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 801d764:	2280      	movs	r2, #128	; 0x80
 801d766:	2100      	movs	r1, #0
 801d768:	480f      	ldr	r0, [pc, #60]	; (801d7a8 <_tx_thread_initialize+0x60>)
 801d76a:	f002 f879 	bl	801f860 <memset>

    /* Initialize the head pointer of the created threads list and the
       number of threads created.  */
    _tx_thread_created_ptr =        TX_NULL;
 801d76e:	4b0f      	ldr	r3, [pc, #60]	; (801d7ac <_tx_thread_initialize+0x64>)
 801d770:	2200      	movs	r2, #0
 801d772:	601a      	str	r2, [r3, #0]
    _tx_thread_created_count =      TX_EMPTY;
 801d774:	4b0e      	ldr	r3, [pc, #56]	; (801d7b0 <_tx_thread_initialize+0x68>)
 801d776:	2200      	movs	r2, #0
 801d778:	601a      	str	r2, [r3, #0]

    /* Clear the global preempt disable variable.  */
    _tx_thread_preempt_disable =    ((UINT) 0);
 801d77a:	4b0e      	ldr	r3, [pc, #56]	; (801d7b4 <_tx_thread_initialize+0x6c>)
 801d77c:	2200      	movs	r2, #0
 801d77e:	601a      	str	r2, [r3, #0]

    /* Initialize the thread mutex release function pointer.  */
    _tx_thread_mutex_release =      TX_NULL;
 801d780:	4b0d      	ldr	r3, [pc, #52]	; (801d7b8 <_tx_thread_initialize+0x70>)
 801d782:	2200      	movs	r2, #0
 801d784:	601a      	str	r2, [r3, #0]
#endif
#ifdef TX_DISABLE_REDUNDANT_CLEARING
                            | (((ULONG) 1) << 18)
#endif
#ifdef TX_DISABLE_NOTIFY_CALLBACKS
                            | (((ULONG) 1) << 17)
 801d786:	4b0d      	ldr	r3, [pc, #52]	; (801d7bc <_tx_thread_initialize+0x74>)
 801d788:	681b      	ldr	r3, [r3, #0]
 801d78a:	f043 7385 	orr.w	r3, r3, #17432576	; 0x10a0000
    _tx_build_options =  _tx_build_options 
 801d78e:	4a0b      	ldr	r2, [pc, #44]	; (801d7bc <_tx_thread_initialize+0x74>)
 801d790:	6013      	str	r3, [r2, #0]
#endif
#if TX_PORT_SPECIFIC_BUILD_OPTIONS != 0
                            | TX_PORT_SPECIFIC_BUILD_OPTIONS
#endif
                            ;
}
 801d792:	bf00      	nop
 801d794:	bd80      	pop	{r7, pc}
 801d796:	bf00      	nop
 801d798:	240050cc 	.word	0x240050cc
 801d79c:	240050d0 	.word	0x240050d0
 801d7a0:	240050dc 	.word	0x240050dc
 801d7a4:	240050e0 	.word	0x240050e0
 801d7a8:	240050e4 	.word	0x240050e4
 801d7ac:	240050d4 	.word	0x240050d4
 801d7b0:	240050d8 	.word	0x240050d8
 801d7b4:	24005164 	.word	0x24005164
 801d7b8:	24005168 	.word	0x24005168
 801d7bc:	2400516c 	.word	0x2400516c

0801d7c0 <_tx_thread_preemption_change>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_preemption_change(TX_THREAD *thread_ptr, UINT new_threshold, UINT *old_threshold)
{
 801d7c0:	b580      	push	{r7, lr}
 801d7c2:	b08c      	sub	sp, #48	; 0x30
 801d7c4:	af00      	add	r7, sp, #0
 801d7c6:	60f8      	str	r0, [r7, #12]
 801d7c8:	60b9      	str	r1, [r7, #8]
 801d7ca:	607a      	str	r2, [r7, #4]
#endif
UINT        status;


    /* Default status to success.  */
    status =  TX_SUCCESS;
 801d7cc:	2300      	movs	r3, #0
 801d7ce:	62bb      	str	r3, [r7, #40]	; 0x28
#ifdef TX_DISABLE_PREEMPTION_THRESHOLD

    /* Only allow 0 (disable all preemption) and returning preemption-threshold to the
       current thread priority if preemption-threshold is disabled. All other threshold
       values are converted to 0.  */
    if (thread_ptr -> tx_thread_user_priority != new_threshold)
 801d7d0:	68fb      	ldr	r3, [r7, #12]
 801d7d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801d7d6:	68ba      	ldr	r2, [r7, #8]
 801d7d8:	429a      	cmp	r2, r3
 801d7da:	d004      	beq.n	801d7e6 <_tx_thread_preemption_change+0x26>
    {

        /* Is the new threshold zero?  */
        if (new_threshold != ((UINT) 0))
 801d7dc:	68bb      	ldr	r3, [r7, #8]
 801d7de:	2b00      	cmp	r3, #0
 801d7e0:	d001      	beq.n	801d7e6 <_tx_thread_preemption_change+0x26>
        {

            /* Convert the new threshold to disable all preemption, since preemption-threshold is
               not supported.  */
            new_threshold =  ((UINT) 0);
 801d7e2:	2300      	movs	r3, #0
 801d7e4:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801d7e6:	f3ef 8310 	mrs	r3, PRIMASK
 801d7ea:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 801d7ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 801d7ee:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 801d7f0:	b672      	cpsid	i
    return(int_posture);
 801d7f2:	6a3b      	ldr	r3, [r7, #32]
        }
    }
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 801d7f4:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Log this kernel call.  */
    TX_EL_THREAD_PREEMPTION_CHANGE_INSERT

    /* Determine if the new threshold is greater than the current user priority.  */
    if (new_threshold > thread_ptr -> tx_thread_user_priority)
 801d7f6:	68fb      	ldr	r3, [r7, #12]
 801d7f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801d7fc:	68ba      	ldr	r2, [r7, #8]
 801d7fe:	429a      	cmp	r2, r3
 801d800:	d902      	bls.n	801d808 <_tx_thread_preemption_change+0x48>
    {

        /* Return error.  */
        status =  TX_THRESH_ERROR;
 801d802:	2318      	movs	r3, #24
 801d804:	62bb      	str	r3, [r7, #40]	; 0x28
 801d806:	e03e      	b.n	801d886 <_tx_thread_preemption_change+0xc6>
            }
        }
#endif

        /* Return the user's preemption-threshold.   */
        *old_threshold =  thread_ptr -> tx_thread_user_preempt_threshold;
 801d808:	68fb      	ldr	r3, [r7, #12]
 801d80a:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 801d80e:	687b      	ldr	r3, [r7, #4]
 801d810:	601a      	str	r2, [r3, #0]

        /* Setup the new threshold.  */
        thread_ptr -> tx_thread_user_preempt_threshold =  new_threshold;
 801d812:	68fb      	ldr	r3, [r7, #12]
 801d814:	68ba      	ldr	r2, [r7, #8]
 801d816:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

        /* Determine if the new threshold represents a higher priority than the priority inheritance threshold.  */
        if (new_threshold < thread_ptr -> tx_thread_inherit_priority)
 801d81a:	68fb      	ldr	r3, [r7, #12]
 801d81c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801d820:	68ba      	ldr	r2, [r7, #8]
 801d822:	429a      	cmp	r2, r3
 801d824:	d203      	bcs.n	801d82e <_tx_thread_preemption_change+0x6e>
        {

            /* Update the actual preemption-threshold with the new threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  new_threshold;
 801d826:	68fb      	ldr	r3, [r7, #12]
 801d828:	68ba      	ldr	r2, [r7, #8]
 801d82a:	63da      	str	r2, [r3, #60]	; 0x3c
 801d82c:	e004      	b.n	801d838 <_tx_thread_preemption_change+0x78>
        }
        else
        {

            /* Update the actual preemption-threshold with the priority inheritance.  */
            thread_ptr -> tx_thread_preempt_threshold =  thread_ptr -> tx_thread_inherit_priority;
 801d82e:	68fb      	ldr	r3, [r7, #12]
 801d830:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 801d834:	68fb      	ldr	r3, [r7, #12]
 801d836:	63da      	str	r2, [r3, #60]	; 0x3c
        }

        /* Is the thread priority less than the current highest priority?  If not, no preemption is required.  */
        if (_tx_thread_highest_priority < thread_ptr -> tx_thread_priority)
 801d838:	68fb      	ldr	r3, [r7, #12]
 801d83a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801d83c:	4b17      	ldr	r3, [pc, #92]	; (801d89c <_tx_thread_preemption_change+0xdc>)
 801d83e:	681b      	ldr	r3, [r3, #0]
 801d840:	429a      	cmp	r2, r3
 801d842:	d920      	bls.n	801d886 <_tx_thread_preemption_change+0xc6>
        {

            /* Is the new thread preemption-threshold less than the current highest priority?  If not, no preemption is required.  */
            if (_tx_thread_highest_priority < new_threshold)
 801d844:	4b15      	ldr	r3, [pc, #84]	; (801d89c <_tx_thread_preemption_change+0xdc>)
 801d846:	681b      	ldr	r3, [r3, #0]
 801d848:	68ba      	ldr	r2, [r7, #8]
 801d84a:	429a      	cmp	r2, r3
 801d84c:	d91b      	bls.n	801d886 <_tx_thread_preemption_change+0xc6>
            {

                /* If the current execute pointer is the same at this thread, preemption needs to take place.  */
                if (_tx_thread_execute_ptr == thread_ptr)
 801d84e:	4b14      	ldr	r3, [pc, #80]	; (801d8a0 <_tx_thread_preemption_change+0xe0>)
 801d850:	681b      	ldr	r3, [r3, #0]
 801d852:	68fa      	ldr	r2, [r7, #12]
 801d854:	429a      	cmp	r2, r3
 801d856:	d116      	bne.n	801d886 <_tx_thread_preemption_change+0xc6>
                        _tx_thread_performance_execute_log[_tx_thread_performance__execute_log_index] =  _tx_thread_execute_ptr;
                    }
#endif

                    /* Setup the highest priority thread to execute.  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 801d858:	4b10      	ldr	r3, [pc, #64]	; (801d89c <_tx_thread_preemption_change+0xdc>)
 801d85a:	681b      	ldr	r3, [r3, #0]
 801d85c:	4a11      	ldr	r2, [pc, #68]	; (801d8a4 <_tx_thread_preemption_change+0xe4>)
 801d85e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801d862:	4a0f      	ldr	r2, [pc, #60]	; (801d8a0 <_tx_thread_preemption_change+0xe0>)
 801d864:	6013      	str	r3, [r2, #0]
 801d866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d868:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801d86a:	697b      	ldr	r3, [r7, #20]
 801d86c:	f383 8810 	msr	PRIMASK, r3
}
 801d870:	bf00      	nop

                    /* Restore interrupts.  */
                    TX_RESTORE

                    /* Check for preemption.  */
                    _tx_thread_system_preempt_check();
 801d872:	f000 f8e5 	bl	801da40 <_tx_thread_system_preempt_check>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801d876:	f3ef 8310 	mrs	r3, PRIMASK
 801d87a:	61fb      	str	r3, [r7, #28]
    return(posture);
 801d87c:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 801d87e:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 801d880:	b672      	cpsid	i
    return(int_posture);
 801d882:	69bb      	ldr	r3, [r7, #24]

                    /* Disable interrupts.  */
                    TX_DISABLE
 801d884:	62fb      	str	r3, [r7, #44]	; 0x2c
 801d886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d888:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801d88a:	693b      	ldr	r3, [r7, #16]
 801d88c:	f383 8810 	msr	PRIMASK, r3
}
 801d890:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return completion status.  */
    return(status);
 801d892:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 801d894:	4618      	mov	r0, r3
 801d896:	3730      	adds	r7, #48	; 0x30
 801d898:	46bd      	mov	sp, r7
 801d89a:	bd80      	pop	{r7, pc}
 801d89c:	240050e0 	.word	0x240050e0
 801d8a0:	240050d0 	.word	0x240050d0
 801d8a4:	240050e4 	.word	0x240050e4

0801d8a8 <_tx_thread_shell_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_shell_entry(VOID)
{
 801d8a8:	b580      	push	{r7, lr}
 801d8aa:	b088      	sub	sp, #32
 801d8ac:	af00      	add	r7, sp, #0
VOID            (*entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type);
#endif


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 801d8ae:	4b21      	ldr	r3, [pc, #132]	; (801d934 <_tx_thread_shell_entry+0x8c>)
 801d8b0:	681b      	ldr	r3, [r3, #0]
 801d8b2:	61fb      	str	r3, [r7, #28]
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
    }
#endif

    /* Call current thread's entry function.  */
    (thread_ptr -> tx_thread_entry) (thread_ptr -> tx_thread_entry_parameter);
 801d8b4:	69fb      	ldr	r3, [r7, #28]
 801d8b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801d8b8:	69fa      	ldr	r2, [r7, #28]
 801d8ba:	6c92      	ldr	r2, [r2, #72]	; 0x48
 801d8bc:	4610      	mov	r0, r2
 801d8be:	4798      	blx	r3

    /* Suspend thread with a "completed" state.  */

    /* Determine if the application is using mutexes.  */
    if (_tx_thread_mutex_release != TX_NULL)
 801d8c0:	4b1d      	ldr	r3, [pc, #116]	; (801d938 <_tx_thread_shell_entry+0x90>)
 801d8c2:	681b      	ldr	r3, [r3, #0]
 801d8c4:	2b00      	cmp	r3, #0
 801d8c6:	d003      	beq.n	801d8d0 <_tx_thread_shell_entry+0x28>
    {

        /* Yes, call the mutex release function via a function pointer that
           is setup during mutex initialization.  */
        (_tx_thread_mutex_release)(thread_ptr);
 801d8c8:	4b1b      	ldr	r3, [pc, #108]	; (801d938 <_tx_thread_shell_entry+0x90>)
 801d8ca:	681b      	ldr	r3, [r3, #0]
 801d8cc:	69f8      	ldr	r0, [r7, #28]
 801d8ce:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801d8d0:	f3ef 8310 	mrs	r3, PRIMASK
 801d8d4:	607b      	str	r3, [r7, #4]
    return(posture);
 801d8d6:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 801d8d8:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 801d8da:	b672      	cpsid	i
    return(int_posture);
 801d8dc:	683b      	ldr	r3, [r7, #0]
    }

    /* Lockout interrupts while the thread state is setup.  */
    TX_DISABLE
 801d8de:	61bb      	str	r3, [r7, #24]
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
#endif

    /* Set the status to suspending, in order to indicate the suspension
       is in progress.  */
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 801d8e0:	69fb      	ldr	r3, [r7, #28]
 801d8e2:	2201      	movs	r2, #1
 801d8e4:	631a      	str	r2, [r3, #48]	; 0x30
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Set the suspending flag. */
    thread_ptr -> tx_thread_suspending =  TX_TRUE;
 801d8e6:	69fb      	ldr	r3, [r7, #28]
 801d8e8:	2201      	movs	r2, #1
 801d8ea:	639a      	str	r2, [r3, #56]	; 0x38

    /* Setup for no timeout period.  */
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 801d8ec:	69fb      	ldr	r3, [r7, #28]
 801d8ee:	2200      	movs	r2, #0
 801d8f0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 801d8f2:	4b12      	ldr	r3, [pc, #72]	; (801d93c <_tx_thread_shell_entry+0x94>)
 801d8f4:	681b      	ldr	r3, [r3, #0]
 801d8f6:	3301      	adds	r3, #1
 801d8f8:	4a10      	ldr	r2, [pc, #64]	; (801d93c <_tx_thread_shell_entry+0x94>)
 801d8fa:	6013      	str	r3, [r2, #0]
 801d8fc:	69bb      	ldr	r3, [r7, #24]
 801d8fe:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801d900:	68bb      	ldr	r3, [r7, #8]
 801d902:	f383 8810 	msr	PRIMASK, r3
}
 801d906:	bf00      	nop
    __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 801d908:	f3ef 8314 	mrs	r3, CONTROL
 801d90c:	60fb      	str	r3, [r7, #12]
    return(control_value);
 801d90e:	68fb      	ldr	r3, [r7, #12]

    /* Restore interrupts.  */
    TX_RESTORE

    /* Perform any additional activities for tool or user purpose.  */
    TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 801d910:	617b      	str	r3, [r7, #20]
 801d912:	697b      	ldr	r3, [r7, #20]
 801d914:	f023 0304 	bic.w	r3, r3, #4
 801d918:	617b      	str	r3, [r7, #20]
 801d91a:	697b      	ldr	r3, [r7, #20]
 801d91c:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 801d91e:	693b      	ldr	r3, [r7, #16]
 801d920:	f383 8814 	msr	CONTROL, r3
}
 801d924:	bf00      	nop
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
    }
#endif

    /* Call actual thread suspension routine.  */
    _tx_thread_system_suspend(thread_ptr);
 801d926:	69f8      	ldr	r0, [r7, #28]
 801d928:	f000 f9c4 	bl	801dcb4 <_tx_thread_system_suspend>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 801d92c:	bf00      	nop
 801d92e:	3720      	adds	r7, #32
 801d930:	46bd      	mov	sp, r7
 801d932:	bd80      	pop	{r7, pc}
 801d934:	240050cc 	.word	0x240050cc
 801d938:	24005168 	.word	0x24005168
 801d93c:	24005164 	.word	0x24005164

0801d940 <_tx_thread_sleep>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_sleep(ULONG timer_ticks)
{
 801d940:	b580      	push	{r7, lr}
 801d942:	b08e      	sub	sp, #56	; 0x38
 801d944:	af00      	add	r7, sp, #0
 801d946:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801d948:	f3ef 8310 	mrs	r3, PRIMASK
 801d94c:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 801d94e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 801d950:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 801d952:	b672      	cpsid	i
    return(int_posture);
 801d954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
UINT            status;
TX_THREAD       *thread_ptr;


    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 801d956:	633b      	str	r3, [r7, #48]	; 0x30

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 801d958:	4b35      	ldr	r3, [pc, #212]	; (801da30 <_tx_thread_sleep+0xf0>)
 801d95a:	681b      	ldr	r3, [r3, #0]
 801d95c:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Determine if this is a legal request.  */

    /* Is there a current thread?  */
    if (thread_ptr == TX_NULL)
 801d95e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d960:	2b00      	cmp	r3, #0
 801d962:	d108      	bne.n	801d976 <_tx_thread_sleep+0x36>
 801d964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d966:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801d968:	6a3b      	ldr	r3, [r7, #32]
 801d96a:	f383 8810 	msr	PRIMASK, r3
}
 801d96e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 801d970:	2313      	movs	r3, #19
 801d972:	637b      	str	r3, [r7, #52]	; 0x34
 801d974:	e056      	b.n	801da24 <_tx_thread_sleep+0xe4>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801d976:	f3ef 8305 	mrs	r3, IPSR
 801d97a:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 801d97c:	69fa      	ldr	r2, [r7, #28]
    }

    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 801d97e:	4b2d      	ldr	r3, [pc, #180]	; (801da34 <_tx_thread_sleep+0xf4>)
 801d980:	681b      	ldr	r3, [r3, #0]
 801d982:	4313      	orrs	r3, r2
 801d984:	2b00      	cmp	r3, #0
 801d986:	d008      	beq.n	801d99a <_tx_thread_sleep+0x5a>
 801d988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d98a:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801d98c:	69bb      	ldr	r3, [r7, #24]
 801d98e:	f383 8810 	msr	PRIMASK, r3
}
 801d992:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 801d994:	2313      	movs	r3, #19
 801d996:	637b      	str	r3, [r7, #52]	; 0x34
 801d998:	e044      	b.n	801da24 <_tx_thread_sleep+0xe4>
    }

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Is the caller the system timer thread?  */
    else if (thread_ptr == &_tx_timer_thread)
 801d99a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d99c:	4a26      	ldr	r2, [pc, #152]	; (801da38 <_tx_thread_sleep+0xf8>)
 801d99e:	4293      	cmp	r3, r2
 801d9a0:	d108      	bne.n	801d9b4 <_tx_thread_sleep+0x74>
 801d9a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d9a4:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801d9a6:	697b      	ldr	r3, [r7, #20]
 801d9a8:	f383 8810 	msr	PRIMASK, r3
}
 801d9ac:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 801d9ae:	2313      	movs	r3, #19
 801d9b0:	637b      	str	r3, [r7, #52]	; 0x34
 801d9b2:	e037      	b.n	801da24 <_tx_thread_sleep+0xe4>
    }
#endif

    /* Determine if the requested number of ticks is zero.  */
    else if (timer_ticks == ((ULONG) 0))
 801d9b4:	687b      	ldr	r3, [r7, #4]
 801d9b6:	2b00      	cmp	r3, #0
 801d9b8:	d108      	bne.n	801d9cc <_tx_thread_sleep+0x8c>
 801d9ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d9bc:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801d9be:	693b      	ldr	r3, [r7, #16]
 801d9c0:	f383 8810 	msr	PRIMASK, r3
}
 801d9c4:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Just return with a successful status.  */
        status =  TX_SUCCESS;
 801d9c6:	2300      	movs	r3, #0
 801d9c8:	637b      	str	r3, [r7, #52]	; 0x34
 801d9ca:	e02b      	b.n	801da24 <_tx_thread_sleep+0xe4>
    }
    else
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 801d9cc:	4b1b      	ldr	r3, [pc, #108]	; (801da3c <_tx_thread_sleep+0xfc>)
 801d9ce:	681b      	ldr	r3, [r3, #0]
 801d9d0:	2b00      	cmp	r3, #0
 801d9d2:	d008      	beq.n	801d9e6 <_tx_thread_sleep+0xa6>
 801d9d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d9d6:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801d9d8:	68fb      	ldr	r3, [r7, #12]
 801d9da:	f383 8810 	msr	PRIMASK, r3
}
 801d9de:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_CALLER_ERROR;
 801d9e0:	2313      	movs	r3, #19
 801d9e2:	637b      	str	r3, [r7, #52]	; 0x34
 801d9e4:	e01e      	b.n	801da24 <_tx_thread_sleep+0xe4>
            TX_EL_THREAD_SLEEP_INSERT

            /* Suspend the current thread.  */

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SLEEP;
 801d9e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d9e8:	2204      	movs	r2, #4
 801d9ea:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag. */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 801d9ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d9ee:	2201      	movs	r2, #1
 801d9f0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Initialize the status to successful.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 801d9f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d9f4:	2200      	movs	r2, #0
 801d9f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  timer_ticks;
 801d9fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d9fc:	687a      	ldr	r2, [r7, #4]
 801d9fe:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 801da00:	4b0e      	ldr	r3, [pc, #56]	; (801da3c <_tx_thread_sleep+0xfc>)
 801da02:	681b      	ldr	r3, [r3, #0]
 801da04:	3301      	adds	r3, #1
 801da06:	4a0d      	ldr	r2, [pc, #52]	; (801da3c <_tx_thread_sleep+0xfc>)
 801da08:	6013      	str	r3, [r2, #0]
 801da0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801da0c:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801da0e:	68bb      	ldr	r3, [r7, #8]
 801da10:	f383 8810 	msr	PRIMASK, r3
}
 801da14:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 801da16:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801da18:	f000 f94c 	bl	801dcb4 <_tx_thread_system_suspend>
#endif

            /* Return status to the caller.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 801da1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801da1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801da22:	637b      	str	r3, [r7, #52]	; 0x34
        }
    }

    /* Return completion status.  */
    return(status);
 801da24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801da26:	4618      	mov	r0, r3
 801da28:	3738      	adds	r7, #56	; 0x38
 801da2a:	46bd      	mov	sp, r7
 801da2c:	bd80      	pop	{r7, pc}
 801da2e:	bf00      	nop
 801da30:	240050cc 	.word	0x240050cc
 801da34:	24000070 	.word	0x24000070
 801da38:	24005214 	.word	0x24005214
 801da3c:	24005164 	.word	0x24005164

0801da40 <_tx_thread_system_preempt_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_preempt_check(VOID)
{
 801da40:	b480      	push	{r7}
 801da42:	b089      	sub	sp, #36	; 0x24
 801da44:	af00      	add	r7, sp, #0
TX_THREAD       *current_thread;
TX_THREAD       *thread_ptr;


    /* Combine the system state and preempt disable flags into one for comparison.  */
    TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 801da46:	4b17      	ldr	r3, [pc, #92]	; (801daa4 <_tx_thread_system_preempt_check+0x64>)
 801da48:	681b      	ldr	r3, [r3, #0]
 801da4a:	61fb      	str	r3, [r7, #28]

    /* Determine if we are in a system state (ISR or Initialization) or internal preemption is disabled.  */
    if (combined_flags == ((ULONG) 0))
 801da4c:	69fb      	ldr	r3, [r7, #28]
 801da4e:	2b00      	cmp	r3, #0
 801da50:	d121      	bne.n	801da96 <_tx_thread_system_preempt_check+0x56>
    {

        /* No, at thread execution level so continue checking for preemption.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 801da52:	4b15      	ldr	r3, [pc, #84]	; (801daa8 <_tx_thread_system_preempt_check+0x68>)
 801da54:	681b      	ldr	r3, [r3, #0]
 801da56:	61bb      	str	r3, [r7, #24]

        /* Pickup the next execute pointer.  */
        thread_ptr =  _tx_thread_execute_ptr;
 801da58:	4b14      	ldr	r3, [pc, #80]	; (801daac <_tx_thread_system_preempt_check+0x6c>)
 801da5a:	681b      	ldr	r3, [r3, #0]
 801da5c:	617b      	str	r3, [r7, #20]

        /* Determine if preemption should take place.  */
        if (current_thread != thread_ptr)
 801da5e:	69ba      	ldr	r2, [r7, #24]
 801da60:	697b      	ldr	r3, [r7, #20]
 801da62:	429a      	cmp	r2, r3
 801da64:	d017      	beq.n	801da96 <_tx_thread_system_preempt_check+0x56>
__attribute__( ( always_inline ) ) static inline void _tx_thread_system_return_inline(void)
{
unsigned int interrupt_save;

    /* Set PendSV to invoke ThreadX scheduler.  */
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 801da66:	4b12      	ldr	r3, [pc, #72]	; (801dab0 <_tx_thread_system_preempt_check+0x70>)
 801da68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801da6c:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801da6e:	f3ef 8305 	mrs	r3, IPSR
 801da72:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 801da74:	693b      	ldr	r3, [r7, #16]
    if (__get_ipsr_value() == 0)
 801da76:	2b00      	cmp	r3, #0
 801da78:	d10c      	bne.n	801da94 <_tx_thread_system_preempt_check+0x54>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801da7a:	f3ef 8310 	mrs	r3, PRIMASK
 801da7e:	60fb      	str	r3, [r7, #12]
    return(posture);
 801da80:	68fb      	ldr	r3, [r7, #12]
    {
        interrupt_save = __get_interrupt_posture();
 801da82:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSIE  i": : : "memory");
 801da84:	b662      	cpsie	i
}
 801da86:	bf00      	nop
 801da88:	68bb      	ldr	r3, [r7, #8]
 801da8a:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801da8c:	687b      	ldr	r3, [r7, #4]
 801da8e:	f383 8810 	msr	PRIMASK, r3
}
 801da92:	bf00      	nop
#else
        __enable_interrupts();
#endif
        __restore_interrupt(interrupt_save);
    }
}
 801da94:	bf00      	nop

            /* Return to the system so the higher priority thread can be scheduled.  */
            _tx_thread_system_return();
        }
    }
}
 801da96:	bf00      	nop
 801da98:	3724      	adds	r7, #36	; 0x24
 801da9a:	46bd      	mov	sp, r7
 801da9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801daa0:	4770      	bx	lr
 801daa2:	bf00      	nop
 801daa4:	24005164 	.word	0x24005164
 801daa8:	240050cc 	.word	0x240050cc
 801daac:	240050d0 	.word	0x240050d0
 801dab0:	e000ed04 	.word	0xe000ed04

0801dab4 <_tx_thread_system_resume>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_resume(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 801dab4:	b580      	push	{r7, lr}
 801dab6:	b096      	sub	sp, #88	; 0x58
 801dab8:	af00      	add	r7, sp, #0
 801daba:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801dabc:	f3ef 8310 	mrs	r3, PRIMASK
 801dac0:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 801dac2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 801dac4:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 801dac6:	b672      	cpsid	i
    return(int_posture);
 801dac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 801daca:	657b      	str	r3, [r7, #84]	; 0x54

#ifndef TX_NO_TIMER

    /* Deactivate the timeout timer if necessary.  */
    if (thread_ptr -> tx_thread_timer.tx_timer_internal_list_head != TX_NULL)
 801dacc:	687b      	ldr	r3, [r7, #4]
 801dace:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801dad0:	2b00      	cmp	r3, #0
 801dad2:	d005      	beq.n	801dae0 <_tx_thread_system_resume+0x2c>
    {

        /* Deactivate the thread's timeout timer.  */
        _tx_timer_system_deactivate(&(thread_ptr -> tx_thread_timer));
 801dad4:	687b      	ldr	r3, [r7, #4]
 801dad6:	334c      	adds	r3, #76	; 0x4c
 801dad8:	4618      	mov	r0, r3
 801dada:	f000 fc13 	bl	801e304 <_tx_timer_system_deactivate>
 801dade:	e002      	b.n	801dae6 <_tx_thread_system_resume+0x32>
    }
    else
    {

        /* Clear the remaining time to ensure timer doesn't get activated.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 801dae0:	687b      	ldr	r3, [r7, #4]
 801dae2:	2200      	movs	r2, #0
 801dae4:	64da      	str	r2, [r3, #76]	; 0x4c
        time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 801dae6:	4b6c      	ldr	r3, [pc, #432]	; (801dc98 <_tx_thread_system_resume+0x1e4>)
 801dae8:	681b      	ldr	r3, [r3, #0]
 801daea:	3b01      	subs	r3, #1
 801daec:	4a6a      	ldr	r2, [pc, #424]	; (801dc98 <_tx_thread_system_resume+0x1e4>)
 801daee:	6013      	str	r3, [r2, #0]

    /* Determine if the thread is in the process of suspending.  If so, the thread
       control block is already on the linked list so nothing needs to be done.  */
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 801daf0:	687b      	ldr	r3, [r7, #4]
 801daf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801daf4:	2b00      	cmp	r3, #0
 801daf6:	f040 8083 	bne.w	801dc00 <_tx_thread_system_resume+0x14c>
    {

        /* Thread is not in the process of suspending. Now check to make sure the thread
           has not already been resumed.  */
        if (thread_ptr -> tx_thread_state != TX_READY)
 801dafa:	687b      	ldr	r3, [r7, #4]
 801dafc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801dafe:	2b00      	cmp	r3, #0
 801db00:	f000 8097 	beq.w	801dc32 <_tx_thread_system_resume+0x17e>
        {

            /* No, now check to see if the delayed suspension flag is set.  */
            if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 801db04:	687b      	ldr	r3, [r7, #4]
 801db06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801db08:	2b00      	cmp	r3, #0
 801db0a:	d172      	bne.n	801dbf2 <_tx_thread_system_resume+0x13e>
                /* Resume the thread!  */

                /* Make this thread ready.  */

                /* Change the state to ready.  */
                thread_ptr -> tx_thread_state =  TX_READY;
 801db0c:	687b      	ldr	r3, [r7, #4]
 801db0e:	2200      	movs	r2, #0
 801db10:	631a      	str	r2, [r3, #48]	; 0x30

                /* Pickup priority of thread.  */
                priority =  thread_ptr -> tx_thread_priority;
 801db12:	687b      	ldr	r3, [r7, #4]
 801db14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801db16:	653b      	str	r3, [r7, #80]	; 0x50
                thread_ptr -> tx_thread_performance_resume_count++;
#endif

                /* Determine if there are other threads at this priority that are
                   ready.  */
                head_ptr =  _tx_thread_priority_list[priority];
 801db18:	4a60      	ldr	r2, [pc, #384]	; (801dc9c <_tx_thread_system_resume+0x1e8>)
 801db1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801db1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801db20:	64fb      	str	r3, [r7, #76]	; 0x4c
                if (head_ptr == TX_NULL)
 801db22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801db24:	2b00      	cmp	r3, #0
 801db26:	d154      	bne.n	801dbd2 <_tx_thread_system_resume+0x11e>
                {

                    /* First thread at this priority ready.  Add to the front of the list.  */
                    _tx_thread_priority_list[priority] =       thread_ptr;
 801db28:	495c      	ldr	r1, [pc, #368]	; (801dc9c <_tx_thread_system_resume+0x1e8>)
 801db2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801db2c:	687a      	ldr	r2, [r7, #4]
 801db2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    thread_ptr -> tx_thread_ready_next =       thread_ptr;
 801db32:	687b      	ldr	r3, [r7, #4]
 801db34:	687a      	ldr	r2, [r7, #4]
 801db36:	621a      	str	r2, [r3, #32]
                    thread_ptr -> tx_thread_ready_previous =   thread_ptr;
 801db38:	687b      	ldr	r3, [r7, #4]
 801db3a:	687a      	ldr	r2, [r7, #4]
 801db3c:	625a      	str	r2, [r3, #36]	; 0x24
                    TX_DIV32_BIT_SET(priority, priority_bit)
                    _tx_thread_priority_map_active =  _tx_thread_priority_map_active | priority_bit;
#endif

                    /* Or in the thread's priority bit.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 801db3e:	2201      	movs	r2, #1
 801db40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801db42:	fa02 f303 	lsl.w	r3, r2, r3
 801db46:	647b      	str	r3, [r7, #68]	; 0x44
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 801db48:	4b55      	ldr	r3, [pc, #340]	; (801dca0 <_tx_thread_system_resume+0x1ec>)
 801db4a:	681a      	ldr	r2, [r3, #0]
 801db4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801db4e:	4313      	orrs	r3, r2
 801db50:	4a53      	ldr	r2, [pc, #332]	; (801dca0 <_tx_thread_system_resume+0x1ec>)
 801db52:	6013      	str	r3, [r2, #0]

                    /* Determine if this newly ready thread is the highest priority.  */
                    if (priority < _tx_thread_highest_priority)
 801db54:	4b53      	ldr	r3, [pc, #332]	; (801dca4 <_tx_thread_system_resume+0x1f0>)
 801db56:	681b      	ldr	r3, [r3, #0]
 801db58:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801db5a:	429a      	cmp	r2, r3
 801db5c:	d269      	bcs.n	801dc32 <_tx_thread_system_resume+0x17e>
                    {

                        /* A new highest priority thread is present. */

                        /* Update the highest priority variable.  */
                        _tx_thread_highest_priority =  priority;
 801db5e:	4a51      	ldr	r2, [pc, #324]	; (801dca4 <_tx_thread_system_resume+0x1f0>)
 801db60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801db62:	6013      	str	r3, [r2, #0]

                        /* Pickup the execute pointer. Since it is going to be referenced multiple
                           times, it is placed in a local variable.  */
                        execute_ptr =  _tx_thread_execute_ptr;
 801db64:	4b50      	ldr	r3, [pc, #320]	; (801dca8 <_tx_thread_system_resume+0x1f4>)
 801db66:	681b      	ldr	r3, [r3, #0]
 801db68:	643b      	str	r3, [r7, #64]	; 0x40

                        /* Determine if no thread is currently executing.  */
                        if (execute_ptr == TX_NULL)
 801db6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801db6c:	2b00      	cmp	r3, #0
 801db6e:	d103      	bne.n	801db78 <_tx_thread_system_resume+0xc4>
                        {

                            /* Simply setup the execute pointer.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 801db70:	4a4d      	ldr	r2, [pc, #308]	; (801dca8 <_tx_thread_system_resume+0x1f4>)
 801db72:	687b      	ldr	r3, [r7, #4]
 801db74:	6013      	str	r3, [r2, #0]
 801db76:	e05c      	b.n	801dc32 <_tx_thread_system_resume+0x17e>
                        {

                            /* Another thread has been scheduled for execution.  */

                            /* Check to see if this is a higher priority thread and determine if preemption is allowed.  */
                            if (priority < execute_ptr -> tx_thread_preempt_threshold)
 801db78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801db7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801db7c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801db7e:	429a      	cmp	r2, r3
 801db80:	d257      	bcs.n	801dc32 <_tx_thread_system_resume+0x17e>
                                execute_ptr -> tx_thread_performance_last_preempting_thread =  thread_ptr;

#endif

                                /* Yes, modify the execute thread pointer.  */
                                _tx_thread_execute_ptr =  thread_ptr;
 801db82:	4a49      	ldr	r2, [pc, #292]	; (801dca8 <_tx_thread_system_resume+0x1f4>)
 801db84:	687b      	ldr	r3, [r7, #4]
 801db86:	6013      	str	r3, [r2, #0]
 801db88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801db8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801db8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801db8e:	f383 8810 	msr	PRIMASK, r3
}
 801db92:	bf00      	nop
                                TX_THREAD_STACK_CHECK(thread_ptr)
#endif

                                /* Now determine if preemption should take place. This is only possible if the current thread pointer is
                                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 801db94:	4b40      	ldr	r3, [pc, #256]	; (801dc98 <_tx_thread_system_resume+0x1e4>)
 801db96:	681b      	ldr	r3, [r3, #0]
 801db98:	63fb      	str	r3, [r7, #60]	; 0x3c
                                if (combined_flags == ((ULONG) 0))
 801db9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801db9c:	2b00      	cmp	r3, #0
 801db9e:	d174      	bne.n	801dc8a <_tx_thread_system_resume+0x1d6>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 801dba0:	4b42      	ldr	r3, [pc, #264]	; (801dcac <_tx_thread_system_resume+0x1f8>)
 801dba2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801dba6:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801dba8:	f3ef 8305 	mrs	r3, IPSR
 801dbac:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 801dbae:	6abb      	ldr	r3, [r7, #40]	; 0x28
    if (__get_ipsr_value() == 0)
 801dbb0:	2b00      	cmp	r3, #0
 801dbb2:	d10c      	bne.n	801dbce <_tx_thread_system_resume+0x11a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801dbb4:	f3ef 8310 	mrs	r3, PRIMASK
 801dbb8:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 801dbba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        interrupt_save = __get_interrupt_posture();
 801dbbc:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSIE  i": : : "memory");
 801dbbe:	b662      	cpsie	i
}
 801dbc0:	bf00      	nop
 801dbc2:	6a3b      	ldr	r3, [r7, #32]
 801dbc4:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801dbc6:	69fb      	ldr	r3, [r7, #28]
 801dbc8:	f383 8810 	msr	PRIMASK, r3
}
 801dbcc:	bf00      	nop
}
 801dbce:	bf00      	nop
                                    /* Preemption is needed - return to the system!  */
                                    _tx_thread_system_return();
                                }

                                /* Return in-line when MISRA is not enabled.  */
                                return;
 801dbd0:	e05b      	b.n	801dc8a <_tx_thread_system_resume+0x1d6>
                {

                    /* No, there are other threads at this priority already ready.  */

                    /* Just add this thread to the priority list.  */
                    tail_ptr =                                 head_ptr -> tx_thread_ready_previous;
 801dbd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801dbd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801dbd6:	64bb      	str	r3, [r7, #72]	; 0x48
                    tail_ptr -> tx_thread_ready_next =         thread_ptr;
 801dbd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801dbda:	687a      	ldr	r2, [r7, #4]
 801dbdc:	621a      	str	r2, [r3, #32]
                    head_ptr -> tx_thread_ready_previous =     thread_ptr;
 801dbde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801dbe0:	687a      	ldr	r2, [r7, #4]
 801dbe2:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_previous =   tail_ptr;
 801dbe4:	687b      	ldr	r3, [r7, #4]
 801dbe6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801dbe8:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_next =       head_ptr;
 801dbea:	687b      	ldr	r3, [r7, #4]
 801dbec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801dbee:	621a      	str	r2, [r3, #32]
 801dbf0:	e01f      	b.n	801dc32 <_tx_thread_system_resume+0x17e>
            /* Else, delayed suspend flag was set.  */
            else
            {

                /* Clear the delayed suspend flag and change the state.  */
                thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 801dbf2:	687b      	ldr	r3, [r7, #4]
 801dbf4:	2200      	movs	r2, #0
 801dbf6:	635a      	str	r2, [r3, #52]	; 0x34
                thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 801dbf8:	687b      	ldr	r3, [r7, #4]
 801dbfa:	2203      	movs	r2, #3
 801dbfc:	631a      	str	r2, [r3, #48]	; 0x30
 801dbfe:	e018      	b.n	801dc32 <_tx_thread_system_resume+0x17e>
        /* A resumption occurred in the middle of a previous thread suspension.  */

        /* Make sure the type of suspension under way is not a terminate or
           thread completion.  In either of these cases, do not void the
           interrupted suspension processing.  */
        if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 801dc00:	687b      	ldr	r3, [r7, #4]
 801dc02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801dc04:	2b01      	cmp	r3, #1
 801dc06:	d014      	beq.n	801dc32 <_tx_thread_system_resume+0x17e>
        {

            /* Make sure the thread isn't terminated.  */
            if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 801dc08:	687b      	ldr	r3, [r7, #4]
 801dc0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801dc0c:	2b02      	cmp	r3, #2
 801dc0e:	d010      	beq.n	801dc32 <_tx_thread_system_resume+0x17e>
            {

                /* No, now check to see if the delayed suspension flag is set.  */
                if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 801dc10:	687b      	ldr	r3, [r7, #4]
 801dc12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801dc14:	2b00      	cmp	r3, #0
 801dc16:	d106      	bne.n	801dc26 <_tx_thread_system_resume+0x172>
                {

                    /* Clear the suspending flag.  */
                    thread_ptr -> tx_thread_suspending =   TX_FALSE;
 801dc18:	687b      	ldr	r3, [r7, #4]
 801dc1a:	2200      	movs	r2, #0
 801dc1c:	639a      	str	r2, [r3, #56]	; 0x38

                    /* Restore the state to ready.  */
                    thread_ptr -> tx_thread_state =        TX_READY;
 801dc1e:	687b      	ldr	r3, [r7, #4]
 801dc20:	2200      	movs	r2, #0
 801dc22:	631a      	str	r2, [r3, #48]	; 0x30
 801dc24:	e005      	b.n	801dc32 <_tx_thread_system_resume+0x17e>
                }
                else
                {

                    /* Clear the delayed suspend flag and change the state.  */
                    thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 801dc26:	687b      	ldr	r3, [r7, #4]
 801dc28:	2200      	movs	r2, #0
 801dc2a:	635a      	str	r2, [r3, #52]	; 0x34
                    thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 801dc2c:	687b      	ldr	r3, [r7, #4]
 801dc2e:	2203      	movs	r2, #3
 801dc30:	631a      	str	r2, [r3, #48]	; 0x30
        }
    }
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 801dc32:	4b1f      	ldr	r3, [pc, #124]	; (801dcb0 <_tx_thread_system_resume+0x1fc>)
 801dc34:	681b      	ldr	r3, [r3, #0]
 801dc36:	63bb      	str	r3, [r7, #56]	; 0x38
 801dc38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801dc3a:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801dc3c:	69bb      	ldr	r3, [r7, #24]
 801dc3e:	f383 8810 	msr	PRIMASK, r3
}
 801dc42:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 801dc44:	4b18      	ldr	r3, [pc, #96]	; (801dca8 <_tx_thread_system_resume+0x1f4>)
 801dc46:	681b      	ldr	r3, [r3, #0]
 801dc48:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801dc4a:	429a      	cmp	r2, r3
 801dc4c:	d020      	beq.n	801dc90 <_tx_thread_system_resume+0x1dc>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Now determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 801dc4e:	4b12      	ldr	r3, [pc, #72]	; (801dc98 <_tx_thread_system_resume+0x1e4>)
 801dc50:	681b      	ldr	r3, [r3, #0]
 801dc52:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (combined_flags == ((ULONG) 0))
 801dc54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801dc56:	2b00      	cmp	r3, #0
 801dc58:	d11a      	bne.n	801dc90 <_tx_thread_system_resume+0x1dc>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 801dc5a:	4b14      	ldr	r3, [pc, #80]	; (801dcac <_tx_thread_system_resume+0x1f8>)
 801dc5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801dc60:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801dc62:	f3ef 8305 	mrs	r3, IPSR
 801dc66:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 801dc68:	697b      	ldr	r3, [r7, #20]
    if (__get_ipsr_value() == 0)
 801dc6a:	2b00      	cmp	r3, #0
 801dc6c:	d10f      	bne.n	801dc8e <_tx_thread_system_resume+0x1da>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801dc6e:	f3ef 8310 	mrs	r3, PRIMASK
 801dc72:	613b      	str	r3, [r7, #16]
    return(posture);
 801dc74:	693b      	ldr	r3, [r7, #16]
        interrupt_save = __get_interrupt_posture();
 801dc76:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSIE  i": : : "memory");
 801dc78:	b662      	cpsie	i
}
 801dc7a:	bf00      	nop
 801dc7c:	68fb      	ldr	r3, [r7, #12]
 801dc7e:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801dc80:	68bb      	ldr	r3, [r7, #8]
 801dc82:	f383 8810 	msr	PRIMASK, r3
}
 801dc86:	bf00      	nop
}
 801dc88:	e001      	b.n	801dc8e <_tx_thread_system_resume+0x1da>
                                return;
 801dc8a:	bf00      	nop
 801dc8c:	e000      	b.n	801dc90 <_tx_thread_system_resume+0x1dc>
 801dc8e:	bf00      	nop

            /* Preemption is needed - return to the system!  */
            _tx_thread_system_return();
        }
    }
}
 801dc90:	3758      	adds	r7, #88	; 0x58
 801dc92:	46bd      	mov	sp, r7
 801dc94:	bd80      	pop	{r7, pc}
 801dc96:	bf00      	nop
 801dc98:	24005164 	.word	0x24005164
 801dc9c:	240050e4 	.word	0x240050e4
 801dca0:	240050dc 	.word	0x240050dc
 801dca4:	240050e0 	.word	0x240050e0
 801dca8:	240050d0 	.word	0x240050d0
 801dcac:	e000ed04 	.word	0xe000ed04
 801dcb0:	240050cc 	.word	0x240050cc

0801dcb4 <_tx_thread_system_suspend>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_suspend(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 801dcb4:	b580      	push	{r7, lr}
 801dcb6:	b09e      	sub	sp, #120	; 0x78
 801dcb8:	af00      	add	r7, sp, #0
 801dcba:	6078      	str	r0, [r7, #4]
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 801dcbc:	4b81      	ldr	r3, [pc, #516]	; (801dec4 <_tx_thread_system_suspend+0x210>)
 801dcbe:	681b      	ldr	r3, [r3, #0]
 801dcc0:	677b      	str	r3, [r7, #116]	; 0x74
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801dcc2:	f3ef 8310 	mrs	r3, PRIMASK
 801dcc6:	64fb      	str	r3, [r7, #76]	; 0x4c
    return(posture);
 801dcc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    int_posture = __get_interrupt_posture();
 801dcca:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile ("CPSID i" : : : "memory");
 801dccc:	b672      	cpsid	i
    return(int_posture);
 801dcce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 801dcd0:	673b      	str	r3, [r7, #112]	; 0x70

#ifndef TX_NO_TIMER

    /* Is the current thread suspending?  */
    if (thread_ptr == current_thread)
 801dcd2:	687a      	ldr	r2, [r7, #4]
 801dcd4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801dcd6:	429a      	cmp	r2, r3
 801dcd8:	d112      	bne.n	801dd00 <_tx_thread_system_suspend+0x4c>
    {

        /* Pickup the wait option.  */
        timeout =  thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks;
 801dcda:	687b      	ldr	r3, [r7, #4]
 801dcdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801dcde:	66fb      	str	r3, [r7, #108]	; 0x6c

        /* Determine if an activation is needed.  */
        if (timeout != TX_NO_WAIT)
 801dce0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801dce2:	2b00      	cmp	r3, #0
 801dce4:	d008      	beq.n	801dcf8 <_tx_thread_system_suspend+0x44>
        {

            /* Make sure the suspension is not a wait-forever.  */
            if (timeout != TX_WAIT_FOREVER)
 801dce6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801dce8:	f1b3 3fff 	cmp.w	r3, #4294967295
 801dcec:	d004      	beq.n	801dcf8 <_tx_thread_system_suspend+0x44>
            {

                /* Activate the thread timer with the timeout value setup in the caller.  */
                _tx_timer_system_activate(&(thread_ptr -> tx_thread_timer));
 801dcee:	687b      	ldr	r3, [r7, #4]
 801dcf0:	334c      	adds	r3, #76	; 0x4c
 801dcf2:	4618      	mov	r0, r3
 801dcf4:	f000 faa4 	bl	801e240 <_tx_timer_system_activate>
            }
        }

        /* Yes, reset time slice for current thread.  */
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 801dcf8:	687b      	ldr	r3, [r7, #4]
 801dcfa:	69db      	ldr	r3, [r3, #28]
 801dcfc:	4a72      	ldr	r2, [pc, #456]	; (801dec8 <_tx_thread_system_suspend+0x214>)
 801dcfe:	6013      	str	r3, [r2, #0]
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 801dd00:	4b72      	ldr	r3, [pc, #456]	; (801decc <_tx_thread_system_suspend+0x218>)
 801dd02:	681b      	ldr	r3, [r3, #0]
 801dd04:	3b01      	subs	r3, #1
 801dd06:	4a71      	ldr	r2, [pc, #452]	; (801decc <_tx_thread_system_suspend+0x218>)
 801dd08:	6013      	str	r3, [r2, #0]
    _tx_thread_performance_suspend_count++;
#endif

    /* Check to make sure the thread suspending flag is still set.  If not, it
       has already been resumed.  */
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 801dd0a:	687b      	ldr	r3, [r7, #4]
 801dd0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801dd0e:	2b01      	cmp	r3, #1
 801dd10:	f040 80a6 	bne.w	801de60 <_tx_thread_system_suspend+0x1ac>
            time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
        }
#endif

        /* Actually suspend this thread.  But first, clear the suspending flag.  */
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 801dd14:	687b      	ldr	r3, [r7, #4]
 801dd16:	2200      	movs	r2, #0
 801dd18:	639a      	str	r2, [r3, #56]	; 0x38

        /* Pickup priority of thread.  */
        priority =  thread_ptr -> tx_thread_priority;
 801dd1a:	687b      	ldr	r3, [r7, #4]
 801dd1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801dd1e:	66bb      	str	r3, [r7, #104]	; 0x68

        /* Pickup the next ready thread pointer.  */
        ready_next =      thread_ptr -> tx_thread_ready_next;
 801dd20:	687b      	ldr	r3, [r7, #4]
 801dd22:	6a1b      	ldr	r3, [r3, #32]
 801dd24:	667b      	str	r3, [r7, #100]	; 0x64

        /* Determine if there are other threads at this priority that are
           ready.  */
        if (ready_next != thread_ptr)
 801dd26:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801dd28:	687b      	ldr	r3, [r7, #4]
 801dd2a:	429a      	cmp	r2, r3
 801dd2c:	d015      	beq.n	801dd5a <_tx_thread_system_suspend+0xa6>
        {

            /* Yes, there are other threads at this priority ready.  */

            /* Pickup the previous ready thread pointer.  */
            ready_previous =  thread_ptr -> tx_thread_ready_previous;
 801dd2e:	687b      	ldr	r3, [r7, #4]
 801dd30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801dd32:	653b      	str	r3, [r7, #80]	; 0x50

            /* Just remove this thread from the priority list.  */
            ready_next -> tx_thread_ready_previous =    ready_previous;
 801dd34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801dd36:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801dd38:	625a      	str	r2, [r3, #36]	; 0x24
            ready_previous -> tx_thread_ready_next =    ready_next;
 801dd3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801dd3c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801dd3e:	621a      	str	r2, [r3, #32]

            /* Determine if this is the head of the priority list.  */
            if (_tx_thread_priority_list[priority] == thread_ptr)
 801dd40:	4a63      	ldr	r2, [pc, #396]	; (801ded0 <_tx_thread_system_suspend+0x21c>)
 801dd42:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801dd44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801dd48:	687a      	ldr	r2, [r7, #4]
 801dd4a:	429a      	cmp	r2, r3
 801dd4c:	d157      	bne.n	801ddfe <_tx_thread_system_suspend+0x14a>
            {

                /* Update the head pointer of this priority list.  */
                _tx_thread_priority_list[priority] =  ready_next;
 801dd4e:	4960      	ldr	r1, [pc, #384]	; (801ded0 <_tx_thread_system_suspend+0x21c>)
 801dd50:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801dd52:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801dd54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 801dd58:	e051      	b.n	801ddfe <_tx_thread_system_suspend+0x14a>
        else
        {

            /* This is the only thread at this priority ready to run.  Set the head
               pointer to NULL.  */
            _tx_thread_priority_list[priority] =    TX_NULL;
 801dd5a:	4a5d      	ldr	r2, [pc, #372]	; (801ded0 <_tx_thread_system_suspend+0x21c>)
 801dd5c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801dd5e:	2100      	movs	r1, #0
 801dd60:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            /* Calculate the index into the bit map array.  */
            map_index =  priority/((UINT) 32);
#endif

            /* Clear this priority bit in the ready priority bit map.  */
            TX_MOD32_BIT_SET(priority, priority_bit)
 801dd64:	2201      	movs	r2, #1
 801dd66:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801dd68:	fa02 f303 	lsl.w	r3, r2, r3
 801dd6c:	663b      	str	r3, [r7, #96]	; 0x60
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 801dd6e:	4b59      	ldr	r3, [pc, #356]	; (801ded4 <_tx_thread_system_suspend+0x220>)
 801dd70:	681a      	ldr	r2, [r3, #0]
 801dd72:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801dd74:	43db      	mvns	r3, r3
 801dd76:	4013      	ands	r3, r2
 801dd78:	4a56      	ldr	r2, [pc, #344]	; (801ded4 <_tx_thread_system_suspend+0x220>)
 801dd7a:	6013      	str	r3, [r2, #0]
            /* Calculate the base priority as well.  */
            base_priority =  map_index * ((UINT) 32);
#else

            /* Setup the base priority to zero.  */
            base_priority =   ((UINT) 0);
 801dd7c:	2300      	movs	r3, #0
 801dd7e:	65fb      	str	r3, [r7, #92]	; 0x5c
#endif

            /* Setup working variable for the priority map.  */
            priority_map =    _tx_thread_priority_maps[MAP_INDEX];
 801dd80:	4b54      	ldr	r3, [pc, #336]	; (801ded4 <_tx_thread_system_suspend+0x220>)
 801dd82:	681b      	ldr	r3, [r3, #0]
 801dd84:	65bb      	str	r3, [r7, #88]	; 0x58

            /* Make a quick check for no other threads ready for execution.  */
            if (priority_map == ((ULONG) 0))
 801dd86:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801dd88:	2b00      	cmp	r3, #0
 801dd8a:	d12b      	bne.n	801dde4 <_tx_thread_system_suspend+0x130>
            {

                /* Nothing else is ready.  Set highest priority and execute thread
                   accordingly.  */
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 801dd8c:	4b52      	ldr	r3, [pc, #328]	; (801ded8 <_tx_thread_system_suspend+0x224>)
 801dd8e:	2220      	movs	r2, #32
 801dd90:	601a      	str	r2, [r3, #0]
                _tx_thread_execute_ptr =       TX_NULL;
 801dd92:	4b52      	ldr	r3, [pc, #328]	; (801dedc <_tx_thread_system_suspend+0x228>)
 801dd94:	2200      	movs	r2, #0
 801dd96:	601a      	str	r2, [r3, #0]
 801dd98:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801dd9a:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801dd9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801dd9e:	f383 8810 	msr	PRIMASK, r3
}
 801dda2:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if preemption should take place. This is only possible if the current thread pointer is
                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 801dda4:	4b49      	ldr	r3, [pc, #292]	; (801decc <_tx_thread_system_suspend+0x218>)
 801dda6:	681b      	ldr	r3, [r3, #0]
 801dda8:	657b      	str	r3, [r7, #84]	; 0x54
                if (combined_flags == ((ULONG) 0))
 801ddaa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801ddac:	2b00      	cmp	r3, #0
 801ddae:	f040 8081 	bne.w	801deb4 <_tx_thread_system_suspend+0x200>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 801ddb2:	4b4b      	ldr	r3, [pc, #300]	; (801dee0 <_tx_thread_system_suspend+0x22c>)
 801ddb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801ddb8:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801ddba:	f3ef 8305 	mrs	r3, IPSR
 801ddbe:	643b      	str	r3, [r7, #64]	; 0x40
    return(ipsr_value);
 801ddc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    if (__get_ipsr_value() == 0)
 801ddc2:	2b00      	cmp	r3, #0
 801ddc4:	d10c      	bne.n	801dde0 <_tx_thread_system_suspend+0x12c>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801ddc6:	f3ef 8310 	mrs	r3, PRIMASK
 801ddca:	63fb      	str	r3, [r7, #60]	; 0x3c
    return(posture);
 801ddcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        interrupt_save = __get_interrupt_posture();
 801ddce:	63bb      	str	r3, [r7, #56]	; 0x38
    __asm__ volatile ("CPSIE  i": : : "memory");
 801ddd0:	b662      	cpsie	i
}
 801ddd2:	bf00      	nop
 801ddd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ddd6:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801ddd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ddda:	f383 8810 	msr	PRIMASK, r3
}
 801ddde:	bf00      	nop
}
 801dde0:	bf00      	nop
                    /* Preemption is needed - return to the system!  */
                    _tx_thread_system_return();
                }

                /* Return to caller.  */
                return;
 801dde2:	e067      	b.n	801deb4 <_tx_thread_system_suspend+0x200>
            {

                /* Other threads at different priority levels are ready to run.  */

                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 801dde4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801dde6:	fa93 f3a3 	rbit	r3, r3
 801ddea:	65bb      	str	r3, [r7, #88]	; 0x58
 801ddec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801ddee:	fab3 f383 	clz	r3, r3
 801ddf2:	663b      	str	r3, [r7, #96]	; 0x60

                /* Setup the next highest priority variable.  */
                _tx_thread_highest_priority =  base_priority + ((UINT) priority_bit);
 801ddf4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801ddf6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801ddf8:	4413      	add	r3, r2
 801ddfa:	4a37      	ldr	r2, [pc, #220]	; (801ded8 <_tx_thread_system_suspend+0x224>)
 801ddfc:	6013      	str	r3, [r2, #0]
            }
        }

        /* Determine if the suspending thread is the thread designated to execute.  */
        if (thread_ptr == _tx_thread_execute_ptr)
 801ddfe:	4b37      	ldr	r3, [pc, #220]	; (801dedc <_tx_thread_system_suspend+0x228>)
 801de00:	681b      	ldr	r3, [r3, #0]
 801de02:	687a      	ldr	r2, [r7, #4]
 801de04:	429a      	cmp	r2, r3
 801de06:	d12b      	bne.n	801de60 <_tx_thread_system_suspend+0x1ac>
        {

            /* Pickup the highest priority thread to execute.  */
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 801de08:	4b33      	ldr	r3, [pc, #204]	; (801ded8 <_tx_thread_system_suspend+0x224>)
 801de0a:	681b      	ldr	r3, [r3, #0]
 801de0c:	4a30      	ldr	r2, [pc, #192]	; (801ded0 <_tx_thread_system_suspend+0x21c>)
 801de0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801de12:	4a32      	ldr	r2, [pc, #200]	; (801dedc <_tx_thread_system_suspend+0x228>)
 801de14:	6013      	str	r3, [r2, #0]
 801de16:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801de18:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801de1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801de1c:	f383 8810 	msr	PRIMASK, r3
}
 801de20:	bf00      	nop
            /* Restore interrupts.  */
            TX_RESTORE

            /* Determine if preemption should take place. This is only possible if the current thread pointer is
               not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
            TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 801de22:	4b2a      	ldr	r3, [pc, #168]	; (801decc <_tx_thread_system_suspend+0x218>)
 801de24:	681b      	ldr	r3, [r3, #0]
 801de26:	657b      	str	r3, [r7, #84]	; 0x54
            if (combined_flags == ((ULONG) 0))
 801de28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801de2a:	2b00      	cmp	r3, #0
 801de2c:	d144      	bne.n	801deb8 <_tx_thread_system_suspend+0x204>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 801de2e:	4b2c      	ldr	r3, [pc, #176]	; (801dee0 <_tx_thread_system_suspend+0x22c>)
 801de30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801de34:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801de36:	f3ef 8305 	mrs	r3, IPSR
 801de3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(ipsr_value);
 801de3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    if (__get_ipsr_value() == 0)
 801de3e:	2b00      	cmp	r3, #0
 801de40:	d10c      	bne.n	801de5c <_tx_thread_system_suspend+0x1a8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801de42:	f3ef 8310 	mrs	r3, PRIMASK
 801de46:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 801de48:	6abb      	ldr	r3, [r7, #40]	; 0x28
        interrupt_save = __get_interrupt_posture();
 801de4a:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSIE  i": : : "memory");
 801de4c:	b662      	cpsie	i
}
 801de4e:	bf00      	nop
 801de50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801de52:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801de54:	6a3b      	ldr	r3, [r7, #32]
 801de56:	f383 8810 	msr	PRIMASK, r3
}
 801de5a:	bf00      	nop
}
 801de5c:	bf00      	nop
                /* Preemption is needed - return to the system!  */
                _tx_thread_system_return();
            }

            /* Return to caller.  */
            return;
 801de5e:	e02b      	b.n	801deb8 <_tx_thread_system_suspend+0x204>
 801de60:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801de62:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801de64:	69fb      	ldr	r3, [r7, #28]
 801de66:	f383 8810 	msr	PRIMASK, r3
}
 801de6a:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 801de6c:	4b1b      	ldr	r3, [pc, #108]	; (801dedc <_tx_thread_system_suspend+0x228>)
 801de6e:	681b      	ldr	r3, [r3, #0]
 801de70:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801de72:	429a      	cmp	r2, r3
 801de74:	d022      	beq.n	801debc <_tx_thread_system_suspend+0x208>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 801de76:	4b15      	ldr	r3, [pc, #84]	; (801decc <_tx_thread_system_suspend+0x218>)
 801de78:	681b      	ldr	r3, [r3, #0]
 801de7a:	657b      	str	r3, [r7, #84]	; 0x54
        if (combined_flags == ((ULONG) 0))
 801de7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801de7e:	2b00      	cmp	r3, #0
 801de80:	d11c      	bne.n	801debc <_tx_thread_system_suspend+0x208>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 801de82:	4b17      	ldr	r3, [pc, #92]	; (801dee0 <_tx_thread_system_suspend+0x22c>)
 801de84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801de88:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801de8a:	f3ef 8305 	mrs	r3, IPSR
 801de8e:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 801de90:	69bb      	ldr	r3, [r7, #24]
    if (__get_ipsr_value() == 0)
 801de92:	2b00      	cmp	r3, #0
 801de94:	d10c      	bne.n	801deb0 <_tx_thread_system_suspend+0x1fc>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801de96:	f3ef 8310 	mrs	r3, PRIMASK
 801de9a:	617b      	str	r3, [r7, #20]
    return(posture);
 801de9c:	697b      	ldr	r3, [r7, #20]
        interrupt_save = __get_interrupt_posture();
 801de9e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSIE  i": : : "memory");
 801dea0:	b662      	cpsie	i
}
 801dea2:	bf00      	nop
 801dea4:	693b      	ldr	r3, [r7, #16]
 801dea6:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801dea8:	68fb      	ldr	r3, [r7, #12]
 801deaa:	f383 8810 	msr	PRIMASK, r3
}
 801deae:	bf00      	nop
}
 801deb0:	bf00      	nop
            _tx_thread_system_return();
        }
    }

    /* Return to caller.  */
    return;
 801deb2:	e003      	b.n	801debc <_tx_thread_system_suspend+0x208>
                return;
 801deb4:	bf00      	nop
 801deb6:	e002      	b.n	801debe <_tx_thread_system_suspend+0x20a>
            return;
 801deb8:	bf00      	nop
 801deba:	e000      	b.n	801debe <_tx_thread_system_suspend+0x20a>
    return;
 801debc:	bf00      	nop
}
 801debe:	3778      	adds	r7, #120	; 0x78
 801dec0:	46bd      	mov	sp, r7
 801dec2:	bd80      	pop	{r7, pc}
 801dec4:	240050cc 	.word	0x240050cc
 801dec8:	240056d0 	.word	0x240056d0
 801decc:	24005164 	.word	0x24005164
 801ded0:	240050e4 	.word	0x240050e4
 801ded4:	240050dc 	.word	0x240050dc
 801ded8:	240050e0 	.word	0x240050e0
 801dedc:	240050d0 	.word	0x240050d0
 801dee0:	e000ed04 	.word	0xe000ed04

0801dee4 <_tx_thread_time_slice>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_time_slice(VOID)
{
 801dee4:	b480      	push	{r7}
 801dee6:	b087      	sub	sp, #28
 801dee8:	af00      	add	r7, sp, #0
ULONG           system_state;
UINT            preempt_disable;
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 801deea:	4b21      	ldr	r3, [pc, #132]	; (801df70 <_tx_thread_time_slice+0x8c>)
 801deec:	681b      	ldr	r3, [r3, #0]
 801deee:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801def0:	f3ef 8310 	mrs	r3, PRIMASK
 801def4:	60fb      	str	r3, [r7, #12]
    return(posture);
 801def6:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 801def8:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 801defa:	b672      	cpsid	i
    return(int_posture);
 801defc:	68bb      	ldr	r3, [r7, #8]
    /* Set the next thread pointer to NULL.  */
    next_thread_ptr =  TX_NULL;
#endif

    /* Lockout interrupts while the time-slice is evaluated.  */
    TX_DISABLE
 801defe:	613b      	str	r3, [r7, #16]

    /* Clear the expired time-slice flag.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 801df00:	4b1c      	ldr	r3, [pc, #112]	; (801df74 <_tx_thread_time_slice+0x90>)
 801df02:	2200      	movs	r2, #0
 801df04:	601a      	str	r2, [r3, #0]

    /* Make sure the thread pointer is valid.  */
    if (thread_ptr != TX_NULL)
 801df06:	697b      	ldr	r3, [r7, #20]
 801df08:	2b00      	cmp	r3, #0
 801df0a:	d024      	beq.n	801df56 <_tx_thread_time_slice+0x72>
    {

        /* Make sure the thread is still active, i.e. not suspended.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 801df0c:	697b      	ldr	r3, [r7, #20]
 801df0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801df10:	2b00      	cmp	r3, #0
 801df12:	d120      	bne.n	801df56 <_tx_thread_time_slice+0x72>
        {

            /* Setup a fresh time-slice for the thread.  */
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 801df14:	697b      	ldr	r3, [r7, #20]
 801df16:	69da      	ldr	r2, [r3, #28]
 801df18:	697b      	ldr	r3, [r7, #20]
 801df1a:	619a      	str	r2, [r3, #24]

            /* Reset the actual time-slice variable.  */
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 801df1c:	697b      	ldr	r3, [r7, #20]
 801df1e:	699b      	ldr	r3, [r3, #24]
 801df20:	4a15      	ldr	r2, [pc, #84]	; (801df78 <_tx_thread_time_slice+0x94>)
 801df22:	6013      	str	r3, [r2, #0]

            /* Determine if there is another thread at the same priority and preemption-threshold
               is not set.  Preemption-threshold overrides time-slicing.  */
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 801df24:	697b      	ldr	r3, [r7, #20]
 801df26:	6a1b      	ldr	r3, [r3, #32]
 801df28:	697a      	ldr	r2, [r7, #20]
 801df2a:	429a      	cmp	r2, r3
 801df2c:	d013      	beq.n	801df56 <_tx_thread_time_slice+0x72>
            {

                /* Check to see if preemption-threshold is not being used.  */
                if (thread_ptr -> tx_thread_priority == thread_ptr -> tx_thread_preempt_threshold)
 801df2e:	697b      	ldr	r3, [r7, #20]
 801df30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801df32:	697b      	ldr	r3, [r7, #20]
 801df34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801df36:	429a      	cmp	r2, r3
 801df38:	d10d      	bne.n	801df56 <_tx_thread_time_slice+0x72>

                    /* Preemption-threshold is not being used by this thread.  */

                    /* There is another thread at this priority, make it the highest at
                       this priority level.  */
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 801df3a:	697b      	ldr	r3, [r7, #20]
 801df3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801df3e:	697a      	ldr	r2, [r7, #20]
 801df40:	6a12      	ldr	r2, [r2, #32]
 801df42:	490e      	ldr	r1, [pc, #56]	; (801df7c <_tx_thread_time_slice+0x98>)
 801df44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                    /* Designate the highest priority thread as the one to execute.  Don't use this
                       thread's priority as an index just in case a higher priority thread is now
                       ready!  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 801df48:	4b0d      	ldr	r3, [pc, #52]	; (801df80 <_tx_thread_time_slice+0x9c>)
 801df4a:	681b      	ldr	r3, [r3, #0]
 801df4c:	4a0b      	ldr	r2, [pc, #44]	; (801df7c <_tx_thread_time_slice+0x98>)
 801df4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801df52:	4a0c      	ldr	r2, [pc, #48]	; (801df84 <_tx_thread_time_slice+0xa0>)
 801df54:	6013      	str	r3, [r2, #0]
 801df56:	693b      	ldr	r3, [r7, #16]
 801df58:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801df5a:	687b      	ldr	r3, [r7, #4]
 801df5c:	f383 8810 	msr	PRIMASK, r3
}
 801df60:	bf00      	nop

        /* Yes, check this thread's stack.  */
        TX_THREAD_STACK_CHECK(next_thread_ptr)
    }
#endif
}
 801df62:	bf00      	nop
 801df64:	371c      	adds	r7, #28
 801df66:	46bd      	mov	sp, r7
 801df68:	f85d 7b04 	ldr.w	r7, [sp], #4
 801df6c:	4770      	bx	lr
 801df6e:	bf00      	nop
 801df70:	240050cc 	.word	0x240050cc
 801df74:	24005174 	.word	0x24005174
 801df78:	240056d0 	.word	0x240056d0
 801df7c:	240050e4 	.word	0x240050e4
 801df80:	240050e0 	.word	0x240050e0
 801df84:	240050d0 	.word	0x240050d0

0801df88 <_tx_thread_timeout>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_timeout(ULONG timeout_input)
{
 801df88:	b580      	push	{r7, lr}
 801df8a:	b08a      	sub	sp, #40	; 0x28
 801df8c:	af00      	add	r7, sp, #0
 801df8e:	6078      	str	r0, [r7, #4]
VOID            (*suspend_cleanup)(struct TX_THREAD_STRUCT *suspend_thread_ptr, ULONG suspension_sequence);
ULONG           suspension_sequence;


    /* Pickup the thread pointer.  */
    TX_THREAD_TIMEOUT_POINTER_SETUP(thread_ptr)
 801df90:	687b      	ldr	r3, [r7, #4]
 801df92:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801df94:	f3ef 8310 	mrs	r3, PRIMASK
 801df98:	617b      	str	r3, [r7, #20]
    return(posture);
 801df9a:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 801df9c:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 801df9e:	b672      	cpsid	i
    return(int_posture);
 801dfa0:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts.  */
    TX_DISABLE
 801dfa2:	623b      	str	r3, [r7, #32]

    /* Determine how the thread is currently suspended.  */
    if (thread_ptr -> tx_thread_state == TX_SLEEP)
 801dfa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dfa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801dfa8:	2b04      	cmp	r3, #4
 801dfaa:	d10e      	bne.n	801dfca <_tx_thread_timeout+0x42>
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Increment the disable preemption flag.  */
        _tx_thread_preempt_disable++;
 801dfac:	4b13      	ldr	r3, [pc, #76]	; (801dffc <_tx_thread_timeout+0x74>)
 801dfae:	681b      	ldr	r3, [r3, #0]
 801dfb0:	3301      	adds	r3, #1
 801dfb2:	4a12      	ldr	r2, [pc, #72]	; (801dffc <_tx_thread_timeout+0x74>)
 801dfb4:	6013      	str	r3, [r2, #0]
 801dfb6:	6a3b      	ldr	r3, [r7, #32]
 801dfb8:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801dfba:	68fb      	ldr	r3, [r7, #12]
 801dfbc:	f383 8810 	msr	PRIMASK, r3
}
 801dfc0:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Lift the suspension on the sleeping thread.  */
        _tx_thread_system_resume(thread_ptr);
 801dfc2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801dfc4:	f7ff fd76 	bl	801dab4 <_tx_thread_system_resume>

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 801dfc8:	e013      	b.n	801dff2 <_tx_thread_timeout+0x6a>
        suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 801dfca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dfcc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801dfce:	61fb      	str	r3, [r7, #28]
        suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 801dfd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dfd2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801dfd6:	61bb      	str	r3, [r7, #24]
 801dfd8:	6a3b      	ldr	r3, [r7, #32]
 801dfda:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801dfdc:	68bb      	ldr	r3, [r7, #8]
 801dfde:	f383 8810 	msr	PRIMASK, r3
}
 801dfe2:	bf00      	nop
        if (suspend_cleanup != TX_NULL)
 801dfe4:	69fb      	ldr	r3, [r7, #28]
 801dfe6:	2b00      	cmp	r3, #0
 801dfe8:	d003      	beq.n	801dff2 <_tx_thread_timeout+0x6a>
            (suspend_cleanup)(thread_ptr, suspension_sequence);
 801dfea:	69fb      	ldr	r3, [r7, #28]
 801dfec:	69b9      	ldr	r1, [r7, #24]
 801dfee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801dff0:	4798      	blx	r3
}
 801dff2:	bf00      	nop
 801dff4:	3728      	adds	r7, #40	; 0x28
 801dff6:	46bd      	mov	sp, r7
 801dff8:	bd80      	pop	{r7, pc}
 801dffa:	bf00      	nop
 801dffc:	24005164 	.word	0x24005164

0801e000 <_tx_time_get>:
/*  12-31-2020     Andres Mlinar            Modified comment(s),          */
/*                                            resulting in version 6.1.3  */
/*                                                                        */
/**************************************************************************/
ULONG  _tx_time_get(VOID)
{
 801e000:	b480      	push	{r7}
 801e002:	b087      	sub	sp, #28
 801e004:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801e006:	f3ef 8310 	mrs	r3, PRIMASK
 801e00a:	60bb      	str	r3, [r7, #8]
    return(posture);
 801e00c:	68bb      	ldr	r3, [r7, #8]
    int_posture = __get_interrupt_posture();
 801e00e:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("CPSID i" : : : "memory");
 801e010:	b672      	cpsid	i
    return(int_posture);
 801e012:	687b      	ldr	r3, [r7, #4]
#endif
ULONG   temp_time;


    /* Disable interrupts.  */
    TX_DISABLE
 801e014:	617b      	str	r3, [r7, #20]

    /* Pickup the system clock time.  */
    temp_time =  _tx_timer_system_clock;
 801e016:	4b08      	ldr	r3, [pc, #32]	; (801e038 <_tx_time_get+0x38>)
 801e018:	681b      	ldr	r3, [r3, #0]
 801e01a:	613b      	str	r3, [r7, #16]
 801e01c:	697b      	ldr	r3, [r7, #20]
 801e01e:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801e020:	68fb      	ldr	r3, [r7, #12]
 801e022:	f383 8810 	msr	PRIMASK, r3
}
 801e026:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return the time.  */
    return(temp_time);
 801e028:	693b      	ldr	r3, [r7, #16]
}
 801e02a:	4618      	mov	r0, r3
 801e02c:	371c      	adds	r7, #28
 801e02e:	46bd      	mov	sp, r7
 801e030:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e034:	4770      	bx	lr
 801e036:	bf00      	nop
 801e038:	24005170 	.word	0x24005170

0801e03c <_tx_timer_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_timer_create(TX_TIMER *timer_ptr, CHAR *name_ptr,
            VOID (*expiration_function)(ULONG id), ULONG expiration_input,
            ULONG initial_ticks, ULONG reschedule_ticks, UINT auto_activate)
{
 801e03c:	b580      	push	{r7, lr}
 801e03e:	b08a      	sub	sp, #40	; 0x28
 801e040:	af00      	add	r7, sp, #0
 801e042:	60f8      	str	r0, [r7, #12]
 801e044:	60b9      	str	r1, [r7, #8]
 801e046:	607a      	str	r2, [r7, #4]
 801e048:	603b      	str	r3, [r7, #0]
TX_TIMER        *next_timer;
TX_TIMER        *previous_timer;


    /* Initialize timer control block to all zeros.  */
    TX_MEMSET(timer_ptr, 0, (sizeof(TX_TIMER)));
 801e04a:	222c      	movs	r2, #44	; 0x2c
 801e04c:	2100      	movs	r1, #0
 801e04e:	68f8      	ldr	r0, [r7, #12]
 801e050:	f001 fc06 	bl	801f860 <memset>

    /* Setup the basic timer fields.  */
    timer_ptr -> tx_timer_name =                                            name_ptr;
 801e054:	68fb      	ldr	r3, [r7, #12]
 801e056:	68ba      	ldr	r2, [r7, #8]
 801e058:	605a      	str	r2, [r3, #4]
    timer_ptr -> tx_timer_internal.tx_timer_internal_remaining_ticks =      initial_ticks;
 801e05a:	68fb      	ldr	r3, [r7, #12]
 801e05c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801e05e:	609a      	str	r2, [r3, #8]
    timer_ptr -> tx_timer_internal.tx_timer_internal_re_initialize_ticks =  reschedule_ticks;
 801e060:	68fb      	ldr	r3, [r7, #12]
 801e062:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801e064:	60da      	str	r2, [r3, #12]
    timer_ptr -> tx_timer_internal.tx_timer_internal_timeout_function =     expiration_function;
 801e066:	68fb      	ldr	r3, [r7, #12]
 801e068:	687a      	ldr	r2, [r7, #4]
 801e06a:	611a      	str	r2, [r3, #16]
    timer_ptr -> tx_timer_internal.tx_timer_internal_timeout_param =        expiration_input;
 801e06c:	68fb      	ldr	r3, [r7, #12]
 801e06e:	683a      	ldr	r2, [r7, #0]
 801e070:	615a      	str	r2, [r3, #20]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801e072:	f3ef 8310 	mrs	r3, PRIMASK
 801e076:	61bb      	str	r3, [r7, #24]
    return(posture);
 801e078:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 801e07a:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 801e07c:	b672      	cpsid	i
    return(int_posture);
 801e07e:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to put the timer on the created list.  */
    TX_DISABLE
 801e080:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the timer ID to make it valid.  */
    timer_ptr -> tx_timer_id =  TX_TIMER_ID;
 801e082:	68fb      	ldr	r3, [r7, #12]
 801e084:	4a1c      	ldr	r2, [pc, #112]	; (801e0f8 <_tx_timer_create+0xbc>)
 801e086:	601a      	str	r2, [r3, #0]

    /* Place the timer on the list of created application timers.  First,
       check for an empty list.  */
    if (_tx_timer_created_count == TX_EMPTY)
 801e088:	4b1c      	ldr	r3, [pc, #112]	; (801e0fc <_tx_timer_create+0xc0>)
 801e08a:	681b      	ldr	r3, [r3, #0]
 801e08c:	2b00      	cmp	r3, #0
 801e08e:	d109      	bne.n	801e0a4 <_tx_timer_create+0x68>
    {

        /* The created timer list is empty.  Add timer to empty list.  */
        _tx_timer_created_ptr =                   timer_ptr;
 801e090:	4a1b      	ldr	r2, [pc, #108]	; (801e100 <_tx_timer_create+0xc4>)
 801e092:	68fb      	ldr	r3, [r7, #12]
 801e094:	6013      	str	r3, [r2, #0]
        timer_ptr -> tx_timer_created_next =      timer_ptr;
 801e096:	68fb      	ldr	r3, [r7, #12]
 801e098:	68fa      	ldr	r2, [r7, #12]
 801e09a:	625a      	str	r2, [r3, #36]	; 0x24
        timer_ptr -> tx_timer_created_previous =  timer_ptr;
 801e09c:	68fb      	ldr	r3, [r7, #12]
 801e09e:	68fa      	ldr	r2, [r7, #12]
 801e0a0:	629a      	str	r2, [r3, #40]	; 0x28
 801e0a2:	e011      	b.n	801e0c8 <_tx_timer_create+0x8c>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_timer =  _tx_timer_created_ptr;
 801e0a4:	4b16      	ldr	r3, [pc, #88]	; (801e100 <_tx_timer_create+0xc4>)
 801e0a6:	681b      	ldr	r3, [r3, #0]
 801e0a8:	623b      	str	r3, [r7, #32]
        previous_timer =  next_timer -> tx_timer_created_previous;
 801e0aa:	6a3b      	ldr	r3, [r7, #32]
 801e0ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e0ae:	61fb      	str	r3, [r7, #28]

        /* Place the new timer in the list.  */
        next_timer -> tx_timer_created_previous =  timer_ptr;
 801e0b0:	6a3b      	ldr	r3, [r7, #32]
 801e0b2:	68fa      	ldr	r2, [r7, #12]
 801e0b4:	629a      	str	r2, [r3, #40]	; 0x28
        previous_timer -> tx_timer_created_next =    timer_ptr;
 801e0b6:	69fb      	ldr	r3, [r7, #28]
 801e0b8:	68fa      	ldr	r2, [r7, #12]
 801e0ba:	625a      	str	r2, [r3, #36]	; 0x24

        /* Setup this timer's created links.  */
        timer_ptr -> tx_timer_created_previous =  previous_timer;
 801e0bc:	68fb      	ldr	r3, [r7, #12]
 801e0be:	69fa      	ldr	r2, [r7, #28]
 801e0c0:	629a      	str	r2, [r3, #40]	; 0x28
        timer_ptr -> tx_timer_created_next =      next_timer;
 801e0c2:	68fb      	ldr	r3, [r7, #12]
 801e0c4:	6a3a      	ldr	r2, [r7, #32]
 801e0c6:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Increment the number of created timers.  */
    _tx_timer_created_count++;
 801e0c8:	4b0c      	ldr	r3, [pc, #48]	; (801e0fc <_tx_timer_create+0xc0>)
 801e0ca:	681b      	ldr	r3, [r3, #0]
 801e0cc:	3301      	adds	r3, #1
 801e0ce:	4a0b      	ldr	r2, [pc, #44]	; (801e0fc <_tx_timer_create+0xc0>)
 801e0d0:	6013      	str	r3, [r2, #0]

    /* Log this kernel call.  */
    TX_EL_TIMER_CREATE_INSERT

    /* Determine if this timer needs to be activated.  */
    if (auto_activate == TX_AUTO_ACTIVATE)
 801e0d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e0d4:	2b01      	cmp	r3, #1
 801e0d6:	d104      	bne.n	801e0e2 <_tx_timer_create+0xa6>
        /* Increment the number of activations on this timer.  */
        timer_ptr -> tx_timer_performance_activate_count++;
#endif

        /* Call actual activation function.  */
        _tx_timer_system_activate(&(timer_ptr -> tx_timer_internal));
 801e0d8:	68fb      	ldr	r3, [r7, #12]
 801e0da:	3308      	adds	r3, #8
 801e0dc:	4618      	mov	r0, r3
 801e0de:	f000 f8af 	bl	801e240 <_tx_timer_system_activate>
 801e0e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e0e4:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801e0e6:	693b      	ldr	r3, [r7, #16]
 801e0e8:	f383 8810 	msr	PRIMASK, r3
}
 801e0ec:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 801e0ee:	2300      	movs	r3, #0
}
 801e0f0:	4618      	mov	r0, r3
 801e0f2:	3728      	adds	r7, #40	; 0x28
 801e0f4:	46bd      	mov	sp, r7
 801e0f6:	bd80      	pop	{r7, pc}
 801e0f8:	4154494d 	.word	0x4154494d
 801e0fc:	2400520c 	.word	0x2400520c
 801e100:	24005208 	.word	0x24005208

0801e104 <_tx_timer_expiration_process>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_expiration_process(VOID)
{
 801e104:	b580      	push	{r7, lr}
 801e106:	b084      	sub	sp, #16
 801e108:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801e10a:	f3ef 8310 	mrs	r3, PRIMASK
 801e10e:	607b      	str	r3, [r7, #4]
    return(posture);
 801e110:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 801e112:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 801e114:	b672      	cpsid	i
    return(int_posture);
 801e116:	683b      	ldr	r3, [r7, #0]

    /* Don't process in the ISR, wakeup the system timer thread to process the
       timer expiration.  */

    /* Disable interrupts.  */
    TX_DISABLE
 801e118:	60fb      	str	r3, [r7, #12]
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Increment the preempt disable flag.  */
    _tx_thread_preempt_disable++;
 801e11a:	4b09      	ldr	r3, [pc, #36]	; (801e140 <_tx_timer_expiration_process+0x3c>)
 801e11c:	681b      	ldr	r3, [r3, #0]
 801e11e:	3301      	adds	r3, #1
 801e120:	4a07      	ldr	r2, [pc, #28]	; (801e140 <_tx_timer_expiration_process+0x3c>)
 801e122:	6013      	str	r3, [r2, #0]
 801e124:	68fb      	ldr	r3, [r7, #12]
 801e126:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801e128:	68bb      	ldr	r3, [r7, #8]
 801e12a:	f383 8810 	msr	PRIMASK, r3
}
 801e12e:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Call the system resume function to activate the timer thread.  */
    _tx_thread_system_resume(&_tx_timer_thread);
 801e130:	4804      	ldr	r0, [pc, #16]	; (801e144 <_tx_timer_expiration_process+0x40>)
 801e132:	f7ff fcbf 	bl	801dab4 <_tx_thread_system_resume>
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 801e136:	bf00      	nop
 801e138:	3710      	adds	r7, #16
 801e13a:	46bd      	mov	sp, r7
 801e13c:	bd80      	pop	{r7, pc}
 801e13e:	bf00      	nop
 801e140:	24005164 	.word	0x24005164
 801e144:	24005214 	.word	0x24005214

0801e148 <_tx_timer_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_initialize(VOID)
{
 801e148:	b590      	push	{r4, r7, lr}
 801e14a:	b089      	sub	sp, #36	; 0x24
 801e14c:	af06      	add	r7, sp, #24
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the system clock to 0.  */
    _tx_timer_system_clock =  ((ULONG) 0);
 801e14e:	4b28      	ldr	r3, [pc, #160]	; (801e1f0 <_tx_timer_initialize+0xa8>)
 801e150:	2200      	movs	r2, #0
 801e152:	601a      	str	r2, [r3, #0]

    /* Initialize the time-slice value to 0 to make sure it is disabled.  */
    _tx_timer_time_slice =  ((ULONG) 0);
 801e154:	4b27      	ldr	r3, [pc, #156]	; (801e1f4 <_tx_timer_initialize+0xac>)
 801e156:	2200      	movs	r2, #0
 801e158:	601a      	str	r2, [r3, #0]

    /* Clear the expired flags.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 801e15a:	4b27      	ldr	r3, [pc, #156]	; (801e1f8 <_tx_timer_initialize+0xb0>)
 801e15c:	2200      	movs	r2, #0
 801e15e:	601a      	str	r2, [r3, #0]
    _tx_timer_expired =             TX_FALSE;
 801e160:	4b26      	ldr	r3, [pc, #152]	; (801e1fc <_tx_timer_initialize+0xb4>)
 801e162:	2200      	movs	r2, #0
 801e164:	601a      	str	r2, [r3, #0]

    /* Set the currently expired timer being processed pointer to NULL.  */
    _tx_timer_expired_timer_ptr =  TX_NULL;
 801e166:	4b26      	ldr	r3, [pc, #152]	; (801e200 <_tx_timer_initialize+0xb8>)
 801e168:	2200      	movs	r2, #0
 801e16a:	601a      	str	r2, [r3, #0]

    /* Initialize the thread and application timer management control structures.  */

    /* First, initialize the timer list.  */
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 801e16c:	2280      	movs	r2, #128	; 0x80
 801e16e:	2100      	movs	r1, #0
 801e170:	4824      	ldr	r0, [pc, #144]	; (801e204 <_tx_timer_initialize+0xbc>)
 801e172:	f001 fb75 	bl	801f860 <memset>
#endif

    /* Initialize all of the list pointers.  */
    _tx_timer_list_start =   &_tx_timer_list[0];
 801e176:	4b24      	ldr	r3, [pc, #144]	; (801e208 <_tx_timer_initialize+0xc0>)
 801e178:	4a22      	ldr	r2, [pc, #136]	; (801e204 <_tx_timer_initialize+0xbc>)
 801e17a:	601a      	str	r2, [r3, #0]
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 801e17c:	4b23      	ldr	r3, [pc, #140]	; (801e20c <_tx_timer_initialize+0xc4>)
 801e17e:	4a21      	ldr	r2, [pc, #132]	; (801e204 <_tx_timer_initialize+0xbc>)
 801e180:	601a      	str	r2, [r3, #0]

    /* Set the timer list end pointer to one past the actual timer list.  This is done
       to make the timer interrupt handling in assembly language a little easier.  */
    _tx_timer_list_end =     &_tx_timer_list[TX_TIMER_ENTRIES-((ULONG) 1)];
 801e182:	4b23      	ldr	r3, [pc, #140]	; (801e210 <_tx_timer_initialize+0xc8>)
 801e184:	4a23      	ldr	r2, [pc, #140]	; (801e214 <_tx_timer_initialize+0xcc>)
 801e186:	601a      	str	r2, [r3, #0]
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 801e188:	4b21      	ldr	r3, [pc, #132]	; (801e210 <_tx_timer_initialize+0xc8>)
 801e18a:	681b      	ldr	r3, [r3, #0]
 801e18c:	3304      	adds	r3, #4
 801e18e:	4a20      	ldr	r2, [pc, #128]	; (801e210 <_tx_timer_initialize+0xc8>)
 801e190:	6013      	str	r3, [r2, #0]

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Setup the variables associated with the system timer thread's stack and
       priority.  */
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 801e192:	4b21      	ldr	r3, [pc, #132]	; (801e218 <_tx_timer_initialize+0xd0>)
 801e194:	4a21      	ldr	r2, [pc, #132]	; (801e21c <_tx_timer_initialize+0xd4>)
 801e196:	601a      	str	r2, [r3, #0]
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 801e198:	4b21      	ldr	r3, [pc, #132]	; (801e220 <_tx_timer_initialize+0xd8>)
 801e19a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801e19e:	601a      	str	r2, [r3, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 801e1a0:	4b20      	ldr	r3, [pc, #128]	; (801e224 <_tx_timer_initialize+0xdc>)
 801e1a2:	2200      	movs	r2, #0
 801e1a4:	601a      	str	r2, [r3, #0]
       low-level initialization component.  */
    do
    {

        /* Create the system timer thread.  */
        status =  _tx_thread_create(&_tx_timer_thread,
 801e1a6:	4b1c      	ldr	r3, [pc, #112]	; (801e218 <_tx_timer_initialize+0xd0>)
 801e1a8:	681b      	ldr	r3, [r3, #0]
 801e1aa:	4a1d      	ldr	r2, [pc, #116]	; (801e220 <_tx_timer_initialize+0xd8>)
 801e1ac:	6812      	ldr	r2, [r2, #0]
 801e1ae:	491d      	ldr	r1, [pc, #116]	; (801e224 <_tx_timer_initialize+0xdc>)
 801e1b0:	6809      	ldr	r1, [r1, #0]
 801e1b2:	481c      	ldr	r0, [pc, #112]	; (801e224 <_tx_timer_initialize+0xdc>)
 801e1b4:	6800      	ldr	r0, [r0, #0]
 801e1b6:	2400      	movs	r4, #0
 801e1b8:	9405      	str	r4, [sp, #20]
 801e1ba:	2400      	movs	r4, #0
 801e1bc:	9404      	str	r4, [sp, #16]
 801e1be:	9003      	str	r0, [sp, #12]
 801e1c0:	9102      	str	r1, [sp, #8]
 801e1c2:	9201      	str	r2, [sp, #4]
 801e1c4:	9300      	str	r3, [sp, #0]
 801e1c6:	4b18      	ldr	r3, [pc, #96]	; (801e228 <_tx_timer_initialize+0xe0>)
 801e1c8:	4a18      	ldr	r2, [pc, #96]	; (801e22c <_tx_timer_initialize+0xe4>)
 801e1ca:	4919      	ldr	r1, [pc, #100]	; (801e230 <_tx_timer_initialize+0xe8>)
 801e1cc:	4819      	ldr	r0, [pc, #100]	; (801e234 <_tx_timer_initialize+0xec>)
 801e1ce:	f7ff f9a7 	bl	801d520 <_tx_thread_create>
 801e1d2:	6078      	str	r0, [r7, #4]
#endif

        /* Define timer initialize extension.  */
        TX_TIMER_INITIALIZE_EXTENSION(status)

    } while (status != TX_SUCCESS);
 801e1d4:	687b      	ldr	r3, [r7, #4]
 801e1d6:	2b00      	cmp	r3, #0
 801e1d8:	d1e5      	bne.n	801e1a6 <_tx_timer_initialize+0x5e>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the head pointer of the created application timer list.  */
    _tx_timer_created_ptr =  TX_NULL;
 801e1da:	4b17      	ldr	r3, [pc, #92]	; (801e238 <_tx_timer_initialize+0xf0>)
 801e1dc:	2200      	movs	r2, #0
 801e1de:	601a      	str	r2, [r3, #0]

    /* Set the created count to zero.  */
    _tx_timer_created_count =  TX_EMPTY;
 801e1e0:	4b16      	ldr	r3, [pc, #88]	; (801e23c <_tx_timer_initialize+0xf4>)
 801e1e2:	2200      	movs	r2, #0
 801e1e4:	601a      	str	r2, [r3, #0]
    _tx_timer_performance_expiration_count =         ((ULONG) 0);
    _tx_timer_performance__expiration_adjust_count =  ((ULONG) 0);
#endif
#endif
#endif
}
 801e1e6:	bf00      	nop
 801e1e8:	370c      	adds	r7, #12
 801e1ea:	46bd      	mov	sp, r7
 801e1ec:	bd90      	pop	{r4, r7, pc}
 801e1ee:	bf00      	nop
 801e1f0:	24005170 	.word	0x24005170
 801e1f4:	240056d0 	.word	0x240056d0
 801e1f8:	24005174 	.word	0x24005174
 801e1fc:	24005204 	.word	0x24005204
 801e200:	24005210 	.word	0x24005210
 801e204:	24005178 	.word	0x24005178
 801e208:	240051f8 	.word	0x240051f8
 801e20c:	24005200 	.word	0x24005200
 801e210:	240051fc 	.word	0x240051fc
 801e214:	240051f4 	.word	0x240051f4
 801e218:	240052c4 	.word	0x240052c4
 801e21c:	240052d0 	.word	0x240052d0
 801e220:	240052c8 	.word	0x240052c8
 801e224:	240052cc 	.word	0x240052cc
 801e228:	4154494d 	.word	0x4154494d
 801e22c:	0801e375 	.word	0x0801e375
 801e230:	08020e7c 	.word	0x08020e7c
 801e234:	24005214 	.word	0x24005214
 801e238:	24005208 	.word	0x24005208
 801e23c:	2400520c 	.word	0x2400520c

0801e240 <_tx_timer_system_activate>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_activate(TX_TIMER_INTERNAL *timer_ptr)
{
 801e240:	b480      	push	{r7}
 801e242:	b089      	sub	sp, #36	; 0x24
 801e244:	af00      	add	r7, sp, #0
 801e246:	6078      	str	r0, [r7, #4]
ULONG                       remaining_ticks;
ULONG                       expiration_time;


    /* Pickup the remaining ticks.  */
    remaining_ticks =  timer_ptr -> tx_timer_internal_remaining_ticks;
 801e248:	687b      	ldr	r3, [r7, #4]
 801e24a:	681b      	ldr	r3, [r3, #0]
 801e24c:	617b      	str	r3, [r7, #20]

    /* Determine if there is a timer to activate.  */
    if (remaining_ticks != ((ULONG) 0))
 801e24e:	697b      	ldr	r3, [r7, #20]
 801e250:	2b00      	cmp	r3, #0
 801e252:	d04a      	beq.n	801e2ea <_tx_timer_system_activate+0xaa>
    {

        /* Determine if the timer is set to wait forever.  */
        if (remaining_ticks != TX_WAIT_FOREVER)
 801e254:	697b      	ldr	r3, [r7, #20]
 801e256:	f1b3 3fff 	cmp.w	r3, #4294967295
 801e25a:	d046      	beq.n	801e2ea <_tx_timer_system_activate+0xaa>
        {

            /* Valid timer activate request.  */

            /* Determine if the timer still needs activation.  */
            if (timer_ptr -> tx_timer_internal_list_head == TX_NULL)
 801e25c:	687b      	ldr	r3, [r7, #4]
 801e25e:	699b      	ldr	r3, [r3, #24]
 801e260:	2b00      	cmp	r3, #0
 801e262:	d142      	bne.n	801e2ea <_tx_timer_system_activate+0xaa>
            {

                /* Activate the timer.  */

                /* Calculate the amount of time remaining for the timer.  */
                if (remaining_ticks > TX_TIMER_ENTRIES)
 801e264:	697b      	ldr	r3, [r7, #20]
 801e266:	2b20      	cmp	r3, #32
 801e268:	d902      	bls.n	801e270 <_tx_timer_system_activate+0x30>
                {

                    /* Set expiration time to the maximum number of entries.  */
                    expiration_time =  TX_TIMER_ENTRIES - ((ULONG) 1);
 801e26a:	231f      	movs	r3, #31
 801e26c:	61bb      	str	r3, [r7, #24]
 801e26e:	e002      	b.n	801e276 <_tx_timer_system_activate+0x36>
                {

                    /* Timer value fits in the timer entries.  */

                    /* Set the expiration time.  */
                    expiration_time =  (remaining_ticks - ((ULONG) 1));
 801e270:	697b      	ldr	r3, [r7, #20]
 801e272:	3b01      	subs	r3, #1
 801e274:	61bb      	str	r3, [r7, #24]

                /* At this point, we are ready to put the timer on one of
                   the timer lists.  */

                /* Calculate the proper place for the timer.  */
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 801e276:	4b20      	ldr	r3, [pc, #128]	; (801e2f8 <_tx_timer_system_activate+0xb8>)
 801e278:	681a      	ldr	r2, [r3, #0]
 801e27a:	69bb      	ldr	r3, [r7, #24]
 801e27c:	009b      	lsls	r3, r3, #2
 801e27e:	4413      	add	r3, r2
 801e280:	61fb      	str	r3, [r7, #28]
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 801e282:	4b1e      	ldr	r3, [pc, #120]	; (801e2fc <_tx_timer_system_activate+0xbc>)
 801e284:	681b      	ldr	r3, [r3, #0]
 801e286:	69fa      	ldr	r2, [r7, #28]
 801e288:	429a      	cmp	r2, r3
 801e28a:	d30b      	bcc.n	801e2a4 <_tx_timer_system_activate+0x64>
                {

                    /* Wrap from the beginning of the list.  */
                    delta =  TX_TIMER_POINTER_DIF(timer_list, _tx_timer_list_end);
 801e28c:	4b1b      	ldr	r3, [pc, #108]	; (801e2fc <_tx_timer_system_activate+0xbc>)
 801e28e:	681b      	ldr	r3, [r3, #0]
 801e290:	69fa      	ldr	r2, [r7, #28]
 801e292:	1ad3      	subs	r3, r2, r3
 801e294:	109b      	asrs	r3, r3, #2
 801e296:	613b      	str	r3, [r7, #16]
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 801e298:	4b19      	ldr	r3, [pc, #100]	; (801e300 <_tx_timer_system_activate+0xc0>)
 801e29a:	681a      	ldr	r2, [r3, #0]
 801e29c:	693b      	ldr	r3, [r7, #16]
 801e29e:	009b      	lsls	r3, r3, #2
 801e2a0:	4413      	add	r3, r2
 801e2a2:	61fb      	str	r3, [r7, #28]
                }

                /* Now put the timer on this list.  */
                if ((*timer_list) == TX_NULL)
 801e2a4:	69fb      	ldr	r3, [r7, #28]
 801e2a6:	681b      	ldr	r3, [r3, #0]
 801e2a8:	2b00      	cmp	r3, #0
 801e2aa:	d109      	bne.n	801e2c0 <_tx_timer_system_activate+0x80>
                {

                    /* This list is NULL, just put the new timer on it.  */

                    /* Setup the links in this timer.  */
                    timer_ptr -> tx_timer_internal_active_next =      timer_ptr;
 801e2ac:	687b      	ldr	r3, [r7, #4]
 801e2ae:	687a      	ldr	r2, [r7, #4]
 801e2b0:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =  timer_ptr;
 801e2b2:	687b      	ldr	r3, [r7, #4]
 801e2b4:	687a      	ldr	r2, [r7, #4]
 801e2b6:	615a      	str	r2, [r3, #20]

                    /* Setup the list head pointer.  */
                    *timer_list =  timer_ptr;
 801e2b8:	69fb      	ldr	r3, [r7, #28]
 801e2ba:	687a      	ldr	r2, [r7, #4]
 801e2bc:	601a      	str	r2, [r3, #0]
 801e2be:	e011      	b.n	801e2e4 <_tx_timer_system_activate+0xa4>
                }
                else
                {

                    /* This list is not NULL, add current timer to the end. */
                    next_timer =                                        *timer_list;
 801e2c0:	69fb      	ldr	r3, [r7, #28]
 801e2c2:	681b      	ldr	r3, [r3, #0]
 801e2c4:	60fb      	str	r3, [r7, #12]
                    previous_timer =                                    next_timer -> tx_timer_internal_active_previous;
 801e2c6:	68fb      	ldr	r3, [r7, #12]
 801e2c8:	695b      	ldr	r3, [r3, #20]
 801e2ca:	60bb      	str	r3, [r7, #8]
                    previous_timer -> tx_timer_internal_active_next =   timer_ptr;
 801e2cc:	68bb      	ldr	r3, [r7, #8]
 801e2ce:	687a      	ldr	r2, [r7, #4]
 801e2d0:	611a      	str	r2, [r3, #16]
                    next_timer -> tx_timer_internal_active_previous =   timer_ptr;
 801e2d2:	68fb      	ldr	r3, [r7, #12]
 801e2d4:	687a      	ldr	r2, [r7, #4]
 801e2d6:	615a      	str	r2, [r3, #20]
                    timer_ptr -> tx_timer_internal_active_next =        next_timer;
 801e2d8:	687b      	ldr	r3, [r7, #4]
 801e2da:	68fa      	ldr	r2, [r7, #12]
 801e2dc:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =    previous_timer;
 801e2de:	687b      	ldr	r3, [r7, #4]
 801e2e0:	68ba      	ldr	r2, [r7, #8]
 801e2e2:	615a      	str	r2, [r3, #20]
                }

                /* Setup list head pointer.  */
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
 801e2e4:	687b      	ldr	r3, [r7, #4]
 801e2e6:	69fa      	ldr	r2, [r7, #28]
 801e2e8:	619a      	str	r2, [r3, #24]
            }
        }
    }
}
 801e2ea:	bf00      	nop
 801e2ec:	3724      	adds	r7, #36	; 0x24
 801e2ee:	46bd      	mov	sp, r7
 801e2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e2f4:	4770      	bx	lr
 801e2f6:	bf00      	nop
 801e2f8:	24005200 	.word	0x24005200
 801e2fc:	240051fc 	.word	0x240051fc
 801e300:	240051f8 	.word	0x240051f8

0801e304 <_tx_timer_system_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_deactivate(TX_TIMER_INTERNAL *timer_ptr)
{
 801e304:	b480      	push	{r7}
 801e306:	b087      	sub	sp, #28
 801e308:	af00      	add	r7, sp, #0
 801e30a:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL   *next_timer;
TX_TIMER_INTERNAL   *previous_timer;


    /* Pickup the list head pointer.  */
    list_head =  timer_ptr -> tx_timer_internal_list_head;
 801e30c:	687b      	ldr	r3, [r7, #4]
 801e30e:	699b      	ldr	r3, [r3, #24]
 801e310:	617b      	str	r3, [r7, #20]

    /* Determine if the timer still needs deactivation.  */
    if (list_head != TX_NULL)
 801e312:	697b      	ldr	r3, [r7, #20]
 801e314:	2b00      	cmp	r3, #0
 801e316:	d026      	beq.n	801e366 <_tx_timer_system_deactivate+0x62>
    {

        /* Deactivate the timer.  */

        /* Pickup the next active timer.  */
        next_timer =  timer_ptr -> tx_timer_internal_active_next;
 801e318:	687b      	ldr	r3, [r7, #4]
 801e31a:	691b      	ldr	r3, [r3, #16]
 801e31c:	613b      	str	r3, [r7, #16]

        /* See if this is the only timer in the list.  */
        if (timer_ptr == next_timer)
 801e31e:	687a      	ldr	r2, [r7, #4]
 801e320:	693b      	ldr	r3, [r7, #16]
 801e322:	429a      	cmp	r2, r3
 801e324:	d108      	bne.n	801e338 <_tx_timer_system_deactivate+0x34>
        {

            /* Yes, the only timer on the list.  */

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 801e326:	697b      	ldr	r3, [r7, #20]
 801e328:	681b      	ldr	r3, [r3, #0]
 801e32a:	687a      	ldr	r2, [r7, #4]
 801e32c:	429a      	cmp	r2, r3
 801e32e:	d117      	bne.n	801e360 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the head pointer.  */
                *(list_head) =  TX_NULL;
 801e330:	697b      	ldr	r3, [r7, #20]
 801e332:	2200      	movs	r2, #0
 801e334:	601a      	str	r2, [r3, #0]
 801e336:	e013      	b.n	801e360 <_tx_timer_system_deactivate+0x5c>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   timer_ptr -> tx_timer_internal_active_previous;
 801e338:	687b      	ldr	r3, [r7, #4]
 801e33a:	695b      	ldr	r3, [r3, #20]
 801e33c:	60fb      	str	r3, [r7, #12]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 801e33e:	693b      	ldr	r3, [r7, #16]
 801e340:	68fa      	ldr	r2, [r7, #12]
 801e342:	615a      	str	r2, [r3, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 801e344:	68fb      	ldr	r3, [r7, #12]
 801e346:	693a      	ldr	r2, [r7, #16]
 801e348:	611a      	str	r2, [r3, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 801e34a:	697b      	ldr	r3, [r7, #20]
 801e34c:	681b      	ldr	r3, [r3, #0]
 801e34e:	687a      	ldr	r2, [r7, #4]
 801e350:	429a      	cmp	r2, r3
 801e352:	d105      	bne.n	801e360 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the next timer in the list with the list head pointer.  */
                next_timer -> tx_timer_internal_list_head =  list_head;
 801e354:	693b      	ldr	r3, [r7, #16]
 801e356:	697a      	ldr	r2, [r7, #20]
 801e358:	619a      	str	r2, [r3, #24]

                /* Update the head pointer.  */
                *(list_head) =  next_timer;
 801e35a:	697b      	ldr	r3, [r7, #20]
 801e35c:	693a      	ldr	r2, [r7, #16]
 801e35e:	601a      	str	r2, [r3, #0]
            }
        }

        /* Clear the timer's list head pointer.  */
        timer_ptr -> tx_timer_internal_list_head =  TX_NULL;
 801e360:	687b      	ldr	r3, [r7, #4]
 801e362:	2200      	movs	r2, #0
 801e364:	619a      	str	r2, [r3, #24]
    }
}
 801e366:	bf00      	nop
 801e368:	371c      	adds	r7, #28
 801e36a:	46bd      	mov	sp, r7
 801e36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e370:	4770      	bx	lr
	...

0801e374 <_tx_timer_thread_entry>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
#ifndef TX_TIMER_PROCESS_IN_ISR
VOID  _tx_timer_thread_entry(ULONG timer_thread_input)
{
 801e374:	b580      	push	{r7, lr}
 801e376:	b098      	sub	sp, #96	; 0x60
 801e378:	af00      	add	r7, sp, #0
 801e37a:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *reactivate_timer;
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *previous_timer;
TX_TIMER_INTERNAL           *current_timer;
VOID                        (*timeout_function)(ULONG id);
ULONG                       timeout_param =  ((ULONG) 0);
 801e37c:	2300      	movs	r3, #0
 801e37e:	657b      	str	r3, [r7, #84]	; 0x54
#endif


    /* Make sure the timer input is correct.  This also gets rid of the
       silly compiler warnings.  */
    if (timer_thread_input == TX_TIMER_ID)
 801e380:	687b      	ldr	r3, [r7, #4]
 801e382:	4a73      	ldr	r2, [pc, #460]	; (801e550 <_tx_timer_thread_entry+0x1dc>)
 801e384:	4293      	cmp	r3, r2
 801e386:	f040 80de 	bne.w	801e546 <_tx_timer_thread_entry+0x1d2>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801e38a:	f3ef 8310 	mrs	r3, PRIMASK
 801e38e:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 801e390:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 801e392:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 801e394:	b672      	cpsid	i
    return(int_posture);
 801e396:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        {

            /* First, move the current list pointer and clear the timer
               expired value.  This allows the interrupt handling portion
               to continue looking for timer expirations.  */
            TX_DISABLE
 801e398:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Save the current timer expiration list pointer.  */
            expired_timers =  *_tx_timer_current_ptr;
 801e39a:	4b6e      	ldr	r3, [pc, #440]	; (801e554 <_tx_timer_thread_entry+0x1e0>)
 801e39c:	681b      	ldr	r3, [r3, #0]
 801e39e:	681b      	ldr	r3, [r3, #0]
 801e3a0:	60fb      	str	r3, [r7, #12]

            /* Modify the head pointer in the first timer in the list, if there
               is one!  */
            if (expired_timers != TX_NULL)
 801e3a2:	68fb      	ldr	r3, [r7, #12]
 801e3a4:	2b00      	cmp	r3, #0
 801e3a6:	d003      	beq.n	801e3b0 <_tx_timer_thread_entry+0x3c>
            {

                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
 801e3a8:	68fb      	ldr	r3, [r7, #12]
 801e3aa:	f107 020c 	add.w	r2, r7, #12
 801e3ae:	619a      	str	r2, [r3, #24]
            }

            /* Set the current list pointer to NULL.  */
            *_tx_timer_current_ptr =  TX_NULL;
 801e3b0:	4b68      	ldr	r3, [pc, #416]	; (801e554 <_tx_timer_thread_entry+0x1e0>)
 801e3b2:	681b      	ldr	r3, [r3, #0]
 801e3b4:	2200      	movs	r2, #0
 801e3b6:	601a      	str	r2, [r3, #0]

            /* Move the current pointer up one timer entry wrap if we get to
               the end of the list.  */
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
 801e3b8:	4b66      	ldr	r3, [pc, #408]	; (801e554 <_tx_timer_thread_entry+0x1e0>)
 801e3ba:	681b      	ldr	r3, [r3, #0]
 801e3bc:	3304      	adds	r3, #4
 801e3be:	4a65      	ldr	r2, [pc, #404]	; (801e554 <_tx_timer_thread_entry+0x1e0>)
 801e3c0:	6013      	str	r3, [r2, #0]
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 801e3c2:	4b64      	ldr	r3, [pc, #400]	; (801e554 <_tx_timer_thread_entry+0x1e0>)
 801e3c4:	681a      	ldr	r2, [r3, #0]
 801e3c6:	4b64      	ldr	r3, [pc, #400]	; (801e558 <_tx_timer_thread_entry+0x1e4>)
 801e3c8:	681b      	ldr	r3, [r3, #0]
 801e3ca:	429a      	cmp	r2, r3
 801e3cc:	d103      	bne.n	801e3d6 <_tx_timer_thread_entry+0x62>
            {

                _tx_timer_current_ptr =  _tx_timer_list_start;
 801e3ce:	4b63      	ldr	r3, [pc, #396]	; (801e55c <_tx_timer_thread_entry+0x1e8>)
 801e3d0:	681b      	ldr	r3, [r3, #0]
 801e3d2:	4a60      	ldr	r2, [pc, #384]	; (801e554 <_tx_timer_thread_entry+0x1e0>)
 801e3d4:	6013      	str	r3, [r2, #0]
            }

            /* Clear the expired flag.  */
            _tx_timer_expired =  TX_FALSE;
 801e3d6:	4b62      	ldr	r3, [pc, #392]	; (801e560 <_tx_timer_thread_entry+0x1ec>)
 801e3d8:	2200      	movs	r2, #0
 801e3da:	601a      	str	r2, [r3, #0]
 801e3dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801e3de:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801e3e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e3e2:	f383 8810 	msr	PRIMASK, r3
}
 801e3e6:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801e3e8:	f3ef 8310 	mrs	r3, PRIMASK
 801e3ec:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 801e3ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 801e3f0:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 801e3f2:	b672      	cpsid	i
    return(int_posture);
 801e3f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 801e3f6:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Next, process the expiration of the associated timers at this
               time slot.  */
            while (expired_timers != TX_NULL)
 801e3f8:	e07f      	b.n	801e4fa <_tx_timer_thread_entry+0x186>
            {

                /* Something is on the list.  Remove it and process the expiration.  */
                current_timer =  expired_timers;
 801e3fa:	68fb      	ldr	r3, [r7, #12]
 801e3fc:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Pickup the next timer.  */
                next_timer =  expired_timers -> tx_timer_internal_active_next;
 801e3fe:	68fb      	ldr	r3, [r7, #12]
 801e400:	691b      	ldr	r3, [r3, #16]
 801e402:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Set the reactivate_timer to NULL.  */
                reactivate_timer =  TX_NULL;
 801e404:	2300      	movs	r3, #0
 801e406:	60bb      	str	r3, [r7, #8]

                /* Determine if this is the only timer.  */
                if (current_timer == next_timer)
 801e408:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801e40a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801e40c:	429a      	cmp	r2, r3
 801e40e:	d102      	bne.n	801e416 <_tx_timer_thread_entry+0xa2>
                {

                    /* Yes, this is the only timer in the list.  */

                    /* Set the head pointer to NULL.  */
                    expired_timers =  TX_NULL;
 801e410:	2300      	movs	r3, #0
 801e412:	60fb      	str	r3, [r7, #12]
 801e414:	e00e      	b.n	801e434 <_tx_timer_thread_entry+0xc0>
                {

                    /* No, not the only expired timer.  */

                    /* Remove this timer from the expired list.  */
                    previous_timer =                                   current_timer -> tx_timer_internal_active_previous;
 801e416:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801e418:	695b      	ldr	r3, [r3, #20]
 801e41a:	647b      	str	r3, [r7, #68]	; 0x44
                    next_timer -> tx_timer_internal_active_previous =  previous_timer;
 801e41c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801e41e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801e420:	615a      	str	r2, [r3, #20]
                    previous_timer -> tx_timer_internal_active_next =  next_timer;
 801e422:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801e424:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801e426:	611a      	str	r2, [r3, #16]

                    /* Modify the next timer's list head to point at the current list head.  */
                    next_timer -> tx_timer_internal_list_head =  &expired_timers;
 801e428:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801e42a:	f107 020c 	add.w	r2, r7, #12
 801e42e:	619a      	str	r2, [r3, #24]

                    /* Set the list head pointer.  */
                    expired_timers =  next_timer;
 801e430:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801e432:	60fb      	str	r3, [r7, #12]

                /* In any case, the timer is now off of the expired list.  */

                /* Determine if the timer has expired or if it is just a really
                   big timer that needs to be placed in the list again.  */
                if (current_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 801e434:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801e436:	681b      	ldr	r3, [r3, #0]
 801e438:	2b20      	cmp	r3, #32
 801e43a:	d911      	bls.n	801e460 <_tx_timer_thread_entry+0xec>
                    }
#endif

                    /* Decrement the remaining ticks of the timer.  */
                    current_timer -> tx_timer_internal_remaining_ticks =
                            current_timer -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 801e43c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801e43e:	681b      	ldr	r3, [r3, #0]
 801e440:	f1a3 0220 	sub.w	r2, r3, #32
                    current_timer -> tx_timer_internal_remaining_ticks =
 801e444:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801e446:	601a      	str	r2, [r3, #0]

                    /* Set the timeout function to NULL in order to bypass the
                       expiration.  */
                    timeout_function =  TX_NULL;
 801e448:	2300      	movs	r3, #0
 801e44a:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Make the timer appear that it is still active while interrupts
                       are enabled.  This will permit proper processing of a timer
                       deactivate from an ISR.  */
                    current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 801e44c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801e44e:	f107 0208 	add.w	r2, r7, #8
 801e452:	619a      	str	r2, [r3, #24]
                    current_timer -> tx_timer_internal_active_next =  current_timer;
 801e454:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801e456:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801e458:	611a      	str	r2, [r3, #16]

                    /* Setup the temporary timer list head pointer.  */
                    reactivate_timer =  current_timer;
 801e45a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801e45c:	60bb      	str	r3, [r7, #8]
 801e45e:	e01a      	b.n	801e496 <_tx_timer_thread_entry+0x122>
                    }
#endif

                    /* Copy the calling function and ID into local variables before interrupts
                       are re-enabled.  */
                    timeout_function =  current_timer -> tx_timer_internal_timeout_function;
 801e460:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801e462:	689b      	ldr	r3, [r3, #8]
 801e464:	65bb      	str	r3, [r7, #88]	; 0x58
                    timeout_param =     current_timer -> tx_timer_internal_timeout_param;
 801e466:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801e468:	68db      	ldr	r3, [r3, #12]
 801e46a:	657b      	str	r3, [r7, #84]	; 0x54

                    /* Copy the reinitialize ticks into the remaining ticks.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  current_timer -> tx_timer_internal_re_initialize_ticks;
 801e46c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801e46e:	685a      	ldr	r2, [r3, #4]
 801e470:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801e472:	601a      	str	r2, [r3, #0]

                    /* Determine if the timer should be reactivated.  */
                    if (current_timer -> tx_timer_internal_remaining_ticks != ((ULONG) 0))
 801e474:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801e476:	681b      	ldr	r3, [r3, #0]
 801e478:	2b00      	cmp	r3, #0
 801e47a:	d009      	beq.n	801e490 <_tx_timer_thread_entry+0x11c>

                        /* Make the timer appear that it is still active while processing
                           the expiration routine and with interrupts enabled.  This will
                           permit proper processing of a timer deactivate from both the
                           expiration routine and an ISR.  */
                        current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 801e47c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801e47e:	f107 0208 	add.w	r2, r7, #8
 801e482:	619a      	str	r2, [r3, #24]
                        current_timer -> tx_timer_internal_active_next =  current_timer;
 801e484:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801e486:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801e488:	611a      	str	r2, [r3, #16]

                        /* Setup the temporary timer list head pointer.  */
                        reactivate_timer =  current_timer;
 801e48a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801e48c:	60bb      	str	r3, [r7, #8]
 801e48e:	e002      	b.n	801e496 <_tx_timer_thread_entry+0x122>
                    else
                    {

                        /* Set the list pointer of this timer to NULL.  This is used to indicate
                           the timer is no longer active.  */
                        current_timer -> tx_timer_internal_list_head =  TX_NULL;
 801e490:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801e492:	2200      	movs	r2, #0
 801e494:	619a      	str	r2, [r3, #24]
                    }
                }

                /* Set pointer to indicate the expired timer that is currently being processed.  */
                _tx_timer_expired_timer_ptr =  current_timer;
 801e496:	4a33      	ldr	r2, [pc, #204]	; (801e564 <_tx_timer_thread_entry+0x1f0>)
 801e498:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801e49a:	6013      	str	r3, [r2, #0]
 801e49c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801e49e:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801e4a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e4a2:	f383 8810 	msr	PRIMASK, r3
}
 801e4a6:	bf00      	nop

                /* Restore interrupts for timer expiration call.  */
                TX_RESTORE

                /* Call the timer-expiration function, if non-NULL.  */
                if (timeout_function != TX_NULL)
 801e4a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801e4aa:	2b00      	cmp	r3, #0
 801e4ac:	d002      	beq.n	801e4b4 <_tx_timer_thread_entry+0x140>
                {

                    (timeout_function) (timeout_param);
 801e4ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801e4b0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801e4b2:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801e4b4:	f3ef 8310 	mrs	r3, PRIMASK
 801e4b8:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 801e4ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 801e4bc:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 801e4be:	b672      	cpsid	i
    return(int_posture);
 801e4c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                }

                /* Lockout interrupts again.  */
                TX_DISABLE
 801e4c2:	65fb      	str	r3, [r7, #92]	; 0x5c

                /* Clear expired timer pointer.  */
                _tx_timer_expired_timer_ptr =  TX_NULL;
 801e4c4:	4b27      	ldr	r3, [pc, #156]	; (801e564 <_tx_timer_thread_entry+0x1f0>)
 801e4c6:	2200      	movs	r2, #0
 801e4c8:	601a      	str	r2, [r3, #0]

                /* Determine if the timer needs to be reactivated.  */
                if (reactivate_timer == current_timer)
 801e4ca:	68bb      	ldr	r3, [r7, #8]
 801e4cc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801e4ce:	429a      	cmp	r2, r3
 801e4d0:	d105      	bne.n	801e4de <_tx_timer_thread_entry+0x16a>
#else

                    /* Reactivate through the timer activate function.  */

                    /* Clear the list head for the timer activate call.  */
                    current_timer -> tx_timer_internal_list_head = TX_NULL;
 801e4d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801e4d4:	2200      	movs	r2, #0
 801e4d6:	619a      	str	r2, [r3, #24]

                    /* Activate the current timer.  */
                    _tx_timer_system_activate(current_timer);
 801e4d8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801e4da:	f7ff feb1 	bl	801e240 <_tx_timer_system_activate>
 801e4de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801e4e0:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801e4e2:	69bb      	ldr	r3, [r7, #24]
 801e4e4:	f383 8810 	msr	PRIMASK, r3
}
 801e4e8:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801e4ea:	f3ef 8310 	mrs	r3, PRIMASK
 801e4ee:	623b      	str	r3, [r7, #32]
    return(posture);
 801e4f0:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 801e4f2:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 801e4f4:	b672      	cpsid	i
    return(int_posture);
 801e4f6:	69fb      	ldr	r3, [r7, #28]

                /* Restore interrupts.  */
                TX_RESTORE

                /* Lockout interrupts again.  */
                TX_DISABLE
 801e4f8:	65fb      	str	r3, [r7, #92]	; 0x5c
            while (expired_timers != TX_NULL)
 801e4fa:	68fb      	ldr	r3, [r7, #12]
 801e4fc:	2b00      	cmp	r3, #0
 801e4fe:	f47f af7c 	bne.w	801e3fa <_tx_timer_thread_entry+0x86>

            /* Finally, suspend this thread and wait for the next expiration.  */

            /* Determine if another expiration took place while we were in this
               thread.  If so, process another expiration.  */
            if (_tx_timer_expired == TX_FALSE)
 801e502:	4b17      	ldr	r3, [pc, #92]	; (801e560 <_tx_timer_thread_entry+0x1ec>)
 801e504:	681b      	ldr	r3, [r3, #0]
 801e506:	2b00      	cmp	r3, #0
 801e508:	d116      	bne.n	801e538 <_tx_timer_thread_entry+0x1c4>
            {

                /* Otherwise, no timer expiration, so suspend the thread.  */

                /* Build pointer to the timer thread.  */
                thread_ptr =  &_tx_timer_thread;
 801e50a:	4b17      	ldr	r3, [pc, #92]	; (801e568 <_tx_timer_thread_entry+0x1f4>)
 801e50c:	653b      	str	r3, [r7, #80]	; 0x50

                /* Set the status to suspending, in order to indicate the
                   suspension is in progress.  */
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 801e50e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801e510:	2203      	movs	r2, #3
 801e512:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag. */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 801e514:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801e516:	2201      	movs	r2, #1
 801e518:	639a      	str	r2, [r3, #56]	; 0x38

                /* Increment the preempt disable count prior to suspending.  */
                _tx_thread_preempt_disable++;
 801e51a:	4b14      	ldr	r3, [pc, #80]	; (801e56c <_tx_timer_thread_entry+0x1f8>)
 801e51c:	681b      	ldr	r3, [r3, #0]
 801e51e:	3301      	adds	r3, #1
 801e520:	4a12      	ldr	r2, [pc, #72]	; (801e56c <_tx_timer_thread_entry+0x1f8>)
 801e522:	6013      	str	r3, [r2, #0]
 801e524:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801e526:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801e528:	697b      	ldr	r3, [r7, #20]
 801e52a:	f383 8810 	msr	PRIMASK, r3
}
 801e52e:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 801e530:	6d38      	ldr	r0, [r7, #80]	; 0x50
 801e532:	f7ff fbbf 	bl	801dcb4 <_tx_thread_system_suspend>
 801e536:	e728      	b.n	801e38a <_tx_timer_thread_entry+0x16>
 801e538:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801e53a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801e53c:	693b      	ldr	r3, [r7, #16]
 801e53e:	f383 8810 	msr	PRIMASK, r3
}
 801e542:	bf00      	nop
            TX_DISABLE
 801e544:	e721      	b.n	801e38a <_tx_timer_thread_entry+0x16>

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif

}
 801e546:	bf00      	nop
 801e548:	3760      	adds	r7, #96	; 0x60
 801e54a:	46bd      	mov	sp, r7
 801e54c:	bd80      	pop	{r7, pc}
 801e54e:	bf00      	nop
 801e550:	4154494d 	.word	0x4154494d
 801e554:	24005200 	.word	0x24005200
 801e558:	240051fc 	.word	0x240051fc
 801e55c:	240051f8 	.word	0x240051f8
 801e560:	24005204 	.word	0x24005204
 801e564:	24005210 	.word	0x24005210
 801e568:	24005214 	.word	0x24005214
 801e56c:	24005164 	.word	0x24005164

0801e570 <_txe_byte_allocate>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr,
                                    ULONG memory_size,  ULONG wait_option)
{
 801e570:	b580      	push	{r7, lr}
 801e572:	b08a      	sub	sp, #40	; 0x28
 801e574:	af00      	add	r7, sp, #0
 801e576:	60f8      	str	r0, [r7, #12]
 801e578:	60b9      	str	r1, [r7, #8]
 801e57a:	607a      	str	r2, [r7, #4]
 801e57c:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 801e57e:	2300      	movs	r3, #0
 801e580:	627b      	str	r3, [r7, #36]	; 0x24

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 801e582:	68fb      	ldr	r3, [r7, #12]
 801e584:	2b00      	cmp	r3, #0
 801e586:	d102      	bne.n	801e58e <_txe_byte_allocate+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 801e588:	2302      	movs	r3, #2
 801e58a:	627b      	str	r3, [r7, #36]	; 0x24
 801e58c:	e029      	b.n	801e5e2 <_txe_byte_allocate+0x72>
    }

    /* Now check for invalid pool ID.  */
    else if  (pool_ptr -> tx_byte_pool_id != TX_BYTE_POOL_ID)
 801e58e:	68fb      	ldr	r3, [r7, #12]
 801e590:	681b      	ldr	r3, [r3, #0]
 801e592:	4a2d      	ldr	r2, [pc, #180]	; (801e648 <_txe_byte_allocate+0xd8>)
 801e594:	4293      	cmp	r3, r2
 801e596:	d002      	beq.n	801e59e <_txe_byte_allocate+0x2e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 801e598:	2302      	movs	r3, #2
 801e59a:	627b      	str	r3, [r7, #36]	; 0x24
 801e59c:	e021      	b.n	801e5e2 <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid destination for return pointer.  */
    else if (memory_ptr == TX_NULL)
 801e59e:	68bb      	ldr	r3, [r7, #8]
 801e5a0:	2b00      	cmp	r3, #0
 801e5a2:	d102      	bne.n	801e5aa <_txe_byte_allocate+0x3a>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 801e5a4:	2303      	movs	r3, #3
 801e5a6:	627b      	str	r3, [r7, #36]	; 0x24
 801e5a8:	e01b      	b.n	801e5e2 <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid memory size.  */
    else if (memory_size == ((ULONG) 0))
 801e5aa:	687b      	ldr	r3, [r7, #4]
 801e5ac:	2b00      	cmp	r3, #0
 801e5ae:	d102      	bne.n	801e5b6 <_txe_byte_allocate+0x46>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 801e5b0:	2305      	movs	r3, #5
 801e5b2:	627b      	str	r3, [r7, #36]	; 0x24
 801e5b4:	e015      	b.n	801e5e2 <_txe_byte_allocate+0x72>
    }

    /* Determine if the size is greater than the pool size.  */
    else if (memory_size > pool_ptr -> tx_byte_pool_size)
 801e5b6:	68fb      	ldr	r3, [r7, #12]
 801e5b8:	69db      	ldr	r3, [r3, #28]
 801e5ba:	687a      	ldr	r2, [r7, #4]
 801e5bc:	429a      	cmp	r2, r3
 801e5be:	d902      	bls.n	801e5c6 <_txe_byte_allocate+0x56>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 801e5c0:	2305      	movs	r3, #5
 801e5c2:	627b      	str	r3, [r7, #36]	; 0x24
 801e5c4:	e00d      	b.n	801e5e2 <_txe_byte_allocate+0x72>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 801e5c6:	683b      	ldr	r3, [r7, #0]
 801e5c8:	2b00      	cmp	r3, #0
 801e5ca:	d00a      	beq.n	801e5e2 <_txe_byte_allocate+0x72>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801e5cc:	f3ef 8305 	mrs	r3, IPSR
 801e5d0:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 801e5d2:	69fa      	ldr	r2, [r7, #28]
        {

            /* Is call from ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 801e5d4:	4b1d      	ldr	r3, [pc, #116]	; (801e64c <_txe_byte_allocate+0xdc>)
 801e5d6:	681b      	ldr	r3, [r3, #0]
 801e5d8:	4313      	orrs	r3, r2
 801e5da:	2b00      	cmp	r3, #0
 801e5dc:	d001      	beq.n	801e5e2 <_txe_byte_allocate+0x72>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 801e5de:	2304      	movs	r3, #4
 801e5e0:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Check for timer execution.  */
    if (status == TX_SUCCESS)
 801e5e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e5e4:	2b00      	cmp	r3, #0
 801e5e6:	d108      	bne.n	801e5fa <_txe_byte_allocate+0x8a>
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 801e5e8:	4b19      	ldr	r3, [pc, #100]	; (801e650 <_txe_byte_allocate+0xe0>)
 801e5ea:	681b      	ldr	r3, [r3, #0]
 801e5ec:	623b      	str	r3, [r7, #32]

        /* Check for invalid caller of this function.  First check for a calling thread.  */
        if (thread_ptr == &_tx_timer_thread)
 801e5ee:	6a3b      	ldr	r3, [r7, #32]
 801e5f0:	4a18      	ldr	r2, [pc, #96]	; (801e654 <_txe_byte_allocate+0xe4>)
 801e5f2:	4293      	cmp	r3, r2
 801e5f4:	d101      	bne.n	801e5fa <_txe_byte_allocate+0x8a>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 801e5f6:	2313      	movs	r3, #19
 801e5f8:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
#endif

    /* Is everything still okay?  */
    if (status == TX_SUCCESS)
 801e5fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e5fc:	2b00      	cmp	r3, #0
 801e5fe:	d114      	bne.n	801e62a <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801e600:	f3ef 8305 	mrs	r3, IPSR
 801e604:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 801e606:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 801e608:	4b10      	ldr	r3, [pc, #64]	; (801e64c <_txe_byte_allocate+0xdc>)
 801e60a:	681b      	ldr	r3, [r3, #0]
 801e60c:	4313      	orrs	r3, r2
 801e60e:	2b00      	cmp	r3, #0
 801e610:	d00b      	beq.n	801e62a <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801e612:	f3ef 8305 	mrs	r3, IPSR
 801e616:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 801e618:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 801e61a:	4b0c      	ldr	r3, [pc, #48]	; (801e64c <_txe_byte_allocate+0xdc>)
 801e61c:	681b      	ldr	r3, [r3, #0]
 801e61e:	4313      	orrs	r3, r2
 801e620:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 801e624:	d201      	bcs.n	801e62a <_txe_byte_allocate+0xba>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 801e626:	2313      	movs	r3, #19
 801e628:	627b      	str	r3, [r7, #36]	; 0x24
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 801e62a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e62c:	2b00      	cmp	r3, #0
 801e62e:	d106      	bne.n	801e63e <_txe_byte_allocate+0xce>
    {

        /* Call actual byte memory allocate function.  */
        status =  _tx_byte_allocate(pool_ptr, memory_ptr, memory_size,  wait_option);
 801e630:	683b      	ldr	r3, [r7, #0]
 801e632:	687a      	ldr	r2, [r7, #4]
 801e634:	68b9      	ldr	r1, [r7, #8]
 801e636:	68f8      	ldr	r0, [r7, #12]
 801e638:	f7fd fb74 	bl	801bd24 <_tx_byte_allocate>
 801e63c:	6278      	str	r0, [r7, #36]	; 0x24
    }

    /* Return completion status.  */
    return(status);
 801e63e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801e640:	4618      	mov	r0, r3
 801e642:	3728      	adds	r7, #40	; 0x28
 801e644:	46bd      	mov	sp, r7
 801e646:	bd80      	pop	{r7, pc}
 801e648:	42595445 	.word	0x42595445
 801e64c:	24000070 	.word	0x24000070
 801e650:	240050cc 	.word	0x240050cc
 801e654:	24005214 	.word	0x24005214

0801e658 <_txe_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 801e658:	b580      	push	{r7, lr}
 801e65a:	b092      	sub	sp, #72	; 0x48
 801e65c:	af00      	add	r7, sp, #0
 801e65e:	60f8      	str	r0, [r7, #12]
 801e660:	60b9      	str	r1, [r7, #8]
 801e662:	607a      	str	r2, [r7, #4]
 801e664:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 801e666:	2300      	movs	r3, #0
 801e668:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 801e66a:	68fb      	ldr	r3, [r7, #12]
 801e66c:	2b00      	cmp	r3, #0
 801e66e:	d102      	bne.n	801e676 <_txe_byte_pool_create+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 801e670:	2302      	movs	r3, #2
 801e672:	647b      	str	r3, [r7, #68]	; 0x44
 801e674:	e075      	b.n	801e762 <_txe_byte_pool_create+0x10a>
    }

    /* Now see if the pool control block size is valid.  */
    else if (pool_control_block_size != (sizeof(TX_BYTE_POOL)))
 801e676:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801e678:	2b34      	cmp	r3, #52	; 0x34
 801e67a:	d002      	beq.n	801e682 <_txe_byte_pool_create+0x2a>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 801e67c:	2302      	movs	r3, #2
 801e67e:	647b      	str	r3, [r7, #68]	; 0x44
 801e680:	e06f      	b.n	801e762 <_txe_byte_pool_create+0x10a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801e682:	f3ef 8310 	mrs	r3, PRIMASK
 801e686:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 801e688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 801e68a:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 801e68c:	b672      	cpsid	i
    return(int_posture);
 801e68e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 801e690:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 801e692:	4b3b      	ldr	r3, [pc, #236]	; (801e780 <_txe_byte_pool_create+0x128>)
 801e694:	681b      	ldr	r3, [r3, #0]
 801e696:	3301      	adds	r3, #1
 801e698:	4a39      	ldr	r2, [pc, #228]	; (801e780 <_txe_byte_pool_create+0x128>)
 801e69a:	6013      	str	r3, [r2, #0]
 801e69c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e69e:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801e6a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e6a2:	f383 8810 	msr	PRIMASK, r3
}
 801e6a6:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_pool =   _tx_byte_pool_created_ptr;
 801e6a8:	4b36      	ldr	r3, [pc, #216]	; (801e784 <_txe_byte_pool_create+0x12c>)
 801e6aa:	681b      	ldr	r3, [r3, #0]
 801e6ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 801e6ae:	2300      	movs	r3, #0
 801e6b0:	643b      	str	r3, [r7, #64]	; 0x40
 801e6b2:	e009      	b.n	801e6c8 <_txe_byte_pool_create+0x70>
        {

            /* Determine if this byte pool matches the pool in the list.  */
            if (pool_ptr == next_pool)
 801e6b4:	68fa      	ldr	r2, [r7, #12]
 801e6b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e6b8:	429a      	cmp	r2, r3
 801e6ba:	d00b      	beq.n	801e6d4 <_txe_byte_pool_create+0x7c>
            }
            else
            {

                /* Move to the next pool.  */
                next_pool =  next_pool -> tx_byte_pool_created_next;
 801e6bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e6be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e6c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 801e6c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801e6c4:	3301      	adds	r3, #1
 801e6c6:	643b      	str	r3, [r7, #64]	; 0x40
 801e6c8:	4b2f      	ldr	r3, [pc, #188]	; (801e788 <_txe_byte_pool_create+0x130>)
 801e6ca:	681b      	ldr	r3, [r3, #0]
 801e6cc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801e6ce:	429a      	cmp	r2, r3
 801e6d0:	d3f0      	bcc.n	801e6b4 <_txe_byte_pool_create+0x5c>
 801e6d2:	e000      	b.n	801e6d6 <_txe_byte_pool_create+0x7e>
                break;
 801e6d4:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801e6d6:	f3ef 8310 	mrs	r3, PRIMASK
 801e6da:	623b      	str	r3, [r7, #32]
    return(posture);
 801e6dc:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 801e6de:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 801e6e0:	b672      	cpsid	i
    return(int_posture);
 801e6e2:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 801e6e4:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 801e6e6:	4b26      	ldr	r3, [pc, #152]	; (801e780 <_txe_byte_pool_create+0x128>)
 801e6e8:	681b      	ldr	r3, [r3, #0]
 801e6ea:	3b01      	subs	r3, #1
 801e6ec:	4a24      	ldr	r2, [pc, #144]	; (801e780 <_txe_byte_pool_create+0x128>)
 801e6ee:	6013      	str	r3, [r2, #0]
 801e6f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e6f2:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801e6f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e6f6:	f383 8810 	msr	PRIMASK, r3
}
 801e6fa:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 801e6fc:	f7ff f9a0 	bl	801da40 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate pool.  */
        if (pool_ptr == next_pool)
 801e700:	68fa      	ldr	r2, [r7, #12]
 801e702:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e704:	429a      	cmp	r2, r3
 801e706:	d102      	bne.n	801e70e <_txe_byte_pool_create+0xb6>
        {

            /* Pool is already created, return appropriate error code.  */
            status =  TX_POOL_ERROR;
 801e708:	2302      	movs	r3, #2
 801e70a:	647b      	str	r3, [r7, #68]	; 0x44
 801e70c:	e029      	b.n	801e762 <_txe_byte_pool_create+0x10a>
        }

        /* Check for an invalid starting address.  */
        else if (pool_start == TX_NULL)
 801e70e:	687b      	ldr	r3, [r7, #4]
 801e710:	2b00      	cmp	r3, #0
 801e712:	d102      	bne.n	801e71a <_txe_byte_pool_create+0xc2>
        {

            /* Null starting address pointer, return appropriate error.  */
            status =  TX_PTR_ERROR;
 801e714:	2303      	movs	r3, #3
 801e716:	647b      	str	r3, [r7, #68]	; 0x44
 801e718:	e023      	b.n	801e762 <_txe_byte_pool_create+0x10a>
        }

        /* Check for invalid pool size.  */
        else if (pool_size < TX_BYTE_POOL_MIN)
 801e71a:	683b      	ldr	r3, [r7, #0]
 801e71c:	2b63      	cmp	r3, #99	; 0x63
 801e71e:	d802      	bhi.n	801e726 <_txe_byte_pool_create+0xce>
        {

            /* Pool not big enough, return appropriate error.  */
            status =  TX_SIZE_ERROR;
 801e720:	2305      	movs	r3, #5
 801e722:	647b      	str	r3, [r7, #68]	; 0x44
 801e724:	e01d      	b.n	801e762 <_txe_byte_pool_create+0x10a>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 801e726:	4b19      	ldr	r3, [pc, #100]	; (801e78c <_txe_byte_pool_create+0x134>)
 801e728:	681b      	ldr	r3, [r3, #0]
 801e72a:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 801e72c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801e72e:	4a18      	ldr	r2, [pc, #96]	; (801e790 <_txe_byte_pool_create+0x138>)
 801e730:	4293      	cmp	r3, r2
 801e732:	d101      	bne.n	801e738 <_txe_byte_pool_create+0xe0>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 801e734:	2313      	movs	r3, #19
 801e736:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801e738:	f3ef 8305 	mrs	r3, IPSR
 801e73c:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 801e73e:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 801e740:	4b14      	ldr	r3, [pc, #80]	; (801e794 <_txe_byte_pool_create+0x13c>)
 801e742:	681b      	ldr	r3, [r3, #0]
 801e744:	4313      	orrs	r3, r2
 801e746:	2b00      	cmp	r3, #0
 801e748:	d00b      	beq.n	801e762 <_txe_byte_pool_create+0x10a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801e74a:	f3ef 8305 	mrs	r3, IPSR
 801e74e:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 801e750:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 801e752:	4b10      	ldr	r3, [pc, #64]	; (801e794 <_txe_byte_pool_create+0x13c>)
 801e754:	681b      	ldr	r3, [r3, #0]
 801e756:	4313      	orrs	r3, r2
 801e758:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 801e75c:	d201      	bcs.n	801e762 <_txe_byte_pool_create+0x10a>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 801e75e:	2313      	movs	r3, #19
 801e760:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 801e762:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801e764:	2b00      	cmp	r3, #0
 801e766:	d106      	bne.n	801e776 <_txe_byte_pool_create+0x11e>
    {

        /* Call actual byte pool create function.  */
        status =  _tx_byte_pool_create(pool_ptr, name_ptr, pool_start, pool_size);
 801e768:	683b      	ldr	r3, [r7, #0]
 801e76a:	687a      	ldr	r2, [r7, #4]
 801e76c:	68b9      	ldr	r1, [r7, #8]
 801e76e:	68f8      	ldr	r0, [r7, #12]
 801e770:	f7fd fc1a 	bl	801bfa8 <_tx_byte_pool_create>
 801e774:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 801e776:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 801e778:	4618      	mov	r0, r3
 801e77a:	3748      	adds	r7, #72	; 0x48
 801e77c:	46bd      	mov	sp, r7
 801e77e:	bd80      	pop	{r7, pc}
 801e780:	24005164 	.word	0x24005164
 801e784:	240050bc 	.word	0x240050bc
 801e788:	240050c0 	.word	0x240050c0
 801e78c:	240050cc 	.word	0x240050cc
 801e790:	24005214 	.word	0x24005214
 801e794:	24000070 	.word	0x24000070

0801e798 <_txe_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count, UINT semaphore_control_block_size)
{
 801e798:	b580      	push	{r7, lr}
 801e79a:	b092      	sub	sp, #72	; 0x48
 801e79c:	af00      	add	r7, sp, #0
 801e79e:	60f8      	str	r0, [r7, #12]
 801e7a0:	60b9      	str	r1, [r7, #8]
 801e7a2:	607a      	str	r2, [r7, #4]
 801e7a4:	603b      	str	r3, [r7, #0]
TX_THREAD           *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 801e7a6:	2300      	movs	r3, #0
 801e7a8:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 801e7aa:	68fb      	ldr	r3, [r7, #12]
 801e7ac:	2b00      	cmp	r3, #0
 801e7ae:	d102      	bne.n	801e7b6 <_txe_semaphore_create+0x1e>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 801e7b0:	230c      	movs	r3, #12
 801e7b2:	647b      	str	r3, [r7, #68]	; 0x44
 801e7b4:	e054      	b.n	801e860 <_txe_semaphore_create+0xc8>
    }

    /* Now check for a valid semaphore ID.  */
    else if (semaphore_control_block_size != (sizeof(TX_SEMAPHORE)))
 801e7b6:	683b      	ldr	r3, [r7, #0]
 801e7b8:	2b1c      	cmp	r3, #28
 801e7ba:	d002      	beq.n	801e7c2 <_txe_semaphore_create+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 801e7bc:	230c      	movs	r3, #12
 801e7be:	647b      	str	r3, [r7, #68]	; 0x44
 801e7c0:	e04e      	b.n	801e860 <_txe_semaphore_create+0xc8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801e7c2:	f3ef 8310 	mrs	r3, PRIMASK
 801e7c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 801e7c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 801e7ca:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 801e7cc:	b672      	cpsid	i
    return(int_posture);
 801e7ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 801e7d0:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 801e7d2:	4b36      	ldr	r3, [pc, #216]	; (801e8ac <_txe_semaphore_create+0x114>)
 801e7d4:	681b      	ldr	r3, [r3, #0]
 801e7d6:	3301      	adds	r3, #1
 801e7d8:	4a34      	ldr	r2, [pc, #208]	; (801e8ac <_txe_semaphore_create+0x114>)
 801e7da:	6013      	str	r3, [r2, #0]
 801e7dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e7de:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801e7e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e7e2:	f383 8810 	msr	PRIMASK, r3
}
 801e7e6:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_semaphore =  _tx_semaphore_created_ptr;
 801e7e8:	4b31      	ldr	r3, [pc, #196]	; (801e8b0 <_txe_semaphore_create+0x118>)
 801e7ea:	681b      	ldr	r3, [r3, #0]
 801e7ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 801e7ee:	2300      	movs	r3, #0
 801e7f0:	643b      	str	r3, [r7, #64]	; 0x40
 801e7f2:	e009      	b.n	801e808 <_txe_semaphore_create+0x70>
        {

            /* Determine if this semaphore matches the current semaphore in the list.  */
            if (semaphore_ptr == next_semaphore)
 801e7f4:	68fa      	ldr	r2, [r7, #12]
 801e7f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e7f8:	429a      	cmp	r2, r3
 801e7fa:	d00b      	beq.n	801e814 <_txe_semaphore_create+0x7c>
            }
            else
            {

                /* Move to next semaphore.  */
                next_semaphore =  next_semaphore -> tx_semaphore_created_next;
 801e7fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e7fe:	695b      	ldr	r3, [r3, #20]
 801e800:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 801e802:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801e804:	3301      	adds	r3, #1
 801e806:	643b      	str	r3, [r7, #64]	; 0x40
 801e808:	4b2a      	ldr	r3, [pc, #168]	; (801e8b4 <_txe_semaphore_create+0x11c>)
 801e80a:	681b      	ldr	r3, [r3, #0]
 801e80c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801e80e:	429a      	cmp	r2, r3
 801e810:	d3f0      	bcc.n	801e7f4 <_txe_semaphore_create+0x5c>
 801e812:	e000      	b.n	801e816 <_txe_semaphore_create+0x7e>
                break;
 801e814:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801e816:	f3ef 8310 	mrs	r3, PRIMASK
 801e81a:	623b      	str	r3, [r7, #32]
    return(posture);
 801e81c:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 801e81e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 801e820:	b672      	cpsid	i
    return(int_posture);
 801e822:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 801e824:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 801e826:	4b21      	ldr	r3, [pc, #132]	; (801e8ac <_txe_semaphore_create+0x114>)
 801e828:	681b      	ldr	r3, [r3, #0]
 801e82a:	3b01      	subs	r3, #1
 801e82c:	4a1f      	ldr	r2, [pc, #124]	; (801e8ac <_txe_semaphore_create+0x114>)
 801e82e:	6013      	str	r3, [r2, #0]
 801e830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e832:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801e834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e836:	f383 8810 	msr	PRIMASK, r3
}
 801e83a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 801e83c:	f7ff f900 	bl	801da40 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate semaphore.  */
        if (semaphore_ptr == next_semaphore)
 801e840:	68fa      	ldr	r2, [r7, #12]
 801e842:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e844:	429a      	cmp	r2, r3
 801e846:	d102      	bne.n	801e84e <_txe_semaphore_create+0xb6>
        {

            /* Semaphore is already created, return appropriate error code.  */
            status =  TX_SEMAPHORE_ERROR;
 801e848:	230c      	movs	r3, #12
 801e84a:	647b      	str	r3, [r7, #68]	; 0x44
 801e84c:	e008      	b.n	801e860 <_txe_semaphore_create+0xc8>
#ifndef TX_TIMER_PROCESS_IN_ISR
        else
        {

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 801e84e:	4b1a      	ldr	r3, [pc, #104]	; (801e8b8 <_txe_semaphore_create+0x120>)
 801e850:	681b      	ldr	r3, [r3, #0]
 801e852:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 801e854:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801e856:	4a19      	ldr	r2, [pc, #100]	; (801e8bc <_txe_semaphore_create+0x124>)
 801e858:	4293      	cmp	r3, r2
 801e85a:	d101      	bne.n	801e860 <_txe_semaphore_create+0xc8>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 801e85c:	2313      	movs	r3, #19
 801e85e:	647b      	str	r3, [r7, #68]	; 0x44
        }
#endif
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 801e860:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801e862:	2b00      	cmp	r3, #0
 801e864:	d114      	bne.n	801e890 <_txe_semaphore_create+0xf8>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801e866:	f3ef 8305 	mrs	r3, IPSR
 801e86a:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 801e86c:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 801e86e:	4b14      	ldr	r3, [pc, #80]	; (801e8c0 <_txe_semaphore_create+0x128>)
 801e870:	681b      	ldr	r3, [r3, #0]
 801e872:	4313      	orrs	r3, r2
 801e874:	2b00      	cmp	r3, #0
 801e876:	d00b      	beq.n	801e890 <_txe_semaphore_create+0xf8>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801e878:	f3ef 8305 	mrs	r3, IPSR
 801e87c:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 801e87e:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 801e880:	4b0f      	ldr	r3, [pc, #60]	; (801e8c0 <_txe_semaphore_create+0x128>)
 801e882:	681b      	ldr	r3, [r3, #0]
 801e884:	4313      	orrs	r3, r2
 801e886:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 801e88a:	d201      	bcs.n	801e890 <_txe_semaphore_create+0xf8>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 801e88c:	2313      	movs	r3, #19
 801e88e:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 801e890:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801e892:	2b00      	cmp	r3, #0
 801e894:	d105      	bne.n	801e8a2 <_txe_semaphore_create+0x10a>
    {

        /* Call actual semaphore create function.  */
        status =  _tx_semaphore_create(semaphore_ptr, name_ptr, initial_count);
 801e896:	687a      	ldr	r2, [r7, #4]
 801e898:	68b9      	ldr	r1, [r7, #8]
 801e89a:	68f8      	ldr	r0, [r7, #12]
 801e89c:	f7fe fc74 	bl	801d188 <_tx_semaphore_create>
 801e8a0:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 801e8a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 801e8a4:	4618      	mov	r0, r3
 801e8a6:	3748      	adds	r7, #72	; 0x48
 801e8a8:	46bd      	mov	sp, r7
 801e8aa:	bd80      	pop	{r7, pc}
 801e8ac:	24005164 	.word	0x24005164
 801e8b0:	24005094 	.word	0x24005094
 801e8b4:	24005098 	.word	0x24005098
 801e8b8:	240050cc 	.word	0x240050cc
 801e8bc:	24005214 	.word	0x24005214
 801e8c0:	24000070 	.word	0x24000070

0801e8c4 <_txe_semaphore_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_delete(TX_SEMAPHORE *semaphore_ptr)
{
 801e8c4:	b580      	push	{r7, lr}
 801e8c6:	b086      	sub	sp, #24
 801e8c8:	af00      	add	r7, sp, #0
 801e8ca:	6078      	str	r0, [r7, #4]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 801e8cc:	2300      	movs	r3, #0
 801e8ce:	617b      	str	r3, [r7, #20]

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 801e8d0:	687b      	ldr	r3, [r7, #4]
 801e8d2:	2b00      	cmp	r3, #0
 801e8d4:	d102      	bne.n	801e8dc <_txe_semaphore_delete+0x18>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 801e8d6:	230c      	movs	r3, #12
 801e8d8:	617b      	str	r3, [r7, #20]
 801e8da:	e01c      	b.n	801e916 <_txe_semaphore_delete+0x52>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 801e8dc:	687b      	ldr	r3, [r7, #4]
 801e8de:	681b      	ldr	r3, [r3, #0]
 801e8e0:	4a13      	ldr	r2, [pc, #76]	; (801e930 <_txe_semaphore_delete+0x6c>)
 801e8e2:	4293      	cmp	r3, r2
 801e8e4:	d002      	beq.n	801e8ec <_txe_semaphore_delete+0x28>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 801e8e6:	230c      	movs	r3, #12
 801e8e8:	617b      	str	r3, [r7, #20]
 801e8ea:	e014      	b.n	801e916 <_txe_semaphore_delete+0x52>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801e8ec:	f3ef 8305 	mrs	r3, IPSR
 801e8f0:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 801e8f2:	68fa      	ldr	r2, [r7, #12]
    {

        /* Check for invalid caller of this function.  */

        /* Is the caller an ISR or Initialization?  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 801e8f4:	4b0f      	ldr	r3, [pc, #60]	; (801e934 <_txe_semaphore_delete+0x70>)
 801e8f6:	681b      	ldr	r3, [r3, #0]
 801e8f8:	4313      	orrs	r3, r2
 801e8fa:	2b00      	cmp	r3, #0
 801e8fc:	d002      	beq.n	801e904 <_txe_semaphore_delete+0x40>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 801e8fe:	2313      	movs	r3, #19
 801e900:	617b      	str	r3, [r7, #20]
 801e902:	e008      	b.n	801e916 <_txe_semaphore_delete+0x52>
#ifndef TX_TIMER_PROCESS_IN_ISR
        else
        {

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 801e904:	4b0c      	ldr	r3, [pc, #48]	; (801e938 <_txe_semaphore_delete+0x74>)
 801e906:	681b      	ldr	r3, [r3, #0]
 801e908:	613b      	str	r3, [r7, #16]

            /* Is the caller the system timer thread?  */
            if (thread_ptr == &_tx_timer_thread)
 801e90a:	693b      	ldr	r3, [r7, #16]
 801e90c:	4a0b      	ldr	r2, [pc, #44]	; (801e93c <_txe_semaphore_delete+0x78>)
 801e90e:	4293      	cmp	r3, r2
 801e910:	d101      	bne.n	801e916 <_txe_semaphore_delete+0x52>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 801e912:	2313      	movs	r3, #19
 801e914:	617b      	str	r3, [r7, #20]
        }
#endif
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 801e916:	697b      	ldr	r3, [r7, #20]
 801e918:	2b00      	cmp	r3, #0
 801e91a:	d103      	bne.n	801e924 <_txe_semaphore_delete+0x60>
    {

        /* Call actual semaphore delete function.  */
        status =  _tx_semaphore_delete(semaphore_ptr);
 801e91c:	6878      	ldr	r0, [r7, #4]
 801e91e:	f7fe fc85 	bl	801d22c <_tx_semaphore_delete>
 801e922:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 801e924:	697b      	ldr	r3, [r7, #20]
}
 801e926:	4618      	mov	r0, r3
 801e928:	3718      	adds	r7, #24
 801e92a:	46bd      	mov	sp, r7
 801e92c:	bd80      	pop	{r7, pc}
 801e92e:	bf00      	nop
 801e930:	53454d41 	.word	0x53454d41
 801e934:	24000070 	.word	0x24000070
 801e938:	240050cc 	.word	0x240050cc
 801e93c:	24005214 	.word	0x24005214

0801e940 <_txe_semaphore_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 801e940:	b580      	push	{r7, lr}
 801e942:	b086      	sub	sp, #24
 801e944:	af00      	add	r7, sp, #0
 801e946:	6078      	str	r0, [r7, #4]
 801e948:	6039      	str	r1, [r7, #0]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 801e94a:	2300      	movs	r3, #0
 801e94c:	617b      	str	r3, [r7, #20]

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 801e94e:	687b      	ldr	r3, [r7, #4]
 801e950:	2b00      	cmp	r3, #0
 801e952:	d102      	bne.n	801e95a <_txe_semaphore_get+0x1a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 801e954:	230c      	movs	r3, #12
 801e956:	617b      	str	r3, [r7, #20]
 801e958:	e01f      	b.n	801e99a <_txe_semaphore_get+0x5a>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 801e95a:	687b      	ldr	r3, [r7, #4]
 801e95c:	681b      	ldr	r3, [r3, #0]
 801e95e:	4a15      	ldr	r2, [pc, #84]	; (801e9b4 <_txe_semaphore_get+0x74>)
 801e960:	4293      	cmp	r3, r2
 801e962:	d002      	beq.n	801e96a <_txe_semaphore_get+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 801e964:	230c      	movs	r3, #12
 801e966:	617b      	str	r3, [r7, #20]
 801e968:	e017      	b.n	801e99a <_txe_semaphore_get+0x5a>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 801e96a:	683b      	ldr	r3, [r7, #0]
 801e96c:	2b00      	cmp	r3, #0
 801e96e:	d014      	beq.n	801e99a <_txe_semaphore_get+0x5a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801e970:	f3ef 8305 	mrs	r3, IPSR
 801e974:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 801e976:	68fa      	ldr	r2, [r7, #12]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 801e978:	4b0f      	ldr	r3, [pc, #60]	; (801e9b8 <_txe_semaphore_get+0x78>)
 801e97a:	681b      	ldr	r3, [r3, #0]
 801e97c:	4313      	orrs	r3, r2
 801e97e:	2b00      	cmp	r3, #0
 801e980:	d002      	beq.n	801e988 <_txe_semaphore_get+0x48>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 801e982:	2304      	movs	r3, #4
 801e984:	617b      	str	r3, [r7, #20]
 801e986:	e008      	b.n	801e99a <_txe_semaphore_get+0x5a>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 801e988:	4b0c      	ldr	r3, [pc, #48]	; (801e9bc <_txe_semaphore_get+0x7c>)
 801e98a:	681b      	ldr	r3, [r3, #0]
 801e98c:	613b      	str	r3, [r7, #16]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 801e98e:	693b      	ldr	r3, [r7, #16]
 801e990:	4a0b      	ldr	r2, [pc, #44]	; (801e9c0 <_txe_semaphore_get+0x80>)
 801e992:	4293      	cmp	r3, r2
 801e994:	d101      	bne.n	801e99a <_txe_semaphore_get+0x5a>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 801e996:	2304      	movs	r3, #4
 801e998:	617b      	str	r3, [r7, #20]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 801e99a:	697b      	ldr	r3, [r7, #20]
 801e99c:	2b00      	cmp	r3, #0
 801e99e:	d104      	bne.n	801e9aa <_txe_semaphore_get+0x6a>
    {

        /* Call actual get semaphore function.  */
        status =  _tx_semaphore_get(semaphore_ptr, wait_option);
 801e9a0:	6839      	ldr	r1, [r7, #0]
 801e9a2:	6878      	ldr	r0, [r7, #4]
 801e9a4:	f7fe fcd2 	bl	801d34c <_tx_semaphore_get>
 801e9a8:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 801e9aa:	697b      	ldr	r3, [r7, #20]
}
 801e9ac:	4618      	mov	r0, r3
 801e9ae:	3718      	adds	r7, #24
 801e9b0:	46bd      	mov	sp, r7
 801e9b2:	bd80      	pop	{r7, pc}
 801e9b4:	53454d41 	.word	0x53454d41
 801e9b8:	24000070 	.word	0x24000070
 801e9bc:	240050cc 	.word	0x240050cc
 801e9c0:	24005214 	.word	0x24005214

0801e9c4 <_txe_semaphore_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 801e9c4:	b580      	push	{r7, lr}
 801e9c6:	b084      	sub	sp, #16
 801e9c8:	af00      	add	r7, sp, #0
 801e9ca:	6078      	str	r0, [r7, #4]

UINT        status;


    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 801e9cc:	687b      	ldr	r3, [r7, #4]
 801e9ce:	2b00      	cmp	r3, #0
 801e9d0:	d102      	bne.n	801e9d8 <_txe_semaphore_put+0x14>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 801e9d2:	230c      	movs	r3, #12
 801e9d4:	60fb      	str	r3, [r7, #12]
 801e9d6:	e00b      	b.n	801e9f0 <_txe_semaphore_put+0x2c>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 801e9d8:	687b      	ldr	r3, [r7, #4]
 801e9da:	681b      	ldr	r3, [r3, #0]
 801e9dc:	4a07      	ldr	r2, [pc, #28]	; (801e9fc <_txe_semaphore_put+0x38>)
 801e9de:	4293      	cmp	r3, r2
 801e9e0:	d002      	beq.n	801e9e8 <_txe_semaphore_put+0x24>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 801e9e2:	230c      	movs	r3, #12
 801e9e4:	60fb      	str	r3, [r7, #12]
 801e9e6:	e003      	b.n	801e9f0 <_txe_semaphore_put+0x2c>
    }
    else
    {

        /* Call actual put semaphore function.  */
        status =  _tx_semaphore_put(semaphore_ptr);
 801e9e8:	6878      	ldr	r0, [r7, #4]
 801e9ea:	f7fe fd41 	bl	801d470 <_tx_semaphore_put>
 801e9ee:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 801e9f0:	68fb      	ldr	r3, [r7, #12]
}
 801e9f2:	4618      	mov	r0, r3
 801e9f4:	3710      	adds	r7, #16
 801e9f6:	46bd      	mov	sp, r7
 801e9f8:	bd80      	pop	{r7, pc}
 801e9fa:	bf00      	nop
 801e9fc:	53454d41 	.word	0x53454d41

0801ea00 <_txe_thread_create>:
UINT    _txe_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr,
                VOID (*entry_function)(ULONG id), ULONG entry_input,
                VOID *stack_start, ULONG stack_size,
                UINT priority, UINT preempt_threshold,
                ULONG time_slice, UINT auto_start, UINT thread_control_block_size)
{
 801ea00:	b580      	push	{r7, lr}
 801ea02:	b09a      	sub	sp, #104	; 0x68
 801ea04:	af06      	add	r7, sp, #24
 801ea06:	60f8      	str	r0, [r7, #12]
 801ea08:	60b9      	str	r1, [r7, #8]
 801ea0a:	607a      	str	r2, [r7, #4]
 801ea0c:	603b      	str	r3, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 801ea0e:	2300      	movs	r3, #0
 801ea10:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 801ea12:	68fb      	ldr	r3, [r7, #12]
 801ea14:	2b00      	cmp	r3, #0
 801ea16:	d102      	bne.n	801ea1e <_txe_thread_create+0x1e>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 801ea18:	230e      	movs	r3, #14
 801ea1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 801ea1c:	e0bb      	b.n	801eb96 <_txe_thread_create+0x196>
    }

    /* Now check for invalid thread control block size.  */
    else if (thread_control_block_size != (sizeof(TX_THREAD)))
 801ea1e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801ea20:	2bb0      	cmp	r3, #176	; 0xb0
 801ea22:	d002      	beq.n	801ea2a <_txe_thread_create+0x2a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 801ea24:	230e      	movs	r3, #14
 801ea26:	64fb      	str	r3, [r7, #76]	; 0x4c
 801ea28:	e0b5      	b.n	801eb96 <_txe_thread_create+0x196>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801ea2a:	f3ef 8310 	mrs	r3, PRIMASK
 801ea2e:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 801ea30:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 801ea32:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 801ea34:	b672      	cpsid	i
    return(int_posture);
 801ea36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 801ea38:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 801ea3a:	4b64      	ldr	r3, [pc, #400]	; (801ebcc <_txe_thread_create+0x1cc>)
 801ea3c:	681b      	ldr	r3, [r3, #0]
 801ea3e:	3301      	adds	r3, #1
 801ea40:	4a62      	ldr	r2, [pc, #392]	; (801ebcc <_txe_thread_create+0x1cc>)
 801ea42:	6013      	str	r3, [r2, #0]
 801ea44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ea46:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801ea48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ea4a:	f383 8810 	msr	PRIMASK, r3
}
 801ea4e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        break_flag =   TX_FALSE;
 801ea50:	2300      	movs	r3, #0
 801ea52:	64bb      	str	r3, [r7, #72]	; 0x48
        next_thread =  _tx_thread_created_ptr;
 801ea54:	4b5e      	ldr	r3, [pc, #376]	; (801ebd0 <_txe_thread_create+0x1d0>)
 801ea56:	681b      	ldr	r3, [r3, #0]
 801ea58:	643b      	str	r3, [r7, #64]	; 0x40
        work_ptr =     TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 801ea5a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801ea5c:	63bb      	str	r3, [r7, #56]	; 0x38
        work_ptr =     TX_UCHAR_POINTER_ADD(work_ptr, (stack_size - ((ULONG) 1)));
 801ea5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801ea60:	3b01      	subs	r3, #1
 801ea62:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801ea64:	4413      	add	r3, r2
 801ea66:	63bb      	str	r3, [r7, #56]	; 0x38
        stack_end =    TX_UCHAR_TO_VOID_POINTER_CONVERT(work_ptr);
 801ea68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ea6a:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 801ea6c:	2300      	movs	r3, #0
 801ea6e:	647b      	str	r3, [r7, #68]	; 0x44
 801ea70:	e02b      	b.n	801eaca <_txe_thread_create+0xca>
        {

            /* Determine if this thread matches the thread in the list.  */
            if (thread_ptr == next_thread)
 801ea72:	68fa      	ldr	r2, [r7, #12]
 801ea74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801ea76:	429a      	cmp	r2, r3
 801ea78:	d101      	bne.n	801ea7e <_txe_thread_create+0x7e>
            {

                /* Set the break flag.  */
                break_flag =  TX_TRUE;
 801ea7a:	2301      	movs	r3, #1
 801ea7c:	64bb      	str	r3, [r7, #72]	; 0x48
            }

            /* Determine if we need to break the loop.  */
            if (break_flag == TX_TRUE)
 801ea7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801ea80:	2b01      	cmp	r3, #1
 801ea82:	d028      	beq.n	801ead6 <_txe_thread_create+0xd6>
                /* Yes, break out of the loop.  */
                break;
            }

            /* Check the stack pointer to see if it overlaps with this thread's stack.  */
            if (stack_start >= next_thread -> tx_thread_stack_start)
 801ea84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801ea86:	68db      	ldr	r3, [r3, #12]
 801ea88:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801ea8a:	429a      	cmp	r2, r3
 801ea8c:	d308      	bcc.n	801eaa0 <_txe_thread_create+0xa0>
            {

                if (stack_start < next_thread -> tx_thread_stack_end)
 801ea8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801ea90:	691b      	ldr	r3, [r3, #16]
 801ea92:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801ea94:	429a      	cmp	r2, r3
 801ea96:	d203      	bcs.n	801eaa0 <_txe_thread_create+0xa0>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 801ea98:	2300      	movs	r3, #0
 801ea9a:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 801ea9c:	2301      	movs	r3, #1
 801ea9e:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Check the end of the stack to see if it is inside this thread's stack area as well.  */
            if (stack_end >= next_thread -> tx_thread_stack_start)
 801eaa0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801eaa2:	68db      	ldr	r3, [r3, #12]
 801eaa4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801eaa6:	429a      	cmp	r2, r3
 801eaa8:	d308      	bcc.n	801eabc <_txe_thread_create+0xbc>
            {

                if (stack_end < next_thread -> tx_thread_stack_end)
 801eaaa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801eaac:	691b      	ldr	r3, [r3, #16]
 801eaae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801eab0:	429a      	cmp	r2, r3
 801eab2:	d203      	bcs.n	801eabc <_txe_thread_create+0xbc>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 801eab4:	2300      	movs	r3, #0
 801eab6:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 801eab8:	2301      	movs	r3, #1
 801eaba:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Move to the next thread.  */
            next_thread =  next_thread -> tx_thread_created_next;
 801eabc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801eabe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801eac2:	643b      	str	r3, [r7, #64]	; 0x40
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 801eac4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801eac6:	3301      	adds	r3, #1
 801eac8:	647b      	str	r3, [r7, #68]	; 0x44
 801eaca:	4b42      	ldr	r3, [pc, #264]	; (801ebd4 <_txe_thread_create+0x1d4>)
 801eacc:	681b      	ldr	r3, [r3, #0]
 801eace:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801ead0:	429a      	cmp	r2, r3
 801ead2:	d3ce      	bcc.n	801ea72 <_txe_thread_create+0x72>
 801ead4:	e000      	b.n	801ead8 <_txe_thread_create+0xd8>
                break;
 801ead6:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801ead8:	f3ef 8310 	mrs	r3, PRIMASK
 801eadc:	61fb      	str	r3, [r7, #28]
    return(posture);
 801eade:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 801eae0:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 801eae2:	b672      	cpsid	i
    return(int_posture);
 801eae4:	69bb      	ldr	r3, [r7, #24]
        }

        /* Disable interrupts.  */
        TX_DISABLE
 801eae6:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 801eae8:	4b38      	ldr	r3, [pc, #224]	; (801ebcc <_txe_thread_create+0x1cc>)
 801eaea:	681b      	ldr	r3, [r3, #0]
 801eaec:	3b01      	subs	r3, #1
 801eaee:	4a37      	ldr	r2, [pc, #220]	; (801ebcc <_txe_thread_create+0x1cc>)
 801eaf0:	6013      	str	r3, [r2, #0]
 801eaf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801eaf4:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801eaf6:	6a3b      	ldr	r3, [r7, #32]
 801eaf8:	f383 8810 	msr	PRIMASK, r3
}
 801eafc:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 801eafe:	f7fe ff9f 	bl	801da40 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate thread.  */
        if (thread_ptr == next_thread)
 801eb02:	68fa      	ldr	r2, [r7, #12]
 801eb04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801eb06:	429a      	cmp	r2, r3
 801eb08:	d102      	bne.n	801eb10 <_txe_thread_create+0x110>
        {

            /* Thread is already created, return appropriate error code.  */
            status =  TX_THREAD_ERROR;
 801eb0a:	230e      	movs	r3, #14
 801eb0c:	64fb      	str	r3, [r7, #76]	; 0x4c
 801eb0e:	e042      	b.n	801eb96 <_txe_thread_create+0x196>
        }

        /* Check for invalid starting address of stack.  */
        else if (stack_start == TX_NULL)
 801eb10:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801eb12:	2b00      	cmp	r3, #0
 801eb14:	d102      	bne.n	801eb1c <_txe_thread_create+0x11c>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 801eb16:	2303      	movs	r3, #3
 801eb18:	64fb      	str	r3, [r7, #76]	; 0x4c
 801eb1a:	e03c      	b.n	801eb96 <_txe_thread_create+0x196>
        }

        /* Check for invalid thread entry point.  */
        else if (entry_function == TX_NULL)
 801eb1c:	687b      	ldr	r3, [r7, #4]
 801eb1e:	2b00      	cmp	r3, #0
 801eb20:	d102      	bne.n	801eb28 <_txe_thread_create+0x128>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 801eb22:	2303      	movs	r3, #3
 801eb24:	64fb      	str	r3, [r7, #76]	; 0x4c
 801eb26:	e036      	b.n	801eb96 <_txe_thread_create+0x196>
        }

        /* Check the stack size.  */
        else if (stack_size < ((ULONG) TX_MINIMUM_STACK))
 801eb28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801eb2a:	2bc7      	cmp	r3, #199	; 0xc7
 801eb2c:	d802      	bhi.n	801eb34 <_txe_thread_create+0x134>
        {

            /* Stack is not big enough, return appropriate error code.  */
            status =  TX_SIZE_ERROR;
 801eb2e:	2305      	movs	r3, #5
 801eb30:	64fb      	str	r3, [r7, #76]	; 0x4c
 801eb32:	e030      	b.n	801eb96 <_txe_thread_create+0x196>
        }

        /* Check the priority specified.  */
        else if (priority >= ((UINT) TX_MAX_PRIORITIES))
 801eb34:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801eb36:	2b1f      	cmp	r3, #31
 801eb38:	d902      	bls.n	801eb40 <_txe_thread_create+0x140>
        {

            /* Invalid priority selected, return appropriate error code.  */
            status =  TX_PRIORITY_ERROR;
 801eb3a:	230f      	movs	r3, #15
 801eb3c:	64fb      	str	r3, [r7, #76]	; 0x4c
 801eb3e:	e02a      	b.n	801eb96 <_txe_thread_create+0x196>
        }

        /* Check preemption threshold. */
        else if (preempt_threshold > priority)
 801eb40:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801eb42:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801eb44:	429a      	cmp	r2, r3
 801eb46:	d902      	bls.n	801eb4e <_txe_thread_create+0x14e>
        {

            /* Invalid preempt threshold, return appropriate error code.  */
            status =  TX_THRESH_ERROR;
 801eb48:	2318      	movs	r3, #24
 801eb4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 801eb4c:	e023      	b.n	801eb96 <_txe_thread_create+0x196>
        }

        /* Check the start selection.  */
        else if (auto_start > TX_AUTO_START)
 801eb4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801eb50:	2b01      	cmp	r3, #1
 801eb52:	d902      	bls.n	801eb5a <_txe_thread_create+0x15a>
        {

            /* Invalid auto start selection, return appropriate error code.  */
            status =  TX_START_ERROR;
 801eb54:	2310      	movs	r3, #16
 801eb56:	64fb      	str	r3, [r7, #76]	; 0x4c
 801eb58:	e01d      	b.n	801eb96 <_txe_thread_create+0x196>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(current_thread)
 801eb5a:	4b1f      	ldr	r3, [pc, #124]	; (801ebd8 <_txe_thread_create+0x1d8>)
 801eb5c:	681b      	ldr	r3, [r3, #0]
 801eb5e:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (current_thread == &_tx_timer_thread)
 801eb60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801eb62:	4a1e      	ldr	r2, [pc, #120]	; (801ebdc <_txe_thread_create+0x1dc>)
 801eb64:	4293      	cmp	r3, r2
 801eb66:	d101      	bne.n	801eb6c <_txe_thread_create+0x16c>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 801eb68:	2313      	movs	r3, #19
 801eb6a:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801eb6c:	f3ef 8305 	mrs	r3, IPSR
 801eb70:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 801eb72:	697a      	ldr	r2, [r7, #20]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 801eb74:	4b1a      	ldr	r3, [pc, #104]	; (801ebe0 <_txe_thread_create+0x1e0>)
 801eb76:	681b      	ldr	r3, [r3, #0]
 801eb78:	4313      	orrs	r3, r2
 801eb7a:	2b00      	cmp	r3, #0
 801eb7c:	d00b      	beq.n	801eb96 <_txe_thread_create+0x196>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801eb7e:	f3ef 8305 	mrs	r3, IPSR
 801eb82:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 801eb84:	693a      	ldr	r2, [r7, #16]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 801eb86:	4b16      	ldr	r3, [pc, #88]	; (801ebe0 <_txe_thread_create+0x1e0>)
 801eb88:	681b      	ldr	r3, [r3, #0]
 801eb8a:	4313      	orrs	r3, r2
 801eb8c:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 801eb90:	d201      	bcs.n	801eb96 <_txe_thread_create+0x196>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 801eb92:	2313      	movs	r3, #19
 801eb94:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 801eb96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801eb98:	2b00      	cmp	r3, #0
 801eb9a:	d112      	bne.n	801ebc2 <_txe_thread_create+0x1c2>
    {

        /* Call actual thread create function.  */
        status =  _tx_thread_create(thread_ptr, name_ptr, entry_function, entry_input,
 801eb9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801eb9e:	9305      	str	r3, [sp, #20]
 801eba0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801eba2:	9304      	str	r3, [sp, #16]
 801eba4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801eba6:	9303      	str	r3, [sp, #12]
 801eba8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801ebaa:	9302      	str	r3, [sp, #8]
 801ebac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801ebae:	9301      	str	r3, [sp, #4]
 801ebb0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801ebb2:	9300      	str	r3, [sp, #0]
 801ebb4:	683b      	ldr	r3, [r7, #0]
 801ebb6:	687a      	ldr	r2, [r7, #4]
 801ebb8:	68b9      	ldr	r1, [r7, #8]
 801ebba:	68f8      	ldr	r0, [r7, #12]
 801ebbc:	f7fe fcb0 	bl	801d520 <_tx_thread_create>
 801ebc0:	64f8      	str	r0, [r7, #76]	; 0x4c
                        stack_start, stack_size, priority, preempt_threshold,
                        time_slice, auto_start);
    }

    /* Return completion status.  */
    return(status);
 801ebc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 801ebc4:	4618      	mov	r0, r3
 801ebc6:	3750      	adds	r7, #80	; 0x50
 801ebc8:	46bd      	mov	sp, r7
 801ebca:	bd80      	pop	{r7, pc}
 801ebcc:	24005164 	.word	0x24005164
 801ebd0:	240050d4 	.word	0x240050d4
 801ebd4:	240050d8 	.word	0x240050d8
 801ebd8:	240050cc 	.word	0x240050cc
 801ebdc:	24005214 	.word	0x24005214
 801ebe0:	24000070 	.word	0x24000070

0801ebe4 <UTIL_LCD_SetFuncDriver>:
/**
  * @brief  Link board LCD drivers to STM32 LCD Utility drivers
  * @param  pDrv Structure of LCD functions
  */
void UTIL_LCD_SetFuncDriver(const LCD_UTILS_Drv_t *pDrv)
{
 801ebe4:	b580      	push	{r7, lr}
 801ebe6:	b082      	sub	sp, #8
 801ebe8:	af00      	add	r7, sp, #0
 801ebea:	6078      	str	r0, [r7, #4]
  FuncDriver.DrawBitmap     = pDrv->DrawBitmap;
 801ebec:	687b      	ldr	r3, [r7, #4]
 801ebee:	681b      	ldr	r3, [r3, #0]
 801ebf0:	4a22      	ldr	r2, [pc, #136]	; (801ec7c <UTIL_LCD_SetFuncDriver+0x98>)
 801ebf2:	6013      	str	r3, [r2, #0]
  FuncDriver.FillRGBRect    = pDrv->FillRGBRect;
 801ebf4:	687b      	ldr	r3, [r7, #4]
 801ebf6:	685b      	ldr	r3, [r3, #4]
 801ebf8:	4a20      	ldr	r2, [pc, #128]	; (801ec7c <UTIL_LCD_SetFuncDriver+0x98>)
 801ebfa:	6053      	str	r3, [r2, #4]
  FuncDriver.DrawHLine      = pDrv->DrawHLine;
 801ebfc:	687b      	ldr	r3, [r7, #4]
 801ebfe:	689b      	ldr	r3, [r3, #8]
 801ec00:	4a1e      	ldr	r2, [pc, #120]	; (801ec7c <UTIL_LCD_SetFuncDriver+0x98>)
 801ec02:	6093      	str	r3, [r2, #8]
  FuncDriver.DrawVLine      = pDrv->DrawVLine;
 801ec04:	687b      	ldr	r3, [r7, #4]
 801ec06:	68db      	ldr	r3, [r3, #12]
 801ec08:	4a1c      	ldr	r2, [pc, #112]	; (801ec7c <UTIL_LCD_SetFuncDriver+0x98>)
 801ec0a:	60d3      	str	r3, [r2, #12]
  FuncDriver.FillRect       = pDrv->FillRect;
 801ec0c:	687b      	ldr	r3, [r7, #4]
 801ec0e:	691b      	ldr	r3, [r3, #16]
 801ec10:	4a1a      	ldr	r2, [pc, #104]	; (801ec7c <UTIL_LCD_SetFuncDriver+0x98>)
 801ec12:	6113      	str	r3, [r2, #16]
  FuncDriver.GetPixel       = pDrv->GetPixel;
 801ec14:	687b      	ldr	r3, [r7, #4]
 801ec16:	695b      	ldr	r3, [r3, #20]
 801ec18:	4a18      	ldr	r2, [pc, #96]	; (801ec7c <UTIL_LCD_SetFuncDriver+0x98>)
 801ec1a:	6153      	str	r3, [r2, #20]
  FuncDriver.SetPixel       = pDrv->SetPixel;
 801ec1c:	687b      	ldr	r3, [r7, #4]
 801ec1e:	699b      	ldr	r3, [r3, #24]
 801ec20:	4a16      	ldr	r2, [pc, #88]	; (801ec7c <UTIL_LCD_SetFuncDriver+0x98>)
 801ec22:	6193      	str	r3, [r2, #24]
  FuncDriver.GetXSize       = pDrv->GetXSize;
 801ec24:	687b      	ldr	r3, [r7, #4]
 801ec26:	69db      	ldr	r3, [r3, #28]
 801ec28:	4a14      	ldr	r2, [pc, #80]	; (801ec7c <UTIL_LCD_SetFuncDriver+0x98>)
 801ec2a:	61d3      	str	r3, [r2, #28]
  FuncDriver.GetYSize       = pDrv->GetYSize;
 801ec2c:	687b      	ldr	r3, [r7, #4]
 801ec2e:	6a1b      	ldr	r3, [r3, #32]
 801ec30:	4a12      	ldr	r2, [pc, #72]	; (801ec7c <UTIL_LCD_SetFuncDriver+0x98>)
 801ec32:	6213      	str	r3, [r2, #32]
  FuncDriver.SetLayer       = pDrv->SetLayer;
 801ec34:	687b      	ldr	r3, [r7, #4]
 801ec36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ec38:	4a10      	ldr	r2, [pc, #64]	; (801ec7c <UTIL_LCD_SetFuncDriver+0x98>)
 801ec3a:	6253      	str	r3, [r2, #36]	; 0x24
  FuncDriver.GetFormat      = pDrv->GetFormat;
 801ec3c:	687b      	ldr	r3, [r7, #4]
 801ec3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ec40:	4a0e      	ldr	r2, [pc, #56]	; (801ec7c <UTIL_LCD_SetFuncDriver+0x98>)
 801ec42:	6293      	str	r3, [r2, #40]	; 0x28

  DrawProp->LcdLayer = 0;
 801ec44:	4b0e      	ldr	r3, [pc, #56]	; (801ec80 <UTIL_LCD_SetFuncDriver+0x9c>)
 801ec46:	2200      	movs	r2, #0
 801ec48:	60da      	str	r2, [r3, #12]
  DrawProp->LcdDevice = 0;
 801ec4a:	4b0d      	ldr	r3, [pc, #52]	; (801ec80 <UTIL_LCD_SetFuncDriver+0x9c>)
 801ec4c:	2200      	movs	r2, #0
 801ec4e:	611a      	str	r2, [r3, #16]
  FuncDriver.GetXSize(0, &DrawProp->LcdXsize);
 801ec50:	4b0a      	ldr	r3, [pc, #40]	; (801ec7c <UTIL_LCD_SetFuncDriver+0x98>)
 801ec52:	69db      	ldr	r3, [r3, #28]
 801ec54:	4a0b      	ldr	r2, [pc, #44]	; (801ec84 <UTIL_LCD_SetFuncDriver+0xa0>)
 801ec56:	4611      	mov	r1, r2
 801ec58:	2000      	movs	r0, #0
 801ec5a:	4798      	blx	r3
  FuncDriver.GetYSize(0, &DrawProp->LcdYsize);
 801ec5c:	4b07      	ldr	r3, [pc, #28]	; (801ec7c <UTIL_LCD_SetFuncDriver+0x98>)
 801ec5e:	6a1b      	ldr	r3, [r3, #32]
 801ec60:	4a09      	ldr	r2, [pc, #36]	; (801ec88 <UTIL_LCD_SetFuncDriver+0xa4>)
 801ec62:	4611      	mov	r1, r2
 801ec64:	2000      	movs	r0, #0
 801ec66:	4798      	blx	r3
  FuncDriver.GetFormat(0, &DrawProp->LcdPixelFormat);
 801ec68:	4b04      	ldr	r3, [pc, #16]	; (801ec7c <UTIL_LCD_SetFuncDriver+0x98>)
 801ec6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ec6c:	4a07      	ldr	r2, [pc, #28]	; (801ec8c <UTIL_LCD_SetFuncDriver+0xa8>)
 801ec6e:	4611      	mov	r1, r2
 801ec70:	2000      	movs	r0, #0
 801ec72:	4798      	blx	r3
}
 801ec74:	bf00      	nop
 801ec76:	3708      	adds	r7, #8
 801ec78:	46bd      	mov	sp, r7
 801ec7a:	bd80      	pop	{r7, pc}
 801ec7c:	24005714 	.word	0x24005714
 801ec80:	240056d4 	.word	0x240056d4
 801ec84:	240056e8 	.word	0x240056e8
 801ec88:	240056ec 	.word	0x240056ec
 801ec8c:	240056f0 	.word	0x240056f0

0801ec90 <UTIL_LCD_SetTextColor>:
/**
  * @brief  Sets the LCD text color.
  * @param  Color  Text color code
  */
void UTIL_LCD_SetTextColor(uint32_t Color)
{
 801ec90:	b480      	push	{r7}
 801ec92:	b083      	sub	sp, #12
 801ec94:	af00      	add	r7, sp, #0
 801ec96:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].TextColor = Color;
 801ec98:	4b06      	ldr	r3, [pc, #24]	; (801ecb4 <UTIL_LCD_SetTextColor+0x24>)
 801ec9a:	68db      	ldr	r3, [r3, #12]
 801ec9c:	4a05      	ldr	r2, [pc, #20]	; (801ecb4 <UTIL_LCD_SetTextColor+0x24>)
 801ec9e:	015b      	lsls	r3, r3, #5
 801eca0:	4413      	add	r3, r2
 801eca2:	687a      	ldr	r2, [r7, #4]
 801eca4:	601a      	str	r2, [r3, #0]
}
 801eca6:	bf00      	nop
 801eca8:	370c      	adds	r7, #12
 801ecaa:	46bd      	mov	sp, r7
 801ecac:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ecb0:	4770      	bx	lr
 801ecb2:	bf00      	nop
 801ecb4:	240056d4 	.word	0x240056d4

0801ecb8 <UTIL_LCD_SetBackColor>:
/**
  * @brief  Sets the LCD background color.
  * @param  Color  Layer background color code
  */
void UTIL_LCD_SetBackColor(uint32_t Color)
{
 801ecb8:	b480      	push	{r7}
 801ecba:	b083      	sub	sp, #12
 801ecbc:	af00      	add	r7, sp, #0
 801ecbe:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].BackColor = Color;
 801ecc0:	4b06      	ldr	r3, [pc, #24]	; (801ecdc <UTIL_LCD_SetBackColor+0x24>)
 801ecc2:	68db      	ldr	r3, [r3, #12]
 801ecc4:	4a05      	ldr	r2, [pc, #20]	; (801ecdc <UTIL_LCD_SetBackColor+0x24>)
 801ecc6:	015b      	lsls	r3, r3, #5
 801ecc8:	4413      	add	r3, r2
 801ecca:	3304      	adds	r3, #4
 801eccc:	687a      	ldr	r2, [r7, #4]
 801ecce:	601a      	str	r2, [r3, #0]
}
 801ecd0:	bf00      	nop
 801ecd2:	370c      	adds	r7, #12
 801ecd4:	46bd      	mov	sp, r7
 801ecd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ecda:	4770      	bx	lr
 801ecdc:	240056d4 	.word	0x240056d4

0801ece0 <UTIL_LCD_SetFont>:
/**
  * @brief  Sets the LCD text font.
  * @param  fonts  Layer font to be used
  */
void UTIL_LCD_SetFont(sFONT *fonts)
{
 801ece0:	b480      	push	{r7}
 801ece2:	b083      	sub	sp, #12
 801ece4:	af00      	add	r7, sp, #0
 801ece6:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].pFont = fonts;
 801ece8:	4b06      	ldr	r3, [pc, #24]	; (801ed04 <UTIL_LCD_SetFont+0x24>)
 801ecea:	68db      	ldr	r3, [r3, #12]
 801ecec:	4a05      	ldr	r2, [pc, #20]	; (801ed04 <UTIL_LCD_SetFont+0x24>)
 801ecee:	015b      	lsls	r3, r3, #5
 801ecf0:	4413      	add	r3, r2
 801ecf2:	3308      	adds	r3, #8
 801ecf4:	687a      	ldr	r2, [r7, #4]
 801ecf6:	601a      	str	r2, [r3, #0]
}
 801ecf8:	bf00      	nop
 801ecfa:	370c      	adds	r7, #12
 801ecfc:	46bd      	mov	sp, r7
 801ecfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ed02:	4770      	bx	lr
 801ed04:	240056d4 	.word	0x240056d4

0801ed08 <UTIL_LCD_FillRGBRect>:
  * @param  Xpos    X position
  * @param  Ypos    Y position
  * @param  Length  Line length
  */
void UTIL_LCD_FillRGBRect(uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
 801ed08:	b590      	push	{r4, r7, lr}
 801ed0a:	b087      	sub	sp, #28
 801ed0c:	af02      	add	r7, sp, #8
 801ed0e:	60f8      	str	r0, [r7, #12]
 801ed10:	60b9      	str	r1, [r7, #8]
 801ed12:	607a      	str	r2, [r7, #4]
 801ed14:	603b      	str	r3, [r7, #0]
  /* Write RGB rectangle data */
  FuncDriver.FillRGBRect(DrawProp->LcdDevice, Xpos, Ypos, pData, Width, Height);
 801ed16:	4b08      	ldr	r3, [pc, #32]	; (801ed38 <UTIL_LCD_FillRGBRect+0x30>)
 801ed18:	685c      	ldr	r4, [r3, #4]
 801ed1a:	4b08      	ldr	r3, [pc, #32]	; (801ed3c <UTIL_LCD_FillRGBRect+0x34>)
 801ed1c:	6918      	ldr	r0, [r3, #16]
 801ed1e:	6a3b      	ldr	r3, [r7, #32]
 801ed20:	9301      	str	r3, [sp, #4]
 801ed22:	683b      	ldr	r3, [r7, #0]
 801ed24:	9300      	str	r3, [sp, #0]
 801ed26:	687b      	ldr	r3, [r7, #4]
 801ed28:	68ba      	ldr	r2, [r7, #8]
 801ed2a:	68f9      	ldr	r1, [r7, #12]
 801ed2c:	47a0      	blx	r4
}
 801ed2e:	bf00      	nop
 801ed30:	3714      	adds	r7, #20
 801ed32:	46bd      	mov	sp, r7
 801ed34:	bd90      	pop	{r4, r7, pc}
 801ed36:	bf00      	nop
 801ed38:	24005714 	.word	0x24005714
 801ed3c:	240056d4 	.word	0x240056d4

0801ed40 <UTIL_LCD_DrawHLine>:
  * @param  Ypos    Y position
  * @param  Length  Line length
  * @param  Color   Draw color
  */
void UTIL_LCD_DrawHLine(uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 801ed40:	b590      	push	{r4, r7, lr}
 801ed42:	b087      	sub	sp, #28
 801ed44:	af02      	add	r7, sp, #8
 801ed46:	60f8      	str	r0, [r7, #12]
 801ed48:	60b9      	str	r1, [r7, #8]
 801ed4a:	607a      	str	r2, [r7, #4]
 801ed4c:	603b      	str	r3, [r7, #0]
  /* Write line */
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 801ed4e:	4b15      	ldr	r3, [pc, #84]	; (801eda4 <UTIL_LCD_DrawHLine+0x64>)
 801ed50:	69db      	ldr	r3, [r3, #28]
 801ed52:	2b02      	cmp	r3, #2
 801ed54:	d118      	bne.n	801ed88 <UTIL_LCD_DrawHLine+0x48>
  {
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
 801ed56:	4b14      	ldr	r3, [pc, #80]	; (801eda8 <UTIL_LCD_DrawHLine+0x68>)
 801ed58:	689c      	ldr	r4, [r3, #8]
 801ed5a:	4b12      	ldr	r3, [pc, #72]	; (801eda4 <UTIL_LCD_DrawHLine+0x64>)
 801ed5c:	6918      	ldr	r0, [r3, #16]
 801ed5e:	683b      	ldr	r3, [r7, #0]
 801ed60:	08db      	lsrs	r3, r3, #3
 801ed62:	f003 021f 	and.w	r2, r3, #31
 801ed66:	683b      	ldr	r3, [r7, #0]
 801ed68:	0a9b      	lsrs	r3, r3, #10
 801ed6a:	015b      	lsls	r3, r3, #5
 801ed6c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801ed70:	431a      	orrs	r2, r3
 801ed72:	683b      	ldr	r3, [r7, #0]
 801ed74:	0cdb      	lsrs	r3, r3, #19
 801ed76:	02db      	lsls	r3, r3, #11
 801ed78:	b29b      	uxth	r3, r3
 801ed7a:	4313      	orrs	r3, r2
 801ed7c:	9300      	str	r3, [sp, #0]
 801ed7e:	687b      	ldr	r3, [r7, #4]
 801ed80:	68ba      	ldr	r2, [r7, #8]
 801ed82:	68f9      	ldr	r1, [r7, #12]
 801ed84:	47a0      	blx	r4
  }
  else
  {
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
  }
}
 801ed86:	e009      	b.n	801ed9c <UTIL_LCD_DrawHLine+0x5c>
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
 801ed88:	4b07      	ldr	r3, [pc, #28]	; (801eda8 <UTIL_LCD_DrawHLine+0x68>)
 801ed8a:	689c      	ldr	r4, [r3, #8]
 801ed8c:	4b05      	ldr	r3, [pc, #20]	; (801eda4 <UTIL_LCD_DrawHLine+0x64>)
 801ed8e:	6918      	ldr	r0, [r3, #16]
 801ed90:	683b      	ldr	r3, [r7, #0]
 801ed92:	9300      	str	r3, [sp, #0]
 801ed94:	687b      	ldr	r3, [r7, #4]
 801ed96:	68ba      	ldr	r2, [r7, #8]
 801ed98:	68f9      	ldr	r1, [r7, #12]
 801ed9a:	47a0      	blx	r4
}
 801ed9c:	bf00      	nop
 801ed9e:	3714      	adds	r7, #20
 801eda0:	46bd      	mov	sp, r7
 801eda2:	bd90      	pop	{r4, r7, pc}
 801eda4:	240056d4 	.word	0x240056d4
 801eda8:	24005714 	.word	0x24005714

0801edac <UTIL_LCD_DrawVLine>:
  * @param  Ypos    Y position
  * @param  Length  Line length
  * @param  Color   Draw color
  */
void UTIL_LCD_DrawVLine(uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 801edac:	b590      	push	{r4, r7, lr}
 801edae:	b087      	sub	sp, #28
 801edb0:	af02      	add	r7, sp, #8
 801edb2:	60f8      	str	r0, [r7, #12]
 801edb4:	60b9      	str	r1, [r7, #8]
 801edb6:	607a      	str	r2, [r7, #4]
 801edb8:	603b      	str	r3, [r7, #0]
  /* Write line */
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 801edba:	4b15      	ldr	r3, [pc, #84]	; (801ee10 <UTIL_LCD_DrawVLine+0x64>)
 801edbc:	69db      	ldr	r3, [r3, #28]
 801edbe:	2b02      	cmp	r3, #2
 801edc0:	d118      	bne.n	801edf4 <UTIL_LCD_DrawVLine+0x48>
  {
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
 801edc2:	4b14      	ldr	r3, [pc, #80]	; (801ee14 <UTIL_LCD_DrawVLine+0x68>)
 801edc4:	68dc      	ldr	r4, [r3, #12]
 801edc6:	4b12      	ldr	r3, [pc, #72]	; (801ee10 <UTIL_LCD_DrawVLine+0x64>)
 801edc8:	6918      	ldr	r0, [r3, #16]
 801edca:	683b      	ldr	r3, [r7, #0]
 801edcc:	08db      	lsrs	r3, r3, #3
 801edce:	f003 021f 	and.w	r2, r3, #31
 801edd2:	683b      	ldr	r3, [r7, #0]
 801edd4:	0a9b      	lsrs	r3, r3, #10
 801edd6:	015b      	lsls	r3, r3, #5
 801edd8:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801eddc:	431a      	orrs	r2, r3
 801edde:	683b      	ldr	r3, [r7, #0]
 801ede0:	0cdb      	lsrs	r3, r3, #19
 801ede2:	02db      	lsls	r3, r3, #11
 801ede4:	b29b      	uxth	r3, r3
 801ede6:	4313      	orrs	r3, r2
 801ede8:	9300      	str	r3, [sp, #0]
 801edea:	687b      	ldr	r3, [r7, #4]
 801edec:	68ba      	ldr	r2, [r7, #8]
 801edee:	68f9      	ldr	r1, [r7, #12]
 801edf0:	47a0      	blx	r4
  }
  else
  {
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
  }
}
 801edf2:	e009      	b.n	801ee08 <UTIL_LCD_DrawVLine+0x5c>
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
 801edf4:	4b07      	ldr	r3, [pc, #28]	; (801ee14 <UTIL_LCD_DrawVLine+0x68>)
 801edf6:	68dc      	ldr	r4, [r3, #12]
 801edf8:	4b05      	ldr	r3, [pc, #20]	; (801ee10 <UTIL_LCD_DrawVLine+0x64>)
 801edfa:	6918      	ldr	r0, [r3, #16]
 801edfc:	683b      	ldr	r3, [r7, #0]
 801edfe:	9300      	str	r3, [sp, #0]
 801ee00:	687b      	ldr	r3, [r7, #4]
 801ee02:	68ba      	ldr	r2, [r7, #8]
 801ee04:	68f9      	ldr	r1, [r7, #12]
 801ee06:	47a0      	blx	r4
}
 801ee08:	bf00      	nop
 801ee0a:	3714      	adds	r7, #20
 801ee0c:	46bd      	mov	sp, r7
 801ee0e:	bd90      	pop	{r4, r7, pc}
 801ee10:	240056d4 	.word	0x240056d4
 801ee14:	24005714 	.word	0x24005714

0801ee18 <UTIL_LCD_SetPixel>:
  * @param  Xpos     X position
  * @param  Ypos     Y position
  * @param  Color    Pixel color
  */
void UTIL_LCD_SetPixel(uint16_t Xpos, uint16_t Ypos, uint32_t Color)
{
 801ee18:	b5b0      	push	{r4, r5, r7, lr}
 801ee1a:	b082      	sub	sp, #8
 801ee1c:	af00      	add	r7, sp, #0
 801ee1e:	4603      	mov	r3, r0
 801ee20:	603a      	str	r2, [r7, #0]
 801ee22:	80fb      	strh	r3, [r7, #6]
 801ee24:	460b      	mov	r3, r1
 801ee26:	80bb      	strh	r3, [r7, #4]
  /* Set Pixel */
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 801ee28:	4b13      	ldr	r3, [pc, #76]	; (801ee78 <UTIL_LCD_SetPixel+0x60>)
 801ee2a:	69db      	ldr	r3, [r3, #28]
 801ee2c:	2b02      	cmp	r3, #2
 801ee2e:	d117      	bne.n	801ee60 <UTIL_LCD_SetPixel+0x48>
  {
    FuncDriver.SetPixel(DrawProp->LcdDevice, Xpos, Ypos, CONVERTARGB88882RGB565(Color));
 801ee30:	4b12      	ldr	r3, [pc, #72]	; (801ee7c <UTIL_LCD_SetPixel+0x64>)
 801ee32:	699c      	ldr	r4, [r3, #24]
 801ee34:	4b10      	ldr	r3, [pc, #64]	; (801ee78 <UTIL_LCD_SetPixel+0x60>)
 801ee36:	6918      	ldr	r0, [r3, #16]
 801ee38:	88f9      	ldrh	r1, [r7, #6]
 801ee3a:	88bd      	ldrh	r5, [r7, #4]
 801ee3c:	683b      	ldr	r3, [r7, #0]
 801ee3e:	08db      	lsrs	r3, r3, #3
 801ee40:	f003 021f 	and.w	r2, r3, #31
 801ee44:	683b      	ldr	r3, [r7, #0]
 801ee46:	0a9b      	lsrs	r3, r3, #10
 801ee48:	015b      	lsls	r3, r3, #5
 801ee4a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801ee4e:	431a      	orrs	r2, r3
 801ee50:	683b      	ldr	r3, [r7, #0]
 801ee52:	0cdb      	lsrs	r3, r3, #19
 801ee54:	02db      	lsls	r3, r3, #11
 801ee56:	b29b      	uxth	r3, r3
 801ee58:	4313      	orrs	r3, r2
 801ee5a:	462a      	mov	r2, r5
 801ee5c:	47a0      	blx	r4
  }
  else
  {
    FuncDriver.SetPixel(DrawProp->LcdDevice, Xpos, Ypos, Color);
  }
}
 801ee5e:	e007      	b.n	801ee70 <UTIL_LCD_SetPixel+0x58>
    FuncDriver.SetPixel(DrawProp->LcdDevice, Xpos, Ypos, Color);
 801ee60:	4b06      	ldr	r3, [pc, #24]	; (801ee7c <UTIL_LCD_SetPixel+0x64>)
 801ee62:	699c      	ldr	r4, [r3, #24]
 801ee64:	4b04      	ldr	r3, [pc, #16]	; (801ee78 <UTIL_LCD_SetPixel+0x60>)
 801ee66:	6918      	ldr	r0, [r3, #16]
 801ee68:	88f9      	ldrh	r1, [r7, #6]
 801ee6a:	88ba      	ldrh	r2, [r7, #4]
 801ee6c:	683b      	ldr	r3, [r7, #0]
 801ee6e:	47a0      	blx	r4
}
 801ee70:	bf00      	nop
 801ee72:	3708      	adds	r7, #8
 801ee74:	46bd      	mov	sp, r7
 801ee76:	bdb0      	pop	{r4, r5, r7, pc}
 801ee78:	240056d4 	.word	0x240056d4
 801ee7c:	24005714 	.word	0x24005714

0801ee80 <UTIL_LCD_Clear>:
/**
  * @brief  Clears the whole currently active layer of LTDC.
  * @param  Color  Color of the background
  */
void UTIL_LCD_Clear(uint32_t Color)
{
 801ee80:	b580      	push	{r7, lr}
 801ee82:	b084      	sub	sp, #16
 801ee84:	af02      	add	r7, sp, #8
 801ee86:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */
  UTIL_LCD_FillRect(0, 0, DrawProp->LcdXsize, DrawProp->LcdYsize, Color);
 801ee88:	4b07      	ldr	r3, [pc, #28]	; (801eea8 <UTIL_LCD_Clear+0x28>)
 801ee8a:	695a      	ldr	r2, [r3, #20]
 801ee8c:	4b06      	ldr	r3, [pc, #24]	; (801eea8 <UTIL_LCD_Clear+0x28>)
 801ee8e:	6999      	ldr	r1, [r3, #24]
 801ee90:	687b      	ldr	r3, [r7, #4]
 801ee92:	9300      	str	r3, [sp, #0]
 801ee94:	460b      	mov	r3, r1
 801ee96:	2100      	movs	r1, #0
 801ee98:	2000      	movs	r0, #0
 801ee9a:	f000 fa1f 	bl	801f2dc <UTIL_LCD_FillRect>
}
 801ee9e:	bf00      	nop
 801eea0:	3708      	adds	r7, #8
 801eea2:	46bd      	mov	sp, r7
 801eea4:	bd80      	pop	{r7, pc}
 801eea6:	bf00      	nop
 801eea8:	240056d4 	.word	0x240056d4

0801eeac <UTIL_LCD_DisplayChar>:
  * @param  Ypos Line where to display the character shape.
  * @param  Ascii Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E
  */
void UTIL_LCD_DisplayChar(uint32_t Xpos, uint32_t Ypos, uint8_t Ascii)
{
 801eeac:	b580      	push	{r7, lr}
 801eeae:	b084      	sub	sp, #16
 801eeb0:	af00      	add	r7, sp, #0
 801eeb2:	60f8      	str	r0, [r7, #12]
 801eeb4:	60b9      	str	r1, [r7, #8]
 801eeb6:	4613      	mov	r3, r2
 801eeb8:	71fb      	strb	r3, [r7, #7]
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 801eeba:	4b16      	ldr	r3, [pc, #88]	; (801ef14 <UTIL_LCD_DisplayChar+0x68>)
 801eebc:	68db      	ldr	r3, [r3, #12]
 801eebe:	4a15      	ldr	r2, [pc, #84]	; (801ef14 <UTIL_LCD_DisplayChar+0x68>)
 801eec0:	015b      	lsls	r3, r3, #5
 801eec2:	4413      	add	r3, r2
 801eec4:	3308      	adds	r3, #8
 801eec6:	681b      	ldr	r3, [r3, #0]
 801eec8:	681a      	ldr	r2, [r3, #0]
 801eeca:	79fb      	ldrb	r3, [r7, #7]
 801eecc:	3b20      	subs	r3, #32
  DrawProp[DrawProp->LcdLayer].pFont->Height * ((DrawProp[DrawProp->LcdLayer].pFont->Width + 7) / 8)]);
 801eece:	4911      	ldr	r1, [pc, #68]	; (801ef14 <UTIL_LCD_DisplayChar+0x68>)
 801eed0:	68c9      	ldr	r1, [r1, #12]
 801eed2:	4810      	ldr	r0, [pc, #64]	; (801ef14 <UTIL_LCD_DisplayChar+0x68>)
 801eed4:	0149      	lsls	r1, r1, #5
 801eed6:	4401      	add	r1, r0
 801eed8:	3108      	adds	r1, #8
 801eeda:	6809      	ldr	r1, [r1, #0]
 801eedc:	88c9      	ldrh	r1, [r1, #6]
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 801eede:	fb03 f101 	mul.w	r1, r3, r1
  DrawProp[DrawProp->LcdLayer].pFont->Height * ((DrawProp[DrawProp->LcdLayer].pFont->Width + 7) / 8)]);
 801eee2:	4b0c      	ldr	r3, [pc, #48]	; (801ef14 <UTIL_LCD_DisplayChar+0x68>)
 801eee4:	68db      	ldr	r3, [r3, #12]
 801eee6:	480b      	ldr	r0, [pc, #44]	; (801ef14 <UTIL_LCD_DisplayChar+0x68>)
 801eee8:	015b      	lsls	r3, r3, #5
 801eeea:	4403      	add	r3, r0
 801eeec:	3308      	adds	r3, #8
 801eeee:	681b      	ldr	r3, [r3, #0]
 801eef0:	889b      	ldrh	r3, [r3, #4]
 801eef2:	3307      	adds	r3, #7
 801eef4:	2b00      	cmp	r3, #0
 801eef6:	da00      	bge.n	801eefa <UTIL_LCD_DisplayChar+0x4e>
 801eef8:	3307      	adds	r3, #7
 801eefa:	10db      	asrs	r3, r3, #3
 801eefc:	fb01 f303 	mul.w	r3, r1, r3
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 801ef00:	4413      	add	r3, r2
 801ef02:	461a      	mov	r2, r3
 801ef04:	68b9      	ldr	r1, [r7, #8]
 801ef06:	68f8      	ldr	r0, [r7, #12]
 801ef08:	f000 face 	bl	801f4a8 <DrawChar>
}
 801ef0c:	bf00      	nop
 801ef0e:	3710      	adds	r7, #16
 801ef10:	46bd      	mov	sp, r7
 801ef12:	bd80      	pop	{r7, pc}
 801ef14:	240056d4 	.word	0x240056d4

0801ef18 <UTIL_LCD_DisplayStringAt>:
  *            @arg  CENTER_MODE
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE
  */
void UTIL_LCD_DisplayStringAt(uint32_t Xpos, uint32_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 801ef18:	b580      	push	{r7, lr}
 801ef1a:	b08a      	sub	sp, #40	; 0x28
 801ef1c:	af00      	add	r7, sp, #0
 801ef1e:	60f8      	str	r0, [r7, #12]
 801ef20:	60b9      	str	r1, [r7, #8]
 801ef22:	607a      	str	r2, [r7, #4]
 801ef24:	70fb      	strb	r3, [r7, #3]
  uint32_t refcolumn = 1, i = 0;
 801ef26:	2301      	movs	r3, #1
 801ef28:	627b      	str	r3, [r7, #36]	; 0x24
 801ef2a:	2300      	movs	r3, #0
 801ef2c:	623b      	str	r3, [r7, #32]
  uint32_t size = 0, xsize = 0;
 801ef2e:	2300      	movs	r3, #0
 801ef30:	61fb      	str	r3, [r7, #28]
 801ef32:	2300      	movs	r3, #0
 801ef34:	617b      	str	r3, [r7, #20]
  uint8_t  *ptr = Text;
 801ef36:	687b      	ldr	r3, [r7, #4]
 801ef38:	61bb      	str	r3, [r7, #24]

  /* Get the text size */
  while (*ptr++) size ++ ;
 801ef3a:	e002      	b.n	801ef42 <UTIL_LCD_DisplayStringAt+0x2a>
 801ef3c:	69fb      	ldr	r3, [r7, #28]
 801ef3e:	3301      	adds	r3, #1
 801ef40:	61fb      	str	r3, [r7, #28]
 801ef42:	69bb      	ldr	r3, [r7, #24]
 801ef44:	1c5a      	adds	r2, r3, #1
 801ef46:	61ba      	str	r2, [r7, #24]
 801ef48:	781b      	ldrb	r3, [r3, #0]
 801ef4a:	2b00      	cmp	r3, #0
 801ef4c:	d1f6      	bne.n	801ef3c <UTIL_LCD_DisplayStringAt+0x24>

  /* Characters number per line */
  xsize = (DrawProp->LcdXsize/DrawProp[DrawProp->LcdLayer].pFont->Width);
 801ef4e:	4b48      	ldr	r3, [pc, #288]	; (801f070 <UTIL_LCD_DisplayStringAt+0x158>)
 801ef50:	695b      	ldr	r3, [r3, #20]
 801ef52:	4a47      	ldr	r2, [pc, #284]	; (801f070 <UTIL_LCD_DisplayStringAt+0x158>)
 801ef54:	68d2      	ldr	r2, [r2, #12]
 801ef56:	4946      	ldr	r1, [pc, #280]	; (801f070 <UTIL_LCD_DisplayStringAt+0x158>)
 801ef58:	0152      	lsls	r2, r2, #5
 801ef5a:	440a      	add	r2, r1
 801ef5c:	3208      	adds	r2, #8
 801ef5e:	6812      	ldr	r2, [r2, #0]
 801ef60:	8892      	ldrh	r2, [r2, #4]
 801ef62:	fbb3 f3f2 	udiv	r3, r3, r2
 801ef66:	617b      	str	r3, [r7, #20]

  switch (Mode)
 801ef68:	78fb      	ldrb	r3, [r7, #3]
 801ef6a:	2b03      	cmp	r3, #3
 801ef6c:	d018      	beq.n	801efa0 <UTIL_LCD_DisplayStringAt+0x88>
 801ef6e:	2b03      	cmp	r3, #3
 801ef70:	dc2a      	bgt.n	801efc8 <UTIL_LCD_DisplayStringAt+0xb0>
 801ef72:	2b01      	cmp	r3, #1
 801ef74:	d002      	beq.n	801ef7c <UTIL_LCD_DisplayStringAt+0x64>
 801ef76:	2b02      	cmp	r3, #2
 801ef78:	d015      	beq.n	801efa6 <UTIL_LCD_DisplayStringAt+0x8e>
 801ef7a:	e025      	b.n	801efc8 <UTIL_LCD_DisplayStringAt+0xb0>
  {
  case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size)* DrawProp[DrawProp->LcdLayer].pFont->Width) / 2;
 801ef7c:	697a      	ldr	r2, [r7, #20]
 801ef7e:	69fb      	ldr	r3, [r7, #28]
 801ef80:	1ad3      	subs	r3, r2, r3
 801ef82:	4a3b      	ldr	r2, [pc, #236]	; (801f070 <UTIL_LCD_DisplayStringAt+0x158>)
 801ef84:	68d2      	ldr	r2, [r2, #12]
 801ef86:	493a      	ldr	r1, [pc, #232]	; (801f070 <UTIL_LCD_DisplayStringAt+0x158>)
 801ef88:	0152      	lsls	r2, r2, #5
 801ef8a:	440a      	add	r2, r1
 801ef8c:	3208      	adds	r2, #8
 801ef8e:	6812      	ldr	r2, [r2, #0]
 801ef90:	8892      	ldrh	r2, [r2, #4]
 801ef92:	fb02 f303 	mul.w	r3, r2, r3
 801ef96:	085b      	lsrs	r3, r3, #1
 801ef98:	68fa      	ldr	r2, [r7, #12]
 801ef9a:	4413      	add	r3, r2
 801ef9c:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 801ef9e:	e016      	b.n	801efce <UTIL_LCD_DisplayStringAt+0xb6>
    }
  case LEFT_MODE:
    {
      refcolumn = Xpos;
 801efa0:	68fb      	ldr	r3, [r7, #12]
 801efa2:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 801efa4:	e013      	b.n	801efce <UTIL_LCD_DisplayStringAt+0xb6>
    }
  case RIGHT_MODE:
    {
      refcolumn = - Xpos + ((xsize - size)*DrawProp[DrawProp->LcdLayer].pFont->Width);
 801efa6:	697a      	ldr	r2, [r7, #20]
 801efa8:	69fb      	ldr	r3, [r7, #28]
 801efaa:	1ad3      	subs	r3, r2, r3
 801efac:	4a30      	ldr	r2, [pc, #192]	; (801f070 <UTIL_LCD_DisplayStringAt+0x158>)
 801efae:	68d2      	ldr	r2, [r2, #12]
 801efb0:	492f      	ldr	r1, [pc, #188]	; (801f070 <UTIL_LCD_DisplayStringAt+0x158>)
 801efb2:	0152      	lsls	r2, r2, #5
 801efb4:	440a      	add	r2, r1
 801efb6:	3208      	adds	r2, #8
 801efb8:	6812      	ldr	r2, [r2, #0]
 801efba:	8892      	ldrh	r2, [r2, #4]
 801efbc:	fb03 f202 	mul.w	r2, r3, r2
 801efc0:	68fb      	ldr	r3, [r7, #12]
 801efc2:	1ad3      	subs	r3, r2, r3
 801efc4:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 801efc6:	e002      	b.n	801efce <UTIL_LCD_DisplayStringAt+0xb6>
    }
  default:
    {
      refcolumn = Xpos;
 801efc8:	68fb      	ldr	r3, [r7, #12]
 801efca:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 801efcc:	bf00      	nop
    }
  }

  /* Check that the Start column is located in the screen */
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
 801efce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801efd0:	2b00      	cmp	r3, #0
 801efd2:	d003      	beq.n	801efdc <UTIL_LCD_DisplayStringAt+0xc4>
 801efd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801efd6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801efda:	d31b      	bcc.n	801f014 <UTIL_LCD_DisplayStringAt+0xfc>
  {
    refcolumn = 1;
 801efdc:	2301      	movs	r3, #1
 801efde:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
 801efe0:	e018      	b.n	801f014 <UTIL_LCD_DisplayStringAt+0xfc>
  {
    /* Display one character on LCD */
    UTIL_LCD_DisplayChar(refcolumn, Ypos, *Text);
 801efe2:	687b      	ldr	r3, [r7, #4]
 801efe4:	781b      	ldrb	r3, [r3, #0]
 801efe6:	461a      	mov	r2, r3
 801efe8:	68b9      	ldr	r1, [r7, #8]
 801efea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801efec:	f7ff ff5e 	bl	801eeac <UTIL_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[DrawProp->LcdLayer].pFont->Width;
 801eff0:	4b1f      	ldr	r3, [pc, #124]	; (801f070 <UTIL_LCD_DisplayStringAt+0x158>)
 801eff2:	68db      	ldr	r3, [r3, #12]
 801eff4:	4a1e      	ldr	r2, [pc, #120]	; (801f070 <UTIL_LCD_DisplayStringAt+0x158>)
 801eff6:	015b      	lsls	r3, r3, #5
 801eff8:	4413      	add	r3, r2
 801effa:	3308      	adds	r3, #8
 801effc:	681b      	ldr	r3, [r3, #0]
 801effe:	889b      	ldrh	r3, [r3, #4]
 801f000:	461a      	mov	r2, r3
 801f002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f004:	4413      	add	r3, r2
 801f006:	627b      	str	r3, [r7, #36]	; 0x24

    /* Point on the next character */
    Text++;
 801f008:	687b      	ldr	r3, [r7, #4]
 801f00a:	3301      	adds	r3, #1
 801f00c:	607b      	str	r3, [r7, #4]
    i++;
 801f00e:	6a3b      	ldr	r3, [r7, #32]
 801f010:	3301      	adds	r3, #1
 801f012:	623b      	str	r3, [r7, #32]
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
 801f014:	687b      	ldr	r3, [r7, #4]
 801f016:	781b      	ldrb	r3, [r3, #0]
 801f018:	2b00      	cmp	r3, #0
 801f01a:	bf14      	ite	ne
 801f01c:	2301      	movne	r3, #1
 801f01e:	2300      	moveq	r3, #0
 801f020:	b2da      	uxtb	r2, r3
 801f022:	4b13      	ldr	r3, [pc, #76]	; (801f070 <UTIL_LCD_DisplayStringAt+0x158>)
 801f024:	6959      	ldr	r1, [r3, #20]
 801f026:	4b12      	ldr	r3, [pc, #72]	; (801f070 <UTIL_LCD_DisplayStringAt+0x158>)
 801f028:	68db      	ldr	r3, [r3, #12]
 801f02a:	4811      	ldr	r0, [pc, #68]	; (801f070 <UTIL_LCD_DisplayStringAt+0x158>)
 801f02c:	015b      	lsls	r3, r3, #5
 801f02e:	4403      	add	r3, r0
 801f030:	3308      	adds	r3, #8
 801f032:	681b      	ldr	r3, [r3, #0]
 801f034:	889b      	ldrh	r3, [r3, #4]
 801f036:	4618      	mov	r0, r3
 801f038:	6a3b      	ldr	r3, [r7, #32]
 801f03a:	fb00 f303 	mul.w	r3, r0, r3
 801f03e:	1acb      	subs	r3, r1, r3
 801f040:	b29b      	uxth	r3, r3
 801f042:	490b      	ldr	r1, [pc, #44]	; (801f070 <UTIL_LCD_DisplayStringAt+0x158>)
 801f044:	68c9      	ldr	r1, [r1, #12]
 801f046:	480a      	ldr	r0, [pc, #40]	; (801f070 <UTIL_LCD_DisplayStringAt+0x158>)
 801f048:	0149      	lsls	r1, r1, #5
 801f04a:	4401      	add	r1, r0
 801f04c:	3108      	adds	r1, #8
 801f04e:	6809      	ldr	r1, [r1, #0]
 801f050:	8889      	ldrh	r1, [r1, #4]
 801f052:	428b      	cmp	r3, r1
 801f054:	bf2c      	ite	cs
 801f056:	2301      	movcs	r3, #1
 801f058:	2300      	movcc	r3, #0
 801f05a:	b2db      	uxtb	r3, r3
 801f05c:	4013      	ands	r3, r2
 801f05e:	b2db      	uxtb	r3, r3
 801f060:	2b00      	cmp	r3, #0
 801f062:	d1be      	bne.n	801efe2 <UTIL_LCD_DisplayStringAt+0xca>
  }
}
 801f064:	bf00      	nop
 801f066:	bf00      	nop
 801f068:	3728      	adds	r7, #40	; 0x28
 801f06a:	46bd      	mov	sp, r7
 801f06c:	bd80      	pop	{r7, pc}
 801f06e:	bf00      	nop
 801f070:	240056d4 	.word	0x240056d4

0801f074 <UTIL_LCD_DrawRect>:
  * @param  Width  Rectangle width
  * @param  Height Rectangle height
  * @param  Color  Draw color
  */
void UTIL_LCD_DrawRect(uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
 801f074:	b580      	push	{r7, lr}
 801f076:	b084      	sub	sp, #16
 801f078:	af00      	add	r7, sp, #0
 801f07a:	60f8      	str	r0, [r7, #12]
 801f07c:	60b9      	str	r1, [r7, #8]
 801f07e:	607a      	str	r2, [r7, #4]
 801f080:	603b      	str	r3, [r7, #0]
  /* Draw horizontal lines */
  UTIL_LCD_DrawHLine(Xpos, Ypos, Width, Color);
 801f082:	69bb      	ldr	r3, [r7, #24]
 801f084:	687a      	ldr	r2, [r7, #4]
 801f086:	68b9      	ldr	r1, [r7, #8]
 801f088:	68f8      	ldr	r0, [r7, #12]
 801f08a:	f7ff fe59 	bl	801ed40 <UTIL_LCD_DrawHLine>
  UTIL_LCD_DrawHLine(Xpos, (Ypos+ Height - 1U), Width, Color);
 801f08e:	68ba      	ldr	r2, [r7, #8]
 801f090:	683b      	ldr	r3, [r7, #0]
 801f092:	4413      	add	r3, r2
 801f094:	1e59      	subs	r1, r3, #1
 801f096:	69bb      	ldr	r3, [r7, #24]
 801f098:	687a      	ldr	r2, [r7, #4]
 801f09a:	68f8      	ldr	r0, [r7, #12]
 801f09c:	f7ff fe50 	bl	801ed40 <UTIL_LCD_DrawHLine>

  /* Draw vertical lines */
  UTIL_LCD_DrawVLine(Xpos, Ypos, Height, Color);
 801f0a0:	69bb      	ldr	r3, [r7, #24]
 801f0a2:	683a      	ldr	r2, [r7, #0]
 801f0a4:	68b9      	ldr	r1, [r7, #8]
 801f0a6:	68f8      	ldr	r0, [r7, #12]
 801f0a8:	f7ff fe80 	bl	801edac <UTIL_LCD_DrawVLine>
  UTIL_LCD_DrawVLine((Xpos + Width - 1U), Ypos, Height, Color);
 801f0ac:	68fa      	ldr	r2, [r7, #12]
 801f0ae:	687b      	ldr	r3, [r7, #4]
 801f0b0:	4413      	add	r3, r2
 801f0b2:	1e58      	subs	r0, r3, #1
 801f0b4:	69bb      	ldr	r3, [r7, #24]
 801f0b6:	683a      	ldr	r2, [r7, #0]
 801f0b8:	68b9      	ldr	r1, [r7, #8]
 801f0ba:	f7ff fe77 	bl	801edac <UTIL_LCD_DrawVLine>
}
 801f0be:	bf00      	nop
 801f0c0:	3710      	adds	r7, #16
 801f0c2:	46bd      	mov	sp, r7
 801f0c4:	bd80      	pop	{r7, pc}
	...

0801f0c8 <UTIL_LCD_DrawCircle>:
  * @param  Ypos    Y position
  * @param  Radius  Circle radius
  * @param  Color   Draw color
  */
void UTIL_LCD_DrawCircle(uint32_t Xpos, uint32_t Ypos, uint32_t Radius, uint32_t Color)
{
 801f0c8:	b580      	push	{r7, lr}
 801f0ca:	b088      	sub	sp, #32
 801f0cc:	af00      	add	r7, sp, #0
 801f0ce:	60f8      	str	r0, [r7, #12]
 801f0d0:	60b9      	str	r1, [r7, #8]
 801f0d2:	607a      	str	r2, [r7, #4]
 801f0d4:	603b      	str	r3, [r7, #0]
  int32_t   decision;  /* Decision Variable */
  uint32_t  current_x; /* Current X Value */
  uint32_t  current_y; /* Current Y Value */

  decision = 3 - (Radius << 1);
 801f0d6:	687b      	ldr	r3, [r7, #4]
 801f0d8:	005b      	lsls	r3, r3, #1
 801f0da:	f1c3 0303 	rsb	r3, r3, #3
 801f0de:	61fb      	str	r3, [r7, #28]
  current_x = 0;
 801f0e0:	2300      	movs	r3, #0
 801f0e2:	61bb      	str	r3, [r7, #24]
  current_y = Radius;
 801f0e4:	687b      	ldr	r3, [r7, #4]
 801f0e6:	617b      	str	r3, [r7, #20]

  while (current_x <= current_y)
 801f0e8:	e0eb      	b.n	801f2c2 <UTIL_LCD_DrawCircle+0x1fa>
  {
    if((Ypos - current_y) < DrawProp->LcdYsize)
 801f0ea:	68ba      	ldr	r2, [r7, #8]
 801f0ec:	697b      	ldr	r3, [r7, #20]
 801f0ee:	1ad2      	subs	r2, r2, r3
 801f0f0:	4b79      	ldr	r3, [pc, #484]	; (801f2d8 <UTIL_LCD_DrawCircle+0x210>)
 801f0f2:	699b      	ldr	r3, [r3, #24]
 801f0f4:	429a      	cmp	r2, r3
 801f0f6:	d22d      	bcs.n	801f154 <UTIL_LCD_DrawCircle+0x8c>
    {
      if((Xpos + current_x) < DrawProp->LcdXsize)
 801f0f8:	68fa      	ldr	r2, [r7, #12]
 801f0fa:	69bb      	ldr	r3, [r7, #24]
 801f0fc:	441a      	add	r2, r3
 801f0fe:	4b76      	ldr	r3, [pc, #472]	; (801f2d8 <UTIL_LCD_DrawCircle+0x210>)
 801f100:	695b      	ldr	r3, [r3, #20]
 801f102:	429a      	cmp	r2, r3
 801f104:	d20f      	bcs.n	801f126 <UTIL_LCD_DrawCircle+0x5e>
      {
        UTIL_LCD_SetPixel((Xpos + current_x), (Ypos - current_y), Color);
 801f106:	68fb      	ldr	r3, [r7, #12]
 801f108:	b29a      	uxth	r2, r3
 801f10a:	69bb      	ldr	r3, [r7, #24]
 801f10c:	b29b      	uxth	r3, r3
 801f10e:	4413      	add	r3, r2
 801f110:	b298      	uxth	r0, r3
 801f112:	68bb      	ldr	r3, [r7, #8]
 801f114:	b29a      	uxth	r2, r3
 801f116:	697b      	ldr	r3, [r7, #20]
 801f118:	b29b      	uxth	r3, r3
 801f11a:	1ad3      	subs	r3, r2, r3
 801f11c:	b29b      	uxth	r3, r3
 801f11e:	683a      	ldr	r2, [r7, #0]
 801f120:	4619      	mov	r1, r3
 801f122:	f7ff fe79 	bl	801ee18 <UTIL_LCD_SetPixel>
      }
      if((Xpos - current_x) < DrawProp->LcdXsize)
 801f126:	68fa      	ldr	r2, [r7, #12]
 801f128:	69bb      	ldr	r3, [r7, #24]
 801f12a:	1ad2      	subs	r2, r2, r3
 801f12c:	4b6a      	ldr	r3, [pc, #424]	; (801f2d8 <UTIL_LCD_DrawCircle+0x210>)
 801f12e:	695b      	ldr	r3, [r3, #20]
 801f130:	429a      	cmp	r2, r3
 801f132:	d20f      	bcs.n	801f154 <UTIL_LCD_DrawCircle+0x8c>
      {
        UTIL_LCD_SetPixel((Xpos - current_x), (Ypos - current_y), Color);
 801f134:	68fb      	ldr	r3, [r7, #12]
 801f136:	b29a      	uxth	r2, r3
 801f138:	69bb      	ldr	r3, [r7, #24]
 801f13a:	b29b      	uxth	r3, r3
 801f13c:	1ad3      	subs	r3, r2, r3
 801f13e:	b298      	uxth	r0, r3
 801f140:	68bb      	ldr	r3, [r7, #8]
 801f142:	b29a      	uxth	r2, r3
 801f144:	697b      	ldr	r3, [r7, #20]
 801f146:	b29b      	uxth	r3, r3
 801f148:	1ad3      	subs	r3, r2, r3
 801f14a:	b29b      	uxth	r3, r3
 801f14c:	683a      	ldr	r2, [r7, #0]
 801f14e:	4619      	mov	r1, r3
 801f150:	f7ff fe62 	bl	801ee18 <UTIL_LCD_SetPixel>
      }
    }

    if((Ypos - current_x) < DrawProp->LcdYsize)
 801f154:	68ba      	ldr	r2, [r7, #8]
 801f156:	69bb      	ldr	r3, [r7, #24]
 801f158:	1ad2      	subs	r2, r2, r3
 801f15a:	4b5f      	ldr	r3, [pc, #380]	; (801f2d8 <UTIL_LCD_DrawCircle+0x210>)
 801f15c:	699b      	ldr	r3, [r3, #24]
 801f15e:	429a      	cmp	r2, r3
 801f160:	d22d      	bcs.n	801f1be <UTIL_LCD_DrawCircle+0xf6>
    {
      if((Xpos + current_y) < DrawProp->LcdXsize)
 801f162:	68fa      	ldr	r2, [r7, #12]
 801f164:	697b      	ldr	r3, [r7, #20]
 801f166:	441a      	add	r2, r3
 801f168:	4b5b      	ldr	r3, [pc, #364]	; (801f2d8 <UTIL_LCD_DrawCircle+0x210>)
 801f16a:	695b      	ldr	r3, [r3, #20]
 801f16c:	429a      	cmp	r2, r3
 801f16e:	d20f      	bcs.n	801f190 <UTIL_LCD_DrawCircle+0xc8>
      {
        UTIL_LCD_SetPixel((Xpos + current_y), (Ypos - current_x), Color);
 801f170:	68fb      	ldr	r3, [r7, #12]
 801f172:	b29a      	uxth	r2, r3
 801f174:	697b      	ldr	r3, [r7, #20]
 801f176:	b29b      	uxth	r3, r3
 801f178:	4413      	add	r3, r2
 801f17a:	b298      	uxth	r0, r3
 801f17c:	68bb      	ldr	r3, [r7, #8]
 801f17e:	b29a      	uxth	r2, r3
 801f180:	69bb      	ldr	r3, [r7, #24]
 801f182:	b29b      	uxth	r3, r3
 801f184:	1ad3      	subs	r3, r2, r3
 801f186:	b29b      	uxth	r3, r3
 801f188:	683a      	ldr	r2, [r7, #0]
 801f18a:	4619      	mov	r1, r3
 801f18c:	f7ff fe44 	bl	801ee18 <UTIL_LCD_SetPixel>
      }
      if((Xpos - current_y) < DrawProp->LcdXsize)
 801f190:	68fa      	ldr	r2, [r7, #12]
 801f192:	697b      	ldr	r3, [r7, #20]
 801f194:	1ad2      	subs	r2, r2, r3
 801f196:	4b50      	ldr	r3, [pc, #320]	; (801f2d8 <UTIL_LCD_DrawCircle+0x210>)
 801f198:	695b      	ldr	r3, [r3, #20]
 801f19a:	429a      	cmp	r2, r3
 801f19c:	d20f      	bcs.n	801f1be <UTIL_LCD_DrawCircle+0xf6>
      {
        UTIL_LCD_SetPixel((Xpos - current_y), (Ypos - current_x), Color);
 801f19e:	68fb      	ldr	r3, [r7, #12]
 801f1a0:	b29a      	uxth	r2, r3
 801f1a2:	697b      	ldr	r3, [r7, #20]
 801f1a4:	b29b      	uxth	r3, r3
 801f1a6:	1ad3      	subs	r3, r2, r3
 801f1a8:	b298      	uxth	r0, r3
 801f1aa:	68bb      	ldr	r3, [r7, #8]
 801f1ac:	b29a      	uxth	r2, r3
 801f1ae:	69bb      	ldr	r3, [r7, #24]
 801f1b0:	b29b      	uxth	r3, r3
 801f1b2:	1ad3      	subs	r3, r2, r3
 801f1b4:	b29b      	uxth	r3, r3
 801f1b6:	683a      	ldr	r2, [r7, #0]
 801f1b8:	4619      	mov	r1, r3
 801f1ba:	f7ff fe2d 	bl	801ee18 <UTIL_LCD_SetPixel>
      }
    }

    if((Ypos + current_y) < DrawProp->LcdYsize)
 801f1be:	68ba      	ldr	r2, [r7, #8]
 801f1c0:	697b      	ldr	r3, [r7, #20]
 801f1c2:	441a      	add	r2, r3
 801f1c4:	4b44      	ldr	r3, [pc, #272]	; (801f2d8 <UTIL_LCD_DrawCircle+0x210>)
 801f1c6:	699b      	ldr	r3, [r3, #24]
 801f1c8:	429a      	cmp	r2, r3
 801f1ca:	d22d      	bcs.n	801f228 <UTIL_LCD_DrawCircle+0x160>
    {
      if((Xpos + current_x) < DrawProp->LcdXsize)
 801f1cc:	68fa      	ldr	r2, [r7, #12]
 801f1ce:	69bb      	ldr	r3, [r7, #24]
 801f1d0:	441a      	add	r2, r3
 801f1d2:	4b41      	ldr	r3, [pc, #260]	; (801f2d8 <UTIL_LCD_DrawCircle+0x210>)
 801f1d4:	695b      	ldr	r3, [r3, #20]
 801f1d6:	429a      	cmp	r2, r3
 801f1d8:	d20f      	bcs.n	801f1fa <UTIL_LCD_DrawCircle+0x132>
      {
        UTIL_LCD_SetPixel((Xpos + current_x), (Ypos + current_y), Color);
 801f1da:	68fb      	ldr	r3, [r7, #12]
 801f1dc:	b29a      	uxth	r2, r3
 801f1de:	69bb      	ldr	r3, [r7, #24]
 801f1e0:	b29b      	uxth	r3, r3
 801f1e2:	4413      	add	r3, r2
 801f1e4:	b298      	uxth	r0, r3
 801f1e6:	68bb      	ldr	r3, [r7, #8]
 801f1e8:	b29a      	uxth	r2, r3
 801f1ea:	697b      	ldr	r3, [r7, #20]
 801f1ec:	b29b      	uxth	r3, r3
 801f1ee:	4413      	add	r3, r2
 801f1f0:	b29b      	uxth	r3, r3
 801f1f2:	683a      	ldr	r2, [r7, #0]
 801f1f4:	4619      	mov	r1, r3
 801f1f6:	f7ff fe0f 	bl	801ee18 <UTIL_LCD_SetPixel>
      }
      if((Xpos - current_x) < DrawProp->LcdXsize)
 801f1fa:	68fa      	ldr	r2, [r7, #12]
 801f1fc:	69bb      	ldr	r3, [r7, #24]
 801f1fe:	1ad2      	subs	r2, r2, r3
 801f200:	4b35      	ldr	r3, [pc, #212]	; (801f2d8 <UTIL_LCD_DrawCircle+0x210>)
 801f202:	695b      	ldr	r3, [r3, #20]
 801f204:	429a      	cmp	r2, r3
 801f206:	d20f      	bcs.n	801f228 <UTIL_LCD_DrawCircle+0x160>
      {
        UTIL_LCD_SetPixel((Xpos - current_x), (Ypos + current_y), Color);
 801f208:	68fb      	ldr	r3, [r7, #12]
 801f20a:	b29a      	uxth	r2, r3
 801f20c:	69bb      	ldr	r3, [r7, #24]
 801f20e:	b29b      	uxth	r3, r3
 801f210:	1ad3      	subs	r3, r2, r3
 801f212:	b298      	uxth	r0, r3
 801f214:	68bb      	ldr	r3, [r7, #8]
 801f216:	b29a      	uxth	r2, r3
 801f218:	697b      	ldr	r3, [r7, #20]
 801f21a:	b29b      	uxth	r3, r3
 801f21c:	4413      	add	r3, r2
 801f21e:	b29b      	uxth	r3, r3
 801f220:	683a      	ldr	r2, [r7, #0]
 801f222:	4619      	mov	r1, r3
 801f224:	f7ff fdf8 	bl	801ee18 <UTIL_LCD_SetPixel>
      }
    }

    if((Ypos + current_x) < DrawProp->LcdYsize)
 801f228:	68ba      	ldr	r2, [r7, #8]
 801f22a:	69bb      	ldr	r3, [r7, #24]
 801f22c:	441a      	add	r2, r3
 801f22e:	4b2a      	ldr	r3, [pc, #168]	; (801f2d8 <UTIL_LCD_DrawCircle+0x210>)
 801f230:	699b      	ldr	r3, [r3, #24]
 801f232:	429a      	cmp	r2, r3
 801f234:	d22d      	bcs.n	801f292 <UTIL_LCD_DrawCircle+0x1ca>
    {
      if((Xpos + current_y) < DrawProp->LcdXsize)
 801f236:	68fa      	ldr	r2, [r7, #12]
 801f238:	697b      	ldr	r3, [r7, #20]
 801f23a:	441a      	add	r2, r3
 801f23c:	4b26      	ldr	r3, [pc, #152]	; (801f2d8 <UTIL_LCD_DrawCircle+0x210>)
 801f23e:	695b      	ldr	r3, [r3, #20]
 801f240:	429a      	cmp	r2, r3
 801f242:	d20f      	bcs.n	801f264 <UTIL_LCD_DrawCircle+0x19c>
      {
        UTIL_LCD_SetPixel((Xpos + current_y), (Ypos + current_x), Color);
 801f244:	68fb      	ldr	r3, [r7, #12]
 801f246:	b29a      	uxth	r2, r3
 801f248:	697b      	ldr	r3, [r7, #20]
 801f24a:	b29b      	uxth	r3, r3
 801f24c:	4413      	add	r3, r2
 801f24e:	b298      	uxth	r0, r3
 801f250:	68bb      	ldr	r3, [r7, #8]
 801f252:	b29a      	uxth	r2, r3
 801f254:	69bb      	ldr	r3, [r7, #24]
 801f256:	b29b      	uxth	r3, r3
 801f258:	4413      	add	r3, r2
 801f25a:	b29b      	uxth	r3, r3
 801f25c:	683a      	ldr	r2, [r7, #0]
 801f25e:	4619      	mov	r1, r3
 801f260:	f7ff fdda 	bl	801ee18 <UTIL_LCD_SetPixel>
      }
      if((Xpos - current_y) < DrawProp->LcdXsize)
 801f264:	68fa      	ldr	r2, [r7, #12]
 801f266:	697b      	ldr	r3, [r7, #20]
 801f268:	1ad2      	subs	r2, r2, r3
 801f26a:	4b1b      	ldr	r3, [pc, #108]	; (801f2d8 <UTIL_LCD_DrawCircle+0x210>)
 801f26c:	695b      	ldr	r3, [r3, #20]
 801f26e:	429a      	cmp	r2, r3
 801f270:	d20f      	bcs.n	801f292 <UTIL_LCD_DrawCircle+0x1ca>
      {
        UTIL_LCD_SetPixel((Xpos - current_y), (Ypos + current_x), Color);
 801f272:	68fb      	ldr	r3, [r7, #12]
 801f274:	b29a      	uxth	r2, r3
 801f276:	697b      	ldr	r3, [r7, #20]
 801f278:	b29b      	uxth	r3, r3
 801f27a:	1ad3      	subs	r3, r2, r3
 801f27c:	b298      	uxth	r0, r3
 801f27e:	68bb      	ldr	r3, [r7, #8]
 801f280:	b29a      	uxth	r2, r3
 801f282:	69bb      	ldr	r3, [r7, #24]
 801f284:	b29b      	uxth	r3, r3
 801f286:	4413      	add	r3, r2
 801f288:	b29b      	uxth	r3, r3
 801f28a:	683a      	ldr	r2, [r7, #0]
 801f28c:	4619      	mov	r1, r3
 801f28e:	f7ff fdc3 	bl	801ee18 <UTIL_LCD_SetPixel>
      }
    }

    if (decision < 0)
 801f292:	69fb      	ldr	r3, [r7, #28]
 801f294:	2b00      	cmp	r3, #0
 801f296:	da06      	bge.n	801f2a6 <UTIL_LCD_DrawCircle+0x1de>
    {
      decision += (current_x << 2) + 6;
 801f298:	69bb      	ldr	r3, [r7, #24]
 801f29a:	009a      	lsls	r2, r3, #2
 801f29c:	69fb      	ldr	r3, [r7, #28]
 801f29e:	4413      	add	r3, r2
 801f2a0:	3306      	adds	r3, #6
 801f2a2:	61fb      	str	r3, [r7, #28]
 801f2a4:	e00a      	b.n	801f2bc <UTIL_LCD_DrawCircle+0x1f4>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 801f2a6:	69ba      	ldr	r2, [r7, #24]
 801f2a8:	697b      	ldr	r3, [r7, #20]
 801f2aa:	1ad3      	subs	r3, r2, r3
 801f2ac:	009a      	lsls	r2, r3, #2
 801f2ae:	69fb      	ldr	r3, [r7, #28]
 801f2b0:	4413      	add	r3, r2
 801f2b2:	330a      	adds	r3, #10
 801f2b4:	61fb      	str	r3, [r7, #28]
      current_y--;
 801f2b6:	697b      	ldr	r3, [r7, #20]
 801f2b8:	3b01      	subs	r3, #1
 801f2ba:	617b      	str	r3, [r7, #20]
    }
    current_x++;
 801f2bc:	69bb      	ldr	r3, [r7, #24]
 801f2be:	3301      	adds	r3, #1
 801f2c0:	61bb      	str	r3, [r7, #24]
  while (current_x <= current_y)
 801f2c2:	69ba      	ldr	r2, [r7, #24]
 801f2c4:	697b      	ldr	r3, [r7, #20]
 801f2c6:	429a      	cmp	r2, r3
 801f2c8:	f67f af0f 	bls.w	801f0ea <UTIL_LCD_DrawCircle+0x22>
  }
}
 801f2cc:	bf00      	nop
 801f2ce:	bf00      	nop
 801f2d0:	3720      	adds	r7, #32
 801f2d2:	46bd      	mov	sp, r7
 801f2d4:	bd80      	pop	{r7, pc}
 801f2d6:	bf00      	nop
 801f2d8:	240056d4 	.word	0x240056d4

0801f2dc <UTIL_LCD_FillRect>:
  * @param  Width  Rectangle width
  * @param  Height Rectangle height
  * @param  Color  Draw color
  */
void UTIL_LCD_FillRect(uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
 801f2dc:	b590      	push	{r4, r7, lr}
 801f2de:	b087      	sub	sp, #28
 801f2e0:	af02      	add	r7, sp, #8
 801f2e2:	60f8      	str	r0, [r7, #12]
 801f2e4:	60b9      	str	r1, [r7, #8]
 801f2e6:	607a      	str	r2, [r7, #4]
 801f2e8:	603b      	str	r3, [r7, #0]
  /* Fill the rectangle */
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 801f2ea:	4b17      	ldr	r3, [pc, #92]	; (801f348 <UTIL_LCD_FillRect+0x6c>)
 801f2ec:	69db      	ldr	r3, [r3, #28]
 801f2ee:	2b02      	cmp	r3, #2
 801f2f0:	d11a      	bne.n	801f328 <UTIL_LCD_FillRect+0x4c>
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, CONVERTARGB88882RGB565(Color));
 801f2f2:	4b16      	ldr	r3, [pc, #88]	; (801f34c <UTIL_LCD_FillRect+0x70>)
 801f2f4:	691c      	ldr	r4, [r3, #16]
 801f2f6:	4b14      	ldr	r3, [pc, #80]	; (801f348 <UTIL_LCD_FillRect+0x6c>)
 801f2f8:	6918      	ldr	r0, [r3, #16]
 801f2fa:	6a3b      	ldr	r3, [r7, #32]
 801f2fc:	08db      	lsrs	r3, r3, #3
 801f2fe:	f003 021f 	and.w	r2, r3, #31
 801f302:	6a3b      	ldr	r3, [r7, #32]
 801f304:	0a9b      	lsrs	r3, r3, #10
 801f306:	015b      	lsls	r3, r3, #5
 801f308:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801f30c:	431a      	orrs	r2, r3
 801f30e:	6a3b      	ldr	r3, [r7, #32]
 801f310:	0cdb      	lsrs	r3, r3, #19
 801f312:	02db      	lsls	r3, r3, #11
 801f314:	b29b      	uxth	r3, r3
 801f316:	4313      	orrs	r3, r2
 801f318:	9301      	str	r3, [sp, #4]
 801f31a:	683b      	ldr	r3, [r7, #0]
 801f31c:	9300      	str	r3, [sp, #0]
 801f31e:	687b      	ldr	r3, [r7, #4]
 801f320:	68ba      	ldr	r2, [r7, #8]
 801f322:	68f9      	ldr	r1, [r7, #12]
 801f324:	47a0      	blx	r4
  }
  else
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, Color);
  }
}
 801f326:	e00b      	b.n	801f340 <UTIL_LCD_FillRect+0x64>
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, Color);
 801f328:	4b08      	ldr	r3, [pc, #32]	; (801f34c <UTIL_LCD_FillRect+0x70>)
 801f32a:	691c      	ldr	r4, [r3, #16]
 801f32c:	4b06      	ldr	r3, [pc, #24]	; (801f348 <UTIL_LCD_FillRect+0x6c>)
 801f32e:	6918      	ldr	r0, [r3, #16]
 801f330:	6a3b      	ldr	r3, [r7, #32]
 801f332:	9301      	str	r3, [sp, #4]
 801f334:	683b      	ldr	r3, [r7, #0]
 801f336:	9300      	str	r3, [sp, #0]
 801f338:	687b      	ldr	r3, [r7, #4]
 801f33a:	68ba      	ldr	r2, [r7, #8]
 801f33c:	68f9      	ldr	r1, [r7, #12]
 801f33e:	47a0      	blx	r4
}
 801f340:	bf00      	nop
 801f342:	3714      	adds	r7, #20
 801f344:	46bd      	mov	sp, r7
 801f346:	bd90      	pop	{r4, r7, pc}
 801f348:	240056d4 	.word	0x240056d4
 801f34c:	24005714 	.word	0x24005714

0801f350 <UTIL_LCD_FillCircle>:
  * @param  Ypos   Y position
  * @param  Radius Circle radius
  * @param  Color  Draw color
  */
void UTIL_LCD_FillCircle(uint32_t Xpos, uint32_t Ypos, uint32_t Radius, uint32_t Color)
{
 801f350:	b580      	push	{r7, lr}
 801f352:	b088      	sub	sp, #32
 801f354:	af00      	add	r7, sp, #0
 801f356:	60f8      	str	r0, [r7, #12]
 801f358:	60b9      	str	r1, [r7, #8]
 801f35a:	607a      	str	r2, [r7, #4]
 801f35c:	603b      	str	r3, [r7, #0]
  int32_t   decision;  /* Decision Variable */
  uint32_t  current_x; /* Current X Value */
  uint32_t  current_y; /* Current Y Value */

  decision = 3 - (Radius << 1);
 801f35e:	687b      	ldr	r3, [r7, #4]
 801f360:	005b      	lsls	r3, r3, #1
 801f362:	f1c3 0303 	rsb	r3, r3, #3
 801f366:	61fb      	str	r3, [r7, #28]

  current_x = 0;
 801f368:	2300      	movs	r3, #0
 801f36a:	61bb      	str	r3, [r7, #24]
  current_y = Radius;
 801f36c:	687b      	ldr	r3, [r7, #4]
 801f36e:	617b      	str	r3, [r7, #20]

  while (current_x <= current_y)
 801f370:	e08b      	b.n	801f48a <UTIL_LCD_FillCircle+0x13a>
  {
    if(current_y > 0)
 801f372:	697b      	ldr	r3, [r7, #20]
 801f374:	2b00      	cmp	r3, #0
 801f376:	d036      	beq.n	801f3e6 <UTIL_LCD_FillCircle+0x96>
    {
      if(current_y >= Xpos)
 801f378:	697a      	ldr	r2, [r7, #20]
 801f37a:	68fb      	ldr	r3, [r7, #12]
 801f37c:	429a      	cmp	r2, r3
 801f37e:	d31c      	bcc.n	801f3ba <UTIL_LCD_FillCircle+0x6a>
      {
        UTIL_LCD_DrawHLine(0, Ypos + current_x, 2*current_y - (current_y - Xpos), Color);
 801f380:	68ba      	ldr	r2, [r7, #8]
 801f382:	69bb      	ldr	r3, [r7, #24]
 801f384:	18d0      	adds	r0, r2, r3
 801f386:	697b      	ldr	r3, [r7, #20]
 801f388:	005a      	lsls	r2, r3, #1
 801f38a:	68f9      	ldr	r1, [r7, #12]
 801f38c:	697b      	ldr	r3, [r7, #20]
 801f38e:	1acb      	subs	r3, r1, r3
 801f390:	441a      	add	r2, r3
 801f392:	683b      	ldr	r3, [r7, #0]
 801f394:	4601      	mov	r1, r0
 801f396:	2000      	movs	r0, #0
 801f398:	f7ff fcd2 	bl	801ed40 <UTIL_LCD_DrawHLine>
        UTIL_LCD_DrawHLine(0, Ypos - current_x, 2*current_y - (current_y - Xpos), Color);
 801f39c:	68ba      	ldr	r2, [r7, #8]
 801f39e:	69bb      	ldr	r3, [r7, #24]
 801f3a0:	1ad0      	subs	r0, r2, r3
 801f3a2:	697b      	ldr	r3, [r7, #20]
 801f3a4:	005a      	lsls	r2, r3, #1
 801f3a6:	68f9      	ldr	r1, [r7, #12]
 801f3a8:	697b      	ldr	r3, [r7, #20]
 801f3aa:	1acb      	subs	r3, r1, r3
 801f3ac:	441a      	add	r2, r3
 801f3ae:	683b      	ldr	r3, [r7, #0]
 801f3b0:	4601      	mov	r1, r0
 801f3b2:	2000      	movs	r0, #0
 801f3b4:	f7ff fcc4 	bl	801ed40 <UTIL_LCD_DrawHLine>
 801f3b8:	e015      	b.n	801f3e6 <UTIL_LCD_FillCircle+0x96>
      }
      else
      {
        UTIL_LCD_DrawHLine(Xpos - current_y, Ypos + current_x, 2*current_y, Color);
 801f3ba:	68fa      	ldr	r2, [r7, #12]
 801f3bc:	697b      	ldr	r3, [r7, #20]
 801f3be:	1ad0      	subs	r0, r2, r3
 801f3c0:	68ba      	ldr	r2, [r7, #8]
 801f3c2:	69bb      	ldr	r3, [r7, #24]
 801f3c4:	18d1      	adds	r1, r2, r3
 801f3c6:	697b      	ldr	r3, [r7, #20]
 801f3c8:	005a      	lsls	r2, r3, #1
 801f3ca:	683b      	ldr	r3, [r7, #0]
 801f3cc:	f7ff fcb8 	bl	801ed40 <UTIL_LCD_DrawHLine>
        UTIL_LCD_DrawHLine(Xpos - current_y, Ypos - current_x, 2*current_y, Color);
 801f3d0:	68fa      	ldr	r2, [r7, #12]
 801f3d2:	697b      	ldr	r3, [r7, #20]
 801f3d4:	1ad0      	subs	r0, r2, r3
 801f3d6:	68ba      	ldr	r2, [r7, #8]
 801f3d8:	69bb      	ldr	r3, [r7, #24]
 801f3da:	1ad1      	subs	r1, r2, r3
 801f3dc:	697b      	ldr	r3, [r7, #20]
 801f3de:	005a      	lsls	r2, r3, #1
 801f3e0:	683b      	ldr	r3, [r7, #0]
 801f3e2:	f7ff fcad 	bl	801ed40 <UTIL_LCD_DrawHLine>
      }
    }

    if(current_x > 0)
 801f3e6:	69bb      	ldr	r3, [r7, #24]
 801f3e8:	2b00      	cmp	r3, #0
 801f3ea:	d036      	beq.n	801f45a <UTIL_LCD_FillCircle+0x10a>
    {
      if(current_x >= Xpos)
 801f3ec:	69ba      	ldr	r2, [r7, #24]
 801f3ee:	68fb      	ldr	r3, [r7, #12]
 801f3f0:	429a      	cmp	r2, r3
 801f3f2:	d31c      	bcc.n	801f42e <UTIL_LCD_FillCircle+0xde>
      {
        UTIL_LCD_DrawHLine(0, Ypos - current_y, 2*current_x - (current_x - Xpos), Color);
 801f3f4:	68ba      	ldr	r2, [r7, #8]
 801f3f6:	697b      	ldr	r3, [r7, #20]
 801f3f8:	1ad0      	subs	r0, r2, r3
 801f3fa:	69bb      	ldr	r3, [r7, #24]
 801f3fc:	005a      	lsls	r2, r3, #1
 801f3fe:	68f9      	ldr	r1, [r7, #12]
 801f400:	69bb      	ldr	r3, [r7, #24]
 801f402:	1acb      	subs	r3, r1, r3
 801f404:	441a      	add	r2, r3
 801f406:	683b      	ldr	r3, [r7, #0]
 801f408:	4601      	mov	r1, r0
 801f40a:	2000      	movs	r0, #0
 801f40c:	f7ff fc98 	bl	801ed40 <UTIL_LCD_DrawHLine>
        UTIL_LCD_DrawHLine(0, Ypos + current_y, 2*current_x - (current_x - Xpos), Color);
 801f410:	68ba      	ldr	r2, [r7, #8]
 801f412:	697b      	ldr	r3, [r7, #20]
 801f414:	18d0      	adds	r0, r2, r3
 801f416:	69bb      	ldr	r3, [r7, #24]
 801f418:	005a      	lsls	r2, r3, #1
 801f41a:	68f9      	ldr	r1, [r7, #12]
 801f41c:	69bb      	ldr	r3, [r7, #24]
 801f41e:	1acb      	subs	r3, r1, r3
 801f420:	441a      	add	r2, r3
 801f422:	683b      	ldr	r3, [r7, #0]
 801f424:	4601      	mov	r1, r0
 801f426:	2000      	movs	r0, #0
 801f428:	f7ff fc8a 	bl	801ed40 <UTIL_LCD_DrawHLine>
 801f42c:	e015      	b.n	801f45a <UTIL_LCD_FillCircle+0x10a>
      }
      else
      {
        UTIL_LCD_DrawHLine(Xpos - current_x, Ypos - current_y, 2*current_x, Color);
 801f42e:	68fa      	ldr	r2, [r7, #12]
 801f430:	69bb      	ldr	r3, [r7, #24]
 801f432:	1ad0      	subs	r0, r2, r3
 801f434:	68ba      	ldr	r2, [r7, #8]
 801f436:	697b      	ldr	r3, [r7, #20]
 801f438:	1ad1      	subs	r1, r2, r3
 801f43a:	69bb      	ldr	r3, [r7, #24]
 801f43c:	005a      	lsls	r2, r3, #1
 801f43e:	683b      	ldr	r3, [r7, #0]
 801f440:	f7ff fc7e 	bl	801ed40 <UTIL_LCD_DrawHLine>
        UTIL_LCD_DrawHLine(Xpos - current_x, Ypos + current_y, 2*current_x, Color);
 801f444:	68fa      	ldr	r2, [r7, #12]
 801f446:	69bb      	ldr	r3, [r7, #24]
 801f448:	1ad0      	subs	r0, r2, r3
 801f44a:	68ba      	ldr	r2, [r7, #8]
 801f44c:	697b      	ldr	r3, [r7, #20]
 801f44e:	18d1      	adds	r1, r2, r3
 801f450:	69bb      	ldr	r3, [r7, #24]
 801f452:	005a      	lsls	r2, r3, #1
 801f454:	683b      	ldr	r3, [r7, #0]
 801f456:	f7ff fc73 	bl	801ed40 <UTIL_LCD_DrawHLine>
      }
    }
    if (decision < 0)
 801f45a:	69fb      	ldr	r3, [r7, #28]
 801f45c:	2b00      	cmp	r3, #0
 801f45e:	da06      	bge.n	801f46e <UTIL_LCD_FillCircle+0x11e>
    {
      decision += (current_x << 2) + 6;
 801f460:	69bb      	ldr	r3, [r7, #24]
 801f462:	009a      	lsls	r2, r3, #2
 801f464:	69fb      	ldr	r3, [r7, #28]
 801f466:	4413      	add	r3, r2
 801f468:	3306      	adds	r3, #6
 801f46a:	61fb      	str	r3, [r7, #28]
 801f46c:	e00a      	b.n	801f484 <UTIL_LCD_FillCircle+0x134>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 801f46e:	69ba      	ldr	r2, [r7, #24]
 801f470:	697b      	ldr	r3, [r7, #20]
 801f472:	1ad3      	subs	r3, r2, r3
 801f474:	009a      	lsls	r2, r3, #2
 801f476:	69fb      	ldr	r3, [r7, #28]
 801f478:	4413      	add	r3, r2
 801f47a:	330a      	adds	r3, #10
 801f47c:	61fb      	str	r3, [r7, #28]
      current_y--;
 801f47e:	697b      	ldr	r3, [r7, #20]
 801f480:	3b01      	subs	r3, #1
 801f482:	617b      	str	r3, [r7, #20]
    }
    current_x++;
 801f484:	69bb      	ldr	r3, [r7, #24]
 801f486:	3301      	adds	r3, #1
 801f488:	61bb      	str	r3, [r7, #24]
  while (current_x <= current_y)
 801f48a:	69ba      	ldr	r2, [r7, #24]
 801f48c:	697b      	ldr	r3, [r7, #20]
 801f48e:	429a      	cmp	r2, r3
 801f490:	f67f af6f 	bls.w	801f372 <UTIL_LCD_FillCircle+0x22>
  }

  UTIL_LCD_DrawCircle(Xpos, Ypos, Radius, Color);
 801f494:	683b      	ldr	r3, [r7, #0]
 801f496:	687a      	ldr	r2, [r7, #4]
 801f498:	68b9      	ldr	r1, [r7, #8]
 801f49a:	68f8      	ldr	r0, [r7, #12]
 801f49c:	f7ff fe14 	bl	801f0c8 <UTIL_LCD_DrawCircle>
}
 801f4a0:	bf00      	nop
 801f4a2:	3720      	adds	r7, #32
 801f4a4:	46bd      	mov	sp, r7
 801f4a6:	bd80      	pop	{r7, pc}

0801f4a8 <DrawChar>:
  * @param  Xpos  Line where to display the character shape
  * @param  Ypos  Start column address
  * @param  pData Pointer to the character data
  */
static void DrawChar(uint32_t Xpos, uint32_t Ypos, const uint8_t *pData)
{
 801f4a8:	b580      	push	{r7, lr}
 801f4aa:	b0b2      	sub	sp, #200	; 0xc8
 801f4ac:	af02      	add	r7, sp, #8
 801f4ae:	60f8      	str	r0, [r7, #12]
 801f4b0:	60b9      	str	r1, [r7, #8]
 801f4b2:	607a      	str	r2, [r7, #4]
  uint32_t i = 0, j = 0, offset;
 801f4b4:	2300      	movs	r3, #0
 801f4b6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 801f4ba:	2300      	movs	r3, #0
 801f4bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t height, width;
  uint8_t  *pchar;
  uint32_t line;

  height = DrawProp[DrawProp->LcdLayer].pFont->Height;
 801f4c0:	4ba5      	ldr	r3, [pc, #660]	; (801f758 <DrawChar+0x2b0>)
 801f4c2:	68db      	ldr	r3, [r3, #12]
 801f4c4:	4aa4      	ldr	r2, [pc, #656]	; (801f758 <DrawChar+0x2b0>)
 801f4c6:	015b      	lsls	r3, r3, #5
 801f4c8:	4413      	add	r3, r2
 801f4ca:	3308      	adds	r3, #8
 801f4cc:	681b      	ldr	r3, [r3, #0]
 801f4ce:	88db      	ldrh	r3, [r3, #6]
 801f4d0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  width  = DrawProp[DrawProp->LcdLayer].pFont->Width;
 801f4d4:	4ba0      	ldr	r3, [pc, #640]	; (801f758 <DrawChar+0x2b0>)
 801f4d6:	68db      	ldr	r3, [r3, #12]
 801f4d8:	4a9f      	ldr	r2, [pc, #636]	; (801f758 <DrawChar+0x2b0>)
 801f4da:	015b      	lsls	r3, r3, #5
 801f4dc:	4413      	add	r3, r2
 801f4de:	3308      	adds	r3, #8
 801f4e0:	681b      	ldr	r3, [r3, #0]
 801f4e2:	889b      	ldrh	r3, [r3, #4]
 801f4e4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint16_t rgb565[24];
  uint32_t argb8888[24];

  offset =  8 *((width + 7)/8) -  width ;
 801f4e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801f4ec:	3307      	adds	r3, #7
 801f4ee:	f023 0207 	bic.w	r2, r3, #7
 801f4f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801f4f6:	1ad3      	subs	r3, r2, r3
 801f4f8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  for(i = 0; i < height; i++)
 801f4fc:	2300      	movs	r3, #0
 801f4fe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 801f502:	e11c      	b.n	801f73e <DrawChar+0x296>
  {
    pchar = ((uint8_t *)pData + (width + 7)/8 * i);
 801f504:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801f508:	3307      	adds	r3, #7
 801f50a:	08db      	lsrs	r3, r3, #3
 801f50c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 801f510:	fb02 f303 	mul.w	r3, r2, r3
 801f514:	687a      	ldr	r2, [r7, #4]
 801f516:	4413      	add	r3, r2
 801f518:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

    switch(((width + 7)/8))
 801f51c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801f520:	3307      	adds	r3, #7
 801f522:	08db      	lsrs	r3, r3, #3
 801f524:	2b01      	cmp	r3, #1
 801f526:	d002      	beq.n	801f52e <DrawChar+0x86>
 801f528:	2b02      	cmp	r3, #2
 801f52a:	d006      	beq.n	801f53a <DrawChar+0x92>
 801f52c:	e011      	b.n	801f552 <DrawChar+0xaa>
    {

    case 1:
      line =  pchar[0];
 801f52e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801f532:	781b      	ldrb	r3, [r3, #0]
 801f534:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      break;
 801f538:	e01d      	b.n	801f576 <DrawChar+0xce>

    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 801f53a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801f53e:	781b      	ldrb	r3, [r3, #0]
 801f540:	021b      	lsls	r3, r3, #8
 801f542:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 801f546:	3201      	adds	r2, #1
 801f548:	7812      	ldrb	r2, [r2, #0]
 801f54a:	4313      	orrs	r3, r2
 801f54c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      break;
 801f550:	e011      	b.n	801f576 <DrawChar+0xce>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 801f552:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801f556:	781b      	ldrb	r3, [r3, #0]
 801f558:	041a      	lsls	r2, r3, #16
 801f55a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801f55e:	3301      	adds	r3, #1
 801f560:	781b      	ldrb	r3, [r3, #0]
 801f562:	021b      	lsls	r3, r3, #8
 801f564:	4313      	orrs	r3, r2
 801f566:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 801f56a:	3202      	adds	r2, #2
 801f56c:	7812      	ldrb	r2, [r2, #0]
 801f56e:	4313      	orrs	r3, r2
 801f570:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      break;
 801f574:	bf00      	nop
    }

    if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 801f576:	4b78      	ldr	r3, [pc, #480]	; (801f758 <DrawChar+0x2b0>)
 801f578:	68db      	ldr	r3, [r3, #12]
 801f57a:	4a77      	ldr	r2, [pc, #476]	; (801f758 <DrawChar+0x2b0>)
 801f57c:	015b      	lsls	r3, r3, #5
 801f57e:	4413      	add	r3, r2
 801f580:	331c      	adds	r3, #28
 801f582:	681b      	ldr	r3, [r3, #0]
 801f584:	2b02      	cmp	r3, #2
 801f586:	f040 808c 	bne.w	801f6a2 <DrawChar+0x1fa>
    {
      for (j = 0; j < width; j++)
 801f58a:	2300      	movs	r3, #0
 801f58c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 801f590:	e074      	b.n	801f67c <DrawChar+0x1d4>
      {
        if(line & (1 << (width- j + offset- 1)))
 801f592:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 801f596:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801f59a:	1ad2      	subs	r2, r2, r3
 801f59c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801f5a0:	4413      	add	r3, r2
 801f5a2:	3b01      	subs	r3, #1
 801f5a4:	2201      	movs	r2, #1
 801f5a6:	fa02 f303 	lsl.w	r3, r2, r3
 801f5aa:	461a      	mov	r2, r3
 801f5ac:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801f5b0:	4013      	ands	r3, r2
 801f5b2:	2b00      	cmp	r3, #0
 801f5b4:	d02d      	beq.n	801f612 <DrawChar+0x16a>
        {
          rgb565[j] = CONVERTARGB88882RGB565(DrawProp[DrawProp->LcdLayer].TextColor);
 801f5b6:	4b68      	ldr	r3, [pc, #416]	; (801f758 <DrawChar+0x2b0>)
 801f5b8:	68db      	ldr	r3, [r3, #12]
 801f5ba:	4a67      	ldr	r2, [pc, #412]	; (801f758 <DrawChar+0x2b0>)
 801f5bc:	015b      	lsls	r3, r3, #5
 801f5be:	4413      	add	r3, r2
 801f5c0:	681b      	ldr	r3, [r3, #0]
 801f5c2:	08db      	lsrs	r3, r3, #3
 801f5c4:	b29b      	uxth	r3, r3
 801f5c6:	f003 031f 	and.w	r3, r3, #31
 801f5ca:	b29a      	uxth	r2, r3
 801f5cc:	4b62      	ldr	r3, [pc, #392]	; (801f758 <DrawChar+0x2b0>)
 801f5ce:	68db      	ldr	r3, [r3, #12]
 801f5d0:	4961      	ldr	r1, [pc, #388]	; (801f758 <DrawChar+0x2b0>)
 801f5d2:	015b      	lsls	r3, r3, #5
 801f5d4:	440b      	add	r3, r1
 801f5d6:	681b      	ldr	r3, [r3, #0]
 801f5d8:	0a9b      	lsrs	r3, r3, #10
 801f5da:	b29b      	uxth	r3, r3
 801f5dc:	015b      	lsls	r3, r3, #5
 801f5de:	b29b      	uxth	r3, r3
 801f5e0:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801f5e4:	b29b      	uxth	r3, r3
 801f5e6:	4313      	orrs	r3, r2
 801f5e8:	b29a      	uxth	r2, r3
 801f5ea:	4b5b      	ldr	r3, [pc, #364]	; (801f758 <DrawChar+0x2b0>)
 801f5ec:	68db      	ldr	r3, [r3, #12]
 801f5ee:	495a      	ldr	r1, [pc, #360]	; (801f758 <DrawChar+0x2b0>)
 801f5f0:	015b      	lsls	r3, r3, #5
 801f5f2:	440b      	add	r3, r1
 801f5f4:	681b      	ldr	r3, [r3, #0]
 801f5f6:	0cdb      	lsrs	r3, r3, #19
 801f5f8:	b29b      	uxth	r3, r3
 801f5fa:	02db      	lsls	r3, r3, #11
 801f5fc:	b29b      	uxth	r3, r3
 801f5fe:	4313      	orrs	r3, r2
 801f600:	b29a      	uxth	r2, r3
 801f602:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801f606:	005b      	lsls	r3, r3, #1
 801f608:	33c0      	adds	r3, #192	; 0xc0
 801f60a:	443b      	add	r3, r7
 801f60c:	f823 2c4c 	strh.w	r2, [r3, #-76]
 801f610:	e02f      	b.n	801f672 <DrawChar+0x1ca>
        }
        else
        {
          rgb565[j] = CONVERTARGB88882RGB565(DrawProp[DrawProp->LcdLayer].BackColor);
 801f612:	4b51      	ldr	r3, [pc, #324]	; (801f758 <DrawChar+0x2b0>)
 801f614:	68db      	ldr	r3, [r3, #12]
 801f616:	4a50      	ldr	r2, [pc, #320]	; (801f758 <DrawChar+0x2b0>)
 801f618:	015b      	lsls	r3, r3, #5
 801f61a:	4413      	add	r3, r2
 801f61c:	3304      	adds	r3, #4
 801f61e:	681b      	ldr	r3, [r3, #0]
 801f620:	08db      	lsrs	r3, r3, #3
 801f622:	b29b      	uxth	r3, r3
 801f624:	f003 031f 	and.w	r3, r3, #31
 801f628:	b29a      	uxth	r2, r3
 801f62a:	4b4b      	ldr	r3, [pc, #300]	; (801f758 <DrawChar+0x2b0>)
 801f62c:	68db      	ldr	r3, [r3, #12]
 801f62e:	494a      	ldr	r1, [pc, #296]	; (801f758 <DrawChar+0x2b0>)
 801f630:	015b      	lsls	r3, r3, #5
 801f632:	440b      	add	r3, r1
 801f634:	3304      	adds	r3, #4
 801f636:	681b      	ldr	r3, [r3, #0]
 801f638:	0a9b      	lsrs	r3, r3, #10
 801f63a:	b29b      	uxth	r3, r3
 801f63c:	015b      	lsls	r3, r3, #5
 801f63e:	b29b      	uxth	r3, r3
 801f640:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801f644:	b29b      	uxth	r3, r3
 801f646:	4313      	orrs	r3, r2
 801f648:	b29a      	uxth	r2, r3
 801f64a:	4b43      	ldr	r3, [pc, #268]	; (801f758 <DrawChar+0x2b0>)
 801f64c:	68db      	ldr	r3, [r3, #12]
 801f64e:	4942      	ldr	r1, [pc, #264]	; (801f758 <DrawChar+0x2b0>)
 801f650:	015b      	lsls	r3, r3, #5
 801f652:	440b      	add	r3, r1
 801f654:	3304      	adds	r3, #4
 801f656:	681b      	ldr	r3, [r3, #0]
 801f658:	0cdb      	lsrs	r3, r3, #19
 801f65a:	b29b      	uxth	r3, r3
 801f65c:	02db      	lsls	r3, r3, #11
 801f65e:	b29b      	uxth	r3, r3
 801f660:	4313      	orrs	r3, r2
 801f662:	b29a      	uxth	r2, r3
 801f664:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801f668:	005b      	lsls	r3, r3, #1
 801f66a:	33c0      	adds	r3, #192	; 0xc0
 801f66c:	443b      	add	r3, r7
 801f66e:	f823 2c4c 	strh.w	r2, [r3, #-76]
      for (j = 0; j < width; j++)
 801f672:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801f676:	3301      	adds	r3, #1
 801f678:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 801f67c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 801f680:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801f684:	429a      	cmp	r2, r3
 801f686:	d384      	bcc.n	801f592 <DrawChar+0xea>
        }
      }
      UTIL_LCD_FillRGBRect(Xpos,  Ypos++, (uint8_t*)&rgb565[0], width, 1);
 801f688:	68b9      	ldr	r1, [r7, #8]
 801f68a:	1c4b      	adds	r3, r1, #1
 801f68c:	60bb      	str	r3, [r7, #8]
 801f68e:	f107 0274 	add.w	r2, r7, #116	; 0x74
 801f692:	2301      	movs	r3, #1
 801f694:	9300      	str	r3, [sp, #0]
 801f696:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801f69a:	68f8      	ldr	r0, [r7, #12]
 801f69c:	f7ff fb34 	bl	801ed08 <UTIL_LCD_FillRGBRect>
 801f6a0:	e048      	b.n	801f734 <DrawChar+0x28c>
    }
    else
    {
      for (j = 0; j < width; j++)
 801f6a2:	2300      	movs	r3, #0
 801f6a4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 801f6a8:	e032      	b.n	801f710 <DrawChar+0x268>
      {
        if(line & (1 << (width- j + offset- 1)))
 801f6aa:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 801f6ae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801f6b2:	1ad2      	subs	r2, r2, r3
 801f6b4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801f6b8:	4413      	add	r3, r2
 801f6ba:	3b01      	subs	r3, #1
 801f6bc:	2201      	movs	r2, #1
 801f6be:	fa02 f303 	lsl.w	r3, r2, r3
 801f6c2:	461a      	mov	r2, r3
 801f6c4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801f6c8:	4013      	ands	r3, r2
 801f6ca:	2b00      	cmp	r3, #0
 801f6cc:	d00d      	beq.n	801f6ea <DrawChar+0x242>
        {
          argb8888[j] = DrawProp[DrawProp->LcdLayer].TextColor;
 801f6ce:	4b22      	ldr	r3, [pc, #136]	; (801f758 <DrawChar+0x2b0>)
 801f6d0:	68db      	ldr	r3, [r3, #12]
 801f6d2:	4a21      	ldr	r2, [pc, #132]	; (801f758 <DrawChar+0x2b0>)
 801f6d4:	015b      	lsls	r3, r3, #5
 801f6d6:	4413      	add	r3, r2
 801f6d8:	681a      	ldr	r2, [r3, #0]
 801f6da:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801f6de:	009b      	lsls	r3, r3, #2
 801f6e0:	33c0      	adds	r3, #192	; 0xc0
 801f6e2:	443b      	add	r3, r7
 801f6e4:	f843 2cac 	str.w	r2, [r3, #-172]
 801f6e8:	e00d      	b.n	801f706 <DrawChar+0x25e>
        }
        else
        {
          argb8888[j] = DrawProp[DrawProp->LcdLayer].BackColor;
 801f6ea:	4b1b      	ldr	r3, [pc, #108]	; (801f758 <DrawChar+0x2b0>)
 801f6ec:	68db      	ldr	r3, [r3, #12]
 801f6ee:	4a1a      	ldr	r2, [pc, #104]	; (801f758 <DrawChar+0x2b0>)
 801f6f0:	015b      	lsls	r3, r3, #5
 801f6f2:	4413      	add	r3, r2
 801f6f4:	3304      	adds	r3, #4
 801f6f6:	681a      	ldr	r2, [r3, #0]
 801f6f8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801f6fc:	009b      	lsls	r3, r3, #2
 801f6fe:	33c0      	adds	r3, #192	; 0xc0
 801f700:	443b      	add	r3, r7
 801f702:	f843 2cac 	str.w	r2, [r3, #-172]
      for (j = 0; j < width; j++)
 801f706:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801f70a:	3301      	adds	r3, #1
 801f70c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 801f710:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 801f714:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801f718:	429a      	cmp	r2, r3
 801f71a:	d3c6      	bcc.n	801f6aa <DrawChar+0x202>
        }
      }
      UTIL_LCD_FillRGBRect(Xpos,  Ypos++, (uint8_t*)&argb8888[0], width, 1);
 801f71c:	68b9      	ldr	r1, [r7, #8]
 801f71e:	1c4b      	adds	r3, r1, #1
 801f720:	60bb      	str	r3, [r7, #8]
 801f722:	f107 0214 	add.w	r2, r7, #20
 801f726:	2301      	movs	r3, #1
 801f728:	9300      	str	r3, [sp, #0]
 801f72a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801f72e:	68f8      	ldr	r0, [r7, #12]
 801f730:	f7ff faea 	bl	801ed08 <UTIL_LCD_FillRGBRect>
  for(i = 0; i < height; i++)
 801f734:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801f738:	3301      	adds	r3, #1
 801f73a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 801f73e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 801f742:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 801f746:	429a      	cmp	r2, r3
 801f748:	f4ff aedc 	bcc.w	801f504 <DrawChar+0x5c>
    }
  }
}
 801f74c:	bf00      	nop
 801f74e:	bf00      	nop
 801f750:	37c0      	adds	r7, #192	; 0xc0
 801f752:	46bd      	mov	sp, r7
 801f754:	bd80      	pop	{r7, pc}
 801f756:	bf00      	nop
 801f758:	240056d4 	.word	0x240056d4

0801f75c <sniprintf>:
 801f75c:	b40c      	push	{r2, r3}
 801f75e:	b530      	push	{r4, r5, lr}
 801f760:	4b17      	ldr	r3, [pc, #92]	; (801f7c0 <sniprintf+0x64>)
 801f762:	1e0c      	subs	r4, r1, #0
 801f764:	681d      	ldr	r5, [r3, #0]
 801f766:	b09d      	sub	sp, #116	; 0x74
 801f768:	da08      	bge.n	801f77c <sniprintf+0x20>
 801f76a:	238b      	movs	r3, #139	; 0x8b
 801f76c:	602b      	str	r3, [r5, #0]
 801f76e:	f04f 30ff 	mov.w	r0, #4294967295
 801f772:	b01d      	add	sp, #116	; 0x74
 801f774:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801f778:	b002      	add	sp, #8
 801f77a:	4770      	bx	lr
 801f77c:	f44f 7302 	mov.w	r3, #520	; 0x208
 801f780:	f8ad 3014 	strh.w	r3, [sp, #20]
 801f784:	bf14      	ite	ne
 801f786:	f104 33ff 	addne.w	r3, r4, #4294967295
 801f78a:	4623      	moveq	r3, r4
 801f78c:	9304      	str	r3, [sp, #16]
 801f78e:	9307      	str	r3, [sp, #28]
 801f790:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801f794:	9002      	str	r0, [sp, #8]
 801f796:	9006      	str	r0, [sp, #24]
 801f798:	f8ad 3016 	strh.w	r3, [sp, #22]
 801f79c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801f79e:	ab21      	add	r3, sp, #132	; 0x84
 801f7a0:	a902      	add	r1, sp, #8
 801f7a2:	4628      	mov	r0, r5
 801f7a4:	9301      	str	r3, [sp, #4]
 801f7a6:	f000 fa19 	bl	801fbdc <_svfiprintf_r>
 801f7aa:	1c43      	adds	r3, r0, #1
 801f7ac:	bfbc      	itt	lt
 801f7ae:	238b      	movlt	r3, #139	; 0x8b
 801f7b0:	602b      	strlt	r3, [r5, #0]
 801f7b2:	2c00      	cmp	r4, #0
 801f7b4:	d0dd      	beq.n	801f772 <sniprintf+0x16>
 801f7b6:	9b02      	ldr	r3, [sp, #8]
 801f7b8:	2200      	movs	r2, #0
 801f7ba:	701a      	strb	r2, [r3, #0]
 801f7bc:	e7d9      	b.n	801f772 <sniprintf+0x16>
 801f7be:	bf00      	nop
 801f7c0:	240000c8 	.word	0x240000c8

0801f7c4 <siprintf>:
 801f7c4:	b40e      	push	{r1, r2, r3}
 801f7c6:	b500      	push	{lr}
 801f7c8:	b09c      	sub	sp, #112	; 0x70
 801f7ca:	ab1d      	add	r3, sp, #116	; 0x74
 801f7cc:	9002      	str	r0, [sp, #8]
 801f7ce:	9006      	str	r0, [sp, #24]
 801f7d0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801f7d4:	4809      	ldr	r0, [pc, #36]	; (801f7fc <siprintf+0x38>)
 801f7d6:	9107      	str	r1, [sp, #28]
 801f7d8:	9104      	str	r1, [sp, #16]
 801f7da:	4909      	ldr	r1, [pc, #36]	; (801f800 <siprintf+0x3c>)
 801f7dc:	f853 2b04 	ldr.w	r2, [r3], #4
 801f7e0:	9105      	str	r1, [sp, #20]
 801f7e2:	6800      	ldr	r0, [r0, #0]
 801f7e4:	9301      	str	r3, [sp, #4]
 801f7e6:	a902      	add	r1, sp, #8
 801f7e8:	f000 f9f8 	bl	801fbdc <_svfiprintf_r>
 801f7ec:	9b02      	ldr	r3, [sp, #8]
 801f7ee:	2200      	movs	r2, #0
 801f7f0:	701a      	strb	r2, [r3, #0]
 801f7f2:	b01c      	add	sp, #112	; 0x70
 801f7f4:	f85d eb04 	ldr.w	lr, [sp], #4
 801f7f8:	b003      	add	sp, #12
 801f7fa:	4770      	bx	lr
 801f7fc:	240000c8 	.word	0x240000c8
 801f800:	ffff0208 	.word	0xffff0208

0801f804 <siscanf>:
 801f804:	b40e      	push	{r1, r2, r3}
 801f806:	b510      	push	{r4, lr}
 801f808:	b09f      	sub	sp, #124	; 0x7c
 801f80a:	ac21      	add	r4, sp, #132	; 0x84
 801f80c:	f44f 7101 	mov.w	r1, #516	; 0x204
 801f810:	f854 2b04 	ldr.w	r2, [r4], #4
 801f814:	9201      	str	r2, [sp, #4]
 801f816:	f8ad 101c 	strh.w	r1, [sp, #28]
 801f81a:	9004      	str	r0, [sp, #16]
 801f81c:	9008      	str	r0, [sp, #32]
 801f81e:	f7e0 fe85 	bl	800052c <strlen>
 801f822:	4b0c      	ldr	r3, [pc, #48]	; (801f854 <siscanf+0x50>)
 801f824:	9005      	str	r0, [sp, #20]
 801f826:	9009      	str	r0, [sp, #36]	; 0x24
 801f828:	930d      	str	r3, [sp, #52]	; 0x34
 801f82a:	480b      	ldr	r0, [pc, #44]	; (801f858 <siscanf+0x54>)
 801f82c:	9a01      	ldr	r2, [sp, #4]
 801f82e:	6800      	ldr	r0, [r0, #0]
 801f830:	9403      	str	r4, [sp, #12]
 801f832:	2300      	movs	r3, #0
 801f834:	9311      	str	r3, [sp, #68]	; 0x44
 801f836:	9316      	str	r3, [sp, #88]	; 0x58
 801f838:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801f83c:	f8ad 301e 	strh.w	r3, [sp, #30]
 801f840:	a904      	add	r1, sp, #16
 801f842:	4623      	mov	r3, r4
 801f844:	f000 fb22 	bl	801fe8c <__ssvfiscanf_r>
 801f848:	b01f      	add	sp, #124	; 0x7c
 801f84a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f84e:	b003      	add	sp, #12
 801f850:	4770      	bx	lr
 801f852:	bf00      	nop
 801f854:	0801f85d 	.word	0x0801f85d
 801f858:	240000c8 	.word	0x240000c8

0801f85c <__seofread>:
 801f85c:	2000      	movs	r0, #0
 801f85e:	4770      	bx	lr

0801f860 <memset>:
 801f860:	4402      	add	r2, r0
 801f862:	4603      	mov	r3, r0
 801f864:	4293      	cmp	r3, r2
 801f866:	d100      	bne.n	801f86a <memset+0xa>
 801f868:	4770      	bx	lr
 801f86a:	f803 1b01 	strb.w	r1, [r3], #1
 801f86e:	e7f9      	b.n	801f864 <memset+0x4>

0801f870 <strncpy>:
 801f870:	b510      	push	{r4, lr}
 801f872:	3901      	subs	r1, #1
 801f874:	4603      	mov	r3, r0
 801f876:	b132      	cbz	r2, 801f886 <strncpy+0x16>
 801f878:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801f87c:	f803 4b01 	strb.w	r4, [r3], #1
 801f880:	3a01      	subs	r2, #1
 801f882:	2c00      	cmp	r4, #0
 801f884:	d1f7      	bne.n	801f876 <strncpy+0x6>
 801f886:	441a      	add	r2, r3
 801f888:	2100      	movs	r1, #0
 801f88a:	4293      	cmp	r3, r2
 801f88c:	d100      	bne.n	801f890 <strncpy+0x20>
 801f88e:	bd10      	pop	{r4, pc}
 801f890:	f803 1b01 	strb.w	r1, [r3], #1
 801f894:	e7f9      	b.n	801f88a <strncpy+0x1a>

0801f896 <strstr>:
 801f896:	780a      	ldrb	r2, [r1, #0]
 801f898:	b570      	push	{r4, r5, r6, lr}
 801f89a:	b96a      	cbnz	r2, 801f8b8 <strstr+0x22>
 801f89c:	bd70      	pop	{r4, r5, r6, pc}
 801f89e:	429a      	cmp	r2, r3
 801f8a0:	d109      	bne.n	801f8b6 <strstr+0x20>
 801f8a2:	460c      	mov	r4, r1
 801f8a4:	4605      	mov	r5, r0
 801f8a6:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801f8aa:	2b00      	cmp	r3, #0
 801f8ac:	d0f6      	beq.n	801f89c <strstr+0x6>
 801f8ae:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801f8b2:	429e      	cmp	r6, r3
 801f8b4:	d0f7      	beq.n	801f8a6 <strstr+0x10>
 801f8b6:	3001      	adds	r0, #1
 801f8b8:	7803      	ldrb	r3, [r0, #0]
 801f8ba:	2b00      	cmp	r3, #0
 801f8bc:	d1ef      	bne.n	801f89e <strstr+0x8>
 801f8be:	4618      	mov	r0, r3
 801f8c0:	e7ec      	b.n	801f89c <strstr+0x6>
	...

0801f8c4 <__errno>:
 801f8c4:	4b01      	ldr	r3, [pc, #4]	; (801f8cc <__errno+0x8>)
 801f8c6:	6818      	ldr	r0, [r3, #0]
 801f8c8:	4770      	bx	lr
 801f8ca:	bf00      	nop
 801f8cc:	240000c8 	.word	0x240000c8

0801f8d0 <__libc_init_array>:
 801f8d0:	b570      	push	{r4, r5, r6, lr}
 801f8d2:	4d0d      	ldr	r5, [pc, #52]	; (801f908 <__libc_init_array+0x38>)
 801f8d4:	4c0d      	ldr	r4, [pc, #52]	; (801f90c <__libc_init_array+0x3c>)
 801f8d6:	1b64      	subs	r4, r4, r5
 801f8d8:	10a4      	asrs	r4, r4, #2
 801f8da:	2600      	movs	r6, #0
 801f8dc:	42a6      	cmp	r6, r4
 801f8de:	d109      	bne.n	801f8f4 <__libc_init_array+0x24>
 801f8e0:	4d0b      	ldr	r5, [pc, #44]	; (801f910 <__libc_init_array+0x40>)
 801f8e2:	4c0c      	ldr	r4, [pc, #48]	; (801f914 <__libc_init_array+0x44>)
 801f8e4:	f001 f8f6 	bl	8020ad4 <_init>
 801f8e8:	1b64      	subs	r4, r4, r5
 801f8ea:	10a4      	asrs	r4, r4, #2
 801f8ec:	2600      	movs	r6, #0
 801f8ee:	42a6      	cmp	r6, r4
 801f8f0:	d105      	bne.n	801f8fe <__libc_init_array+0x2e>
 801f8f2:	bd70      	pop	{r4, r5, r6, pc}
 801f8f4:	f855 3b04 	ldr.w	r3, [r5], #4
 801f8f8:	4798      	blx	r3
 801f8fa:	3601      	adds	r6, #1
 801f8fc:	e7ee      	b.n	801f8dc <__libc_init_array+0xc>
 801f8fe:	f855 3b04 	ldr.w	r3, [r5], #4
 801f902:	4798      	blx	r3
 801f904:	3601      	adds	r6, #1
 801f906:	e7f2      	b.n	801f8ee <__libc_init_array+0x1e>
 801f908:	08022b94 	.word	0x08022b94
 801f90c:	08022b94 	.word	0x08022b94
 801f910:	08022b94 	.word	0x08022b94
 801f914:	08022b98 	.word	0x08022b98

0801f918 <__retarget_lock_acquire_recursive>:
 801f918:	4770      	bx	lr

0801f91a <__retarget_lock_release_recursive>:
 801f91a:	4770      	bx	lr

0801f91c <memcpy>:
 801f91c:	440a      	add	r2, r1
 801f91e:	4291      	cmp	r1, r2
 801f920:	f100 33ff 	add.w	r3, r0, #4294967295
 801f924:	d100      	bne.n	801f928 <memcpy+0xc>
 801f926:	4770      	bx	lr
 801f928:	b510      	push	{r4, lr}
 801f92a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801f92e:	f803 4f01 	strb.w	r4, [r3, #1]!
 801f932:	4291      	cmp	r1, r2
 801f934:	d1f9      	bne.n	801f92a <memcpy+0xe>
 801f936:	bd10      	pop	{r4, pc}

0801f938 <_free_r>:
 801f938:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801f93a:	2900      	cmp	r1, #0
 801f93c:	d044      	beq.n	801f9c8 <_free_r+0x90>
 801f93e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801f942:	9001      	str	r0, [sp, #4]
 801f944:	2b00      	cmp	r3, #0
 801f946:	f1a1 0404 	sub.w	r4, r1, #4
 801f94a:	bfb8      	it	lt
 801f94c:	18e4      	addlt	r4, r4, r3
 801f94e:	f000 f8df 	bl	801fb10 <__malloc_lock>
 801f952:	4a1e      	ldr	r2, [pc, #120]	; (801f9cc <_free_r+0x94>)
 801f954:	9801      	ldr	r0, [sp, #4]
 801f956:	6813      	ldr	r3, [r2, #0]
 801f958:	b933      	cbnz	r3, 801f968 <_free_r+0x30>
 801f95a:	6063      	str	r3, [r4, #4]
 801f95c:	6014      	str	r4, [r2, #0]
 801f95e:	b003      	add	sp, #12
 801f960:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801f964:	f000 b8da 	b.w	801fb1c <__malloc_unlock>
 801f968:	42a3      	cmp	r3, r4
 801f96a:	d908      	bls.n	801f97e <_free_r+0x46>
 801f96c:	6825      	ldr	r5, [r4, #0]
 801f96e:	1961      	adds	r1, r4, r5
 801f970:	428b      	cmp	r3, r1
 801f972:	bf01      	itttt	eq
 801f974:	6819      	ldreq	r1, [r3, #0]
 801f976:	685b      	ldreq	r3, [r3, #4]
 801f978:	1949      	addeq	r1, r1, r5
 801f97a:	6021      	streq	r1, [r4, #0]
 801f97c:	e7ed      	b.n	801f95a <_free_r+0x22>
 801f97e:	461a      	mov	r2, r3
 801f980:	685b      	ldr	r3, [r3, #4]
 801f982:	b10b      	cbz	r3, 801f988 <_free_r+0x50>
 801f984:	42a3      	cmp	r3, r4
 801f986:	d9fa      	bls.n	801f97e <_free_r+0x46>
 801f988:	6811      	ldr	r1, [r2, #0]
 801f98a:	1855      	adds	r5, r2, r1
 801f98c:	42a5      	cmp	r5, r4
 801f98e:	d10b      	bne.n	801f9a8 <_free_r+0x70>
 801f990:	6824      	ldr	r4, [r4, #0]
 801f992:	4421      	add	r1, r4
 801f994:	1854      	adds	r4, r2, r1
 801f996:	42a3      	cmp	r3, r4
 801f998:	6011      	str	r1, [r2, #0]
 801f99a:	d1e0      	bne.n	801f95e <_free_r+0x26>
 801f99c:	681c      	ldr	r4, [r3, #0]
 801f99e:	685b      	ldr	r3, [r3, #4]
 801f9a0:	6053      	str	r3, [r2, #4]
 801f9a2:	440c      	add	r4, r1
 801f9a4:	6014      	str	r4, [r2, #0]
 801f9a6:	e7da      	b.n	801f95e <_free_r+0x26>
 801f9a8:	d902      	bls.n	801f9b0 <_free_r+0x78>
 801f9aa:	230c      	movs	r3, #12
 801f9ac:	6003      	str	r3, [r0, #0]
 801f9ae:	e7d6      	b.n	801f95e <_free_r+0x26>
 801f9b0:	6825      	ldr	r5, [r4, #0]
 801f9b2:	1961      	adds	r1, r4, r5
 801f9b4:	428b      	cmp	r3, r1
 801f9b6:	bf04      	itt	eq
 801f9b8:	6819      	ldreq	r1, [r3, #0]
 801f9ba:	685b      	ldreq	r3, [r3, #4]
 801f9bc:	6063      	str	r3, [r4, #4]
 801f9be:	bf04      	itt	eq
 801f9c0:	1949      	addeq	r1, r1, r5
 801f9c2:	6021      	streq	r1, [r4, #0]
 801f9c4:	6054      	str	r4, [r2, #4]
 801f9c6:	e7ca      	b.n	801f95e <_free_r+0x26>
 801f9c8:	b003      	add	sp, #12
 801f9ca:	bd30      	pop	{r4, r5, pc}
 801f9cc:	24005880 	.word	0x24005880

0801f9d0 <sbrk_aligned>:
 801f9d0:	b570      	push	{r4, r5, r6, lr}
 801f9d2:	4e0e      	ldr	r6, [pc, #56]	; (801fa0c <sbrk_aligned+0x3c>)
 801f9d4:	460c      	mov	r4, r1
 801f9d6:	6831      	ldr	r1, [r6, #0]
 801f9d8:	4605      	mov	r5, r0
 801f9da:	b911      	cbnz	r1, 801f9e2 <sbrk_aligned+0x12>
 801f9dc:	f000 ff3a 	bl	8020854 <_sbrk_r>
 801f9e0:	6030      	str	r0, [r6, #0]
 801f9e2:	4621      	mov	r1, r4
 801f9e4:	4628      	mov	r0, r5
 801f9e6:	f000 ff35 	bl	8020854 <_sbrk_r>
 801f9ea:	1c43      	adds	r3, r0, #1
 801f9ec:	d00a      	beq.n	801fa04 <sbrk_aligned+0x34>
 801f9ee:	1cc4      	adds	r4, r0, #3
 801f9f0:	f024 0403 	bic.w	r4, r4, #3
 801f9f4:	42a0      	cmp	r0, r4
 801f9f6:	d007      	beq.n	801fa08 <sbrk_aligned+0x38>
 801f9f8:	1a21      	subs	r1, r4, r0
 801f9fa:	4628      	mov	r0, r5
 801f9fc:	f000 ff2a 	bl	8020854 <_sbrk_r>
 801fa00:	3001      	adds	r0, #1
 801fa02:	d101      	bne.n	801fa08 <sbrk_aligned+0x38>
 801fa04:	f04f 34ff 	mov.w	r4, #4294967295
 801fa08:	4620      	mov	r0, r4
 801fa0a:	bd70      	pop	{r4, r5, r6, pc}
 801fa0c:	24005884 	.word	0x24005884

0801fa10 <_malloc_r>:
 801fa10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801fa14:	1ccd      	adds	r5, r1, #3
 801fa16:	f025 0503 	bic.w	r5, r5, #3
 801fa1a:	3508      	adds	r5, #8
 801fa1c:	2d0c      	cmp	r5, #12
 801fa1e:	bf38      	it	cc
 801fa20:	250c      	movcc	r5, #12
 801fa22:	2d00      	cmp	r5, #0
 801fa24:	4607      	mov	r7, r0
 801fa26:	db01      	blt.n	801fa2c <_malloc_r+0x1c>
 801fa28:	42a9      	cmp	r1, r5
 801fa2a:	d905      	bls.n	801fa38 <_malloc_r+0x28>
 801fa2c:	230c      	movs	r3, #12
 801fa2e:	603b      	str	r3, [r7, #0]
 801fa30:	2600      	movs	r6, #0
 801fa32:	4630      	mov	r0, r6
 801fa34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801fa38:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801fb0c <_malloc_r+0xfc>
 801fa3c:	f000 f868 	bl	801fb10 <__malloc_lock>
 801fa40:	f8d8 3000 	ldr.w	r3, [r8]
 801fa44:	461c      	mov	r4, r3
 801fa46:	bb5c      	cbnz	r4, 801faa0 <_malloc_r+0x90>
 801fa48:	4629      	mov	r1, r5
 801fa4a:	4638      	mov	r0, r7
 801fa4c:	f7ff ffc0 	bl	801f9d0 <sbrk_aligned>
 801fa50:	1c43      	adds	r3, r0, #1
 801fa52:	4604      	mov	r4, r0
 801fa54:	d155      	bne.n	801fb02 <_malloc_r+0xf2>
 801fa56:	f8d8 4000 	ldr.w	r4, [r8]
 801fa5a:	4626      	mov	r6, r4
 801fa5c:	2e00      	cmp	r6, #0
 801fa5e:	d145      	bne.n	801faec <_malloc_r+0xdc>
 801fa60:	2c00      	cmp	r4, #0
 801fa62:	d048      	beq.n	801faf6 <_malloc_r+0xe6>
 801fa64:	6823      	ldr	r3, [r4, #0]
 801fa66:	4631      	mov	r1, r6
 801fa68:	4638      	mov	r0, r7
 801fa6a:	eb04 0903 	add.w	r9, r4, r3
 801fa6e:	f000 fef1 	bl	8020854 <_sbrk_r>
 801fa72:	4581      	cmp	r9, r0
 801fa74:	d13f      	bne.n	801faf6 <_malloc_r+0xe6>
 801fa76:	6821      	ldr	r1, [r4, #0]
 801fa78:	1a6d      	subs	r5, r5, r1
 801fa7a:	4629      	mov	r1, r5
 801fa7c:	4638      	mov	r0, r7
 801fa7e:	f7ff ffa7 	bl	801f9d0 <sbrk_aligned>
 801fa82:	3001      	adds	r0, #1
 801fa84:	d037      	beq.n	801faf6 <_malloc_r+0xe6>
 801fa86:	6823      	ldr	r3, [r4, #0]
 801fa88:	442b      	add	r3, r5
 801fa8a:	6023      	str	r3, [r4, #0]
 801fa8c:	f8d8 3000 	ldr.w	r3, [r8]
 801fa90:	2b00      	cmp	r3, #0
 801fa92:	d038      	beq.n	801fb06 <_malloc_r+0xf6>
 801fa94:	685a      	ldr	r2, [r3, #4]
 801fa96:	42a2      	cmp	r2, r4
 801fa98:	d12b      	bne.n	801faf2 <_malloc_r+0xe2>
 801fa9a:	2200      	movs	r2, #0
 801fa9c:	605a      	str	r2, [r3, #4]
 801fa9e:	e00f      	b.n	801fac0 <_malloc_r+0xb0>
 801faa0:	6822      	ldr	r2, [r4, #0]
 801faa2:	1b52      	subs	r2, r2, r5
 801faa4:	d41f      	bmi.n	801fae6 <_malloc_r+0xd6>
 801faa6:	2a0b      	cmp	r2, #11
 801faa8:	d917      	bls.n	801fada <_malloc_r+0xca>
 801faaa:	1961      	adds	r1, r4, r5
 801faac:	42a3      	cmp	r3, r4
 801faae:	6025      	str	r5, [r4, #0]
 801fab0:	bf18      	it	ne
 801fab2:	6059      	strne	r1, [r3, #4]
 801fab4:	6863      	ldr	r3, [r4, #4]
 801fab6:	bf08      	it	eq
 801fab8:	f8c8 1000 	streq.w	r1, [r8]
 801fabc:	5162      	str	r2, [r4, r5]
 801fabe:	604b      	str	r3, [r1, #4]
 801fac0:	4638      	mov	r0, r7
 801fac2:	f104 060b 	add.w	r6, r4, #11
 801fac6:	f000 f829 	bl	801fb1c <__malloc_unlock>
 801faca:	f026 0607 	bic.w	r6, r6, #7
 801face:	1d23      	adds	r3, r4, #4
 801fad0:	1af2      	subs	r2, r6, r3
 801fad2:	d0ae      	beq.n	801fa32 <_malloc_r+0x22>
 801fad4:	1b9b      	subs	r3, r3, r6
 801fad6:	50a3      	str	r3, [r4, r2]
 801fad8:	e7ab      	b.n	801fa32 <_malloc_r+0x22>
 801fada:	42a3      	cmp	r3, r4
 801fadc:	6862      	ldr	r2, [r4, #4]
 801fade:	d1dd      	bne.n	801fa9c <_malloc_r+0x8c>
 801fae0:	f8c8 2000 	str.w	r2, [r8]
 801fae4:	e7ec      	b.n	801fac0 <_malloc_r+0xb0>
 801fae6:	4623      	mov	r3, r4
 801fae8:	6864      	ldr	r4, [r4, #4]
 801faea:	e7ac      	b.n	801fa46 <_malloc_r+0x36>
 801faec:	4634      	mov	r4, r6
 801faee:	6876      	ldr	r6, [r6, #4]
 801faf0:	e7b4      	b.n	801fa5c <_malloc_r+0x4c>
 801faf2:	4613      	mov	r3, r2
 801faf4:	e7cc      	b.n	801fa90 <_malloc_r+0x80>
 801faf6:	230c      	movs	r3, #12
 801faf8:	603b      	str	r3, [r7, #0]
 801fafa:	4638      	mov	r0, r7
 801fafc:	f000 f80e 	bl	801fb1c <__malloc_unlock>
 801fb00:	e797      	b.n	801fa32 <_malloc_r+0x22>
 801fb02:	6025      	str	r5, [r4, #0]
 801fb04:	e7dc      	b.n	801fac0 <_malloc_r+0xb0>
 801fb06:	605b      	str	r3, [r3, #4]
 801fb08:	deff      	udf	#255	; 0xff
 801fb0a:	bf00      	nop
 801fb0c:	24005880 	.word	0x24005880

0801fb10 <__malloc_lock>:
 801fb10:	4801      	ldr	r0, [pc, #4]	; (801fb18 <__malloc_lock+0x8>)
 801fb12:	f7ff bf01 	b.w	801f918 <__retarget_lock_acquire_recursive>
 801fb16:	bf00      	nop
 801fb18:	2400587c 	.word	0x2400587c

0801fb1c <__malloc_unlock>:
 801fb1c:	4801      	ldr	r0, [pc, #4]	; (801fb24 <__malloc_unlock+0x8>)
 801fb1e:	f7ff befc 	b.w	801f91a <__retarget_lock_release_recursive>
 801fb22:	bf00      	nop
 801fb24:	2400587c 	.word	0x2400587c

0801fb28 <__ssputs_r>:
 801fb28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801fb2c:	688e      	ldr	r6, [r1, #8]
 801fb2e:	461f      	mov	r7, r3
 801fb30:	42be      	cmp	r6, r7
 801fb32:	680b      	ldr	r3, [r1, #0]
 801fb34:	4682      	mov	sl, r0
 801fb36:	460c      	mov	r4, r1
 801fb38:	4690      	mov	r8, r2
 801fb3a:	d82c      	bhi.n	801fb96 <__ssputs_r+0x6e>
 801fb3c:	898a      	ldrh	r2, [r1, #12]
 801fb3e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801fb42:	d026      	beq.n	801fb92 <__ssputs_r+0x6a>
 801fb44:	6965      	ldr	r5, [r4, #20]
 801fb46:	6909      	ldr	r1, [r1, #16]
 801fb48:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801fb4c:	eba3 0901 	sub.w	r9, r3, r1
 801fb50:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801fb54:	1c7b      	adds	r3, r7, #1
 801fb56:	444b      	add	r3, r9
 801fb58:	106d      	asrs	r5, r5, #1
 801fb5a:	429d      	cmp	r5, r3
 801fb5c:	bf38      	it	cc
 801fb5e:	461d      	movcc	r5, r3
 801fb60:	0553      	lsls	r3, r2, #21
 801fb62:	d527      	bpl.n	801fbb4 <__ssputs_r+0x8c>
 801fb64:	4629      	mov	r1, r5
 801fb66:	f7ff ff53 	bl	801fa10 <_malloc_r>
 801fb6a:	4606      	mov	r6, r0
 801fb6c:	b360      	cbz	r0, 801fbc8 <__ssputs_r+0xa0>
 801fb6e:	6921      	ldr	r1, [r4, #16]
 801fb70:	464a      	mov	r2, r9
 801fb72:	f7ff fed3 	bl	801f91c <memcpy>
 801fb76:	89a3      	ldrh	r3, [r4, #12]
 801fb78:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801fb7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801fb80:	81a3      	strh	r3, [r4, #12]
 801fb82:	6126      	str	r6, [r4, #16]
 801fb84:	6165      	str	r5, [r4, #20]
 801fb86:	444e      	add	r6, r9
 801fb88:	eba5 0509 	sub.w	r5, r5, r9
 801fb8c:	6026      	str	r6, [r4, #0]
 801fb8e:	60a5      	str	r5, [r4, #8]
 801fb90:	463e      	mov	r6, r7
 801fb92:	42be      	cmp	r6, r7
 801fb94:	d900      	bls.n	801fb98 <__ssputs_r+0x70>
 801fb96:	463e      	mov	r6, r7
 801fb98:	6820      	ldr	r0, [r4, #0]
 801fb9a:	4632      	mov	r2, r6
 801fb9c:	4641      	mov	r1, r8
 801fb9e:	f000 fe3e 	bl	802081e <memmove>
 801fba2:	68a3      	ldr	r3, [r4, #8]
 801fba4:	1b9b      	subs	r3, r3, r6
 801fba6:	60a3      	str	r3, [r4, #8]
 801fba8:	6823      	ldr	r3, [r4, #0]
 801fbaa:	4433      	add	r3, r6
 801fbac:	6023      	str	r3, [r4, #0]
 801fbae:	2000      	movs	r0, #0
 801fbb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801fbb4:	462a      	mov	r2, r5
 801fbb6:	f000 fe5d 	bl	8020874 <_realloc_r>
 801fbba:	4606      	mov	r6, r0
 801fbbc:	2800      	cmp	r0, #0
 801fbbe:	d1e0      	bne.n	801fb82 <__ssputs_r+0x5a>
 801fbc0:	6921      	ldr	r1, [r4, #16]
 801fbc2:	4650      	mov	r0, sl
 801fbc4:	f7ff feb8 	bl	801f938 <_free_r>
 801fbc8:	230c      	movs	r3, #12
 801fbca:	f8ca 3000 	str.w	r3, [sl]
 801fbce:	89a3      	ldrh	r3, [r4, #12]
 801fbd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801fbd4:	81a3      	strh	r3, [r4, #12]
 801fbd6:	f04f 30ff 	mov.w	r0, #4294967295
 801fbda:	e7e9      	b.n	801fbb0 <__ssputs_r+0x88>

0801fbdc <_svfiprintf_r>:
 801fbdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fbe0:	4698      	mov	r8, r3
 801fbe2:	898b      	ldrh	r3, [r1, #12]
 801fbe4:	061b      	lsls	r3, r3, #24
 801fbe6:	b09d      	sub	sp, #116	; 0x74
 801fbe8:	4607      	mov	r7, r0
 801fbea:	460d      	mov	r5, r1
 801fbec:	4614      	mov	r4, r2
 801fbee:	d50e      	bpl.n	801fc0e <_svfiprintf_r+0x32>
 801fbf0:	690b      	ldr	r3, [r1, #16]
 801fbf2:	b963      	cbnz	r3, 801fc0e <_svfiprintf_r+0x32>
 801fbf4:	2140      	movs	r1, #64	; 0x40
 801fbf6:	f7ff ff0b 	bl	801fa10 <_malloc_r>
 801fbfa:	6028      	str	r0, [r5, #0]
 801fbfc:	6128      	str	r0, [r5, #16]
 801fbfe:	b920      	cbnz	r0, 801fc0a <_svfiprintf_r+0x2e>
 801fc00:	230c      	movs	r3, #12
 801fc02:	603b      	str	r3, [r7, #0]
 801fc04:	f04f 30ff 	mov.w	r0, #4294967295
 801fc08:	e0d0      	b.n	801fdac <_svfiprintf_r+0x1d0>
 801fc0a:	2340      	movs	r3, #64	; 0x40
 801fc0c:	616b      	str	r3, [r5, #20]
 801fc0e:	2300      	movs	r3, #0
 801fc10:	9309      	str	r3, [sp, #36]	; 0x24
 801fc12:	2320      	movs	r3, #32
 801fc14:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801fc18:	f8cd 800c 	str.w	r8, [sp, #12]
 801fc1c:	2330      	movs	r3, #48	; 0x30
 801fc1e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 801fdc4 <_svfiprintf_r+0x1e8>
 801fc22:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801fc26:	f04f 0901 	mov.w	r9, #1
 801fc2a:	4623      	mov	r3, r4
 801fc2c:	469a      	mov	sl, r3
 801fc2e:	f813 2b01 	ldrb.w	r2, [r3], #1
 801fc32:	b10a      	cbz	r2, 801fc38 <_svfiprintf_r+0x5c>
 801fc34:	2a25      	cmp	r2, #37	; 0x25
 801fc36:	d1f9      	bne.n	801fc2c <_svfiprintf_r+0x50>
 801fc38:	ebba 0b04 	subs.w	fp, sl, r4
 801fc3c:	d00b      	beq.n	801fc56 <_svfiprintf_r+0x7a>
 801fc3e:	465b      	mov	r3, fp
 801fc40:	4622      	mov	r2, r4
 801fc42:	4629      	mov	r1, r5
 801fc44:	4638      	mov	r0, r7
 801fc46:	f7ff ff6f 	bl	801fb28 <__ssputs_r>
 801fc4a:	3001      	adds	r0, #1
 801fc4c:	f000 80a9 	beq.w	801fda2 <_svfiprintf_r+0x1c6>
 801fc50:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801fc52:	445a      	add	r2, fp
 801fc54:	9209      	str	r2, [sp, #36]	; 0x24
 801fc56:	f89a 3000 	ldrb.w	r3, [sl]
 801fc5a:	2b00      	cmp	r3, #0
 801fc5c:	f000 80a1 	beq.w	801fda2 <_svfiprintf_r+0x1c6>
 801fc60:	2300      	movs	r3, #0
 801fc62:	f04f 32ff 	mov.w	r2, #4294967295
 801fc66:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801fc6a:	f10a 0a01 	add.w	sl, sl, #1
 801fc6e:	9304      	str	r3, [sp, #16]
 801fc70:	9307      	str	r3, [sp, #28]
 801fc72:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801fc76:	931a      	str	r3, [sp, #104]	; 0x68
 801fc78:	4654      	mov	r4, sl
 801fc7a:	2205      	movs	r2, #5
 801fc7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801fc80:	4850      	ldr	r0, [pc, #320]	; (801fdc4 <_svfiprintf_r+0x1e8>)
 801fc82:	f7e0 fc5d 	bl	8000540 <memchr>
 801fc86:	9a04      	ldr	r2, [sp, #16]
 801fc88:	b9d8      	cbnz	r0, 801fcc2 <_svfiprintf_r+0xe6>
 801fc8a:	06d0      	lsls	r0, r2, #27
 801fc8c:	bf44      	itt	mi
 801fc8e:	2320      	movmi	r3, #32
 801fc90:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801fc94:	0711      	lsls	r1, r2, #28
 801fc96:	bf44      	itt	mi
 801fc98:	232b      	movmi	r3, #43	; 0x2b
 801fc9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801fc9e:	f89a 3000 	ldrb.w	r3, [sl]
 801fca2:	2b2a      	cmp	r3, #42	; 0x2a
 801fca4:	d015      	beq.n	801fcd2 <_svfiprintf_r+0xf6>
 801fca6:	9a07      	ldr	r2, [sp, #28]
 801fca8:	4654      	mov	r4, sl
 801fcaa:	2000      	movs	r0, #0
 801fcac:	f04f 0c0a 	mov.w	ip, #10
 801fcb0:	4621      	mov	r1, r4
 801fcb2:	f811 3b01 	ldrb.w	r3, [r1], #1
 801fcb6:	3b30      	subs	r3, #48	; 0x30
 801fcb8:	2b09      	cmp	r3, #9
 801fcba:	d94d      	bls.n	801fd58 <_svfiprintf_r+0x17c>
 801fcbc:	b1b0      	cbz	r0, 801fcec <_svfiprintf_r+0x110>
 801fcbe:	9207      	str	r2, [sp, #28]
 801fcc0:	e014      	b.n	801fcec <_svfiprintf_r+0x110>
 801fcc2:	eba0 0308 	sub.w	r3, r0, r8
 801fcc6:	fa09 f303 	lsl.w	r3, r9, r3
 801fcca:	4313      	orrs	r3, r2
 801fccc:	9304      	str	r3, [sp, #16]
 801fcce:	46a2      	mov	sl, r4
 801fcd0:	e7d2      	b.n	801fc78 <_svfiprintf_r+0x9c>
 801fcd2:	9b03      	ldr	r3, [sp, #12]
 801fcd4:	1d19      	adds	r1, r3, #4
 801fcd6:	681b      	ldr	r3, [r3, #0]
 801fcd8:	9103      	str	r1, [sp, #12]
 801fcda:	2b00      	cmp	r3, #0
 801fcdc:	bfbb      	ittet	lt
 801fcde:	425b      	neglt	r3, r3
 801fce0:	f042 0202 	orrlt.w	r2, r2, #2
 801fce4:	9307      	strge	r3, [sp, #28]
 801fce6:	9307      	strlt	r3, [sp, #28]
 801fce8:	bfb8      	it	lt
 801fcea:	9204      	strlt	r2, [sp, #16]
 801fcec:	7823      	ldrb	r3, [r4, #0]
 801fcee:	2b2e      	cmp	r3, #46	; 0x2e
 801fcf0:	d10c      	bne.n	801fd0c <_svfiprintf_r+0x130>
 801fcf2:	7863      	ldrb	r3, [r4, #1]
 801fcf4:	2b2a      	cmp	r3, #42	; 0x2a
 801fcf6:	d134      	bne.n	801fd62 <_svfiprintf_r+0x186>
 801fcf8:	9b03      	ldr	r3, [sp, #12]
 801fcfa:	1d1a      	adds	r2, r3, #4
 801fcfc:	681b      	ldr	r3, [r3, #0]
 801fcfe:	9203      	str	r2, [sp, #12]
 801fd00:	2b00      	cmp	r3, #0
 801fd02:	bfb8      	it	lt
 801fd04:	f04f 33ff 	movlt.w	r3, #4294967295
 801fd08:	3402      	adds	r4, #2
 801fd0a:	9305      	str	r3, [sp, #20]
 801fd0c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 801fdd4 <_svfiprintf_r+0x1f8>
 801fd10:	7821      	ldrb	r1, [r4, #0]
 801fd12:	2203      	movs	r2, #3
 801fd14:	4650      	mov	r0, sl
 801fd16:	f7e0 fc13 	bl	8000540 <memchr>
 801fd1a:	b138      	cbz	r0, 801fd2c <_svfiprintf_r+0x150>
 801fd1c:	9b04      	ldr	r3, [sp, #16]
 801fd1e:	eba0 000a 	sub.w	r0, r0, sl
 801fd22:	2240      	movs	r2, #64	; 0x40
 801fd24:	4082      	lsls	r2, r0
 801fd26:	4313      	orrs	r3, r2
 801fd28:	3401      	adds	r4, #1
 801fd2a:	9304      	str	r3, [sp, #16]
 801fd2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801fd30:	4825      	ldr	r0, [pc, #148]	; (801fdc8 <_svfiprintf_r+0x1ec>)
 801fd32:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801fd36:	2206      	movs	r2, #6
 801fd38:	f7e0 fc02 	bl	8000540 <memchr>
 801fd3c:	2800      	cmp	r0, #0
 801fd3e:	d038      	beq.n	801fdb2 <_svfiprintf_r+0x1d6>
 801fd40:	4b22      	ldr	r3, [pc, #136]	; (801fdcc <_svfiprintf_r+0x1f0>)
 801fd42:	bb1b      	cbnz	r3, 801fd8c <_svfiprintf_r+0x1b0>
 801fd44:	9b03      	ldr	r3, [sp, #12]
 801fd46:	3307      	adds	r3, #7
 801fd48:	f023 0307 	bic.w	r3, r3, #7
 801fd4c:	3308      	adds	r3, #8
 801fd4e:	9303      	str	r3, [sp, #12]
 801fd50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fd52:	4433      	add	r3, r6
 801fd54:	9309      	str	r3, [sp, #36]	; 0x24
 801fd56:	e768      	b.n	801fc2a <_svfiprintf_r+0x4e>
 801fd58:	fb0c 3202 	mla	r2, ip, r2, r3
 801fd5c:	460c      	mov	r4, r1
 801fd5e:	2001      	movs	r0, #1
 801fd60:	e7a6      	b.n	801fcb0 <_svfiprintf_r+0xd4>
 801fd62:	2300      	movs	r3, #0
 801fd64:	3401      	adds	r4, #1
 801fd66:	9305      	str	r3, [sp, #20]
 801fd68:	4619      	mov	r1, r3
 801fd6a:	f04f 0c0a 	mov.w	ip, #10
 801fd6e:	4620      	mov	r0, r4
 801fd70:	f810 2b01 	ldrb.w	r2, [r0], #1
 801fd74:	3a30      	subs	r2, #48	; 0x30
 801fd76:	2a09      	cmp	r2, #9
 801fd78:	d903      	bls.n	801fd82 <_svfiprintf_r+0x1a6>
 801fd7a:	2b00      	cmp	r3, #0
 801fd7c:	d0c6      	beq.n	801fd0c <_svfiprintf_r+0x130>
 801fd7e:	9105      	str	r1, [sp, #20]
 801fd80:	e7c4      	b.n	801fd0c <_svfiprintf_r+0x130>
 801fd82:	fb0c 2101 	mla	r1, ip, r1, r2
 801fd86:	4604      	mov	r4, r0
 801fd88:	2301      	movs	r3, #1
 801fd8a:	e7f0      	b.n	801fd6e <_svfiprintf_r+0x192>
 801fd8c:	ab03      	add	r3, sp, #12
 801fd8e:	9300      	str	r3, [sp, #0]
 801fd90:	462a      	mov	r2, r5
 801fd92:	4b0f      	ldr	r3, [pc, #60]	; (801fdd0 <_svfiprintf_r+0x1f4>)
 801fd94:	a904      	add	r1, sp, #16
 801fd96:	4638      	mov	r0, r7
 801fd98:	f3af 8000 	nop.w
 801fd9c:	1c42      	adds	r2, r0, #1
 801fd9e:	4606      	mov	r6, r0
 801fda0:	d1d6      	bne.n	801fd50 <_svfiprintf_r+0x174>
 801fda2:	89ab      	ldrh	r3, [r5, #12]
 801fda4:	065b      	lsls	r3, r3, #25
 801fda6:	f53f af2d 	bmi.w	801fc04 <_svfiprintf_r+0x28>
 801fdaa:	9809      	ldr	r0, [sp, #36]	; 0x24
 801fdac:	b01d      	add	sp, #116	; 0x74
 801fdae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fdb2:	ab03      	add	r3, sp, #12
 801fdb4:	9300      	str	r3, [sp, #0]
 801fdb6:	462a      	mov	r2, r5
 801fdb8:	4b05      	ldr	r3, [pc, #20]	; (801fdd0 <_svfiprintf_r+0x1f4>)
 801fdba:	a904      	add	r1, sp, #16
 801fdbc:	4638      	mov	r0, r7
 801fdbe:	f000 fa4b 	bl	8020258 <_printf_i>
 801fdc2:	e7eb      	b.n	801fd9c <_svfiprintf_r+0x1c0>
 801fdc4:	08022a3c 	.word	0x08022a3c
 801fdc8:	08022a46 	.word	0x08022a46
 801fdcc:	00000000 	.word	0x00000000
 801fdd0:	0801fb29 	.word	0x0801fb29
 801fdd4:	08022a42 	.word	0x08022a42

0801fdd8 <_sungetc_r>:
 801fdd8:	b538      	push	{r3, r4, r5, lr}
 801fdda:	1c4b      	adds	r3, r1, #1
 801fddc:	4614      	mov	r4, r2
 801fdde:	d103      	bne.n	801fde8 <_sungetc_r+0x10>
 801fde0:	f04f 35ff 	mov.w	r5, #4294967295
 801fde4:	4628      	mov	r0, r5
 801fde6:	bd38      	pop	{r3, r4, r5, pc}
 801fde8:	8993      	ldrh	r3, [r2, #12]
 801fdea:	f023 0320 	bic.w	r3, r3, #32
 801fdee:	8193      	strh	r3, [r2, #12]
 801fdf0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801fdf2:	6852      	ldr	r2, [r2, #4]
 801fdf4:	b2cd      	uxtb	r5, r1
 801fdf6:	b18b      	cbz	r3, 801fe1c <_sungetc_r+0x44>
 801fdf8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801fdfa:	4293      	cmp	r3, r2
 801fdfc:	dd08      	ble.n	801fe10 <_sungetc_r+0x38>
 801fdfe:	6823      	ldr	r3, [r4, #0]
 801fe00:	1e5a      	subs	r2, r3, #1
 801fe02:	6022      	str	r2, [r4, #0]
 801fe04:	f803 5c01 	strb.w	r5, [r3, #-1]
 801fe08:	6863      	ldr	r3, [r4, #4]
 801fe0a:	3301      	adds	r3, #1
 801fe0c:	6063      	str	r3, [r4, #4]
 801fe0e:	e7e9      	b.n	801fde4 <_sungetc_r+0xc>
 801fe10:	4621      	mov	r1, r4
 801fe12:	f000 fcca 	bl	80207aa <__submore>
 801fe16:	2800      	cmp	r0, #0
 801fe18:	d0f1      	beq.n	801fdfe <_sungetc_r+0x26>
 801fe1a:	e7e1      	b.n	801fde0 <_sungetc_r+0x8>
 801fe1c:	6921      	ldr	r1, [r4, #16]
 801fe1e:	6823      	ldr	r3, [r4, #0]
 801fe20:	b151      	cbz	r1, 801fe38 <_sungetc_r+0x60>
 801fe22:	4299      	cmp	r1, r3
 801fe24:	d208      	bcs.n	801fe38 <_sungetc_r+0x60>
 801fe26:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 801fe2a:	42a9      	cmp	r1, r5
 801fe2c:	d104      	bne.n	801fe38 <_sungetc_r+0x60>
 801fe2e:	3b01      	subs	r3, #1
 801fe30:	3201      	adds	r2, #1
 801fe32:	6023      	str	r3, [r4, #0]
 801fe34:	6062      	str	r2, [r4, #4]
 801fe36:	e7d5      	b.n	801fde4 <_sungetc_r+0xc>
 801fe38:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 801fe3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801fe40:	6363      	str	r3, [r4, #52]	; 0x34
 801fe42:	2303      	movs	r3, #3
 801fe44:	63a3      	str	r3, [r4, #56]	; 0x38
 801fe46:	4623      	mov	r3, r4
 801fe48:	f803 5f46 	strb.w	r5, [r3, #70]!
 801fe4c:	6023      	str	r3, [r4, #0]
 801fe4e:	2301      	movs	r3, #1
 801fe50:	e7dc      	b.n	801fe0c <_sungetc_r+0x34>

0801fe52 <__ssrefill_r>:
 801fe52:	b510      	push	{r4, lr}
 801fe54:	460c      	mov	r4, r1
 801fe56:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801fe58:	b169      	cbz	r1, 801fe76 <__ssrefill_r+0x24>
 801fe5a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801fe5e:	4299      	cmp	r1, r3
 801fe60:	d001      	beq.n	801fe66 <__ssrefill_r+0x14>
 801fe62:	f7ff fd69 	bl	801f938 <_free_r>
 801fe66:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801fe68:	6063      	str	r3, [r4, #4]
 801fe6a:	2000      	movs	r0, #0
 801fe6c:	6360      	str	r0, [r4, #52]	; 0x34
 801fe6e:	b113      	cbz	r3, 801fe76 <__ssrefill_r+0x24>
 801fe70:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801fe72:	6023      	str	r3, [r4, #0]
 801fe74:	bd10      	pop	{r4, pc}
 801fe76:	6923      	ldr	r3, [r4, #16]
 801fe78:	6023      	str	r3, [r4, #0]
 801fe7a:	2300      	movs	r3, #0
 801fe7c:	6063      	str	r3, [r4, #4]
 801fe7e:	89a3      	ldrh	r3, [r4, #12]
 801fe80:	f043 0320 	orr.w	r3, r3, #32
 801fe84:	81a3      	strh	r3, [r4, #12]
 801fe86:	f04f 30ff 	mov.w	r0, #4294967295
 801fe8a:	e7f3      	b.n	801fe74 <__ssrefill_r+0x22>

0801fe8c <__ssvfiscanf_r>:
 801fe8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801fe90:	460c      	mov	r4, r1
 801fe92:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 801fe96:	2100      	movs	r1, #0
 801fe98:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 801fe9c:	49a6      	ldr	r1, [pc, #664]	; (8020138 <__ssvfiscanf_r+0x2ac>)
 801fe9e:	91a0      	str	r1, [sp, #640]	; 0x280
 801fea0:	f10d 0804 	add.w	r8, sp, #4
 801fea4:	49a5      	ldr	r1, [pc, #660]	; (802013c <__ssvfiscanf_r+0x2b0>)
 801fea6:	4fa6      	ldr	r7, [pc, #664]	; (8020140 <__ssvfiscanf_r+0x2b4>)
 801fea8:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8020144 <__ssvfiscanf_r+0x2b8>
 801feac:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 801feb0:	4606      	mov	r6, r0
 801feb2:	91a1      	str	r1, [sp, #644]	; 0x284
 801feb4:	9300      	str	r3, [sp, #0]
 801feb6:	7813      	ldrb	r3, [r2, #0]
 801feb8:	2b00      	cmp	r3, #0
 801feba:	f000 815a 	beq.w	8020172 <__ssvfiscanf_r+0x2e6>
 801febe:	5cf9      	ldrb	r1, [r7, r3]
 801fec0:	f011 0108 	ands.w	r1, r1, #8
 801fec4:	f102 0501 	add.w	r5, r2, #1
 801fec8:	d019      	beq.n	801fefe <__ssvfiscanf_r+0x72>
 801feca:	6863      	ldr	r3, [r4, #4]
 801fecc:	2b00      	cmp	r3, #0
 801fece:	dd0f      	ble.n	801fef0 <__ssvfiscanf_r+0x64>
 801fed0:	6823      	ldr	r3, [r4, #0]
 801fed2:	781a      	ldrb	r2, [r3, #0]
 801fed4:	5cba      	ldrb	r2, [r7, r2]
 801fed6:	0712      	lsls	r2, r2, #28
 801fed8:	d401      	bmi.n	801fede <__ssvfiscanf_r+0x52>
 801feda:	462a      	mov	r2, r5
 801fedc:	e7eb      	b.n	801feb6 <__ssvfiscanf_r+0x2a>
 801fede:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801fee0:	3201      	adds	r2, #1
 801fee2:	9245      	str	r2, [sp, #276]	; 0x114
 801fee4:	6862      	ldr	r2, [r4, #4]
 801fee6:	3301      	adds	r3, #1
 801fee8:	3a01      	subs	r2, #1
 801feea:	6062      	str	r2, [r4, #4]
 801feec:	6023      	str	r3, [r4, #0]
 801feee:	e7ec      	b.n	801feca <__ssvfiscanf_r+0x3e>
 801fef0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801fef2:	4621      	mov	r1, r4
 801fef4:	4630      	mov	r0, r6
 801fef6:	4798      	blx	r3
 801fef8:	2800      	cmp	r0, #0
 801fefa:	d0e9      	beq.n	801fed0 <__ssvfiscanf_r+0x44>
 801fefc:	e7ed      	b.n	801feda <__ssvfiscanf_r+0x4e>
 801fefe:	2b25      	cmp	r3, #37	; 0x25
 801ff00:	d012      	beq.n	801ff28 <__ssvfiscanf_r+0x9c>
 801ff02:	469a      	mov	sl, r3
 801ff04:	6863      	ldr	r3, [r4, #4]
 801ff06:	2b00      	cmp	r3, #0
 801ff08:	f340 8091 	ble.w	802002e <__ssvfiscanf_r+0x1a2>
 801ff0c:	6822      	ldr	r2, [r4, #0]
 801ff0e:	7813      	ldrb	r3, [r2, #0]
 801ff10:	4553      	cmp	r3, sl
 801ff12:	f040 812e 	bne.w	8020172 <__ssvfiscanf_r+0x2e6>
 801ff16:	6863      	ldr	r3, [r4, #4]
 801ff18:	3b01      	subs	r3, #1
 801ff1a:	6063      	str	r3, [r4, #4]
 801ff1c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 801ff1e:	3201      	adds	r2, #1
 801ff20:	3301      	adds	r3, #1
 801ff22:	6022      	str	r2, [r4, #0]
 801ff24:	9345      	str	r3, [sp, #276]	; 0x114
 801ff26:	e7d8      	b.n	801feda <__ssvfiscanf_r+0x4e>
 801ff28:	9141      	str	r1, [sp, #260]	; 0x104
 801ff2a:	9143      	str	r1, [sp, #268]	; 0x10c
 801ff2c:	7853      	ldrb	r3, [r2, #1]
 801ff2e:	2b2a      	cmp	r3, #42	; 0x2a
 801ff30:	bf02      	ittt	eq
 801ff32:	2310      	moveq	r3, #16
 801ff34:	1c95      	addeq	r5, r2, #2
 801ff36:	9341      	streq	r3, [sp, #260]	; 0x104
 801ff38:	220a      	movs	r2, #10
 801ff3a:	46aa      	mov	sl, r5
 801ff3c:	f81a 1b01 	ldrb.w	r1, [sl], #1
 801ff40:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 801ff44:	2b09      	cmp	r3, #9
 801ff46:	d91c      	bls.n	801ff82 <__ssvfiscanf_r+0xf6>
 801ff48:	487e      	ldr	r0, [pc, #504]	; (8020144 <__ssvfiscanf_r+0x2b8>)
 801ff4a:	2203      	movs	r2, #3
 801ff4c:	f7e0 faf8 	bl	8000540 <memchr>
 801ff50:	b138      	cbz	r0, 801ff62 <__ssvfiscanf_r+0xd6>
 801ff52:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801ff54:	eba0 0009 	sub.w	r0, r0, r9
 801ff58:	2301      	movs	r3, #1
 801ff5a:	4083      	lsls	r3, r0
 801ff5c:	4313      	orrs	r3, r2
 801ff5e:	9341      	str	r3, [sp, #260]	; 0x104
 801ff60:	4655      	mov	r5, sl
 801ff62:	f815 3b01 	ldrb.w	r3, [r5], #1
 801ff66:	2b78      	cmp	r3, #120	; 0x78
 801ff68:	d806      	bhi.n	801ff78 <__ssvfiscanf_r+0xec>
 801ff6a:	2b57      	cmp	r3, #87	; 0x57
 801ff6c:	d810      	bhi.n	801ff90 <__ssvfiscanf_r+0x104>
 801ff6e:	2b25      	cmp	r3, #37	; 0x25
 801ff70:	d0c7      	beq.n	801ff02 <__ssvfiscanf_r+0x76>
 801ff72:	d857      	bhi.n	8020024 <__ssvfiscanf_r+0x198>
 801ff74:	2b00      	cmp	r3, #0
 801ff76:	d065      	beq.n	8020044 <__ssvfiscanf_r+0x1b8>
 801ff78:	2303      	movs	r3, #3
 801ff7a:	9347      	str	r3, [sp, #284]	; 0x11c
 801ff7c:	230a      	movs	r3, #10
 801ff7e:	9342      	str	r3, [sp, #264]	; 0x108
 801ff80:	e076      	b.n	8020070 <__ssvfiscanf_r+0x1e4>
 801ff82:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 801ff84:	fb02 1103 	mla	r1, r2, r3, r1
 801ff88:	3930      	subs	r1, #48	; 0x30
 801ff8a:	9143      	str	r1, [sp, #268]	; 0x10c
 801ff8c:	4655      	mov	r5, sl
 801ff8e:	e7d4      	b.n	801ff3a <__ssvfiscanf_r+0xae>
 801ff90:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 801ff94:	2a20      	cmp	r2, #32
 801ff96:	d8ef      	bhi.n	801ff78 <__ssvfiscanf_r+0xec>
 801ff98:	a101      	add	r1, pc, #4	; (adr r1, 801ffa0 <__ssvfiscanf_r+0x114>)
 801ff9a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801ff9e:	bf00      	nop
 801ffa0:	08020053 	.word	0x08020053
 801ffa4:	0801ff79 	.word	0x0801ff79
 801ffa8:	0801ff79 	.word	0x0801ff79
 801ffac:	080200b1 	.word	0x080200b1
 801ffb0:	0801ff79 	.word	0x0801ff79
 801ffb4:	0801ff79 	.word	0x0801ff79
 801ffb8:	0801ff79 	.word	0x0801ff79
 801ffbc:	0801ff79 	.word	0x0801ff79
 801ffc0:	0801ff79 	.word	0x0801ff79
 801ffc4:	0801ff79 	.word	0x0801ff79
 801ffc8:	0801ff79 	.word	0x0801ff79
 801ffcc:	080200c7 	.word	0x080200c7
 801ffd0:	080200ad 	.word	0x080200ad
 801ffd4:	0802002b 	.word	0x0802002b
 801ffd8:	0802002b 	.word	0x0802002b
 801ffdc:	0802002b 	.word	0x0802002b
 801ffe0:	0801ff79 	.word	0x0801ff79
 801ffe4:	08020069 	.word	0x08020069
 801ffe8:	0801ff79 	.word	0x0801ff79
 801ffec:	0801ff79 	.word	0x0801ff79
 801fff0:	0801ff79 	.word	0x0801ff79
 801fff4:	0801ff79 	.word	0x0801ff79
 801fff8:	080200d7 	.word	0x080200d7
 801fffc:	080200a5 	.word	0x080200a5
 8020000:	0802004b 	.word	0x0802004b
 8020004:	0801ff79 	.word	0x0801ff79
 8020008:	0801ff79 	.word	0x0801ff79
 802000c:	080200d3 	.word	0x080200d3
 8020010:	0801ff79 	.word	0x0801ff79
 8020014:	080200ad 	.word	0x080200ad
 8020018:	0801ff79 	.word	0x0801ff79
 802001c:	0801ff79 	.word	0x0801ff79
 8020020:	08020053 	.word	0x08020053
 8020024:	3b45      	subs	r3, #69	; 0x45
 8020026:	2b02      	cmp	r3, #2
 8020028:	d8a6      	bhi.n	801ff78 <__ssvfiscanf_r+0xec>
 802002a:	2305      	movs	r3, #5
 802002c:	e01f      	b.n	802006e <__ssvfiscanf_r+0x1e2>
 802002e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8020030:	4621      	mov	r1, r4
 8020032:	4630      	mov	r0, r6
 8020034:	4798      	blx	r3
 8020036:	2800      	cmp	r0, #0
 8020038:	f43f af68 	beq.w	801ff0c <__ssvfiscanf_r+0x80>
 802003c:	9844      	ldr	r0, [sp, #272]	; 0x110
 802003e:	2800      	cmp	r0, #0
 8020040:	f040 808d 	bne.w	802015e <__ssvfiscanf_r+0x2d2>
 8020044:	f04f 30ff 	mov.w	r0, #4294967295
 8020048:	e08f      	b.n	802016a <__ssvfiscanf_r+0x2de>
 802004a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 802004c:	f042 0220 	orr.w	r2, r2, #32
 8020050:	9241      	str	r2, [sp, #260]	; 0x104
 8020052:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8020054:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8020058:	9241      	str	r2, [sp, #260]	; 0x104
 802005a:	2210      	movs	r2, #16
 802005c:	2b6f      	cmp	r3, #111	; 0x6f
 802005e:	9242      	str	r2, [sp, #264]	; 0x108
 8020060:	bf34      	ite	cc
 8020062:	2303      	movcc	r3, #3
 8020064:	2304      	movcs	r3, #4
 8020066:	e002      	b.n	802006e <__ssvfiscanf_r+0x1e2>
 8020068:	2300      	movs	r3, #0
 802006a:	9342      	str	r3, [sp, #264]	; 0x108
 802006c:	2303      	movs	r3, #3
 802006e:	9347      	str	r3, [sp, #284]	; 0x11c
 8020070:	6863      	ldr	r3, [r4, #4]
 8020072:	2b00      	cmp	r3, #0
 8020074:	dd3d      	ble.n	80200f2 <__ssvfiscanf_r+0x266>
 8020076:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8020078:	0659      	lsls	r1, r3, #25
 802007a:	d404      	bmi.n	8020086 <__ssvfiscanf_r+0x1fa>
 802007c:	6823      	ldr	r3, [r4, #0]
 802007e:	781a      	ldrb	r2, [r3, #0]
 8020080:	5cba      	ldrb	r2, [r7, r2]
 8020082:	0712      	lsls	r2, r2, #28
 8020084:	d43c      	bmi.n	8020100 <__ssvfiscanf_r+0x274>
 8020086:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8020088:	2b02      	cmp	r3, #2
 802008a:	dc4b      	bgt.n	8020124 <__ssvfiscanf_r+0x298>
 802008c:	466b      	mov	r3, sp
 802008e:	4622      	mov	r2, r4
 8020090:	a941      	add	r1, sp, #260	; 0x104
 8020092:	4630      	mov	r0, r6
 8020094:	f000 fa02 	bl	802049c <_scanf_chars>
 8020098:	2801      	cmp	r0, #1
 802009a:	d06a      	beq.n	8020172 <__ssvfiscanf_r+0x2e6>
 802009c:	2802      	cmp	r0, #2
 802009e:	f47f af1c 	bne.w	801feda <__ssvfiscanf_r+0x4e>
 80200a2:	e7cb      	b.n	802003c <__ssvfiscanf_r+0x1b0>
 80200a4:	2308      	movs	r3, #8
 80200a6:	9342      	str	r3, [sp, #264]	; 0x108
 80200a8:	2304      	movs	r3, #4
 80200aa:	e7e0      	b.n	802006e <__ssvfiscanf_r+0x1e2>
 80200ac:	220a      	movs	r2, #10
 80200ae:	e7d5      	b.n	802005c <__ssvfiscanf_r+0x1d0>
 80200b0:	4629      	mov	r1, r5
 80200b2:	4640      	mov	r0, r8
 80200b4:	f000 fb40 	bl	8020738 <__sccl>
 80200b8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80200ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80200be:	9341      	str	r3, [sp, #260]	; 0x104
 80200c0:	4605      	mov	r5, r0
 80200c2:	2301      	movs	r3, #1
 80200c4:	e7d3      	b.n	802006e <__ssvfiscanf_r+0x1e2>
 80200c6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80200c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80200cc:	9341      	str	r3, [sp, #260]	; 0x104
 80200ce:	2300      	movs	r3, #0
 80200d0:	e7cd      	b.n	802006e <__ssvfiscanf_r+0x1e2>
 80200d2:	2302      	movs	r3, #2
 80200d4:	e7cb      	b.n	802006e <__ssvfiscanf_r+0x1e2>
 80200d6:	9841      	ldr	r0, [sp, #260]	; 0x104
 80200d8:	06c3      	lsls	r3, r0, #27
 80200da:	f53f aefe 	bmi.w	801feda <__ssvfiscanf_r+0x4e>
 80200de:	9b00      	ldr	r3, [sp, #0]
 80200e0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80200e2:	1d19      	adds	r1, r3, #4
 80200e4:	9100      	str	r1, [sp, #0]
 80200e6:	681b      	ldr	r3, [r3, #0]
 80200e8:	07c0      	lsls	r0, r0, #31
 80200ea:	bf4c      	ite	mi
 80200ec:	801a      	strhmi	r2, [r3, #0]
 80200ee:	601a      	strpl	r2, [r3, #0]
 80200f0:	e6f3      	b.n	801feda <__ssvfiscanf_r+0x4e>
 80200f2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80200f4:	4621      	mov	r1, r4
 80200f6:	4630      	mov	r0, r6
 80200f8:	4798      	blx	r3
 80200fa:	2800      	cmp	r0, #0
 80200fc:	d0bb      	beq.n	8020076 <__ssvfiscanf_r+0x1ea>
 80200fe:	e79d      	b.n	802003c <__ssvfiscanf_r+0x1b0>
 8020100:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8020102:	3201      	adds	r2, #1
 8020104:	9245      	str	r2, [sp, #276]	; 0x114
 8020106:	6862      	ldr	r2, [r4, #4]
 8020108:	3a01      	subs	r2, #1
 802010a:	2a00      	cmp	r2, #0
 802010c:	6062      	str	r2, [r4, #4]
 802010e:	dd02      	ble.n	8020116 <__ssvfiscanf_r+0x28a>
 8020110:	3301      	adds	r3, #1
 8020112:	6023      	str	r3, [r4, #0]
 8020114:	e7b2      	b.n	802007c <__ssvfiscanf_r+0x1f0>
 8020116:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8020118:	4621      	mov	r1, r4
 802011a:	4630      	mov	r0, r6
 802011c:	4798      	blx	r3
 802011e:	2800      	cmp	r0, #0
 8020120:	d0ac      	beq.n	802007c <__ssvfiscanf_r+0x1f0>
 8020122:	e78b      	b.n	802003c <__ssvfiscanf_r+0x1b0>
 8020124:	2b04      	cmp	r3, #4
 8020126:	dc0f      	bgt.n	8020148 <__ssvfiscanf_r+0x2bc>
 8020128:	466b      	mov	r3, sp
 802012a:	4622      	mov	r2, r4
 802012c:	a941      	add	r1, sp, #260	; 0x104
 802012e:	4630      	mov	r0, r6
 8020130:	f000 fa0e 	bl	8020550 <_scanf_i>
 8020134:	e7b0      	b.n	8020098 <__ssvfiscanf_r+0x20c>
 8020136:	bf00      	nop
 8020138:	0801fdd9 	.word	0x0801fdd9
 802013c:	0801fe53 	.word	0x0801fe53
 8020140:	08022a8b 	.word	0x08022a8b
 8020144:	08022a42 	.word	0x08022a42
 8020148:	4b0b      	ldr	r3, [pc, #44]	; (8020178 <__ssvfiscanf_r+0x2ec>)
 802014a:	2b00      	cmp	r3, #0
 802014c:	f43f aec5 	beq.w	801feda <__ssvfiscanf_r+0x4e>
 8020150:	466b      	mov	r3, sp
 8020152:	4622      	mov	r2, r4
 8020154:	a941      	add	r1, sp, #260	; 0x104
 8020156:	4630      	mov	r0, r6
 8020158:	f3af 8000 	nop.w
 802015c:	e79c      	b.n	8020098 <__ssvfiscanf_r+0x20c>
 802015e:	89a3      	ldrh	r3, [r4, #12]
 8020160:	f013 0f40 	tst.w	r3, #64	; 0x40
 8020164:	bf18      	it	ne
 8020166:	f04f 30ff 	movne.w	r0, #4294967295
 802016a:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 802016e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020172:	9844      	ldr	r0, [sp, #272]	; 0x110
 8020174:	e7f9      	b.n	802016a <__ssvfiscanf_r+0x2de>
 8020176:	bf00      	nop
 8020178:	00000000 	.word	0x00000000

0802017c <_printf_common>:
 802017c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020180:	4616      	mov	r6, r2
 8020182:	4699      	mov	r9, r3
 8020184:	688a      	ldr	r2, [r1, #8]
 8020186:	690b      	ldr	r3, [r1, #16]
 8020188:	f8dd 8020 	ldr.w	r8, [sp, #32]
 802018c:	4293      	cmp	r3, r2
 802018e:	bfb8      	it	lt
 8020190:	4613      	movlt	r3, r2
 8020192:	6033      	str	r3, [r6, #0]
 8020194:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8020198:	4607      	mov	r7, r0
 802019a:	460c      	mov	r4, r1
 802019c:	b10a      	cbz	r2, 80201a2 <_printf_common+0x26>
 802019e:	3301      	adds	r3, #1
 80201a0:	6033      	str	r3, [r6, #0]
 80201a2:	6823      	ldr	r3, [r4, #0]
 80201a4:	0699      	lsls	r1, r3, #26
 80201a6:	bf42      	ittt	mi
 80201a8:	6833      	ldrmi	r3, [r6, #0]
 80201aa:	3302      	addmi	r3, #2
 80201ac:	6033      	strmi	r3, [r6, #0]
 80201ae:	6825      	ldr	r5, [r4, #0]
 80201b0:	f015 0506 	ands.w	r5, r5, #6
 80201b4:	d106      	bne.n	80201c4 <_printf_common+0x48>
 80201b6:	f104 0a19 	add.w	sl, r4, #25
 80201ba:	68e3      	ldr	r3, [r4, #12]
 80201bc:	6832      	ldr	r2, [r6, #0]
 80201be:	1a9b      	subs	r3, r3, r2
 80201c0:	42ab      	cmp	r3, r5
 80201c2:	dc26      	bgt.n	8020212 <_printf_common+0x96>
 80201c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80201c8:	1e13      	subs	r3, r2, #0
 80201ca:	6822      	ldr	r2, [r4, #0]
 80201cc:	bf18      	it	ne
 80201ce:	2301      	movne	r3, #1
 80201d0:	0692      	lsls	r2, r2, #26
 80201d2:	d42b      	bmi.n	802022c <_printf_common+0xb0>
 80201d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80201d8:	4649      	mov	r1, r9
 80201da:	4638      	mov	r0, r7
 80201dc:	47c0      	blx	r8
 80201de:	3001      	adds	r0, #1
 80201e0:	d01e      	beq.n	8020220 <_printf_common+0xa4>
 80201e2:	6823      	ldr	r3, [r4, #0]
 80201e4:	6922      	ldr	r2, [r4, #16]
 80201e6:	f003 0306 	and.w	r3, r3, #6
 80201ea:	2b04      	cmp	r3, #4
 80201ec:	bf02      	ittt	eq
 80201ee:	68e5      	ldreq	r5, [r4, #12]
 80201f0:	6833      	ldreq	r3, [r6, #0]
 80201f2:	1aed      	subeq	r5, r5, r3
 80201f4:	68a3      	ldr	r3, [r4, #8]
 80201f6:	bf0c      	ite	eq
 80201f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80201fc:	2500      	movne	r5, #0
 80201fe:	4293      	cmp	r3, r2
 8020200:	bfc4      	itt	gt
 8020202:	1a9b      	subgt	r3, r3, r2
 8020204:	18ed      	addgt	r5, r5, r3
 8020206:	2600      	movs	r6, #0
 8020208:	341a      	adds	r4, #26
 802020a:	42b5      	cmp	r5, r6
 802020c:	d11a      	bne.n	8020244 <_printf_common+0xc8>
 802020e:	2000      	movs	r0, #0
 8020210:	e008      	b.n	8020224 <_printf_common+0xa8>
 8020212:	2301      	movs	r3, #1
 8020214:	4652      	mov	r2, sl
 8020216:	4649      	mov	r1, r9
 8020218:	4638      	mov	r0, r7
 802021a:	47c0      	blx	r8
 802021c:	3001      	adds	r0, #1
 802021e:	d103      	bne.n	8020228 <_printf_common+0xac>
 8020220:	f04f 30ff 	mov.w	r0, #4294967295
 8020224:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020228:	3501      	adds	r5, #1
 802022a:	e7c6      	b.n	80201ba <_printf_common+0x3e>
 802022c:	18e1      	adds	r1, r4, r3
 802022e:	1c5a      	adds	r2, r3, #1
 8020230:	2030      	movs	r0, #48	; 0x30
 8020232:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8020236:	4422      	add	r2, r4
 8020238:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 802023c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8020240:	3302      	adds	r3, #2
 8020242:	e7c7      	b.n	80201d4 <_printf_common+0x58>
 8020244:	2301      	movs	r3, #1
 8020246:	4622      	mov	r2, r4
 8020248:	4649      	mov	r1, r9
 802024a:	4638      	mov	r0, r7
 802024c:	47c0      	blx	r8
 802024e:	3001      	adds	r0, #1
 8020250:	d0e6      	beq.n	8020220 <_printf_common+0xa4>
 8020252:	3601      	adds	r6, #1
 8020254:	e7d9      	b.n	802020a <_printf_common+0x8e>
	...

08020258 <_printf_i>:
 8020258:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802025c:	7e0f      	ldrb	r7, [r1, #24]
 802025e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8020260:	2f78      	cmp	r7, #120	; 0x78
 8020262:	4691      	mov	r9, r2
 8020264:	4680      	mov	r8, r0
 8020266:	460c      	mov	r4, r1
 8020268:	469a      	mov	sl, r3
 802026a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 802026e:	d807      	bhi.n	8020280 <_printf_i+0x28>
 8020270:	2f62      	cmp	r7, #98	; 0x62
 8020272:	d80a      	bhi.n	802028a <_printf_i+0x32>
 8020274:	2f00      	cmp	r7, #0
 8020276:	f000 80d4 	beq.w	8020422 <_printf_i+0x1ca>
 802027a:	2f58      	cmp	r7, #88	; 0x58
 802027c:	f000 80c0 	beq.w	8020400 <_printf_i+0x1a8>
 8020280:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8020284:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8020288:	e03a      	b.n	8020300 <_printf_i+0xa8>
 802028a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 802028e:	2b15      	cmp	r3, #21
 8020290:	d8f6      	bhi.n	8020280 <_printf_i+0x28>
 8020292:	a101      	add	r1, pc, #4	; (adr r1, 8020298 <_printf_i+0x40>)
 8020294:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8020298:	080202f1 	.word	0x080202f1
 802029c:	08020305 	.word	0x08020305
 80202a0:	08020281 	.word	0x08020281
 80202a4:	08020281 	.word	0x08020281
 80202a8:	08020281 	.word	0x08020281
 80202ac:	08020281 	.word	0x08020281
 80202b0:	08020305 	.word	0x08020305
 80202b4:	08020281 	.word	0x08020281
 80202b8:	08020281 	.word	0x08020281
 80202bc:	08020281 	.word	0x08020281
 80202c0:	08020281 	.word	0x08020281
 80202c4:	08020409 	.word	0x08020409
 80202c8:	08020331 	.word	0x08020331
 80202cc:	080203c3 	.word	0x080203c3
 80202d0:	08020281 	.word	0x08020281
 80202d4:	08020281 	.word	0x08020281
 80202d8:	0802042b 	.word	0x0802042b
 80202dc:	08020281 	.word	0x08020281
 80202e0:	08020331 	.word	0x08020331
 80202e4:	08020281 	.word	0x08020281
 80202e8:	08020281 	.word	0x08020281
 80202ec:	080203cb 	.word	0x080203cb
 80202f0:	682b      	ldr	r3, [r5, #0]
 80202f2:	1d1a      	adds	r2, r3, #4
 80202f4:	681b      	ldr	r3, [r3, #0]
 80202f6:	602a      	str	r2, [r5, #0]
 80202f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80202fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8020300:	2301      	movs	r3, #1
 8020302:	e09f      	b.n	8020444 <_printf_i+0x1ec>
 8020304:	6820      	ldr	r0, [r4, #0]
 8020306:	682b      	ldr	r3, [r5, #0]
 8020308:	0607      	lsls	r7, r0, #24
 802030a:	f103 0104 	add.w	r1, r3, #4
 802030e:	6029      	str	r1, [r5, #0]
 8020310:	d501      	bpl.n	8020316 <_printf_i+0xbe>
 8020312:	681e      	ldr	r6, [r3, #0]
 8020314:	e003      	b.n	802031e <_printf_i+0xc6>
 8020316:	0646      	lsls	r6, r0, #25
 8020318:	d5fb      	bpl.n	8020312 <_printf_i+0xba>
 802031a:	f9b3 6000 	ldrsh.w	r6, [r3]
 802031e:	2e00      	cmp	r6, #0
 8020320:	da03      	bge.n	802032a <_printf_i+0xd2>
 8020322:	232d      	movs	r3, #45	; 0x2d
 8020324:	4276      	negs	r6, r6
 8020326:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802032a:	485a      	ldr	r0, [pc, #360]	; (8020494 <_printf_i+0x23c>)
 802032c:	230a      	movs	r3, #10
 802032e:	e012      	b.n	8020356 <_printf_i+0xfe>
 8020330:	682b      	ldr	r3, [r5, #0]
 8020332:	6820      	ldr	r0, [r4, #0]
 8020334:	1d19      	adds	r1, r3, #4
 8020336:	6029      	str	r1, [r5, #0]
 8020338:	0605      	lsls	r5, r0, #24
 802033a:	d501      	bpl.n	8020340 <_printf_i+0xe8>
 802033c:	681e      	ldr	r6, [r3, #0]
 802033e:	e002      	b.n	8020346 <_printf_i+0xee>
 8020340:	0641      	lsls	r1, r0, #25
 8020342:	d5fb      	bpl.n	802033c <_printf_i+0xe4>
 8020344:	881e      	ldrh	r6, [r3, #0]
 8020346:	4853      	ldr	r0, [pc, #332]	; (8020494 <_printf_i+0x23c>)
 8020348:	2f6f      	cmp	r7, #111	; 0x6f
 802034a:	bf0c      	ite	eq
 802034c:	2308      	moveq	r3, #8
 802034e:	230a      	movne	r3, #10
 8020350:	2100      	movs	r1, #0
 8020352:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8020356:	6865      	ldr	r5, [r4, #4]
 8020358:	60a5      	str	r5, [r4, #8]
 802035a:	2d00      	cmp	r5, #0
 802035c:	bfa2      	ittt	ge
 802035e:	6821      	ldrge	r1, [r4, #0]
 8020360:	f021 0104 	bicge.w	r1, r1, #4
 8020364:	6021      	strge	r1, [r4, #0]
 8020366:	b90e      	cbnz	r6, 802036c <_printf_i+0x114>
 8020368:	2d00      	cmp	r5, #0
 802036a:	d04b      	beq.n	8020404 <_printf_i+0x1ac>
 802036c:	4615      	mov	r5, r2
 802036e:	fbb6 f1f3 	udiv	r1, r6, r3
 8020372:	fb03 6711 	mls	r7, r3, r1, r6
 8020376:	5dc7      	ldrb	r7, [r0, r7]
 8020378:	f805 7d01 	strb.w	r7, [r5, #-1]!
 802037c:	4637      	mov	r7, r6
 802037e:	42bb      	cmp	r3, r7
 8020380:	460e      	mov	r6, r1
 8020382:	d9f4      	bls.n	802036e <_printf_i+0x116>
 8020384:	2b08      	cmp	r3, #8
 8020386:	d10b      	bne.n	80203a0 <_printf_i+0x148>
 8020388:	6823      	ldr	r3, [r4, #0]
 802038a:	07de      	lsls	r6, r3, #31
 802038c:	d508      	bpl.n	80203a0 <_printf_i+0x148>
 802038e:	6923      	ldr	r3, [r4, #16]
 8020390:	6861      	ldr	r1, [r4, #4]
 8020392:	4299      	cmp	r1, r3
 8020394:	bfde      	ittt	le
 8020396:	2330      	movle	r3, #48	; 0x30
 8020398:	f805 3c01 	strble.w	r3, [r5, #-1]
 802039c:	f105 35ff 	addle.w	r5, r5, #4294967295
 80203a0:	1b52      	subs	r2, r2, r5
 80203a2:	6122      	str	r2, [r4, #16]
 80203a4:	f8cd a000 	str.w	sl, [sp]
 80203a8:	464b      	mov	r3, r9
 80203aa:	aa03      	add	r2, sp, #12
 80203ac:	4621      	mov	r1, r4
 80203ae:	4640      	mov	r0, r8
 80203b0:	f7ff fee4 	bl	802017c <_printf_common>
 80203b4:	3001      	adds	r0, #1
 80203b6:	d14a      	bne.n	802044e <_printf_i+0x1f6>
 80203b8:	f04f 30ff 	mov.w	r0, #4294967295
 80203bc:	b004      	add	sp, #16
 80203be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80203c2:	6823      	ldr	r3, [r4, #0]
 80203c4:	f043 0320 	orr.w	r3, r3, #32
 80203c8:	6023      	str	r3, [r4, #0]
 80203ca:	4833      	ldr	r0, [pc, #204]	; (8020498 <_printf_i+0x240>)
 80203cc:	2778      	movs	r7, #120	; 0x78
 80203ce:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80203d2:	6823      	ldr	r3, [r4, #0]
 80203d4:	6829      	ldr	r1, [r5, #0]
 80203d6:	061f      	lsls	r7, r3, #24
 80203d8:	f851 6b04 	ldr.w	r6, [r1], #4
 80203dc:	d402      	bmi.n	80203e4 <_printf_i+0x18c>
 80203de:	065f      	lsls	r7, r3, #25
 80203e0:	bf48      	it	mi
 80203e2:	b2b6      	uxthmi	r6, r6
 80203e4:	07df      	lsls	r7, r3, #31
 80203e6:	bf48      	it	mi
 80203e8:	f043 0320 	orrmi.w	r3, r3, #32
 80203ec:	6029      	str	r1, [r5, #0]
 80203ee:	bf48      	it	mi
 80203f0:	6023      	strmi	r3, [r4, #0]
 80203f2:	b91e      	cbnz	r6, 80203fc <_printf_i+0x1a4>
 80203f4:	6823      	ldr	r3, [r4, #0]
 80203f6:	f023 0320 	bic.w	r3, r3, #32
 80203fa:	6023      	str	r3, [r4, #0]
 80203fc:	2310      	movs	r3, #16
 80203fe:	e7a7      	b.n	8020350 <_printf_i+0xf8>
 8020400:	4824      	ldr	r0, [pc, #144]	; (8020494 <_printf_i+0x23c>)
 8020402:	e7e4      	b.n	80203ce <_printf_i+0x176>
 8020404:	4615      	mov	r5, r2
 8020406:	e7bd      	b.n	8020384 <_printf_i+0x12c>
 8020408:	682b      	ldr	r3, [r5, #0]
 802040a:	6826      	ldr	r6, [r4, #0]
 802040c:	6961      	ldr	r1, [r4, #20]
 802040e:	1d18      	adds	r0, r3, #4
 8020410:	6028      	str	r0, [r5, #0]
 8020412:	0635      	lsls	r5, r6, #24
 8020414:	681b      	ldr	r3, [r3, #0]
 8020416:	d501      	bpl.n	802041c <_printf_i+0x1c4>
 8020418:	6019      	str	r1, [r3, #0]
 802041a:	e002      	b.n	8020422 <_printf_i+0x1ca>
 802041c:	0670      	lsls	r0, r6, #25
 802041e:	d5fb      	bpl.n	8020418 <_printf_i+0x1c0>
 8020420:	8019      	strh	r1, [r3, #0]
 8020422:	2300      	movs	r3, #0
 8020424:	6123      	str	r3, [r4, #16]
 8020426:	4615      	mov	r5, r2
 8020428:	e7bc      	b.n	80203a4 <_printf_i+0x14c>
 802042a:	682b      	ldr	r3, [r5, #0]
 802042c:	1d1a      	adds	r2, r3, #4
 802042e:	602a      	str	r2, [r5, #0]
 8020430:	681d      	ldr	r5, [r3, #0]
 8020432:	6862      	ldr	r2, [r4, #4]
 8020434:	2100      	movs	r1, #0
 8020436:	4628      	mov	r0, r5
 8020438:	f7e0 f882 	bl	8000540 <memchr>
 802043c:	b108      	cbz	r0, 8020442 <_printf_i+0x1ea>
 802043e:	1b40      	subs	r0, r0, r5
 8020440:	6060      	str	r0, [r4, #4]
 8020442:	6863      	ldr	r3, [r4, #4]
 8020444:	6123      	str	r3, [r4, #16]
 8020446:	2300      	movs	r3, #0
 8020448:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802044c:	e7aa      	b.n	80203a4 <_printf_i+0x14c>
 802044e:	6923      	ldr	r3, [r4, #16]
 8020450:	462a      	mov	r2, r5
 8020452:	4649      	mov	r1, r9
 8020454:	4640      	mov	r0, r8
 8020456:	47d0      	blx	sl
 8020458:	3001      	adds	r0, #1
 802045a:	d0ad      	beq.n	80203b8 <_printf_i+0x160>
 802045c:	6823      	ldr	r3, [r4, #0]
 802045e:	079b      	lsls	r3, r3, #30
 8020460:	d413      	bmi.n	802048a <_printf_i+0x232>
 8020462:	68e0      	ldr	r0, [r4, #12]
 8020464:	9b03      	ldr	r3, [sp, #12]
 8020466:	4298      	cmp	r0, r3
 8020468:	bfb8      	it	lt
 802046a:	4618      	movlt	r0, r3
 802046c:	e7a6      	b.n	80203bc <_printf_i+0x164>
 802046e:	2301      	movs	r3, #1
 8020470:	4632      	mov	r2, r6
 8020472:	4649      	mov	r1, r9
 8020474:	4640      	mov	r0, r8
 8020476:	47d0      	blx	sl
 8020478:	3001      	adds	r0, #1
 802047a:	d09d      	beq.n	80203b8 <_printf_i+0x160>
 802047c:	3501      	adds	r5, #1
 802047e:	68e3      	ldr	r3, [r4, #12]
 8020480:	9903      	ldr	r1, [sp, #12]
 8020482:	1a5b      	subs	r3, r3, r1
 8020484:	42ab      	cmp	r3, r5
 8020486:	dcf2      	bgt.n	802046e <_printf_i+0x216>
 8020488:	e7eb      	b.n	8020462 <_printf_i+0x20a>
 802048a:	2500      	movs	r5, #0
 802048c:	f104 0619 	add.w	r6, r4, #25
 8020490:	e7f5      	b.n	802047e <_printf_i+0x226>
 8020492:	bf00      	nop
 8020494:	08022a4d 	.word	0x08022a4d
 8020498:	08022a5e 	.word	0x08022a5e

0802049c <_scanf_chars>:
 802049c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80204a0:	4615      	mov	r5, r2
 80204a2:	688a      	ldr	r2, [r1, #8]
 80204a4:	4680      	mov	r8, r0
 80204a6:	460c      	mov	r4, r1
 80204a8:	b932      	cbnz	r2, 80204b8 <_scanf_chars+0x1c>
 80204aa:	698a      	ldr	r2, [r1, #24]
 80204ac:	2a00      	cmp	r2, #0
 80204ae:	bf0c      	ite	eq
 80204b0:	2201      	moveq	r2, #1
 80204b2:	f04f 32ff 	movne.w	r2, #4294967295
 80204b6:	608a      	str	r2, [r1, #8]
 80204b8:	6822      	ldr	r2, [r4, #0]
 80204ba:	f8df 9090 	ldr.w	r9, [pc, #144]	; 802054c <_scanf_chars+0xb0>
 80204be:	06d1      	lsls	r1, r2, #27
 80204c0:	bf5f      	itttt	pl
 80204c2:	681a      	ldrpl	r2, [r3, #0]
 80204c4:	1d11      	addpl	r1, r2, #4
 80204c6:	6019      	strpl	r1, [r3, #0]
 80204c8:	6816      	ldrpl	r6, [r2, #0]
 80204ca:	2700      	movs	r7, #0
 80204cc:	69a0      	ldr	r0, [r4, #24]
 80204ce:	b188      	cbz	r0, 80204f4 <_scanf_chars+0x58>
 80204d0:	2801      	cmp	r0, #1
 80204d2:	d107      	bne.n	80204e4 <_scanf_chars+0x48>
 80204d4:	682a      	ldr	r2, [r5, #0]
 80204d6:	7811      	ldrb	r1, [r2, #0]
 80204d8:	6962      	ldr	r2, [r4, #20]
 80204da:	5c52      	ldrb	r2, [r2, r1]
 80204dc:	b952      	cbnz	r2, 80204f4 <_scanf_chars+0x58>
 80204de:	2f00      	cmp	r7, #0
 80204e0:	d031      	beq.n	8020546 <_scanf_chars+0xaa>
 80204e2:	e022      	b.n	802052a <_scanf_chars+0x8e>
 80204e4:	2802      	cmp	r0, #2
 80204e6:	d120      	bne.n	802052a <_scanf_chars+0x8e>
 80204e8:	682b      	ldr	r3, [r5, #0]
 80204ea:	781b      	ldrb	r3, [r3, #0]
 80204ec:	f819 3003 	ldrb.w	r3, [r9, r3]
 80204f0:	071b      	lsls	r3, r3, #28
 80204f2:	d41a      	bmi.n	802052a <_scanf_chars+0x8e>
 80204f4:	6823      	ldr	r3, [r4, #0]
 80204f6:	06da      	lsls	r2, r3, #27
 80204f8:	bf5e      	ittt	pl
 80204fa:	682b      	ldrpl	r3, [r5, #0]
 80204fc:	781b      	ldrbpl	r3, [r3, #0]
 80204fe:	f806 3b01 	strbpl.w	r3, [r6], #1
 8020502:	682a      	ldr	r2, [r5, #0]
 8020504:	686b      	ldr	r3, [r5, #4]
 8020506:	3201      	adds	r2, #1
 8020508:	602a      	str	r2, [r5, #0]
 802050a:	68a2      	ldr	r2, [r4, #8]
 802050c:	3b01      	subs	r3, #1
 802050e:	3a01      	subs	r2, #1
 8020510:	606b      	str	r3, [r5, #4]
 8020512:	3701      	adds	r7, #1
 8020514:	60a2      	str	r2, [r4, #8]
 8020516:	b142      	cbz	r2, 802052a <_scanf_chars+0x8e>
 8020518:	2b00      	cmp	r3, #0
 802051a:	dcd7      	bgt.n	80204cc <_scanf_chars+0x30>
 802051c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8020520:	4629      	mov	r1, r5
 8020522:	4640      	mov	r0, r8
 8020524:	4798      	blx	r3
 8020526:	2800      	cmp	r0, #0
 8020528:	d0d0      	beq.n	80204cc <_scanf_chars+0x30>
 802052a:	6823      	ldr	r3, [r4, #0]
 802052c:	f013 0310 	ands.w	r3, r3, #16
 8020530:	d105      	bne.n	802053e <_scanf_chars+0xa2>
 8020532:	68e2      	ldr	r2, [r4, #12]
 8020534:	3201      	adds	r2, #1
 8020536:	60e2      	str	r2, [r4, #12]
 8020538:	69a2      	ldr	r2, [r4, #24]
 802053a:	b102      	cbz	r2, 802053e <_scanf_chars+0xa2>
 802053c:	7033      	strb	r3, [r6, #0]
 802053e:	6923      	ldr	r3, [r4, #16]
 8020540:	443b      	add	r3, r7
 8020542:	6123      	str	r3, [r4, #16]
 8020544:	2000      	movs	r0, #0
 8020546:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802054a:	bf00      	nop
 802054c:	08022a8b 	.word	0x08022a8b

08020550 <_scanf_i>:
 8020550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020554:	4698      	mov	r8, r3
 8020556:	4b74      	ldr	r3, [pc, #464]	; (8020728 <_scanf_i+0x1d8>)
 8020558:	460c      	mov	r4, r1
 802055a:	4682      	mov	sl, r0
 802055c:	4616      	mov	r6, r2
 802055e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8020562:	b087      	sub	sp, #28
 8020564:	ab03      	add	r3, sp, #12
 8020566:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 802056a:	4b70      	ldr	r3, [pc, #448]	; (802072c <_scanf_i+0x1dc>)
 802056c:	69a1      	ldr	r1, [r4, #24]
 802056e:	4a70      	ldr	r2, [pc, #448]	; (8020730 <_scanf_i+0x1e0>)
 8020570:	2903      	cmp	r1, #3
 8020572:	bf18      	it	ne
 8020574:	461a      	movne	r2, r3
 8020576:	68a3      	ldr	r3, [r4, #8]
 8020578:	9201      	str	r2, [sp, #4]
 802057a:	1e5a      	subs	r2, r3, #1
 802057c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8020580:	bf88      	it	hi
 8020582:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8020586:	4627      	mov	r7, r4
 8020588:	bf82      	ittt	hi
 802058a:	eb03 0905 	addhi.w	r9, r3, r5
 802058e:	f240 135d 	movwhi	r3, #349	; 0x15d
 8020592:	60a3      	strhi	r3, [r4, #8]
 8020594:	f857 3b1c 	ldr.w	r3, [r7], #28
 8020598:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 802059c:	bf98      	it	ls
 802059e:	f04f 0900 	movls.w	r9, #0
 80205a2:	6023      	str	r3, [r4, #0]
 80205a4:	463d      	mov	r5, r7
 80205a6:	f04f 0b00 	mov.w	fp, #0
 80205aa:	6831      	ldr	r1, [r6, #0]
 80205ac:	ab03      	add	r3, sp, #12
 80205ae:	7809      	ldrb	r1, [r1, #0]
 80205b0:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80205b4:	2202      	movs	r2, #2
 80205b6:	f7df ffc3 	bl	8000540 <memchr>
 80205ba:	b328      	cbz	r0, 8020608 <_scanf_i+0xb8>
 80205bc:	f1bb 0f01 	cmp.w	fp, #1
 80205c0:	d159      	bne.n	8020676 <_scanf_i+0x126>
 80205c2:	6862      	ldr	r2, [r4, #4]
 80205c4:	b92a      	cbnz	r2, 80205d2 <_scanf_i+0x82>
 80205c6:	6822      	ldr	r2, [r4, #0]
 80205c8:	2308      	movs	r3, #8
 80205ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80205ce:	6063      	str	r3, [r4, #4]
 80205d0:	6022      	str	r2, [r4, #0]
 80205d2:	6822      	ldr	r2, [r4, #0]
 80205d4:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80205d8:	6022      	str	r2, [r4, #0]
 80205da:	68a2      	ldr	r2, [r4, #8]
 80205dc:	1e51      	subs	r1, r2, #1
 80205de:	60a1      	str	r1, [r4, #8]
 80205e0:	b192      	cbz	r2, 8020608 <_scanf_i+0xb8>
 80205e2:	6832      	ldr	r2, [r6, #0]
 80205e4:	1c51      	adds	r1, r2, #1
 80205e6:	6031      	str	r1, [r6, #0]
 80205e8:	7812      	ldrb	r2, [r2, #0]
 80205ea:	f805 2b01 	strb.w	r2, [r5], #1
 80205ee:	6872      	ldr	r2, [r6, #4]
 80205f0:	3a01      	subs	r2, #1
 80205f2:	2a00      	cmp	r2, #0
 80205f4:	6072      	str	r2, [r6, #4]
 80205f6:	dc07      	bgt.n	8020608 <_scanf_i+0xb8>
 80205f8:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 80205fc:	4631      	mov	r1, r6
 80205fe:	4650      	mov	r0, sl
 8020600:	4790      	blx	r2
 8020602:	2800      	cmp	r0, #0
 8020604:	f040 8085 	bne.w	8020712 <_scanf_i+0x1c2>
 8020608:	f10b 0b01 	add.w	fp, fp, #1
 802060c:	f1bb 0f03 	cmp.w	fp, #3
 8020610:	d1cb      	bne.n	80205aa <_scanf_i+0x5a>
 8020612:	6863      	ldr	r3, [r4, #4]
 8020614:	b90b      	cbnz	r3, 802061a <_scanf_i+0xca>
 8020616:	230a      	movs	r3, #10
 8020618:	6063      	str	r3, [r4, #4]
 802061a:	6863      	ldr	r3, [r4, #4]
 802061c:	4945      	ldr	r1, [pc, #276]	; (8020734 <_scanf_i+0x1e4>)
 802061e:	6960      	ldr	r0, [r4, #20]
 8020620:	1ac9      	subs	r1, r1, r3
 8020622:	f000 f889 	bl	8020738 <__sccl>
 8020626:	f04f 0b00 	mov.w	fp, #0
 802062a:	68a3      	ldr	r3, [r4, #8]
 802062c:	6822      	ldr	r2, [r4, #0]
 802062e:	2b00      	cmp	r3, #0
 8020630:	d03d      	beq.n	80206ae <_scanf_i+0x15e>
 8020632:	6831      	ldr	r1, [r6, #0]
 8020634:	6960      	ldr	r0, [r4, #20]
 8020636:	f891 c000 	ldrb.w	ip, [r1]
 802063a:	f810 000c 	ldrb.w	r0, [r0, ip]
 802063e:	2800      	cmp	r0, #0
 8020640:	d035      	beq.n	80206ae <_scanf_i+0x15e>
 8020642:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8020646:	d124      	bne.n	8020692 <_scanf_i+0x142>
 8020648:	0510      	lsls	r0, r2, #20
 802064a:	d522      	bpl.n	8020692 <_scanf_i+0x142>
 802064c:	f10b 0b01 	add.w	fp, fp, #1
 8020650:	f1b9 0f00 	cmp.w	r9, #0
 8020654:	d003      	beq.n	802065e <_scanf_i+0x10e>
 8020656:	3301      	adds	r3, #1
 8020658:	f109 39ff 	add.w	r9, r9, #4294967295
 802065c:	60a3      	str	r3, [r4, #8]
 802065e:	6873      	ldr	r3, [r6, #4]
 8020660:	3b01      	subs	r3, #1
 8020662:	2b00      	cmp	r3, #0
 8020664:	6073      	str	r3, [r6, #4]
 8020666:	dd1b      	ble.n	80206a0 <_scanf_i+0x150>
 8020668:	6833      	ldr	r3, [r6, #0]
 802066a:	3301      	adds	r3, #1
 802066c:	6033      	str	r3, [r6, #0]
 802066e:	68a3      	ldr	r3, [r4, #8]
 8020670:	3b01      	subs	r3, #1
 8020672:	60a3      	str	r3, [r4, #8]
 8020674:	e7d9      	b.n	802062a <_scanf_i+0xda>
 8020676:	f1bb 0f02 	cmp.w	fp, #2
 802067a:	d1ae      	bne.n	80205da <_scanf_i+0x8a>
 802067c:	6822      	ldr	r2, [r4, #0]
 802067e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8020682:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8020686:	d1bf      	bne.n	8020608 <_scanf_i+0xb8>
 8020688:	2310      	movs	r3, #16
 802068a:	6063      	str	r3, [r4, #4]
 802068c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8020690:	e7a2      	b.n	80205d8 <_scanf_i+0x88>
 8020692:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8020696:	6022      	str	r2, [r4, #0]
 8020698:	780b      	ldrb	r3, [r1, #0]
 802069a:	f805 3b01 	strb.w	r3, [r5], #1
 802069e:	e7de      	b.n	802065e <_scanf_i+0x10e>
 80206a0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80206a4:	4631      	mov	r1, r6
 80206a6:	4650      	mov	r0, sl
 80206a8:	4798      	blx	r3
 80206aa:	2800      	cmp	r0, #0
 80206ac:	d0df      	beq.n	802066e <_scanf_i+0x11e>
 80206ae:	6823      	ldr	r3, [r4, #0]
 80206b0:	05d9      	lsls	r1, r3, #23
 80206b2:	d50d      	bpl.n	80206d0 <_scanf_i+0x180>
 80206b4:	42bd      	cmp	r5, r7
 80206b6:	d909      	bls.n	80206cc <_scanf_i+0x17c>
 80206b8:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80206bc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80206c0:	4632      	mov	r2, r6
 80206c2:	4650      	mov	r0, sl
 80206c4:	4798      	blx	r3
 80206c6:	f105 39ff 	add.w	r9, r5, #4294967295
 80206ca:	464d      	mov	r5, r9
 80206cc:	42bd      	cmp	r5, r7
 80206ce:	d028      	beq.n	8020722 <_scanf_i+0x1d2>
 80206d0:	6822      	ldr	r2, [r4, #0]
 80206d2:	f012 0210 	ands.w	r2, r2, #16
 80206d6:	d113      	bne.n	8020700 <_scanf_i+0x1b0>
 80206d8:	702a      	strb	r2, [r5, #0]
 80206da:	6863      	ldr	r3, [r4, #4]
 80206dc:	9e01      	ldr	r6, [sp, #4]
 80206de:	4639      	mov	r1, r7
 80206e0:	4650      	mov	r0, sl
 80206e2:	47b0      	blx	r6
 80206e4:	f8d8 3000 	ldr.w	r3, [r8]
 80206e8:	6821      	ldr	r1, [r4, #0]
 80206ea:	1d1a      	adds	r2, r3, #4
 80206ec:	f8c8 2000 	str.w	r2, [r8]
 80206f0:	f011 0f20 	tst.w	r1, #32
 80206f4:	681b      	ldr	r3, [r3, #0]
 80206f6:	d00f      	beq.n	8020718 <_scanf_i+0x1c8>
 80206f8:	6018      	str	r0, [r3, #0]
 80206fa:	68e3      	ldr	r3, [r4, #12]
 80206fc:	3301      	adds	r3, #1
 80206fe:	60e3      	str	r3, [r4, #12]
 8020700:	6923      	ldr	r3, [r4, #16]
 8020702:	1bed      	subs	r5, r5, r7
 8020704:	445d      	add	r5, fp
 8020706:	442b      	add	r3, r5
 8020708:	6123      	str	r3, [r4, #16]
 802070a:	2000      	movs	r0, #0
 802070c:	b007      	add	sp, #28
 802070e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020712:	f04f 0b00 	mov.w	fp, #0
 8020716:	e7ca      	b.n	80206ae <_scanf_i+0x15e>
 8020718:	07ca      	lsls	r2, r1, #31
 802071a:	bf4c      	ite	mi
 802071c:	8018      	strhmi	r0, [r3, #0]
 802071e:	6018      	strpl	r0, [r3, #0]
 8020720:	e7eb      	b.n	80206fa <_scanf_i+0x1aa>
 8020722:	2001      	movs	r0, #1
 8020724:	e7f2      	b.n	802070c <_scanf_i+0x1bc>
 8020726:	bf00      	nop
 8020728:	08020e90 	.word	0x08020e90
 802072c:	08020ac1 	.word	0x08020ac1
 8020730:	080209d9 	.word	0x080209d9
 8020734:	08022a7f 	.word	0x08022a7f

08020738 <__sccl>:
 8020738:	b570      	push	{r4, r5, r6, lr}
 802073a:	780b      	ldrb	r3, [r1, #0]
 802073c:	4604      	mov	r4, r0
 802073e:	2b5e      	cmp	r3, #94	; 0x5e
 8020740:	bf0b      	itete	eq
 8020742:	784b      	ldrbeq	r3, [r1, #1]
 8020744:	1c4a      	addne	r2, r1, #1
 8020746:	1c8a      	addeq	r2, r1, #2
 8020748:	2100      	movne	r1, #0
 802074a:	bf08      	it	eq
 802074c:	2101      	moveq	r1, #1
 802074e:	3801      	subs	r0, #1
 8020750:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8020754:	f800 1f01 	strb.w	r1, [r0, #1]!
 8020758:	42a8      	cmp	r0, r5
 802075a:	d1fb      	bne.n	8020754 <__sccl+0x1c>
 802075c:	b90b      	cbnz	r3, 8020762 <__sccl+0x2a>
 802075e:	1e50      	subs	r0, r2, #1
 8020760:	bd70      	pop	{r4, r5, r6, pc}
 8020762:	f081 0101 	eor.w	r1, r1, #1
 8020766:	54e1      	strb	r1, [r4, r3]
 8020768:	4610      	mov	r0, r2
 802076a:	4602      	mov	r2, r0
 802076c:	f812 5b01 	ldrb.w	r5, [r2], #1
 8020770:	2d2d      	cmp	r5, #45	; 0x2d
 8020772:	d005      	beq.n	8020780 <__sccl+0x48>
 8020774:	2d5d      	cmp	r5, #93	; 0x5d
 8020776:	d016      	beq.n	80207a6 <__sccl+0x6e>
 8020778:	2d00      	cmp	r5, #0
 802077a:	d0f1      	beq.n	8020760 <__sccl+0x28>
 802077c:	462b      	mov	r3, r5
 802077e:	e7f2      	b.n	8020766 <__sccl+0x2e>
 8020780:	7846      	ldrb	r6, [r0, #1]
 8020782:	2e5d      	cmp	r6, #93	; 0x5d
 8020784:	d0fa      	beq.n	802077c <__sccl+0x44>
 8020786:	42b3      	cmp	r3, r6
 8020788:	dcf8      	bgt.n	802077c <__sccl+0x44>
 802078a:	3002      	adds	r0, #2
 802078c:	461a      	mov	r2, r3
 802078e:	3201      	adds	r2, #1
 8020790:	4296      	cmp	r6, r2
 8020792:	54a1      	strb	r1, [r4, r2]
 8020794:	dcfb      	bgt.n	802078e <__sccl+0x56>
 8020796:	1af2      	subs	r2, r6, r3
 8020798:	3a01      	subs	r2, #1
 802079a:	1c5d      	adds	r5, r3, #1
 802079c:	42b3      	cmp	r3, r6
 802079e:	bfa8      	it	ge
 80207a0:	2200      	movge	r2, #0
 80207a2:	18ab      	adds	r3, r5, r2
 80207a4:	e7e1      	b.n	802076a <__sccl+0x32>
 80207a6:	4610      	mov	r0, r2
 80207a8:	e7da      	b.n	8020760 <__sccl+0x28>

080207aa <__submore>:
 80207aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80207ae:	460c      	mov	r4, r1
 80207b0:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80207b2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80207b6:	4299      	cmp	r1, r3
 80207b8:	d11d      	bne.n	80207f6 <__submore+0x4c>
 80207ba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80207be:	f7ff f927 	bl	801fa10 <_malloc_r>
 80207c2:	b918      	cbnz	r0, 80207cc <__submore+0x22>
 80207c4:	f04f 30ff 	mov.w	r0, #4294967295
 80207c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80207cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80207d0:	63a3      	str	r3, [r4, #56]	; 0x38
 80207d2:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80207d6:	6360      	str	r0, [r4, #52]	; 0x34
 80207d8:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80207dc:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80207e0:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80207e4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80207e8:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80207ec:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80207f0:	6020      	str	r0, [r4, #0]
 80207f2:	2000      	movs	r0, #0
 80207f4:	e7e8      	b.n	80207c8 <__submore+0x1e>
 80207f6:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80207f8:	0077      	lsls	r7, r6, #1
 80207fa:	463a      	mov	r2, r7
 80207fc:	f000 f83a 	bl	8020874 <_realloc_r>
 8020800:	4605      	mov	r5, r0
 8020802:	2800      	cmp	r0, #0
 8020804:	d0de      	beq.n	80207c4 <__submore+0x1a>
 8020806:	eb00 0806 	add.w	r8, r0, r6
 802080a:	4601      	mov	r1, r0
 802080c:	4632      	mov	r2, r6
 802080e:	4640      	mov	r0, r8
 8020810:	f7ff f884 	bl	801f91c <memcpy>
 8020814:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8020818:	f8c4 8000 	str.w	r8, [r4]
 802081c:	e7e9      	b.n	80207f2 <__submore+0x48>

0802081e <memmove>:
 802081e:	4288      	cmp	r0, r1
 8020820:	b510      	push	{r4, lr}
 8020822:	eb01 0402 	add.w	r4, r1, r2
 8020826:	d902      	bls.n	802082e <memmove+0x10>
 8020828:	4284      	cmp	r4, r0
 802082a:	4623      	mov	r3, r4
 802082c:	d807      	bhi.n	802083e <memmove+0x20>
 802082e:	1e43      	subs	r3, r0, #1
 8020830:	42a1      	cmp	r1, r4
 8020832:	d008      	beq.n	8020846 <memmove+0x28>
 8020834:	f811 2b01 	ldrb.w	r2, [r1], #1
 8020838:	f803 2f01 	strb.w	r2, [r3, #1]!
 802083c:	e7f8      	b.n	8020830 <memmove+0x12>
 802083e:	4402      	add	r2, r0
 8020840:	4601      	mov	r1, r0
 8020842:	428a      	cmp	r2, r1
 8020844:	d100      	bne.n	8020848 <memmove+0x2a>
 8020846:	bd10      	pop	{r4, pc}
 8020848:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 802084c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8020850:	e7f7      	b.n	8020842 <memmove+0x24>
	...

08020854 <_sbrk_r>:
 8020854:	b538      	push	{r3, r4, r5, lr}
 8020856:	4d06      	ldr	r5, [pc, #24]	; (8020870 <_sbrk_r+0x1c>)
 8020858:	2300      	movs	r3, #0
 802085a:	4604      	mov	r4, r0
 802085c:	4608      	mov	r0, r1
 802085e:	602b      	str	r3, [r5, #0]
 8020860:	f7e1 fe50 	bl	8002504 <_sbrk>
 8020864:	1c43      	adds	r3, r0, #1
 8020866:	d102      	bne.n	802086e <_sbrk_r+0x1a>
 8020868:	682b      	ldr	r3, [r5, #0]
 802086a:	b103      	cbz	r3, 802086e <_sbrk_r+0x1a>
 802086c:	6023      	str	r3, [r4, #0]
 802086e:	bd38      	pop	{r3, r4, r5, pc}
 8020870:	24005878 	.word	0x24005878

08020874 <_realloc_r>:
 8020874:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020878:	4680      	mov	r8, r0
 802087a:	4614      	mov	r4, r2
 802087c:	460e      	mov	r6, r1
 802087e:	b921      	cbnz	r1, 802088a <_realloc_r+0x16>
 8020880:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8020884:	4611      	mov	r1, r2
 8020886:	f7ff b8c3 	b.w	801fa10 <_malloc_r>
 802088a:	b92a      	cbnz	r2, 8020898 <_realloc_r+0x24>
 802088c:	f7ff f854 	bl	801f938 <_free_r>
 8020890:	4625      	mov	r5, r4
 8020892:	4628      	mov	r0, r5
 8020894:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020898:	f000 f914 	bl	8020ac4 <_malloc_usable_size_r>
 802089c:	4284      	cmp	r4, r0
 802089e:	4607      	mov	r7, r0
 80208a0:	d802      	bhi.n	80208a8 <_realloc_r+0x34>
 80208a2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80208a6:	d812      	bhi.n	80208ce <_realloc_r+0x5a>
 80208a8:	4621      	mov	r1, r4
 80208aa:	4640      	mov	r0, r8
 80208ac:	f7ff f8b0 	bl	801fa10 <_malloc_r>
 80208b0:	4605      	mov	r5, r0
 80208b2:	2800      	cmp	r0, #0
 80208b4:	d0ed      	beq.n	8020892 <_realloc_r+0x1e>
 80208b6:	42bc      	cmp	r4, r7
 80208b8:	4622      	mov	r2, r4
 80208ba:	4631      	mov	r1, r6
 80208bc:	bf28      	it	cs
 80208be:	463a      	movcs	r2, r7
 80208c0:	f7ff f82c 	bl	801f91c <memcpy>
 80208c4:	4631      	mov	r1, r6
 80208c6:	4640      	mov	r0, r8
 80208c8:	f7ff f836 	bl	801f938 <_free_r>
 80208cc:	e7e1      	b.n	8020892 <_realloc_r+0x1e>
 80208ce:	4635      	mov	r5, r6
 80208d0:	e7df      	b.n	8020892 <_realloc_r+0x1e>
	...

080208d4 <_strtol_l.constprop.0>:
 80208d4:	2b01      	cmp	r3, #1
 80208d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80208da:	d001      	beq.n	80208e0 <_strtol_l.constprop.0+0xc>
 80208dc:	2b24      	cmp	r3, #36	; 0x24
 80208de:	d906      	bls.n	80208ee <_strtol_l.constprop.0+0x1a>
 80208e0:	f7fe fff0 	bl	801f8c4 <__errno>
 80208e4:	2316      	movs	r3, #22
 80208e6:	6003      	str	r3, [r0, #0]
 80208e8:	2000      	movs	r0, #0
 80208ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80208ee:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80209d4 <_strtol_l.constprop.0+0x100>
 80208f2:	460d      	mov	r5, r1
 80208f4:	462e      	mov	r6, r5
 80208f6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80208fa:	f81c 7004 	ldrb.w	r7, [ip, r4]
 80208fe:	f017 0708 	ands.w	r7, r7, #8
 8020902:	d1f7      	bne.n	80208f4 <_strtol_l.constprop.0+0x20>
 8020904:	2c2d      	cmp	r4, #45	; 0x2d
 8020906:	d132      	bne.n	802096e <_strtol_l.constprop.0+0x9a>
 8020908:	782c      	ldrb	r4, [r5, #0]
 802090a:	2701      	movs	r7, #1
 802090c:	1cb5      	adds	r5, r6, #2
 802090e:	2b00      	cmp	r3, #0
 8020910:	d05b      	beq.n	80209ca <_strtol_l.constprop.0+0xf6>
 8020912:	2b10      	cmp	r3, #16
 8020914:	d109      	bne.n	802092a <_strtol_l.constprop.0+0x56>
 8020916:	2c30      	cmp	r4, #48	; 0x30
 8020918:	d107      	bne.n	802092a <_strtol_l.constprop.0+0x56>
 802091a:	782c      	ldrb	r4, [r5, #0]
 802091c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8020920:	2c58      	cmp	r4, #88	; 0x58
 8020922:	d14d      	bne.n	80209c0 <_strtol_l.constprop.0+0xec>
 8020924:	786c      	ldrb	r4, [r5, #1]
 8020926:	2310      	movs	r3, #16
 8020928:	3502      	adds	r5, #2
 802092a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 802092e:	f108 38ff 	add.w	r8, r8, #4294967295
 8020932:	f04f 0e00 	mov.w	lr, #0
 8020936:	fbb8 f9f3 	udiv	r9, r8, r3
 802093a:	4676      	mov	r6, lr
 802093c:	fb03 8a19 	mls	sl, r3, r9, r8
 8020940:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8020944:	f1bc 0f09 	cmp.w	ip, #9
 8020948:	d816      	bhi.n	8020978 <_strtol_l.constprop.0+0xa4>
 802094a:	4664      	mov	r4, ip
 802094c:	42a3      	cmp	r3, r4
 802094e:	dd24      	ble.n	802099a <_strtol_l.constprop.0+0xc6>
 8020950:	f1be 3fff 	cmp.w	lr, #4294967295
 8020954:	d008      	beq.n	8020968 <_strtol_l.constprop.0+0x94>
 8020956:	45b1      	cmp	r9, r6
 8020958:	d31c      	bcc.n	8020994 <_strtol_l.constprop.0+0xc0>
 802095a:	d101      	bne.n	8020960 <_strtol_l.constprop.0+0x8c>
 802095c:	45a2      	cmp	sl, r4
 802095e:	db19      	blt.n	8020994 <_strtol_l.constprop.0+0xc0>
 8020960:	fb06 4603 	mla	r6, r6, r3, r4
 8020964:	f04f 0e01 	mov.w	lr, #1
 8020968:	f815 4b01 	ldrb.w	r4, [r5], #1
 802096c:	e7e8      	b.n	8020940 <_strtol_l.constprop.0+0x6c>
 802096e:	2c2b      	cmp	r4, #43	; 0x2b
 8020970:	bf04      	itt	eq
 8020972:	782c      	ldrbeq	r4, [r5, #0]
 8020974:	1cb5      	addeq	r5, r6, #2
 8020976:	e7ca      	b.n	802090e <_strtol_l.constprop.0+0x3a>
 8020978:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 802097c:	f1bc 0f19 	cmp.w	ip, #25
 8020980:	d801      	bhi.n	8020986 <_strtol_l.constprop.0+0xb2>
 8020982:	3c37      	subs	r4, #55	; 0x37
 8020984:	e7e2      	b.n	802094c <_strtol_l.constprop.0+0x78>
 8020986:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 802098a:	f1bc 0f19 	cmp.w	ip, #25
 802098e:	d804      	bhi.n	802099a <_strtol_l.constprop.0+0xc6>
 8020990:	3c57      	subs	r4, #87	; 0x57
 8020992:	e7db      	b.n	802094c <_strtol_l.constprop.0+0x78>
 8020994:	f04f 3eff 	mov.w	lr, #4294967295
 8020998:	e7e6      	b.n	8020968 <_strtol_l.constprop.0+0x94>
 802099a:	f1be 3fff 	cmp.w	lr, #4294967295
 802099e:	d105      	bne.n	80209ac <_strtol_l.constprop.0+0xd8>
 80209a0:	2322      	movs	r3, #34	; 0x22
 80209a2:	6003      	str	r3, [r0, #0]
 80209a4:	4646      	mov	r6, r8
 80209a6:	b942      	cbnz	r2, 80209ba <_strtol_l.constprop.0+0xe6>
 80209a8:	4630      	mov	r0, r6
 80209aa:	e79e      	b.n	80208ea <_strtol_l.constprop.0+0x16>
 80209ac:	b107      	cbz	r7, 80209b0 <_strtol_l.constprop.0+0xdc>
 80209ae:	4276      	negs	r6, r6
 80209b0:	2a00      	cmp	r2, #0
 80209b2:	d0f9      	beq.n	80209a8 <_strtol_l.constprop.0+0xd4>
 80209b4:	f1be 0f00 	cmp.w	lr, #0
 80209b8:	d000      	beq.n	80209bc <_strtol_l.constprop.0+0xe8>
 80209ba:	1e69      	subs	r1, r5, #1
 80209bc:	6011      	str	r1, [r2, #0]
 80209be:	e7f3      	b.n	80209a8 <_strtol_l.constprop.0+0xd4>
 80209c0:	2430      	movs	r4, #48	; 0x30
 80209c2:	2b00      	cmp	r3, #0
 80209c4:	d1b1      	bne.n	802092a <_strtol_l.constprop.0+0x56>
 80209c6:	2308      	movs	r3, #8
 80209c8:	e7af      	b.n	802092a <_strtol_l.constprop.0+0x56>
 80209ca:	2c30      	cmp	r4, #48	; 0x30
 80209cc:	d0a5      	beq.n	802091a <_strtol_l.constprop.0+0x46>
 80209ce:	230a      	movs	r3, #10
 80209d0:	e7ab      	b.n	802092a <_strtol_l.constprop.0+0x56>
 80209d2:	bf00      	nop
 80209d4:	08022a8b 	.word	0x08022a8b

080209d8 <_strtol_r>:
 80209d8:	f7ff bf7c 	b.w	80208d4 <_strtol_l.constprop.0>

080209dc <_strtoul_l.constprop.0>:
 80209dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80209e0:	4f36      	ldr	r7, [pc, #216]	; (8020abc <_strtoul_l.constprop.0+0xe0>)
 80209e2:	4686      	mov	lr, r0
 80209e4:	460d      	mov	r5, r1
 80209e6:	4628      	mov	r0, r5
 80209e8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80209ec:	5d3e      	ldrb	r6, [r7, r4]
 80209ee:	f016 0608 	ands.w	r6, r6, #8
 80209f2:	d1f8      	bne.n	80209e6 <_strtoul_l.constprop.0+0xa>
 80209f4:	2c2d      	cmp	r4, #45	; 0x2d
 80209f6:	d130      	bne.n	8020a5a <_strtoul_l.constprop.0+0x7e>
 80209f8:	782c      	ldrb	r4, [r5, #0]
 80209fa:	2601      	movs	r6, #1
 80209fc:	1c85      	adds	r5, r0, #2
 80209fe:	2b00      	cmp	r3, #0
 8020a00:	d057      	beq.n	8020ab2 <_strtoul_l.constprop.0+0xd6>
 8020a02:	2b10      	cmp	r3, #16
 8020a04:	d109      	bne.n	8020a1a <_strtoul_l.constprop.0+0x3e>
 8020a06:	2c30      	cmp	r4, #48	; 0x30
 8020a08:	d107      	bne.n	8020a1a <_strtoul_l.constprop.0+0x3e>
 8020a0a:	7828      	ldrb	r0, [r5, #0]
 8020a0c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8020a10:	2858      	cmp	r0, #88	; 0x58
 8020a12:	d149      	bne.n	8020aa8 <_strtoul_l.constprop.0+0xcc>
 8020a14:	786c      	ldrb	r4, [r5, #1]
 8020a16:	2310      	movs	r3, #16
 8020a18:	3502      	adds	r5, #2
 8020a1a:	f04f 38ff 	mov.w	r8, #4294967295
 8020a1e:	2700      	movs	r7, #0
 8020a20:	fbb8 f8f3 	udiv	r8, r8, r3
 8020a24:	fb03 f908 	mul.w	r9, r3, r8
 8020a28:	ea6f 0909 	mvn.w	r9, r9
 8020a2c:	4638      	mov	r0, r7
 8020a2e:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8020a32:	f1bc 0f09 	cmp.w	ip, #9
 8020a36:	d815      	bhi.n	8020a64 <_strtoul_l.constprop.0+0x88>
 8020a38:	4664      	mov	r4, ip
 8020a3a:	42a3      	cmp	r3, r4
 8020a3c:	dd23      	ble.n	8020a86 <_strtoul_l.constprop.0+0xaa>
 8020a3e:	f1b7 3fff 	cmp.w	r7, #4294967295
 8020a42:	d007      	beq.n	8020a54 <_strtoul_l.constprop.0+0x78>
 8020a44:	4580      	cmp	r8, r0
 8020a46:	d31b      	bcc.n	8020a80 <_strtoul_l.constprop.0+0xa4>
 8020a48:	d101      	bne.n	8020a4e <_strtoul_l.constprop.0+0x72>
 8020a4a:	45a1      	cmp	r9, r4
 8020a4c:	db18      	blt.n	8020a80 <_strtoul_l.constprop.0+0xa4>
 8020a4e:	fb00 4003 	mla	r0, r0, r3, r4
 8020a52:	2701      	movs	r7, #1
 8020a54:	f815 4b01 	ldrb.w	r4, [r5], #1
 8020a58:	e7e9      	b.n	8020a2e <_strtoul_l.constprop.0+0x52>
 8020a5a:	2c2b      	cmp	r4, #43	; 0x2b
 8020a5c:	bf04      	itt	eq
 8020a5e:	782c      	ldrbeq	r4, [r5, #0]
 8020a60:	1c85      	addeq	r5, r0, #2
 8020a62:	e7cc      	b.n	80209fe <_strtoul_l.constprop.0+0x22>
 8020a64:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8020a68:	f1bc 0f19 	cmp.w	ip, #25
 8020a6c:	d801      	bhi.n	8020a72 <_strtoul_l.constprop.0+0x96>
 8020a6e:	3c37      	subs	r4, #55	; 0x37
 8020a70:	e7e3      	b.n	8020a3a <_strtoul_l.constprop.0+0x5e>
 8020a72:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8020a76:	f1bc 0f19 	cmp.w	ip, #25
 8020a7a:	d804      	bhi.n	8020a86 <_strtoul_l.constprop.0+0xaa>
 8020a7c:	3c57      	subs	r4, #87	; 0x57
 8020a7e:	e7dc      	b.n	8020a3a <_strtoul_l.constprop.0+0x5e>
 8020a80:	f04f 37ff 	mov.w	r7, #4294967295
 8020a84:	e7e6      	b.n	8020a54 <_strtoul_l.constprop.0+0x78>
 8020a86:	1c7b      	adds	r3, r7, #1
 8020a88:	d106      	bne.n	8020a98 <_strtoul_l.constprop.0+0xbc>
 8020a8a:	2322      	movs	r3, #34	; 0x22
 8020a8c:	f8ce 3000 	str.w	r3, [lr]
 8020a90:	4638      	mov	r0, r7
 8020a92:	b932      	cbnz	r2, 8020aa2 <_strtoul_l.constprop.0+0xc6>
 8020a94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8020a98:	b106      	cbz	r6, 8020a9c <_strtoul_l.constprop.0+0xc0>
 8020a9a:	4240      	negs	r0, r0
 8020a9c:	2a00      	cmp	r2, #0
 8020a9e:	d0f9      	beq.n	8020a94 <_strtoul_l.constprop.0+0xb8>
 8020aa0:	b107      	cbz	r7, 8020aa4 <_strtoul_l.constprop.0+0xc8>
 8020aa2:	1e69      	subs	r1, r5, #1
 8020aa4:	6011      	str	r1, [r2, #0]
 8020aa6:	e7f5      	b.n	8020a94 <_strtoul_l.constprop.0+0xb8>
 8020aa8:	2430      	movs	r4, #48	; 0x30
 8020aaa:	2b00      	cmp	r3, #0
 8020aac:	d1b5      	bne.n	8020a1a <_strtoul_l.constprop.0+0x3e>
 8020aae:	2308      	movs	r3, #8
 8020ab0:	e7b3      	b.n	8020a1a <_strtoul_l.constprop.0+0x3e>
 8020ab2:	2c30      	cmp	r4, #48	; 0x30
 8020ab4:	d0a9      	beq.n	8020a0a <_strtoul_l.constprop.0+0x2e>
 8020ab6:	230a      	movs	r3, #10
 8020ab8:	e7af      	b.n	8020a1a <_strtoul_l.constprop.0+0x3e>
 8020aba:	bf00      	nop
 8020abc:	08022a8b 	.word	0x08022a8b

08020ac0 <_strtoul_r>:
 8020ac0:	f7ff bf8c 	b.w	80209dc <_strtoul_l.constprop.0>

08020ac4 <_malloc_usable_size_r>:
 8020ac4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8020ac8:	1f18      	subs	r0, r3, #4
 8020aca:	2b00      	cmp	r3, #0
 8020acc:	bfbc      	itt	lt
 8020ace:	580b      	ldrlt	r3, [r1, r0]
 8020ad0:	18c0      	addlt	r0, r0, r3
 8020ad2:	4770      	bx	lr

08020ad4 <_init>:
 8020ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020ad6:	bf00      	nop
 8020ad8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8020ada:	bc08      	pop	{r3}
 8020adc:	469e      	mov	lr, r3
 8020ade:	4770      	bx	lr

08020ae0 <_fini>:
 8020ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020ae2:	bf00      	nop
 8020ae4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8020ae6:	bc08      	pop	{r3}
 8020ae8:	469e      	mov	lr, r3
 8020aea:	4770      	bx	lr
